<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Adw" version="1"/>
  <include name="Dex" version="1"/>
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="4.0"/>
  <include name="GtkSource" version="5"/>
  <include name="Panel" version="1"/>
  <include name="Peas" version="2"/>
  <include name="Template" version="1.0"/>
  <include name="Vte" version="3.91"/>
  <include name="WebKit" version="6.0"/>
  <c:include name="libide-code.h"/>
  <c:include name="libide-core.h"/>
  <c:include name="libide-debugger.h"/>
  <c:include name="libide-editor.h"/>
  <c:include name="libide-foundry.h"/>
  <c:include name="libide-greeter.h"/>
  <c:include name="libide-gtk.h"/>
  <c:include name="libide-gui.h"/>
  <c:include name="libide-io.h"/>
  <c:include name="libide-lsp.h"/>
  <c:include name="libide-plugins.h"/>
  <c:include name="libide-projects.h"/>
  <c:include name="libide-search.h"/>
  <c:include name="libide-sourceview.h"/>
  <c:include name="libide-terminal.h"/>
  <c:include name="libide-threading.h"/>
  <c:include name="libide-tree.h"/>
  <c:include name="libide-tweaks.h"/>
  <c:include name="libide-vcs.h"/>
  <c:include name="libide-webkit.h"/>
  <namespace name="Ide"
             version="45"
             shared-library=""
             c:identifier-prefixes="Ide"
             c:symbol-prefixes="ide">
    <alias name="DebuggerAddress" c:type="IdeDebuggerAddress">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="170"/>
      <type name="guint64" c:type="guint64"/>
    </alias>
    <alias name="PtyFd" c:type="IdePtyFd">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="36"/>
      <type name="gint" c:type="int"/>
    </alias>
    <record name="Action" c:type="IdeAction">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="47"/>
      <field name="next" writable="1">
        <type name="gpointer" c:type="const _IdeAction*"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="owner" writable="1">
        <type name="GType" c:type="GType"/>
      </field>
      <field name="parameter_type" writable="1">
        <type name="GLib.VariantType" c:type="const GVariantType*"/>
      </field>
      <field name="state_type" writable="1">
        <type name="GLib.VariantType" c:type="const GVariantType*"/>
      </field>
      <field name="pspec" writable="1">
        <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
      </field>
      <field name="activate" writable="1">
        <type name="ActionActivateFunc" c:type="IdeActionActivateFunc"/>
      </field>
      <field name="position" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <callback name="ActionActivateFunc" c:type="IdeActionActivateFunc">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="action_name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="param" transfer-ownership="none">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ActionMixin" c:type="IdeActionMixin">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="54"/>
      <field name="object_class" writable="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
      </field>
      <field name="actions" writable="1">
        <type name="Action" c:type="const IdeAction*"/>
      </field>
      <field name="n_actions" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <method name="constructed" c:identifier="ide_action_mixin_constructed">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mixin" transfer-ownership="none">
            <type name="ActionMixin" c:type="const IdeActionMixin*"/>
          </instance-parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="ide_action_mixin_init">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mixin" transfer-ownership="none">
            <type name="ActionMixin" c:type="IdeActionMixin*"/>
          </instance-parameter>
          <parameter name="object_class" transfer-ownership="none">
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_action"
              c:identifier="ide_action_mixin_install_action"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-action-muxer.c"
             line="894">This should be called at class initialization time to specify
actions to be added for all instances of this class.

Actions installed by this function are stateless. The only state
they have is whether they are enabled or not.</doc>
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mixin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="896">an `IdeActionMixin`</doc>
            <type name="ActionMixin" c:type="IdeActionMixin*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="897">a prefixed action name, such as "clipboard.paste"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="parameter_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="898">the parameter type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="activate"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="899">callback to use when the action is activated</doc>
            <type name="ActionActivateFunc" c:type="IdeActionActivateFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_property_action"
              c:identifier="ide_action_mixin_install_property_action"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-action-muxer.c"
             line="960">Installs an action called @action_name on @mmixin and
binds its state to the value of the @property_name property.

This function will perform a few santity checks on the property selected
via @property_name. Namely, the property must exist, must be readable,
writable and must not be construct-only. There are also restrictions
on the type of the given property, it must be boolean, int, unsigned int,
double or string. If any of these conditions are not met, a critical
warning will be printed and no action will be added.

The state type of the action matches the property type.

If the property is boolean, the action will have no parameter and
toggle the property value. Otherwise, the action will have a parameter
of the same type as the property.</doc>
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mixin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="962">an `IdeActionMixin`</doc>
            <type name="ActionMixin" c:type="IdeActionMixin*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="963">name of the action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="964">name of the property in instances of @mixin
  or any parent class.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <function name="get_action_muxer"
                c:identifier="ide_action_mixin_get_action_muxer"
                introspectable="0">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-action-muxer.c"
               line="1033">an #IdeActionMuxer or %NULL</doc>
          <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
        </return-value>
        <parameters>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="1031">a #IdeActionMuxer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_enabled" c:identifier="ide_action_mixin_set_enabled">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="ActionMuxer"
           c:symbol-prefix="action_muxer"
           c:type="IdeActionMuxer"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeActionMuxer"
           glib:get-type="ide_action_muxer_get_type"
           glib:type-struct="ActionMuxerClass">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="59"/>
      <implements name="Gio.ActionGroup"/>
      <constructor name="new" c:identifier="ide_action_muxer_new">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="83"/>
        <return-value transfer-ownership="full">
          <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
        </return-value>
      </constructor>
      <method name="connect_actions"
              c:identifier="ide_action_muxer_connect_actions">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="actions" transfer-ownership="none">
            <type name="Action" c:type="const IdeAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_action_group"
              c:identifier="ide_action_muxer_get_action_group">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-action-muxer.c"
             line="384">Locates the #GActionGroup inserted as @prefix.

If no group was found matching @group, %NULL is returned.</doc>
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="96"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-action-muxer.c"
               line="393">a #GActionGroup matching @prefix if
  found, otherwise %NULL.</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="386">a #IdeActionMuxer</doc>
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="387">the name of the inserted action group</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_action_group"
              c:identifier="ide_action_muxer_insert_action_group">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="action_group" transfer-ownership="none">
            <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_groups" c:identifier="ide_action_muxer_list_groups">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-action-muxer.c"
             line="159">Gets a list of group names in the muxer.</doc>
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-action-muxer.c"
               line="165">
  an array containing the names of groups within the muxer</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-action-muxer.c"
                 line="161">a #IdeActionMuxer</doc>
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_action_group"
              c:identifier="ide_action_muxer_remove_action_group">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_all" c:identifier="ide_action_muxer_remove_all">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled" c:identifier="ide_action_muxer_set_enabled">
        <source-position filename="src/libide/core/ide-action-muxer.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Action" c:type="const IdeAction*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="ActionMuxerClass"
            c:type="IdeActionMuxerClass"
            glib:is-gtype-struct-for="ActionMuxer">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Animation"
           c:symbol-prefix="animation"
           c:type="IdeAnimation"
           parent="GObject.InitiallyUnowned"
           glib:type-name="IdeAnimation"
           glib:get-type="ide_animation_get_type"
           glib:type-struct="AnimationClass">
      <source-position filename="src/libide/gtk/ide-animation.h" line="34"/>
      <function name="calculate_duration"
                c:identifier="ide_animation_calculate_duration">
        <source-position filename="src/libide/gtk/ide-animation.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="monitor" transfer-ownership="none">
            <type name="Gdk.Monitor" c:type="GdkMonitor*"/>
          </parameter>
          <parameter name="from_value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="to_value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_property" c:identifier="ide_animation_add_property">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="653">Adds a new property to the set of properties to be animated during the
lifetime of the animation.

Side effects: None.</doc>
        <source-position filename="src/libide/gtk/ide-animation.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="655">A #IdeAnimation.</doc>
            <type name="Animation" c:type="IdeAnimation*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="656">A #ParamSpec of @target or a #GtkWidget&lt;!-- --&gt;'s parent.</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="657">The new value for the property at the end of the animation.</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ide_animation_start">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="539">Start the animation. When the animation stops, the internal reference will
be dropped and the animation may be finalized.

Side effects: None.</doc>
        <source-position filename="src/libide/gtk/ide-animation.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="541">A #IdeAnimation.</doc>
            <type name="Animation" c:type="IdeAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ide_animation_stop">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="609">Stops a running animation. The internal reference to the animation is
dropped and therefore may cause the object to finalize.

As a convenience, this function accepts %NULL for @animation but
does nothing if that should occur.</doc>
        <source-position filename="src/libide/gtk/ide-animation.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="animation"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="611">A #IdeAnimation.</doc>
            <type name="Animation" c:type="IdeAnimation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="duration"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="250">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="814">The "duration" property is the total number of milliseconds that the
animation should run before being completed.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="frame-clock"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gdk.FrameClock"/>
      </property>
      <property name="mode"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="IDE_ANIMATION_LINEAR">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="840">The "mode" property is the Alpha function that should be used to
determine the offset within the animation based on the current
offset in the animations duration.</doc>
        <type name="AnimationMode"/>
      </property>
      <property name="target"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="857">The "target" property is the #GObject that should have its properties
animated.</doc>
        <type name="GObject.Object"/>
      </property>
      <glib:signal name="tick" when="first">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="874">The "tick" signal is emitted on each frame in the animation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="AnimationClass"
            c:type="IdeAnimationClass"
            glib:is-gtype-struct-for="Animation">
      <source-position filename="src/libide/gtk/ide-animation.h" line="34"/>
      <field name="parent_class">
        <type name="GObject.InitiallyUnownedClass"
              c:type="GInitiallyUnownedClass"/>
      </field>
    </record>
    <enumeration name="AnimationMode"
                 glib:type-name="IdeAnimationMode"
                 glib:get-type="ide_animation_mode_get_type"
                 c:type="IdeAnimationMode">
      <member name="linear"
              value="0"
              c:identifier="IDE_ANIMATION_LINEAR"
              glib:nick="linear"
              glib:name="IDE_ANIMATION_LINEAR">
      </member>
      <member name="ease_in_quad"
              value="1"
              c:identifier="IDE_ANIMATION_EASE_IN_QUAD"
              glib:nick="ease-in-quad"
              glib:name="IDE_ANIMATION_EASE_IN_QUAD">
      </member>
      <member name="ease_out_quad"
              value="2"
              c:identifier="IDE_ANIMATION_EASE_OUT_QUAD"
              glib:nick="ease-out-quad"
              glib:name="IDE_ANIMATION_EASE_OUT_QUAD">
      </member>
      <member name="ease_in_out_quad"
              value="3"
              c:identifier="IDE_ANIMATION_EASE_IN_OUT_QUAD"
              glib:nick="ease-in-out-quad"
              glib:name="IDE_ANIMATION_EASE_IN_OUT_QUAD">
      </member>
      <member name="ease_in_cubic"
              value="4"
              c:identifier="IDE_ANIMATION_EASE_IN_CUBIC"
              glib:nick="ease-in-cubic"
              glib:name="IDE_ANIMATION_EASE_IN_CUBIC">
      </member>
      <member name="ease_out_cubic"
              value="5"
              c:identifier="IDE_ANIMATION_EASE_OUT_CUBIC"
              glib:nick="ease-out-cubic"
              glib:name="IDE_ANIMATION_EASE_OUT_CUBIC">
      </member>
      <member name="ease_in_out_cubic"
              value="6"
              c:identifier="IDE_ANIMATION_EASE_IN_OUT_CUBIC"
              glib:nick="ease-in-out-cubic"
              glib:name="IDE_ANIMATION_EASE_IN_OUT_CUBIC">
      </member>
      <member name="last"
              value="7"
              c:identifier="IDE_ANIMATION_LAST"
              glib:nick="last"
              glib:name="IDE_ANIMATION_LAST">
      </member>
    </enumeration>
    <class name="Application"
           c:symbol-prefix="application"
           c:type="IdeApplication"
           parent="Adw.Application"
           final="1"
           glib:type-name="IdeApplication"
           glib:get-type="ide_application_get_type"
           glib:type-struct="ApplicationClass">
      <source-position filename="src/libide/gui/ide-application.h" line="40"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <method name="add_workbench"
              c:identifier="ide_application_add_workbench">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_cancel_action"
              c:identifier="ide_application_create_cancel_action">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_addin_by_module_name"
              c:identifier="ide_application_find_addin_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="897">Finds a loaded #IdeApplicationAddin within @self that was part of
the plugin matching @module_name.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="87"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application.c"
               line="905">an
  #IdeApplicationAddin or %NULL.</doc>
          <type name="ApplicationAddin" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="899">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="900">the name of the plugin module</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_project_workbench"
              c:identifier="ide_application_find_project_workbench"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="1114">Finds a workbench that has @project_info loaded.

If no workbench could be found, %NULL is returned.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application.c"
               line="1123">an #IdeWorkbench or %NULL</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="1116">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="1117">an #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_workbench_for_file"
              c:identifier="ide_application_find_workbench_for_file">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="821">Looks for the workbench that is the closest match to @file.

If no workbench is the root of @file, then %NULL is returned.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application.c"
               line="830">an #IdeWorkbench or %NULL</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="823">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="824">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_workbench"
              c:identifier="ide_application_foreach_workbench">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="703">Calls @callback for each of the registered workbenches.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="705">an #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="706">a #GFunc callback</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="707">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_argv" c:identifier="ide_application_get_argv">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-command-line.c"
             line="206">Gets the commandline for @cmdline as it was before any processing.
This is useful to handle both local and remote processing of argv
when you need to know what the arguments were before further
options parsing.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="45"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application-command-line.c"
               line="216">an
  array of strings or %NULL</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-command-line.c"
                 line="208">an #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="cmdline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-command-line.c"
                 line="209">a #GApplicationCommandLine</doc>
            <type name="Gio.ApplicationCommandLine"
                  c:type="GApplicationCommandLine*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_command_line_handled"
              c:identifier="ide_application_get_command_line_handled">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="cmdline" transfer-ownership="none">
            <type name="Gio.ApplicationCommandLine"
                  c:type="GApplicationCommandLine*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dark" c:identifier="ide_application_get_dark">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_by_id"
              c:identifier="ide_application_get_menu_by_id">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="933">Gets the merged menu by it's identifier.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="93"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application.c"
               line="940">a #GMenu or %NULL if @menu_id is %NULL</doc>
          <type name="Gio.Menu" c:type="GMenu*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="935">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="menu_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="936">the menu identifier</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_started_at"
              c:identifier="ide_application_get_started_at">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="805">Gets the time the application was started.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application.c"
               line="811">a #GDateTime</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="807">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style_scheme"
              c:identifier="ide_application_get_style_scheme"
              glib:get-property="style-scheme">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_font_name"
              c:identifier="ide_application_get_system_font_name"
              glib:get-property="system-font-name">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_network" c:identifier="ide_application_has_network">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="759">This is a helper that uses an internal #GNetworkMonitor to track if we
have access to the network. It works around some issues we've seen in
the wild that make determining if we have network access difficult.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application.c"
               line="767">%TRUE if we think there is network access.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="761">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="install_schemes_async"
              c:identifier="ide_application_install_schemes_async">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile**"/>
          </parameter>
          <parameter name="n_files" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_schemes_finish"
              c:identifier="ide_application_install_schemes_finish"
              throws="1">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_project_async"
              c:identifier="ide_application_open_project_async">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
          <parameter name="workspace_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_project_finish"
              c:identifier="ide_application_open_project_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-open.c"
             line="137">Completes a request to open a project.

The workbench containing the project is returned, which may be an existing
workbench if the project was already opened.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-application-open.c"
               line="148">an #IdeWorkbench or %NULL on failure and @error
  is set.</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-open.c"
                 line="139">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-open.c"
                 line="140">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_workbench"
              c:identifier="ide_application_remove_workbench">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_command_line_handled"
              c:identifier="ide_application_set_command_line_handled">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="cmdline" transfer-ownership="none">
            <type name="Gio.ApplicationCommandLine"
                  c:type="GApplicationCommandLine*"/>
          </parameter>
          <parameter name="handled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style_scheme"
              c:identifier="ide_application_set_style_scheme"
              glib:set-property="style-scheme">
        <source-position filename="src/libide/gui/ide-application.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="style_scheme" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_workspace_type"
              c:identifier="ide_application_set_workspace_type">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application.c"
             line="727">Sets the #GType of an #IdeWorkspace that should be used when creating the
next workspace upon handling files from command-line arguments. This is
reset after the files are opened and is generally only useful from
#IdeApplicationAddin's who need to alter the default workspace.</doc>
        <source-position filename="src/libide/gui/ide-application.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application.c"
                 line="729">a #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </instance-parameter>
          <parameter name="workspace_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <property name="style-scheme"
                writable="1"
                transfer-ownership="none"
                setter="set_style_scheme"
                getter="get_style_scheme"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="system-font" transfer-ownership="none">
        <type name="Pango.FontDescription"/>
      </property>
      <property name="system-font-name"
                transfer-ownership="none"
                getter="get_system_font_name"
                default-value="Monospace 11">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="show-help" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </glib:signal>
    </class>
    <interface name="ApplicationAddin"
               c:symbol-prefix="application_addin"
               c:type="IdeApplicationAddin"
               glib:type-name="IdeApplicationAddin"
               glib:get-type="ide_application_addin_get_type"
               glib:type-struct="ApplicationAddinInterface">
      <source-position filename="src/libide/gui/ide-application-addin.h"
                       line="70"/>
      <virtual-method name="activate" invoker="activate">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="64">This function is activated when the GApplication::activate signal is
emitted.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="66">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="67">an #ideApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_option_entries" invoker="add_option_entries">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="149">This function is called to allow the application a chance to add various
command-line options to the #GOptionContext. See
g_application_add_main_option_entries() for more information on how to
add arguments.

See ide_application_addin_handle_command_line() for how to handle arguments
once command line argument processing begins.

Make sure you set `X-At-Startup=true` in your `.plugin` file so that the
plugin is loaded early during startup or this virtual function will not
be called.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="151">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="152">an #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_command_line" invoker="handle_command_line">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="177">This function is called to allow the addin to procses command line arguments
that were parsed based on options added in
ide_application_addin_add_option_entries().

See g_application_command_line_get_option_dict() for more information.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="179">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="180">an #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
          <parameter name="cmdline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="181">a #GApplicationCommandLine</doc>
            <type name="Gio.ApplicationCommandLine"
                  c:type="GApplicationCommandLine*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="107">This interface method is called when the application is started or the
plugin has just been activated.

Use this to setup code in your plugin that needs to be loaded once per
application process.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="109">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="110">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open" invoker="open">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="83">This function is activated when the #GApplication::open signal is emitted.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="85">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="86">an #ideApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="87">an array of #GFiles</doc>
            <array length="2" zero-terminated="0" c:type="GFile**">
              <type name="Gio.File"/>
            </array>
          </parameter>
          <parameter name="n_files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="88">the length of @files</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="89">a hint provided by the calling instance</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="128">This inteface method is called when the application is shutting down or the
plugin has been unloaded.

Use this function to cleanup after anything setup in
ide_application_addin_load().</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="130">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="131">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="workbench_added" invoker="workbench_added">
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="workbench_removed" invoker="workbench_removed">
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="ide_application_addin_activate">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="64">This function is activated when the GApplication::activate signal is
emitted.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="66">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="67">an #ideApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_option_entries"
              c:identifier="ide_application_addin_add_option_entries">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="149">This function is called to allow the application a chance to add various
command-line options to the #GOptionContext. See
g_application_add_main_option_entries() for more information on how to
add arguments.

See ide_application_addin_handle_command_line() for how to handle arguments
once command line argument processing begins.

Make sure you set `X-At-Startup=true` in your `.plugin` file so that the
plugin is loaded early during startup or this virtual function will not
be called.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="151">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="152">an #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </method>
      <method name="handle_command_line"
              c:identifier="ide_application_addin_handle_command_line">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="177">This function is called to allow the addin to procses command line arguments
that were parsed based on options added in
ide_application_addin_add_option_entries().

See g_application_command_line_get_option_dict() for more information.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="179">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="180">an #IdeApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
          <parameter name="cmdline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="181">a #GApplicationCommandLine</doc>
            <type name="Gio.ApplicationCommandLine"
                  c:type="GApplicationCommandLine*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_application_addin_load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="107">This interface method is called when the application is started or the
plugin has just been activated.

Use this to setup code in your plugin that needs to be loaded once per
application process.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="109">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="110">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="ide_application_addin_open">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="83">This function is activated when the #GApplication::open signal is emitted.</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="85">a #IdeApplicationAddin</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="86">an #ideApplication</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="87">an array of #GFiles</doc>
            <array length="2" zero-terminated="0" c:type="GFile**">
              <type name="Gio.File"/>
            </array>
          </parameter>
          <parameter name="n_files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="88">the length of @files</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="89">a hint provided by the calling instance</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_application_addin_unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-application-addin.c"
             line="128">This inteface method is called when the application is shutting down or the
plugin has been unloaded.

Use this function to cleanup after anything setup in
ide_application_addin_load().</doc>
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="130">An #IdeApplicationAddin.</doc>
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-application-addin.c"
                 line="131">An #IdeApplication.</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </method>
      <method name="workbench_added"
              c:identifier="ide_application_addin_workbench_added">
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
      <method name="workbench_removed"
              c:identifier="ide_application_addin_workbench_removed">
        <source-position filename="src/libide/gui/ide-application-addin.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ApplicationAddinInterface"
            c:type="IdeApplicationAddinInterface"
            glib:is-gtype-struct-for="ApplicationAddin">
      <source-position filename="src/libide/gui/ide-application-addin.h"
                       line="70"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="109">An #IdeApplicationAddin.</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="110">An #IdeApplication.</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="130">An #IdeApplicationAddin.</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="131">An #IdeApplication.</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="66">a #IdeApplicationAddin</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="67">an #ideApplication</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open">
        <callback name="open">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="85">a #IdeApplicationAddin</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="86">an #ideApplication</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
            <parameter name="files" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="87">an array of #GFiles</doc>
              <array length="3" zero-terminated="0" c:type="GFile**">
                <type name="Gio.File"/>
              </array>
            </parameter>
            <parameter name="n_files" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="88">the length of @files</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="hint" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="89">a hint provided by the calling instance</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_option_entries">
        <callback name="add_option_entries">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="151">a #IdeApplicationAddin</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="152">an #IdeApplication</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_command_line">
        <callback name="handle_command_line">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="179">a #IdeApplicationAddin</doc>
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="application" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="180">an #IdeApplication</doc>
              <type name="Application" c:type="IdeApplication*"/>
            </parameter>
            <parameter name="cmdline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-application-addin.c"
                   line="181">a #GApplicationCommandLine</doc>
              <type name="Gio.ApplicationCommandLine"
                    c:type="GApplicationCommandLine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workbench_added">
        <callback name="workbench_added">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="workbench" transfer-ownership="none">
              <type name="Workbench" c:type="IdeWorkbench*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workbench_removed">
        <callback name="workbench_removed">
          <source-position filename="src/libide/gui/ide-application-addin.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ApplicationAddin" c:type="IdeApplicationAddin*"/>
            </parameter>
            <parameter name="workbench" transfer-ownership="none">
              <type name="Workbench" c:type="IdeWorkbench*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="ApplicationClass"
            c:type="IdeApplicationClass"
            glib:is-gtype-struct-for="Application">
      <source-position filename="src/libide/gui/ide-application.h" line="40"/>
      <field name="parent_class">
        <type name="Adw.ApplicationClass" c:type="AdwApplicationClass"/>
      </field>
    </record>
    <enumeration name="ArtifactKind" c:type="IdeArtifactKind">
      <source-position filename="src/libide/foundry/ide-build-target.h"
                       line="45"/>
      <member name="none" value="0" c:identifier="IDE_ARTIFACT_KIND_NONE">
      </member>
      <member name="executable"
              value="1"
              c:identifier="IDE_ARTIFACT_KIND_EXECUTABLE">
      </member>
      <member name="shared_library"
              value="2"
              c:identifier="IDE_ARTIFACT_KIND_SHARED_LIBRARY">
      </member>
      <member name="static_library"
              value="3"
              c:identifier="IDE_ARTIFACT_KIND_STATIC_LIBRARY">
      </member>
      <member name="file" value="4" c:identifier="IDE_ARTIFACT_KIND_FILE">
      </member>
    </enumeration>
    <function-macro name="BUG" c:identifier="IDE_BUG" introspectable="0">
      <source-position filename="src/libide/core/ide-debug.h" line="201"/>
      <parameters>
        <parameter name="Component">
        </parameter>
        <parameter name="Description">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="BUILD_CHANNEL" value="other" c:type="IDE_BUILD_CHANNEL">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="42">The release channel of Builder. This should be a string such as
"other", "flatpak-stable", or "flatpak-nightly".</doc>
      <source-position filename="src/libide/core/ide-version.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BUILD_IDENTIFIER"
              value="45.0"
              c:type="IDE_BUILD_IDENTIFIER">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-build-ident.h"
           line="31">A string containing a tag that defines the version of Builder that
was built. Generally, this will be a small version tag plus some
information to identify the git commit hash when applicable.</doc>
      <source-position filename="src/libide/core/ide-build-ident.h" line="38"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="BUILD_TYPE" value="plain" c:type="IDE_BUILD_TYPE">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="35">The build type of the installed build.</doc>
      <source-position filename="src/libide/core/ide-version.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="Buffer"
           c:symbol-prefix="buffer"
           c:type="IdeBuffer"
           parent="GtkSource.Buffer"
           final="1"
           glib:type-name="IdeBuffer"
           glib:get-type="ide_buffer_get_type"
           glib:type-struct="BufferClass">
      <source-position filename="src/libide/code/ide-buffer.h" line="58"/>
      <method name="add_commit_funcs"
              c:identifier="ide_buffer_add_commit_funcs">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4368">Adds function callbacks to handle important changes to text
internally within the GtkTextBuffer. You can use these instead
of signals like #GtkTextBuffer::insert-text or
#GtkTextBuffer::delete-range when you want to be sure you're
getting unprocessed changes right before they are committed to
underlying GTK data structures.

However, this has the requirement that you do not change this
content in any way, only access the information that these events
occurred.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="4389">a handler-id which can be used with
  ide_buffer_remove_commit_funcs().</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4370">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="before_insert_text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4371">function for before inserting text</doc>
            <type name="BufferCommitFunc" c:type="IdeBufferCommitFunc"/>
          </parameter>
          <parameter name="after_insert_text"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4372">function for after inserting text</doc>
            <type name="BufferCommitFunc" c:type="IdeBufferCommitFunc"/>
          </parameter>
          <parameter name="before_delete_range"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4373">function for before deleting a range</doc>
            <type name="BufferCommitFunc" c:type="IdeBufferCommitFunc"/>
          </parameter>
          <parameter name="after_delete_range"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4374">function for after deleting a range</doc>
            <type name="BufferCommitFunc" c:type="IdeBufferCommitFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4375">closure data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4376">destroy notify for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="addin_find_by_module_name"
              c:identifier="ide_buffer_addin_find_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="253">Locates an addin attached to the #IdeBuffer by the name of the module
that provides the addin.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="109"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-addin.c"
               line="261">An #IdeBufferAddin or %NULL</doc>
          <type name="BufferAddin" c:type="IdeBufferAddin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="255">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="256">the module name of the addin</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="code_action_query_async"
              c:identifier="ide_buffer_code_action_query_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3219">Queries for code actions in the current buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3221">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3222">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3223">the callback upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3224">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="code_action_query_finish"
              c:identifier="ide_buffer_code_action_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3271">Completes an asynchronous request to ide_buffer_query_code_action_async().</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3279">a #GPtrArray of #IdeCodeAction.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CodeAction"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3273">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3274">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_content" c:identifier="ide_buffer_dup_content">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2954">Gets the contents of the buffer as GBytes.

By using this function to get the bytes, you allow #IdeBuffer to avoid
calculating the buffer text unnecessarily, potentially saving on
allocations.

Additionally, this allows the buffer to update the state in #IdeUnsavedFiles
if the content is out of sync.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2967">a #GBytes containing the buffer content.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2956">an #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_title" c:identifier="ide_buffer_dup_title">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2402">Gets a string to represent the title of the buffer. An attempt is made to
make this relative to the project workdir if possible.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2409">a string containing a title</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2404">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uri" c:identifier="ide_buffer_dup_uri">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1402">Gets the URI for the underlying file and returns a copy of it.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="1408">a new string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1404">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="format_selection_async"
              c:identifier="ide_buffer_format_selection_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3072">Formats the selection using an available #IdeFormatter for the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3074">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3075">options for the formatting</doc>
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3076">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3077">the callback upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3078">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="format_selection_finish"
              c:identifier="ide_buffer_format_selection_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3145">Completes an asynchronous request to ide_buffer_format_selection_async().</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3153">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3147">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3148">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_change_count"
              c:identifier="ide_buffer_get_change_count">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2542">Gets the monotonic change count for the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2548">the change count for the buffer</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2544">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_change_monitor"
              c:identifier="ide_buffer_get_change_monitor"
              glib:get-property="change-monitor">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2876">Gets the #IdeBuffer:change-monitor for the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="89"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2882">an #IdeBufferChangeMonitor or %NULL</doc>
          <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2878">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_changed_on_volume"
              c:identifier="ide_buffer_get_changed_on_volume"
              glib:get-property="changed-on-volume">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2266">Returns %TRUE if the #IdeBuffer is known to have been modified on storage
externally from this #IdeBuffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2273">%TRUE if @self is known to be modified on storage</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2268">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_charset"
              c:identifier="ide_buffer_get_charset"
              glib:get-property="charset">
        <source-position filename="src/libide/code/ide-buffer.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_code_action_provider"
              c:identifier="ide_buffer_get_code_action_provider"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3200">Gets the code action provider, if any.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="75"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3206">an #IdeCodeActionProvider or %NULL</doc>
          <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3202">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_diagnostics"
              c:identifier="ide_buffer_get_diagnostics"
              glib:get-property="diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2632">Gets the #IdeDiagnostics for the buffer if any have been registered.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="93"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2638">an #IdeDiagnostics or %NULL</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2634">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_failed"
              c:identifier="ide_buffer_get_failed"
              glib:get-property="failed">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2050">Gets the #IdeBuffer:failed property, denoting if the buffer has failed
in some aspect such as loading or saving.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2057">%TRUE if the buffer is in a failed state</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2052">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_failure" c:identifier="ide_buffer_get_failure">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2033">Gets a #GError representing a failure that has occurred for the
buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2039">a #GError, or %NULL</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_buffer_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1379">Gets the #IdeBuffer:file property.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="1385">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1381">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file_settings"
              c:identifier="ide_buffer_get_file_settings"
              glib:get-property="file-settings">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3373">Gets the #IdeBuffer:file-settings property.

The #IdeFileSettings are updated when changes to the file or language
syntax are chnaged.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="107"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3382">an #IdeFileSettings or %NULL</doc>
          <type name="FileSettings" c:type="IdeFileSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3375">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_formatter"
              c:identifier="ide_buffer_get_formatter"
              glib:get-property="formatter">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3654">Gets an #IdeFormatter for the buffer, if any.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="109"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3660">an #IdeFormatter or %NULL</doc>
          <type name="Formatter" c:type="IdeFormatter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3656">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_highlight_diagnostics"
              c:identifier="ide_buffer_get_highlight_diagnostics"
              glib:get-property="highlight-diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2450">Checks if diagnostics should be highlighted.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2456">%TRUE if diagnostics should be highlighted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2452">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_insert_location"
              c:identifier="ide_buffer_get_insert_location">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3299">Gets the location of the insert mark as an #IdeLocation.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3304">An #IdeLocation</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_temporary"
              c:identifier="ide_buffer_get_is_temporary"
              glib:get-property="is-temporary">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1418">Checks if the buffer represents a temporary file.

This is useful to check by views that want to provide a save-as dialog
when the user requests to save the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="1426">%TRUE if the buffer is for a temporary file</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter_at_location"
              c:identifier="ide_buffer_get_iter_at_location">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2835">Set @iter to the position designated by @location.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2837">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="iter"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2838">a #GtkTextIter</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2839">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_iter_location"
              c:identifier="ide_buffer_get_iter_location">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2493">Gets an #IdeLocation for the position represented by @iter.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2500">an #IdeLocation</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2495">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2496">a #GtkTextIter</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_language_id"
              c:identifier="ide_buffer_get_language_id"
              glib:get-property="language-id">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1965">A helper to get the language identifier of the buffers current language.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="120"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="1971">a string containing the language id, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1967">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_text" c:identifier="ide_buffer_get_line_text">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4030">Gets the contents of a single line within the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="4037">a string containing the line's text
  or %NULL if the line does not exist.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4032">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4033">a line number starting from 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_loading" c:identifier="ide_buffer_get_loading">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2120">This checks to see if the buffer is currently loading. This is equivalent
to calling ide_buffer_get_state() and checking for %IDE_BUFFER_STATE_LOADING.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2127">%TRUE if the buffer is loading; otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2122">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_newline_type"
              c:identifier="ide_buffer_get_newline_type"
              glib:get-property="newline-type">
        <source-position filename="src/libide/code/ide-buffer.h" line="212"/>
        <return-value transfer-ownership="none">
          <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_read_only"
              c:identifier="ide_buffer_get_read_only"
              glib:get-property="read-only">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2312">This function returns %TRUE if the underlying file has been discovered to
be read-only. This may be used by the interface to display information to
the user about saving the file.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2319">%TRUE if the underlying file is read-only</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_rename_provider"
              c:identifier="ide_buffer_get_rename_provider">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3352">Gets the #IdeRenameProvider for this buffer, or %NULL.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="132"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3358">An #IdeRenameProvider or %NULL if
  there is no #IdeRenameProvider that can satisfy the buffer.</doc>
          <type name="RenameProvider" c:type="IdeRenameProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3354">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selection_bounds"
              c:identifier="ide_buffer_get_selection_bounds">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3903">This function acts like gtk_text_buffer_get_selection_bounds() except that
it always places the location of the insert mark at @insert and the location
of the selection mark at @selection.

Calling gtk_text_iter_order() with the results of this function would be
equivalent to calling gtk_text_buffer_get_selection_bounds().</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3905">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="insert"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3906">a #GtkTextIter to get the insert position</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="selection"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3907">a #GtkTextIter to get the selection position</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selection_range"
              c:identifier="ide_buffer_get_selection_range">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2515">Gets an #IdeRange to represent the current buffer selection.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2521">an #IdeRange</doc>
          <type name="Range" c:type="IdeRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2517">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="ide_buffer_get_state"
              glib:get-property="state">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1437">Gets the #IdeBuffer:state property.

This will changed while files are loaded or saved to disk.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="1445">an #IdeBufferState</doc>
          <type name="BufferState" c:type="IdeBufferState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1439">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style_scheme_name"
              c:identifier="ide_buffer_get_style_scheme_name"
              glib:get-property="style-scheme-name">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2354">Gets the name of the #GtkSourceStyleScheme from the #IdeBuffer:style-scheme
property.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="142"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2361">a string containing the style scheme or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2356">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbol_at_location_async"
              c:identifier="ide_buffer_get_symbol_at_location_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3791">Asynchronously get a possible symbol at @location.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3793">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3794">a #GtkTextIter indicating a position to search for a symbol</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3795">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3796">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3797">a #gpointer to hold user data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_at_location_finish"
              c:identifier="ide_buffer_get_symbol_at_location_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3875">Completes an asynchronous request to locate a symbol at a location.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3883">An #IdeSymbol or %NULL.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3877">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3878">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_resolvers"
              c:identifier="ide_buffer_get_symbol_resolvers"
              glib:get-property="symbol-resolvers">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3957">Gets the symbol resolvers for the buffer based on the current language. The
resolvers in the resulting array are sorted by priority.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3964">a #GPtrArray
  of #IdeSymbolResolver.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="SymbolResolver"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3959">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_word_at_iter"
              c:identifier="ide_buffer_get_word_at_iter">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3321">Gets the word found under the position denoted by @iter.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3328">A newly allocated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3323">an #IdeBuffer.</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3324">a #GtkTextIter.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_diagnostics"
              c:identifier="ide_buffer_has_diagnostics"
              glib:get-property="has-diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2649">Returns %TRUE if any diagnostics have been registered for the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="2655">%TRUE if there are a non-zero number of diagnostics.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2651">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_encoding_error"
              c:identifier="ide_buffer_has_encoding_error"
              glib:get-property="has-encoding-error"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4530">Gets the "has-encoding-error" property.

This returns %TRUE if there was an error loading a file due to a failure
to discover the encoding or if character conversions occurred.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="4539">%FALSE if there were no encoding errors</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4532">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_symbol_resolvers"
              c:identifier="ide_buffer_has_symbol_resolvers"
              glib:get-property="has-symbol-resolvers">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4228">Checks if any symbol resolvers are available.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="4234">%TRUE if at least one symbol resolvers is available</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4230">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hold" c:identifier="ide_buffer_hold">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4131">Increases the "hold count" of the #IdeBuffer by one.

The hold count is similar to a reference count, as it allows the buffer
manager to know when a buffer may be destroyed cleanly.

Doing so ensures that the buffer will not be unloaded or have reference
cycles broken.

Release the hold with ide_buffer_release().

When the hold count reaches zero, the buffer will be destroyed.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="165"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="4147">@self</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4133">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_symbol_resolvers"
              c:identifier="ide_buffer_list_symbol_resolvers"
              version="45">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4003">Gets the symbol resolvers for the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="156"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="4009">a #GListModel of #IdeSymbolResolver</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4005">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_context" c:identifier="ide_buffer_ref_context">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3392">Locates the #IdeContext for the buffer and returns it.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="167"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="3398">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3394">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rehighlight" c:identifier="ide_buffer_rehighlight">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="3689">Force @self to rebuild the highlighted words.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="3691">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="release" c:identifier="ide_buffer_release">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="4178">Releases the "hold count" on a buffer.

The buffer will be destroyed and unloaded when the hold count
reaches zero.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="4180">a #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_commit_funcs"
              c:identifier="ide_buffer_remove_commit_funcs">
        <source-position filename="src/libide/code/ide-buffer.h" line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="commit_funcs_handler" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file_async" c:identifier="ide_buffer_save_file_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1807">Asynchronously saves the buffer contents to @file.

If @file is %NULL, then the #IdeBuffer:file property is used.

The buffer is marked as busy during the operation, and must not have
further editing until the operation is complete.

@callback is executed upon completion and should call
ide_buffer_save_file_finish() to get the result of the operation.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1809">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1810">a #GFile or %NULL</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1811">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="notif"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1812">a location for an #IdeNotification or %NULL</doc>
            <type name="Notification" c:type="IdeNotification**"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1813">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1814">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file_finish"
              c:identifier="ide_buffer_save_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1942">Completes an asynchronous request to save the buffer via
ide_buffer_save_file_async().</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer.c"
               line="1951">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1944">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="1945">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_change_monitor"
              c:identifier="ide_buffer_set_change_monitor"
              glib:set-property="change-monitor">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2892">Sets an #IdeBufferChangeMonitor to use for the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2894">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="change_monitor"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2895">an #IdeBufferChangeMonitor or %NULL</doc>
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_charset"
              c:identifier="ide_buffer_set_charset"
              glib:set-property="charset">
        <source-position filename="src/libide/code/ide-buffer.h" line="209"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="charset" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_diagnostics"
              c:identifier="ide_buffer_set_diagnostics"
              glib:set-property="diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2590">Sets the #IdeDiagnostics for the buffer. These will be used to highlight
the buffer for errors and warnings if #IdeBuffer:highlight-diagnostics
is %TRUE.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2592">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="diagnostics"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2593">an #IdeDiagnostics</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_highlight_diagnostics"
              c:identifier="ide_buffer_set_highlight_diagnostics"
              glib:set-property="highlight-diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2466">Sets the #IdeBuffer:highlight-diagnostics property.

If set to %TRUE, diagnostics will be styled in the buffer.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2468">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="highlight_diagnostics" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2469">if diagnostics should be highlighted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language_id"
              c:identifier="ide_buffer_set_language_id"
              glib:set-property="language-id">
        <source-position filename="src/libide/code/ide-buffer.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_newline_type"
              c:identifier="ide_buffer_set_newline_type"
              glib:set-property="newline-type">
        <source-position filename="src/libide/code/ide-buffer.h" line="214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="newline_type" transfer-ownership="none">
            <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_style_scheme_name"
              c:identifier="ide_buffer_set_style_scheme_name"
              glib:set-property="style-scheme-name">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="2377">Sets the #IdeBuffer:style-scheme property by locating the style scheme
matching @style_scheme_name.</doc>
        <source-position filename="src/libide/code/ide-buffer.h" line="193"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2379">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </instance-parameter>
          <parameter name="style_scheme_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer.c"
                 line="2380">string containing the style scheme's name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer-manager"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="773">Sets the "buffer-manager" property, which is used by the buffer to
clean-up state when the buffer is no longer in use.</doc>
        <type name="BufferManager"/>
      </property>
      <property name="change-monitor"
                writable="1"
                transfer-ownership="none"
                setter="set_change_monitor"
                getter="get_change_monitor">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="786">The "change-monitor" property is an #IdeBufferChangeMonitor that will be
used to track changes in the #IdeBuffer. This can be used to show line
changes in the editor gutter.</doc>
        <type name="BufferChangeMonitor"/>
      </property>
      <property name="changed-on-volume"
                transfer-ownership="none"
                getter="get_changed_on_volume"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="814">The "changed-on-volume" property is set to %TRUE when it has been
discovered that the file represented by the #IdeBuffer has changed
externally to Builder.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="charset"
                writable="1"
                transfer-ownership="none"
                setter="set_charset"
                getter="get_charset"
                default-value="UTF-8">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="800">Sets the encoding to use for the buffer based on the "charset"
specified. This is useful to ensure that characters may not be
lost from the original encoding.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="diagnostics"
                writable="1"
                transfer-ownership="none"
                setter="set_diagnostics"
                getter="get_diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="842">The "diagnostics" property contains an #IdeDiagnostics that represent
the diagnostics found in the buffer.</doc>
        <type name="Diagnostics"/>
      </property>
      <property name="enable-addins"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="828">The "enable-addins" property determines whether addins will be aware of
this buffer. When set to %FALSE no ide_buffer_addin_*() functions will be
called on this buffer.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="failed"
                transfer-ownership="none"
                getter="get_failed"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="855">The "failed" property is %TRUE when the buffer has entered a failed
state such as when loading or saving the buffer to disk.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file"
                writable="1"
                transfer-ownership="none"
                getter="get_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="868">The "file" property is the underlying file represented by the buffer.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="file-settings"
                transfer-ownership="none"
                getter="get_file_settings">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="880">The "file-settings" property are the settings to be used by the buffer
and source-view for the underlying file.

These are automatically discovered and kept up to date based on the
#IdeFileSettings extension points.</doc>
        <type name="FileSettings"/>
      </property>
      <property name="formatter"
                transfer-ownership="none"
                getter="get_formatter">
        <type name="Formatter"/>
      </property>
      <property name="has-diagnostics"
                transfer-ownership="none"
                getter="has_diagnostics"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="901">The "has-diagnostics" property denotes that there are a non-zero number
of diangostics registered for the buffer.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-encoding-error"
                transfer-ownership="none"
                getter="has_encoding_error"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-symbol-resolvers"
                transfer-ownership="none"
                getter="has_symbol_resolvers"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="919">The "has-symbol-resolvers" property is %TRUE if there are any symbol
resolvers loaded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="highlight-diagnostics"
                writable="1"
                transfer-ownership="none"
                setter="set_highlight_diagnostics"
                getter="get_highlight_diagnostics"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="932">The "highlight-diagnostics" property indicates that diagnostics which
are discovered should be styled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-temporary"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_is_temporary"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="945">The "is-temporary" property denotes the #IdeBuffer:file property points
to a temporary file. When saving the the buffer, various UI components
know to check this property and provide a file chooser to allow the user
to select the destination file.

Upon saving the file, the property will change to %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="language-id"
                writable="1"
                transfer-ownership="none"
                setter="set_language_id"
                getter="get_language_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="962">The "language-id" property is a convenience property to set the
#GtkSourceBuffer:language property using a string name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="newline-type"
                writable="1"
                transfer-ownership="none"
                setter="set_newline_type"
                getter="get_newline_type"
                default-value="GTK_SOURCE_NEWLINE_TYPE_LF">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="975">Sets the style of newline to append to each line.

This sets the style of newlines to use within the file. Generally,
only LF should be used (\n) as it is common on Unix, Linux, and most
editors at this point.

Older Windows editors might prefer CR+LF (\r\n) which is similar to what
is displayed in a raw terminal without a \n line discipline.

Really old Mac Classic systems use just a \r.</doc>
        <type name="GtkSource.NewlineType"/>
      </property>
      <property name="read-only"
                transfer-ownership="none"
                getter="get_read_only"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="997">The "read-only" property is set to %TRUE when it has been
discovered that the file represented by the #IdeBuffer is read-only
on the underlying storage.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state"
                transfer-ownership="none"
                getter="get_state"
                default-value="IDE_BUFFER_STATE_READY">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1011">The "state" property can be used to determine if the buffer is
currently performing any specific background work, such as loading
from or saving a buffer to storage.</doc>
        <type name="BufferState"/>
      </property>
      <property name="style-scheme-name"
                writable="1"
                transfer-ownership="none"
                setter="set_style_scheme_name"
                getter="get_style_scheme_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1031">The "style-scheme-name" is the name of the style scheme that is used.
It is a convenience property so that you do not need to use the
#GtkSourceStyleSchemeManager to lookup style schemes.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="symbol-resolvers"
                transfer-ownership="none"
                getter="get_symbol_resolvers">
        <type name="Gio.ListModel"/>
      </property>
      <property name="title" transfer-ownership="none" default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1045">The "title" for the buffer which includes some variant of the path
to the underlying file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="change-settled" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1060">The "change-settled" signal is emitted when the buffer has stopped
being edited for a short period of time. This is useful to connect
to when you want to perform work as the user is editing, but you
don't want to get in the way of their editing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="line-flags-changed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1081">The "line-flags-changed" signal is emitted when the buffer has detected
ancillary information has changed for lines in the buffer. Such information
might include diagnostics or version control information.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="loaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1101">The "loaded" signal is emitted after the buffer is loaded.

This is useful to watch if you want to perform a given action but do
not want to interfere with buffer loading.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="request-scroll-to-insert" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer.c"
             line="1122">Requests that attached views scroll to insert location.

This is generally only used when loading a buffer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <interface name="BufferAddin"
               c:symbol-prefix="buffer_addin"
               c:type="IdeBufferAddin"
               glib:type-name="IdeBufferAddin"
               glib:get-type="ide_buffer_addin_get_type"
               glib:type-struct="BufferAddinInterface">
      <source-position filename="src/libide/code/ide-buffer-addin.h"
                       line="69"/>
      <virtual-method name="change_settled" invoker="change_settled">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="213">This function is called when the buffer has settled after a number of
changes provided by the user. It is a convenient way to know when you
should perform more background work without having to coalesce work
yourself.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="215">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="216">an #ideBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="file_loaded" invoker="file_loaded">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="122">This function is called for an addin after a file has been loaded from disk.

It is not guaranteed that this function will be called for addins that were
loaded after the buffer already loaded a file.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="124">a #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="125">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="126">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="file_saved" invoker="file_saved">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="170">This function is called for an addin after a file has been saved to disk.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="172">a #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="173">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="174">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="language_set" invoker="language_set">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="192">This vfunc is called when the source language in the buffer changes. This
will only be delivered to addins that support multiple languages.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="194">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="195">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="language_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="196">the GtkSourceView language identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="79">This calls the load virtual function of #IdeBufferAddin to request
that the addin load itself.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="81">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="82">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_file" invoker="save_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="147">This function gives a chance for plugins to modify the buffer right before
writing to disk.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="149">a #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="150">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="151">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="settle_async" invoker="settle_async">
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="settle_finish" invoker="settle_finish" throws="1">
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="style_scheme_changed"
                      invoker="style_scheme_changed">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="234">This function is called when the #GtkSourceStyleScheme of the #IdeBuffer
has changed.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="236">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="237">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="99">This calls the unload virtual function of #IdeBufferAddin to request
that the addin unload itself.

The addin should cancel any in-flight operations and attempt to drop
references to the buffer or any other machinery as soon as possible.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="101">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="102">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="change_settled"
              c:identifier="ide_buffer_addin_change_settled">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="213">This function is called when the buffer has settled after a number of
changes provided by the user. It is a convenient way to know when you
should perform more background work without having to coalesce work
yourself.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="215">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="216">an #ideBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_loaded" c:identifier="ide_buffer_addin_file_loaded">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="122">This function is called for an addin after a file has been loaded from disk.

It is not guaranteed that this function will be called for addins that were
loaded after the buffer already loaded a file.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="124">a #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="125">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="126">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_saved" c:identifier="ide_buffer_addin_file_saved">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="170">This function is called for an addin after a file has been saved to disk.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="172">a #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="173">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="174">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="language_set" c:identifier="ide_buffer_addin_language_set">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="192">This vfunc is called when the source language in the buffer changes. This
will only be delivered to addins that support multiple languages.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="194">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="195">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="language_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="196">the GtkSourceView language identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_buffer_addin_load">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="79">This calls the load virtual function of #IdeBufferAddin to request
that the addin load itself.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="81">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="82">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_file" c:identifier="ide_buffer_addin_save_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="147">This function gives a chance for plugins to modify the buffer right before
writing to disk.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="149">a #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="150">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="151">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="settle_async" c:identifier="ide_buffer_addin_settle_async">
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="settle_finish"
              c:identifier="ide_buffer_addin_settle_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="style_scheme_changed"
              c:identifier="ide_buffer_addin_style_scheme_changed">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="234">This function is called when the #GtkSourceStyleScheme of the #IdeBuffer
has changed.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="236">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="237">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_buffer_addin_unload">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-addin.c"
             line="99">This calls the unload virtual function of #IdeBufferAddin to request
that the addin unload itself.

The addin should cancel any in-flight operations and attempt to drop
references to the buffer or any other machinery as soon as possible.</doc>
        <source-position filename="src/libide/code/ide-buffer-addin.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="101">an #IdeBufferAddin</doc>
            <type name="BufferAddin" c:type="IdeBufferAddin*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-addin.c"
                 line="102">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="BufferAddinInterface"
            c:type="IdeBufferAddinInterface"
            glib:is-gtype-struct-for="BufferAddin">
      <source-position filename="src/libide/code/ide-buffer-addin.h"
                       line="69"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="81">an #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="82">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="101">an #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="102">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="file_loaded">
        <callback name="file_loaded">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="124">a #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="125">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="126">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_file">
        <callback name="save_file">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="149">a #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="150">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="151">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="file_saved">
        <callback name="file_saved">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="172">a #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="173">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="174">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="language_set">
        <callback name="language_set">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="194">an #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="195">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="196">the GtkSourceView language identifier</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="change_settled">
        <callback name="change_settled">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="215">an #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="216">an #ideBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="style_scheme_changed">
        <callback name="style_scheme_changed">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="236">an #IdeBufferAddin</doc>
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-addin.c"
                   line="237">an #IdeBuffer</doc>
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="settle_async">
        <callback name="settle_async">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="settle_finish">
        <callback name="settle_finish" throws="1">
          <source-position filename="src/libide/code/ide-buffer-addin.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferAddin" c:type="IdeBufferAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="BufferChangeMonitor"
           c:symbol-prefix="buffer_change_monitor"
           c:type="IdeBufferChangeMonitor"
           parent="Object"
           glib:type-name="IdeBufferChangeMonitor"
           glib:get-type="ide_buffer_change_monitor_get_type"
           glib:type-struct="BufferChangeMonitorClass">
      <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                       line="69"/>
      <virtual-method name="foreach_change" invoker="foreach_change">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-change-monitor.c"
             line="194">Calls @callback for every line between @line_begin and @line_end that have
an addition, deletion, or change.</doc>
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="196">a #IdeBufferChangeMonitor</doc>
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="line_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="197">the starting line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="line_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="198">the end line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="199">a callback</doc>
            <type name="BufferChangeMonitorForeachFunc"
                  c:type="IdeBufferChangeMonitorForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="200">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_change" invoker="get_change">
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load">
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reload" invoker="reload">
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="emit_changed"
              c:identifier="ide_buffer_change_monitor_emit_changed">
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach_change"
              c:identifier="ide_buffer_change_monitor_foreach_change">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-change-monitor.c"
             line="194">Calls @callback for every line between @line_begin and @line_end that have
an addition, deletion, or change.</doc>
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="196">a #IdeBufferChangeMonitor</doc>
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="line_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="197">the starting line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="line_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="198">the end line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="199">a callback</doc>
            <type name="BufferChangeMonitorForeachFunc"
                  c:type="IdeBufferChangeMonitorForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="200">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="ide_buffer_change_monitor_get_buffer"
              glib:get-property="buffer">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-change-monitor.c"
             line="220">Gets the #IdeBufferChangeMonitor:buffer property.</doc>
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-change-monitor.c"
               line="226">an #IdeBuffer</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-change-monitor.c"
                 line="222">a #IdeBufferChangeMonitor</doc>
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_change"
              c:identifier="ide_buffer_change_monitor_get_change">
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload" c:identifier="ide_buffer_change_monitor_reload">
        <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferChangeMonitor" c:type="IdeBufferChangeMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="buffer"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_buffer">
        <type name="Buffer"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BufferChangeMonitorClass"
            c:type="IdeBufferChangeMonitorClass"
            glib:is-gtype-struct-for="BufferChangeMonitor">
      <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                       line="69"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_change">
        <callback name="get_change">
          <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
            <parameter name="line" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reload">
        <callback name="reload">
          <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="foreach_change">
        <callback name="foreach_change">
          <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-change-monitor.c"
                   line="196">a #IdeBufferChangeMonitor</doc>
              <type name="BufferChangeMonitor"
                    c:type="IdeBufferChangeMonitor*"/>
            </parameter>
            <parameter name="line_begin" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-change-monitor.c"
                   line="197">the starting line</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="line_end" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-change-monitor.c"
                   line="198">the end line</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="call"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-change-monitor.c"
                   line="199">a callback</doc>
              <type name="BufferChangeMonitorForeachFunc"
                    c:type="IdeBufferChangeMonitorForeachFunc"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-buffer-change-monitor.c"
                   line="200">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="BufferChangeMonitorForeachFunc"
              c:type="IdeBufferChangeMonitorForeachFunc">
      <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                       line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="line" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="change" transfer-ownership="none">
          <type name="BufferLineChange" c:type="IdeBufferLineChange"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="BufferClass"
            c:type="IdeBufferClass"
            glib:is-gtype-struct-for="Buffer">
      <source-position filename="src/libide/code/ide-buffer.h" line="58"/>
      <field name="parent_class">
        <type name="GtkSource.BufferClass" c:type="GtkSourceBufferClass"/>
      </field>
    </record>
    <callback name="BufferCommitFunc" c:type="IdeBufferCommitFunc">
      <source-position filename="src/libide/code/ide-buffer.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Buffer" c:type="IdeBuffer*"/>
        </parameter>
        <parameter name="position" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BufferForeachFunc" c:type="IdeBufferForeachFunc">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-buffer-manager.h"
           line="51">Callback prototype for ide_buffer_manager_foreach().</doc>
      <source-position filename="src/libide/code/ide-buffer-manager.h"
                       line="58"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.h"
               line="53">an #IdeBuffer</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.h"
               line="54">closure data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="BufferLineChange" c:type="IdeBufferLineChange">
      <source-position filename="src/libide/code/ide-buffer-change-monitor.h"
                       line="46"/>
      <member name="none" value="0" c:identifier="IDE_BUFFER_LINE_CHANGE_NONE">
      </member>
      <member name="added"
              value="1"
              c:identifier="IDE_BUFFER_LINE_CHANGE_ADDED">
      </member>
      <member name="changed"
              value="2"
              c:identifier="IDE_BUFFER_LINE_CHANGE_CHANGED">
      </member>
      <member name="deleted"
              value="4"
              c:identifier="IDE_BUFFER_LINE_CHANGE_DELETED">
      </member>
      <member name="previous_deleted"
              value="8"
              c:identifier="IDE_BUFFER_LINE_CHANGE_PREVIOUS_DELETED">
      </member>
    </bitfield>
    <class name="BufferManager"
           c:symbol-prefix="buffer_manager"
           c:type="IdeBufferManager"
           parent="Object"
           final="1"
           glib:type-name="IdeBufferManager"
           glib:get-type="ide_buffer_manager_get_type"
           glib:type-struct="BufferManagerClass">
      <source-position filename="src/libide/code/ide-buffer-manager.h"
                       line="64"/>
      <implements name="Gio.ListModel"/>
      <function name="from_context"
                c:identifier="ide_buffer_manager_from_context">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="404">Gets the #IdeBufferManager for the #IdeContext.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.c"
               line="409">an #IdeBufferManager</doc>
          <type name="BufferManager" c:type="IdeBufferManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="apply_edits_async"
              c:identifier="ide_buffer_manager_apply_edits_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="1078">Asynchronously requests that all of @edits are applied to the buffers
in the project. If the buffer has not been loaded for a particular edit,
it will be loaded.

@callback should call ide_buffer_manager_apply_edits_finish() to get the
result of this operation.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1080">An #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="edits" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1081">
  An #GPtrArray of #IdeTextEdit.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="TextEdit"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1083">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1084">the callback to complete the request</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1085">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="apply_edits_finish"
              c:identifier="ide_buffer_manager_apply_edits_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_buffer" c:identifier="ide_buffer_manager_find_buffer">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="465">Locates the #IdeBuffer that matches #GFile, if any.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.c"
               line="472">an #IdeBuffer or %NULL</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="467">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="468">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="ide_buffer_manager_foreach">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="1287">Calls @foreach_func for every buffer registered.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1289">a #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1290">an #IdeBufferForeachFunc</doc>
            <type name="BufferForeachFunc" c:type="IdeBufferForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="1291">closure data for @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_max_file_size"
              c:identifier="ide_buffer_manager_get_max_file_size"
              glib:get-property="max-file-size">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="493">Gets the max file size that will be allowed to be loaded from disk.
This is useful to protect Builder from files that would overload the
various subsystems.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.c"
               line="501">the max file size in bytes or -1 for unlimited</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="495">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_file" c:identifier="ide_buffer_manager_has_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="424">Checks to see if a buffer has been loaded which contains the contents
of @file.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.c"
               line="432">%TRUE if a buffer exists for @file</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="426">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="427">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_async"
              c:identifier="ide_buffer_manager_load_file_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="569">Requests that @file be loaded by the buffer manager. Depending on @flags,
this may result in a new view being displayed in a Builder workspace.

If @file is %NULL, then a new temporary file is created with an
incrementing number to denote the document, such as "unsaved file 1".

After completion, @callback will be executed and you can receive the buffer
that was loaded with ide_buffer_manager_load_file_finish().

If a buffer has already been loaded from @file, the operation will complete
using that existing buffer.

If a buffer is currently loading for @file, the operation will complete
using that existing buffer after it has completed loading.

If @notif is non-NULL, it will be updated with status information while
loading the document.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="571">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="572">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="573">optional flags for loading the buffer</doc>
            <type name="BufferOpenFlags" c:type="IdeBufferOpenFlags"/>
          </parameter>
          <parameter name="notif"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="574">a location for an #IdeNotification, or %NULL</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="575">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="576">a callback to execute upon completion of the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="577">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_finish"
              c:identifier="ide_buffer_manager_load_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="681">Completes an asynchronous request to ide_buffer_manager_laod_file_async().</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.c"
               line="689">an #IdeBuffer</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="683">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="684">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload_all_async"
              c:identifier="ide_buffer_manager_reload_all_async">
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reload_all_finish"
              c:identifier="ide_buffer_manager_reload_all_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_all_async"
              c:identifier="ide_buffer_manager_save_all_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="802">Asynchronously requests that the #IdeBufferManager save all of the loaded
buffers to disk.

@callback will be executed after all the buffers have been saved.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="804">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="805">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="806">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="807">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_all_finish"
              c:identifier="ide_buffer_manager_save_all_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="846">Completes an asynchronous request to save all buffers.</doc>
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-buffer-manager.c"
               line="854">%TRUE if all the buffers were saved successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="848">an #IdeBufferManager</doc>
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="849">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_file_size"
              c:identifier="ide_buffer_manager_set_max_file_size"
              glib:set-property="max-file-size">
        <source-position filename="src/libide/code/ide-buffer-manager.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BufferManager" c:type="IdeBufferManager*"/>
          </instance-parameter>
          <parameter name="max_file_size" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <property name="max-file-size"
                writable="1"
                transfer-ownership="none"
                setter="set_max_file_size"
                getter="get_max_file_size"
                default-value="10485760">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="257">The "max-file-size" property is the largest file size in bytes that
Builder will attempt to load. Larger files will fail to load to help
ensure that Builder's buffer manager does not attempt to load files that
will slow the buffer management beyond usefulness.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <glib:signal name="buffer-loaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="297">The "buffer-loaded" signal is emitted when an #IdeBuffer has loaded
a file from storage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="300">an #IdeBuffer</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="buffer-saved" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="320">The "buffer-saved" signal is emitted when an #IdeBuffer has been saved
to storage.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="323">an #IdeBuffer</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="buffer-unloaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.c"
             line="342">The "buffer-unloaded" signal is emitted when an #IdeBuffer has been
unloaded from the buffer manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-buffer-manager.c"
                 line="345">an #IdeBuffer</doc>
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="load-buffer" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Buffer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BufferManagerClass"
            c:type="IdeBufferManagerClass"
            glib:is-gtype-struct-for="BufferManager">
      <source-position filename="src/libide/code/ide-buffer-manager.h"
                       line="64"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <bitfield name="BufferOpenFlags"
              glib:type-name="IdeBufferOpenFlags"
              glib:get-type="ide_buffer_open_flags_get_type"
              c:type="IdeBufferOpenFlags">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-buffer-manager.h"
           line="33">The #IdeBufferOpenFlags enumeration is used to specify how the buffer
manager should handle loading the buffer and if certain features should
be enabled or disabled.</doc>
      <member name="none"
              value="0"
              c:identifier="IDE_BUFFER_OPEN_FLAGS_NONE"
              glib:nick="none"
              glib:name="IDE_BUFFER_OPEN_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.h"
             line="35">No special processing will be performed.</doc>
      </member>
      <member name="force_reload"
              value="2"
              c:identifier="IDE_BUFFER_OPEN_FLAGS_FORCE_RELOAD"
              glib:nick="force-reload"
              glib:name="IDE_BUFFER_OPEN_FLAGS_FORCE_RELOAD">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.h"
             line="36">Reload the buffer if already loaded.</doc>
      </member>
      <member name="disable_addins"
              value="4"
              c:identifier="IDE_BUFFER_OPEN_FLAGS_DISABLE_ADDINS"
              glib:nick="disable-addins"
              glib:name="IDE_BUFFER_OPEN_FLAGS_DISABLE_ADDINS">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-buffer-manager.h"
             line="37">Disables any buffer addin for this
  buffer.</doc>
      </member>
    </bitfield>
    <enumeration name="BufferState"
                 glib:type-name="IdeBufferState"
                 glib:get-type="ide_buffer_state_get_type"
                 c:type="IdeBufferState">
      <member name="ready"
              value="0"
              c:identifier="IDE_BUFFER_STATE_READY"
              glib:nick="ready"
              glib:name="IDE_BUFFER_STATE_READY">
      </member>
      <member name="loading"
              value="1"
              c:identifier="IDE_BUFFER_STATE_LOADING"
              glib:nick="loading"
              glib:name="IDE_BUFFER_STATE_LOADING">
      </member>
      <member name="saving"
              value="2"
              c:identifier="IDE_BUFFER_STATE_SAVING"
              glib:nick="saving"
              glib:name="IDE_BUFFER_STATE_SAVING">
      </member>
      <member name="failed"
              value="3"
              c:identifier="IDE_BUFFER_STATE_FAILED"
              glib:nick="failed"
              glib:name="IDE_BUFFER_STATE_FAILED">
      </member>
    </enumeration>
    <enumeration name="BuildError"
                 c:type="IdeBuildError"
                 glib:error-domain="ide_build_error">
      <source-position filename="src/libide/foundry/ide-pipeline.h" line="50"/>
      <member name="unknown" value="0" c:identifier="IDE_BUILD_ERROR_UNKNOWN">
      </member>
      <member name="broken" value="1" c:identifier="IDE_BUILD_ERROR_BROKEN">
      </member>
      <member name="not_loaded"
              value="2"
              c:identifier="IDE_BUILD_ERROR_NOT_LOADED">
      </member>
      <member name="needs_rebuild"
              value="3"
              c:identifier="IDE_BUILD_ERROR_NEEDS_REBUILD">
      </member>
    </enumeration>
    <bitfield name="BuildLocality"
              glib:type-name="IdeBuildLocality"
              glib:get-type="ide_build_locality_get_type"
              c:type="IdeBuildLocality">
      <member name="in_tree"
              value="1"
              c:identifier="IDE_BUILD_LOCALITY_IN_TREE"
              glib:nick="in-tree"
              glib:name="IDE_BUILD_LOCALITY_IN_TREE">
      </member>
      <member name="out_of_tree"
              value="2"
              c:identifier="IDE_BUILD_LOCALITY_OUT_OF_TREE"
              glib:nick="out-of-tree"
              glib:name="IDE_BUILD_LOCALITY_OUT_OF_TREE">
      </member>
      <member name="default"
              value="3"
              c:identifier="IDE_BUILD_LOCALITY_DEFAULT"
              glib:nick="default"
              glib:name="IDE_BUILD_LOCALITY_DEFAULT">
      </member>
    </bitfield>
    <record name="BuildLog" c:type="IdeBuildLog" disguised="1" opaque="1">
      <source-position filename="src/libide/foundry/ide-foundry-types.h"
                       line="31"/>
    </record>
    <callback name="BuildLogObserver" c:type="IdeBuildLogObserver">
      <source-position filename="src/libide/foundry/ide-build-log.h"
                       line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="log_stream" transfer-ownership="none">
          <type name="BuildLogStream" c:type="IdeBuildLogStream"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="message_len" transfer-ownership="none">
          <type name="gssize" c:type="gssize"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="BuildLogStream"
                 glib:type-name="IdeBuildLogStream"
                 glib:get-type="ide_build_log_stream_get_type"
                 c:type="IdeBuildLogStream">
      <member name="stdout"
              value="0"
              c:identifier="IDE_BUILD_LOG_STDOUT"
              glib:nick="stdout"
              glib:name="IDE_BUILD_LOG_STDOUT">
      </member>
      <member name="stderr"
              value="1"
              c:identifier="IDE_BUILD_LOG_STDERR"
              glib:nick="stderr"
              glib:name="IDE_BUILD_LOG_STDERR">
      </member>
    </enumeration>
    <class name="BuildManager"
           c:symbol-prefix="build_manager"
           c:type="IdeBuildManager"
           parent="Object"
           final="1"
           glib:type-name="IdeBuildManager"
           glib:get-type="ide_build_manager_get_type"
           glib:type-struct="BuildManagerClass">
      <source-position filename="src/libide/foundry/ide-build-manager.h"
                       line="36"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.Initable"/>
      <function name="from_context"
                c:identifier="ide_build_manager_from_context">
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="96">an #IdeBuildManager</doc>
          <type name="BuildManager" c:type="IdeBuildManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="94">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ref_from_context"
                c:identifier="ide_build_manager_ref_from_context">
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="110">an #IdeBuildManager</doc>
          <type name="BuildManager" c:type="IdeBuildManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="108">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="build_async" c:identifier="ide_build_manager_build_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1579">This function will request that @phase is completed in the underlying
build pipeline and execute a build. Upon completion, @callback will be
executed and it can determine the success or failure of the operation
using ide_build_manager_build_finish().</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1581">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1582">An #IdePipelinePhase or 0</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="targets"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1583">an array of
  #IdeBuildTarget to build</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="BuildTarget"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1585">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1586">A callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1587">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="ide_build_manager_build_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1684">Completes a request to ide_build_manager_build_async().</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1692">%TRUE if successful, otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1686">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1687">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel" c:identifier="ide_build_manager_cancel">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1353">This function will cancel any in-flight builds.

You may also activate this using the "cancel" #GAction provided
by the #GActionGroup interface.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1355">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clean_async" c:identifier="ide_build_manager_clean_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1734">Asynchronously requests that the build pipeline clean up to @phase.

See ide_pipeline_clean_async() for more information.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1736">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1737">the build phase to clean</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1738">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1739">a callback to execute upon completion, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1740">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_finish"
              c:identifier="ide_build_manager_clean_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1788">Completes an asynchronous request to ide_build_manager_clean_async().</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1796">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1790">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1791">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_busy"
              c:identifier="ide_build_manager_get_busy"
              glib:get-property="busy">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1275">Gets if the #IdeBuildManager is currently busy building the project.

See #IdeBuildManager:busy for more information.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1277">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_build"
              c:identifier="ide_build_manager_get_can_build"
              glib:get-property="can-build">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1925">Checks if the current pipeline is ready to build.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1931">%TRUE if a build operation can advance the pipeline.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1927">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error_count"
              c:identifier="ide_build_manager_get_error_count"
              glib:get-property="error-count">
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_build_time"
              c:identifier="ide_build_manager_get_last_build_time"
              glib:get-property="last-build-time">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1315">This function returns a #GDateTime of the last build request. If
there has not yet been a build request, this will return %NULL.

See #IdeBuildManager:last-build-time for more information.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1324">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1317">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="ide_build_manager_get_message"
              glib:get-property="message">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1294">This function returns the current build message as a string.

See #IdeBuildManager:message for more information.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1302">A string containing the build message or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1296">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pipeline"
              c:identifier="ide_build_manager_get_pipeline"
              glib:get-property="pipeline">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1385">This function gets the current build pipeline. The pipeline will be
reloaded as build configurations change.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1392">An #IdePipeline.</doc>
          <type name="Pipeline" c:type="IdePipeline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1387">An #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running_time"
              c:identifier="ide_build_manager_get_running_time"
              glib:get-property="running-time">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1334">Gets the amount of elapsed time of the current build as a
#GTimeSpan.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1340">a #GTimeSpan containing the elapsed time of the build.</doc>
          <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_warning_count"
              c:identifier="ide_build_manager_get_warning_count"
              glib:get-property="warning-count">
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="ide_build_manager_invalidate">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1957">Requests that the #IdeBuildManager invalidate the current pipeline and
setup a new pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1959">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_targets_async"
              c:identifier="ide_build_manager_list_targets_async">
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_targets_finish"
              c:identifier="ide_build_manager_list_targets_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="2152">Lists available build targets.

Completes a request to list available build targets that was started with
ide_build_manager_list_targets_async(). If no build targetproviders were
discovered or no build targets were found, this will return %NULL and @error
will be set to %G_IO_ERROR_NOT_SUPPORTED.

Otherwise, a non-empty #GListModel of #IdeBuildTarget will be returned.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="2166">a #GListModel of #IdeBuildTarget if successful;
  otherwise %NULL and @error is set.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="2154">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild_async"
              c:identifier="ide_build_manager_rebuild_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1838">Asynchronously requests that the build pipeline clean and rebuild up
to the given phase. This may involve discarding previous build artifacts
to allow for the rebuild process.

See ide_pipeline_rebuild_async() for more information.</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1840">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1841">the build phase to rebuild to</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="targets"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1842">an array of #GPtrArray
  of #IdeBuildTarget or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="BuildTarget"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1844">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1845">a callback to execute upon completion, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1846">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild_finish"
              c:identifier="ide_build_manager_rebuild_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1898">Completes an asynchronous request to ide_build_manager_rebuild_async().</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1906">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1900">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1901">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_pipeline"
              c:identifier="ide_build_manager_ref_pipeline">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1403">A thread-safe variant of ide_build_manager_get_pipeline().</doc>
        <source-position filename="src/libide/foundry/ide-build-manager.h"
                         line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-manager.c"
               line="1409">an #IdePipeline or %NULL</doc>
          <type name="Pipeline" c:type="IdePipeline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1405">a #IdeBuildManager</doc>
            <type name="BuildManager" c:type="IdeBuildManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="busy"
                transfer-ownership="none"
                getter="get_busy"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="969">The "busy" property indicates if there is currently a build
executing. This can be bound to UI elements to display to the
user that a build is active (and therefore other builds cannot
be activated at the moment).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-build"
                transfer-ownership="none"
                getter="get_can_build"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="954">Gets if the build manager can queue a build request.

This might be false if the required runtime is not available or other
errors in setting up the build pipeline.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="error-count"
                transfer-ownership="none"
                getter="get_error_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="984">The number of errors discovered during the build process.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="has-diagnostics"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="996">The "has-diagnostics" property indicates that there have been
diagnostics found during the last execution of the build pipeline.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="last-build-time"
                transfer-ownership="none"
                getter="get_last_build_time">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1009">The "last-build-time" property contains a #GDateTime of the time
the last build request was submitted.</doc>
        <type name="GLib.DateTime"/>
      </property>
      <property name="message"
                transfer-ownership="none"
                getter="get_message"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1022">The "message" property contains a string message describing
the current state of the build process. This may be bound to
UI elements to notify the user of the buid progress.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pipeline"
                transfer-ownership="none"
                getter="get_pipeline">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1036">The "pipeline" property is the build pipeline that the build manager
is currently managing.</doc>
        <type name="Pipeline"/>
      </property>
      <property name="running-time"
                transfer-ownership="none"
                getter="get_running_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1049">The "running-time" property can be bound by UI elements that
want to track how long the current build has taken. g_object_notify()
is called on a regular interval during the build so that the UI
elements may automatically update.

The value of this property is a #GTimeSpan, which are 64-bit signed
integers with microsecond precision. See %G_USEC_PER_SEC for a constant
to tranform this to seconds.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="warning-count"
                transfer-ownership="none"
                getter="get_warning_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1070">The "warning-count" property contains the number of warnings that have
been discovered in the current build request.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="build-failed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1106">The "build-failed" signal is emitted when a build that was previously
notified via #IdeBuildManager::build-started has failed to complete
successfully.

Contrast this with #IdeBuildManager::build-finished for a successful
build.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1109">An #IdePipeline</doc>
            <type name="Pipeline"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-finished" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1130">The "build-finished" signal is emitted when a build completed
successfully.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1133">An #IdePipeline</doc>
            <type name="Pipeline"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="build-started" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-manager.c"
             line="1085">The "build-started" signal is emitted when a new build has started.
The build may be an incremental build. The @pipeline instance is
the build pipeline which is being executed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-manager.c"
                 line="1088">An #IdePipeline</doc>
            <type name="Pipeline"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BuildManagerClass"
            c:type="IdeBuildManagerClass"
            glib:is-gtype-struct-for="BuildManager">
      <source-position filename="src/libide/foundry/ide-build-manager.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="BuildSystem"
               c:symbol-prefix="build_system"
               c:type="IdeBuildSystem"
               glib:type-name="IdeBuildSystem"
               glib:get-type="ide_build_system_get_type"
               glib:type-struct="BuildSystemInterface">
      <source-position filename="src/libide/foundry/ide-build-system.h"
                       line="72"/>
      <prerequisite name="Object"/>
      <function name="from_context"
                c:identifier="ide_build_system_from_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-foundry-compat.c"
             line="120">Gets the build system for the context. If no build system has been
registered, then this returns %NULL.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="75"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="127">an #IdeBuildSystem</doc>
          <type name="BuildSystem" c:type="IdeBuildSystem*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="122">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_build_flags_async"
                      invoker="get_build_flags_async">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_build_flags_finish"
                      invoker="get_build_flags_finish"
                      throws="1">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_build_flags_for_files_async"
                      invoker="get_build_flags_for_files_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="479">This function will get build flags for all files and returns
map of file and its build flags as #GHashTable.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="481">An #IdeBuildSystem instance.</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="482">array of files whose build flags has to be retrieved.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Gio.File"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="483">a #GCancellable to cancel getting build flags.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="484">function to be called after getting build flags.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="485">data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_build_flags_for_files_finish"
                      invoker="get_build_flags_for_files_finish"
                      throws="1">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="514">a #GHashTable or #GFile to #GStrv</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="File"/>
            <array>
              <type name="utf8"/>
            </array>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="510">an #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="511">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_builddir" invoker="get_builddir">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="60"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_display_name" invoker="get_display_name">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_id" invoker="get_id">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_project_version" invoker="get_project_version">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="799">If the build system supports it, gets the project version as configured
in the build system's configuration files.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="66"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="806">a string containing the project version</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="801">a #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_srcdir" invoker="get_srcdir">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_tooling"
                      invoker="prepare_tooling"
                      version="44">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="842">This should prepare an environment for developer tooling such as a language server.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="844">a #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="run_context" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_language" invoker="supports_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="820">Returns %TRUE if @self in it's current configuration is known to support @language.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="827">%TRUE if @language is supported, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="822">a #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="823">the language identifier</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_toolchain" invoker="supports_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="771">Checks whether the build system supports the given toolchain.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="778">%TRUE if the toolchain is supported by the build system, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="773">an #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="774">a #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_build_flags_async"
              c:identifier="ide_build_system_get_build_flags_async">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_flags_finish"
              c:identifier="ide_build_system_get_build_flags_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="96"/>
        <return-value transfer-ownership="full">
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_flags_for_dir_async"
              c:identifier="ide_build_system_get_build_flags_for_dir_async">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_flags_for_dir_finish"
              c:identifier="ide_build_system_get_build_flags_for_dir_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="758">a #GHashTable of #GFile to #GStrv</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="File"/>
            <array>
              <type name="utf8"/>
            </array>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="754">an #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="755">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_flags_for_files_async"
              c:identifier="ide_build_system_get_build_flags_for_files_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="479">This function will get build flags for all files and returns
map of file and its build flags as #GHashTable.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="481">An #IdeBuildSystem instance.</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="482">array of files whose build flags has to be retrieved.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Gio.File"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="483">a #GCancellable to cancel getting build flags.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="484">function to be called after getting build flags.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="485">data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_flags_for_files_finish"
              c:identifier="ide_build_system_get_build_flags_for_files_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="514">a #GHashTable or #GFile to #GStrv</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="File"/>
            <array>
              <type name="utf8"/>
            </array>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="510">an #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="511">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_builddir" c:identifier="ide_build_system_get_builddir">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="83"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_build_system_get_display_name">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="79"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_build_system_get_id">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="77"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_build_system_get_priority">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_project_version"
              c:identifier="ide_build_system_get_project_version">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="799">If the build system supports it, gets the project version as configured
in the build system's configuration files.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="88"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="806">a string containing the project version</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="801">a #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_srcdir" c:identifier="ide_build_system_get_srcdir">
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="86"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_tooling"
              c:identifier="ide_build_system_prepare_tooling"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="842">This should prepare an environment for developer tooling such as a language server.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="844">a #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="run_context" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_language"
              c:identifier="ide_build_system_supports_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="820">Returns %TRUE if @self in it's current configuration is known to support @language.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="827">%TRUE if @language is supported, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="822">a #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="823">the language identifier</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_toolchain"
              c:identifier="ide_build_system_supports_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system.c"
             line="771">Checks whether the build system supports the given toolchain.</doc>
        <source-position filename="src/libide/foundry/ide-build-system.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system.c"
               line="778">%TRUE if the toolchain is supported by the build system, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="773">an #IdeBuildSystem</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="774">a #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </method>
      <property name="project-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
    </interface>
    <interface name="BuildSystemDiscovery"
               c:symbol-prefix="build_system_discovery"
               c:type="IdeBuildSystemDiscovery"
               glib:type-name="IdeBuildSystemDiscovery"
               glib:get-type="ide_build_system_discovery_get_type"
               glib:type-struct="BuildSystemDiscoveryInterface">
      <source-position filename="src/libide/foundry/ide-build-system-discovery.h"
                       line="47"/>
      <virtual-method name="discover" invoker="discover" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system-discovery.c"
             line="34">This virtual method can be used to try to discover the build system to use for
a particular project. This might be used in cases like Flatpak where the build
system can be determined from the .json manifest rather than auto-discovery
by locating project files.</doc>
        <source-position filename="src/libide/foundry/ide-build-system-discovery.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system-discovery.c"
               line="47">The hint for the build system, which should match what
  the build system returns from ide_build_system_get_id().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="36">An #IdeBuildSystemDiscovery</doc>
            <type name="BuildSystemDiscovery"
                  c:type="IdeBuildSystemDiscovery*"/>
          </instance-parameter>
          <parameter name="project_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="37">a #GFile containing the project file (a directory)</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="38">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="priority"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="39">A location for the priority</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="discover"
              c:identifier="ide_build_system_discovery_discover"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-system-discovery.c"
             line="34">This virtual method can be used to try to discover the build system to use for
a particular project. This might be used in cases like Flatpak where the build
system can be determined from the .json manifest rather than auto-discovery
by locating project files.</doc>
        <source-position filename="src/libide/foundry/ide-build-system-discovery.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-system-discovery.c"
               line="47">The hint for the build system, which should match what
  the build system returns from ide_build_system_get_id().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="36">An #IdeBuildSystemDiscovery</doc>
            <type name="BuildSystemDiscovery"
                  c:type="IdeBuildSystemDiscovery*"/>
          </instance-parameter>
          <parameter name="project_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="37">a #GFile containing the project file (a directory)</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="38">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="priority"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="39">A location for the priority</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="BuildSystemDiscoveryInterface"
            c:type="IdeBuildSystemDiscoveryInterface"
            glib:is-gtype-struct-for="BuildSystemDiscovery">
      <source-position filename="src/libide/foundry/ide-build-system-discovery.h"
                       line="47"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="discover">
        <callback name="discover" throws="1">
          <source-position filename="src/libide/foundry/ide-build-system-discovery.h"
                           line="42"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system-discovery.c"
                 line="47">The hint for the build system, which should match what
  the build system returns from ide_build_system_get_id().</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system-discovery.c"
                   line="36">An #IdeBuildSystemDiscovery</doc>
              <type name="BuildSystemDiscovery"
                    c:type="IdeBuildSystemDiscovery*"/>
            </parameter>
            <parameter name="project_file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system-discovery.c"
                   line="37">a #GFile containing the project file (a directory)</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system-discovery.c"
                   line="38">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="priority"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system-discovery.c"
                   line="39">A location for the priority</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="BuildSystemInterface"
            c:type="IdeBuildSystemInterface"
            glib:is-gtype-struct-for="BuildSystem">
      <source-position filename="src/libide/foundry/ide-build-system.h"
                       line="72"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_flags_async">
        <callback name="get_build_flags_async">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_flags_finish">
        <callback name="get_build_flags_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="49"/>
          <return-value transfer-ownership="full">
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_flags_for_files_async">
        <callback name="get_build_flags_for_files_async">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="481">An #IdeBuildSystem instance.</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="files" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="482">array of files whose build flags has to be retrieved.</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="Gio.File"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="483">a #GCancellable to cancel getting build flags.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="484">function to be called after getting build flags.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="485">data to pass to @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_build_flags_for_files_finish">
        <callback name="get_build_flags_for_files_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="57"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="514">a #GHashTable or #GFile to #GStrv</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="File"/>
              <array>
                <type name="utf8"/>
              </array>
            </type>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="510">an #IdeBuildSystem</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="511">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_builddir">
        <callback name="get_builddir">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="60"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_id">
        <callback name="get_id">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="62"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_display_name">
        <callback name="get_display_name">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="63"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_toolchain">
        <callback name="supports_toolchain">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="778">%TRUE if the toolchain is supported by the build system, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="773">an #IdeBuildSystem</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="toolchain" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="774">a #IdeToolchain</doc>
              <type name="Toolchain" c:type="IdeToolchain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_project_version">
        <callback name="get_project_version">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="66"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="806">a string containing the project version</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="801">a #IdeBuildSystem</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_language">
        <callback name="supports_language">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-system.c"
                 line="827">%TRUE if @language is supported, otherwise %FALSE.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="822">a #IdeBuildSystem</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="823">the language identifier</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_srcdir">
        <callback name="get_srcdir">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="69"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_tooling">
        <callback name="prepare_tooling">
          <source-position filename="src/libide/foundry/ide-build-system.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-system.c"
                   line="844">a #IdeBuildSystem</doc>
              <type name="BuildSystem" c:type="IdeBuildSystem*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="BuildTarget"
               c:symbol-prefix="build_target"
               c:type="IdeBuildTarget"
               glib:type-name="IdeBuildTarget"
               glib:get-type="ide_build_target_get_type"
               glib:type-struct="BuildTargetInterface">
      <source-position filename="src/libide/foundry/ide-build-target.h"
                       line="59"/>
      <prerequisite name="Object"/>
      <virtual-method name="get_argv" invoker="get_argv">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="166">Gets the arguments used to run the target.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="172">A #GStrv containing the arguments to
  run the target.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="168">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_cwd" invoker="get_cwd">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="208">For build systems and build target providers that insist to be run in
a specific place, this method gets the correct working directory.

If this method returns %NULL, the runtime will pick a default working
directory for the spawned process (usually, the user home directory
in the host system, or the flatpak sandbox home under flatpak).</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="56"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="219">the working directory to use for this target</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="210">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_display_name" invoker="get_display_name">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="53"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="89">A display name for the build
  target to be displayed in UI. May contain pango markup.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_install_directory"
                      invoker="get_install_directory">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="51"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="52">a #GFile or %NULL.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_kind" invoker="get_kind">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="139">Gets the kind of artifact.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="145">an #IdeArtifactKind</doc>
          <type name="ArtifactKind" c:type="IdeArtifactKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="141">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_language" invoker="get_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="229">Return the main programming language that was used to
write this build target.

This method is primarily used to choose an appropriate
debugger. Therefore, if a build target is composed of
components in multiple language (eg. a GJS app with
GObject Introspection libraries, or a Java app with JNI
libraries), this should return the language that is
most likely to be appropriate for debugging.

The default implementation returns "asm", which indicates
an unspecified language that compiles to native code.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="246">the programming language of this target</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="231">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="106">A filename or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="119">Gets the priority of the build target. This is used to sort build targets by
their importance. The lowest value (negative values are allowed) will be run
as the default run target by Builder.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="127">the priority of the build target</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="121">an #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="compare" c:identifier="ide_build_target_compare">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <type name="BuildTarget" c:type="const IdeBuildTarget*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <type name="BuildTarget" c:type="const IdeBuildTarget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_argv" c:identifier="ide_build_target_get_argv">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="166">Gets the arguments used to run the target.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="172">A #GStrv containing the arguments to
  run the target.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="168">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cwd" c:identifier="ide_build_target_get_cwd">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="208">For build systems and build target providers that insist to be run in
a specific place, this method gets the correct working directory.

If this method returns %NULL, the runtime will pick a default working
directory for the spawned process (usually, the user home directory
in the host system, or the flatpak sandbox home under flatpak).</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="72"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="219">the working directory to use for this target</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="210">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_build_target_get_display_name">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="66"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="89">A display name for the build
  target to be displayed in UI. May contain pango markup.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_install" c:identifier="ide_build_target_get_install">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="65">Checks if the #IdeBuildTarget gets installed.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="71">%TRUE if the build target is installed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="67">an #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_install_directory"
              c:identifier="ide_build_target_get_install_directory">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="62"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="52">a #GFile or %NULL.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="ide_build_target_get_kind">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="139">Gets the kind of artifact.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="145">an #IdeArtifactKind</doc>
          <type name="ArtifactKind" c:type="IdeArtifactKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="141">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language" c:identifier="ide_build_target_get_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="229">Return the main programming language that was used to
write this build target.

This method is primarily used to choose an appropriate
debugger. Therefore, if a build target is composed of
components in multiple language (eg. a GJS app with
GObject Introspection libraries, or a Java app with JNI
libraries), this should return the language that is
most likely to be appropriate for debugging.

The default implementation returns "asm", which indicates
an unspecified language that compiles to native code.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="246">the programming language of this target</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="231">a #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_build_target_get_name">
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="64"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="106">A filename or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_build_target_get_priority">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target.c"
             line="119">Gets the priority of the build target. This is used to sort build targets by
their importance. The lowest value (negative values are allowed) will be run
as the default run target by Builder.</doc>
        <source-position filename="src/libide/foundry/ide-build-target.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target.c"
               line="127">the priority of the build target</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="121">an #IdeBuildTarget</doc>
            <type name="BuildTarget" c:type="IdeBuildTarget*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="BuildTargetInterface"
            c:type="IdeBuildTargetInterface"
            glib:is-gtype-struct-for="BuildTarget">
      <source-position filename="src/libide/foundry/ide-build-target.h"
                       line="59"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_install_directory">
        <callback name="get_install_directory">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="51"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="52">a #GFile or %NULL.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="52"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="106">A filename or %NULL.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_display_name">
        <callback name="get_display_name">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="53"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="89">A display name for the build
  target to be displayed in UI. May contain pango markup.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="127">the priority of the build target</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target.c"
                   line="121">an #IdeBuildTarget</doc>
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_argv">
        <callback name="get_argv">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="55"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="172">A #GStrv containing the arguments to
  run the target.</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target.c"
                   line="168">a #IdeBuildTarget</doc>
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_cwd">
        <callback name="get_cwd">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="56"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="219">the working directory to use for this target</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target.c"
                   line="210">a #IdeBuildTarget</doc>
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_language">
        <callback name="get_language">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="57"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="246">the programming language of this target</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target.c"
                   line="231">a #IdeBuildTarget</doc>
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_kind">
        <callback name="get_kind">
          <source-position filename="src/libide/foundry/ide-build-target.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target.c"
                 line="145">an #IdeArtifactKind</doc>
            <type name="ArtifactKind" c:type="IdeArtifactKind"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target.c"
                   line="141">a #IdeBuildTarget</doc>
              <type name="BuildTarget" c:type="IdeBuildTarget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="BuildTargetProvider"
               c:symbol-prefix="build_target_provider"
               c:type="IdeBuildTargetProvider"
               glib:type-name="IdeBuildTargetProvider"
               glib:get-type="ide_build_target_provider_get_type"
               glib:type-struct="BuildTargetProviderInterface">
      <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                       line="47"/>
      <virtual-method name="get_targets_async" invoker="get_targets_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target-provider.c"
             line="58">Asynchronously requests that the provider fetch all of the known build
targets that are part of the project. Generally this should be limited to
executables that Builder might be interested in potentially running.

@callback should call ide_build_target_provider_get_targets_finish() to
complete the asynchronous operation.

See also: ide_build_target_provider_get_targets_finish()</doc>
        <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="60">an #IdeBuildTargetProvider</doc>
            <type name="BuildTargetProvider" c:type="IdeBuildTargetProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="61">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="62">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="63">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_targets_finish"
                      invoker="get_targets_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target-provider.c"
             line="89">Completes a request to get the targets for the project.

See also: ide_build_target_provider_get_targets_async()</doc>
        <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target-provider.c"
               line="99">The array of
  build targets or %NULL upon failure and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="BuildTarget"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="91">an #IdeBuildTargetProvider</doc>
            <type name="BuildTargetProvider" c:type="IdeBuildTargetProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="92">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_targets_async"
              c:identifier="ide_build_target_provider_get_targets_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target-provider.c"
             line="58">Asynchronously requests that the provider fetch all of the known build
targets that are part of the project. Generally this should be limited to
executables that Builder might be interested in potentially running.

@callback should call ide_build_target_provider_get_targets_finish() to
complete the asynchronous operation.

See also: ide_build_target_provider_get_targets_finish()</doc>
        <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="60">an #IdeBuildTargetProvider</doc>
            <type name="BuildTargetProvider" c:type="IdeBuildTargetProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="61">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="62">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="63">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_targets_finish"
              c:identifier="ide_build_target_provider_get_targets_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-build-target-provider.c"
             line="89">Completes a request to get the targets for the project.

See also: ide_build_target_provider_get_targets_async()</doc>
        <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-build-target-provider.c"
               line="99">The array of
  build targets or %NULL upon failure and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="BuildTarget"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="91">an #IdeBuildTargetProvider</doc>
            <type name="BuildTargetProvider" c:type="IdeBuildTargetProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="92">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="BuildTargetProviderInterface"
            c:type="IdeBuildTargetProviderInterface"
            glib:is-gtype-struct-for="BuildTargetProvider">
      <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                       line="47"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_targets_async">
        <callback name="get_targets_async">
          <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target-provider.c"
                   line="60">an #IdeBuildTargetProvider</doc>
              <type name="BuildTargetProvider"
                    c:type="IdeBuildTargetProvider*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target-provider.c"
                   line="61">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target-provider.c"
                   line="62">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target-provider.c"
                   line="63">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_targets_finish">
        <callback name="get_targets_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-build-target-provider.h"
                           line="44"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-build-target-provider.c"
                 line="99">The array of
  build targets or %NULL upon failure and @error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="BuildTarget"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target-provider.c"
                   line="91">an #IdeBuildTargetProvider</doc>
              <type name="BuildTargetProvider"
                    c:type="IdeBuildTargetProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-build-target-provider.c"
                   line="92">a #GAsyncResult provided to the callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="IDE_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="91">Compile-time version checking. Evaluates to %TRUE if the version
of libide is greater than the required one.

Micro is no longer used.</doc>
      <source-position filename="src/libide/core/ide-version.h" line="101"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-version.h"
               line="93">required major version</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-version.h"
               line="94">required minor version</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-version.h"
               line="95">required micro version</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="CachedListModel"
           c:symbol-prefix="cached_list_model"
           c:type="IdeCachedListModel"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeCachedListModel"
           glib:get-type="ide_cached_list_model_get_type"
           glib:type-struct="CachedListModelClass">
      <source-position filename="src/libide/io/ide-cached-list-model.h"
                       line="30"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_cached_list_model_new">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-cached-list-model.c"
             line="286">Creates a new list model that caches the items.

This might be useful if have a GtkMapListModel which would otherwise discard your
mapped items.</doc>
        <source-position filename="src/libide/io/ide-cached-list-model.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-cached-list-model.c"
               line="295">an #IdeCachedListModel</doc>
          <type name="CachedListModel" c:type="IdeCachedListModel*"/>
        </return-value>
        <parameters>
          <parameter name="model"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-cached-list-model.c"
                 line="288">a #GListModel or %NULL</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_model"
              c:identifier="ide_cached_list_model_get_model"
              glib:get-property="model">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-cached-list-model.c"
             line="185">Gets the underlying model.</doc>
        <source-position filename="src/libide/io/ide-cached-list-model.h"
                         line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-cached-list-model.c"
               line="191">a #GListModel or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-cached-list-model.c"
                 line="187">a #IdeCachedListModel</doc>
            <type name="CachedListModel" c:type="IdeCachedListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="ide_cached_list_model_set_model"
              glib:set-property="model">
        <source-position filename="src/libide/io/ide-cached-list-model.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CachedListModel" c:type="IdeCachedListModel*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Gio.ListModel"/>
      </property>
    </class>
    <record name="CachedListModelClass"
            c:type="IdeCachedListModelClass"
            glib:is-gtype-struct-for="CachedListModel">
      <source-position filename="src/libide/io/ide-cached-list-model.h"
                       line="30"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="CodeAction"
               c:symbol-prefix="code_action"
               c:type="IdeCodeAction"
               glib:type-name="IdeCodeAction"
               glib:get-type="ide_code_action_get_type"
               glib:type-struct="CodeActionInterface">
      <source-position filename="src/libide/code/ide-code-action.h" line="51"/>
      <virtual-method name="execute_async" invoker="execute_async">
        <source-position filename="src/libide/code/ide-code-action.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeAction" c:type="IdeCodeAction*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="execute_finish"
                      invoker="execute_finish"
                      throws="1">
        <source-position filename="src/libide/code/ide-code-action.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeAction" c:type="IdeCodeAction*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_title" invoker="get_title">
        <source-position filename="src/libide/code/ide-code-action.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeAction" c:type="IdeCodeAction*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="execute_async"
              c:identifier="ide_code_action_execute_async">
        <source-position filename="src/libide/code/ide-code-action.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeAction" c:type="IdeCodeAction*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_code_action_execute_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-code-action.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeAction" c:type="IdeCodeAction*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_code_action_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/code/ide-code-action.h"
                         line="54"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeAction" c:type="IdeCodeAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="title"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="CodeActionInterface"
            c:type="IdeCodeActionInterface"
            glib:is-gtype-struct-for="CodeAction">
      <source-position filename="src/libide/code/ide-code-action.h" line="51"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <source-position filename="src/libide/code/ide-code-action.h"
                           line="43"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CodeAction" c:type="IdeCodeAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute_async">
        <callback name="execute_async">
          <source-position filename="src/libide/code/ide-code-action.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CodeAction" c:type="IdeCodeAction*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute_finish">
        <callback name="execute_finish" throws="1">
          <source-position filename="src/libide/code/ide-code-action.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CodeAction" c:type="IdeCodeAction*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="CodeActionProvider"
               c:symbol-prefix="code_action_provider"
               c:type="IdeCodeActionProvider"
               glib:type-name="IdeCodeActionProvider"
               glib:get-type="ide_code_action_provider_get_type"
               glib:type-struct="CodeActionProviderInterface">
      <source-position filename="src/libide/code/ide-code-action-provider.h"
                       line="55"/>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query_async" invoker="query_async">
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query_finish" invoker="query_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-action-provider.c"
             line="95">Completes an asynchronous request to ide_code_action_provider_query_async().</doc>
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-action-provider.c"
               line="103">a #GPtrArray of #IdeCodeAction.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CodeAction"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-action-provider.c"
                 line="97">an #IdeBuffer</doc>
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-action-provider.c"
                 line="98">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_diagnostics" invoker="set_diagnostics">
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="diags" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_code_action_provider_load">
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="query_async"
              c:identifier="ide_code_action_provider_query_async">
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_finish"
              c:identifier="ide_code_action_provider_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-action-provider.c"
             line="95">Completes an asynchronous request to ide_code_action_provider_query_async().</doc>
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-action-provider.c"
               line="103">a #GPtrArray of #IdeCodeAction.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CodeAction"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-action-provider.c"
                 line="97">an #IdeBuffer</doc>
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-action-provider.c"
                 line="98">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_diagnostics"
              c:identifier="ide_code_action_provider_set_diagnostics">
        <source-position filename="src/libide/code/ide-code-action-provider.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="diags" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="CodeActionProviderInterface"
            c:type="IdeCodeActionProviderInterface"
            glib:is-gtype-struct-for="CodeActionProvider">
      <source-position filename="src/libide/code/ide-code-action-provider.h"
                       line="55"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-code-action-provider.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_async">
        <callback name="query_async">
          <source-position filename="src/libide/code/ide-code-action-provider.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_finish">
        <callback name="query_finish" throws="1">
          <source-position filename="src/libide/code/ide-code-action-provider.h"
                           line="50"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-action-provider.c"
                 line="103">a #GPtrArray of #IdeCodeAction.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="CodeAction"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-action-provider.c"
                   line="97">an #IdeBuffer</doc>
              <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-action-provider.c"
                   line="98">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_diagnostics">
        <callback name="set_diagnostics">
          <source-position filename="src/libide/code/ide-code-action-provider.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="CodeActionProvider" c:type="IdeCodeActionProvider*"/>
            </parameter>
            <parameter name="diags" transfer-ownership="none">
              <type name="Diagnostics" c:type="IdeDiagnostics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="CodeIndexEntries"
               c:symbol-prefix="code_index_entries"
               c:type="IdeCodeIndexEntries"
               glib:type-name="IdeCodeIndexEntries"
               glib:get-type="ide_code_index_entries_get_type"
               glib:type-struct="CodeIndexEntriesInterface">
      <source-position filename="src/libide/code/ide-code-index-entries.h"
                       line="52"/>
      <virtual-method name="get_file" invoker="get_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="108">The file that was indexed.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="114">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="110">a #IdeCodeIndexEntries</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_next_entry" invoker="get_next_entry">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="89">This will fetch next entry in index.

When all of the entries have been exhausted, %NULL should be returned.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="44"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="97">An #IdeCodeIndexEntry.</doc>
          <type name="CodeIndexEntry" c:type="IdeCodeIndexEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="91">An #IdeCodeIndexEntries instance.</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="next_entries_async" invoker="next_entries_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="125">Requests the next set of results from the code index asynchronously.
This allows implementations to possibly process data off the main thread
without blocking the main loop.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="127">a #IdeCodeIndexEntries</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="128">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="129">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="130">user data for @callback, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="next_entries_finish"
                      invoker="next_entries_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="149">Completes an asynchronous request for the next set of entries from the index.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="157">a #GPtrArray
  of #IdeCodeIndexEntry.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CodeIndexEntry"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="151">a #IdeCodeIndexEntries</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="152">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="collect_async"
              c:identifier="ide_code_index_entries_collect_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="215">Calls ide_code_index_entries_next_entries_async() repeatedly until all
entries have been retrieved. After that, the async operation will complete.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="collect_finish"
              c:identifier="ide_code_index_entries_collect_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="243">an array of #IdeCodeIndexEntry
  or %NULL and @error is set</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CodeIndexEntry"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_code_index_entries_get_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="108">The file that was indexed.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="114">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="110">a #IdeCodeIndexEntries</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_entry"
              c:identifier="ide_code_index_entries_get_next_entry">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="89">This will fetch next entry in index.

When all of the entries have been exhausted, %NULL should be returned.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="55"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="97">An #IdeCodeIndexEntry.</doc>
          <type name="CodeIndexEntry" c:type="IdeCodeIndexEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="91">An #IdeCodeIndexEntries instance.</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next_entries_async"
              c:identifier="ide_code_index_entries_next_entries_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="125">Requests the next set of results from the code index asynchronously.
This allows implementations to possibly process data off the main thread
without blocking the main loop.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="127">a #IdeCodeIndexEntries</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="128">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="129">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="130">user data for @callback, or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_entries_finish"
              c:identifier="ide_code_index_entries_next_entries_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entries.c"
             line="149">Completes an asynchronous request for the next set of entries from the index.</doc>
        <source-position filename="src/libide/code/ide-code-index-entries.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entries.c"
               line="157">a #GPtrArray
  of #IdeCodeIndexEntry.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CodeIndexEntry"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="151">a #IdeCodeIndexEntries</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="152">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="CodeIndexEntriesInterface"
            c:type="IdeCodeIndexEntriesInterface"
            glib:is-gtype-struct-for="CodeIndexEntries">
      <source-position filename="src/libide/code/ide-code-index-entries.h"
                       line="52"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_file">
        <callback name="get_file">
          <source-position filename="src/libide/code/ide-code-index-entries.h"
                           line="43"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="114">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="110">a #IdeCodeIndexEntries</doc>
              <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_next_entry">
        <callback name="get_next_entry">
          <source-position filename="src/libide/code/ide-code-index-entries.h"
                           line="44"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="97">An #IdeCodeIndexEntry.</doc>
            <type name="CodeIndexEntry" c:type="IdeCodeIndexEntry*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="91">An #IdeCodeIndexEntries instance.</doc>
              <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_entries_async">
        <callback name="next_entries_async">
          <source-position filename="src/libide/code/ide-code-index-entries.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="127">a #IdeCodeIndexEntries</doc>
              <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="128">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="129">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="130">user data for @callback, or %NULL</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="next_entries_finish">
        <callback name="next_entries_finish" throws="1">
          <source-position filename="src/libide/code/ide-code-index-entries.h"
                           line="49"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entries.c"
                 line="157">a #GPtrArray
  of #IdeCodeIndexEntry.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="CodeIndexEntry"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="151">a #IdeCodeIndexEntries</doc>
              <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-index-entries.c"
                   line="152">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="CodeIndexEntry"
            c:type="IdeCodeIndexEntry"
            opaque="1"
            glib:type-name="IdeCodeIndexEntry"
            glib:get-type="ide_code_index_entry_get_type"
            c:symbol-prefix="code_index_entry">
      <source-position filename="src/libide/code/ide-code-types.h" line="35"/>
      <method name="copy" c:identifier="ide_code_index_entry_copy">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="73"/>
        <return-value transfer-ownership="full">
          <type name="CodeIndexEntry" c:type="IdeCodeIndexEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntry" c:type="const IdeCodeIndexEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ide_code_index_entry_free">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntry" c:type="IdeCodeIndexEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="ide_code_index_entry_get_flags">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntry" c:type="const IdeCodeIndexEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key" c:identifier="ide_code_index_entry_get_key">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntry" c:type="const IdeCodeIndexEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="ide_code_index_entry_get_kind">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntry" c:type="const IdeCodeIndexEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_code_index_entry_get_name">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="CodeIndexEntry" c:type="const IdeCodeIndexEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range" c:identifier="ide_code_index_entry_get_range">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="127">a #IdeCodeIndexEntry</doc>
            <type name="CodeIndexEntry" c:type="const IdeCodeIndexEntry*"/>
          </instance-parameter>
          <parameter name="begin_line"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="128">first line</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="begin_line_offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="129">first line offset</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="end_line"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="130">last line</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="end_line_offset"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="131">last line offset</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="CodeIndexEntryBuilder"
            c:type="IdeCodeIndexEntryBuilder"
            opaque="1"
            glib:type-name="IdeCodeIndexEntryBuilder"
            glib:get-type="ide_code_index_entry_builder_get_type"
            c:symbol-prefix="code_index_entry_builder">
      <source-position filename="src/libide/code/ide-code-index-entry.h"
                       line="38"/>
      <constructor name="new" c:identifier="ide_code_index_entry_builder_new">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <type name="CodeIndexEntryBuilder"
                c:type="IdeCodeIndexEntryBuilder*"/>
        </return-value>
      </constructor>
      <method name="build" c:identifier="ide_code_index_entry_builder_build">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-index-entry.c"
             line="231">Creates an immutable #IdeCodeIndexEntry from the builder content.</doc>
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entry.c"
               line="237">an #IdeCodeIndexEntry</doc>
          <type name="CodeIndexEntry" c:type="IdeCodeIndexEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="233">a #IdeCodeIndexEntryBuilder</doc>
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ide_code_index_entry_builder_copy">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-index-entry.c"
               line="251">a deep copy of @builder</doc>
          <type name="CodeIndexEntryBuilder"
                c:type="IdeCodeIndexEntryBuilder*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-index-entry.c"
                 line="249">a #IdeCodeIndexEntryBuilder</doc>
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ide_code_index_entry_builder_free">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="ide_code_index_entry_builder_set_flags">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key"
              c:identifier="ide_code_index_entry_builder_set_key">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind"
              c:identifier="ide_code_index_entry_builder_set_kind">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="SymbolKind" c:type="IdeSymbolKind"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_code_index_entry_builder_set_name">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_range"
              c:identifier="ide_code_index_entry_builder_set_range">
        <source-position filename="src/libide/code/ide-code-index-entry.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="CodeIndexEntryBuilder"
                  c:type="IdeCodeIndexEntryBuilder*"/>
          </instance-parameter>
          <parameter name="begin_line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="begin_line_offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="end_line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="end_line_offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <interface name="CodeIndexer"
               c:symbol-prefix="code_indexer"
               c:type="IdeCodeIndexer"
               glib:type-name="IdeCodeIndexer"
               glib:get-type="ide_code_indexer_get_type"
               glib:type-struct="CodeIndexerInterface">
      <source-position filename="src/libide/code/ide-code-indexer.h"
                       line="60"/>
      <prerequisite name="Object"/>
      <virtual-method name="generate_key_async" invoker="generate_key_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="175">This function will get key of reference located at #IdeSoureLocation.

In 3.30 this function gained the @build_flags parameter.</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="177">An #IdeCodeIndexer instance.</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="178">Source location of refernece.</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="build_flags"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="179">array of build flags to parse @file.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="180">a #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="181">A callback to execute upon indexing.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="182">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="generate_key_finish"
                      invoker="generate_key_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="204">Returns key for declaration of reference at a location.</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-indexer.c"
               line="212">A string which contains key.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="206">an #IdeCodeIndexer</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="207">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="index_file_async" invoker="index_file_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="114">This function will take index source file and create an array of symbols in
@file. @callback is called upon completion and must call
ide_code_indexer_index_file_finish() to complete the operation.</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="116">An #IdeCodeIndexer instance.</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="117">Source file to index.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="build_flags"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="118">array of build flags to parse @file.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="119">a #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="120">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="121">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="index_file_finish"
                      invoker="index_file_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="152">Completes an asynchronous request to ide_code_indexer_index_file_async().</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-indexer.c"
               line="160">an #IdeCodeIndexEntries if successful; otherwise %NULL
  and @error is set.</doc>
          <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="154">a #IdeCodeIndexer</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="155">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="generate_key_async"
              c:identifier="ide_code_indexer_generate_key_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="175">This function will get key of reference located at #IdeSoureLocation.

In 3.30 this function gained the @build_flags parameter.</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="177">An #IdeCodeIndexer instance.</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="178">Source location of refernece.</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="build_flags"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="179">array of build flags to parse @file.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="180">a #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="181">A callback to execute upon indexing.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="182">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key_finish"
              c:identifier="ide_code_indexer_generate_key_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="204">Returns key for declaration of reference at a location.</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-indexer.c"
               line="212">A string which contains key.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="206">an #IdeCodeIndexer</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="207">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_file_async"
              c:identifier="ide_code_indexer_index_file_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="114">This function will take index source file and create an array of symbols in
@file. @callback is called upon completion and must call
ide_code_indexer_index_file_finish() to complete the operation.</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="116">An #IdeCodeIndexer instance.</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="117">Source file to index.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="build_flags"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="118">array of build flags to parse @file.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="119">a #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="120">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="121">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="index_file_finish"
              c:identifier="ide_code_indexer_index_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-code-indexer.c"
             line="152">Completes an asynchronous request to ide_code_indexer_index_file_async().</doc>
        <source-position filename="src/libide/code/ide-code-indexer.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-code-indexer.c"
               line="160">an #IdeCodeIndexEntries if successful; otherwise %NULL
  and @error is set.</doc>
          <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="154">a #IdeCodeIndexer</doc>
            <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="155">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="CodeIndexerInterface"
            c:type="IdeCodeIndexerInterface"
            glib:is-gtype-struct-for="CodeIndexer">
      <source-position filename="src/libide/code/ide-code-indexer.h"
                       line="60"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="generate_key_async">
        <callback name="generate_key_async">
          <source-position filename="src/libide/code/ide-code-indexer.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="177">An #IdeCodeIndexer instance.</doc>
              <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="178">Source location of refernece.</doc>
              <type name="Location" c:type="IdeLocation*"/>
            </parameter>
            <parameter name="build_flags"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="179">array of build flags to parse @file.</doc>
              <array c:type="const gchar* const*">
                <type name="utf8" c:type="gchar*"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="180">a #GCancellable.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="181">A callback to execute upon indexing.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="182">User data to pass to @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="generate_key_finish">
        <callback name="generate_key_finish" throws="1">
          <source-position filename="src/libide/code/ide-code-indexer.h"
                           line="48"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="212">A string which contains key.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="206">an #IdeCodeIndexer</doc>
              <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="207">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="index_file_async">
        <callback name="index_file_async">
          <source-position filename="src/libide/code/ide-code-indexer.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="116">An #IdeCodeIndexer instance.</doc>
              <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="117">Source file to index.</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="build_flags"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="118">array of build flags to parse @file.</doc>
              <array c:type="const gchar* const*">
                <type name="utf8" c:type="gchar*"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="119">a #GCancellable.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="120">a #GAsyncReadyCallback</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="121">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="index_file_finish">
        <callback name="index_file_finish" throws="1">
          <source-position filename="src/libide/code/ide-code-indexer.h"
                           line="57"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-code-indexer.c"
                 line="160">an #IdeCodeIndexEntries if successful; otherwise %NULL
  and @error is set.</doc>
            <type name="CodeIndexEntries" c:type="IdeCodeIndexEntries*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="154">a #IdeCodeIndexer</doc>
              <type name="CodeIndexer" c:type="IdeCodeIndexer*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-code-indexer.c"
                   line="155">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="CompileCommands"
           c:symbol-prefix="compile_commands"
           c:type="IdeCompileCommands"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeCompileCommands"
           glib:get-type="ide_compile_commands_get_type"
           glib:type-struct="CompileCommandsClass">
      <source-position filename="src/libide/foundry/ide-compile-commands.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_compile_commands_new">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-compile-commands.c"
             line="127">Creates a new #IdeCompileCommands object which can be used to parse
clang-style compile commands database files (compile_commands.json).</doc>
        <source-position filename="src/libide/foundry/ide-compile-commands.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-compile-commands.c"
               line="133">The newly created #IdeCompileCommands</doc>
          <type name="CompileCommands" c:type="IdeCompileCommands*"/>
        </return-value>
      </constructor>
      <method name="load" c:identifier="ide_compile_commands_load" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-compile-commands.c"
             line="299">Synchronously loads the contents of the requested @file and parses
the JSON command database contained within.

You may only call this function once on an #IdeCompileCommands object.
If there is a failure, you must create a new #IdeCompileCommands instance
instead of calling this function again.

See also: ide_compile_commands_load_async()</doc>
        <source-position filename="src/libide/foundry/ide-compile-commands.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-compile-commands.c"
               line="315">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="301">An #IdeCompileCommands</doc>
            <type name="CompileCommands" c:type="IdeCompileCommands*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="302">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="303">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_async" c:identifier="ide_compile_commands_load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-compile-commands.c"
             line="346">Asynchronously loads the contents of the requested @file and parses
the JSON command database contained within.

You may only call this function once on an #IdeCompileCommands object.
If there is a failure, you must create a new #IdeCompileCommands instance
instead of calling this function again.

See also: ide_compile_commands_load_finish()</doc>
        <source-position filename="src/libide/foundry/ide-compile-commands.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="348">An #IdeCompileCommands</doc>
            <type name="CompileCommands" c:type="IdeCompileCommands*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="349">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="350">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="351">the callback for the async operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="352">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_compile_commands_load_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-compile-commands.c"
             line="390">Completes an asynchronous request to ide_compile_commands_load_async().

See also: ide_compile_commands_load_async()</doc>
        <source-position filename="src/libide/foundry/ide-compile-commands.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-compile-commands.c"
               line="400">%TRUE if the file was loaded successfully; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="392">An #IdeCompileCommands</doc>
            <type name="CompileCommands" c:type="IdeCompileCommands*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="393">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup"
              c:identifier="ide_compile_commands_lookup"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-compile-commands.c"
             line="654">Locates the commands to compile the @file requested.

If @directory is non-NULL, then the directory to run the command from
is placed in @directory.</doc>
        <source-position filename="src/libide/foundry/ide-compile-commands.h"
                         line="54"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-compile-commands.c"
               line="667">A string array or %NULL if
  there was a failure to locate or parse the command.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="656">An #IdeCompileCommands</doc>
            <type name="CompileCommands" c:type="IdeCompileCommands*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="657">a #GFile representing the file to lookup</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="system_includes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="658">system include dirs if any</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="directory"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-compile-commands.c"
                 line="659">A location for a #GFile, or %NULL</doc>
            <type name="Gio.File" c:type="GFile**"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="CompileCommandsClass"
            c:type="IdeCompileCommandsClass"
            glib:is-gtype-struct-for="CompileCommands">
      <source-position filename="src/libide/foundry/ide-compile-commands.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Config"
           c:symbol-prefix="config"
           c:type="IdeConfig"
           parent="Object"
           abstract="1"
           glib:type-name="IdeConfig"
           glib:get-type="ide_config_get_type"
           glib:type-struct="ConfigClass">
      <source-position filename="src/libide/foundry/ide-config.h" line="63"/>
      <virtual-method name="get_description" invoker="get_description">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1965">Describes the type of config this is.

Examples might include ".buildconfig" or "Flatpak".</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1973">a string describing the configuration.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1967">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_extensions" invoker="get_extensions">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1913">Gets the known SDK extensions that will be used when building the project.
Implementing this in your configuration backend allows plugins to know if
additional binaries will be available to the build system.</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1921">an array
  of #IdeRuntime for the runtime extensions for the configuration.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Runtime"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1915">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_runtime" invoker="get_runtime">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="923">Gets the runtime for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="929">An #IdeRuntime</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="925">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_runtime" invoker="set_runtime">
        <source-position filename="src/libide/foundry/ide-config.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_runtime" invoker="supports_runtime">
        <source-position filename="src/libide/foundry/ide-config.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="translate_file" invoker="translate_file">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1991">Requests translation of the file path to one available in the
current process. That might mean translating to a path that
allows access outside Builder's sandbox such as using
/var/run/host or depoy-directories of OSTree commits.</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="58"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="2000">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1993">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="apply_path" c:identifier="ide_config_apply_path">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="launcher" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_id"
              c:identifier="ide_config_get_app_id"
              glib:get-property="app-id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="798">Gets the application ID for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="183"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="804">A string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="800">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_append_path"
              c:identifier="ide_config_get_append_path"
              glib:get-property="append-path">
        <source-position filename="src/libide/foundry/ide-config.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_args_for_phase"
              c:identifier="ide_config_get_args_for_phase">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="238"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_commands"
              c:identifier="ide_config_get_build_commands"
              glib:get-property="build-commands">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_build_commands_dir"
              c:identifier="ide_config_get_build_commands_dir"
              glib:get-property="build-commands-dir">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="156"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1822">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1820">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config_opts"
              c:identifier="ide_config_get_config_opts"
              glib:get-property="config-opts">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_debug"
              c:identifier="ide_config_get_debug"
              glib:get-property="debug">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_config_get_description"
              glib:get-property="description">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1965">Describes the type of config this is.

Examples might include ".buildconfig" or "Flatpak".</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1973">a string describing the configuration.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1967">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dirty"
              c:identifier="ide_config_get_dirty"
              glib:get-property="dirty">
        <source-position filename="src/libide/foundry/ide-config.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_config_get_display_name"
              glib:get-property="display-name">
        <source-position filename="src/libide/foundry/ide-config.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ"
              c:identifier="ide_config_get_environ"
              glib:get-property="environ">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="999">Gets the environment to use when spawning processes.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1005">An array of key=value environment variables.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1001">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environment" c:identifier="ide_config_get_environment">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1214">An #IdeEnvironment.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extensions" c:identifier="ide_config_get_extensions">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1913">Gets the known SDK extensions that will be used when building the project.
Implementing this in your configuration backend allows plugins to know if
additional binaries will be available to the build system.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="236"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1921">an array
  of #IdeRuntime for the runtime extensions for the configuration.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Runtime"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1915">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_config_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/foundry/ide-config.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_internal_boolean"
              c:identifier="ide_config_get_internal_boolean">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="208"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_int"
              c:identifier="ide_config_get_internal_int">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="215"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_int64"
              c:identifier="ide_config_get_internal_int64">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="222"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_object"
              c:identifier="ide_config_get_internal_object">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1592">Gets the value associated with @key if it is a #GObject.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="229"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1599">a #GObject or %NULL.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1594">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1595">The key to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_string"
              c:identifier="ide_config_get_internal_string">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_internal_strv"
              c:identifier="ide_config_get_internal_strv">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_locality"
              c:identifier="ide_config_get_locality"
              glib:get-property="locality">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="BuildLocality" c:type="IdeBuildLocality"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parallelism"
              c:identifier="ide_config_get_parallelism"
              glib:get-property="parallelism">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_post_install_commands"
              c:identifier="ide_config_get_post_install_commands"
              glib:get-property="post-install-commands">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="161"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix"
              c:identifier="ide_config_get_prefix"
              glib:get-property="prefix">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix_set"
              c:identifier="ide_config_get_prefix_set"
              glib:get-property="prefix-set">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prepend_path"
              c:identifier="ide_config_get_prepend_path"
              glib:get-property="prepend-path">
        <source-position filename="src/libide/foundry/ide-config.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="ide_config_get_ready"
              glib:get-property="ready">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1647">Determines if the configuration is ready for use.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1653">%TRUE if the configuration is ready for use.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1649">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_opts"
              c:identifier="ide_config_get_run_opts"
              glib:get-property="run-opts">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1682">Gets the command line options to use when running the target application.
The result should be parsed with g_shell_parse_argv() to convert the run
options to an array suitable for use in argv.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="146"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1690">A string containing the run options
  or %NULL if none have been set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1684">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime"
              c:identifier="ide_config_get_runtime"
              glib:get-property="runtime">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="923">Gets the runtime for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="107"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="929">An #IdeRuntime</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="925">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime_environment"
              c:identifier="ide_config_get_runtime_environment">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1262">An #IdeEnvironment.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime_id"
              c:identifier="ide_config_get_runtime_id"
              glib:get-property="runtime-id">
        <source-position filename="src/libide/foundry/ide-config.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sequence" c:identifier="ide_config_get_sequence">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1380">This returns a sequence number for the configuration. This is useful
for build systems that want to clear the "dirty" bit on the configuration
so that they need not bootstrap a second time. This should be done by
checking the sequence number before executing the bootstrap, and only
cleared if the sequence number matches after performing the bootstrap.
This indicates no changes have been made to the configuration in the
mean time.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="1392">A monotonic sequence number.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1382">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toolchain"
              c:identifier="ide_config_get_toolchain"
              glib:get-property="toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="949">Gets the toolchain for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="112"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="955">An #IdeToolchain</doc>
          <type name="Toolchain" c:type="IdeToolchain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="951">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toolchain_id"
              c:identifier="ide_config_get_toolchain_id"
              glib:get-property="toolchain-id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="878">Gets the toolchain id for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="85"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="884">The id of an #IdeToolchain or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="880">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_config_getenv">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_app_id"
              c:identifier="ide_config_set_app_id"
              glib:set-property="app-id">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_append_path"
              c:identifier="ide_config_set_append_path"
              glib:set-property="append-path">
        <source-position filename="src/libide/foundry/ide-config.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="append_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_args_for_phase"
              c:identifier="ide_config_set_args_for_phase">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_build_commands"
              c:identifier="ide_config_set_build_commands"
              glib:set-property="build-commands">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="build_commands" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_build_commands_dir"
              c:identifier="ide_config_set_build_commands_dir"
              glib:set-property="build-commands-dir">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="build_commands_dir" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config_opts"
              c:identifier="ide_config_set_config_opts"
              glib:set-property="config-opts">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="config_opts" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_debug"
              c:identifier="ide_config_set_debug"
              glib:set-property="debug">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="debug" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dirty"
              c:identifier="ide_config_set_dirty"
              glib:set-property="dirty">
        <source-position filename="src/libide/foundry/ide-config.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="dirty" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_config_set_display_name"
              glib:set-property="display-name">
        <source-position filename="src/libide/foundry/ide-config.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_environment" c:identifier="ide_config_set_environment">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_internal_boolean"
              c:identifier="ide_config_set_internal_boolean">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_internal_int"
              c:identifier="ide_config_set_internal_int">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_internal_int64"
              c:identifier="ide_config_set_internal_int64">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_internal_object"
              c:identifier="ide_config_set_internal_object">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1619">Sets the value for @key to @instance.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="232"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1621">an #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1622">the key to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1623">a #GObject or %NULL</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_internal_string"
              c:identifier="ide_config_set_internal_string">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_internal_strv"
              c:identifier="ide_config_set_internal_strv">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_locality"
              c:identifier="ide_config_set_locality"
              glib:set-property="locality">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="locality" transfer-ownership="none">
            <type name="BuildLocality" c:type="IdeBuildLocality"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parallelism"
              c:identifier="ide_config_set_parallelism"
              glib:set-property="parallelism">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="parallelism" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_post_install_commands"
              c:identifier="ide_config_set_post_install_commands"
              glib:set-property="post-install-commands">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="post_install_commands" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix"
              c:identifier="ide_config_set_prefix"
              glib:set-property="prefix">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix_set"
              c:identifier="ide_config_set_prefix_set"
              glib:set-property="prefix-set">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="prefix_set" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prepend_path"
              c:identifier="ide_config_set_prepend_path"
              glib:set-property="prepend-path">
        <source-position filename="src/libide/foundry/ide-config.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="prepend_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_run_opts"
              c:identifier="ide_config_set_run_opts"
              glib:set-property="run-opts">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1703">Sets the run options to use when running the target application.
See ide_config_get_run_opts() for more information.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1705">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="run_opts"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1706">the run options for the target application</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_runtime"
              c:identifier="ide_config_set_runtime"
              glib:set-property="runtime">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_runtime_environment"
              c:identifier="ide_config_set_runtime_environment">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_runtime_id"
              c:identifier="ide_config_set_runtime_id"
              glib:set-property="runtime-id">
        <source-position filename="src/libide/foundry/ide-config.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="runtime_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_toolchain"
              c:identifier="ide_config_set_toolchain"
              glib:set-property="toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="977">Sets the toolchain for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="979">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="toolchain"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="980">An #IdeToolchain or %NULL to use the default one</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_toolchain_id"
              c:identifier="ide_config_set_toolchain_id"
              glib:set-property="toolchain-id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="896">Sets the toolchain id for the configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="898">An #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="toolchain_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="899">The id of an #IdeToolchain</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_config_setenv">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_runtime"
              c:identifier="ide_config_supports_runtime">
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="191"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate_file" c:identifier="ide_config_translate_file">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config.c"
             line="1991">Requests translation of the file path to one available in the
current process. That might mean translating to a path that
allows access outside Builder's sandbox such as using
/var/run/host or depoy-directories of OSTree commits.</doc>
        <source-position filename="src/libide/foundry/ide-config.h"
                         line="245"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config.c"
               line="2000">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1993">a #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="app-id"
                writable="1"
                transfer-ownership="none"
                setter="set_app_id"
                getter="get_app_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="append-path"
                writable="1"
                transfer-ownership="none"
                setter="set_append_path"
                getter="get_append_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="build-commands"
                writable="1"
                transfer-ownership="none"
                setter="set_build_commands"
                getter="get_build_commands">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="build-commands-dir"
                writable="1"
                transfer-ownership="none"
                setter="set_build_commands_dir"
                getter="get_build_commands_dir">
        <type name="Gio.File"/>
      </property>
      <property name="config-opts"
                writable="1"
                transfer-ownership="none"
                setter="set_config_opts"
                getter="get_config_opts"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="debug"
                writable="1"
                transfer-ownership="none"
                setter="set_debug"
                getter="get_debug"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="description"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dirty"
                writable="1"
                transfer-ownership="none"
                setter="set_dirty"
                getter="get_dirty"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="environ"
                writable="1"
                transfer-ownership="none"
                getter="get_environ">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="locality"
                writable="1"
                transfer-ownership="none"
                setter="set_locality"
                getter="get_locality"
                default-value="IDE_BUILD_LOCALITY_IN_TREE | IDE_BUILD_LOCALITY_OUT_OF_TREE">
        <type name="BuildLocality"/>
      </property>
      <property name="parallelism"
                writable="1"
                transfer-ownership="none"
                setter="set_parallelism"
                getter="get_parallelism"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="post-install-commands"
                writable="1"
                transfer-ownership="none"
                setter="set_post_install_commands"
                getter="get_post_install_commands">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="prefix"
                writable="1"
                transfer-ownership="none"
                setter="set_prefix"
                getter="get_prefix"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="prefix-set"
                writable="1"
                transfer-ownership="none"
                setter="set_prefix_set"
                getter="get_prefix_set"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="prepend-path"
                writable="1"
                transfer-ownership="none"
                setter="set_prepend_path"
                getter="get_prepend_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                transfer-ownership="none"
                getter="get_ready"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="run-opts"
                writable="1"
                transfer-ownership="none"
                setter="set_run_opts"
                getter="get_run_opts"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="runtime"
                writable="1"
                transfer-ownership="none"
                setter="set_runtime"
                getter="get_runtime">
        <type name="Runtime"/>
      </property>
      <property name="runtime-id"
                writable="1"
                transfer-ownership="none"
                setter="set_runtime_id"
                getter="get_runtime_id"
                default-value="host">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="supported-runtimes" transfer-ownership="none">
        <type name="Gio.ListModel"/>
      </property>
      <property name="toolchain"
                writable="1"
                transfer-ownership="none"
                setter="set_toolchain"
                getter="get_toolchain">
        <type name="Toolchain"/>
      </property>
      <property name="toolchain-id"
                writable="1"
                transfer-ownership="none"
                setter="set_toolchain_id"
                getter="get_toolchain_id"
                default-value="default">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ConfigClass"
            c:type="IdeConfigClass"
            glib:is-gtype-struct-for="Config">
      <source-position filename="src/libide/foundry/ide-config.h" line="63"/>
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="get_runtime">
        <callback name="get_runtime">
          <source-position filename="src/libide/foundry/ide-config.h"
                           line="51"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="929">An #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config.c"
                   line="925">An #IdeConfig</doc>
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_runtime">
        <callback name="set_runtime">
          <source-position filename="src/libide/foundry/ide-config.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
            <parameter name="runtime" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_runtime">
        <callback name="supports_runtime">
          <source-position filename="src/libide/foundry/ide-config.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
            <parameter name="runtime" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_extensions">
        <callback name="get_extensions">
          <source-position filename="src/libide/foundry/ide-config.h"
                           line="56"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1921">an array
  of #IdeRuntime for the runtime extensions for the configuration.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Runtime"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config.c"
                   line="1915">a #IdeConfig</doc>
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_description">
        <callback name="get_description">
          <source-position filename="src/libide/foundry/ide-config.h"
                           line="57"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="1973">a string describing the configuration.</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config.c"
                   line="1967">a #IdeConfig</doc>
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="translate_file">
        <callback name="translate_file">
          <source-position filename="src/libide/foundry/ide-config.h"
                           line="58"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config.c"
                 line="2000">a #GFile or %NULL</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config.c"
                   line="1993">a #IdeConfig</doc>
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="14">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ConfigManager"
           c:symbol-prefix="config_manager"
           c:type="IdeConfigManager"
           parent="Object"
           final="1"
           glib:type-name="IdeConfigManager"
           glib:get-type="ide_config_manager_get_type"
           glib:type-struct="ConfigManagerClass">
      <source-position filename="src/libide/foundry/ide-config-manager.h"
                       line="36"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.ListModel"/>
      <function name="from_context"
                c:identifier="ide_config_manager_from_context">
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="141">an #IdeConfigManager</doc>
          <type name="ConfigManager" c:type="IdeConfigManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="139">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ref_from_context"
                c:identifier="ide_config_manager_ref_from_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="1240">Thread-safe version of ide_config_manager_from_context().</doc>
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-manager.c"
               line="1246">an #IdeConfigManager</doc>
          <type name="ConfigManager" c:type="IdeConfigManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="1242">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="delete" c:identifier="ide_config_manager_delete">
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="duplicate" c:identifier="ide_config_manager_duplicate">
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config" c:identifier="ide_config_manager_get_config">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="278">Gets the #IdeConfig by id. See ide_config_get_id().</doc>
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-manager.c"
               line="285">An #IdeConfig or %NULL if
  the configuration could not be found.</doc>
          <type name="Config" c:type="IdeConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="280">An #IdeConfigManager</doc>
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="281">The string identifier of the configuration</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current"
              c:identifier="ide_config_manager_get_current"
              glib:get-property="current">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="1119">Gets the current configuration to use for building.

Many systems allow you to pass a configuration in instead of relying on the
default configuration. This gets the default configuration that various
background items might use, such as tags builders which need to discover
settings.</doc>
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-manager.c"
               line="1130">An #IdeConfig</doc>
          <type name="Config" c:type="IdeConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="1121">An #IdeConfigManager</doc>
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu" c:identifier="ide_config_manager_get_menu">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="1256">Gets the menu for the config manager.</doc>
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-manager.c"
               line="1262">a #GMenuModel</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="1258">a #IdeConfigManager</doc>
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="ide_config_manager_get_ready"
              glib:get-property="ready">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="1214">This returns %TRUE if the current configuration is ready for usage.

This is equivalent to checking the ready property of the current
configuration. It allows consumers to not need to track changes to
the current configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-manager.c"
               line="1224">%TRUE if the current configuration is ready for usage;
  otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="1216">an #IdeConfigManager</doc>
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_current" c:identifier="ide_config_manager_ref_current">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="1079">Gets the current configuration to use for building.

Many systems allow you to pass a configuration in instead of relying on the
default configuration. This gets the default configuration that various
background items might use, such as tags builders which need to discover
settings.</doc>
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-manager.c"
               line="1090">An #IdeConfig</doc>
          <type name="Config" c:type="IdeConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-manager.c"
                 line="1081">An #IdeConfigManager</doc>
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="ide_config_manager_save_async">
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="ide_config_manager_save_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_current"
              c:identifier="ide_config_manager_set_current"
              glib:set-property="current">
        <source-position filename="src/libide/foundry/ide-config-manager.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigManager" c:type="IdeConfigManager*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <property name="current"
                writable="1"
                transfer-ownership="none"
                setter="set_current"
                getter="get_current">
        <type name="Config"/>
      </property>
      <property name="current-display-name"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                transfer-ownership="none"
                getter="get_ready"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="invalidate" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-manager.c"
             line="509">This signal is emitted any time a new configuration is selected or the
currently selected configurations state changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ConfigManagerClass"
            c:type="IdeConfigManagerClass"
            glib:is-gtype-struct-for="ConfigManager">
      <source-position filename="src/libide/foundry/ide-config-manager.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="ConfigProvider"
               c:symbol-prefix="config_provider"
               c:type="IdeConfigProvider"
               glib:type-name="IdeConfigProvider"
               glib:get-type="ide_config_provider_get_type"
               glib:type-struct="ConfigProviderInterface">
      <source-position filename="src/libide/foundry/ide-config-provider.h"
                       line="66"/>
      <prerequisite name="Object"/>
      <virtual-method name="added">
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete" invoker="delete">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="324">Requests that the configuration provider delete the configuration.

ide_config_provider_save_async() will be called by the
#IdeConfigManager after calling this function.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="326">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="327">an #IdeConfig owned by the provider</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="duplicate" invoker="duplicate">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="349">Requests that the configuration provider duplicate the configuration.

This is useful when the user wants to experiment with alternate settings
without breaking a previous configuration.

The configuration provider does not need to persist the configuration
in this function, ide_config_provider_save_async() will be called
afterwards to persist configurations to disk.

It is expected that the #IdeConfigProvider will emit
#IdeConfigProvider::added with the new configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="351">an #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="352">an #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_async" invoker="load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="171">This function is called to initialize the configuration provider after
the plugin instance has been created. The provider should locate any
build configurations within the project and call
ide_config_provider_emit_added() before completing the
asynchronous function so that the configuration manager may be made
aware of the configurations.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="173">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="174">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="175">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="176">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_finish" invoker="load_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="198">Completes an asynchronous request to ide_config_provider_load_async().</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-provider.c"
               line="206">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="200">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="201">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_async" invoker="save_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="240">This function is called to request that the configuration provider
persist any changed configurations back to disk.

This function will be called before unloading the configuration provider
so that it has a chance to persist any outstanding changes.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="242">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="243">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="244">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="245">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_finish" invoker="save_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="266">Completes an asynchronous request to ide_config_provider_save_async().</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-provider.c"
               line="274">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="268">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="269">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="220">Requests that the configuration provider unload any state. This is called
shortly before the configuration provider is finalized.

Implementations of #IdeConfigProvider should emit removed
for every configuration they have registered so that the
#IdeConfigManager has correct information.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="222">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="delete" c:identifier="ide_config_provider_delete">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="324">Requests that the configuration provider delete the configuration.

ide_config_provider_save_async() will be called by the
#IdeConfigManager after calling this function.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="326">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="327">an #IdeConfig owned by the provider</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="duplicate" c:identifier="ide_config_provider_duplicate">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="349">Requests that the configuration provider duplicate the configuration.

This is useful when the user wants to experiment with alternate settings
without breaking a previous configuration.

The configuration provider does not need to persist the configuration
in this function, ide_config_provider_save_async() will be called
afterwards to persist configurations to disk.

It is expected that the #IdeConfigProvider will emit
#IdeConfigProvider::added with the new configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="351">an #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="352">an #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_added" c:identifier="ide_config_provider_emit_added">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="288">#IdeConfigProvider implementations should call this function with
a @config when it has discovered a new configuration.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="290">an #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="291">an #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_removed"
              c:identifier="ide_config_provider_emit_removed">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="306">#IdeConfigProvider implementations should call this function with
a @config when it has discovered it was removed.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="308">an #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="309">an #IdeConfig</doc>
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_async" c:identifier="ide_config_provider_load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="171">This function is called to initialize the configuration provider after
the plugin instance has been created. The provider should locate any
build configurations within the project and call
ide_config_provider_emit_added() before completing the
asynchronous function so that the configuration manager may be made
aware of the configurations.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="173">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="174">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="175">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="176">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_config_provider_load_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="198">Completes an asynchronous request to ide_config_provider_load_async().</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-provider.c"
               line="206">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="200">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="201">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="ide_config_provider_save_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="240">This function is called to request that the configuration provider
persist any changed configurations back to disk.

This function will be called before unloading the configuration provider
so that it has a chance to persist any outstanding changes.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="242">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="243">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="244">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="245">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="ide_config_provider_save_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="266">Completes an asynchronous request to ide_config_provider_save_async().</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-config-provider.c"
               line="274">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="268">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="269">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_config_provider_unload">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-config-provider.c"
             line="220">Requests that the configuration provider unload any state. This is called
shortly before the configuration provider is finalized.

Implementations of #IdeConfigProvider should emit removed
for every configuration they have registered so that the
#IdeConfigManager has correct information.</doc>
        <source-position filename="src/libide/foundry/ide-config-provider.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="222">a #IdeConfigProvider</doc>
            <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Config"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Config"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ConfigProviderInterface"
            c:type="IdeConfigProviderInterface"
            glib:is-gtype-struct-for="ConfigProvider">
      <source-position filename="src/libide/foundry/ide-config-provider.h"
                       line="66"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="added">
        <callback name="added">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_async">
        <callback name="load_async">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="173">a #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="174">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="175">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="176">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_finish">
        <callback name="load_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="206">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="200">a #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="201">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_async">
        <callback name="save_async">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="242">a #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="243">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="244">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="245">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_finish">
        <callback name="save_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-config-provider.c"
                 line="274">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="268">a #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="269">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete">
        <callback name="delete">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="326">a #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="327">an #IdeConfig owned by the provider</doc>
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="duplicate">
        <callback name="duplicate">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="351">an #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="352">an #IdeConfig</doc>
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/foundry/ide-config-provider.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-config-provider.c"
                   line="222">a #IdeConfigProvider</doc>
              <type name="ConfigProvider" c:type="IdeConfigProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="IdeContext"
           parent="Object"
           final="1"
           glib:type-name="IdeContext"
           glib:get-type="ide_context_get_type"
           glib:type-struct="ContextClass">
      <source-position filename="src/libide/core/ide-context.h" line="36"/>
      <constructor name="new" c:identifier="ide_context_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="357">Creates a new #IdeContext.

This only creates the context object. After creating the object you need
to set a number of properties and then initialize asynchronously using
g_async_initable_init_async().</doc>
        <source-position filename="src/libide/core/ide-context.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="366">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
      </constructor>
      <method name="build_file" c:identifier="ide_context_build_file">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="637">Creates a new #GFile for the path.

- If @path is %NULL, #IdeContext:workdir is returned.
- If @path is absolute, a new #GFile to the absolute path is returned.
- Otherwise, a #GFile child of #IdeContext:workdir is returned.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="648">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="639">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="640">a path to the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_filename"
              c:identifier="ide_context_build_filename"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="670">Creates a new path that starts from the working directory of the
loaded project.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="678">a string containing the new path</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="672">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="first_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="673">first path part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="cache_file"
              c:identifier="ide_context_cache_file"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="536">Like ide_context_cache_filename() but returns a #GFile.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="543">a #GFile for the cache file</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="538">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="first_part"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="539">The first part of the path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="cache_filename"
              c:identifier="ide_context_cache_filename"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="585">Creates a new filename that will be located in the projects cache directory.
This makes it convenient to remove files when a project is deleted as all
cache files will share a unified parent directory.

The file will be located in a directory similar to
~/.cache/gnome-builder/project_name. This may change based on the value
of g_get_user_cache_dir().</doc>
        <source-position filename="src/libide/core/ide-context.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="598">A new string containing the cache filename</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="587">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="first_part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="588">the first part of the filename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_project_id" c:identifier="ide_context_dup_project_id">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="429">Copies the project-id and returns it to the caller.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="435">a project-id as a string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="431">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_title" c:identifier="ide_context_dup_title">
        <source-position filename="src/libide/core/ide-context.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="779">a string containing the title</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="777">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_project" c:identifier="ide_context_has_project">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="835">Checks to see if a project has been loaded in @context.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="841">%TRUE if a project has been, or is currently, loading.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="837">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log" c:identifier="ide_context_log">
        <source-position filename="src/libide/core/ide-context.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="level" transfer-ownership="none">
            <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_child_typed"
              c:identifier="ide_context_peek_child_typed">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="395">Looks for the first child matching @type, and returns it. No reference is
taken to the child, so you should avoid using this except as used by
compatability functions.

This may only be called from the main thread or you risk the objects
being finalized before your caller has a chance to reference them.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="407">an #IdeObject that
  matches @type if successful; otherwise %NULL</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="397">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="398">the #GType of the child</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_action_muxer"
              c:identifier="ide_context_ref_action_muxer">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="867">Gets the action muxer for the context.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="873">an #IdeActionMuxer</doc>
          <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="869">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_logs" c:identifier="ide_context_ref_logs" version="44">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="940">Gets the logs for the context.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="946">a #GListModel of #IdeLogItem</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="942">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_project_settings"
              c:identifier="ide_context_ref_project_settings">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="717">Gets an org.gnome.builder.project #GSettings.

This creates a new #GSettings instance for the project.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="725">a #GSettings</doc>
          <type name="Gio.Settings" c:type="GSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="719">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_settings" c:identifier="ide_context_ref_settings">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="741">Gets an #IdeSettings for @schema_id.

The #IdeSettings will read settings from project overrides before
falling back to application settings.

Changes to settings will always apply to the project overrides.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="100"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="752">an #IdeSettings</doc>
          <type name="Settings" c:type="IdeSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="743">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_workdir" c:identifier="ide_context_ref_workdir">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="488">Gets the working-directory of the context and increments the
reference count by one.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-context.c"
               line="495">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="490">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register_settings"
              c:identifier="ide_context_register_settings">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="889">Registers settings that can be overriden by a project.

Use this if you have a GSettings schema that can have both
application and per-project overrides.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="891">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_project_id"
              c:identifier="ide_context_set_project_id"
              glib:set-property="project-id">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="453">Sets the project-id for the context.

Generally, this should only be done once after loading a project.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="455">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="project_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_context_set_title"
              glib:set-property="title">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="795">Sets the #IdeContext:title property. This is used by various
components to show the user the name of the project. This may
include the omnibar and the window title.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="797">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="798">the title for the project or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_workdir"
              c:identifier="ide_context_set_workdir"
              glib:set-property="workdir">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="511">Sets the working directory for the project.

This should generally only be set once after checking out the project.

In future releases, changes may be made to change this in support of
git-worktrees or similar workflows.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="513">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="workdir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-context.c"
                 line="514">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_settings"
              c:identifier="ide_context_unregister_settings">
        <source-position filename="src/libide/core/ide-context.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </instance-parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="project-id"
                writable="1"
                transfer-ownership="none"
                setter="set_project_id"
                default-value="empty">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="289">The "project-id" property is the identifier to use when creating
files and folders for this project. It has a mutated form of either
the directory or some other discoverable trait of the project.

It has also been modified to remove spaces and other unsafe
characters for file-systems.

This may change during runtime, but usually only once when the
project has been initialize loaded.

Before any project has loaded, this is "empty" to allow flexibility
for non-project use.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="312">The "title" property is a descriptive name for the project.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="workdir"
                writable="1"
                transfer-ownership="none"
                setter="set_workdir">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-context.c"
             line="324">The "workdir" property is the best guess at the working directory for the
context. This may be discovered using a common parent if multiple files
are opened without a project.</doc>
        <type name="Gio.File"/>
      </property>
    </class>
    <record name="ContextClass"
            c:type="IdeContextClass"
            glib:is-gtype-struct-for="Context">
      <source-position filename="src/libide/core/ide-context.h" line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <constant name="DEBUGGER_ADDRESS_INVALID"
              value="0"
              c:type="IDE_DEBUGGER_ADDRESS_INVALID">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="172"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="DEBUGGER_STOP_IS_TERMINAL"
                    c:identifier="IDE_DEBUGGER_STOP_IS_TERMINAL"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="101"/>
      <parameters>
        <parameter name="r">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEFINE_ACTION_GROUP"
                    c:identifier="IDE_DEFINE_ACTION_GROUP"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-action-group.h"
                       line="25"/>
      <parameters>
        <parameter name="Type">
        </parameter>
        <parameter name="prefix">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_FOR"
                    c:identifier="IDE_DEPRECATED_FOR"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-version-macros.h"
                       line="35"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_43_FOR"
                    c:identifier="IDE_DEPRECATED_IN_43_FOR"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-version-macros.h"
                       line="99"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_44_FOR"
                    c:identifier="IDE_DEPRECATED_IN_44_FOR"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-version-macros.h"
                       line="112"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEPRECATED_IN_45_FOR"
                    c:identifier="IDE_DEPRECATED_IN_45_FOR"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-version-macros.h"
                       line="125"/>
      <parameters>
        <parameter name="f">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DUMP_BYTES"
                    c:identifier="IDE_DUMP_BYTES"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-debug.h" line="136"/>
      <parameters>
        <parameter name="_n">
        </parameter>
        <parameter name="_b">
        </parameter>
        <parameter name="_l">
        </parameter>
      </parameters>
    </function-macro>
    <class name="DebugManager"
           c:symbol-prefix="debug_manager"
           c:type="IdeDebugManager"
           parent="Object"
           final="1"
           glib:type-name="IdeDebugManager"
           glib:get-type="ide_debug_manager_get_type"
           glib:type-struct="DebugManagerClass">
      <source-position filename="src/libide/debugger/ide-debug-manager.h"
                       line="34"/>
      <function name="from_context"
                c:identifier="ide_debug_manager_from_context">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="1149">Gets the #IdeDebugManager for a context.</doc>
        <source-position filename="src/libide/debugger/ide-debug-manager.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debug-manager.c"
               line="1155">an #IdeDebugManager</doc>
          <type name="DebugManager" c:type="IdeDebugManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="1151">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_active"
              c:identifier="ide_debug_manager_get_active"
              glib:get-property="active">
        <source-position filename="src/libide/debugger/ide-debug-manager.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebugManager" c:type="IdeDebugManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_breakpoints_for_file"
              c:identifier="ide_debug_manager_get_breakpoints_for_file">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="1022">This returns an #IdeDebuggerBreakpoints that represents the breakpoints
within a given file.

This inderect breakpoints container provides a very fast way to check if
a line has a breakpoint set. You want to use this when performance really
matters such as from the gutter of the source editor.

Breakpoints contained in the resulting structure will automatically
propagate to the debugger when the debugger has been successfully spawned.</doc>
        <source-position filename="src/libide/debugger/ide-debug-manager.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debug-manager.c"
               line="1035">An #IdeDebuggerBreakpoints</doc>
          <type name="DebuggerBreakpoints" c:type="IdeDebuggerBreakpoints*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebugManager" c:type="IdeDebugManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_debugger"
              c:identifier="ide_debug_manager_get_debugger"
              glib:get-property="debugger">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="1006">Gets the debugger instance, if it is loaded.</doc>
        <source-position filename="src/libide/debugger/ide-debug-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debug-manager.c"
               line="1012">An #IdeDebugger or %NULL</doc>
          <type name="Debugger" c:type="IdeDebugger*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="1008">a #IdeDebugManager</doc>
            <type name="DebugManager" c:type="IdeDebugManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_language"
              c:identifier="ide_debug_manager_supports_language">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="114">This checks to see if there is a debugger that can possibly support a given
language id. This is used to determine if space for breakpoints should be
reserved in the gutter of source code editor.

This function accepts %NULL for @language_id out of convenience and will
return %NULL in this case.</doc>
        <source-position filename="src/libide/debugger/ide-debug-manager.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debug-manager.c"
               line="126">%TRUE if the language is supported; otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="116">a #IdeDebugManager</doc>
            <type name="DebugManager" c:type="IdeDebugManager*"/>
          </instance-parameter>
          <parameter name="language_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="117">#GtkSourceView based language identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                transfer-ownership="none"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="609">If the debugger is active.

This can be used to determine if the controls should be made visible
in the workbench.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="debugger"
                transfer-ownership="none"
                getter="get_debugger">
        <type name="Debugger"/>
      </property>
      <glib:signal name="breakpoint-added" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="633">The "breakpoint-added" signal is emitted when a new breakpoint has
been registered by the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="636">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="breakpoint-reached" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="665">The "breakpoint-reached" signal is emitted when the debugger has reached
a breakpoint and execution has stopped.

If you need the stop reason, you should connect to #IdeDebugger::stopped
on the #IdeDebugger itself.

See also: #IdeDebugManager:debugger</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="668">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="breakpoint-removed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debug-manager.c"
             line="649">The "breakpoint-removed" signal is emitted when a new breakpoint has been
removed by the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debug-manager.c"
                 line="652">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DebugManagerClass"
            c:type="IdeDebugManagerClass"
            glib:is-gtype-struct-for="DebugManager">
      <source-position filename="src/libide/debugger/ide-debug-manager.h"
                       line="34"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Debugger"
           c:symbol-prefix="debugger"
           c:type="IdeDebugger"
           parent="Object"
           abstract="1"
           glib:type-name="IdeDebugger"
           glib:get-type="ide_debugger_get_type"
           glib:type-struct="DebuggerClass">
      <source-position filename="src/libide/debugger/ide-debugger.h"
                       line="198"/>
      <implements name="Gio.ActionGroup"/>
      <function name="address_parse" c:identifier="ide_debugger_address_parse">
        <source-position filename="src/libide/debugger/ide-debugger-types.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="breakpoint_added">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="breakpoint_modified">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="breakpoint_removed">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disassemble_async" invoker="disassemble_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1797">Disassembles the address range requested.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1799">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1800">an #IdeDebuggerAddressRange to disassemble</doc>
            <type name="DebuggerAddressRange"
                  c:type="const IdeDebuggerAddressRange*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1801">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1802">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1803">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disassemble_finish"
                      invoker="disassemble_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1821">Completes an asynchronous request to ide_debugger_disassemble_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="187"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1829">a #GPtrArray
  of #IdeDebuggerInstruction if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerInstruction"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1823">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1824">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_can_move" invoker="get_can_move">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="823">Checks to see if the debugger can make the movement matching @movement.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="830">%TRUE if @movement can be performed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="825">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="movement" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="826">the movement to check</doc>
            <type name="DebuggerMovement" c:type="IdeDebuggerMovement"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_breakpoint_async"
                      invoker="insert_breakpoint_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1235">Asynchronously requests that a breakpoint is added to the debugger.

This asynchronous function may complete before the breakpoint has been
registered in the debugger. Debugger implementations will emit
#IdeDebugger::breakpoint-added when a breakpoint has been registered.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1237">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1238">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1239">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1240">an async callback to complete the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1241">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_breakpoint_finish"
                      invoker="insert_breakpoint_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1267">Completes a request to asynchronously insert a breakpoint.

See also: ide_debugger_insert_breakpoint_async()</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1277">%TRUE if the command was submitted successfully; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1269">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1270">a #GAsyncResult or %NULL</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="interpret_async" invoker="interpret_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1896">Asynchronously requests that the debugger interpret the command.

This is used by the interactive-console to submit commands to the debugger
that are in the native syntax of that debugger.

The debugger is expected to return any textual output via the
IdeDebugger::log signal.

Call ide_debugger_interpret_finish() from @callback to determine if the
command was interpreted.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1898">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1899">a command to execute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1900">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1901">a callback to execute, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1902">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="interpret_finish"
                      invoker="interpret_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1928">Retrieves the result of the asynchronous operation to interpret a debugger
command.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1937">%TRUE if the command was interpreted, otherwise %FALSE and
   @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1930">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1931">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="interrupt_async" invoker="interrupt_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1528">Asynchronously requests that the debugger interrupts execution of a thread
group. Thread groups are a collection of threads that are executed or
stopped together and on gdb on Linux, this is the default for all threads in
the process.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1530">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1531">An #IdeDebuggerThreadGroup</doc>
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1532">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1533">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1534">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="interrupt_finish"
                      invoker="interrupt_finish"
                      throws="1">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="library_loaded">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="library" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="library_unloaded">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="library" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_breakpoints_async"
                      invoker="list_breakpoints_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1189">Asynchronously requests the list of current breakpoints from the debugger.

#IdeDebugger implementations must implement the virtual function
for this method.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1191">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1192">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1193">a callback to call upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1194">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_breakpoints_finish"
                      invoker="list_breakpoints_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1213">Gets the list of breakpoints from the debugger.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1221">a #GPtrArray
  of breakpoints that are registered with the debugger.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerBreakpoint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1215">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1216">a #GAsyncResult provided to the async callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_frames_async" invoker="list_frames_async">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_frames_finish"
                      invoker="list_frames_finish"
                      throws="1">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="138"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1496">An
  array of debugger frames or %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerFrame"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_locals_async" invoker="list_locals_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1644">Requests the debugger backend to list the locals that are available to the
given @frame of @thread.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1646">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1647">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1648">an #IdeDebuggerFrame</doc>
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1649">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1650">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1651">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_locals_finish"
                      invoker="list_locals_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1677">Completes an asynchronous request to ide_debugger_list_locals_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="163"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1685">a #GPtrArray of
  #IdeDebuggerVariable if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerVariable"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1679">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1680">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_params_async" invoker="list_params_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1699">Requests the debugger backend to list the parameters to the given stack
frame.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1701">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1702">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1703">an #IdeDebuggerFrame</doc>
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1704">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1705">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1706">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_params_finish"
                      invoker="list_params_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1732">Completes an asynchronous request to ide_debugger_list_params_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="172"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1740">a #GPtrArray of
  #IdeDebuggerVariable if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerVariable"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1734">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1735">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_registers_async"
                      invoker="list_registers_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1754">Requests the list of registers and their values.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1756">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1757">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1758">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1759">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_registers_finish"
                      invoker="list_registers_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1775">Completes an asynchronous request to ide_debugger_list_registers_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="179"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1783">a #GPtrArray of
  #IdeDebuggerRegister if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerRegister"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1777">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1778">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="log">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="DebuggerStream" c:type="IdeDebuggerStream"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="modify_breakpoint_async"
                      invoker="modify_breakpoint_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1346">Asynchronously requests that a breakpoint is modified by the debugger backend.

Specify @change for how to modify the breakpoint.

This asynchronous function may complete before the breakpoint has been
modified by the debugger. Debugger implementations will emit
#IdeDebugger::breakpoint-modified when a breakpoint has been removed.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1348">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1349">An #IdeDebuggerBreakpointChange</doc>
            <type name="DebuggerBreakpointChange"
                  c:type="IdeDebuggerBreakpointChange"/>
          </parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1350">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1351">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1352">an async callback to complete the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1353">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="modify_breakpoint_finish"
                      invoker="modify_breakpoint_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1384">Completes an asynchronous request to modify a breakpoint.

Note that this only completes the submission of the request, if you need to
know when the breakpoint has been modified, listen to the
#IdeDebugger::breakpoint-modified signal.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1396">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1386">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1387">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_async" invoker="move_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="844">Advances the debugger to the next breakpoint or until the debugger stops.
@movement should describe the type of movement to perform.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="846">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="movement" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="847">An #IdeDebuggerMovement</doc>
            <type name="DebuggerMovement" c:type="IdeDebuggerMovement"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="848">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="849">A callback to call upon
  completion of the operation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="851">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_finish" invoker="move_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="870">Notifies that the movement request has been submitted to the debugger.

Note that this does not indicate that the movement has completed successfully,
only that the command has be submitted.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="881">%TRUE if successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="872">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="873">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_for_run" invoker="prepare_for_run">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1875">Prepares the runner to launch a debugger and target process.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1877">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1878">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1879">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_breakpoint_async"
                      invoker="remove_breakpoint_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1291">Asynchronously requests that a breakpoint is removed from the debugger.

This asynchronous function may complete before the breakpoint has been
removed by the debugger. Debugger implementations will emit
#IdeDebugger::breakpoint-removed when a breakpoint has been removed.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1293">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1294">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1295">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1296">an async callback to complete the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1297">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_breakpoint_finish"
                      invoker="remove_breakpoint_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1323">Completes a request to asynchronously remove a breakpoint.

See also: ide_debugger_remove_breakpoint_async()</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1333">%TRUE if the command was submitted successfully; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1325">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1326">a #GAsyncResult or %NULL</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="running">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_signal_async" invoker="send_signal_async">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="signum" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_signal_finish"
                      invoker="send_signal_finish"
                      throws="1">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stopped">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="stop_reason" transfer-ownership="none">
            <type name="DebuggerStopReason" c:type="IdeDebuggerStopReason"/>
          </parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_run_command"
                      invoker="supports_run_command">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_added">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_group_added">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_group_exited">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_group_removed">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_group_started">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_removed">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_selected">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="disassemble_async"
              c:identifier="ide_debugger_disassemble_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1797">Disassembles the address range requested.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1799">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1800">an #IdeDebuggerAddressRange to disassemble</doc>
            <type name="DebuggerAddressRange"
                  c:type="const IdeDebuggerAddressRange*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1801">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1802">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1803">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disassemble_finish"
              c:identifier="ide_debugger_disassemble_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1821">Completes an asynchronous request to ide_debugger_disassemble_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1829">a #GPtrArray
  of #IdeDebuggerInstruction if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerInstruction"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1823">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1824">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_breakpoint_added"
              c:identifier="ide_debugger_emit_breakpoint_added">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1043">Emits the #IdeDebugger::breakpoint-added signal.

Debugger implementations should call this when a new breakpoint
has been registered with the debugger.

If a breakpoint has changed, you should use
ide_debugger_emit_breakpoint_modified() to notify of the modification.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="377"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1045">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1046">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_breakpoint_modified"
              c:identifier="ide_debugger_emit_breakpoint_modified">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1089">Emits the #IdeDebugger::breakpoint-modified signal.

Debugger implementations should call this when a breakpoint has changed
in the underlying debugger.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="380"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1091">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1092">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_breakpoint_removed"
              c:identifier="ide_debugger_emit_breakpoint_removed">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1066">Emits the #IdeDebugger::breakpoint-removed signal.

Debugger implementations should call this when a breakpoint has been removed
either manually or automatically by the debugger.

If a breakpoint has changed, you should use
ide_debugger_emit_breakpoint_modified() to notify of the modification.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="383"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1068">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1069">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_library_loaded"
              c:identifier="ide_debugger_emit_library_loaded">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1149">Emits the "library-loaded" signal.

Debugger implementations should call this when the debugger has loaded
a new library.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="392"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1151">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="library" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1152">an #IdeDebuggerLibrary</doc>
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_library_unloaded"
              c:identifier="ide_debugger_emit_library_unloaded">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1169">Emits the "library-unloaded" signal.

Debugger implementations should call this when the debugger has unloaded a
library.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="395"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1171">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="library" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1172">an #IdeDebuggerLibrary</doc>
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_log" c:identifier="ide_debugger_emit_log">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="894">Emits the "log" signal.

Debugger implementations should use this to notify any listeners
that incoming log information has been recieved.

Use the #IdeDebuggerStream to denote the particular stream.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="352"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="896">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="DebuggerStream" c:type="IdeDebuggerStream"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_running" c:identifier="ide_debugger_emit_running">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1109">Emits the "running" signal.

Debugger implementations should call this when the debugger has started
or restarted executing the inferior.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="386"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1111">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_stopped" c:identifier="ide_debugger_emit_stopped">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1126">Emits the "stopped" signal.

Debugger implementations should call this when the debugger has stopped
and include the reason and location of the stop.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1128">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="stop_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1129">the reason the debugger stopped</doc>
            <type name="DebuggerStopReason" c:type="IdeDebuggerStopReason"/>
          </parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1130">the breakpoint representing the stop location</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_added"
              c:identifier="ide_debugger_emit_thread_added">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="989">Emits the #IdeDebugger::thread-added signal notifying that a new thread
has been added to the inferior.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="368"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="991">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="992">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_group_added"
              c:identifier="ide_debugger_emit_thread_group_added">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="356"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_group_exited"
              c:identifier="ide_debugger_emit_thread_group_exited">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="365"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_group_removed"
              c:identifier="ide_debugger_emit_thread_group_removed">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="359"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_group_started"
              c:identifier="ide_debugger_emit_thread_group_started">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="362"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_removed"
              c:identifier="ide_debugger_emit_thread_removed">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1007">Emits the #IdeDebugger::thread-removed signal notifying that a thread has
been removed to the inferior.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1009">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1010">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_thread_selected"
              c:identifier="ide_debugger_emit_thread_selected">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1025">Emits the #IdeDebugger::thread-selected signal notifying that a thread
has been set as the current debugging thread.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="374"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1027">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1028">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_breakpoints"
              c:identifier="ide_debugger_get_breakpoints">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1409">Gets the breakpoints for the #IdeDebugger.

Contrast this to ide_debugger_list_breakpoints_async() which will query
the debugger backend for breakpoints. This #GListModel containing
#IdeDebuggerBreakpoint instances is updated as necessary by listening
to various breakpoint related signals on the #IdeDebugger instance.

This is primarily out of convenience to be used by UI which wants to
display information on breakpoints.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1423">a #GListModel of #IdeDebuggerBreakpoint</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1411">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_move" c:identifier="ide_debugger_get_can_move">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="823">Checks to see if the debugger can make the movement matching @movement.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="830">%TRUE if @movement can be performed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="825">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="movement" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="826">the movement to check</doc>
            <type name="DebuggerMovement" c:type="IdeDebuggerMovement"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_debugger_get_display_name"
              glib:get-property="display-name">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="784">Gets the display name for the debugger as the user should see it in various
UI components.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="791">The display name for the debugger</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="786">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_running" c:identifier="ide_debugger_get_is_running">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="217"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_thread"
              c:identifier="ide_debugger_get_selected_thread"
              glib:get-property="selected-thread">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1510">Gets the current selected thread by the debugger.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="226"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1516">An #IdeDebuggerThread or %NULL</doc>
          <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1512">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thread_groups"
              c:identifier="ide_debugger_get_thread_groups">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1435">Gets the thread groups that have been registered by the debugger.

The resulting #GListModel accuracy is based on the #IdeDebugger
implementation emitting varous thread-group modification signals correctly.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1444">a #GListModel of #IdeDebuggerThreadGroup</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1437">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_threads" c:identifier="ide_debugger_get_threads">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1456">Gets the threads that have been registered by the debugger.

The resulting #GListModel accuracy is based on the #IdeDebugger
implementation emitting varous thread modification signals correctly.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="222"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1465">a #GListModel of #IdeDebuggerThread</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1458">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_breakpoint_async"
              c:identifier="ide_debugger_insert_breakpoint_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1235">Asynchronously requests that a breakpoint is added to the debugger.

This asynchronous function may complete before the breakpoint has been
registered in the debugger. Debugger implementations will emit
#IdeDebugger::breakpoint-added when a breakpoint has been registered.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1237">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1238">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1239">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1240">an async callback to complete the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1241">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_breakpoint_finish"
              c:identifier="ide_debugger_insert_breakpoint_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1267">Completes a request to asynchronously insert a breakpoint.

See also: ide_debugger_insert_breakpoint_async()</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1277">%TRUE if the command was submitted successfully; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1269">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1270">a #GAsyncResult or %NULL</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="interpret_async"
              c:identifier="ide_debugger_interpret_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1896">Asynchronously requests that the debugger interpret the command.

This is used by the interactive-console to submit commands to the debugger
that are in the native syntax of that debugger.

The debugger is expected to return any textual output via the
IdeDebugger::log signal.

Call ide_debugger_interpret_finish() from @callback to determine if the
command was interpreted.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="398"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1898">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1899">a command to execute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1900">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1901">a callback to execute, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1902">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="interpret_finish"
              c:identifier="ide_debugger_interpret_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1928">Retrieves the result of the asynchronous operation to interpret a debugger
command.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="404"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1937">%TRUE if the command was interpreted, otherwise %FALSE and
   @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1930">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1931">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="interrupt_async"
              c:identifier="ide_debugger_interrupt_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1528">Asynchronously requests that the debugger interrupts execution of a thread
group. Thread groups are a collection of threads that are executed or
stopped together and on gdb on Linux, this is the default for all threads in
the process.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="248"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1530">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread_group"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1531">An #IdeDebuggerThreadGroup</doc>
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1532">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1533">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1534">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="interrupt_finish"
              c:identifier="ide_debugger_interrupt_finish"
              throws="1">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="254"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_breakpoints_async"
              c:identifier="ide_debugger_list_breakpoints_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1189">Asynchronously requests the list of current breakpoints from the debugger.

#IdeDebugger implementations must implement the virtual function
for this method.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1191">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1192">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1193">a callback to call upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1194">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_breakpoints_finish"
              c:identifier="ide_debugger_list_breakpoints_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1213">Gets the list of breakpoints from the debugger.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="284"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1221">a #GPtrArray
  of breakpoints that are registered with the debugger.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerBreakpoint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1215">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1216">a #GAsyncResult provided to the async callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_frames_async"
              c:identifier="ide_debugger_list_frames_async">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="288"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_frames_finish"
              c:identifier="ide_debugger_list_frames_finish"
              throws="1">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="294"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1496">An
  array of debugger frames or %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerFrame"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_locals_async"
              c:identifier="ide_debugger_list_locals_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1644">Requests the debugger backend to list the locals that are available to the
given @frame of @thread.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="298"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1646">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1647">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1648">an #IdeDebuggerFrame</doc>
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1649">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1650">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1651">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_locals_finish"
              c:identifier="ide_debugger_list_locals_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1677">Completes an asynchronous request to ide_debugger_list_locals_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="305"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1685">a #GPtrArray of
  #IdeDebuggerVariable if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerVariable"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1679">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1680">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_params_async"
              c:identifier="ide_debugger_list_params_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1699">Requests the debugger backend to list the parameters to the given stack
frame.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="309"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1701">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1702">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1703">an #IdeDebuggerFrame</doc>
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1704">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1705">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1706">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_params_finish"
              c:identifier="ide_debugger_list_params_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1732">Completes an asynchronous request to ide_debugger_list_params_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="316"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1740">a #GPtrArray of
  #IdeDebuggerVariable if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerVariable"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1734">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1735">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_registers_async"
              c:identifier="ide_debugger_list_registers_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1754">Requests the list of registers and their values.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="320"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1756">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1757">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1758">A callback to call once the operation has finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1759">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_registers_finish"
              c:identifier="ide_debugger_list_registers_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1775">Completes an asynchronous request to ide_debugger_list_registers_async().</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="325"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1783">a #GPtrArray of
  #IdeDebuggerRegister if successful; otherwise %NULL and error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerRegister"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1777">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1778">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="locate_binary_at_address"
              c:identifier="ide_debugger_locate_binary_at_address">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1610">Attempts to locate the binary that contains a given address.

@address should be an address within the inferiors process space.

This works by keeping track of libraries as they are loaded and unloaded and
their associated file mappings.

Currently, the filename will match the name in the inferior mount namespace,
but that may change based on future design changes.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="349"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1625">the filename of the binary or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1612">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1613">the address within the inferior process space</doc>
            <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_breakpoint_async"
              c:identifier="ide_debugger_modify_breakpoint_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1346">Asynchronously requests that a breakpoint is modified by the debugger backend.

Specify @change for how to modify the breakpoint.

This asynchronous function may complete before the breakpoint has been
modified by the debugger. Debugger implementations will emit
#IdeDebugger::breakpoint-modified when a breakpoint has been removed.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="258"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1348">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="change" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1349">An #IdeDebuggerBreakpointChange</doc>
            <type name="DebuggerBreakpointChange"
                  c:type="IdeDebuggerBreakpointChange"/>
          </parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1350">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1351">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1352">an async callback to complete the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1353">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="modify_breakpoint_finish"
              c:identifier="ide_debugger_modify_breakpoint_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1384">Completes an asynchronous request to modify a breakpoint.

Note that this only completes the submission of the request, if you need to
know when the breakpoint has been modified, listen to the
#IdeDebugger::breakpoint-modified signal.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1396">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1386">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1387">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_async" c:identifier="ide_debugger_move_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="844">Advances the debugger to the next breakpoint or until the debugger stops.
@movement should describe the type of movement to perform.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="329"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="846">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="movement" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="847">An #IdeDebuggerMovement</doc>
            <type name="DebuggerMovement" c:type="IdeDebuggerMovement"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="848">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="849">A callback to call upon
  completion of the operation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="851">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_finish"
              c:identifier="ide_debugger_move_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="870">Notifies that the movement request has been submitted to the debugger.

Note that this does not indicate that the movement has completed successfully,
only that the command has be submitted.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="335"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="881">%TRUE if successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="872">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="873">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_for_run"
              c:identifier="ide_debugger_prepare_for_run">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1875">Prepares the runner to launch a debugger and target process.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1877">an #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1878">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1879">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_breakpoint_async"
              c:identifier="ide_debugger_remove_breakpoint_async">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1291">Asynchronously requests that a breakpoint is removed from the debugger.

This asynchronous function may complete before the breakpoint has been
removed by the debugger. Debugger implementations will emit
#IdeDebugger::breakpoint-removed when a breakpoint has been removed.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="269"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1293">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1294">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1295">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1296">an async callback to complete the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1297">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_breakpoint_finish"
              c:identifier="ide_debugger_remove_breakpoint_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="1323">Completes a request to asynchronously remove a breakpoint.

See also: ide_debugger_remove_breakpoint_async()</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger.c"
               line="1333">%TRUE if the command was submitted successfully; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1325">An #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1326">a #GAsyncResult or %NULL</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_signal_async"
              c:identifier="ide_debugger_send_signal_async">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="339"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="signum" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_signal_finish"
              c:identifier="ide_debugger_send_signal_finish"
              throws="1">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="345"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_debugger_set_display_name"
              glib:set-property="display-name">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="803">Sets the #IdeDebugger:display-name property.</doc>
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="214"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="805">a #IdeDebugger</doc>
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_run_command"
              c:identifier="ide_debugger_supports_run_command">
        <source-position filename="src/libide/debugger/ide-debugger.h"
                         line="201"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Debugger" c:type="IdeDebugger*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="494">The "display-name" property is used by UI to when it is necessary
to display the name of the debugger. You might set this to "GNU Debugger"
or "Python Debugger", etc.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="selected-thread"
                transfer-ownership="none"
                getter="get_selected_thread">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="508">The currently selected thread.</doc>
        <type name="DebuggerThread"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="breakpoint-added" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="653">The "breakpoint-added" signal is emitted when a breakpoint has been
added to the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="656">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="breakpoint-modified" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="685">The "breakpoint-modified" signal is emitted when a breakpoint has been
modified by the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="688">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="breakpoint-removed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="669">The "breakpoint-removed" signal is emitted when a breakpoint has been
removed from the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="breakpoint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="672">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="library-loaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="740">This signal is emitted when a library has been loaded by the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="library" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="743">An #IdeDebuggerLibrary</doc>
            <type name="DebuggerLibrary"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="library-unloaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="755">This signal is emitted when a library has been unloaded by the debugger.
Generally, this means that the library was a module and loaded in such a
way that allowed unloading.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="library" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="758">An #IdeDebuggerLibrary</doc>
            <type name="DebuggerLibrary"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="log" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="522">The "log" signal is emitted when there is new content to be
appended to one of the streams.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="525">the stream to append to.</doc>
            <type name="DebuggerStream"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="526">the contents for the stream.</doc>
            <type name="GLib.Bytes"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="running" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="701">This signal is emitted when the debugger starts or resumes executing
the inferior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="stopped" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="715">This signal is emitted when the debugger has stopped executing the
inferior for a variety of reasons.

If possible, the debugger implementation will provide the breakpoint of
the location the debugger stopped. That location may not always be
representable by source in the project (such as memory address based
breakpoints).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="stop_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="718">An #IdeDebuggerStopReason</doc>
            <type name="DebuggerStopReason"/>
          </parameter>
          <parameter name="breakpoint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="719">An #IdeDebuggerBreakpoint if any</doc>
            <type name="DebuggerBreakpoint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-added" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="608">The signal is emitted when a thread is added to the inferior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="611">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-group-added" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="542">This signal is emitted when a thread-group has been added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="545">an #IdeDebuggerThreadGroup</doc>
            <type name="DebuggerThreadGroup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-group-exited" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="593">This signal is emitted when a thread-group has exited.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="596">an #IdeDebuggerThreadGroup</doc>
            <type name="DebuggerThreadGroup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-group-removed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="559">This signal is emitted when a thread-group has been removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="562">an #IdeDebuggerThreadGroup</doc>
            <type name="DebuggerThreadGroup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-group-started" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="576">This signal is emitted when a thread-group has been started.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread_group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="579">an #IdeDebuggerThreadGroup</doc>
            <type name="DebuggerThreadGroup"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-removed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="623">The signal is emitted when a thread is removed from the inferior.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="626">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="thread-selected" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger.c"
             line="638">The signal is emitted when a thread is selected in the debugger.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="thread" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="641">an #IdeDebuggerThread</doc>
            <type name="DebuggerThread"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DebuggerAddressRange"
            c:type="IdeDebuggerAddressRange"
            glib:type-name="IdeDebuggerAddressRange"
            glib:get-type="ide_debugger_address_range_get_type"
            c:symbol-prefix="debugger_address_range">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="181"/>
      <field name="from" writable="1">
        <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
      </field>
      <field name="to" writable="1">
        <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
      </field>
      <method name="copy" c:identifier="ide_debugger_address_range_copy">
        <source-position filename="src/libide/debugger/ide-debugger-types.h"
                         line="203"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerAddressRange" c:type="IdeDebuggerAddressRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="range" transfer-ownership="none">
            <type name="DebuggerAddressRange"
                  c:type="const IdeDebuggerAddressRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ide_debugger_address_range_free">
        <source-position filename="src/libide/debugger/ide-debugger-types.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="range" transfer-ownership="none">
            <type name="DebuggerAddressRange"
                  c:type="IdeDebuggerAddressRange*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="DebuggerBreakMode"
                 glib:type-name="IdeDebuggerBreakMode"
                 glib:get-type="ide_debugger_break_mode_get_type"
                 c:type="IdeDebuggerBreakMode">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-types.h"
           line="105">The type of breakpoint.</doc>
      <member name="none"
              value="0"
              c:identifier="IDE_DEBUGGER_BREAK_NONE"
              glib:nick="none"
              glib:name="IDE_DEBUGGER_BREAK_NONE">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="107">No breakpoint is set</doc>
      </member>
      <member name="breakpoint"
              value="1"
              c:identifier="IDE_DEBUGGER_BREAK_BREAKPOINT"
              glib:nick="breakpoint"
              glib:name="IDE_DEBUGGER_BREAK_BREAKPOINT">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="108">A simple breakpoint that stops the debugger
  when reaching a given location.</doc>
      </member>
      <member name="countpoint"
              value="2"
              c:identifier="IDE_DEBUGGER_BREAK_COUNTPOINT"
              glib:nick="countpoint"
              glib:name="IDE_DEBUGGER_BREAK_COUNTPOINT">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="110">A counter that is incremented when the
  debugger reaches a breakpoint.</doc>
      </member>
      <member name="watchpoint"
              value="3"
              c:identifier="IDE_DEBUGGER_BREAK_WATCHPOINT"
              glib:nick="watchpoint"
              glib:name="IDE_DEBUGGER_BREAK_WATCHPOINT">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="112">A breakpoint that is conditional on the
  specification matching.</doc>
      </member>
    </enumeration>
    <class name="DebuggerBreakpoint"
           c:symbol-prefix="debugger_breakpoint"
           c:type="IdeDebuggerBreakpoint"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerBreakpoint"
           glib:get-type="ide_debugger_breakpoint_get_type"
           glib:type-struct="DebuggerBreakpointClass">
      <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                       line="43"/>
      <constructor name="new" c:identifier="ide_debugger_breakpoint_new">
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="reset">
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="compare" c:identifier="ide_debugger_breakpoint_compare">
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="ide_debugger_breakpoint_get_address"
              glib:get-property="address">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="442">Gets the "address" property, which defines where the breakpoint is
located in memory.

Builder only supports up to 64-bit addresses at this time.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="451">The address of the breakpoint, if any.</doc>
          <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="444">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count"
              c:identifier="ide_debugger_breakpoint_get_count"
              glib:get-property="count">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="570">Gets the number of times the breakpoint has been reached, if supported
by the debugger backend.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="576">An integer greater than or equal to zero representing the
  number of times the breakpoint has been reached.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_disposition"
              c:identifier="ide_debugger_breakpoint_get_disposition"
              glib:get-property="disposition">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="659">Gets the "disposition" property of the breakpoint.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="665">An #IdeDebugerDisposition</doc>
          <type name="DebuggerDisposition" c:type="IdeDebuggerDisposition"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="661">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="ide_debugger_breakpoint_get_enabled"
              glib:get-property="enabled">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="704">Checks if the breakpoint is enabled.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="709">%TRUE if the breakpoint is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_debugger_breakpoint_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="485">Gets the file that contains the breakpoint. This may be %NULL, particularly
if the breakpoint does not exist with in a known file, such as at a memory
address.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="83"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="493">The file containing the breakpoint, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="487">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_function"
              c:identifier="ide_debugger_breakpoint_get_function"
              glib:get-property="function">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="748">Gets the "function" property of the breakpoint.

This is a user-readable value representing the name of the function.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="750">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_debugger_breakpoint_get_id"
              glib:get-property="id">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="424">Gets the identifier for the breakpoint that is backend specific.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="430">the id of the breakpoint</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="426">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line"
              c:identifier="ide_debugger_breakpoint_get_line"
              glib:get-property="line">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="788">Gets the "line" property, which is the line number within the file
that contains the breakpoint.

This value is indexed from 1, and 0 indicates that the value is unset.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="797">An integer greater than 0 if set, otherwise 0.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="790">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode"
              c:identifier="ide_debugger_breakpoint_get_mode"
              glib:get-property="mode">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="611">Gets teh mode for the breakpoint. This describes if the breakpoint
is a normal breakpoint type, countpoint, or watchpoint.

See also: #IdeDebuggerBreakMode</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="619">The mode of the breakpoint</doc>
          <type name="DebuggerBreakMode" c:type="IdeDebuggerBreakMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spec"
              c:identifier="ide_debugger_breakpoint_get_spec"
              glib:get-property="spec">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="526">Gets the "spec" property of the breakpoint.

The spec is used when the #IdeDebuggerBreakMode is
%IDE_DEBUGGER_BREAK_WATCHPOINT.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="535">A string containing the spec, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="528">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_thread"
              c:identifier="ide_debugger_breakpoint_get_thread"
              glib:get-property="thread">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="830">Gets the "thread" property, which is the thread the breakpoint is
currently stopped in (if any).</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="98"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoint.c"
               line="837">the thread identifier or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="832">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="ide_debugger_breakpoint_set_address"
              glib:set-property="address">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="463">Sets the address of the breakpoint, if any.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="465">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="466">The address of the breakpoint</doc>
            <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_count"
              c:identifier="ide_debugger_breakpoint_set_count"
              glib:set-property="count">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="589">Sets the number of times the breakpoint has been reached if the
breakpoint is a countpoint (or if the backend supports counting of
regular breakpoints).</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_disposition"
              c:identifier="ide_debugger_breakpoint_set_disposition"
              glib:set-property="disposition">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="677">Sets the "disposition" property.

The disposition property is used to to track what should happen to a
breakpoint when movements are made in the debugger.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="679">an #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="disposition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="680">an #IdeDebuggerDisposition</doc>
            <type name="DebuggerDisposition" c:type="IdeDebuggerDisposition"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="ide_debugger_breakpoint_set_enabled"
              glib:set-property="enabled">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="721">Sets the enabled state of the breakpoint instance.

You must call ide_debugger_breakpoint_modify_breakpoint_async() to actually
modify the breakpoint in the backend.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="723">a #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="724">if the breakpoint is enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file"
              c:identifier="ide_debugger_breakpoint_set_file"
              glib:set-property="file">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="505">Sets the file that contains the breakpoint, if any.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="507">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="508">the file containing the breakpoint, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_function"
              c:identifier="ide_debugger_breakpoint_set_function"
              glib:set-property="function">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="766">Sets the "function" property, which is a user-readable value representing
the name of the function.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="768">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="function"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="769">the name of the function, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line"
              c:identifier="ide_debugger_breakpoint_set_line"
              glib:set-property="line">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="809">Sets the line for the breakpoint. A value of 0 means the line is unset.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="811">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode"
              c:identifier="ide_debugger_breakpoint_set_mode"
              glib:set-property="mode">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="631">Sets the "mode" property for the breakpoint.

This should represent the mode for which the breakpoint is used.

For example, if it is a countpoint (a breakpoint which increments a
counter), you would use %IDE_DEBUGGER_BREAK_COUNTPOINT.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="633">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="634">An #IdeDebuggerBreakMode</doc>
            <type name="DebuggerBreakMode" c:type="IdeDebuggerBreakMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spec"
              c:identifier="ide_debugger_breakpoint_set_spec"
              glib:set-property="spec">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="547">Sets the specification for the debugger breakpoint. This describes
a statement which the debugger can use to determine of the breakpoint
should be applied when stopping the debugger.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="549">An #IdeDebuggerBreakpoint</doc>
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="spec"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoint.c"
                 line="550">the specification or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_thread"
              c:identifier="ide_debugger_breakpoint_set_thread"
              glib:set-property="thread">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="849">Sets the thread that the breakpoint is currently stopped in.

This should generally only be used by debugger implementations.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
          </instance-parameter>
          <parameter name="thread" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address"
                writable="1"
                transfer-ownership="none"
                setter="set_address"
                getter="get_address"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="229">The address of the breakpoint, if available.

Builder only supports up to 64-bit addresses at this time.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="count"
                writable="1"
                transfer-ownership="none"
                setter="set_count"
                getter="get_count"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="243">The number of times the breakpoint has been reached.

This is backend specific, and may not be supported by all backends.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="disposition"
                writable="1"
                transfer-ownership="none"
                setter="set_disposition"
                getter="get_disposition"
                default-value="IDE_DEBUGGER_DISPOSITION_KEEP">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="257">This property describes what should happen to the breakpoint upon the
next stop of the debugger.

Generally, breakpoints are kept. But some backends allow you to remove
a breakpoint upon the next stop of the debugger or when the breakpoint
is next reached.

This is backend specific, and not all values may be supported by all
backends.</doc>
        <type name="DebuggerDisposition"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="278">This property is %TRUE when the breakpoint is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file"
                writable="1"
                transfer-ownership="none"
                setter="set_file"
                getter="get_file"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="319">The file containing the breakpoint, if any.

If the breakpoint exists at an assembly instruction that cannot be
represented by a file, this will be %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="function"
                writable="1"
                transfer-ownership="none"
                setter="set_function"
                getter="get_function"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="290">The name of the function containing the breakpoint.

The value of this is backend specific and may look vastly different
based on the language being debugged.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="305">The identifier of the breakpoint.

This is backend specific.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="line"
                writable="1"
                transfer-ownership="none"
                setter="set_line"
                getter="get_line"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="334">The line number within #IdeDebuggerBreakpoint:file where the
breakpoint exists.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode"
                writable="1"
                transfer-ownership="none"
                setter="set_mode"
                getter="get_mode"
                default-value="IDE_DEBUGGER_BREAK_BREAKPOINT">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="347">The mode of the breakpoint, such as a breakpoint, countpoint, or watchpoint.</doc>
        <type name="DebuggerBreakMode"/>
      </property>
      <property name="spec"
                writable="1"
                transfer-ownership="none"
                setter="set_spec"
                getter="get_spec"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="360">The specification for the breakpoint, which may be used by watchpoints
to determine of the breakpoint should be applied while executing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="thread"
                writable="1"
                transfer-ownership="none"
                setter="set_thread"
                getter="get_thread"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="373">The thread the breakpoint is currently stopped in, or %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="reset" when="last">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoint.c"
             line="387">The "reset" signal is emitted after the debugger has exited so that the
breakpoint can reset any internal state. This allows the breakpoint to be
propagated to the next debugger instance, allowing the user to move
between debugger sessions without loosing state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <enumeration name="DebuggerBreakpointChange"
                 glib:type-name="IdeDebuggerBreakpointChange"
                 glib:get-type="ide_debugger_breakpoint_change_get_type"
                 c:type="IdeDebuggerBreakpointChange">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-types.h"
           line="129">Describes the type of modification to perform on a breakpoint.</doc>
      <member name="enabled"
              value="1"
              c:identifier="IDE_DEBUGGER_BREAKPOINT_CHANGE_ENABLED"
              glib:nick="enabled"
              glib:name="IDE_DEBUGGER_BREAKPOINT_CHANGE_ENABLED">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="131">change the enabled state</doc>
      </member>
    </enumeration>
    <record name="DebuggerBreakpointClass"
            c:type="IdeDebuggerBreakpointClass"
            glib:is-gtype-struct-for="DebuggerBreakpoint">
      <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                       line="43"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reset">
        <callback name="reset">
          <source-position filename="src/libide/debugger/ide-debugger-breakpoint.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DebuggerBreakpoints"
           c:symbol-prefix="debugger_breakpoints"
           c:type="IdeDebuggerBreakpoints"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeDebuggerBreakpoints"
           glib:get-type="ide_debugger_breakpoints_get_type"
           glib:type-struct="DebuggerBreakpointsClass">
      <source-position filename="src/libide/debugger/ide-debugger-breakpoints.h"
                       line="33"/>
      <method name="foreach" c:identifier="ide_debugger_breakpoints_foreach">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoints.c"
             line="378">Call @func for every #IdeDebuggerBreakpoint in @self.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoints.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoints.c"
                 line="380">a #IdeDebuggerBreakpoints</doc>
            <type name="DebuggerBreakpoints" c:type="IdeDebuggerBreakpoints*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoints.c"
                 line="381">a #GFunc to call</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoints.c"
                 line="382">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_debugger_breakpoints_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoints.c"
             line="361">Gets the "file" property, which is the file that breakpoints within
this container belong to.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoints.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoints.c"
               line="368">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoints.c"
                 line="363">An #IdeDebuggerBreakpoints</doc>
            <type name="DebuggerBreakpoints" c:type="IdeDebuggerBreakpoints*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line" c:identifier="ide_debugger_breakpoints_get_line">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-breakpoints.c"
             line="190">Gets the breakpoint that has been registered at a given line, or %NULL
if no breakpoint is registered there.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-breakpoints.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-breakpoints.c"
               line="198">An #IdeDebuggerBreakpoint or %NULL</doc>
          <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoints.c"
                 line="192">An #IdeDebuggerBreakpoints</doc>
            <type name="DebuggerBreakpoints" c:type="IdeDebuggerBreakpoints*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-breakpoints.c"
                 line="193">The line number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_line_mode"
              c:identifier="ide_debugger_breakpoints_get_line_mode">
        <source-position filename="src/libide/debugger/ide-debugger-breakpoints.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="DebuggerBreakMode" c:type="IdeDebuggerBreakMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerBreakpoints" c:type="IdeDebuggerBreakpoints*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DebuggerBreakpointsClass"
            c:type="IdeDebuggerBreakpointsClass"
            glib:is-gtype-struct-for="DebuggerBreakpoints">
      <source-position filename="src/libide/debugger/ide-debugger-breakpoints.h"
                       line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DebuggerClass"
            c:type="IdeDebuggerClass"
            glib:is-gtype-struct-for="Debugger">
      <source-position filename="src/libide/debugger/ide-debugger.h"
                       line="198"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="log">
        <callback name="log">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="stream" transfer-ownership="none">
              <type name="DebuggerStream" c:type="IdeDebuggerStream"/>
            </parameter>
            <parameter name="content" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_group_added">
        <callback name="thread_group_added">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread_group" transfer-ownership="none">
              <type name="DebuggerThreadGroup"
                    c:type="IdeDebuggerThreadGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_group_removed">
        <callback name="thread_group_removed">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread_group" transfer-ownership="none">
              <type name="DebuggerThreadGroup"
                    c:type="IdeDebuggerThreadGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_group_started">
        <callback name="thread_group_started">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread_group" transfer-ownership="none">
              <type name="DebuggerThreadGroup"
                    c:type="IdeDebuggerThreadGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_group_exited">
        <callback name="thread_group_exited">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread_group" transfer-ownership="none">
              <type name="DebuggerThreadGroup"
                    c:type="IdeDebuggerThreadGroup*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_added">
        <callback name="thread_added">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread" transfer-ownership="none">
              <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_removed">
        <callback name="thread_removed">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread" transfer-ownership="none">
              <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_selected">
        <callback name="thread_selected">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread" transfer-ownership="none">
              <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="breakpoint_added">
        <callback name="breakpoint_added">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="breakpoint_removed">
        <callback name="breakpoint_removed">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="breakpoint_modified">
        <callback name="breakpoint_modified">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="running">
        <callback name="running">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stopped">
        <callback name="stopped">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="stop_reason" transfer-ownership="none">
              <type name="DebuggerStopReason" c:type="IdeDebuggerStopReason"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="library_loaded">
        <callback name="library_loaded">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="library" transfer-ownership="none">
              <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="library_unloaded">
        <callback name="library_unloaded">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="library" transfer-ownership="none">
              <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_run_command">
        <callback name="supports_run_command">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="84"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_command" transfer-ownership="none">
              <type name="RunCommand" c:type="IdeRunCommand*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_for_run">
        <callback name="prepare_for_run">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="88"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1877">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1878">an #IdePipeline</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1879">an #IdeRunContext</doc>
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_can_move">
        <callback name="get_can_move">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="91"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="830">%TRUE if @movement can be performed.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="825">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="movement" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="826">the movement to check</doc>
              <type name="DebuggerMovement" c:type="IdeDebuggerMovement"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_async">
        <callback name="move_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="93"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="846">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="movement" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="847">An #IdeDebuggerMovement</doc>
              <type name="DebuggerMovement" c:type="IdeDebuggerMovement"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="848">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="849">A callback to call upon
  completion of the operation.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="851">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_finish">
        <callback name="move_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="98"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="881">%TRUE if successful, otherwise %FALSE</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="872">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="873">a #GAsyncResult provided to the callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_breakpoints_async">
        <callback name="list_breakpoints_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="101"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1191">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1192">a #GCancellable, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1193">a callback to call upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1194">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_breakpoints_finish">
        <callback name="list_breakpoints_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="105"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1221">a #GPtrArray
  of breakpoints that are registered with the debugger.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="DebuggerBreakpoint"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1215">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1216">a #GAsyncResult provided to the async callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_breakpoint_async">
        <callback name="insert_breakpoint_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="108"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1237">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1238">An #IdeDebuggerBreakpoint</doc>
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1239">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1240">an async callback to complete the operation</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1241">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_breakpoint_finish">
        <callback name="insert_breakpoint_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="113"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1277">%TRUE if the command was submitted successfully; otherwise %FALSE
  and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1269">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1270">a #GAsyncResult or %NULL</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_breakpoint_async">
        <callback name="remove_breakpoint_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="116"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1293">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1294">An #IdeDebuggerBreakpoint</doc>
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1295">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1296">an async callback to complete the operation</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1297">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_breakpoint_finish">
        <callback name="remove_breakpoint_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="121"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1333">%TRUE if the command was submitted successfully; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1325">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1326">a #GAsyncResult or %NULL</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modify_breakpoint_async">
        <callback name="modify_breakpoint_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="124"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1348">An #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="change" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1349">An #IdeDebuggerBreakpointChange</doc>
              <type name="DebuggerBreakpointChange"
                    c:type="IdeDebuggerBreakpointChange"/>
            </parameter>
            <parameter name="breakpoint" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1350">An #IdeDebuggerBreakpoint</doc>
              <type name="DebuggerBreakpoint" c:type="IdeDebuggerBreakpoint*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1351">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1352">an async callback to complete the operation</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1353">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="modify_breakpoint_finish">
        <callback name="modify_breakpoint_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="130"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1396">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1386">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1387">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_frames_async">
        <callback name="list_frames_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="133"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread" transfer-ownership="none">
              <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_frames_finish">
        <callback name="list_frames_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="138"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1496">An
  array of debugger frames or %NULL and @error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="DebuggerFrame"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="interrupt_async">
        <callback name="interrupt_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="141"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1530">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread_group"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1531">An #IdeDebuggerThreadGroup</doc>
              <type name="DebuggerThreadGroup"
                    c:type="IdeDebuggerThreadGroup*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1532">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1533">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1534">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="interrupt_finish">
        <callback name="interrupt_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="146"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_signal_async">
        <callback name="send_signal_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="149"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="signum" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_signal_finish">
        <callback name="send_signal_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="154"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_locals_async">
        <callback name="list_locals_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="157"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1646">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1647">an #IdeDebuggerThread</doc>
              <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1648">an #IdeDebuggerFrame</doc>
              <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1649">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1650">A callback to call once the operation has finished</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1651">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_locals_finish">
        <callback name="list_locals_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="163"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1685">a #GPtrArray of
  #IdeDebuggerVariable if successful; otherwise %NULL and error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="DebuggerVariable"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1679">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1680">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_params_async">
        <callback name="list_params_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="166"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1701">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="thread" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1702">an #IdeDebuggerThread</doc>
              <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1703">an #IdeDebuggerFrame</doc>
              <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1704">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1705">A callback to call once the operation has finished</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1706">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_params_finish">
        <callback name="list_params_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="172"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1740">a #GPtrArray of
  #IdeDebuggerVariable if successful; otherwise %NULL and error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="DebuggerVariable"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1734">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1735">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_registers_async">
        <callback name="list_registers_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="175"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1756">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1757">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1758">A callback to call once the operation has finished</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1759">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_registers_finish">
        <callback name="list_registers_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="179"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1783">a #GPtrArray of
  #IdeDebuggerRegister if successful; otherwise %NULL and error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="DebuggerRegister"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1777">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1778">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disassemble_async">
        <callback name="disassemble_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="182"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1799">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="range" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1800">an #IdeDebuggerAddressRange to disassemble</doc>
              <type name="DebuggerAddressRange"
                    c:type="const IdeDebuggerAddressRange*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1801">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1802">A callback to call once the operation has finished</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1803">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disassemble_finish">
        <callback name="disassemble_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="187"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1829">a #GPtrArray
  of #IdeDebuggerInstruction if successful; otherwise %NULL and error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="DebuggerInstruction"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1823">a #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1824">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="interpret_async">
        <callback name="interpret_async">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="190"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1898">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="command" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1899">a command to execute</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1900">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1901">a callback to execute, or %NULL</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1902">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="interpret_finish">
        <callback name="interpret_finish" throws="1">
          <source-position filename="src/libide/debugger/ide-debugger.h"
                           line="195"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger.c"
                 line="1937">%TRUE if the command was interpreted, otherwise %FALSE and
   @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1930">an #IdeDebugger</doc>
              <type name="Debugger" c:type="IdeDebugger*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/debugger/ide-debugger.c"
                   line="1931">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DebuggerDisposition"
                 glib:type-name="IdeDebuggerDisposition"
                 glib:get-type="ide_debugger_disposition_get_type"
                 c:type="IdeDebuggerDisposition">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-types.h"
           line="144">The disposition determines what should happen to the breakpoint at the next
stop of the debugger.</doc>
      <member name="keep"
              value="0"
              c:identifier="IDE_DEBUGGER_DISPOSITION_KEEP"
              glib:nick="keep"
              glib:name="IDE_DEBUGGER_DISPOSITION_KEEP">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="146">the breakpoint will be kept after
  the next stop. This generally means the breakpoint is persistent until
  removed by the user.</doc>
      </member>
      <member name="disable"
              value="1"
              c:identifier="IDE_DEBUGGER_DISPOSITION_DISABLE"
              glib:nick="disable"
              glib:name="IDE_DEBUGGER_DISPOSITION_DISABLE">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="153">The breakpoint is currently disabled.</doc>
      </member>
      <member name="delete_next_hit"
              value="2"
              c:identifier="IDE_DEBUGGER_DISPOSITION_DELETE_NEXT_HIT"
              glib:nick="delete-next-hit"
              glib:name="IDE_DEBUGGER_DISPOSITION_DELETE_NEXT_HIT">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="149">The breakpoint will be removed
  after the next time it is hit.</doc>
      </member>
      <member name="delete_next_stop"
              value="3"
              c:identifier="IDE_DEBUGGER_DISPOSITION_DELETE_NEXT_STOP"
              glib:nick="delete-next-stop"
              glib:name="IDE_DEBUGGER_DISPOSITION_DELETE_NEXT_STOP">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="151">The breakpoint will be removed
  the next time the debugger stops, even if not hit.</doc>
      </member>
    </enumeration>
    <class name="DebuggerFrame"
           c:symbol-prefix="debugger_frame"
           c:type="IdeDebuggerFrame"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerFrame"
           glib:get-type="ide_debugger_frame_get_type"
           glib:type-struct="DebuggerFrameClass">
      <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                       line="40"/>
      <constructor name="new" c:identifier="ide_debugger_frame_new">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
        </return-value>
      </constructor>
      <method name="get_address"
              c:identifier="ide_debugger_frame_get_address"
              glib:get-property="address">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_args"
              c:identifier="ide_debugger_frame_get_args"
              glib:get-property="args">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_depth"
              c:identifier="ide_debugger_frame_get_depth"
              glib:get-property="depth">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_debugger_frame_get_file"
              glib:get-property="file">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_function"
              c:identifier="ide_debugger_frame_get_function"
              glib:get-property="function">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_library"
              c:identifier="ide_debugger_frame_get_library"
              glib:get-property="library">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line"
              c:identifier="ide_debugger_frame_get_line"
              glib:get-property="line">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="ide_debugger_frame_set_address"
              glib:set-property="address">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="address" transfer-ownership="none">
            <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_args"
              c:identifier="ide_debugger_frame_set_args"
              glib:set-property="args">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_depth"
              c:identifier="ide_debugger_frame_set_depth"
              glib:set-property="depth">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="depth" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file"
              c:identifier="ide_debugger_frame_set_file"
              glib:set-property="file">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_function"
              c:identifier="ide_debugger_frame_set_function"
              glib:set-property="function">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="function" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_library"
              c:identifier="ide_debugger_frame_set_library"
              glib:set-property="library">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="library" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_line"
              c:identifier="ide_debugger_frame_set_line"
              glib:set-property="line">
        <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerFrame" c:type="IdeDebuggerFrame*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="address"
                writable="1"
                transfer-ownership="none"
                setter="set_address"
                getter="get_address"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="args"
                writable="1"
                transfer-ownership="none"
                setter="set_args"
                getter="get_args">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="depth"
                writable="1"
                transfer-ownership="none"
                setter="set_depth"
                getter="get_depth"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="file"
                writable="1"
                transfer-ownership="none"
                setter="set_file"
                getter="get_file"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="function"
                writable="1"
                transfer-ownership="none"
                setter="set_function"
                getter="get_function"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="library"
                writable="1"
                transfer-ownership="none"
                setter="set_library"
                getter="get_library"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="line"
                writable="1"
                transfer-ownership="none"
                setter="set_line"
                getter="get_line"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerFrameClass"
            c:type="IdeDebuggerFrameClass"
            glib:is-gtype-struct-for="DebuggerFrame">
      <source-position filename="src/libide/debugger/ide-debugger-frame.h"
                       line="40"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DebuggerInstruction"
           c:symbol-prefix="debugger_instruction"
           c:type="IdeDebuggerInstruction"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerInstruction"
           glib:get-type="ide_debugger_instruction_get_type"
           glib:type-struct="DebuggerInstructionClass">
      <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                       line="40"/>
      <constructor name="new" c:identifier="ide_debugger_instruction_new">
        <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerInstruction" c:type="IdeDebuggerInstruction*"/>
        </return-value>
        <parameters>
          <parameter name="address" transfer-ownership="none">
            <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_address"
              c:identifier="ide_debugger_instruction_get_address"
              glib:get-property="address">
        <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="DebuggerAddress" c:type="IdeDebuggerAddress"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerInstruction" c:type="IdeDebuggerInstruction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display"
              c:identifier="ide_debugger_instruction_get_display"
              glib:get-property="display">
        <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerInstruction" c:type="IdeDebuggerInstruction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_function"
              c:identifier="ide_debugger_instruction_get_function"
              glib:get-property="function">
        <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerInstruction" c:type="IdeDebuggerInstruction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_display"
              c:identifier="ide_debugger_instruction_set_display"
              glib:set-property="display">
        <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerInstruction" c:type="IdeDebuggerInstruction*"/>
          </instance-parameter>
          <parameter name="display" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_function"
              c:identifier="ide_debugger_instruction_set_function"
              glib:set-property="function">
        <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerInstruction" c:type="IdeDebuggerInstruction*"/>
          </instance-parameter>
          <parameter name="function" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_address"
                default-value="0">
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="display"
                writable="1"
                transfer-ownership="none"
                setter="set_display"
                getter="get_display"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="function"
                writable="1"
                transfer-ownership="none"
                setter="set_function"
                getter="get_function"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerInstructionClass"
            c:type="IdeDebuggerInstructionClass"
            glib:is-gtype-struct-for="DebuggerInstruction">
      <source-position filename="src/libide/debugger/ide-debugger-instruction.h"
                       line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DebuggerLibrary"
           c:symbol-prefix="debugger_library"
           c:type="IdeDebuggerLibrary"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerLibrary"
           glib:get-type="ide_debugger_library_get_type"
           glib:type-struct="DebuggerLibraryClass">
      <source-position filename="src/libide/debugger/ide-debugger-library.h"
                       line="40"/>
      <constructor name="new" c:identifier="ide_debugger_library_new">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_range" c:identifier="ide_debugger_library_add_range">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-library.c"
             line="242">Adds @range to the list of ranges for which the library is mapped in
the inferior's address space.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-library.c"
                 line="244">An #IdeDebuggerLibrary</doc>
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-library.c"
                 line="245">the address range of the library</doc>
            <type name="DebuggerAddressRange"
                  c:type="const IdeDebuggerAddressRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="ide_debugger_library_compare">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_host_name"
              c:identifier="ide_debugger_library_get_host_name"
              glib:get-property="host-name">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_debugger_library_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ranges" c:identifier="ide_debugger_library_get_ranges">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-library.c"
             line="223">Gets the list of address ranges for the library.</doc>
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/debugger/ide-debugger-library.c"
               line="229">a #GPtrArray
  containing the list of address ranges.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebuggerAddressRange"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/debugger/ide-debugger-library.c"
                 line="225">An #IdeDebuggerLibrary</doc>
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_name"
              c:identifier="ide_debugger_library_get_target_name"
              glib:get-property="target-name">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host_name"
              c:identifier="ide_debugger_library_set_host_name"
              glib:set-property="host-name">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
          <parameter name="host_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_name"
              c:identifier="ide_debugger_library_set_target_name"
              glib:set-property="target-name">
        <source-position filename="src/libide/debugger/ide-debugger-library.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerLibrary" c:type="IdeDebuggerLibrary*"/>
          </instance-parameter>
          <parameter name="target_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="host-name"
                writable="1"
                transfer-ownership="none"
                setter="set_host_name"
                getter="get_host_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="target-name"
                writable="1"
                transfer-ownership="none"
                setter="set_target_name"
                getter="get_target_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerLibraryClass"
            c:type="IdeDebuggerLibraryClass"
            glib:is-gtype-struct-for="DebuggerLibrary">
      <source-position filename="src/libide/debugger/ide-debugger-library.h"
                       line="40"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DebuggerMovement"
                 glib:type-name="IdeDebuggerMovement"
                 glib:get-type="ide_debugger_movement_get_type"
                 c:type="IdeDebuggerMovement">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-types.h"
           line="46">Describes the style of movement that should be performed by the debugger.</doc>
      <member name="start"
              value="0"
              c:identifier="IDE_DEBUGGER_MOVEMENT_START"
              glib:nick="start"
              glib:name="IDE_DEBUGGER_MOVEMENT_START">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="48">Start or restart the application</doc>
      </member>
      <member name="continue"
              value="1"
              c:identifier="IDE_DEBUGGER_MOVEMENT_CONTINUE"
              glib:nick="continue"
              glib:name="IDE_DEBUGGER_MOVEMENT_CONTINUE">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="49">Continue until a breakpoint is reached</doc>
      </member>
      <member name="step_in"
              value="2"
              c:identifier="IDE_DEBUGGER_MOVEMENT_STEP_IN"
              glib:nick="step-in"
              glib:name="IDE_DEBUGGER_MOVEMENT_STEP_IN">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="50">Execute the next line of code, stepping into
  any function.</doc>
      </member>
      <member name="step_out"
              value="3"
              c:identifier="IDE_DEBUGGER_MOVEMENT_STEP_OUT"
              glib:nick="step-out"
              glib:name="IDE_DEBUGGER_MOVEMENT_STEP_OUT">
      </member>
      <member name="finish"
              value="4"
              c:identifier="IDE_DEBUGGER_MOVEMENT_FINISH"
              glib:nick="finish"
              glib:name="IDE_DEBUGGER_MOVEMENT_FINISH">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="54">Run until the function returns.</doc>
      </member>
    </enumeration>
    <class name="DebuggerRegister"
           c:symbol-prefix="debugger_register"
           c:type="IdeDebuggerRegister"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerRegister"
           glib:get-type="ide_debugger_register_get_type"
           glib:type-struct="DebuggerRegisterClass">
      <source-position filename="src/libide/debugger/ide-debugger-register.h"
                       line="38"/>
      <constructor name="new" c:identifier="ide_debugger_register_new">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="ide_debugger_register_compare">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_debugger_register_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_debugger_register_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_debugger_register_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_debugger_register_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_debugger_register_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/debugger/ide-debugger-register.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerRegister" c:type="IdeDebuggerRegister*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerRegisterClass"
            c:type="IdeDebuggerRegisterClass"
            glib:is-gtype-struct-for="DebuggerRegister">
      <source-position filename="src/libide/debugger/ide-debugger-register.h"
                       line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DebuggerStopReason"
                 glib:type-name="IdeDebuggerStopReason"
                 glib:get-type="ide_debugger_stop_reason_get_type"
                 c:type="IdeDebuggerStopReason">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-types.h"
           line="70">Represents the reason a process has stopped executing in the debugger.</doc>
      <member name="breakpoint_hit"
              value="0"
              c:identifier="IDE_DEBUGGER_STOP_BREAKPOINT_HIT"
              glib:nick="breakpoint-hit"
              glib:name="IDE_DEBUGGER_STOP_BREAKPOINT_HIT">
      </member>
      <member name="catch"
              value="7"
              c:identifier="IDE_DEBUGGER_STOP_CATCH"
              glib:nick="catch"
              glib:name="IDE_DEBUGGER_STOP_CATCH">
      </member>
      <member name="stop_exited"
              value="1"
              c:identifier="IDE_DEBUGGER_STOP_EXITED"
              glib:nick="stop-exited"
              glib:name="IDE_DEBUGGER_STOP_EXITED">
      </member>
      <member name="exited_normally"
              value="2"
              c:identifier="IDE_DEBUGGER_STOP_EXITED_NORMALLY"
              glib:nick="exited-normally"
              glib:name="IDE_DEBUGGER_STOP_EXITED_NORMALLY">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="73">The debugger stopped because the process exited
   in a graceful fashion.</doc>
      </member>
      <member name="exited_signaled"
              value="3"
              c:identifier="IDE_DEBUGGER_STOP_EXITED_SIGNALED"
              glib:nick="exited-signaled"
              glib:name="IDE_DEBUGGER_STOP_EXITED_SIGNALED">
      </member>
      <member name="function_finished"
              value="4"
              c:identifier="IDE_DEBUGGER_STOP_FUNCTION_FINISHED"
              glib:nick="function-finished"
              glib:name="IDE_DEBUGGER_STOP_FUNCTION_FINISHED">
      </member>
      <member name="location_reached"
              value="5"
              c:identifier="IDE_DEBUGGER_STOP_LOCATION_REACHED"
              glib:nick="location-reached"
              glib:name="IDE_DEBUGGER_STOP_LOCATION_REACHED">
      </member>
      <member name="signal_received"
              value="6"
              c:identifier="IDE_DEBUGGER_STOP_SIGNAL_RECEIVED"
              glib:nick="signal-received"
              glib:name="IDE_DEBUGGER_STOP_SIGNAL_RECEIVED">
      </member>
      <member name="unknown"
              value="8"
              c:identifier="IDE_DEBUGGER_STOP_UNKNOWN"
              glib:nick="unknown"
              glib:name="IDE_DEBUGGER_STOP_UNKNOWN">
      </member>
    </enumeration>
    <enumeration name="DebuggerStream"
                 glib:type-name="IdeDebuggerStream"
                 glib:get-type="ide_debugger_stream_get_type"
                 c:type="IdeDebuggerStream">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-types.h"
           line="27">The type of stream for the log message.</doc>
      <member name="console"
              value="1"
              c:identifier="IDE_DEBUGGER_CONSOLE"
              glib:nick="console"
              glib:name="IDE_DEBUGGER_CONSOLE">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="30">Logging from the debugger console</doc>
      </member>
      <member name="log"
              value="2"
              c:identifier="IDE_DEBUGGER_EVENT_LOG"
              glib:nick="log"
              glib:name="IDE_DEBUGGER_EVENT_LOG">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="31">Internal event log from the debugger that can be
  used to troubleshoot the debugger.</doc>
      </member>
      <member name="target"
              value="0"
              c:identifier="IDE_DEBUGGER_TARGET"
              glib:nick="target"
              glib:name="IDE_DEBUGGER_TARGET">
        <doc xml:space="preserve"
             filename="src/libide/debugger/ide-debugger-types.h"
             line="29">Logging from the inferior process</doc>
      </member>
    </enumeration>
    <class name="DebuggerThread"
           c:symbol-prefix="debugger_thread"
           c:type="IdeDebuggerThread"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerThread"
           glib:get-type="ide_debugger_thread_get_type"
           glib:type-struct="DebuggerThreadClass">
      <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                       line="38"/>
      <constructor name="new" c:identifier="ide_debugger_thread_new">
        <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="ide_debugger_thread_compare">
        <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_group"
              c:identifier="ide_debugger_thread_get_group"
              glib:get-property="group">
        <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_debugger_thread_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_group"
              c:identifier="ide_debugger_thread_set_group"
              glib:set-property="group">
        <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThread" c:type="IdeDebuggerThread*"/>
          </instance-parameter>
          <parameter name="thread_group" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="group"
                writable="1"
                transfer-ownership="none"
                setter="set_group"
                getter="get_group"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerThreadClass"
            c:type="IdeDebuggerThreadClass"
            glib:is-gtype-struct-for="DebuggerThread">
      <source-position filename="src/libide/debugger/ide-debugger-thread.h"
                       line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DebuggerThreadGroup"
           c:symbol-prefix="debugger_thread_group"
           c:type="IdeDebuggerThreadGroup"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerThreadGroup"
           glib:get-type="ide_debugger_thread_group_get_type"
           glib:type-struct="DebuggerThreadGroupClass">
      <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                       line="38"/>
      <constructor name="new" c:identifier="ide_debugger_thread_group_new">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="ide_debugger_thread_group_compare">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_exit_code"
              c:identifier="ide_debugger_thread_group_get_exit_code"
              glib:get-property="exit-code">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_debugger_thread_group_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pid"
              c:identifier="ide_debugger_thread_group_get_pid"
              glib:get-property="pid">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_exit_code"
              c:identifier="ide_debugger_thread_group_set_exit_code"
              glib:set-property="exit-code">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </instance-parameter>
          <parameter name="exit_code" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pid"
              c:identifier="ide_debugger_thread_group_set_pid"
              glib:set-property="pid">
        <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerThreadGroup" c:type="IdeDebuggerThreadGroup*"/>
          </instance-parameter>
          <parameter name="pid" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="exit-code"
                writable="1"
                transfer-ownership="none"
                setter="set_exit_code"
                getter="get_exit_code"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="pid"
                writable="1"
                transfer-ownership="none"
                setter="set_pid"
                getter="get_pid"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerThreadGroupClass"
            c:type="IdeDebuggerThreadGroupClass"
            glib:is-gtype-struct-for="DebuggerThreadGroup">
      <source-position filename="src/libide/debugger/ide-debugger-thread-group.h"
                       line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="DebuggerVariable"
           c:symbol-prefix="debugger_variable"
           c:type="IdeDebuggerVariable"
           parent="GObject.Object"
           glib:type-name="IdeDebuggerVariable"
           glib:get-type="ide_debugger_variable_get_type"
           glib:type-struct="DebuggerVariableClass">
      <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                       line="38"/>
      <constructor name="new" c:identifier="ide_debugger_variable_new">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_has_children"
              c:identifier="ide_debugger_variable_get_has_children"
              glib:get-property="has-children">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_debugger_variable_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_name"
              c:identifier="ide_debugger_variable_get_type_name"
              glib:get-property="type-name">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_debugger_variable_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_has_children"
              c:identifier="ide_debugger_variable_set_has_children"
              glib:set-property="has-children">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
          <parameter name="has_children" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_name"
              c:identifier="ide_debugger_variable_set_type_name"
              glib:set-property="type-name">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
          <parameter name="type_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_debugger_variable_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DebuggerVariable" c:type="IdeDebuggerVariable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-children"
                writable="1"
                transfer-ownership="none"
                setter="set_has_children"
                getter="get_has_children"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type-name"
                writable="1"
                transfer-ownership="none"
                setter="set_type_name"
                getter="get_type_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DebuggerVariableClass"
            c:type="IdeDebuggerVariableClass"
            glib:is-gtype-struct-for="DebuggerVariable">
      <source-position filename="src/libide/debugger/ide-debugger-variable.h"
                       line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="DependencyUpdater"
               c:symbol-prefix="dependency_updater"
               c:type="IdeDependencyUpdater"
               glib:type-name="IdeDependencyUpdater"
               glib:get-type="ide_dependency_updater_get_type"
               glib:type-struct="DependencyUpdaterInterface">
      <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                       line="47"/>
      <prerequisite name="Object"/>
      <virtual-method name="update_async" invoker="update_async">
        <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DependencyUpdater" c:type="IdeDependencyUpdater*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_finish" invoker="update_finish" throws="1">
        <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DependencyUpdater" c:type="IdeDependencyUpdater*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="update_async"
              c:identifier="ide_dependency_updater_update_async">
        <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DependencyUpdater" c:type="IdeDependencyUpdater*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="ide_dependency_updater_update_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DependencyUpdater" c:type="IdeDependencyUpdater*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="DependencyUpdaterInterface"
            c:type="IdeDependencyUpdaterInterface"
            glib:is-gtype-struct-for="DependencyUpdater">
      <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                       line="47"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="update_async">
        <callback name="update_async">
          <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DependencyUpdater" c:type="IdeDependencyUpdater*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_finish">
        <callback name="update_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-dependency-updater.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DependencyUpdater" c:type="IdeDependencyUpdater*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DeployStrategy"
           c:symbol-prefix="deploy_strategy"
           c:type="IdeDeployStrategy"
           parent="Object"
           abstract="1"
           glib:type-name="IdeDeployStrategy"
           glib:get-type="ide_deploy_strategy_get_type"
           glib:type-struct="DeployStrategyClass">
      <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                       line="65"/>
      <virtual-method name="deploy_async" invoker="deploy_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="198">Requests that the #IdeDeployStrategy deploy the application to the
configured device in the build pipeline.

If supported, the strategy will call @progress with periodic updates as
the application is deployed.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="200">a #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="201">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="progress"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="202">
  a #GFileProgressCallback or %NULL</doc>
            <type name="Gio.FileProgressCallback"
                  c:type="GFileProgressCallback"/>
          </parameter>
          <parameter name="progress_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="204">closure data for @progress or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="progress_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="205">destroy callback for @progress_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="206">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="207">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="208">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="deploy_finish" invoker="deploy_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="244">Completes an asynchronous request to deploy the application to the
build pipeline's device.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-deploy-strategy.c"
               line="253">%TRUE if successful; otherwise %FALSE and @error is set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="246">an #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="247">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_async" invoker="load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="131">Asynchronously requests that the #IdeDeployStrategy load anything
necessary to support deployment for @pipeline. If the strategy cannot
support the pipeline, it should fail with %G_IO_ERROR error domain
and %G_IO_ERROR_NOT_SUPPORTED error code.

Generally, the deployment strategy is responsible for checking if
it can support deployment to the given device, and determine how to
get the install data out of the pipeline. Given so many moving parts
in build systems, how to determine that is an implementation detail of
the specific #IdeDeployStrategy.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="133">an #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="134">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="135">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="136">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="137">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_finish" invoker="load_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="168">Completes an asynchronous request to load the #IdeDeployStrategy.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-deploy-strategy.c"
               line="176">%TRUE if successful and the pipeline was supported; otherwise
  %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="170">an #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="171">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_run_context" invoker="prepare_run_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="272">Prepare an #IdeRunContext to run on a device.

This virtual function should be implemented by device strategies to prepare
a run context for running on a device or deployment situation.

Typically this is either nothing (in the case of running locally) or pushing
a layer into the run context which is a command to deliver the command to
another device/container/simulator/etc.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="274">a #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="275">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="276">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="deploy_async"
              c:identifier="ide_deploy_strategy_deploy_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="198">Requests that the #IdeDeployStrategy deploy the application to the
configured device in the build pipeline.

If supported, the strategy will call @progress with periodic updates as
the application is deployed.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="200">a #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="201">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="progress"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="202">
  a #GFileProgressCallback or %NULL</doc>
            <type name="Gio.FileProgressCallback"
                  c:type="GFileProgressCallback"/>
          </parameter>
          <parameter name="progress_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="204">closure data for @progress or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="progress_data_destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="205">destroy callback for @progress_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="206">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="207">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="208">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deploy_finish"
              c:identifier="ide_deploy_strategy_deploy_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="244">Completes an asynchronous request to deploy the application to the
build pipeline's device.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-deploy-strategy.c"
               line="253">%TRUE if successful; otherwise %FALSE and @error is set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="246">an #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="247">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_async" c:identifier="ide_deploy_strategy_load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="131">Asynchronously requests that the #IdeDeployStrategy load anything
necessary to support deployment for @pipeline. If the strategy cannot
support the pipeline, it should fail with %G_IO_ERROR error domain
and %G_IO_ERROR_NOT_SUPPORTED error code.

Generally, the deployment strategy is responsible for checking if
it can support deployment to the given device, and determine how to
get the install data out of the pipeline. Given so many moving parts
in build systems, how to determine that is an implementation detail of
the specific #IdeDeployStrategy.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="133">an #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="134">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="135">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="136">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="137">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_deploy_strategy_load_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="168">Completes an asynchronous request to load the #IdeDeployStrategy.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-deploy-strategy.c"
               line="176">%TRUE if successful and the pipeline was supported; otherwise
  %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="170">an #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="171">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_run_context"
              c:identifier="ide_deploy_strategy_prepare_run_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-deploy-strategy.c"
             line="272">Prepare an #IdeRunContext to run on a device.

This virtual function should be implemented by device strategies to prepare
a run context for running on a device or deployment situation.

Typically this is either nothing (in the case of running locally) or pushing
a layer into the run context which is a command to deliver the command to
another device/container/simulator/etc.</doc>
        <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="274">a #IdeDeployStrategy</doc>
            <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="275">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="276">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="DeployStrategyClass"
            c:type="IdeDeployStrategyClass"
            glib:is-gtype-struct-for="DeployStrategy">
      <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                       line="65"/>
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="load_async">
        <callback name="load_async">
          <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="133">an #IdeDeployStrategy</doc>
              <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="134">an #IdePipeline</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="135">a #GCancellable, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="136">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="137">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_finish">
        <callback name="load_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="176">%TRUE if successful and the pipeline was supported; otherwise
  %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="170">an #IdeDeployStrategy</doc>
              <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="171">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deploy_async">
        <callback name="deploy_async">
          <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="200">a #IdeDeployStrategy</doc>
              <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="201">an #IdePipeline</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="progress"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="notified"
                       closure="3"
                       destroy="4">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="202">
  a #GFileProgressCallback or %NULL</doc>
              <type name="Gio.FileProgressCallback"
                    c:type="GFileProgressCallback"/>
            </parameter>
            <parameter name="progress_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="204">closure data for @progress or %NULL</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="progress_data_destroy"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="205">destroy callback for @progress_data</doc>
              <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="206">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="7">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="207">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="208">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="deploy_finish">
        <callback name="deploy_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-deploy-strategy.c"
                 line="253">%TRUE if successful; otherwise %FALSE and @error is set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="246">an #IdeDeployStrategy</doc>
              <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="247">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_run_context">
        <callback name="prepare_run_context">
          <source-position filename="src/libide/foundry/ide-deploy-strategy.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="274">a #IdeDeployStrategy</doc>
              <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="275">an #IdePipeline</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-deploy-strategy.c"
                   line="276">an #IdeRunContext</doc>
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="IdeDevice"
           parent="Object"
           abstract="1"
           glib:type-name="IdeDevice"
           glib:get-type="ide_device_get_type"
           glib:type-struct="DeviceClass">
      <source-position filename="src/libide/foundry/ide-device.h" line="60"/>
      <virtual-method name="get_info_async" invoker="get_info_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="320">Asynchronously requests information about the device.

Some information may not be available until after a connection
has been established. This allows the device to connect before
fetching that information.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="322">an #IdeDevice</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="323">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="324">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="325">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_info_finish"
                      invoker="get_info_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="349">Completes an asynchronous request to load the information about a device.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device.c"
               line="357">an #IdeDeviceInfo or %NULL and @error is set</doc>
          <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="351">an #IdeDevice</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="352">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_configuration"
                      invoker="prepare_configuration">
        <source-position filename="src/libide/foundry/ide-device.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_display_name"
              c:identifier="ide_device_get_display_name"
              glib:get-property="display-name">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="51">This function returns the name of the device. If no name has been set, then
%NULL is returned.

In some cases, this value wont be available until additional information
has been probed from the device.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device.c"
               line="60">A string containing the display name for the device.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_device_get_icon_name"
              glib:get-property="icon-name">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="89">Gets the icon to use when displaying the device in UI elements.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device.c"
               line="95">an icon-name or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="91">a #IdeDevice</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_device_get_id"
              glib:get-property="id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="129">Retrieves the "id" property of the #IdeDevice. This is generally not a
user friendly name as it is often a guid.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device.c"
               line="135">A unique identifier for the device.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info_async" c:identifier="ide_device_get_info_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="320">Asynchronously requests information about the device.

Some information may not be available until after a connection
has been established. This allows the device to connect before
fetching that information.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="322">an #IdeDevice</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="323">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="324">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="325">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info_finish"
              c:identifier="ide_device_get_info_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="349">Completes an asynchronous request to load the information about a device.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device.c"
               line="357">an #IdeDeviceInfo or %NULL and @error is set</doc>
          <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="351">an #IdeDevice</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="352">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_configuration"
              c:identifier="ide_device_prepare_configuration">
        <source-position filename="src/libide/foundry/ide-device.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_device_set_display_name"
              glib:set-property="display-name">
        <source-position filename="src/libide/foundry/ide-device.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_device_set_icon_name"
              glib:set-property="icon-name">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="107">Sets the icon-name property.

This is the icon that is displayed with the device name in UI elements.</doc>
        <source-position filename="src/libide/foundry/ide-device.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="109">a #IdeDevice</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_device_set_id"
              glib:set-property="id">
        <source-position filename="src/libide/foundry/ide-device.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device.c"
             line="270">The "icon-name" property is the icon to display with the device in
various UI elements of Builder.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="DeviceClass"
            c:type="IdeDeviceClass"
            glib:is-gtype-struct-for="Device">
      <source-position filename="src/libide/foundry/ide-device.h" line="60"/>
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="prepare_configuration">
        <callback name="prepare_configuration">
          <source-position filename="src/libide/foundry/ide-device.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
            <parameter name="configuration" transfer-ownership="none">
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_info_async">
        <callback name="get_info_async">
          <source-position filename="src/libide/foundry/ide-device.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device.c"
                   line="322">an #IdeDevice</doc>
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device.c"
                   line="323">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device.c"
                   line="324">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device.c"
                   line="325">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_info_finish">
        <callback name="get_info_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-device.h"
                           line="54"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device.c"
                 line="357">an #IdeDeviceInfo or %NULL and @error is set</doc>
            <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device.c"
                   line="351">an #IdeDevice</doc>
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device.c"
                   line="352">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="32">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DeviceError"
                 glib:type-name="IdeDeviceError"
                 glib:get-type="ide_device_error_get_type"
                 c:type="IdeDeviceError"
                 glib:error-domain="ide_device_error_quark">
      <member name="device"
              value="1"
              c:identifier="IDE_DEVICE_ERROR_NO_SUCH_DEVICE"
              glib:nick="device"
              glib:name="IDE_DEVICE_ERROR_NO_SUCH_DEVICE">
      </member>
      <function name="quark" c:identifier="ide_device_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="DeviceInfo"
           c:symbol-prefix="device_info"
           c:type="IdeDeviceInfo"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeDeviceInfo"
           glib:get-type="ide_device_info_get_type"
           glib:type-struct="DeviceInfoClass">
      <source-position filename="src/libide/foundry/ide-device-info.h"
                       line="44"/>
      <constructor name="new" c:identifier="ide_device_info_new">
        <source-position filename="src/libide/foundry/ide-device-info.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
        </return-value>
      </constructor>
      <method name="get_host_triplet"
              c:identifier="ide_device_info_get_host_triplet"
              glib:get-property="host-triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-info.c"
             line="179">Get the #IdeTriplet object describing the configuration name
of the Device (its architecture…)</doc>
        <source-position filename="src/libide/foundry/ide-device-info.h"
                         line="54"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-info.c"
               line="186">An #IdeTriplet.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-info.c"
                 line="181">An #IdeDeviceInfo</doc>
            <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="ide_device_info_get_kind"
              glib:get-property="kind">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-info.c"
             line="142">Get the #IdeDeviceKind of the device describing the type of device @self refers to</doc>
        <source-position filename="src/libide/foundry/ide-device-info.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-info.c"
               line="148">An #IdeDeviceKind.</doc>
          <type name="DeviceKind" c:type="IdeDeviceKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-info.c"
                 line="144">An #IdeDeviceInfo</doc>
            <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host_triplet"
              c:identifier="ide_device_info_set_host_triplet"
              glib:set-property="host-triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-info.c"
             line="196">Set the #IdeTriplet object describing the configuration name</doc>
        <source-position filename="src/libide/foundry/ide-device-info.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-info.c"
                 line="198">An #IdeDeviceInfo</doc>
            <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
          </instance-parameter>
          <parameter name="host_triplet" transfer-ownership="none">
            <type name="Triplet" c:type="IdeTriplet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind"
              c:identifier="ide_device_info_set_kind"
              glib:set-property="kind">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-info.c"
             line="159">Set the #IdeDeviceKind of the device describing the type of device @self refers to</doc>
        <source-position filename="src/libide/foundry/ide-device-info.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-info.c"
                 line="161">An #IdeDeviceInfo</doc>
            <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-info.c"
                 line="162">An #IdeDeviceKind</doc>
            <type name="DeviceKind" c:type="IdeDeviceKind"/>
          </parameter>
        </parameters>
      </method>
      <property name="host-triplet"
                writable="1"
                transfer-ownership="none"
                setter="set_host_triplet"
                getter="get_host_triplet">
        <type name="Triplet"/>
      </property>
      <property name="kind"
                writable="1"
                transfer-ownership="none"
                setter="set_kind"
                getter="get_kind"
                default-value="IDE_DEVICE_KIND_COMPUTER">
        <type name="DeviceKind"/>
      </property>
    </class>
    <record name="DeviceInfoClass"
            c:type="IdeDeviceInfoClass"
            glib:is-gtype-struct-for="DeviceInfo">
      <source-position filename="src/libide/foundry/ide-device-info.h"
                       line="44"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DeviceKind"
                 glib:type-name="IdeDeviceKind"
                 glib:get-type="ide_device_kind_get_type"
                 c:type="IdeDeviceKind">
      <member name="computer"
              value="0"
              c:identifier="IDE_DEVICE_KIND_COMPUTER"
              glib:nick="computer"
              glib:name="IDE_DEVICE_KIND_COMPUTER">
      </member>
      <member name="phone"
              value="1"
              c:identifier="IDE_DEVICE_KIND_PHONE"
              glib:nick="phone"
              glib:name="IDE_DEVICE_KIND_PHONE">
      </member>
      <member name="tablet"
              value="2"
              c:identifier="IDE_DEVICE_KIND_TABLET"
              glib:nick="tablet"
              glib:name="IDE_DEVICE_KIND_TABLET">
      </member>
      <member name="micro_controller"
              value="3"
              c:identifier="IDE_DEVICE_KIND_MICRO_CONTROLLER"
              glib:nick="micro-controller"
              glib:name="IDE_DEVICE_KIND_MICRO_CONTROLLER">
      </member>
    </enumeration>
    <class name="DeviceManager"
           c:symbol-prefix="device_manager"
           c:type="IdeDeviceManager"
           parent="Object"
           final="1"
           glib:type-name="IdeDeviceManager"
           glib:get-type="ide_device_manager_get_type"
           glib:type-struct="DeviceManagerClass">
      <source-position filename="src/libide/foundry/ide-device-manager.h"
                       line="36"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.ListModel"/>
      <function name="from_context"
                c:identifier="ide_device_manager_from_context">
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="155">an #IdeDeviceManager</doc>
          <type name="DeviceManager" c:type="IdeDeviceManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="153">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="deploy_async"
              c:identifier="ide_device_manager_deploy_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="777">Requests that the application be deployed to the device. This may need to
be done before running the application so that the device has the most
up to date build.</doc>
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="779">a #IdeDeviceManager</doc>
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="780">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="781">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="782">a #GAsyncReadyCallback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="783">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="deploy_finish"
              c:identifier="ide_device_manager_deploy_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="837">Completes a request to deploy the application to the device.</doc>
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-manager.c"
               line="845">%TRUE if successful; otherwise %FALSE and @error is set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="839">a #IdeDeviceManager</doc>
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="840">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="ide_device_manager_get_device"
              glib:get-property="device">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="568">Gets the currently selected device.
Usually, this is an #IdeLocalDevice.</doc>
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-manager.c"
               line="575">an #IdeDevice</doc>
          <type name="Device" c:type="IdeDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="570">a #IdeDeviceManager</doc>
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_by_id"
              c:identifier="ide_device_manager_get_device_by_id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="538">Fetches the first device that matches the device identifier @device_id.</doc>
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-manager.c"
               line="545">An #IdeDevice or %NULL.</doc>
          <type name="Device" c:type="IdeDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="540">an #IdeDeviceManager</doc>
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="device_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="541">The device identifier string.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_device_manager_get_progress"
              glib:get-property="progress">
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_device"
              c:identifier="ide_device_manager_set_device"
              glib:set-property="device">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="599">Sets the #IdeDeviceManager:device property, which is the currently selected
device. Builder uses this to determine how to build the current project for
the devices architecture and operating system.

If @device is %NULL, the local device will be used.</doc>
        <source-position filename="src/libide/foundry/ide-device-manager.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="601">an #IdeDeviceManager</doc>
            <type name="DeviceManager" c:type="IdeDeviceManager*"/>
          </instance-parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-manager.c"
                 line="602">an #IdeDevice or %NULL</doc>
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </method>
      <property name="device"
                writable="1"
                transfer-ownership="none"
                setter="set_device"
                getter="get_device">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="478">The "device" property indicates the currently selected device by the
user. This is the device we will try to deploy to when running, and
execute the application on.</doc>
        <type name="Device"/>
      </property>
      <property name="progress"
                transfer-ownership="none"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-manager.c"
             line="492">The "progress" property is updated with a value between 0.0 and 1.0 while
the deployment is in progress.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <glib:signal name="deploy-finished" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="deploy-started" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DeviceManagerClass"
            c:type="IdeDeviceManagerClass"
            glib:is-gtype-struct-for="DeviceManager">
      <source-position filename="src/libide/foundry/ide-device-manager.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="DeviceProvider"
           c:symbol-prefix="device_provider"
           c:type="IdeDeviceProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeDeviceProvider"
           glib:get-type="ide_device_provider_get_type"
           glib:type-struct="DeviceProviderClass">
      <source-position filename="src/libide/foundry/ide-device-provider.h"
                       line="53"/>
      <virtual-method name="device_added">
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_async" invoker="load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="209">Requests that the #IdeDeviceProvider asynchronously load any known devices.

This should only be called once on an #IdeDeviceProvider. It is an error
to call this function more than once for a single #IdeDeviceProvider.

#IdeDeviceProvider implementations are expected to emit the
#IdeDeviceProvider::device-added signal for each device they've discovered.
That should be done for known devices before returning from the asynchronous
operation so that the device manager does not need to wait for additional
devices to enter the "settled" state.</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="211">an #IdeDeviceProvider</doc>
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="212">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="213">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="214">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_finish" invoker="load_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="239">Completes an asynchronous request to load known devices via
ide_device_provider_load_async().</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-provider.c"
               line="248">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="241">an #IdeDeviceProvider</doc>
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="242">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_device_added"
              c:identifier="ide_device_provider_emit_device_added">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="173">Emits the #IdeDeviceProvider::device-added signal.

This should only be called by subclasses of #IdeDeviceProvider when
a new device has been discovered.</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_device_removed"
              c:identifier="ide_device_provider_emit_device_removed">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="191">Emits the #IdeDeviceProvider::device-removed signal.

This should only be called by subclasses of #IdeDeviceProvider when
a previously added device has been removed.</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="IdeDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="ide_device_provider_get_devices">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="261">Gets a new #GPtrArray containing a list of #IdeDevice instances that were
registered by the #IdeDeviceProvider</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-provider.c"
               line="268">
  a #GPtrArray of #IdeDevice.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="263">an #IdeDeviceProvider</doc>
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_async" c:identifier="ide_device_provider_load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="209">Requests that the #IdeDeviceProvider asynchronously load any known devices.

This should only be called once on an #IdeDeviceProvider. It is an error
to call this function more than once for a single #IdeDeviceProvider.

#IdeDeviceProvider implementations are expected to emit the
#IdeDeviceProvider::device-added signal for each device they've discovered.
That should be done for known devices before returning from the asynchronous
operation so that the device manager does not need to wait for additional
devices to enter the "settled" state.</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="211">an #IdeDeviceProvider</doc>
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="212">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="213">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="214">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_device_provider_load_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="239">Completes an asynchronous request to load known devices via
ide_device_provider_load_async().</doc>
        <source-position filename="src/libide/foundry/ide-device-provider.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-device-provider.c"
               line="248">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="241">an #IdeDeviceProvider</doc>
            <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="242">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="device-added" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="121">The "device-added" signal is emitted when a provider has discovered
a device has become available.

Subclasses of #IdeDeviceManager must chain-up if they override the
#IdeDeviceProviderClass.device_added vfunc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="124">an #IdeDevice</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-device-provider.c"
             line="144">The "device-removed" signal is emitted when a provider has discovered
a device is no longer available.

Subclasses of #IdeDeviceManager must chain-up if they override the
#IdeDeviceProviderClass.device_removed vfunc.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="147">an #IdeDevice</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceProviderClass"
            c:type="IdeDeviceProviderClass"
            glib:is-gtype-struct-for="DeviceProvider">
      <source-position filename="src/libide/foundry/ide-device-provider.h"
                       line="53"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <source-position filename="src/libide/foundry/ide-device-provider.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <source-position filename="src/libide/foundry/ide-device-provider.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="IdeDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_async">
        <callback name="load_async">
          <source-position filename="src/libide/foundry/ide-device-provider.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device-provider.c"
                   line="211">an #IdeDeviceProvider</doc>
              <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device-provider.c"
                   line="212">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device-provider.c"
                   line="213">a #GAsyncReadyCallback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device-provider.c"
                   line="214">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_finish">
        <callback name="load_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-device-provider.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-device-provider.c"
                 line="248">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device-provider.c"
                   line="241">an #IdeDeviceProvider</doc>
              <type name="DeviceProvider" c:type="IdeDeviceProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-device-provider.c"
                   line="242">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Diagnostic"
           c:symbol-prefix="diagnostic"
           c:type="IdeDiagnostic"
           parent="Object"
           glib:type-name="IdeDiagnostic"
           glib:get-type="ide_diagnostic_get_type"
           glib:type-struct="DiagnosticClass">
      <source-position filename="src/libide/code/ide-diagnostic.h" line="56"/>
      <constructor name="new" c:identifier="ide_diagnostic_new">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="59"/>
        <return-value transfer-ownership="full">
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <parameter name="severity" transfer-ownership="none">
            <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_diagnostic_new_from_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="671">Creates a new #GVariant using the data contained in @variant.

If @variant is %NULL or Upon failure, %NULL is returned.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="679">a #IdeDiagnostic or %NULL</doc>
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <parameter name="variant"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="673">a #GVariant or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_fixit" c:identifier="ide_diagnostic_add_fixit">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="496">Adds a source fixit to the diagnostic.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="498">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="fixit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="499">an #IdeTextEdit</doc>
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_range" c:identifier="ide_diagnostic_add_range">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="453">Adds a source range to the diagnostic.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="455">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="456">an #IdeRange</doc>
            <type name="Range" c:type="IdeRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="ide_diagnostic_compare">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="ide_diagnostic_equal">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_diagnostic_get_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="238">Gets the file containing the diagnostic, if any.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="81"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="244">an #IdeLocation or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="240">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fixit" c:identifier="ide_diagnostic_get_fixit">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="380">Gets the fixit denoted by @index. This value should be less than the value
returned from ide_diagnostic_get_n_fixits().</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="94"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="388">An #IdeTextEdit</doc>
          <type name="TextEdit" c:type="IdeTextEdit*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="382">an #IdeDiagnostic.</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="383">The index of the fixit.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="ide_diagnostic_get_location"
              glib:get-property="location">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="209">Gets the location of the diagnostic.

See also: ide_diagnostic_get_range().</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="217">an #IdeLocation or %NULL</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="211">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_marked_kind"
              c:identifier="ide_diagnostic_get_marked_kind">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="MarkedKind" c:type="IdeMarkedKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_fixits" c:identifier="ide_diagnostic_get_n_fixits">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_ranges" c:identifier="ide_diagnostic_get_n_ranges">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_range" c:identifier="ide_diagnostic_get_range">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="345">Retrieves the range found at @index. It is a programming error to call this
function with a value greater or equal to ide_diagnostic_get_n_ranges().</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="89"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="351">An #IdeRange</doc>
          <type name="Range" c:type="IdeRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_severity"
              c:identifier="ide_diagnostic_get_severity"
              glib:get-property="severity">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="ide_diagnostic_get_text"
              glib:get-property="text">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text_for_display"
              c:identifier="ide_diagnostic_get_text_for_display">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="259">This creates a new string that is formatted using the diagnostics
line number, column, severity, and message text in the format
"line:column: severity: message".

This can be convenient when wanting to quickly display a
diagnostic such as in a tooltip.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="270">string containing the text formatted for
  display.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="261">an #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="ide_diagnostic_hash">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_marked_kind"
              c:identifier="ide_diagnostic_set_marked_kind">
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="marked_kind" transfer-ownership="none">
            <type name="MarkedKind" c:type="IdeMarkedKind"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_fixit" c:identifier="ide_diagnostic_take_fixit">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="517">Adds a source fixit to the diagnostic, but does not increment the
reference count of @fixit.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="519">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="fixit" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="520">an #IdeTextEdit</doc>
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_range" c:identifier="ide_diagnostic_take_range">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="474">Adds a source range to the diagnostic, but does not increment the
reference count of @range.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="476">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="477">an #IdeRange</doc>
            <type name="Range" c:type="IdeRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_diagnostic_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="601">Creates a #GVariant to represent the diagnostic. This can be useful when
working in subprocesses to serialize the diagnostic.

This function will never return a floating variant.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="610">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="603">a #IdeDiagnostic</doc>
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="display-text"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="location"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_location">
        <type name="Location"/>
      </property>
      <property name="severity"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_severity"
                default-value="IDE_DIAGNOSTIC_IGNORED">
        <type name="DiagnosticSeverity"/>
      </property>
      <property name="text"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="DiagnosticClass"
            c:type="IdeDiagnosticClass"
            glib:is-gtype-struct-for="Diagnostic">
      <source-position filename="src/libide/code/ide-diagnostic.h" line="56"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="DiagnosticProvider"
               c:symbol-prefix="diagnostic_provider"
               c:type="IdeDiagnosticProvider"
               glib:type-name="IdeDiagnosticProvider"
               glib:get-type="ide_diagnostic_provider_get_type"
               glib:type-struct="DiagnosticProviderInterface">
      <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                       line="54"/>
      <prerequisite name="Object"/>
      <virtual-method name="diagnose_async" invoker="diagnose_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="91">Requests the provider diagnose @file using @contents as the contents of
the file.

@callback is executed upon completion, and the caller should call
ide_diagnostic_provider_diagnose_finish() to get the result.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="93">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="94">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="95">the content for the buffer</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="lang_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="96">the language id for the buffer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="97">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="98">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="99">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="diagnose_finish"
                      invoker="diagnose_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="129">Completes an asynchronous request to diagnose a file.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic-provider.c"
               line="135">an #IdeDiagnostics or %NULL and @error is set.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="131">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="61">Loads the provider, discovering any necessary resources.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="63">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="76">Unloads the provider and any allocated resources.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="78">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="diagnose_async"
              c:identifier="ide_diagnostic_provider_diagnose_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="91">Requests the provider diagnose @file using @contents as the contents of
the file.

@callback is executed upon completion, and the caller should call
ide_diagnostic_provider_diagnose_finish() to get the result.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="93">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="94">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="95">the content for the buffer</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="lang_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="96">the language id for the buffer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="97">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="98">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="99">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="diagnose_finish"
              c:identifier="ide_diagnostic_provider_diagnose_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="129">Completes an asynchronous request to diagnose a file.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic-provider.c"
               line="135">an #IdeDiagnostics or %NULL and @error is set.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="131">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_invalidated"
              c:identifier="ide_diagnostic_provider_emit_invalidated">
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_diagnostic_provider_load">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="61">Loads the provider, discovering any necessary resources.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="63">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_diagnostic_provider_unload">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic-provider.c"
             line="76">Unloads the provider and any allocated resources.</doc>
        <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="78">a #IdeDiagnosticProvider</doc>
            <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <glib:signal name="invalidated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="DiagnosticProviderInterface"
            c:type="IdeDiagnosticProviderInterface"
            glib:is-gtype-struct-for="DiagnosticProvider">
      <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                       line="54"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="63">a #IdeDiagnosticProvider</doc>
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="78">a #IdeDiagnosticProvider</doc>
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="diagnose_async">
        <callback name="diagnose_async">
          <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="93">a #IdeDiagnosticProvider</doc>
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="94">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="contents"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="95">the content for the buffer</doc>
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="lang_id"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="96">the language id for the buffer</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="97">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="6">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="98">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="6">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="99">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="diagnose_finish">
        <callback name="diagnose_finish" throws="1">
          <source-position filename="src/libide/code/ide-diagnostic-provider.h"
                           line="51"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic-provider.c"
                 line="135">an #IdeDiagnostics or %NULL and @error is set.</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-diagnostic-provider.c"
                   line="131">a #IdeDiagnosticProvider</doc>
              <type name="DiagnosticProvider" c:type="IdeDiagnosticProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="DiagnosticSeverity"
                 glib:type-name="IdeDiagnosticSeverity"
                 glib:get-type="ide_diagnostic_severity_get_type"
                 c:type="IdeDiagnosticSeverity">
      <member name="ignored"
              value="0"
              c:identifier="IDE_DIAGNOSTIC_IGNORED"
              glib:nick="ignored"
              glib:name="IDE_DIAGNOSTIC_IGNORED">
      </member>
      <member name="note"
              value="1"
              c:identifier="IDE_DIAGNOSTIC_NOTE"
              glib:nick="note"
              glib:name="IDE_DIAGNOSTIC_NOTE">
      </member>
      <member name="unused"
              value="2"
              c:identifier="IDE_DIAGNOSTIC_UNUSED"
              glib:nick="unused"
              glib:name="IDE_DIAGNOSTIC_UNUSED">
      </member>
      <member name="deprecated"
              value="3"
              c:identifier="IDE_DIAGNOSTIC_DEPRECATED"
              glib:nick="deprecated"
              glib:name="IDE_DIAGNOSTIC_DEPRECATED">
      </member>
      <member name="warning"
              value="4"
              c:identifier="IDE_DIAGNOSTIC_WARNING"
              glib:nick="warning"
              glib:name="IDE_DIAGNOSTIC_WARNING">
      </member>
      <member name="error"
              value="5"
              c:identifier="IDE_DIAGNOSTIC_ERROR"
              glib:nick="error"
              glib:name="IDE_DIAGNOSTIC_ERROR">
      </member>
      <member name="fatal"
              value="6"
              c:identifier="IDE_DIAGNOSTIC_FATAL"
              glib:nick="fatal"
              glib:name="IDE_DIAGNOSTIC_FATAL">
      </member>
      <function name="to_string"
                c:identifier="ide_diagnostic_severity_to_string">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="296">Returns a string suitable to represent the diagnsotic severity.</doc>
        <source-position filename="src/libide/code/ide-diagnostic.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="302">a string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="severity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostic.c"
                 line="298">a #IdeDiagnosticSeverity</doc>
            <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="DiagnosticTool"
           c:symbol-prefix="diagnostic_tool"
           c:type="IdeDiagnosticTool"
           parent="Object"
           abstract="1"
           glib:type-name="IdeDiagnosticTool"
           glib:get-type="ide_diagnostic_tool_get_type"
           glib:type-struct="DiagnosticToolClass">
      <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                       line="59"/>
      <implements name="DiagnosticProvider"/>
      <virtual-method name="can_diagnose">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdin_bytes">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="populate_diagnostics">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="diagnostics" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_run_context" throws="1">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="run_context" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_bundled_program_path"
              c:identifier="ide_diagnostic_tool_get_bundled_program_path"
              glib:get-property="bundled-program-path">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_program_path"
              c:identifier="ide_diagnostic_tool_get_local_program_path"
              glib:get-property="local-program-path">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_program_name"
              c:identifier="ide_diagnostic_tool_get_program_name"
              glib:get-property="program-name">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subprocess_flags"
              c:identifier="ide_diagnostic_tool_get_subprocess_flags"
              glib:get-property="subprocess-flags">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bundled_program_path"
              c:identifier="ide_diagnostic_tool_set_bundled_program_path"
              glib:set-property="bundled-program-path">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_local_program_path"
              c:identifier="ide_diagnostic_tool_set_local_program_path"
              glib:set-property="local-program-path">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_program_name"
              c:identifier="ide_diagnostic_tool_set_program_name"
              glib:set-property="program-name">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="program_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subprocess_flags"
              c:identifier="ide_diagnostic_tool_set_subprocess_flags"
              glib:set-property="subprocess-flags">
        <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
          </instance-parameter>
          <parameter name="subprocess_flags" transfer-ownership="none">
            <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
          </parameter>
        </parameters>
      </method>
      <property name="bundled-program-path"
                writable="1"
                transfer-ownership="none"
                setter="set_bundled_program_path"
                getter="get_bundled_program_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="local-program-path"
                writable="1"
                transfer-ownership="none"
                setter="set_local_program_path"
                getter="get_local_program_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="program-name"
                writable="1"
                transfer-ownership="none"
                setter="set_program_name"
                getter="get_program_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-diagnostic-tool.c"
             line="343">The "program-name" property contains the name of the executable to
locate within the build container, host system, or within Builder's
own runtime container.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subprocess-flags"
                writable="1"
                transfer-ownership="none"
                setter="set_subprocess_flags"
                getter="get_subprocess_flags"
                default-value="G_SUBPROCESS_FLAGS_STDIN_PIPE | G_SUBPROCESS_FLAGS_STDOUT_PIPE | G_SUBPROCESS_FLAGS_STDERR_PIPE">
        <type name="Gio.SubprocessFlags"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="DiagnosticToolClass"
            c:type="IdeDiagnosticToolClass"
            glib:is-gtype-struct-for="DiagnosticTool">
      <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                       line="59"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="can_diagnose">
        <callback name="can_diagnose">
          <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="contents" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdin_bytes">
        <callback name="get_stdin_bytes">
          <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                           line="44"/>
          <return-value transfer-ownership="full">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="contents" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="populate_diagnostics">
        <callback name="populate_diagnostics">
          <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
            </parameter>
            <parameter name="diagnostics" transfer-ownership="none">
              <type name="Diagnostics" c:type="IdeDiagnostics*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="stdout_buf" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="stderr_buf" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_run_context">
        <callback name="prepare_run_context" throws="1">
          <source-position filename="src/libide/foundry/ide-diagnostic-tool.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DiagnosticTool" c:type="IdeDiagnosticTool*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="contents" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Diagnostics"
           c:symbol-prefix="diagnostics"
           c:type="IdeDiagnostics"
           parent="Object"
           glib:type-name="IdeDiagnostics"
           glib:get-type="ide_diagnostics_get_type"
           glib:type-struct="DiagnosticsClass">
      <source-position filename="src/libide/code/ide-diagnostics.h" line="58"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_diagnostics_new">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_array"
                   c:identifier="ide_diagnostics_new_from_array">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics.c"
               line="533">an #IdeDiagnostics</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <parameter name="array"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="530">optional array
  of diagnostics to add.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Diagnostic"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="ide_diagnostics_add">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="diagnostic" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_line_in_range"
              c:identifier="ide_diagnostics_foreach_line_in_range">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics.c"
             line="392">This function calls @callback for every line with diagnostics between
@begin_line and @end_line. This is useful when drawing information about
diagnostics in an editor where a known number of lines are visible.</doc>
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="394">an #IdeDiagnostics</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="395">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="begin_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="396">the starting line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="end_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="397">the ending line</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="398">a callback to execute for each matching line</doc>
            <type name="DiagnosticsLineCallback"
                  c:type="IdeDiagnosticsLineCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="399">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_diagnostic_at_line"
              c:identifier="ide_diagnostics_get_diagnostic_at_line">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics.c"
             line="442">Locates an #IdeDiagnostic in @file at @line.</doc>
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="89"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics.c"
               line="450">an #IdeDiagnostic or %NULL</doc>
          <type name="Diagnostic" c:type="IdeDiagnostic*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="444">a #IdeDiagnostics</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="445">the target file</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="446">a line number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_diagnostics_at_line"
              c:identifier="ide_diagnostics_get_diagnostics_at_line">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics.c"
             line="482">Locates all #IdeDiagnostic in @file at @line.</doc>
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="93"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics.c"
               line="490">an #GPtrArray or %NULL</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Diagnostic"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="484">a #IdeDiagnostics</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="485">the target file</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics.c"
                 line="486">a line number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_errors"
              c:identifier="ide_diagnostics_get_has_errors"
              glib:get-property="has-errors">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_warnings"
              c:identifier="ide_diagnostics_get_has_warnings"
              glib:get-property="has-warnings">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_errors"
              c:identifier="ide_diagnostics_get_n_errors"
              glib:get-property="n-errors">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_warnings"
              c:identifier="ide_diagnostics_get_n_warnings"
              glib:get-property="n-warnings">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="ide_diagnostics_merge">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take" c:identifier="ide_diagnostics_take">
        <source-position filename="src/libide/code/ide-diagnostics.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </instance-parameter>
          <parameter name="diagnostic" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-errors"
                transfer-ownership="none"
                getter="get_has_errors"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-warnings"
                transfer-ownership="none"
                getter="get_has_warnings"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-errors"
                transfer-ownership="none"
                getter="get_n_errors"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="n-warnings"
                transfer-ownership="none"
                getter="get_n_warnings"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="DiagnosticsClass"
            c:type="IdeDiagnosticsClass"
            glib:is-gtype-struct-for="Diagnostics">
      <source-position filename="src/libide/code/ide-diagnostics.h" line="58"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="DiagnosticsLineCallback"
              c:type="IdeDiagnosticsLineCallback">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-diagnostics.h"
           line="39">This function prototype is used to notify a caller of every line that has a
diagnostic, and the most severe #IdeDiagnosticSeverity for that line.</doc>
      <source-position filename="src/libide/code/ide-diagnostics.h" line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="line" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics.h"
               line="41">the line number, starting from 0</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="severity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics.h"
               line="42">the severity of the diagnostic</doc>
          <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics.h"
               line="43">user data provided with callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="DiagnosticsManager"
           c:symbol-prefix="diagnostics_manager"
           c:type="IdeDiagnosticsManager"
           parent="Object"
           final="1"
           glib:type-name="IdeDiagnosticsManager"
           glib:get-type="ide_diagnostics_manager_get_type"
           glib:type-struct="DiagnosticsManagerClass">
      <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                       line="32"/>
      <function name="from_context"
                c:identifier="ide_diagnostics_manager_from_context">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics-manager.c"
             line="1002">Gets the diagnostics manager for the context.</doc>
        <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics-manager.c"
               line="1008">an #IdeDiagnosticsManager</doc>
          <type name="DiagnosticsManager" c:type="IdeDiagnosticsManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics-manager.c"
                 line="1004">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_busy"
              c:identifier="ide_diagnostics_manager_get_busy"
              glib:get-property="busy">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics-manager.c"
             line="860">Gets if the diagnostics manager is currently executing a diagnosis.</doc>
        <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics-manager.c"
               line="865">%TRUE if the #IdeDiagnosticsManager is busy diagnosing.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticsManager" c:type="IdeDiagnosticsManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_diagnostics_for_file"
              c:identifier="ide_diagnostics_manager_get_diagnostics_for_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics-manager.c"
             line="892">This function collects all of the diagnostics that have been collected
for @file and returns them as a new #IdeDiagnostics to the caller.

The #IdeDiagnostics structure will contain zero items if there are
no diagnostics discovered. Therefore, this function will never return
a %NULL value.</doc>
        <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostics-manager.c"
               line="904">A new #IdeDiagnostics.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics-manager.c"
                 line="894">An #IdeDiagnosticsManager</doc>
            <type name="DiagnosticsManager" c:type="IdeDiagnosticsManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics-manager.c"
                 line="895">a #GFile to retrieve diagnostics for</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sequence_for_file"
              c:identifier="ide_diagnostics_manager_get_sequence_for_file">
        <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DiagnosticsManager" c:type="IdeDiagnosticsManager*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rediagnose"
              c:identifier="ide_diagnostics_manager_rediagnose">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics-manager.c"
             line="975">Requests that the diagnostics be reloaded for @buffer.

You may want to call this if you changed something that a buffer depends on,
and want to seamlessly update its diagnostics with that updated information.</doc>
        <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics-manager.c"
                 line="977">an #IdeDiagnosticsManager</doc>
            <type name="DiagnosticsManager" c:type="IdeDiagnosticsManager*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-diagnostics-manager.c"
                 line="978">an #IdeBuffer</doc>
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </method>
      <property name="busy"
                transfer-ownership="none"
                getter="get_busy"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostics-manager.c"
             line="593">This signal is emitted when the diagnostics have changed for any
file managed by the IdeDiagnosticsManager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DiagnosticsManagerClass"
            c:type="IdeDiagnosticsManagerClass"
            glib:is-gtype-struct-for="DiagnosticsManager">
      <source-position filename="src/libide/code/ide-diagnostics-manager.h"
                       line="32"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="DirectoryReaper"
           c:symbol-prefix="directory_reaper"
           c:type="IdeDirectoryReaper"
           parent="GObject.Object"
           glib:type-name="IdeDirectoryReaper"
           glib:get-type="ide_directory_reaper_get_type"
           glib:type-struct="DirectoryReaperClass">
      <source-position filename="src/libide/io/ide-directory-reaper.h"
                       line="28"/>
      <constructor name="new" c:identifier="ide_directory_reaper_new">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="31"/>
        <return-value transfer-ownership="full">
          <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
        </return-value>
      </constructor>
      <method name="add_directory"
              c:identifier="ide_directory_reaper_add_directory">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="min_age" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_file" c:identifier="ide_directory_reaper_add_file">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="min_age" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_glob" c:identifier="ide_directory_reaper_add_glob">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="glob" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="min_age" transfer-ownership="none">
            <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute"
              c:identifier="ide_directory_reaper_execute"
              throws="1">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="ide_directory_reaper_execute_async">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_directory_reaper_execute_finish"
              throws="1">
        <source-position filename="src/libide/io/ide-directory-reaper.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="remove-file" when="last">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-directory-reaper.c"
             line="139">The "remove-file" signal is emitted for each file that is removed by the
#IdeDirectoryReaper instance. This may be useful if you want to show the
user what was processed by the reaper.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-directory-reaper.c"
                 line="142">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DirectoryReaperClass"
            c:type="IdeDirectoryReaperClass"
            glib:is-gtype-struct-for="DirectoryReaper">
      <source-position filename="src/libide/io/ide-directory-reaper.h"
                       line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="DirectoryVcs"
           c:symbol-prefix="directory_vcs"
           c:type="IdeDirectoryVcs"
           parent="Object"
           final="1"
           glib:type-name="IdeDirectoryVcs"
           glib:get-type="ide_directory_vcs_get_type"
           glib:type-struct="DirectoryVcsClass">
      <source-position filename="src/libide/vcs/ide-directory-vcs.h"
                       line="32"/>
      <implements name="Vcs"/>
      <constructor name="new" c:identifier="ide_directory_vcs_new">
        <source-position filename="src/libide/vcs/ide-directory-vcs.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="DirectoryVcs" c:type="IdeDirectoryVcs*"/>
        </return-value>
        <parameters>
          <parameter name="workdir" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="DirectoryVcsClass"
            c:type="IdeDirectoryVcsClass"
            glib:is-gtype-struct-for="DirectoryVcs">
      <source-position filename="src/libide/vcs/ide-directory-vcs.h"
                       line="32"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Doap"
           c:symbol-prefix="doap"
           c:type="IdeDoap"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeDoap"
           glib:get-type="ide_doap_get_type"
           glib:type-struct="DoapClass">
      <source-position filename="src/libide/projects/ide-doap.h" line="37"/>
      <constructor name="new" c:identifier="ide_doap_new">
        <source-position filename="src/libide/projects/ide-doap.h" line="45"/>
        <return-value transfer-ownership="full">
          <type name="Doap" c:type="IdeDoap*"/>
        </return-value>
      </constructor>
      <function name="error_quark" c:identifier="ide_doap_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="get_bug_database"
              c:identifier="ide_doap_get_bug_database"
              glib:get-property="bug-database">
        <source-position filename="src/libide/projects/ide-doap.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category"
              c:identifier="ide_doap_get_category"
              glib:get-property="category">
        <source-position filename="src/libide/projects/ide-doap.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_doap_get_description"
              glib:get-property="description">
        <source-position filename="src/libide/projects/ide-doap.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_download_page"
              c:identifier="ide_doap_get_download_page"
              glib:get-property="download-page">
        <source-position filename="src/libide/projects/ide-doap.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homepage"
              c:identifier="ide_doap_get_homepage"
              glib:get-property="homepage">
        <source-position filename="src/libide/projects/ide-doap.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="ide_doap_get_languages"
              glib:get-property="languages">
        <source-position filename="src/libide/projects/ide-doap.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-doap.c"
               line="131">a #GStrv.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maintainers" c:identifier="ide_doap_get_maintainers">
        <source-position filename="src/libide/projects/ide-doap.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-doap.c"
               line="236">a #GList of #IdeDoapPerson.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="DoapPerson"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_doap_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/projects/ide-doap.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortdesc"
              c:identifier="ide_doap_get_shortdesc"
              glib:get-property="shortdesc">
        <source-position filename="src/libide/projects/ide-doap.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_data"
              c:identifier="ide_doap_load_from_data"
              throws="1">
        <source-position filename="src/libide/projects/ide-doap.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
          <parameter name="data" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="ide_doap_load_from_file"
              throws="1">
        <source-position filename="src/libide/projects/ide-doap.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bug-database"
                writable="1"
                transfer-ownership="none"
                getter="get_bug_database"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="category"
                writable="1"
                transfer-ownership="none"
                getter="get_category"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="download-page"
                writable="1"
                transfer-ownership="none"
                getter="get_download_page"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="homepage"
                writable="1"
                transfer-ownership="none"
                getter="get_homepage"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="languages"
                writable="1"
                transfer-ownership="none"
                getter="get_languages"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="shortdesc"
                writable="1"
                transfer-ownership="none"
                getter="get_shortdesc"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="DoapClass"
            c:type="IdeDoapClass"
            glib:is-gtype-struct-for="Doap">
      <source-position filename="src/libide/projects/ide-doap.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="DoapError" c:type="IdeDoapError">
      <source-position filename="src/libide/projects/ide-doap.h" line="42"/>
      <member name="doap_error_invalid_format"
              value="1"
              c:identifier="IDE_DOAP_ERROR_INVALID_FORMAT">
      </member>
    </enumeration>
    <class name="DoapPerson"
           c:symbol-prefix="doap_person"
           c:type="IdeDoapPerson"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeDoapPerson"
           glib:get-type="ide_doap_person_get_type"
           glib:type-struct="DoapPersonClass">
      <source-position filename="src/libide/projects/ide-doap-person.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_doap_person_new">
        <source-position filename="src/libide/projects/ide-doap-person.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="DoapPerson" c:type="IdeDoapPerson*"/>
        </return-value>
      </constructor>
      <method name="get_email"
              c:identifier="ide_doap_person_get_email"
              glib:get-property="email">
        <source-position filename="src/libide/projects/ide-doap-person.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_doap_person_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/projects/ide-doap-person.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_email"
              c:identifier="ide_doap_person_set_email"
              glib:set-property="email">
        <source-position filename="src/libide/projects/ide-doap-person.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
          <parameter name="email" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_doap_person_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/projects/ide-doap-person.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DoapPerson" c:type="IdeDoapPerson*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="email"
                writable="1"
                transfer-ownership="none"
                setter="set_email"
                getter="get_email"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="DoapPersonClass"
            c:type="IdeDoapPersonClass"
            glib:is-gtype-struct-for="DoapPerson">
      <source-position filename="src/libide/projects/ide-doap-person.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="ENABLE_TRACE" value="0" c:type="IDE_ENABLE_TRACE">
      <source-position filename="src/libide/core/ide-debug.h" line="23"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="IDE_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-version.h" line="79"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <class name="EditorPage"
           c:symbol-prefix="editor_page"
           c:type="IdeEditorPage"
           parent="Page"
           glib:type-name="IdeEditorPage"
           glib:get-type="ide_editor_page_get_type"
           glib:type-struct="EditorPageClass">
      <source-position filename="src/libide/editor/ide-editor-page.h"
                       line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_editor_page_new">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="addin_find_by_module_name"
              c:identifier="ide_editor_page_addin_find_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page-addin.c"
             line="107">This function will locate the #IdeEditorPageAddin that was registered
by the addin named @module_name (which should match the module_name
provided in the .plugin file).

If no module was found or that module does not implement the
#IdeEditorPageAddinInterface, then %NULL is returned.</doc>
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="69"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page-addin.c"
               line="119">An #IdeEditorPageAddin or %NULL</doc>
          <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page-addin.c"
                 line="109">an #IdeEditorPage</doc>
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page-addin.c"
                 line="110">the module name which provides the addin</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="discard_changes_async"
              c:identifier="ide_editor_page_discard_changes_async">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="discard_changes_finish"
              c:identifier="ide_editor_page_discard_changes_finish"
              throws="1">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="ide_editor_page_get_buffer"
              glib:get-property="buffer">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="997">Gets the #IdeBuffer for the page.</doc>
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page.c"
               line="1003">an #IdeBuffer</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page.c"
                 line="999">a #IdeEditorPage</doc>
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_editor_page_get_file">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="1013">Gets the file for the document.

This is a convenience function around ide_buffer_get_file().</doc>
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page.c"
               line="1021">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page.c"
                 line="1015">a #IdeEditorPage</doc>
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gutter"
              c:identifier="ide_editor_page_get_gutter"
              glib:get-property="gutter">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="1277">Gets the #IdeGutter displayed in the editor page.</doc>
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page.c"
               line="1283">an #IdeGutter or %NULL</doc>
          <type name="Gutter" c:type="IdeGutter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page.c"
                 line="1279">a #IdeEditorPage</doc>
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view"
              c:identifier="ide_editor_page_get_view"
              glib:get-property="view">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="981">Gets the #IdeSourceView for the page.</doc>
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page.c"
               line="987">an #IdeSourceView</doc>
          <type name="SourceView" c:type="IdeSourceView*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page.c"
                 line="983">a #IdeEditorPage</doc>
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="ide_editor_page_save_async">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="ide_editor_page_save_finish"
              throws="1">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_insert"
              c:identifier="ide_editor_page_scroll_to_insert">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_visual_position"
              c:identifier="ide_editor_page_scroll_to_visual_position">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gutter"
              c:identifier="ide_editor_page_set_gutter"
              glib:set-property="gutter">
        <source-position filename="src/libide/editor/ide-editor-page.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </instance-parameter>
          <parameter name="gutter" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_buffer">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="881">The #IdeBuffer that is displayed within the #IdeSourceView.</doc>
        <type name="Buffer"/>
      </property>
      <property name="gutter"
                writable="1"
                transfer-ownership="none"
                setter="set_gutter"
                getter="get_gutter">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="893">The "gutter" property contains an #IdeGutter or %NULL, which is a
specialized renderer for the sourceview which can bring together a number
of types of content which needs to be displayed, in a single renderer.</doc>
        <type name="Gutter"/>
      </property>
      <property name="view" transfer-ownership="none" getter="get_view">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-page.c"
             line="907">The #IdeSourceView contained within the page.</doc>
        <type name="SourceView"/>
      </property>
    </class>
    <interface name="EditorPageAddin"
               c:symbol-prefix="editor_page_addin"
               c:type="IdeEditorPageAddin"
               glib:type-name="IdeEditorPageAddin"
               glib:get-type="ide_editor_page_addin_get_type"
               glib:type-struct="EditorPageAddinInterface">
      <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                       line="52"/>
      <virtual-method name="frame_set" invoker="frame_set">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="Frame" c:type="IdeFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="language_changed" invoker="language_changed">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ref_action_group" invoker="ref_action_group">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="51"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page-addin.c"
               line="94">a #GActionGroup or %NULL</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page-addin.c"
                 line="92">a #IdeEditorPageAddin</doc>
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="frame_set" c:identifier="ide_editor_page_addin_frame_set">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <type name="Frame" c:type="IdeFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="language_changed"
              c:identifier="ide_editor_page_addin_language_changed">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_editor_page_addin_load">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_action_group"
              c:identifier="ide_editor_page_addin_ref_action_group">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="67"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-page-addin.c"
               line="94">a #GActionGroup or %NULL</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page-addin.c"
                 line="92">a #IdeEditorPageAddin</doc>
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_editor_page_addin_unload">
        <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="EditorPage" c:type="IdeEditorPage*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="EditorPageAddinInterface"
            c:type="IdeEditorPageAddinInterface"
            glib:is-gtype-struct-for="EditorPageAddin">
      <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                       line="52"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
            </parameter>
            <parameter name="page" transfer-ownership="none">
              <type name="EditorPage" c:type="IdeEditorPage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
            </parameter>
            <parameter name="page" transfer-ownership="none">
              <type name="EditorPage" c:type="IdeEditorPage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="language_changed">
        <callback name="language_changed">
          <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="frame_set">
        <callback name="frame_set">
          <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <type name="Frame" c:type="IdeFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ref_action_group">
        <callback name="ref_action_group">
          <source-position filename="src/libide/editor/ide-editor-page-addin.h"
                           line="51"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-page-addin.c"
                 line="94">a #GActionGroup or %NULL</doc>
            <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/editor/ide-editor-page-addin.c"
                   line="92">a #IdeEditorPageAddin</doc>
              <type name="EditorPageAddin" c:type="IdeEditorPageAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="EditorPageClass"
            c:type="IdeEditorPageClass"
            glib:is-gtype-struct-for="EditorPage">
      <source-position filename="src/libide/editor/ide-editor-page.h"
                       line="37"/>
      <field name="parent_class">
        <type name="PageClass" c:type="IdePageClass"/>
      </field>
    </record>
    <class name="EditorWorkspace"
           c:symbol-prefix="editor_workspace"
           c:type="IdeEditorWorkspace"
           parent="Workspace"
           final="1"
           glib:type-name="IdeEditorWorkspace"
           glib:get-type="ide_editor_workspace_get_type"
           glib:type-struct="EditorWorkspaceClass">
      <source-position filename="src/libide/editor/ide-editor-workspace.h"
                       line="34"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="ide_editor_workspace_new">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-workspace.c"
             line="328">Creates a new #IdeEditorWorkspace</doc>
        <source-position filename="src/libide/editor/ide-editor-workspace.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-workspace.c"
               line="334">an #IdeEditorWorkspace</doc>
          <type name="EditorWorkspace" c:type="IdeEditorWorkspace*"/>
        </return-value>
        <parameters>
          <parameter name="application" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/editor/ide-editor-workspace.c"
                 line="330">an #IdeApplication such as %IDE_APPLICATION_DEFAULT</doc>
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="EditorWorkspaceClass"
            c:type="IdeEditorWorkspaceClass"
            glib:is-gtype-struct-for="EditorWorkspace">
      <source-position filename="src/libide/editor/ide-editor-workspace.h"
                       line="34"/>
      <field name="parent_class">
        <type name="WorkspaceClass" c:type="IdeWorkspaceClass"/>
      </field>
    </record>
    <class name="EntryPopover"
           c:symbol-prefix="entry_popover"
           c:type="IdeEntryPopover"
           parent="Gtk.Popover"
           glib:type-name="IdeEntryPopover"
           glib:get-type="ide_entry_popover_get_type"
           glib:type-struct="EntryPopoverClass">
      <source-position filename="src/libide/gtk/ide-entry-popover.h"
                       line="71"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="ide_entry_popover_new">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="activate">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="insert_text">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_button_text"
              c:identifier="ide_entry_popover_get_button_text"
              glib:get-property="button-text">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="ide_entry_popover_get_message"
              glib:get-property="message">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ready"
              c:identifier="ide_entry_popover_get_ready"
              glib:get-property="ready">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="ide_entry_popover_get_text"
              glib:get-property="text">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_entry_popover_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_all" c:identifier="ide_entry_popover_select_all">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_button_text"
              c:identifier="ide_entry_popover_set_button_text"
              glib:set-property="button-text">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="button_text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_message"
              c:identifier="ide_entry_popover_set_message"
              glib:set-property="message">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ready"
              c:identifier="ide_entry_popover_set_ready"
              glib:set-property="ready">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="ready" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="ide_entry_popover_set_text"
              glib:set-property="text">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_entry_popover_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/gtk/ide-entry-popover.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EntryPopover" c:type="IdeEntryPopover*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="button-text"
                writable="1"
                transfer-ownership="none"
                setter="set_button_text"
                getter="get_button_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="message"
                writable="1"
                transfer-ownership="none"
                setter="set_message"
                getter="get_message"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ready"
                writable="1"
                transfer-ownership="none"
                setter="set_ready"
                getter="get_ready"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Popover" c:type="GtkPopover"/>
      </field>
      <glib:signal name="activate" when="last">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-entry-popover.h"
             line="36">This signal is emitted when the popover's forward button is activated.
Connect to this signal to perform your forward progress.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-entry-popover.h"
                 line="39">The text at the time of activation.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-entry-popover.h"
             line="64">This signal is emitted when the entry text changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="insert-text" when="last">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-entry-popover.h"
             line="47">Use this signal to determine if text should be allowed to be inserted
into the text buffer. Return GDK_EVENT_STOP to prevent the text from
being inserted.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-entry-popover.h"
                 line="50">the position in UTF-8 characters.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="chars" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-entry-popover.h"
                 line="51">the NULL terminated UTF-8 text to insert.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="n_chars" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-entry-popover.h"
                 line="52">the number of UTF-8 characters in chars.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="EntryPopoverClass"
            c:type="IdeEntryPopoverClass"
            glib:is-gtype-struct-for="EntryPopover">
      <source-position filename="src/libide/gtk/ide-entry-popover.h"
                       line="71"/>
      <field name="parent">
        <type name="Gtk.PopoverClass" c:type="GtkPopoverClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="src/libide/gtk/ide-entry-popover.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EntryPopover" c:type="IdeEntryPopover*"/>
            </parameter>
            <parameter name="text" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="insert_text">
        <callback name="insert_text">
          <source-position filename="src/libide/gtk/ide-entry-popover.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EntryPopover" c:type="IdeEntryPopover*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="chars" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="n_chars" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="src/libide/gtk/ide-entry-popover.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="EntryPopover" c:type="IdeEntryPopover*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="EnumObject"
           c:symbol-prefix="enum_object"
           c:type="IdeEnumObject"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeEnumObject"
           glib:get-type="ide_enum_object_get_type"
           glib:type-struct="EnumObjectClass">
      <source-position filename="src/libide/gtk/ide-enum-object.h" line="30"/>
      <constructor name="new" c:identifier="ide_enum_object_new">
        <source-position filename="src/libide/gtk/ide-enum-object.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <type name="EnumObject" c:type="IdeEnumObject*"/>
        </return-value>
        <parameters>
          <parameter name="nick" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_description"
              c:identifier="ide_enum_object_get_description"
              glib:get-property="description">
        <source-position filename="src/libide/gtk/ide-enum-object.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumObject" c:type="IdeEnumObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick"
              c:identifier="ide_enum_object_get_nick"
              glib:get-property="nick">
        <source-position filename="src/libide/gtk/ide-enum-object.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumObject" c:type="IdeEnumObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_enum_object_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/gtk/ide-enum-object.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumObject" c:type="IdeEnumObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nick"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_nick"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="EnumObjectClass"
            c:type="IdeEnumObjectClass"
            glib:is-gtype-struct-for="EnumObject">
      <source-position filename="src/libide/gtk/ide-enum-object.h" line="30"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Environment"
           c:symbol-prefix="environment"
           c:type="IdeEnvironment"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeEnvironment"
           glib:get-type="ide_environment_get_type"
           glib:type-struct="EnvironmentClass">
      <source-position filename="src/libide/threading/ide-environment.h"
                       line="37"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_environment_new">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
      </constructor>
      <method name="append" c:identifier="ide_environment_append">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="ide_environment_copy">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-environment.c"
             line="325">Copies the contents of #IdeEnvironment into a newly allocated #IdeEnvironment.</doc>
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-environment.c"
               line="331">An #IdeEnvironment.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-environment.c"
                 line="327">An #IdeEnvironment</doc>
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy_into" c:identifier="ide_environment_copy_into">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
          <parameter name="replace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_environ" c:identifier="ide_environment_get_environ">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-environment.c"
             line="211">Gets the environment as a set of key=value pairs, suitable for use
in various GLib process functions.</doc>
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-environment.c"
               line="218">A newly allocated string array.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-environment.c"
                 line="213">An #IdeEnvironment</doc>
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_environment_getenv">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_environment_remove">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_environ" c:identifier="ide_environment_set_environ">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="env" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_environment_setenv">
        <source-position filename="src/libide/threading/ide-environment.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="EnvironmentClass"
            c:type="IdeEnvironmentClass"
            glib:is-gtype-struct-for="Environment">
      <source-position filename="src/libide/threading/ide-environment.h"
                       line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="EnvironmentEditor"
           c:symbol-prefix="environment_editor"
           c:type="IdeEnvironmentEditor"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeEnvironmentEditor"
           glib:get-type="ide_environment_editor_get_type"
           glib:type-struct="EnvironmentEditorClass">
      <source-position filename="src/libide/gui/ide-environment-editor.h"
                       line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_environment_editor_new">
        <source-position filename="src/libide/gui/ide-environment-editor.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_environment"
              c:identifier="ide_environment_editor_get_environment"
              glib:get-property="environment">
        <source-position filename="src/libide/gui/ide-environment-editor.h"
                         line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-environment-editor.c"
               line="325">An #IdeEnvironment or %NULL.</doc>
          <type name="Environment" c:type="IdeEnvironment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentEditor" c:type="IdeEnvironmentEditor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_environment"
              c:identifier="ide_environment_editor_set_environment"
              glib:set-property="environment">
        <source-position filename="src/libide/gui/ide-environment-editor.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentEditor" c:type="IdeEnvironmentEditor*"/>
          </instance-parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
        </parameters>
      </method>
      <property name="environment"
                writable="1"
                transfer-ownership="none"
                setter="set_environment"
                getter="get_environment">
        <type name="Environment"/>
      </property>
    </class>
    <record name="EnvironmentEditorClass"
            c:type="IdeEnvironmentEditorClass"
            glib:is-gtype-struct-for="EnvironmentEditor">
      <source-position filename="src/libide/gui/ide-environment-editor.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="EnvironmentVariable"
           c:symbol-prefix="environment_variable"
           c:type="IdeEnvironmentVariable"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeEnvironmentVariable"
           glib:get-type="ide_environment_variable_get_type"
           glib:type-struct="EnvironmentVariableClass">
      <source-position filename="src/libide/threading/ide-environment-variable.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_environment_variable_new">
        <source-position filename="src/libide/threading/ide-environment-variable.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
        </return-value>
        <parameters>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_key"
              c:identifier="ide_environment_variable_get_key"
              glib:get-property="key">
        <source-position filename="src/libide/threading/ide-environment-variable.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_environment_variable_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/threading/ide-environment-variable.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key"
              c:identifier="ide_environment_variable_set_key"
              glib:set-property="key">
        <source-position filename="src/libide/threading/ide-environment-variable.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_environment_variable_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/threading/ide-environment-variable.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnvironmentVariable" c:type="IdeEnvironmentVariable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="key"
                writable="1"
                transfer-ownership="none"
                setter="set_key"
                getter="get_key"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="EnvironmentVariableClass"
            c:type="IdeEnvironmentVariableClass"
            glib:is-gtype-struct-for="EnvironmentVariable">
      <source-position filename="src/libide/threading/ide-environment-variable.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ExtensionAdapter"
           c:symbol-prefix="extension_adapter"
           c:type="IdeExtensionAdapter"
           parent="Object"
           final="1"
           glib:type-name="IdeExtensionAdapter"
           glib:get-type="ide_extension_adapter_get_type"
           glib:type-struct="ExtensionAdapterClass">
      <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                       line="36"/>
      <constructor name="new" c:identifier="ide_extension_adapter_new">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-adapter.c"
             line="568">Creates a new #IdeExtensionAdapter.

The #IdeExtensionAdapter object can be used to wrap an extension that might
need to change at runtime based on various changing parameters. For example,
it can watch the loading and unloading of plugins and reload the
#IdeExtensionAdapter:extension property.

Additionally, it can match a specific plugin based on the @value provided.

This uses #IdeExtensionPoint to create the extension implementation, which
means that extension points that are disabled (such as from the plugins
GSettings) will be ignored.  As such, if one plugin that is higher priority
than another, but is disabled, will be ignored and the secondary plugin will
be used.</doc>
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-extension-adapter.c"
               line="591">A newly created #IdeExtensionAdapter.</doc>
          <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
        </return-value>
        <parameters>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-adapter.c"
                 line="570">An #IdeObject or %NULL</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="engine"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-adapter.c"
                 line="571">a #PeasEngine or %NULL</doc>
            <type name="Peas.Engine" c:type="PeasEngine*"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-adapter.c"
                 line="572">The #GType of the interface to be implemented.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-adapter.c"
                 line="573">The key for matching extensions from plugin info external data.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-adapter.c"
                 line="574">The value to use when matching keys.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_engine"
              c:identifier="ide_extension_adapter_get_engine"
              glib:get-property="engine">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-adapter.c"
             line="536">Gets the #IdeExtensionAdapter:engine property.</doc>
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-extension-adapter.c"
               line="541">a #PeasEngine.</doc>
          <type name="Peas.Engine" c:type="PeasEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension"
              c:identifier="ide_extension_adapter_get_extension"
              glib:get-property="extension">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-adapter.c"
             line="552">Gets the extension object managed by the adapter.</doc>
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-extension-adapter.c"
               line="557">a #GObject or %NULL.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface_type"
              c:identifier="ide_extension_adapter_get_interface_type"
              glib:get-property="interface-type">
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key"
              c:identifier="ide_extension_adapter_get_key"
              glib:get-property="key">
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_extension_adapter_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key"
              c:identifier="ide_extension_adapter_set_key"
              glib:set-property="key">
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_extension_adapter_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionAdapter" c:type="IdeExtensionAdapter*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="engine"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_engine">
        <type name="Peas.Engine"/>
      </property>
      <property name="extension"
                transfer-ownership="none"
                getter="get_extension">
        <type name="GObject.Object"/>
      </property>
      <property name="interface-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_interface_type">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="key"
                writable="1"
                transfer-ownership="none"
                setter="set_key"
                getter="get_key"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ExtensionAdapterClass"
            c:type="IdeExtensionAdapterClass"
            glib:is-gtype-struct-for="ExtensionAdapter">
      <source-position filename="src/libide/plugins/ide-extension-adapter.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="ExtensionSetAdapter"
           c:symbol-prefix="extension_set_adapter"
           c:type="IdeExtensionSetAdapter"
           parent="Object"
           final="1"
           glib:type-name="IdeExtensionSetAdapter"
           glib:get-type="ide_extension_set_adapter_get_type"
           glib:type-struct="ExtensionSetAdapterClass">
      <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                       line="36"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_extension_set_adapter_new">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="engine" transfer-ownership="none">
            <type name="Peas.Engine" c:type="PeasEngine*"/>
          </parameter>
          <parameter name="interface_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="foreach" c:identifier="ide_extension_set_adapter_foreach">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-set-adapter.c"
             line="693">Calls @foreach_func for every extension loaded by the extension set.</doc>
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="695">an #IdeExtensionSetAdapter</doc>
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="696">A callback</doc>
            <type name="ExtensionSetAdapterForeachFunc"
                  c:type="IdeExtensionSetAdapterForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="697">user data for @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_by_priority"
              c:identifier="ide_extension_set_adapter_foreach_by_priority">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-set-adapter.c"
             line="753">Calls @foreach_func for every extension loaded by the extension set.</doc>
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="755">an #IdeExtensionSetAdapter</doc>
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="foreach_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="756">A callback</doc>
            <type name="ExtensionSetAdapterForeachFunc"
                  c:type="IdeExtensionSetAdapterForeachFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="757">user data for @foreach_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_engine"
              c:identifier="ide_extension_set_adapter_get_engine"
              glib:get-property="engine">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-set-adapter.c"
             line="621">Gets the #IdeExtensionSetAdapter:engine property.</doc>
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-extension-set-adapter.c"
               line="626">a #PeasEngine.</doc>
          <type name="Peas.Engine" c:type="PeasEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension"
              c:identifier="ide_extension_set_adapter_get_extension">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-extension-set-adapter.c"
             line="856">Locates the extension owned by @plugin_info if such extension exists.</doc>
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-extension-set-adapter.c"
               line="863">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="858">a #IdeExtensionSetAdapter</doc>
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="plugin_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-extension-set-adapter.c"
                 line="859">a #PeasPluginInfo</doc>
            <type name="Peas.PluginInfo" c:type="PeasPluginInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interface_type"
              c:identifier="ide_extension_set_adapter_get_interface_type"
              glib:get-property="interface-type">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key"
              c:identifier="ide_extension_set_adapter_get_key"
              glib:get-property="key">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_extensions"
              c:identifier="ide_extension_set_adapter_get_n_extensions">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_extension_set_adapter_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_key"
              c:identifier="ide_extension_set_adapter_set_key"
              glib:set-property="key">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_extension_set_adapter_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="engine"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_engine">
        <type name="Peas.Engine"/>
      </property>
      <property name="interface-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_interface_type">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="key"
                writable="1"
                transfer-ownership="none"
                setter="set_key"
                getter="get_key"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="extension-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Peas.PluginInfo"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="extension-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Peas.PluginInfo"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="extensions-loaded" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="ExtensionSetAdapterClass"
            c:type="IdeExtensionSetAdapterClass"
            glib:is-gtype-struct-for="ExtensionSetAdapter">
      <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <callback name="ExtensionSetAdapterForeachFunc"
              c:type="IdeExtensionSetAdapterForeachFunc">
      <source-position filename="src/libide/plugins/ide-extension-set-adapter.h"
                       line="38"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="set" transfer-ownership="none">
          <type name="ExtensionSetAdapter" c:type="IdeExtensionSetAdapter*"/>
        </parameter>
        <parameter name="plugin_info" transfer-ownership="none">
          <type name="Peas.PluginInfo" c:type="PeasPluginInfo*"/>
        </parameter>
        <parameter name="extension" transfer-ownership="none">
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="FILE_SETTINGS_EXTENSION_POINT"
              value="org.gnome.libide.extensions.file-settings"
              c:type="IDE_FILE_SETTINGS_EXTENSION_POINT">
      <source-position filename="src/libide/code/ide-file-settings.h"
                       line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="FILE_SETTINGS_PROPERTY"
                    c:identifier="IDE_FILE_SETTINGS_PROPERTY"
                    introspectable="0">
      <source-position filename="src/libide/code/ide-file-settings.h"
                       line="61"/>
      <parameters>
        <parameter name="_1">
        </parameter>
        <parameter name="name">
        </parameter>
        <parameter name="_2">
        </parameter>
        <parameter name="ret_type">
        </parameter>
        <parameter name="_3">
        </parameter>
        <parameter name="_4">
        </parameter>
        <parameter name="_5">
        </parameter>
        <parameter name="_6">
        </parameter>
      </parameters>
    </function-macro>
    <class name="FallbackBuildSystem"
           c:symbol-prefix="fallback_build_system"
           c:type="IdeFallbackBuildSystem"
           parent="Object"
           final="1"
           glib:type-name="IdeFallbackBuildSystem"
           glib:get-type="ide_fallback_build_system_get_type"
           glib:type-struct="FallbackBuildSystemClass">
      <source-position filename="src/libide/foundry/ide-fallback-build-system.h"
                       line="30"/>
      <implements name="BuildSystem"/>
      <function name="new" c:identifier="ide_fallback_build_system_new">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-fallback-build-system.c"
             line="154">Creates a new #IdeFallbackBuildSystem.</doc>
        <source-position filename="src/libide/foundry/ide-fallback-build-system.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-fallback-build-system.c"
               line="159">an #IdeBuildSystem</doc>
          <type name="BuildSystem" c:type="IdeBuildSystem*"/>
        </return-value>
      </function>
      <property name="project-file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-fallback-build-system.c"
             line="107">The "project-file" property is the primary file representing the
projects build system.</doc>
        <type name="Gio.File"/>
      </property>
    </class>
    <record name="FallbackBuildSystemClass"
            c:type="IdeFallbackBuildSystemClass"
            glib:is-gtype-struct-for="FallbackBuildSystem">
      <source-position filename="src/libide/foundry/ide-fallback-build-system.h"
                       line="30"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="File" c:type="IdeFile" disguised="1" opaque="1">
      <source-position filename="src/libide/code/ide-code-types.h" line="42"/>
      <function name="manager_show"
                c:identifier="ide_file_manager_show"
                throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-file-manager.c"
             line="62">Requests that @file is displayed within the default desktop file manager.
Typically this means browsing to the parent directory and then selecting
@file within that directory.</doc>
        <source-position filename="src/libide/gtk/ide-file-manager.h"
                         line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-file-manager.c"
               line="71">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-file-manager.c"
                 line="64">a #GFile to load within the desktop file manager</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="FileChooserEntry"
           c:symbol-prefix="file_chooser_entry"
           c:type="IdeFileChooserEntry"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeFileChooserEntry"
           glib:get-type="ide_file_chooser_entry_get_type"
           glib:type-struct="FileChooserEntryClass">
      <source-position filename="src/libide/gtk/ide-file-chooser-entry.h"
                       line="34"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_file_chooser_entry_new">
        <source-position filename="src/libide/gtk/ide-file-chooser-entry.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="Gtk.FileChooserAction" c:type="GtkFileChooserAction"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_entry" c:identifier="ide_file_chooser_entry_get_entry">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-file-chooser-entry.c"
             line="544">Gets the entry used by the #GtkEntry.</doc>
        <source-position filename="src/libide/gtk/ide-file-chooser-entry.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-file-chooser-entry.c"
               line="550">a #GtkEntry</doc>
          <type name="Gtk.Entry" c:type="GtkEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-file-chooser-entry.c"
                 line="546">a #IdeFileChooserEntry</doc>
            <type name="FileChooserEntry" c:type="IdeFileChooserEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_file_chooser_entry_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-file-chooser-entry.c"
             line="496">Returns the currently selected file or %NULL if there is no selection.</doc>
        <source-position filename="src/libide/gtk/ide-file-chooser-entry.h"
                         line="40"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-file-chooser-entry.c"
               line="501">A #GFile or %NULL.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileChooserEntry" c:type="IdeFileChooserEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_file"
              c:identifier="ide_file_chooser_entry_set_file"
              glib:set-property="file">
        <source-position filename="src/libide/gtk/ide-file-chooser-entry.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileChooserEntry" c:type="IdeFileChooserEntry*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="action"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_FILE_CHOOSER_ACTION_OPEN">
        <type name="Gtk.FileChooserAction"/>
      </property>
      <property name="create-folders"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="do-overwrite-confirmation"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file"
                writable="1"
                transfer-ownership="none"
                setter="set_file"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <property name="filter" writable="1" transfer-ownership="none">
        <type name="Gtk.FileFilter"/>
      </property>
      <property name="local-only"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="max-width-chars"
                writable="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="show-hidden"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="FileChooserEntryClass"
            c:type="IdeFileChooserEntryClass"
            glib:is-gtype-struct-for="FileChooserEntry">
      <source-position filename="src/libide/gtk/ide-file-chooser-entry.h"
                       line="34"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="FileSearchPreview"
           c:symbol-prefix="file_search_preview"
           c:type="IdeFileSearchPreview"
           parent="SearchPreview"
           final="1"
           glib:type-name="IdeFileSearchPreview"
           glib:get-type="ide_file_search_preview_get_type"
           glib:type-struct="FileSearchPreviewClass">
      <source-position filename="src/libide/editor/ide-file-search-preview.h"
                       line="33"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_file_search_preview_new">
        <source-position filename="src/libide/editor/ide-file-search-preview.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="SearchPreview" c:type="IdeSearchPreview*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="scroll_to"
              c:identifier="ide_file_search_preview_scroll_to">
        <source-position filename="src/libide/editor/ide-file-search-preview.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileSearchPreview" c:type="IdeFileSearchPreview*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
    </class>
    <record name="FileSearchPreviewClass"
            c:type="IdeFileSearchPreviewClass"
            glib:is-gtype-struct-for="FileSearchPreview">
      <source-position filename="src/libide/editor/ide-file-search-preview.h"
                       line="33"/>
      <field name="parent_class">
        <type name="SearchPreviewClass" c:type="IdeSearchPreviewClass"/>
      </field>
    </record>
    <class name="FileSettings"
           c:symbol-prefix="file_settings"
           c:type="IdeFileSettings"
           parent="Object"
           glib:type-name="IdeFileSettings"
           glib:get-type="ide_file_settings_get_type"
           glib:type-struct="FileSettingsClass">
      <source-position filename="src/libide/code/ide-file-settings.h"
                       line="48"/>
      <constructor name="new" c:identifier="ide_file_settings_new">
        <source-position filename="src/libide/code/ide-file-settings.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <type name="FileSettings" c:type="IdeFileSettings*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_file"
              c:identifier="ide_file_settings_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-file-settings.c"
             line="134">Retrieves the underlying file that @self refers to.

This may be used by #IdeFileSettings implementations to discover additional
information about the settings. For example, a modeline parser might load
some portion of the file looking for modelines. An editorconfig
implementation might look for ".editorconfig" files.</doc>
        <source-position filename="src/libide/code/ide-file-settings.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-file-settings.c"
               line="145">An #IdeFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-file-settings.c"
                 line="136">An #IdeFileSettings.</doc>
            <type name="FileSettings" c:type="IdeFileSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="ide_file_settings_get_language"
              glib:get-property="language">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-file-settings.c"
             line="170">If the language for file settings is known up-front, this will indicate
the language identifier known to GtkSourceView such as "c" or "sh".</doc>
        <source-position filename="src/libide/code/ide-file-settings.h"
                         line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-file-settings.c"
               line="177">a string containing the language id or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-file-settings.c"
                 line="172">a #IdeFileSettings</doc>
            <type name="FileSettings" c:type="IdeFileSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_settled"
              c:identifier="ide_file_settings_get_settled"
              glib:get-property="settled">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-file-settings.c"
             line="200">Gets the #IdeFileSettings:settled property.

This property is %TRUE when all of the children file settings have completed loading.

Some file setting implementations require that various I/O be performed on disk in
the background. This property will change to %TRUE when all of the settings have
been loaded.

Normally, this is not a problem, since the editor will respond to changes and update them
accordingly. However, if you are writing a tool that prints the file settings
(such as ide-list-file-settings), you probably want to wait until the values have
settled.</doc>
        <source-position filename="src/libide/code/ide-file-settings.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-file-settings.c"
               line="217">%TRUE if all the settings have loaded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-file-settings.c"
                 line="202">An #IdeFileSettings.</doc>
            <type name="FileSettings" c:type="IdeFileSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="auto-indent"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="auto-indent-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="encoding"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="encoding-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <property name="indent-style"
                writable="1"
                transfer-ownership="none"
                default-value="IDE_INDENT_STYLE_TABS">
        <type name="IndentStyle"/>
      </property>
      <property name="indent-style-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="indent-width"
                writable="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="indent-width-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="insert-matching-brace"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="insert-matching-brace-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="insert-trailing-newline"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="insert-trailing-newline-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="language"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_language"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="newline-type"
                writable="1"
                transfer-ownership="none"
                default-value="GTK_SOURCE_NEWLINE_TYPE_LF">
        <type name="GtkSource.NewlineType"/>
      </property>
      <property name="newline-type-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="overwrite-braces"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="overwrite-braces-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="right-margin-position"
                writable="1"
                transfer-ownership="none"
                default-value="80">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="right-margin-position-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="settled"
                writable="1"
                transfer-ownership="none"
                getter="get_settled"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-right-margin"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-right-margin-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="spaces-style"
                writable="1"
                transfer-ownership="none"
                default-value="IDE_SPACES_STYLE_IGNORE">
        <type name="SpacesStyle"/>
      </property>
      <property name="spaces-style-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tab-width"
                writable="1"
                transfer-ownership="none"
                default-value="8">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="tab-width-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="trim-trailing-whitespace"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="trim-trailing-whitespace-set"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="FileSettingsClass"
            c:type="IdeFileSettingsClass"
            glib:is-gtype-struct-for="FileSettings">
      <source-position filename="src/libide/code/ide-file-settings.h"
                       line="48"/>
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="FileTransfer"
           c:symbol-prefix="file_transfer"
           c:type="IdeFileTransfer"
           parent="GObject.Object"
           glib:type-name="IdeFileTransfer"
           glib:get-type="ide_file_transfer_get_type"
           glib:type-struct="FileTransferClass">
      <source-position filename="src/libide/io/ide-file-transfer.h" line="37"/>
      <constructor name="new" c:identifier="ide_file_transfer_new">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="59"/>
        <return-value transfer-ownership="full">
          <type name="FileTransfer" c:type="IdeFileTransfer*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="ide_file_transfer_add">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
          <parameter name="src" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute"
              c:identifier="ide_file_transfer_execute"
              throws="1">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="ide_file_transfer_execute_async">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_file_transfer_execute_finish"
              throws="1">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_flags" c:identifier="ide_file_transfer_get_flags">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="FileTransferFlags" c:type="IdeFileTransferFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_file_transfer_get_progress"
              glib:get-property="progress">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_flags" c:identifier="ide_file_transfer_set_flags">
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="FileTransferFlags" c:type="IdeFileTransferFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="stat" c:identifier="ide_file_transfer_stat">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-file-transfer.c"
             line="775">Gets statistics about the transfer progress.</doc>
        <source-position filename="src/libide/io/ide-file-transfer.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-file-transfer.c"
                 line="777">a #IdeFileTransfer</doc>
            <type name="FileTransfer" c:type="IdeFileTransfer*"/>
          </instance-parameter>
          <parameter name="stat_buf"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-file-transfer.c"
                 line="778">a #IdeFileTransferStat</doc>
            <type name="FileTransferStat" c:type="IdeFileTransferStat*"/>
          </parameter>
        </parameters>
      </method>
      <property name="flags"
                introspectable="0"
                writable="1"
                transfer-ownership="none"
                default-value="IDE_FILE_TRANSFER_FLAGS_NONE">
        <type/>
      </property>
      <property name="progress"
                transfer-ownership="none"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="FileTransferClass"
            c:type="IdeFileTransferClass"
            glib:is-gtype-struct-for="FileTransfer">
      <source-position filename="src/libide/io/ide-file-transfer.h" line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="FileTransferFlags" c:type="IdeFileTransferFlags">
      <source-position filename="src/libide/io/ide-file-transfer.h" line="43"/>
      <member name="none"
              value="0"
              c:identifier="IDE_FILE_TRANSFER_FLAGS_NONE">
      </member>
      <member name="move"
              value="1"
              c:identifier="IDE_FILE_TRANSFER_FLAGS_MOVE">
      </member>
    </bitfield>
    <record name="FileTransferStat" c:type="IdeFileTransferStat">
      <source-position filename="src/libide/io/ide-file-transfer.h" line="56"/>
      <field name="n_files_total" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_files" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_dirs_total" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_dirs" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_bytes_total" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="n_bytes" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="10">
          <type name="gint64" c:type="gint64"/>
        </array>
      </field>
    </record>
    <callback name="FileWalkCallback" c:type="IdeFileWalkCallback">
      <source-position filename="src/libide/io/ide-gfile.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.h"
               line="31">a #GFile of the directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="file_infos" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.h"
               line="32">array of #GFileInfo children
  of @directory</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Gio.FileInfo"/>
          </array>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.h"
               line="34">user data for callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="Formatter"
               c:symbol-prefix="formatter"
               c:type="IdeFormatter"
               glib:type-name="IdeFormatter"
               glib:get-type="ide_formatter_get_type"
               glib:type-struct="FormatterInterface">
      <source-position filename="src/libide/code/ide-formatter.h" line="64"/>
      <virtual-method name="format_async" invoker="format_async">
        <source-position filename="src/libide/code/ide-formatter.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="format_finish" invoker="format_finish" throws="1">
        <source-position filename="src/libide/code/ide-formatter.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="format_range_async" invoker="format_range_async">
        <source-position filename="src/libide/code/ide-formatter.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </parameter>
          <parameter name="begin" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="format_range_finish"
                      invoker="format_range_finish"
                      throws="1">
        <source-position filename="src/libide/code/ide-formatter.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/code/ide-formatter.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="format_async" c:identifier="ide_formatter_format_async">
        <source-position filename="src/libide/code/ide-formatter.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="format_finish"
              c:identifier="ide_formatter_format_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-formatter.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="format_range_async"
              c:identifier="ide_formatter_format_range_async">
        <source-position filename="src/libide/code/ide-formatter.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </parameter>
          <parameter name="begin" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="format_range_finish"
              c:identifier="ide_formatter_format_range_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-formatter.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_formatter_load">
        <source-position filename="src/libide/code/ide-formatter.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Formatter" c:type="IdeFormatter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="FormatterInterface"
            c:type="IdeFormatterInterface"
            glib:is-gtype-struct-for="Formatter">
      <source-position filename="src/libide/code/ide-formatter.h" line="64"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-formatter.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Formatter" c:type="IdeFormatter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="format_async">
        <callback name="format_async">
          <source-position filename="src/libide/code/ide-formatter.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Formatter" c:type="IdeFormatter*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="options" transfer-ownership="none">
              <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="format_finish">
        <callback name="format_finish" throws="1">
          <source-position filename="src/libide/code/ide-formatter.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Formatter" c:type="IdeFormatter*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="format_range_async">
        <callback name="format_range_async">
          <source-position filename="src/libide/code/ide-formatter.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Formatter" c:type="IdeFormatter*"/>
            </parameter>
            <parameter name="buffer" transfer-ownership="none">
              <type name="Buffer" c:type="IdeBuffer*"/>
            </parameter>
            <parameter name="options" transfer-ownership="none">
              <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
            </parameter>
            <parameter name="begin" transfer-ownership="none">
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
            <parameter name="end" transfer-ownership="none">
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="7">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="format_range_finish">
        <callback name="format_range_finish" throws="1">
          <source-position filename="src/libide/code/ide-formatter.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Formatter" c:type="IdeFormatter*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="FormatterOptions"
           c:symbol-prefix="formatter_options"
           c:type="IdeFormatterOptions"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeFormatterOptions"
           glib:get-type="ide_formatter_options_get_type"
           glib:type-struct="FormatterOptionsClass">
      <source-position filename="src/libide/code/ide-formatter-options.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_formatter_options_new">
        <source-position filename="src/libide/code/ide-formatter-options.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
        </return-value>
      </constructor>
      <method name="get_insert_spaces"
              c:identifier="ide_formatter_options_get_insert_spaces"
              glib:get-property="insert-spaces">
        <source-position filename="src/libide/code/ide-formatter-options.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tab_width"
              c:identifier="ide_formatter_options_get_tab_width"
              glib:get-property="tab-width">
        <source-position filename="src/libide/code/ide-formatter-options.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_insert_spaces"
              c:identifier="ide_formatter_options_set_insert_spaces"
              glib:set-property="insert-spaces">
        <source-position filename="src/libide/code/ide-formatter-options.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </instance-parameter>
          <parameter name="insert_spaces" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tab_width"
              c:identifier="ide_formatter_options_set_tab_width"
              glib:set-property="tab-width">
        <source-position filename="src/libide/code/ide-formatter-options.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FormatterOptions" c:type="IdeFormatterOptions*"/>
          </instance-parameter>
          <parameter name="tab_width" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="insert-spaces"
                writable="1"
                transfer-ownership="none"
                setter="set_insert_spaces"
                getter="get_insert_spaces"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tab-width"
                writable="1"
                transfer-ownership="none"
                setter="set_tab_width"
                getter="get_tab_width"
                default-value="8">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="FormatterOptionsClass"
            c:type="IdeFormatterOptionsClass"
            glib:is-gtype-struct-for="FormatterOptions">
      <source-position filename="src/libide/code/ide-formatter-options.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Frame"
           c:symbol-prefix="frame"
           c:type="IdeFrame"
           parent="Panel.Frame"
           glib:type-name="IdeFrame"
           glib:get-type="ide_frame_get_type"
           glib:type-struct="FrameClass">
      <source-position filename="src/libide/gui/ide-frame.h" line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="ide_frame_new">
        <source-position filename="src/libide/gui/ide-frame.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="addin_find_by_module_name"
              c:identifier="ide_frame_addin_find_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame.c"
             line="307">This function will locate the #IdeFrameAddin that was registered by
the plugin named @module_name (which should match the "Module" field
provided in the .plugin file).

If no module was found or that module does not implement the
#IdeFrameAddinInterface, then %NULL is returned.</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-frame.c"
               line="319">An #IdeFrameAddin or %NULL</doc>
          <type name="FrameAddin" c:type="IdeFrameAddin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame.c"
                 line="309">An #IdeFrame</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame.c"
                 line="310">the module name which provides the addin</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="ide_frame_get_position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame.c"
             line="342">Gets the position in the grid of a frame.</doc>
        <source-position filename="src/libide/gui/ide-frame.h" line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-frame.c"
               line="348">a new #PanelPosition</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame.c"
                 line="344">a #IdeFrame</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_tabbar"
              c:identifier="ide_frame_get_use_tabbar"
              glib:get-property="use-tabbar">
        <source-position filename="src/libide/gui/ide-frame.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Frame" c:type="IdeFrame*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_use_tabbar"
              c:identifier="ide_frame_set_use_tabbar"
              glib:set-property="use-tabbar">
        <source-position filename="src/libide/gui/ide-frame.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Frame" c:type="IdeFrame*"/>
          </instance-parameter>
          <parameter name="use_tabbar" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="use-tabbar"
                writable="1"
                transfer-ownership="none"
                setter="set_use_tabbar"
                getter="get_use_tabbar"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <interface name="FrameAddin"
               c:symbol-prefix="frame_addin"
               c:type="IdeFrameAddin"
               glib:type-name="IdeFrameAddin"
               glib:get-type="ide_frame_addin_get_type"
               glib:type-struct="FrameAddinInterface">
      <source-position filename="src/libide/gui/ide-frame-addin.h" line="47"/>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame-addin.c"
             line="40">This function should be implemented by #IdeFrameAddin plugins
in #IdeFrameAddinInterface.

This virtual method is called when the plugin should load itself.
A new instance of the plugin is created for every #IdeFrame
that is created in Builder.</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="42">An #IdeFrameAddin</doc>
            <type name="FrameAddin" c:type="IdeFrameAddin*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="43">An #IdeFrame</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_page" invoker="set_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame-addin.c"
             line="85">This virtual method is called whenever the active page changes
in the #IdePage. Plugins may want to alter what controls
are displayed on the frame based on the current page.</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="87">an #IdeFrameAddin</doc>
            <type name="FrameAddin" c:type="IdeFrameAddin*"/>
          </instance-parameter>
          <parameter name="page"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="88">An #IdePage or %NULL.</doc>
            <type name="Page" c:type="IdePage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame-addin.c"
             line="63">This function should be implemented by #IdeFrameAddin plugins
in #IdeFrameAddinInterface.

This virtual method is called when the plugin should unload itself.
It should revert anything performed via ide_frame_addin_load().</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="65">An #IdeFrameAddin</doc>
            <type name="FrameAddin" c:type="IdeFrameAddin*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="66">An #IdeFrame</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_frame_addin_load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame-addin.c"
             line="40">This function should be implemented by #IdeFrameAddin plugins
in #IdeFrameAddinInterface.

This virtual method is called when the plugin should load itself.
A new instance of the plugin is created for every #IdeFrame
that is created in Builder.</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="42">An #IdeFrameAddin</doc>
            <type name="FrameAddin" c:type="IdeFrameAddin*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="43">An #IdeFrame</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_page" c:identifier="ide_frame_addin_set_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame-addin.c"
             line="85">This virtual method is called whenever the active page changes
in the #IdePage. Plugins may want to alter what controls
are displayed on the frame based on the current page.</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="87">an #IdeFrameAddin</doc>
            <type name="FrameAddin" c:type="IdeFrameAddin*"/>
          </instance-parameter>
          <parameter name="page"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="88">An #IdePage or %NULL.</doc>
            <type name="Page" c:type="IdePage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_frame_addin_unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-frame-addin.c"
             line="63">This function should be implemented by #IdeFrameAddin plugins
in #IdeFrameAddinInterface.

This virtual method is called when the plugin should unload itself.
It should revert anything performed via ide_frame_addin_load().</doc>
        <source-position filename="src/libide/gui/ide-frame-addin.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="65">An #IdeFrameAddin</doc>
            <type name="FrameAddin" c:type="IdeFrameAddin*"/>
          </instance-parameter>
          <parameter name="frame" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-frame-addin.c"
                 line="66">An #IdeFrame</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="FrameAddinInterface"
            c:type="IdeFrameAddinInterface"
            glib:is-gtype-struct-for="FrameAddin">
      <source-position filename="src/libide/gui/ide-frame-addin.h" line="47"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/gui/ide-frame-addin.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-frame-addin.c"
                   line="42">An #IdeFrameAddin</doc>
              <type name="FrameAddin" c:type="IdeFrameAddin*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-frame-addin.c"
                   line="43">An #IdeFrame</doc>
              <type name="Frame" c:type="IdeFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/gui/ide-frame-addin.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-frame-addin.c"
                   line="65">An #IdeFrameAddin</doc>
              <type name="FrameAddin" c:type="IdeFrameAddin*"/>
            </parameter>
            <parameter name="frame" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-frame-addin.c"
                   line="66">An #IdeFrame</doc>
              <type name="Frame" c:type="IdeFrame*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_page">
        <callback name="set_page">
          <source-position filename="src/libide/gui/ide-frame-addin.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-frame-addin.c"
                   line="87">an #IdeFrameAddin</doc>
              <type name="FrameAddin" c:type="IdeFrameAddin*"/>
            </parameter>
            <parameter name="page"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-frame-addin.c"
                   line="88">An #IdePage or %NULL.</doc>
              <type name="Page" c:type="IdePage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="FrameClass"
            c:type="IdeFrameClass"
            glib:is-gtype-struct-for="Frame">
      <source-position filename="src/libide/gui/ide-frame.h" line="37"/>
      <field name="parent_class">
        <type name="Panel.FrameClass" c:type="PanelFrameClass"/>
      </field>
    </record>
    <class name="FuzzyIndex"
           c:symbol-prefix="fuzzy_index"
           c:type="IdeFuzzyIndex"
           parent="GObject.Object"
           glib:type-name="IdeFuzzyIndex"
           glib:get-type="ide_fuzzy_index_get_type"
           glib:type-struct="FuzzyIndexClass">
      <source-position filename="src/libide/search/ide-fuzzy-index.h"
                       line="28"/>
      <constructor name="new" c:identifier="ide_fuzzy_index_new">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="31"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
        </return-value>
      </constructor>
      <method name="get_metadata" c:identifier="ide_fuzzy_index_get_metadata">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-index.c"
             line="375">Looks up the metadata for @key.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="59"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-index.c"
               line="380">A #GVariant or %NULL.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_string"
              c:identifier="ide_fuzzy_index_get_metadata_string">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_uint32"
              c:identifier="ide_fuzzy_index_get_metadata_uint32">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_uint64"
              c:identifier="ide_fuzzy_index_get_metadata_uint64">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file"
              c:identifier="ide_fuzzy_index_load_file"
              throws="1">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_async"
              c:identifier="ide_fuzzy_index_load_file_async">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_finish"
              c:identifier="ide_fuzzy_index_load_file_finish"
              throws="1">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_async" c:identifier="ide_fuzzy_index_query_async">
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_matches" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_finish"
              c:identifier="ide_fuzzy_index_query_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-index.c"
             line="357">Completes an asynchronous request to ide_fuzzy_index_query_async().</doc>
        <source-position filename="src/libide/search/ide-fuzzy-index.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-index.c"
               line="362">A #GListModel of results.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="FuzzyIndexBuilder"
           c:symbol-prefix="fuzzy_index_builder"
           c:type="IdeFuzzyIndexBuilder"
           parent="GObject.Object"
           glib:type-name="IdeFuzzyIndexBuilder"
           glib:get-type="ide_fuzzy_index_builder_get_type"
           glib:type-struct="FuzzyIndexBuilderClass">
      <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                       line="28"/>
      <constructor name="new" c:identifier="ide_fuzzy_index_builder_new">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="31"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
        </return-value>
      </constructor>
      <method name="get_case_sensitive"
              c:identifier="ide_fuzzy_index_builder_get_case_sensitive"
              glib:get-property="case-sensitive">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_document"
              c:identifier="ide_fuzzy_index_builder_get_document">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-index-builder.c"
             line="619">Returns the document that was inserted in a previous call to
ide_fuzzy_index_builder_insert().</doc>
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-index-builder.c"
               line="625">A #GVariant</doc>
          <type name="GLib.Variant" c:type="const GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="document_id" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ide_fuzzy_index_builder_insert">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-index-builder.c"
             line="244">Inserts @document into the index using @key as the lookup key.

If a matching document (checked by hashing @document) has already
been inserted, only a single instance of the document will be stored.

If @document is floating, it will be consumed.

@priority may be used to group results by priority. Priority must be
less than 256.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-index-builder.c"
               line="261">The document id registered for @document.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="246">A #IdeFuzzyIndexBuilder</doc>
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="247">The UTF-8 encoded key for the document</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="document" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="248">The document to store</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="249">An optional priority for the keyword.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_case_sensitive"
              c:identifier="ide_fuzzy_index_builder_set_case_sensitive"
              glib:set-property="case-sensitive">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="case_sensitive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="ide_fuzzy_index_builder_set_metadata">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_string"
              c:identifier="ide_fuzzy_index_builder_set_metadata_string">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_uint32"
              c:identifier="ide_fuzzy_index_builder_set_metadata_uint32">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_uint64"
              c:identifier="ide_fuzzy_index_builder_set_metadata_uint64">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="ide_fuzzy_index_builder_write"
              throws="1">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_async"
              c:identifier="ide_fuzzy_index_builder_write_async">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-index-builder.c"
             line="551">Builds and writes the index to @file. The file format is a
GVariant on disk and can be loaded and searched using
#FuzzyIndex.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="553">A #IdeFuzzyIndexBuilder</doc>
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="554">A #GFile to write the index to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="555">The priority for IO operations</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="556">An optional #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="557">A callback for completion or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-builder.c"
                 line="558">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_finish"
              c:identifier="ide_fuzzy_index_builder_write_finish"
              throws="1">
        <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexBuilder" c:type="IdeFuzzyIndexBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="case-sensitive"
                writable="1"
                transfer-ownership="none"
                setter="set_case_sensitive"
                getter="get_case_sensitive"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="FuzzyIndexBuilderClass"
            c:type="IdeFuzzyIndexBuilderClass"
            glib:is-gtype-struct-for="FuzzyIndexBuilder">
      <source-position filename="src/libide/search/ide-fuzzy-index-builder.h"
                       line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FuzzyIndexClass"
            c:type="IdeFuzzyIndexClass"
            glib:is-gtype-struct-for="FuzzyIndex">
      <source-position filename="src/libide/search/ide-fuzzy-index.h"
                       line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FuzzyIndexCursor"
           c:symbol-prefix="fuzzy_index_cursor"
           c:type="IdeFuzzyIndexCursor"
           parent="GObject.Object"
           glib:type-name="IdeFuzzyIndexCursor"
           glib:get-type="ide_fuzzy_index_cursor_get_type"
           glib:type-struct="FuzzyIndexCursorClass">
      <source-position filename="src/libide/search/ide-fuzzy-index-cursor.h"
                       line="30"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.ListModel"/>
      <method name="get_index" c:identifier="ide_fuzzy_index_cursor_get_index">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-index-cursor.c"
             line="617">Gets the index the cursor is iterating.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-index-cursor.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-index-cursor.c"
               line="623">A #IdeFuzzyIndex.</doc>
          <type name="FuzzyIndex" c:type="IdeFuzzyIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-index-cursor.c"
                 line="619">A #IdeFuzzyIndexCursor</doc>
            <type name="FuzzyIndexCursor" c:type="IdeFuzzyIndexCursor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="case-sensitive"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="index"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="FuzzyIndex"/>
      </property>
      <property name="max-matches"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="query"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tables"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.VariantDict"/>
      </property>
    </class>
    <record name="FuzzyIndexCursorClass"
            c:type="IdeFuzzyIndexCursorClass"
            glib:is-gtype-struct-for="FuzzyIndexCursor">
      <source-position filename="src/libide/search/ide-fuzzy-index-cursor.h"
                       line="30"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="FuzzyIndexMatch"
           c:symbol-prefix="fuzzy_index_match"
           c:type="IdeFuzzyIndexMatch"
           parent="GObject.Object"
           glib:type-name="IdeFuzzyIndexMatch"
           glib:get-type="ide_fuzzy_index_match_get_type"
           glib:type-struct="FuzzyIndexMatchClass">
      <source-position filename="src/libide/search/ide-fuzzy-index-match.h"
                       line="28"/>
      <method name="get_document"
              c:identifier="ide_fuzzy_index_match_get_document"
              glib:get-property="document">
        <source-position filename="src/libide/search/ide-fuzzy-index-match.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-index-match.c"
               line="173">A #GVariant.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="IdeFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key"
              c:identifier="ide_fuzzy_index_match_get_key"
              glib:get-property="key">
        <source-position filename="src/libide/search/ide-fuzzy-index-match.h"
                         line="31"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="IdeFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_fuzzy_index_match_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/search/ide-fuzzy-index-match.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="IdeFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_score"
              c:identifier="ide_fuzzy_index_match_get_score"
              glib:get-property="score">
        <source-position filename="src/libide/search/ide-fuzzy-index-match.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="gfloat"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="FuzzyIndexMatch" c:type="IdeFuzzyIndexMatch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="document"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_document">
        <type name="GLib.Variant"/>
      </property>
      <property name="key"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_key"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_priority"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="score"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_score"
                default-value="0.000000">
        <type name="gfloat" c:type="gfloat"/>
      </property>
    </class>
    <record name="FuzzyIndexMatchClass"
            c:type="IdeFuzzyIndexMatchClass"
            glib:is-gtype-struct-for="FuzzyIndexMatch">
      <source-position filename="src/libide/search/ide-fuzzy-index-match.h"
                       line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="FuzzyMutableIndex"
            c:type="IdeFuzzyMutableIndex"
            opaque="1"
            glib:type-name="IdeFuzzyMutableIndex"
            glib:get-type="ide_fuzzy_mutable_index_get_type"
            c:symbol-prefix="fuzzy_mutable_index">
      <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                       line="27"/>
      <constructor name="new" c:identifier="ide_fuzzy_mutable_index_new">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-mutable-index.c"
             line="131">Create a new #Fuzzy for fuzzy matching strings.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-mutable-index.c"
               line="137">A newly allocated #Fuzzy that should be freed with ide_fuzzy_mutable_index_unref().</doc>
          <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
        </return-value>
        <parameters>
          <parameter name="case_sensitive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="133">%TRUE if case should be preserved.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_free_func"
                   c:identifier="ide_fuzzy_mutable_index_new_with_free_func">
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
        </return-value>
        <parameters>
          <parameter name="case_sensitive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="free_func" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="begin_bulk_insert"
              c:identifier="ide_fuzzy_mutable_index_begin_bulk_insert">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-mutable-index.c"
             line="193">Start a bulk insertion. @fuzzy is not ready for searching until
ide_fuzzy_mutable_index_end_bulk_insert() has been called.

This allows for inserting large numbers of strings and deferring
the final sort until ide_fuzzy_mutable_index_end_bulk_insert().</doc>
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="195">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="ide_fuzzy_mutable_index_contains">
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_bulk_insert"
              c:identifier="ide_fuzzy_mutable_index_end_bulk_insert">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-mutable-index.c"
             line="212">Complete a bulk insert and resort the index.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="214">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ide_fuzzy_mutable_index_insert">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-mutable-index.c"
             line="239">Inserts a string into the fuzzy matcher.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="241">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="242">A UTF-8 encoded string.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="243">A value to associate with key.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="ide_fuzzy_mutable_index_match">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-mutable-index.c"
             line="435">IdeFuzzyMutableIndex searches within @fuzzy for strings that fuzzy match @needle.
Only up to @max_matches will be returned.

TODO: max_matches is not yet respected.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-fuzzy-mutable-index.c"
               line="446">A newly allocated
  #GArray containing #FuzzyMatch elements. This should be freed when
  the caller is done with it using g_array_unref().
  It is a programming error to keep the structure around longer than
  the @fuzzy instance.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="FuzzyMutableIndexMatch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="437">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="needle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="438">The needle to fuzzy search for.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="max_matches" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="439">The max number of matches to return.</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_fuzzy_mutable_index_ref">
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_fuzzy_mutable_index_remove">
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_free_func"
              c:identifier="ide_fuzzy_mutable_index_set_free_func">
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
          <parameter name="free_func" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_fuzzy_mutable_index_unref">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-fuzzy-mutable-index.c"
             line="307">Decrements the reference count of fuzzy by one. When the reference count
reaches zero, the structure will be freed.</doc>
        <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fuzzy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-fuzzy-mutable-index.c"
                 line="309">A #Fuzzy.</doc>
            <type name="FuzzyMutableIndex" c:type="IdeFuzzyMutableIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="FuzzyMutableIndexMatch" c:type="IdeFuzzyMutableIndexMatch">
      <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                       line="35"/>
      <field name="key" writable="1">
        <type name="utf8" c:type="const char*"/>
      </field>
      <field name="value" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="score" writable="1">
        <type name="gfloat" c:type="float"/>
      </field>
      <field name="id" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <function-macro name="GOTO" c:identifier="IDE_GOTO" introspectable="0">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-debug.h"
           line="71">Appends to the jump to label to the tracing log and then jumps
to the label @_l.</doc>
      <source-position filename="src/libide/core/ide-debug.h" line="120"/>
      <parameters>
        <parameter name="_l">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-debug.h"
               line="73">the label to jump to</doc>
        </parameter>
      </parameters>
    </function-macro>
    <class name="GSettingsActionGroup"
           c:symbol-prefix="gsettings_action_group"
           c:type="IdeGSettingsActionGroup"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeGSettingsActionGroup"
           glib:get-type="ide_gsettings_action_group_get_type"
           glib:type-struct="GSettingsActionGroupClass">
      <source-position filename="src/libide/core/ide-gsettings-action-group.h"
                       line="33"/>
      <implements name="Gio.ActionGroup"/>
      <function name="new" c:identifier="ide_gsettings_action_group_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-gsettings-action-group.c"
             line="49">Creates a new #GActionGroup that exports @settings.</doc>
        <source-position filename="src/libide/core/ide-gsettings-action-group.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-gsettings-action-group.c"
               line="55">an #IdeGSettingsActionGroup</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <parameter name="settings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-gsettings-action-group.c"
                 line="51">a #GSettings</doc>
            <type name="Gio.Settings" c:type="GSettings*"/>
          </parameter>
        </parameters>
      </function>
      <property name="settings"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.Settings"/>
      </property>
    </class>
    <record name="GSettingsActionGroupClass"
            c:type="IdeGSettingsActionGroupClass"
            glib:is-gtype-struct-for="GSettingsActionGroup">
      <source-position filename="src/libide/core/ide-gsettings-action-group.h"
                       line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="GreeterRow"
           c:symbol-prefix="greeter_row"
           c:type="IdeGreeterRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="IdeGreeterRow"
           glib:get-type="ide_greeter_row_get_type"
           glib:type-struct="GreeterRowClass">
      <source-position filename="src/libide/greeter/ide-greeter-row.h"
                       line="41"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_greeter_row_new">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-row.c"
             line="67">Create a new #IdeGreeterRow.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-row.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-row.c"
               line="72">a newly created #IdeGreeterRow</doc>
          <type name="GreeterRow" c:type="IdeGreeterRow*"/>
        </return-value>
      </constructor>
      <method name="get_project_info"
              c:identifier="ide_greeter_row_get_project_info"
              glib:get-property="project-info">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-row.c"
             line="219">Gets the #IdeGreeterRow:project-info property.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-row.h"
                         line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-row.c"
               line="225">an #IdeProjectInfo or %NULL</doc>
          <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-row.c"
                 line="221">an #IdeGreeterRow</doc>
            <type name="GreeterRow" c:type="IdeGreeterRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_text"
              c:identifier="ide_greeter_row_get_search_text">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-row.c"
             line="327">Gets a new string containing the search text for the greeter row.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-row.h"
                         line="51"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-row.c"
               line="333">a string or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-row.c"
                 line="329">a #IdeGreeterRow</doc>
            <type name="GreeterRow" c:type="IdeGreeterRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selection_mode"
              c:identifier="ide_greeter_row_get_selection_mode">
        <source-position filename="src/libide/greeter/ide-greeter-row.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterRow" c:type="IdeGreeterRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_project_info"
              c:identifier="ide_greeter_row_set_project_info"
              glib:set-property="project-info">
        <source-position filename="src/libide/greeter/ide-greeter-row.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterRow" c:type="IdeGreeterRow*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selection_mode"
              c:identifier="ide_greeter_row_set_selection_mode">
        <source-position filename="src/libide/greeter/ide-greeter-row.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterRow" c:type="IdeGreeterRow*"/>
          </instance-parameter>
          <parameter name="selection_mode" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="project-info"
                writable="1"
                transfer-ownership="none"
                setter="set_project_info"
                getter="get_project_info">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-row.c"
             line="151">The "project-info" property contains information about the project
to be displayed.</doc>
        <type name="ProjectInfo"/>
      </property>
      <property name="selected"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
      </field>
    </class>
    <record name="GreeterRowClass"
            c:type="IdeGreeterRowClass"
            glib:is-gtype-struct-for="GreeterRow">
      <source-position filename="src/libide/greeter/ide-greeter-row.h"
                       line="41"/>
      <field name="parent_class">
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <interface name="GreeterSection"
               c:symbol-prefix="greeter_section"
               c:type="IdeGreeterSection"
               glib:type-name="IdeGreeterSection"
               glib:get-type="ide_greeter_section_get_type"
               glib:type-struct="GreeterSectionInterface">
      <source-position filename="src/libide/greeter/ide-greeter-section.h"
                       line="52"/>
      <prerequisite name="Gtk.Widget"/>
      <virtual-method name="activate_first" invoker="activate_first">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="118">Active the first item in the section. This happens when the user
hits Enter within the search box to select the first visible item
in the search result set.

Ensure the given item is visible before activating it.

If no item matched, then return %FALSE.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-section.c"
               line="130">%TRUE if an item was activated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="120">a #IdeGreeterSection</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_selected" invoker="delete_selected">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="filter" invoker="filter">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="87">Refilter the visible items based on the current search.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-section.c"
               line="94">%TRUE if at least one element matched.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="89">a #IdeGreeterSection</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
          <parameter name="spec"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="90">a #IdePatternSpec or %NULL</doc>
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="67">Get the priority of the section. The lowest integral value is
sorted first in the list of sections.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-section.c"
               line="74">the priority for the section</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="69">an #IdeGreeterSection</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="project_activated">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="purge_selected" invoker="purge_selected">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_selection_mode" invoker="set_selection_mode">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
          <parameter name="selection_mode" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate_first"
              c:identifier="ide_greeter_section_activate_first">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="118">Active the first item in the section. This happens when the user
hits Enter within the search box to select the first visible item
in the search result set.

Ensure the given item is visible before activating it.

If no item matched, then return %FALSE.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-section.c"
               line="130">%TRUE if an item was activated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="120">a #IdeGreeterSection</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_selected"
              c:identifier="ide_greeter_section_delete_selected">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_project_activated"
              c:identifier="ide_greeter_section_emit_project_activated">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="filter" c:identifier="ide_greeter_section_filter">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="87">Refilter the visible items based on the current search.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-section.c"
               line="94">%TRUE if at least one element matched.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="89">a #IdeGreeterSection</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
          <parameter name="spec"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="90">a #IdePatternSpec or %NULL</doc>
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_greeter_section_get_priority">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="67">Get the priority of the section. The lowest integral value is
sorted first in the list of sections.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-section.c"
               line="74">the priority for the section</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="69">an #IdeGreeterSection</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="purge_selected"
              c:identifier="ide_greeter_section_purge_selected">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_selection_mode"
              c:identifier="ide_greeter_section_set_selection_mode">
        <source-position filename="src/libide/greeter/ide-greeter-section.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </instance-parameter>
          <parameter name="selection_mode" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="project-activated" when="last">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-section.c"
             line="41">The "project-activated" signal is emitted when a project has been
selected by the user in the section.

Use ide_greeter_section_emit_project_activated() to activate
this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="44">an #IdeProjectInfo</doc>
            <type name="ProjectInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="GreeterSectionInterface"
            c:type="IdeGreeterSectionInterface"
            glib:is-gtype-struct-for="GreeterSection">
      <source-position filename="src/libide/greeter/ide-greeter-section.h"
                       line="52"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="project_activated">
        <callback name="project_activated">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
            <parameter name="project_info" transfer-ownership="none">
              <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="74">the priority for the section</doc>
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/greeter/ide-greeter-section.c"
                   line="69">an #IdeGreeterSection</doc>
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="filter">
        <callback name="filter">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="94">%TRUE if at least one element matched.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/greeter/ide-greeter-section.c"
                   line="89">a #IdeGreeterSection</doc>
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
            <parameter name="spec"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/greeter/ide-greeter-section.c"
                   line="90">a #IdePatternSpec or %NULL</doc>
              <type name="PatternSpec" c:type="IdePatternSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate_first">
        <callback name="activate_first">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-section.c"
                 line="130">%TRUE if an item was activated</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/greeter/ide-greeter-section.c"
                   line="120">a #IdeGreeterSection</doc>
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_selection_mode">
        <callback name="set_selection_mode">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
            <parameter name="selection_mode" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_selected">
        <callback name="delete_selected">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="purge_selected">
        <callback name="purge_selected">
          <source-position filename="src/libide/greeter/ide-greeter-section.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="GreeterSection" c:type="IdeGreeterSection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="GreeterWorkspace"
           c:symbol-prefix="greeter_workspace"
           c:type="IdeGreeterWorkspace"
           parent="Workspace"
           final="1"
           glib:type-name="IdeGreeterWorkspace"
           glib:get-type="ide_greeter_workspace_get_type"
           glib:type-struct="GreeterWorkspaceClass">
      <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                       line="37"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="ide_greeter_workspace_new">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
        </return-value>
        <parameters>
          <parameter name="app" transfer-ownership="none">
            <type name="Application" c:type="IdeApplication*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_button"
              c:identifier="ide_greeter_workspace_add_button">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_page" c:identifier="ide_greeter_workspace_add_page">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="Adw.NavigationPage" c:type="AdwNavigationPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_section"
              c:identifier="ide_greeter_workspace_add_section">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="964">Adds the #IdeGreeterSection to the display.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="966">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="section" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="967">an #IdeGreeterSection based #GtkWidget</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin" c:identifier="ide_greeter_workspace_begin">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="1028">This function will disable various actions and should be called before
an #IdeGreeterAddin begins doing work that cannot be undone except to
cancel the operation.

Actions such as switching guides will be disabled during this process.

See ide_greeter_workspace_end() to restore actions.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="1030">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end" c:identifier="ide_greeter_workspace_end">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="1051">Restores actions after a call to ide_greeter_workspace_begin().</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="1053">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_page" c:identifier="ide_greeter_workspace_find_page">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="1174">Finds a page that was added, by its tag.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="75"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-workspace.c"
               line="1180">a #AdwNavigationPage or %NULL</doc>
          <type name="Adw.NavigationPage" c:type="AdwNavigationPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="1176">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="tag" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_selection_mode"
              c:identifier="ide_greeter_workspace_get_selection_mode"
              glib:get-property="selection-mode">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="1068">Gets if the greeter is in selection mode, which means that the workspace
allows selecting projects for removal.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-workspace.c"
               line="1075">%TRUE if in selection mode, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="1070">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_page"
              c:identifier="ide_greeter_workspace_get_visible_page">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/greeter/ide-greeter-workspace.c"
               line="1123">the current page, or %NULL if not
  page has been added yet.</doc>
          <type name="Adw.NavigationPage" c:type="AdwNavigationPage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_project"
              c:identifier="ide_greeter_workspace_open_project">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="390">Opens the project described by @project_info.

This is useful by greeter workspace extensions that add new pages
which may not have other means to activate a project.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="392">an #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="393">an #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_page" c:identifier="ide_greeter_workspace_push_page">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="Adw.NavigationPage" c:type="AdwNavigationPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_page_by_tag"
              c:identifier="ide_greeter_workspace_push_page_by_tag">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="tag" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_page"
              c:identifier="ide_greeter_workspace_remove_page">
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="Adw.NavigationPage" c:type="AdwNavigationPage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_section"
              c:identifier="ide_greeter_workspace_remove_section">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="995">Remvoes the #IdeGreeterSection from the display. This should be a section
that was previously added with ide_greeter_workspace_add_section().

Plugins should clean up after themselves when they are unloaded, which may
include calling this function.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="997">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="section" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="998">an #IdeGreeterSection based #GtkWidget</doc>
            <type name="GreeterSection" c:type="IdeGreeterSection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selection_mode"
              c:identifier="ide_greeter_workspace_set_selection_mode"
              glib:set-property="selection-mode">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="1085">Sets the workspace in selection mode.</doc>
        <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="1087">a #IdeGreeterWorkspace</doc>
            <type name="GreeterWorkspace" c:type="IdeGreeterWorkspace*"/>
          </instance-parameter>
          <parameter name="selection_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/greeter/ide-greeter-workspace.c"
                 line="1088">if the workspace should be in selection mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="selection-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_selection_mode"
                getter="get_selection_mode"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/greeter/ide-greeter-workspace.c"
             line="857">The "selection-mode" property indicates if the workspace allows
selecting existing projects and removing them, including source files
and cached data.

This is usually used by the checkmark button to toggle selections.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="open-project" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="ProjectInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="GreeterWorkspaceClass"
            c:type="IdeGreeterWorkspaceClass"
            glib:is-gtype-struct-for="GreeterWorkspace">
      <source-position filename="src/libide/greeter/ide-greeter-workspace.h"
                       line="37"/>
      <field name="parent_class">
        <type name="WorkspaceClass" c:type="IdeWorkspaceClass"/>
      </field>
    </record>
    <class name="Grid"
           c:symbol-prefix="grid"
           c:type="IdeGrid"
           parent="Panel.Grid"
           glib:type-name="IdeGrid"
           glib:get-type="ide_grid_get_type"
           glib:type-struct="GridClass">
      <source-position filename="src/libide/gui/ide-grid.h" line="38"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_grid_new">
        <source-position filename="src/libide/gui/ide-grid.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="count_pages" c:identifier="ide_grid_count_pages">
        <source-position filename="src/libide/gui/ide-grid.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Grid" c:type="IdeGrid*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach_page" c:identifier="ide_grid_foreach_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-grid.c"
             line="94">Calls @callback for each #IdePage found in the grid.</doc>
        <source-position filename="src/libide/gui/ide-grid.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-grid.c"
                 line="96">a #IdeGrid</doc>
            <type name="Grid" c:type="IdeGrid*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-grid.c"
                 line="97">callback to execute for each page found</doc>
            <type name="PageCallback" c:type="IdePageCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-grid.c"
                 line="98">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_page_position"
              c:identifier="ide_grid_get_page_position">
        <source-position filename="src/libide/gui/ide-grid.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Grid" c:type="IdeGrid*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="row" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="make_frame" c:identifier="ide_grid_make_frame">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-grid.c"
             line="233">Retrieves or creates a frame at the column/row position.</doc>
        <source-position filename="src/libide/gui/ide-grid.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-grid.c"
               line="241">an #IdeFrame</doc>
          <type name="Frame" c:type="IdeFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-grid.c"
                 line="235">a #IdeGrid</doc>
            <type name="Grid" c:type="IdeGrid*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-grid.c"
                 line="236">the grid column index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="row" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-grid.c"
                 line="237">the grid column row index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="GridClass"
            c:type="IdeGridClass"
            glib:is-gtype-struct-for="Grid">
      <source-position filename="src/libide/gui/ide-grid.h" line="38"/>
      <field name="parent_class">
        <type name="Panel.GridClass" c:type="PanelGridClass"/>
      </field>
    </record>
    <interface name="Gutter"
               c:symbol-prefix="gutter"
               c:type="IdeGutter"
               glib:type-name="IdeGutter"
               glib:get-type="ide_gutter_get_type"
               glib:type-struct="GutterInterface">
      <source-position filename="src/libide/sourceview/ide-gutter.h"
                       line="43"/>
      <prerequisite name="GtkSource.GutterRenderer"/>
      <virtual-method name="style_changed" invoker="style_changed">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_show_line_changes"
              c:identifier="ide_gutter_get_show_line_changes"
              glib:get-property="show-line-changes">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_line_diagnostics"
              c:identifier="ide_gutter_get_show_line_diagnostics"
              glib:get-property="show-line-diagnostics">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_line_numbers"
              c:identifier="ide_gutter_get_show_line_numbers"
              glib:get-property="show-line-numbers">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_relative_line_numbers"
              c:identifier="ide_gutter_get_show_relative_line_numbers"
              glib:get-property="show-relative-line-numbers">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_line_changes"
              c:identifier="ide_gutter_set_show_line_changes"
              glib:set-property="show-line-changes">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
          <parameter name="show_line_changes" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_line_diagnostics"
              c:identifier="ide_gutter_set_show_line_diagnostics"
              glib:set-property="show-line-diagnostics">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
          <parameter name="show_line_diagnostics" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_line_numbers"
              c:identifier="ide_gutter_set_show_line_numbers"
              glib:set-property="show-line-numbers">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
          <parameter name="show_line_numbers" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_relative_line_numbers"
              c:identifier="ide_gutter_set_show_relative_line_numbers"
              glib:set-property="show-relative-line-numbers">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
          <parameter name="show_relative_line_numbers"
                     transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="style_changed" c:identifier="ide_gutter_style_changed">
        <source-position filename="src/libide/sourceview/ide-gutter.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Gutter" c:type="IdeGutter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="show-line-changes"
                writable="1"
                transfer-ownership="none"
                setter="set_show_line_changes"
                getter="get_show_line_changes"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-line-diagnostics"
                writable="1"
                transfer-ownership="none"
                setter="set_show_line_diagnostics"
                getter="get_show_line_diagnostics"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-line-numbers"
                writable="1"
                transfer-ownership="none"
                setter="set_show_line_numbers"
                getter="get_show_line_numbers"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-relative-line-numbers"
                writable="1"
                transfer-ownership="none"
                setter="set_show_relative_line_numbers"
                getter="get_show_relative_line_numbers"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="style-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="GutterInterface"
            c:type="IdeGutterInterface"
            glib:is-gtype-struct-for="Gutter">
      <source-position filename="src/libide/sourceview/ide-gutter.h"
                       line="43"/>
      <field name="parent_class">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="style_changed">
        <callback name="style_changed">
          <source-position filename="src/libide/sourceview/ide-gutter.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Gutter" c:type="IdeGutter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="HeaderBar"
           c:symbol-prefix="header_bar"
           c:type="IdeHeaderBar"
           parent="Gtk.Widget"
           glib:type-name="IdeHeaderBar"
           glib:get-type="ide_header_bar_get_type"
           glib:type-struct="HeaderBarClass">
      <source-position filename="src/libide/gui/ide-header-bar.h" line="49"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_header_bar_new">
        <source-position filename="src/libide/gui/ide-header-bar.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add" c:identifier="ide_header_bar_add">
        <source-position filename="src/libide/gui/ide-header-bar.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HeaderBar" c:type="IdeHeaderBar*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="HeaderBarPosition" c:type="IdeHeaderBarPosition"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_id"
              c:identifier="ide_header_bar_get_menu_id"
              glib:get-property="menu-id">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-header-bar.c"
             line="148">Gets the menu-id to show in the workspace window.</doc>
        <source-position filename="src/libide/gui/ide-header-bar.h" line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-header-bar.c"
               line="154">a string containing the menu-id, or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-header-bar.c"
                 line="150">a #IdeHeaderBar</doc>
            <type name="HeaderBar" c:type="IdeHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_header_bar_remove">
        <source-position filename="src/libide/gui/ide-header-bar.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HeaderBar" c:type="IdeHeaderBar*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_id"
              c:identifier="ide_header_bar_set_menu_id"
              glib:set-property="menu-id">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-header-bar.c"
             line="193">Sets the menu-id to display in the window.

Set to %NULL to hide the workspace menu.</doc>
        <source-position filename="src/libide/gui/ide-header-bar.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-header-bar.c"
                 line="195">a #IdeHeaderBar</doc>
            <type name="HeaderBar" c:type="IdeHeaderBar*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="menu-id"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_id"
                getter="get_menu_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <record name="HeaderBarClass"
            c:type="IdeHeaderBarClass"
            glib:is-gtype-struct-for="HeaderBar">
      <source-position filename="src/libide/gui/ide-header-bar.h" line="49"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <enumeration name="HeaderBarPosition" c:type="IdeHeaderBarPosition">
      <source-position filename="src/libide/gui/ide-header-bar.h" line="39"/>
      <member name="left"
              value="0"
              c:identifier="IDE_HEADER_BAR_POSITION_LEFT">
      </member>
      <member name="right"
              value="1"
              c:identifier="IDE_HEADER_BAR_POSITION_RIGHT">
      </member>
      <member name="left_of_center"
              value="2"
              c:identifier="IDE_HEADER_BAR_POSITION_LEFT_OF_CENTER">
      </member>
      <member name="right_of_center"
              value="3"
              c:identifier="IDE_HEADER_BAR_POSITION_RIGHT_OF_CENTER">
      </member>
      <member name="last"
              value="4"
              c:identifier="IDE_HEADER_BAR_POSITION_LAST">
      </member>
    </enumeration>
    <record name="Heap"
            c:type="IdeHeap"
            glib:type-name="IdeHeap"
            glib:get-type="ide_heap_get_type"
            c:symbol-prefix="heap">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-heap.c"
           line="27">Heaps are similar to a partially sorted tree but implemented as an
array. They allow for efficient O(1) lookup of the highest priority
item as it will always be the first item of the array.

To create a new heap use ide_heap_new().

To add items to the heap, use ide_heap_insert_val() or
ide_heap_insert_vals() to insert in bulk.

To access an item in the heap, use ide_heap_index().

To remove an arbitrary item from the heap, use ide_heap_extract_index().

To remove the highest priority item in the heap, use ide_heap_extract().

To free a heap, use ide_heap_unref().

Here is an example that stores integers in a #IdeHeap:
|[&lt;!-- language="C" --&gt;
static int
cmpint (gconstpointer a,
        gconstpointer b)
{
  return *(const gint *)a - *(const gint *)b;
}

int
main (gint   argc,
      gchar *argv[])
{
  IdeHeap *heap;
  gint i;
  gint v;

  heap = ide_heap_new (sizeof (gint), cmpint);

  for (i = 0; i &lt; 10000; i++)
    ide_heap_insert_val (heap, i);
  for (i = 0; i &lt; 10000; i++)
    ide_heap_extract (heap, &amp;v);

  ide_heap_unref (heap);
}
]|</doc>
      <source-position filename="src/libide/io/ide-heap.h" line="38"/>
      <field name="data" writable="1">
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="len" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <constructor name="new" c:identifier="ide_heap_new">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-heap.c"
             line="112">Creates a new #IdeHeap. A heap is a tree-like structure stored in
an array that is not fully sorted, but head is guaranteed to be either
the max, or min value based on @compare_func. This is also known as
a priority queue.</doc>
        <source-position filename="src/libide/io/ide-heap.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-heap.c"
               line="122">A newly allocated #IdeHeap</doc>
          <type name="Heap" c:type="IdeHeap*"/>
        </return-value>
        <parameters>
          <parameter name="element_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-heap.c"
                 line="114">the size of each element in the heap</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="compare_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-heap.c"
                 line="115">a function to compare to elements</doc>
            <type name="GLib.CompareFunc" c:type="GCompareFunc"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="extract" c:identifier="ide_heap_extract">
        <source-position filename="src/libide/io/ide-heap.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <type name="Heap" c:type="IdeHeap*"/>
          </instance-parameter>
          <parameter name="result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="extract_index" c:identifier="ide_heap_extract_index">
        <source-position filename="src/libide/io/ide-heap.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <type name="Heap" c:type="IdeHeap*"/>
          </instance-parameter>
          <parameter name="index_" transfer-ownership="none">
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="result"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_vals" c:identifier="ide_heap_insert_vals">
        <source-position filename="src/libide/io/ide-heap.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <type name="Heap" c:type="IdeHeap*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_heap_ref">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-heap.c"
             line="144">Increments the reference count of @heap by one.</doc>
        <source-position filename="src/libide/io/ide-heap.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-heap.c"
               line="150">@heap</doc>
          <type name="Heap" c:type="IdeHeap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-heap.c"
                 line="146">An #IdeHeap</doc>
            <type name="Heap" c:type="IdeHeap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_heap_unref">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-heap.c"
             line="175">Decrements the reference count of @heap by one, freeing the structure
when the reference count reaches zero.</doc>
        <source-position filename="src/libide/io/ide-heap.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="heap" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-heap.c"
                 line="177">An #IdeHeap</doc>
            <type name="Heap" c:type="IdeHeap*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="HighlightCallback" c:type="IdeHighlightCallback">
      <source-position filename="src/libide/code/ide-highlighter.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="HighlightResult" c:type="IdeHighlightResult"/>
      </return-value>
      <parameters>
        <parameter name="begin" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="end" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="style_name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="HighlightEngine"
           c:symbol-prefix="highlight_engine"
           c:type="IdeHighlightEngine"
           parent="Object"
           final="1"
           glib:type-name="IdeHighlightEngine"
           glib:get-type="ide_highlight_engine_get_type"
           glib:type-struct="HighlightEngineClass">
      <source-position filename="src/libide/code/ide-highlight-engine.h"
                       line="36"/>
      <constructor name="new" c:identifier="ide_highlight_engine_new">
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <type name="Buffer" c:type="IdeBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="advance" c:identifier="ide_highlight_engine_advance">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-engine.c"
             line="423">This function is useful for #IdeHighlighter implementations that need to
asynchronously do work to process the highlighting.

If they return from their update function without advancing, nothing will
happen until they call this method to proceed.</doc>
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="425">a #IdeHighlightEngine</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ide_highlight_engine_clear">
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_buffer"
              c:identifier="ide_highlight_engine_get_buffer"
              glib:get-property="buffer">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-engine.c"
             line="1030">Gets the IdeHighlightEngine:buffer property.</doc>
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-highlight-engine.c"
               line="1036">An #IdeBuffer.</doc>
          <type name="Buffer" c:type="IdeBuffer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1032">an #IdeHighlightEngine.</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_highlighter"
              c:identifier="ide_highlight_engine_get_highlighter"
              glib:get-property="highlighter">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-engine.c"
             line="1014">Gets the IdeHighlightEngine:highlighter property.</doc>
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-highlight-engine.c"
               line="1020">An #IdeHighlighter.</doc>
          <type name="Highlighter" c:type="IdeHighlighter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1016">an #IdeHighlightEngine.</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_style" c:identifier="ide_highlight_engine_get_style">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-engine.c"
             line="1134">A #GtkTextTag for @style_name.</doc>
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-highlight-engine.c"
               line="1141">a #GtkTextTag.</doc>
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1136">the #IdeHighlightEngine</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
          <parameter name="style_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1137">the name of the style to retrieve</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="ide_highlight_engine_invalidate">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-engine.c"
             line="1091">This function will extend the invalidated range of the buffer to include
the range of @begin to @end.

The highlighter will be queued to interactively update the invalidated
region.

Updating the invalidated region of the buffer may take some time, as it is
important that the highlighter does not block for more than 1-2 milliseconds
to avoid dropping frames.</doc>
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1093">An #IdeHighlightEngine.</doc>
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
          <parameter name="begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1094">the beginning of the range to invalidate</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-engine.c"
                 line="1095">the end of the range to invalidate</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="ide_highlight_engine_pause">
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rebuild" c:identifier="ide_highlight_engine_rebuild">
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unpause" c:identifier="ide_highlight_engine_unpause">
        <source-position filename="src/libide/code/ide-highlight-engine.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="buffer"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_buffer">
        <type name="Buffer"/>
      </property>
      <property name="highlighter"
                transfer-ownership="none"
                getter="get_highlighter">
        <type name="Highlighter"/>
      </property>
    </class>
    <record name="HighlightEngineClass"
            c:type="IdeHighlightEngineClass"
            glib:is-gtype-struct-for="HighlightEngine">
      <source-position filename="src/libide/code/ide-highlight-engine.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="HighlightIndex"
            c:type="IdeHighlightIndex"
            opaque="1"
            glib:type-name="IdeHighlightIndex"
            glib:get-type="ide_highlight_index_get_type"
            c:symbol-prefix="highlight_index">
      <source-position filename="src/libide/code/ide-code-types.h" line="47"/>
      <constructor name="new" c:identifier="ide_highlight_index_new">
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_highlight_index_new_from_variant">
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dump" c:identifier="ide_highlight_index_dump">
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ide_highlight_index_insert">
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="ide_highlight_index_lookup">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-index.c"
             line="133">Gets the pointer tag that was registered for @word, or %NULL.  This can be
any arbitrary value. Some highlight engines might use it to point at
internal structures or strings they know about to optimize later work.</doc>
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-highlight-index.c"
               line="141">Highlighter specific tag.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-index.c"
                 line="135">An #IdeHighlightIndex.</doc>
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
          <parameter name="word" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_highlight_index_ref">
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_highlight_index_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlight-index.c"
             line="193">Creates a variant to represent the index. Useful to transport across IPC boundaries.</doc>
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-highlight-index.c"
               line="199">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlight-index.c"
                 line="195">a #IdeHighlightIndex</doc>
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_highlight_index_unref">
        <source-position filename="src/libide/code/ide-highlight-index.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HighlightIndex" c:type="IdeHighlightIndex*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="HighlightResult" c:type="IdeHighlightResult">
      <source-position filename="src/libide/code/ide-highlighter.h" line="43"/>
      <member name="stop" value="0" c:identifier="IDE_HIGHLIGHT_STOP">
      </member>
      <member name="continue" value="1" c:identifier="IDE_HIGHLIGHT_CONTINUE">
      </member>
    </enumeration>
    <interface name="Highlighter"
               c:symbol-prefix="highlighter"
               c:type="IdeHighlighter"
               glib:type-name="IdeHighlighter"
               glib:get-type="ide_highlighter_get_type"
               glib:type-struct="HighlighterInterface">
      <source-position filename="src/libide/code/ide-highlighter.h" line="81"/>
      <prerequisite name="Object"/>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/code/ide-highlighter.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_engine">
        <source-position filename="src/libide/code/ide-highlighter.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
          <parameter name="engine" transfer-ownership="none">
            <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update" invoker="update">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlighter.c"
             line="54">Incrementally processes more of the buffer for highlighting.  If @callback
returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
return, having set @location to the current position of processing.

If processing the entire range was successful, then @location should be set
to @range_end.</doc>
        <source-position filename="src/libide/code/ide-highlighter.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="56">an #IdeHighlighter.</doc>
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
          <parameter name="tags_to_remove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="57">a #GSList of tags to be removed</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="Gtk.TextTag"/>
            </type>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="58">A callback to apply a given style.</doc>
            <type name="HighlightCallback" c:type="IdeHighlightCallback"/>
          </parameter>
          <parameter name="range_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="59">The beginning of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="range_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="60">The end of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="61">How far the highlighter got in the update.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_highlighter_load">
        <source-position filename="src/libide/code/ide-highlighter.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ide_highlighter_update">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-highlighter.c"
             line="54">Incrementally processes more of the buffer for highlighting.  If @callback
returns %IDE_HIGHLIGHT_STOP, then this vfunc should stop processing and
return, having set @location to the current position of processing.

If processing the entire range was successful, then @location should be set
to @range_end.</doc>
        <source-position filename="src/libide/code/ide-highlighter.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="56">an #IdeHighlighter.</doc>
            <type name="Highlighter" c:type="IdeHighlighter*"/>
          </instance-parameter>
          <parameter name="tags_to_remove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="57">a #GSList of tags to be removed</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="Gtk.TextTag"/>
            </type>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="call">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="58">A callback to apply a given style.</doc>
            <type name="HighlightCallback" c:type="IdeHighlightCallback"/>
          </parameter>
          <parameter name="range_begin" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="59">The beginning of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="range_end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="60">The end of the range to update.</doc>
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="location"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-highlighter.c"
                 line="61">How far the highlighter got in the update.</doc>
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="HighlighterInterface"
            c:type="IdeHighlighterInterface"
            glib:is-gtype-struct-for="Highlighter">
      <source-position filename="src/libide/code/ide-highlighter.h" line="81"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="update">
        <callback name="update">
          <source-position filename="src/libide/code/ide-highlighter.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-highlighter.c"
                   line="56">an #IdeHighlighter.</doc>
              <type name="Highlighter" c:type="IdeHighlighter*"/>
            </parameter>
            <parameter name="tags_to_remove" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-highlighter.c"
                   line="57">a #GSList of tags to be removed</doc>
              <type name="GLib.SList" c:type="const GSList*">
                <type name="Gtk.TextTag"/>
              </type>
            </parameter>
            <parameter name="callback" transfer-ownership="none" scope="call">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-highlighter.c"
                   line="58">A callback to apply a given style.</doc>
              <type name="HighlightCallback" c:type="IdeHighlightCallback"/>
            </parameter>
            <parameter name="range_begin" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-highlighter.c"
                   line="59">The beginning of the range to update.</doc>
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
            <parameter name="range_end" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-highlighter.c"
                   line="60">The end of the range to update.</doc>
              <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
            </parameter>
            <parameter name="location"
                       direction="out"
                       caller-allocates="1"
                       transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-highlighter.c"
                   line="61">How far the highlighter got in the update.</doc>
              <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_engine">
        <callback name="set_engine">
          <source-position filename="src/libide/code/ide-highlighter.h"
                           line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Highlighter" c:type="IdeHighlighter*"/>
            </parameter>
            <parameter name="engine" transfer-ownership="none">
              <type name="HighlightEngine" c:type="IdeHighlightEngine*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-highlighter.h"
                           line="80"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Highlighter" c:type="IdeHighlighter*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="HtmlGenerator"
           c:symbol-prefix="html_generator"
           c:type="IdeHtmlGenerator"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeHtmlGenerator"
           glib:get-type="ide_html_generator_get_type"
           glib:type-struct="HtmlGeneratorClass">
      <source-position filename="src/libide/webkit/ide-html-generator.h"
                       line="46"/>
      <constructor name="new_for_buffer"
                   c:identifier="ide_html_generator_new_for_buffer">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="252">Create a 1:1 HTML generator for a buffer.

Creates a #IdeHtmlGenerator that passes the content directly from
what is found in a #GtkTextBuffer.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/webkit/ide-html-generator.c"
               line="261">an #IdeHtmlGenerator</doc>
          <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
        </return-value>
        <parameters>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="254">a #GtkTextBuffer</doc>
            <type name="Gtk.TextBuffer" c:type="GtkTextBuffer*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="generate_async" invoker="generate_async">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="164">Asynchronously generate HTML.

This virtual function should be implemented by subclasses to generate
HTML based on some form of input (which is left to the subclass).

Upon completion, @callback is called and expected to call
ide_html_generator_generate_finish() to retrieve the result.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="166">a #IdeHtmlGenerator</doc>
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="167">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="168">a function to call after completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="169">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="generate_finish"
                      invoker="generate_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="191">Completes a request to generate HTML.

This function is used to complete a request to generate HTML from some
form of input, asynchronously. The content of the HTML is dependent on
the subclass implementation of #IdeHtmlGenerator.

It is required that the resulting bytes have a NULL terminator at
the end which is not part of the bytes length.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/webkit/ide-html-generator.c"
               line="206">a #GBytes if successful; otherwise %NULL
  and @error is set.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="193">a #IdeHtmlGenerator</doc>
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="194">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="invalidate" invoker="invalidate">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="235">Notifies that the last generated HTML is now invalid.

This is used by subclasses to denote that the HTML contents
have changed and will need to be regenerated.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="237">a #IdeHtmlGenerator</doc>
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="generate_async"
              c:identifier="ide_html_generator_generate_async">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="164">Asynchronously generate HTML.

This virtual function should be implemented by subclasses to generate
HTML based on some form of input (which is left to the subclass).

Upon completion, @callback is called and expected to call
ide_html_generator_generate_finish() to retrieve the result.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="166">a #IdeHtmlGenerator</doc>
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="167">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="168">a function to call after completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="169">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_finish"
              c:identifier="ide_html_generator_generate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="191">Completes a request to generate HTML.

This function is used to complete a request to generate HTML from some
form of input, asynchronously. The content of the HTML is dependent on
the subclass implementation of #IdeHtmlGenerator.

It is required that the resulting bytes have a NULL terminator at
the end which is not part of the bytes length.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/webkit/ide-html-generator.c"
               line="206">a #GBytes if successful; otherwise %NULL
  and @error is set.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="193">a #IdeHtmlGenerator</doc>
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="194">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_base_uri"
              c:identifier="ide_html_generator_get_base_uri"
              glib:get-property="base-uri">
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="ide_html_generator_invalidate">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="235">Notifies that the last generated HTML is now invalid.

This is used by subclasses to denote that the HTML contents
have changed and will need to be regenerated.</doc>
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="237">a #IdeHtmlGenerator</doc>
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_base_uri"
              c:identifier="ide_html_generator_set_base_uri"
              glib:set-property="base-uri">
        <source-position filename="src/libide/webkit/ide-html-generator.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </instance-parameter>
          <parameter name="base_uri" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="base-uri"
                writable="1"
                transfer-ownership="none"
                setter="set_base_uri"
                getter="get_base_uri"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="invalidate" when="last">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-html-generator.c"
             line="141">The "invalidate" signal is emitted when contents have changed.

This signal will be emitted by subclasses when the contents have changed
and HTML will need to be regenerated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="HtmlGeneratorClass"
            c:type="IdeHtmlGeneratorClass"
            glib:is-gtype-struct-for="HtmlGenerator">
      <source-position filename="src/libide/webkit/ide-html-generator.h"
                       line="46"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="invalidate">
        <callback name="invalidate">
          <source-position filename="src/libide/webkit/ide-html-generator.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="237">a #IdeHtmlGenerator</doc>
              <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="generate_async">
        <callback name="generate_async">
          <source-position filename="src/libide/webkit/ide-html-generator.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="166">a #IdeHtmlGenerator</doc>
              <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="167">a #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="168">a function to call after completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="169">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="generate_finish">
        <callback name="generate_finish" throws="1">
          <source-position filename="src/libide/webkit/ide-html-generator.h"
                           line="43"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-html-generator.c"
                 line="206">a #GBytes if successful; otherwise %NULL
  and @error is set.</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="193">a #IdeHtmlGenerator</doc>
              <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/webkit/ide-html-generator.c"
                   line="194">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function-macro name="IS_DEBUGGER_BREAKPOINT_CHANGE"
                    c:identifier="IDE_IS_DEBUGGER_BREAKPOINT_CHANGE"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="141"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUGGER_BREAK_MODE"
                    c:identifier="IDE_IS_DEBUGGER_BREAK_MODE"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="126"/>
      <parameters>
        <parameter name="m">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUGGER_DISPOSITION"
                    c:identifier="IDE_IS_DEBUGGER_DISPOSITION"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="167"/>
      <parameters>
        <parameter name="d">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUGGER_MOVEMENT"
                    c:identifier="IDE_IS_DEBUGGER_MOVEMENT"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="68"/>
      <parameters>
        <parameter name="m">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUGGER_STOP_REASON"
                    c:identifier="IDE_IS_DEBUGGER_STOP_REASON"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="100"/>
      <parameters>
        <parameter name="r">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUGGER_STREAM"
                    c:identifier="IDE_IS_DEBUGGER_STREAM"
                    introspectable="0">
      <source-position filename="src/libide/debugger/ide-debugger-types.h"
                       line="44"/>
      <parameters>
        <parameter name="s">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PTY_INTERCEPT"
                    c:identifier="IDE_IS_PTY_INTERCEPT"
                    introspectable="0">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="34"/>
      <parameters>
        <parameter name="s">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="IndentStyle"
                 glib:type-name="IdeIndentStyle"
                 glib:get-type="ide_indent_style_get_type"
                 c:type="IdeIndentStyle">
      <member name="spaces"
              value="1"
              c:identifier="IDE_INDENT_STYLE_SPACES"
              glib:nick="spaces"
              glib:name="IDE_INDENT_STYLE_SPACES">
      </member>
      <member name="tabs"
              value="2"
              c:identifier="IDE_INDENT_STYLE_TABS"
              glib:nick="tabs"
              glib:name="IDE_INDENT_STYLE_TABS">
      </member>
    </enumeration>
    <class name="InstallButton"
           c:symbol-prefix="install_button"
           c:type="IdeInstallButton"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeInstallButton"
           glib:get-type="ide_install_button_get_type"
           glib:type-struct="InstallButtonClass">
      <source-position filename="src/libide/gtk/ide-install-button.h"
                       line="32"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_install_button_new">
        <source-position filename="src/libide/gtk/ide-install-button.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="cancel" c:identifier="ide_install_button_cancel">
        <source-position filename="src/libide/gtk/ide-install-button.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="InstallButton" c:type="IdeInstallButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_label"
              c:identifier="ide_install_button_get_label"
              glib:get-property="label">
        <source-position filename="src/libide/gtk/ide-install-button.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="InstallButton" c:type="IdeInstallButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_label"
              c:identifier="ide_install_button_set_label"
              glib:set-property="label">
        <source-position filename="src/libide/gtk/ide-install-button.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="InstallButton" c:type="IdeInstallButton*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="label"
                writable="1"
                transfer-ownership="none"
                setter="set_label"
                getter="get_label"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="cancel" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Notification"/>
          </parameter>
          <parameter name="p0"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="install" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Notification"/>
          </parameter>
          <parameter name="p0"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="InstallButtonClass"
            c:type="IdeInstallButtonClass"
            glib:is-gtype-struct-for="InstallButton">
      <source-position filename="src/libide/gtk/ide-install-button.h"
                       line="32"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="JoinedMenu"
           c:symbol-prefix="joined_menu"
           c:type="IdeJoinedMenu"
           parent="Gio.MenuModel"
           glib:type-name="IdeJoinedMenu"
           glib:get-type="ide_joined_menu_get_type"
           glib:type-struct="JoinedMenuClass">
      <source-position filename="src/libide/gtk/ide-joined-menu.h" line="34"/>
      <constructor name="new" c:identifier="ide_joined_menu_new">
        <source-position filename="src/libide/gtk/ide-joined-menu.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="JoinedMenu" c:type="IdeJoinedMenu*"/>
        </return-value>
      </constructor>
      <method name="append_menu" c:identifier="ide_joined_menu_append_menu">
        <source-position filename="src/libide/gtk/ide-joined-menu.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="IdeJoinedMenu*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_joined" c:identifier="ide_joined_menu_get_n_joined">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-joined-menu.c"
             line="315">Gets the number of joined menus.</doc>
        <source-position filename="src/libide/gtk/ide-joined-menu.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-joined-menu.c"
                 line="317">a #IdeJoinedMenu</doc>
            <type name="JoinedMenu" c:type="IdeJoinedMenu*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend_menu" c:identifier="ide_joined_menu_prepend_menu">
        <source-position filename="src/libide/gtk/ide-joined-menu.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="IdeJoinedMenu*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_index" c:identifier="ide_joined_menu_remove_index">
        <source-position filename="src/libide/gtk/ide-joined-menu.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="IdeJoinedMenu*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_menu" c:identifier="ide_joined_menu_remove_menu">
        <source-position filename="src/libide/gtk/ide-joined-menu.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="JoinedMenu" c:type="IdeJoinedMenu*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="JoinedMenuClass"
            c:type="IdeJoinedMenuClass"
            glib:is-gtype-struct-for="JoinedMenu">
      <source-position filename="src/libide/gtk/ide-joined-menu.h" line="34"/>
      <field name="parent_class">
        <type name="Gio.MenuModelClass" c:type="GMenuModelClass"/>
      </field>
    </record>
    <constant name="LINE_CHANGES_FALLBACK_ADDED"
              value="#26a269"
              c:type="IDE_LINE_CHANGES_FALLBACK_ADDED">
      <source-position filename="src/libide/sourceview/ide-line-change-gutter-renderer.h"
                       line="31"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LINE_CHANGES_FALLBACK_CHANGED"
              value="#e5a50a"
              c:type="IDE_LINE_CHANGES_FALLBACK_CHANGED">
      <source-position filename="src/libide/sourceview/ide-line-change-gutter-renderer.h"
                       line="32"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LINE_CHANGES_FALLBACK_REMOVED"
              value="#c01c28"
              c:type="IDE_LINE_CHANGES_FALLBACK_REMOVED">
      <source-position filename="src/libide/sourceview/ide-line-change-gutter-renderer.h"
                       line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="LOG_LEVEL_TRACE"
              value="1"
              c:type="IDE_LOG_LEVEL_TRACE"
              introspectable="0">
      <source-position filename="src/libide/core/ide-debug.h" line="103"/>
      <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
    </constant>
    <constant name="LSP_COMPLETION_PROVIDER_PRIORITY"
              value="1000"
              c:type="IDE_LSP_COMPLETION_PROVIDER_PRIORITY">
      <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                       line="34"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="LineChangeGutterRenderer"
           c:symbol-prefix="line_change_gutter_renderer"
           c:type="IdeLineChangeGutterRenderer"
           parent="GtkSource.GutterRenderer"
           final="1"
           glib:type-name="IdeLineChangeGutterRenderer"
           glib:get-type="ide_line_change_gutter_renderer_get_type"
           glib:type-struct="LineChangeGutterRendererClass">
      <source-position filename="src/libide/sourceview/ide-line-change-gutter-renderer.h"
                       line="36"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
    </class>
    <record name="LineChangeGutterRendererClass"
            c:type="IdeLineChangeGutterRendererClass"
            glib:is-gtype-struct-for="LineChangeGutterRenderer">
      <source-position filename="src/libide/sourceview/ide-line-change-gutter-renderer.h"
                       line="36"/>
      <field name="parent_class">
        <type name="GtkSource.GutterRendererClass"
              c:type="GtkSourceGutterRendererClass"/>
      </field>
    </record>
    <record name="LineReader" c:type="IdeLineReader">
      <source-position filename="src/libide/io/ide-line-reader.h" line="32"/>
      <field name="contents" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="length" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="pos" writable="1">
        <type name="gssize" c:type="gssize"/>
      </field>
      <method name="init" c:identifier="ide_line_reader_init">
        <source-position filename="src/libide/io/ide-line-reader.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reader" transfer-ownership="none">
            <type name="LineReader" c:type="IdeLineReader*"/>
          </instance-parameter>
          <parameter name="contents" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="ide_line_reader_next">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-line-reader.c"
             line="53">Moves forward to the beginning of the next line in the buffer. No changes to the buffer
are made, and the result is a pointer within the string passed as @contents in
ide_line_reader_init(). Since the line most likely will not be terminated with a NULL byte,
you must provide @length to determine the length of the line.</doc>
        <source-position filename="src/libide/io/ide-line-reader.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-line-reader.c"
               line="63">The beginning of the line within the buffer.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="reader" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-line-reader.c"
                 line="55">the #IdeLineReader</doc>
            <type name="LineReader" c:type="IdeLineReader*"/>
          </instance-parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-line-reader.c"
                 line="56">a location for the length of the line in bytes.</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="LocalDevice"
           c:symbol-prefix="local_device"
           c:type="IdeLocalDevice"
           parent="Device"
           glib:type-name="IdeLocalDevice"
           glib:get-type="ide_local_device_get_type"
           glib:type-struct="LocalDeviceClass">
      <source-position filename="src/libide/foundry/ide-local-device.h"
                       line="44"/>
      <property name="triplet"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Triplet"/>
      </property>
      <field name="parent_instance">
        <type name="Device" c:type="IdeDevice"/>
      </field>
    </class>
    <record name="LocalDeviceClass"
            c:type="IdeLocalDeviceClass"
            glib:is-gtype-struct-for="LocalDevice">
      <source-position filename="src/libide/foundry/ide-local-device.h"
                       line="44"/>
      <field name="parent">
        <type name="DeviceClass" c:type="IdeDeviceClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Location"
           c:symbol-prefix="location"
           c:type="IdeLocation"
           parent="GObject.Object"
           glib:type-name="IdeLocation"
           glib:get-type="ide_location_get_type"
           glib:type-struct="LocationClass">
      <source-position filename="src/libide/code/ide-location.h" line="44"/>
      <constructor name="new" c:identifier="ide_location_new">
        <source-position filename="src/libide/code/ide-location.h" line="49"/>
        <return-value transfer-ownership="full">
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_location_new_from_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="402">Creates a new #IdeLocation using the serialized form from a
previously serialized #GVariant.

As a convenience, if @variant is %NULL, %NULL is returned.

See also: ide_location_to_variant()</doc>
        <source-position filename="src/libide/code/ide-location.h" line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="413">a #GVariant if succesful;
  otherwise %NULL.</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <parameter name="variant"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="404">a #GVariant or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_offset"
                   c:identifier="ide_location_new_with_offset">
        <source-position filename="src/libide/code/ide-location.h" line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="380">an #IdeLocation</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="375">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="376">a line number starting from 0, or -1 if unknown</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="377">a line offset starting from 0, or -1 if unknown</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="378">a charcter offset in file starting from 0, or -1 if unknown</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="ide_location_compare">
        <source-position filename="src/libide/code/ide-location.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup" c:identifier="ide_location_dup">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="299">Makes a deep copy of @self.</doc>
        <source-position filename="src/libide/code/ide-location.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="305">a new #IdeLocation</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="301">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_title" c:identifier="ide_location_dup_title">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="528">Gets a title string for the location, usually in the form of
  shortname:line:column</doc>
        <source-position filename="src/libide/code/ide-location.h" line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="535">A new string containing the
  something suitable to be used as a title for diagnostics.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="530">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="ide_location_equal">
        <source-position filename="src/libide/code/ide-location.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_location_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="227">Gets the file within the location.</doc>
        <source-position filename="src/libide/code/ide-location.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="233">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="229">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line"
              c:identifier="ide_location_get_line"
              glib:get-property="line">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="245">Gets the line within the #IdeLocation:file, or -1 if it is unknown.</doc>
        <source-position filename="src/libide/code/ide-location.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="251">the line number, or -1.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="247">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_line_offset"
              c:identifier="ide_location_get_line_offset"
              glib:get-property="line-offset">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="263">Gets the offset within the #IdeLocation:line, or -1 if it is unknown.</doc>
        <source-position filename="src/libide/code/ide-location.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="269">the line offset, or -1.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="265">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_offset"
              c:identifier="ide_location_get_offset"
              glib:get-property="offset">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="281">Gets the offset within the file in characters, or -1 if it is unknown.</doc>
        <source-position filename="src/libide/code/ide-location.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="287">the line offset, or -1.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="283">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="ide_location_hash">
        <source-position filename="src/libide/code/ide-location.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_location_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-location.c"
             line="325">Serializes the location into a variant that can be used to transport
across IPC boundaries.

This function will never return a variant with a floating reference.</doc>
        <source-position filename="src/libide/code/ide-location.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-location.c"
               line="334">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-location.c"
                 line="327">a #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <property name="line"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_line"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="line-offset"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_line_offset"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="offset"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_offset"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="title" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LocationClass"
            c:type="IdeLocationClass"
            glib:is-gtype-struct-for="Location">
      <source-position filename="src/libide/code/ide-location.h" line="44"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LogItem"
           c:symbol-prefix="log_item"
           c:type="IdeLogItem"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeLogItem"
           glib:get-type="ide_log_item_get_type"
           glib:type-struct="LogItemClass">
      <source-position filename="src/libide/core/ide-log-item.h" line="32"/>
      <method name="get_created_at"
              c:identifier="ide_log_item_get_created_at"
              glib:get-property="created-at"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-log-item.c"
             line="190">Gets the time the log item was created.</doc>
        <source-position filename="src/libide/core/ide-log-item.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-log-item.c"
               line="196">a #GDateTime</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-log-item.c"
                 line="192">a #IdeLogItem</doc>
            <type name="LogItem" c:type="IdeLogItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain"
              c:identifier="ide_log_item_get_domain"
              glib:get-property="domain"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-log-item.c"
             line="208">Get the domain for the log item.</doc>
        <source-position filename="src/libide/core/ide-log-item.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-log-item.c"
                 line="210">a #IdeLogItem</doc>
            <type name="LogItem" c:type="IdeLogItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="ide_log_item_get_message"
              glib:get-property="message"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-log-item.c"
             line="172">Gets the log message.</doc>
        <source-position filename="src/libide/core/ide-log-item.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-log-item.c"
               line="178">A string containing the log message</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-log-item.c"
                 line="174">a #IdeLogItem</doc>
            <type name="LogItem" c:type="IdeLogItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_severity"
              c:identifier="ide_log_item_get_severity"
              glib:get-property="severity"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-log-item.c"
             line="224">Gets the log item severity.</doc>
        <source-position filename="src/libide/core/ide-log-item.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-log-item.c"
                 line="226">a #IdeLogItem</doc>
            <type name="LogItem" c:type="IdeLogItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="created-at"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_created_at">
        <type name="GLib.DateTime"/>
      </property>
      <property name="domain"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_domain"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="message"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_message"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="severity"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_severity"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="LogItemClass"
            c:type="IdeLogItemClass"
            glib:is-gtype-struct-for="LogItem">
      <source-position filename="src/libide/core/ide-log-item.h" line="32"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="LspClient"
           c:symbol-prefix="lsp_client"
           c:type="IdeLspClient"
           parent="Object"
           glib:type-name="IdeLspClient"
           glib:get-type="ide_lsp_client_get_type"
           glib:type-struct="LspClientClass">
      <source-position filename="src/libide/lsp/ide-lsp-client.h" line="60"/>
      <constructor name="new" c:identifier="ide_lsp_client_new">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="63"/>
        <return-value transfer-ownership="full">
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <parameter name="io_stream" transfer-ownership="none">
            <type name="Gio.IOStream" c:type="GIOStream*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="initialized">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_configuration">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="55"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notification">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="published_diagnostics">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="diagnostics" transfer-ownership="none">
            <type name="Diagnostics" c:type="IdeDiagnostics*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_language">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_language" c:identifier="ide_lsp_client_add_language">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="language_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_async" c:identifier="ide_lsp_client_call_async">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2125">Asynchronously queries the Language Server using the JSON-RPC protocol.

If @params is floating, it's floating reference is consumed.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2127">An #IdeLspClient</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2128">the method to call</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2129">An #GVariant or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2130">A cancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2131">the callback to receive the result, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2132">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_finish"
              c:identifier="ide_lsp_client_call_finish"
              throws="1">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="return_value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_diagnostics_async"
              c:identifier="ide_lsp_client_get_diagnostics_async">
        <source-position filename="src/libide/lsp/ide-lsp-client.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="lang_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_diagnostics_finish"
              c:identifier="ide_lsp_client_get_diagnostics_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2338">Completes a request to ide_lsp_client_get_diagnostics_async().</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-client.c"
               line="2347">%TRUE if successful and @diagnostics is set, otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2340">an #IdeLspClient</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2341">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="diagnostics"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2342">A location for a #IdeDiagnostics or %NULL</doc>
            <type name="Diagnostics" c:type="IdeDiagnostics**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_initialization_options"
              c:identifier="ide_lsp_client_get_initialization_options"
              glib:get-property="initialization-options">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2483">Gets the initialization options for the client.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h"
                         line="124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-client.c"
               line="2489">a [struct@GLib.Variant] or %NULL</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2485">a [class@LspClient]</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server_capabilities"
              c:identifier="ide_lsp_client_get_server_capabilities"
              glib:get-property="server-capabilities">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2431">Gets the capabilities provided to us by the server after initializing.

This value is not available until after connecting and initializing
the connection.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-client.c"
               line="2440">a #GVariant that is a
  %G_VARIANT_TYPE_VARDICT or %NULL.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2433">a #IdeLspClient</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_trace" c:identifier="ide_lsp_client_get_trace">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="LspTrace" c:type="IdeLspTrace"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_notification_async"
              c:identifier="ide_lsp_client_send_notification_async">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2237">Asynchronously sends a notification to the Language Server.

If @params is floating, it's reference is consumed.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2239">An #IdeLspClient</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2240">the method to notification</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2241">An #GVariant or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2242">A cancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="notificationback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2243">the notificationback to receive the result, or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2244">user data for @notificationback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_notification_finish"
              c:identifier="ide_lsp_client_send_notification_finish"
              throws="1">
        <source-position filename="src/libide/lsp/ide-lsp-client.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initialization_options"
              c:identifier="ide_lsp_client_set_initialization_options"
              glib:set-property="initialization-options">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2453">Sets the `initilizationOptions` to send to the language server
when the server is initialized.

if @options is floating, the floating reference will be taken
when calling this function otherwise the reference count of
@options will be incremented by one.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2455">a [class@LspClient]</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="options"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2456">a #GVariant or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_lsp_client_set_name"
              glib:set-property="name"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="2501">Sets the name for the client.

This is useful in situations where you want to be able to have better
logging messages which include the LSP name.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2503">a #IdeLspClient</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-client.c"
                 line="2504">the name of the LSP like "gopls"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root_uri"
              c:identifier="ide_lsp_client_set_root_uri"
              glib:set-property="root-uri">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="root_uri" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_trace" c:identifier="ide_lsp_client_set_trace">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
          <parameter name="trace" transfer-ownership="none">
            <type name="LspTrace" c:type="IdeLspTrace"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ide_lsp_client_start">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ide_lsp_client_stop">
        <source-position filename="src/libide/lsp/ide-lsp-client.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="initialization-options"
                writable="1"
                transfer-ownership="none"
                setter="set_initialization_options"
                getter="get_initialization_options">
        <type name="GLib.Variant"/>
      </property>
      <property name="io-stream"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.IOStream"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="root-uri"
                writable="1"
                transfer-ownership="none"
                setter="set_root_uri">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="server-capabilities"
                transfer-ownership="none"
                getter="get_server_capabilities">
        <type name="GLib.Variant"/>
      </property>
      <property name="trace"
                introspectable="0"
                writable="1"
                transfer-ownership="none"
                default-value="IDE_LSP_TRACE_OFF">
        <type/>
      </property>
      <property name="use-markdown-in-diagnostics"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="initialized" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="load-configuration" when="last">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-client.c"
             line="1491">Loads the configuration object to reply to a workspace/configuration
request from the peer.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-client.c"
               line="1498">a #GVariant containing the result or %NULL
  to proceed to the next signal handler.</doc>
          <type name="GLib.Variant"/>
        </return-value>
      </glib:signal>
      <glib:signal name="notification" when="last" detailed="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="GLib.Variant"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="published-diagnostics" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Diagnostics"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="supports-language" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="LspClientClass"
            c:type="IdeLspClientClass"
            glib:is-gtype-struct-for="LspClient">
      <source-position filename="src/libide/lsp/ide-lsp-client.h" line="60"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="notification">
        <callback name="notification">
          <source-position filename="src/libide/lsp/ide-lsp-client.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspClient" c:type="IdeLspClient*"/>
            </parameter>
            <parameter name="method" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="params" transfer-ownership="none">
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_language">
        <callback name="supports_language">
          <source-position filename="src/libide/lsp/ide-lsp-client.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspClient" c:type="IdeLspClient*"/>
            </parameter>
            <parameter name="language_id" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="published_diagnostics">
        <callback name="published_diagnostics">
          <source-position filename="src/libide/lsp/ide-lsp-client.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspClient" c:type="IdeLspClient*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="diagnostics" transfer-ownership="none">
              <type name="Diagnostics" c:type="IdeDiagnostics*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_configuration">
        <callback name="load_configuration">
          <source-position filename="src/libide/lsp/ide-lsp-client.h"
                           line="55"/>
          <return-value transfer-ownership="full">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspClient" c:type="IdeLspClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="initialized">
        <callback name="initialized">
          <source-position filename="src/libide/lsp/ide-lsp-client.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspClient" c:type="IdeLspClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="15">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspCodeAction"
           c:symbol-prefix="lsp_code_action"
           c:type="IdeLspCodeAction"
           parent="GObject.Object"
           glib:type-name="IdeLspCodeAction"
           glib:get-type="ide_lsp_code_action_get_type"
           glib:type-struct="LspCodeActionClass">
      <source-position filename="src/libide/lsp/ide-lsp-code-action.h"
                       line="42"/>
      <implements name="CodeAction"/>
      <constructor name="new" c:identifier="ide_lsp_code_action_new">
        <source-position filename="src/libide/lsp/ide-lsp-code-action.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <type name="LspCodeAction" c:type="IdeLspCodeAction*"/>
        </return-value>
        <parameters>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="command" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arguments" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="workspace_edit" transfer-ownership="none">
            <type name="LspWorkspaceEdit" c:type="IdeLspWorkspaceEdit*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_client"
              c:identifier="ide_lsp_code_action_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-code-action.c"
             line="79">Gets the client to use for the code action.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-code-action.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-code-action.c"
               line="85">An #IdeLspClient or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-code-action.c"
                 line="81">a #IdeLspCodeAction</doc>
            <type name="LspCodeAction" c:type="IdeLspCodeAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_code_action_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-code-action.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCodeAction" c:type="IdeLspCodeAction*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="LspCodeActionClass"
            c:type="IdeLspCodeActionClass"
            glib:is-gtype-struct-for="LspCodeAction">
      <source-position filename="src/libide/lsp/ide-lsp-code-action.h"
                       line="42"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="LspCodeActionProvider"
           c:symbol-prefix="lsp_code_action_provider"
           c:type="IdeLspCodeActionProvider"
           parent="Object"
           glib:type-name="IdeLspCodeActionProvider"
           glib:get-type="ide_lsp_code_action_provider_get_type"
           glib:type-struct="LspCodeActionProviderClass">
      <source-position filename="src/libide/lsp/ide-lsp-code-action-provider.h"
                       line="41"/>
      <implements name="CodeActionProvider"/>
      <method name="get_client"
              c:identifier="ide_lsp_code_action_provider_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-code-action-provider.c"
             line="61">Gets the client to use for the code action query.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-code-action-provider.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-code-action-provider.c"
               line="67">An #IdeLspClient or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-code-action-provider.c"
                 line="63">a #IdeLspCodeActionProvider</doc>
            <type name="LspCodeActionProvider"
                  c:type="IdeLspCodeActionProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_diagnostics"
              c:identifier="ide_lsp_code_action_provider_get_diagnostics"
              glib:get-property="diagnostics">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-code-action-provider.c"
             line="79">Gets the diagnostics to use for the code action query.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-code-action-provider.h"
                         line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-code-action-provider.c"
               line="85">An #IdeDiagnostics or %NULL.</doc>
          <type name="Diagnostics" c:type="IdeDiagnostics*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-code-action-provider.c"
                 line="81">a #IdeLspCodeActionProvider</doc>
            <type name="LspCodeActionProvider"
                  c:type="IdeLspCodeActionProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_code_action_provider_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-code-action-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCodeActionProvider"
                  c:type="IdeLspCodeActionProvider*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <property name="diagnostics"
                writable="1"
                transfer-ownership="none"
                getter="get_diagnostics">
        <type name="Diagnostics"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspCodeActionProviderClass"
            c:type="IdeLspCodeActionProviderClass"
            glib:is-gtype-struct-for="LspCodeActionProvider">
      <source-position filename="src/libide/lsp/ide-lsp-code-action-provider.h"
                       line="41"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="LspCompletionItem"
           c:symbol-prefix="lsp_completion_item"
           c:type="IdeLspCompletionItem"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeLspCompletionItem"
           glib:get-type="ide_lsp_completion_item_get_type"
           glib:type-struct="LspCompletionItemClass">
      <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                       line="34"/>
      <implements name="GtkSource.CompletionProposal"/>
      <constructor name="new" c:identifier="ide_lsp_completion_item_new">
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="display" c:identifier="ide_lsp_completion_item_display">
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
          </instance-parameter>
          <parameter name="cell" transfer-ownership="none">
            <type name="GtkSource.CompletionCell"
                  c:type="GtkSourceCompletionCell*"/>
          </parameter>
          <parameter name="typed_text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_additional_text_edits"
              c:identifier="ide_lsp_completion_item_get_additional_text_edits">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-completion-item.c"
             line="251">Obtain an array of all additional text edits to be applied to the project.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="48"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-completion-item.c"
               line="258">a #GPtrArray of #IdeTextEdit</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="TextEdit"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-completion-item.c"
                 line="253">a #IdeLspCompletionItem</doc>
            <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-completion-item.c"
                 line="254">The file the completion is applied to</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_detail"
              c:identifier="ide_lsp_completion_item_get_detail">
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_lsp_completion_item_get_icon_name">
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_return_type"
              c:identifier="ide_lsp_completion_item_get_return_type">
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snippet"
              c:identifier="ide_lsp_completion_item_get_snippet">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-completion-item.c"
             line="191">Creates a new snippet for the completion item to be inserted into
the document.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-completion-item.c"
               line="198">an #GtkSourceSnippet</doc>
          <type name="GtkSource.Snippet" c:type="GtkSourceSnippet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-completion-item.c"
                 line="193">a #IdeLspCompletionItem</doc>
            <type name="LspCompletionItem" c:type="IdeLspCompletionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="LspCompletionItemClass"
            c:type="IdeLspCompletionItemClass"
            glib:is-gtype-struct-for="LspCompletionItem">
      <source-position filename="src/libide/lsp/ide-lsp-completion-item.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LspCompletionKind" c:type="IdeLspCompletionKind">
      <source-position filename="src/libide/lsp/ide-lsp-types.h" line="56"/>
      <member name="text" value="1" c:identifier="IDE_LSP_COMPLETION_TEXT">
      </member>
      <member name="method" value="2" c:identifier="IDE_LSP_COMPLETION_METHOD">
      </member>
      <member name="function"
              value="3"
              c:identifier="IDE_LSP_COMPLETION_FUNCTION">
      </member>
      <member name="constructor"
              value="4"
              c:identifier="IDE_LSP_COMPLETION_CONSTRUCTOR">
      </member>
      <member name="field" value="5" c:identifier="IDE_LSP_COMPLETION_FIELD">
      </member>
      <member name="variable"
              value="6"
              c:identifier="IDE_LSP_COMPLETION_VARIABLE">
      </member>
      <member name="class" value="7" c:identifier="IDE_LSP_COMPLETION_CLASS">
      </member>
      <member name="interface"
              value="8"
              c:identifier="IDE_LSP_COMPLETION_INTERFACE">
      </member>
      <member name="module" value="9" c:identifier="IDE_LSP_COMPLETION_MODULE">
      </member>
      <member name="property"
              value="10"
              c:identifier="IDE_LSP_COMPLETION_PROPERTY">
      </member>
      <member name="unit" value="11" c:identifier="IDE_LSP_COMPLETION_UNIT">
      </member>
      <member name="value" value="12" c:identifier="IDE_LSP_COMPLETION_VALUE">
      </member>
      <member name="enum" value="13" c:identifier="IDE_LSP_COMPLETION_ENUM">
      </member>
      <member name="keyword"
              value="14"
              c:identifier="IDE_LSP_COMPLETION_KEYWORD">
      </member>
      <member name="snippet"
              value="15"
              c:identifier="IDE_LSP_COMPLETION_SNIPPET">
      </member>
      <member name="color" value="16" c:identifier="IDE_LSP_COMPLETION_COLOR">
      </member>
      <member name="file" value="17" c:identifier="IDE_LSP_COMPLETION_FILE">
      </member>
      <member name="reference"
              value="18"
              c:identifier="IDE_LSP_COMPLETION_REFERENCE">
      </member>
      <member name="folder"
              value="19"
              c:identifier="IDE_LSP_COMPLETION_FOLDER">
      </member>
      <member name="enum_member"
              value="20"
              c:identifier="IDE_LSP_COMPLETION_ENUM_MEMBER">
      </member>
      <member name="constant"
              value="21"
              c:identifier="IDE_LSP_COMPLETION_CONSTANT">
      </member>
      <member name="struct"
              value="22"
              c:identifier="IDE_LSP_COMPLETION_STRUCT">
      </member>
      <member name="event" value="23" c:identifier="IDE_LSP_COMPLETION_EVENT">
      </member>
      <member name="operator"
              value="24"
              c:identifier="IDE_LSP_COMPLETION_OPERATOR">
      </member>
      <member name="type_parameter"
              value="25"
              c:identifier="IDE_LSP_COMPLETION_TYPE_PARAMETER">
      </member>
    </enumeration>
    <class name="LspCompletionProvider"
           c:symbol-prefix="lsp_completion_provider"
           c:type="IdeLspCompletionProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspCompletionProvider"
           glib:get-type="ide_lsp_completion_provider_get_type"
           glib:type-struct="LspCompletionProviderClass">
      <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                       line="44"/>
      <implements name="GtkSource.CompletionProvider"/>
      <virtual-method name="load">
        <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionProvider"
                  c:type="IdeLspCompletionProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_client"
              c:identifier="ide_lsp_completion_provider_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-completion-provider.c"
             line="140">Gets the client for the completion provider.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-completion-provider.c"
               line="146">An #IdeLspClient or %NULL</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-completion-provider.c"
                 line="142">An #IdeLspCompletionProvider</doc>
            <type name="LspCompletionProvider"
                  c:type="IdeLspCompletionProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_completion_provider_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionProvider"
                  c:type="IdeLspCompletionProvider*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspCompletionProviderClass"
            c:type="IdeLspCompletionProviderClass"
            glib:is-gtype-struct-for="LspCompletionProvider">
      <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                       line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/lsp/ide-lsp-completion-provider.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspCompletionProvider"
                    c:type="IdeLspCompletionProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LspCompletionResults"
           c:symbol-prefix="lsp_completion_results"
           c:type="IdeLspCompletionResults"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeLspCompletionResults"
           glib:get-type="ide_lsp_completion_results_get_type"
           glib:type-struct="LspCompletionResultsClass">
      <source-position filename="src/libide/lsp/ide-lsp-completion-results.h"
                       line="34"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_lsp_completion_results_new">
        <source-position filename="src/libide/lsp/ide-lsp-completion-results.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="LspCompletionResults" c:type="IdeLspCompletionResults*"/>
        </return-value>
        <parameters>
          <parameter name="results" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="refilter"
              c:identifier="ide_lsp_completion_results_refilter">
        <source-position filename="src/libide/lsp/ide-lsp-completion-results.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspCompletionResults"
                  c:type="IdeLspCompletionResults*"/>
          </instance-parameter>
          <parameter name="typed_text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="LspCompletionResultsClass"
            c:type="IdeLspCompletionResultsClass"
            glib:is-gtype-struct-for="LspCompletionResults">
      <source-position filename="src/libide/lsp/ide-lsp-completion-results.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="LspDiagnostic"
           c:symbol-prefix="lsp_diagnostic"
           c:type="IdeLspDiagnostic"
           parent="Diagnostic"
           glib:type-name="IdeLspDiagnostic"
           glib:get-type="ide_lsp_diagnostic_get_type"
           glib:type-struct="LspDiagnosticClass">
      <source-position filename="src/libide/lsp/ide-lsp-diagnostic.h"
                       line="42"/>
      <constructor name="new" c:identifier="ide_lsp_diagnostic_new">
        <source-position filename="src/libide/lsp/ide-lsp-diagnostic.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <type name="LspDiagnostic" c:type="IdeLspDiagnostic*"/>
        </return-value>
        <parameters>
          <parameter name="severity" transfer-ownership="none">
            <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="raw_value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="dup_raw" c:identifier="ide_lsp_diagnostic_dup_raw">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-diagnostic.c"
             line="133">Increments the reference count of the underlying diagnostic variant and
returns it.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-diagnostic.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-diagnostic.c"
               line="140">a #GVariant with it's reference count incremented</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-diagnostic.c"
                 line="135">an #IdeLspDiagnostic</doc>
            <type name="LspDiagnostic" c:type="IdeLspDiagnostic*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="raw"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.Variant"/>
      </property>
      <field name="parent_instance">
        <type name="Diagnostic" c:type="IdeDiagnostic"/>
      </field>
    </class>
    <record name="LspDiagnosticClass"
            c:type="IdeLspDiagnosticClass"
            glib:is-gtype-struct-for="LspDiagnostic">
      <source-position filename="src/libide/lsp/ide-lsp-diagnostic.h"
                       line="42"/>
      <field name="parent_class">
        <type name="DiagnosticClass" c:type="IdeDiagnosticClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspDiagnosticProvider"
           c:symbol-prefix="lsp_diagnostic_provider"
           c:type="IdeLspDiagnosticProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspDiagnosticProvider"
           glib:get-type="ide_lsp_diagnostic_provider_get_type"
           glib:type-struct="LspDiagnosticProviderClass">
      <source-position filename="src/libide/lsp/ide-lsp-diagnostic-provider.h"
                       line="44"/>
      <implements name="DiagnosticProvider"/>
      <method name="get_client"
              c:identifier="ide_lsp_diagnostic_provider_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-diagnostic-provider.c"
             line="221">Gets the client used by diagnostic provider.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-diagnostic-provider.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-diagnostic-provider.c"
               line="226">An #IdeLspClient or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspDiagnosticProvider"
                  c:type="IdeLspDiagnosticProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_diagnostic_provider_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-diagnostic-provider.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspDiagnosticProvider"
                  c:type="IdeLspDiagnosticProvider*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspDiagnosticProviderClass"
            c:type="IdeLspDiagnosticProviderClass"
            glib:is-gtype-struct-for="LspDiagnosticProvider">
      <source-position filename="src/libide/lsp/ide-lsp-diagnostic-provider.h"
                       line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspFormatter"
           c:symbol-prefix="lsp_formatter"
           c:type="IdeLspFormatter"
           parent="Object"
           glib:type-name="IdeLspFormatter"
           glib:get-type="ide_lsp_formatter_get_type"
           glib:type-struct="LspFormatterClass">
      <source-position filename="src/libide/lsp/ide-lsp-formatter.h"
                       line="41"/>
      <implements name="Formatter"/>
      <method name="get_client"
              c:identifier="ide_lsp_formatter_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-formatter.c"
             line="51">Gets the client to use for the formatter.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-formatter.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-formatter.c"
               line="57">An #IdeLspClient or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-formatter.c"
                 line="53">a #IdeLspFormatter</doc>
            <type name="LspFormatter" c:type="IdeLspFormatter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_formatter_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-formatter.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspFormatter" c:type="IdeLspFormatter*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspFormatterClass"
            c:type="IdeLspFormatterClass"
            glib:is-gtype-struct-for="LspFormatter">
      <source-position filename="src/libide/lsp/ide-lsp-formatter.h"
                       line="41"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="LspHighlighter"
           c:symbol-prefix="lsp_highlighter"
           c:type="IdeLspHighlighter"
           parent="Object"
           glib:type-name="IdeLspHighlighter"
           glib:get-type="ide_lsp_highlighter_get_type"
           glib:type-struct="LspHighlighterClass">
      <source-position filename="src/libide/lsp/ide-lsp-highlighter.h"
                       line="44"/>
      <implements name="Highlighter"/>
      <method name="get_client"
              c:identifier="ide_lsp_highlighter_get_client"
              glib:get-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-highlighter.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-highlighter.c"
               line="377">An #IdeLspHighlighter or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspHighlighter" c:type="IdeLspHighlighter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_highlighter_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-highlighter.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspHighlighter" c:type="IdeLspHighlighter*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind_style"
              c:identifier="ide_lsp_highlighter_set_kind_style">
        <source-position filename="src/libide/lsp/ide-lsp-highlighter.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspHighlighter" c:type="IdeLspHighlighter*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="SymbolKind" c:type="IdeSymbolKind"/>
          </parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspHighlighterClass"
            c:type="IdeLspHighlighterClass"
            glib:is-gtype-struct-for="LspHighlighter">
      <source-position filename="src/libide/lsp/ide-lsp-highlighter.h"
                       line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspHoverProvider"
           c:symbol-prefix="lsp_hover_provider"
           c:type="IdeLspHoverProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspHoverProvider"
           glib:get-type="ide_lsp_hover_provider_get_type"
           glib:type-struct="LspHoverProviderClass">
      <source-position filename="src/libide/lsp/ide-lsp-hover-provider.h"
                       line="41"/>
      <implements name="GtkSource.HoverProvider"/>
      <virtual-method name="prepare">
        <source-position filename="src/libide/lsp/ide-lsp-hover-provider.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspHoverProvider" c:type="IdeLspHoverProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_client"
              c:identifier="ide_lsp_hover_provider_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-hover-provider.c"
             line="449">Gets the client that is used for communication.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-hover-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-hover-provider.c"
               line="455">an #IdeLspClient or %NULL</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-hover-provider.c"
                 line="451">an #IdeLspHoverProvider</doc>
            <type name="LspHoverProvider" c:type="IdeLspHoverProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_hover_provider_set_client"
              glib:set-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-hover-provider.c"
             line="467">Sets the client to be used to query for hover information.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-hover-provider.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-hover-provider.c"
                 line="469">an #IdeLspHoverProvider</doc>
            <type name="LspHoverProvider" c:type="IdeLspHoverProvider*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-hover-provider.c"
                 line="470">an #IdeLspClient</doc>
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="category"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-hover-provider.c"
             line="260">The "category" property is the category name to use when displaying
the hover contents.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-hover-provider.c"
             line="247">The "client" property is the #IdeLspClient that should be used to
communicate with the Language Server peer process.</doc>
        <type name="LspClient"/>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspHoverProviderClass"
            c:type="IdeLspHoverProviderClass"
            glib:is-gtype-struct-for="LspHoverProvider">
      <source-position filename="src/libide/lsp/ide-lsp-hover-provider.h"
                       line="41"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <source-position filename="src/libide/lsp/ide-lsp-hover-provider.h"
                           line="40"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspHoverProvider" c:type="IdeLspHoverProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="LspRenameProvider"
           c:symbol-prefix="lsp_rename_provider"
           c:type="IdeLspRenameProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspRenameProvider"
           glib:get-type="ide_lsp_rename_provider_get_type"
           glib:type-struct="LspRenameProviderClass">
      <source-position filename="src/libide/lsp/ide-lsp-rename-provider.h"
                       line="44"/>
      <implements name="RenameProvider"/>
      <method name="get_client"
              c:identifier="ide_lsp_rename_provider_get_client"
              glib:get-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-rename-provider.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-rename-provider.c"
               line="287">an #IdeLspClient or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspRenameProvider" c:type="IdeLspRenameProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_rename_provider_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-rename-provider.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspRenameProvider" c:type="IdeLspRenameProvider*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="buffer"
                readable="0"
                writable="1"
                transfer-ownership="none">
        <type name="Buffer"/>
      </property>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspRenameProviderClass"
            c:type="IdeLspRenameProviderClass"
            glib:is-gtype-struct-for="LspRenameProvider">
      <source-position filename="src/libide/lsp/ide-lsp-rename-provider.h"
                       line="44"/>
      <field name="parent_instance">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspSearchProvider"
           c:symbol-prefix="lsp_search_provider"
           c:type="IdeLspSearchProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspSearchProvider"
           glib:get-type="ide_lsp_search_provider_get_type"
           glib:type-struct="LspSearchProviderClass">
      <source-position filename="src/libide/lsp/ide-lsp-search-provider.h"
                       line="42"/>
      <implements name="SearchProvider"/>
      <method name="get_client"
              c:identifier="ide_lsp_search_provider_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-search-provider.c"
             line="53">Gets the client for the search provider.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-search-provider.h"
                         line="45"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-search-provider.c"
               line="59">An #IdeLspClient or %NULL</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-search-provider.c"
                 line="55">An #IdeLspSearchProvider</doc>
            <type name="LspSearchProvider" c:type="IdeLspSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_search_provider_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-search-provider.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspSearchProvider" c:type="IdeLspSearchProvider*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspSearchProviderClass"
            c:type="IdeLspSearchProviderClass"
            glib:is-gtype-struct-for="LspSearchProvider">
      <source-position filename="src/libide/lsp/ide-lsp-search-provider.h"
                       line="42"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspService"
           c:symbol-prefix="lsp_service"
           c:type="IdeLspService"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspService"
           glib:get-type="ide_lsp_service_get_type"
           glib:type-struct="LspServiceClass">
      <source-position filename="src/libide/lsp/ide-lsp-service.h" line="50"/>
      <virtual-method name="configure_client">
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="configure_supervisor">
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
          <parameter name="supervisor" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_run_context">
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_inherit_stderr"
              c:identifier="ide_lsp_service_get_inherit_stderr"
              glib:get-property="inherit-stderr">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="453">Gets whether the language server process's stderr output should be passed to Builder's.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-service.c"
               line="459">%TRUE if the subprocess inherits stderr, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="455">a [class@LspService]</doc>
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_program"
              c:identifier="ide_lsp_service_get_program"
              glib:get-property="program">
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_path"
              c:identifier="ide_lsp_service_get_search_path"
              glib:get-property="search-path">
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="restart" c:identifier="ide_lsp_service_restart">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="639">Restarts the service and its associated process.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="641">a [class@LspService]</doc>
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_inherit_stderr"
              c:identifier="ide_lsp_service_set_inherit_stderr"
              glib:set-property="inherit-stderr">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="472">Gets whether the language server process's stderr output should be passed to Builder's.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="474">a [class@LspService]</doc>
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
          <parameter name="inherit_stderr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="475">%TRUE to enable stderr, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_program"
              c:identifier="ide_lsp_service_set_program"
              glib:set-property="program">
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
          <parameter name="program" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_path"
              c:identifier="ide_lsp_service_set_search_path"
              glib:set-property="search-path">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="856">Sets an alternate search path to use when discovering programs on
the host system.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="858">a #IdeLspService</doc>
            <type name="LspService" c:type="IdeLspService*"/>
          </instance-parameter>
          <parameter name="search_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="859">
  a search path to apply when searching the host or %NULL.</doc>
            <array c:type="const char* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="client" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="382">The [class@LspClient] provided by the service, or %NULL if it has not been started yet.</doc>
        <type name="LspClient"/>
      </property>
      <property name="inherit-stderr"
                writable="1"
                transfer-ownership="none"
                setter="set_inherit_stderr"
                getter="get_inherit_stderr"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="433">If inherit-stderr is enabled, the language server process's stderr is passed through to Builder's.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="program"
                writable="1"
                transfer-ownership="none"
                setter="set_program"
                getter="get_program"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="394">The "program" property contains the name of the executable to
launch. If this is set, the create-launcher signal will use it
to locate and execute the program if found.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="search-path"
                writable="1"
                transfer-ownership="none"
                setter="set_search_path"
                getter="get_search_path">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="408">An alternate search path to locate the program on the host.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="supervisor" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="420">The [class@SubprocessSupervisor] that manages the language server process, or %NULL if the
service is not running.</doc>
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspServiceClass"
            c:type="IdeLspServiceClass"
            glib:is-gtype-struct-for="LspService">
      <source-position filename="src/libide/lsp/ide-lsp-service.h" line="50"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="configure_supervisor">
        <callback name="configure_supervisor">
          <source-position filename="src/libide/lsp/ide-lsp-service.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspService" c:type="IdeLspService*"/>
            </parameter>
            <parameter name="supervisor" transfer-ownership="none">
              <type name="SubprocessSupervisor"
                    c:type="IdeSubprocessSupervisor*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="configure_client">
        <callback name="configure_client">
          <source-position filename="src/libide/lsp/ide-lsp-service.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="LspService" c:type="IdeLspService*"/>
            </parameter>
            <parameter name="client" transfer-ownership="none">
              <type name="LspClient" c:type="IdeLspClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_run_context">
        <callback name="prepare_run_context">
          <source-position filename="src/libide/lsp/ide-lsp-service.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="LspService" c:type="IdeLspService*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <method name="bind_client"
              c:identifier="ide_lsp_service_class_bind_client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="794">Binds the "client" property of @property to its context's instance of
@klass. If the language server is not running yet, it will be started.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="796">a [class@LspService] class structure</doc>
            <type name="LspServiceClass" c:type="IdeLspServiceClass*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="797">an [class@Object]</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_client_lazy"
              c:identifier="ide_lsp_service_class_bind_client_lazy">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-service.c"
             line="809">Like ide_lsp_service_bind_client() but will not immediately spawn
the language server.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-service.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="811">a [class@LspService] class structure</doc>
            <type name="LspServiceClass" c:type="IdeLspServiceClass*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/lsp/ide-lsp-service.c"
                 line="812">an [class@Object]</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <class name="LspSymbolNode"
           c:symbol-prefix="lsp_symbol_node"
           c:type="IdeLspSymbolNode"
           parent="SymbolNode"
           final="1"
           glib:type-name="IdeLspSymbolNode"
           glib:get-type="ide_lsp_symbol_node_get_type"
           glib:type-struct="LspSymbolNodeClass">
      <source-position filename="src/libide/lsp/ide-lsp-symbol-node.h"
                       line="34"/>
      <method name="get_parent_name"
              c:identifier="ide_lsp_symbol_node_get_parent_name">
        <source-position filename="src/libide/lsp/ide-lsp-symbol-node.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspSymbolNode" c:type="IdeLspSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_parent_of"
              c:identifier="ide_lsp_symbol_node_is_parent_of">
        <source-position filename="src/libide/lsp/ide-lsp-symbol-node.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspSymbolNode" c:type="IdeLspSymbolNode*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="LspSymbolNode" c:type="IdeLspSymbolNode*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="LspSymbolNodeClass"
            c:type="IdeLspSymbolNodeClass"
            glib:is-gtype-struct-for="LspSymbolNode">
      <source-position filename="src/libide/lsp/ide-lsp-symbol-node.h"
                       line="34"/>
      <field name="parent_class">
        <type name="SymbolNodeClass" c:type="IdeSymbolNodeClass"/>
      </field>
    </record>
    <class name="LspSymbolResolver"
           c:symbol-prefix="lsp_symbol_resolver"
           c:type="IdeLspSymbolResolver"
           parent="Object"
           abstract="1"
           glib:type-name="IdeLspSymbolResolver"
           glib:get-type="ide_lsp_symbol_resolver_get_type"
           glib:type-struct="LspSymbolResolverClass">
      <source-position filename="src/libide/lsp/ide-lsp-symbol-resolver.h"
                       line="44"/>
      <implements name="SymbolResolver"/>
      <method name="get_client"
              c:identifier="ide_lsp_symbol_resolver_get_client"
              glib:get-property="client">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-symbol-resolver.c"
             line="379">Gets the client used by the symbol resolver.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-symbol-resolver.h"
                         line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-symbol-resolver.c"
               line="384">An #IdeLspClient or %NULL.</doc>
          <type name="LspClient" c:type="IdeLspClient*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspSymbolResolver" c:type="IdeLspSymbolResolver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_client"
              c:identifier="ide_lsp_symbol_resolver_set_client"
              glib:set-property="client">
        <source-position filename="src/libide/lsp/ide-lsp-symbol-resolver.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspSymbolResolver" c:type="IdeLspSymbolResolver*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <type name="LspClient" c:type="IdeLspClient*"/>
          </parameter>
        </parameters>
      </method>
      <property name="client"
                writable="1"
                transfer-ownership="none"
                setter="set_client"
                getter="get_client">
        <type name="LspClient"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="LspSymbolResolverClass"
            c:type="IdeLspSymbolResolverClass"
            glib:is-gtype-struct-for="LspSymbolResolver">
      <source-position filename="src/libide/lsp/ide-lsp-symbol-resolver.h"
                       line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="LspSymbolTree"
           c:symbol-prefix="lsp_symbol_tree"
           c:type="IdeLspSymbolTree"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeLspSymbolTree"
           glib:get-type="ide_lsp_symbol_tree_get_type"
           glib:type-struct="LspSymbolTreeClass">
      <source-position filename="src/libide/lsp/ide-lsp-symbol-tree.h"
                       line="34"/>
      <implements name="SymbolTree"/>
    </class>
    <record name="LspSymbolTreeClass"
            c:type="IdeLspSymbolTreeClass"
            glib:is-gtype-struct-for="LspSymbolTree">
      <source-position filename="src/libide/lsp/ide-lsp-symbol-tree.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="LspTrace" c:type="IdeLspTrace">
      <source-position filename="src/libide/lsp/ide-lsp-client.h" line="41"/>
      <member name="off" value="0" c:identifier="IDE_LSP_TRACE_OFF">
      </member>
      <member name="messages" value="1" c:identifier="IDE_LSP_TRACE_MESSAGES">
      </member>
      <member name="verbose" value="2" c:identifier="IDE_LSP_TRACE_VERBOSE">
      </member>
    </enumeration>
    <class name="LspWorkspaceEdit"
           c:symbol-prefix="lsp_workspace_edit"
           c:type="IdeLspWorkspaceEdit"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeLspWorkspaceEdit"
           glib:get-type="ide_lsp_workspace_edit_get_type"
           glib:type-struct="LspWorkspaceEditClass">
      <source-position filename="src/libide/lsp/ide-lsp-workspace-edit.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_lsp_workspace_edit_new">
        <source-position filename="src/libide/lsp/ide-lsp-workspace-edit.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="LspWorkspaceEdit" c:type="IdeLspWorkspaceEdit*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_edits" c:identifier="ide_lsp_workspace_edit_get_edits">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-workspace-edit.c"
             line="75">Returns the list of text edits that this workspace edit contains.</doc>
        <source-position filename="src/libide/lsp/ide-lsp-workspace-edit.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-workspace-edit.c"
               line="80">a #GPtrArray of #IdeTextEdit.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="TextEdit"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="LspWorkspaceEdit" c:type="IdeLspWorkspaceEdit*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="LspWorkspaceEditClass"
            c:type="IdeLspWorkspaceEditClass"
            glib:is-gtype-struct-for="LspWorkspaceEdit">
      <source-position filename="src/libide/lsp/ide-lsp-workspace-edit.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <constant name="MAJOR_VERSION" value="45" c:type="IDE_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="50">libide major version component (e.g. 43 if %IDE_VERSION is 43.1)</doc>
      <source-position filename="src/libide/core/ide-version.h" line="55"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="0" c:type="IDE_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="57">libide minor version component (e.g. 1 if %IDE_VERSION is 43.1)</doc>
      <source-position filename="src/libide/core/ide-version.h" line="62"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <record name="MarkedContent"
            c:type="IdeMarkedContent"
            opaque="1"
            glib:type-name="IdeMarkedContent"
            glib:get-type="ide_marked_content_get_type"
            c:symbol-prefix="marked_content">
      <source-position filename="src/libide/io/ide-marked-content.h"
                       line="33"/>
      <constructor name="new" c:identifier="ide_marked_content_new">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="42">Creates a new #IdeMarkedContent using the bytes provided.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-marked-content.c"
               line="49">an #IdeMarkedContent</doc>
          <type name="MarkedContent" c:type="IdeMarkedContent*"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="44">a #GBytes containing the markup</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="45">an #IdeMakredKind describing the markup kind</doc>
            <type name="MarkedKind" c:type="IdeMarkedKind"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_data"
                   c:identifier="ide_marked_content_new_from_data">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="86">Creates a new #IdeMarkedContent from the provided data.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-marked-content.c"
               line="94">an #IdeMarkedContent</doc>
          <type name="MarkedContent" c:type="IdeMarkedContent*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="88">the data for the content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="89">the length of the data, or -1 to strlen() @data</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="90">the kind of markup</doc>
            <type name="MarkedKind" c:type="IdeMarkedKind"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_plaintext"
                   c:identifier="ide_marked_content_new_plaintext">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="68">Creates a new #IdeMarkedContent of type %IDE_MARKED_KIND_PLAINTEXT
with the contents of @string.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-marked-content.c"
               line="75">an #IdeMarkedContent</doc>
          <type name="MarkedContent" c:type="IdeMarkedContent*"/>
        </return-value>
        <parameters>
          <parameter name="plaintext"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="70">a string containing the plaintext</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="as_string" c:identifier="ide_marked_content_as_string">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="195">Gets the contents of the marked content as a C string.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-marked-content.c"
               line="202">the content as a string or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="197">a #IdeMarkedContent</doc>
            <type name="MarkedContent" c:type="IdeMarkedContent*"/>
          </instance-parameter>
          <parameter name="len"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="198">Location to store the length of the returned strings in bytes, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bytes" c:identifier="ide_marked_content_get_bytes">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="178">Gets the bytes for the marked content.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-marked-content.c"
               line="183">a #GBytes</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MarkedContent" c:type="IdeMarkedContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="ide_marked_content_get_kind">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="158">Gets the kind of markup that @self contains.

This is used to display the content appropriately.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="MarkedKind" c:type="IdeMarkedKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="160">an #IdeMarkedContent</doc>
            <type name="MarkedContent" c:type="IdeMarkedContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_marked_content_ref">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="111">Increments the reference count of @self by one.

When a #IdeMarkedContent reaches a reference count of zero, by using
ide_marked_content_unref(), it will be freed.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-marked-content.c"
               line="120">@self with the reference count incremented</doc>
          <type name="MarkedContent" c:type="IdeMarkedContent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="113">an #IdeMarkedContent</doc>
            <type name="MarkedContent" c:type="IdeMarkedContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_marked_content_unref">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-marked-content.c"
             line="134">Decrements the reference count of @self by one.

When the reference count of @self reaches zero, it will be freed.</doc>
        <source-position filename="src/libide/io/ide-marked-content.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-marked-content.c"
                 line="136">an #IdeMarkedContent</doc>
            <type name="MarkedContent" c:type="IdeMarkedContent*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="MarkedKind" c:type="IdeMarkedKind">
      <source-position filename="src/libide/io/ide-marked-content.h"
                       line="41"/>
      <member name="plaintext"
              value="0"
              c:identifier="IDE_MARKED_KIND_PLAINTEXT">
      </member>
      <member name="markdown"
              value="1"
              c:identifier="IDE_MARKED_KIND_MARKDOWN">
      </member>
      <member name="html" value="2" c:identifier="IDE_MARKED_KIND_HTML">
      </member>
      <member name="pango" value="3" c:identifier="IDE_MARKED_KIND_PANGO">
      </member>
    </enumeration>
    <class name="MarkedView"
           c:symbol-prefix="marked_view"
           c:type="IdeMarkedView"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeMarkedView"
           glib:get-type="ide_marked_view_get_type"
           glib:type-struct="MarkedViewClass">
      <source-position filename="src/libide/gui/ide-marked-view.h" line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_marked_view_new">
        <source-position filename="src/libide/gui/ide-marked-view.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <type name="MarkedContent" c:type="IdeMarkedContent*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="MarkedViewClass"
            c:type="IdeMarkedViewClass"
            glib:is-gtype-struct-for="MarkedView">
      <source-position filename="src/libide/gui/ide-marked-view.h" line="37"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="MenuManager"
           c:symbol-prefix="menu_manager"
           c:type="IdeMenuManager"
           parent="GObject.Object"
           glib:type-name="IdeMenuManager"
           glib:get-type="ide_menu_manager_get_type"
           glib:type-struct="MenuManagerClass">
      <doc xml:space="preserve"
           filename="src/libide/gtk/ide-menu-manager.c"
           line="42">The goal of #IdeMenuManager is to simplify the process of merging multiple
GtkBuilder .ui files containing menus into a single representation of the
application menus. Additionally, it provides the ability to "unmerge"
previously merged menus.

This allows for an application to have plugins which seemlessly extends
the core application menus.

Implementation notes:

To make this work, we don't use the GMenu instances created by a GtkBuilder
instance. Instead, we create the menus ourself and recreate section and
submenu links. This allows the #IdeMenuManager to be in full control of
the generated menus.

ide_menu_manager_get_menu_by_id() will always return a #GMenu, however
that menu may contain no children until something has extended it later
on during the application process.</doc>
      <source-position filename="src/libide/gtk/ide-menu-manager.h" line="34"/>
      <constructor name="new" c:identifier="ide_menu_manager_new">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="MenuManager" c:type="IdeMenuManager*"/>
        </return-value>
      </constructor>
      <method name="add_filename"
              c:identifier="ide_menu_manager_add_filename"
              throws="1">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource"
              c:identifier="ide_menu_manager_add_resource"
              throws="1">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="resource" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_item_by_id"
              c:identifier="ide_menu_manager_find_item_by_id">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-menu-manager.c"
             line="726">Locates a menu item that matches @id and sets the position within
the resulting #GMenu to @position.

If no match is found, %NULL is returned.</doc>
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-menu-manager.c"
               line="737">a #GMenu if successful; otherwise
  %NULL and @position is unset.</doc>
          <type name="Gio.Menu" c:type="GMenu*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-menu-manager.c"
                 line="728">a #IdeMenuManager</doc>
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-menu-manager.c"
                 line="729">the identifier of the menu item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="position"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-menu-manager.c"
                 line="730">the position within the resulting menu</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_by_id"
              c:identifier="ide_menu_manager_get_menu_by_id">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-menu-manager.c"
               line="637">A #GMenu.</doc>
          <type name="Gio.Menu" c:type="GMenu*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_ids" c:identifier="ide_menu_manager_get_menu_ids">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="merge" c:identifier="ide_menu_manager_merge">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_menu_manager_remove">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-menu-manager.c"
             line="585">This removes items from menus that were added as part of a previous
menu merge. Use the value returned from ide_menu_manager_merge() as
the @merge_id.</doc>
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-menu-manager.c"
                 line="587">a #IdeMenuManager</doc>
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="merge_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-menu-manager.c"
                 line="588">A previously registered merge id</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_attribute_string"
              c:identifier="ide_menu_manager_set_attribute_string">
        <source-position filename="src/libide/gtk/ide-menu-manager.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="MenuManager" c:type="IdeMenuManager*"/>
          </instance-parameter>
          <parameter name="menu" transfer-ownership="none">
            <type name="Gio.Menu" c:type="GMenu*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="attribute" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="MenuManagerClass"
            c:type="IdeMenuManagerClass"
            glib:is-gtype-struct-for="MenuManager">
      <source-position filename="src/libide/gtk/ide-menu-manager.h" line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Notification"
           c:symbol-prefix="notification"
           c:type="IdeNotification"
           parent="Object"
           glib:type-name="IdeNotification"
           glib:get-type="ide_notification_get_type"
           glib:type-struct="NotificationClass">
      <source-position filename="src/libide/core/ide-notification.h"
                       line="38"/>
      <constructor name="new" c:identifier="ide_notification_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="372">Creates a new #IdeNotification.

To "send" the notification, you should attach it to the #IdeNotifications
object which can be found under the root #IdeObject. To simplify this,
the ide_notification_attach() function is provided to locate the
#IdeNotifications object using any #IdeObject you have access to.

```
IdeNotification *notif = ide_notification_new ();
setup_notification (notify);
ide_notification_attach (notif, IDE_OBJECT (some_object));
```</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <type name="Notification" c:type="IdeNotification*"/>
        </return-value>
      </constructor>
      <function name="file_progress_callback"
                c:identifier="ide_notification_file_progress_callback">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="1095">This function is a #GFileProgressCallback helper that will update the
#IdeNotification:fraction property. @user_data must be an #IdeNotification.

Remember to make sure to unref the #IdeNotification instance with
g_object_unref() during the #GDestroyNotify.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="current_num_bytes" transfer-ownership="none">
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="total_num_bytes" transfer-ownership="none">
            <type name="gint64" c:type="goffset"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="flatpak_progress_callback"
                c:identifier="ide_notification_flatpak_progress_callback">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="notification" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="estimating" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_button" c:identifier="ide_notification_add_button">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="746">Adds a new button that may be displayed with the notification.

See also: ide_notification_add_button_with_target_value().</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="748">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="749">the label for the button</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="750">an optional icon for the button</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="detailed_action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="751">a detailed action name (See #GAction)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_button_with_target_value"
              c:identifier="ide_notification_add_button_with_target_value">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="778">Adds a new button, used the parsed #GVariant format for the action
target.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="780">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="781">the label for the button</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="icon"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="782">an optional icon for the button</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="783">an action name (See #GAction)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="784">an optional #GVariant for the action target</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach" c:identifier="ide_notification_attach">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="394">This function will locate the #IdeNotifications object starting from
@object and attach @self as a child to that object.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="396">an #IdeNotifications</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="397">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare" c:identifier="ide_notification_compare">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_body" c:identifier="ide_notification_dup_body">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="509">Copies the current body and returns it to the caller after locking the
object. A copy is used to avoid thread-races.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_id" c:identifier="ide_notification_dup_id">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="421">Copies the id of the notification and returns it to the caller after locking
the object. A copy is used to avoid thread-races.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_title" c:identifier="ide_notification_dup_title">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="465">Copies the current title and returns it to the caller after locking the
object. A copy is used to avoid thread-races.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_button" c:identifier="ide_notification_get_button">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="689">Gets the button indexed by @button, and stores information about the
button into the various out parameters @label, @icon, @action, and @target.

Caller should check for the number of buttons using
ide_notification_get_n_buttons() to determine the numerical range of
indexes to provide for @button.

To avoid racing with threads modifying notifications, the caller can
hold a recursive lock across the function calls using ide_object_lock()
and ide_object_unlock().</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notification.c"
               line="708">%TRUE if @button was found; otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="691">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="button" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="label"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="692">a location for the button label</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="icon"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="693">a location for the button icon</doc>
            <type name="Gio.Icon" c:type="GIcon**"/>
          </parameter>
          <parameter name="action"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="694">a location for the button action name</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="target"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="695">a location for the button action target</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_action"
              c:identifier="ide_notification_get_default_action">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_progress"
              c:identifier="ide_notification_get_has_progress"
              glib:get-property="has-progress">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="957">Gets if the notification supports progress updates.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notification.c"
               line="963">%TRUE if progress updates are supported.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="959">a #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_buttons"
              c:identifier="ide_notification_get_n_buttons">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_notification_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_notification_get_progress"
              glib:get-property="progress">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="908">Gets the progress for the notification.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notification.c"
               line="914">a value between 0.0 and 1.0</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="910">a #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_is_imprecise"
              c:identifier="ide_notification_get_progress_is_imprecise"
              glib:get-property="progress-is-imprecise">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_urgent"
              c:identifier="ide_notification_get_urgent"
              glib:get-property="urgent">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_icon" c:identifier="ide_notification_ref_icon">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="553">Gets the icon for the notification, and returns a new reference
to the #GIcon.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="56"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notification.c"
               line="559">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_body"
              c:identifier="ide_notification_set_body"
              glib:set-property="body">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="530">Sets the #IdeNotification:body property.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="532">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="body"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="533">a string containing the body text, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_action"
              c:identifier="ide_notification_set_default_action">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="detailed_action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_action_and_target_value"
              c:identifier="ide_notification_set_default_action_and_target_value">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_progress"
              c:identifier="ide_notification_set_has_progress"
              glib:set-property="has-progress">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="980">Set to %TRUE if the notification supports progress updates.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="982">a #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="has_progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="983">if @notification supports progress</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="ide_notification_set_icon"
              glib:set-property="icon">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_notification_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_notification_set_id"
              glib:set-property="id">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="442">Sets the #IdeNotification:id property.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="444">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="445">a string containing the id, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_notification_set_priority"
              glib:set-property="priority">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="ide_notification_set_progress"
              glib:set-property="progress">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="931">Sets the progress for the notification.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="933">a #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="934">a value between 0.0 and 1.0</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress_is_imprecise"
              c:identifier="ide_notification_set_progress_is_imprecise"
              glib:set-property="progress-is-imprecise">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="progress_is_imprecise" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_notification_set_title"
              glib:set-property="title">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="486">Sets the #IdeNotification:title property.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="488">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="489">a string containing the title text, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_urgent"
              c:identifier="ide_notification_set_urgent"
              glib:set-property="urgent">
        <source-position filename="src/libide/core/ide-notification.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="urgent" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="withdraw" c:identifier="ide_notification_withdraw">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="1040">Withdraws the notification by removing it from the #IdeObject parent it
belongs to.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="1042">a #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="withdraw_in_seconds"
              c:identifier="ide_notification_withdraw_in_seconds">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="1071">Withdraws @self from it's #IdeObject parent after @seconds have passed.</doc>
        <source-position filename="src/libide/core/ide-notification.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="1073">a #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </instance-parameter>
          <parameter name="seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notification.c"
                 line="1074">number of seconds to withdraw after, or less than zero for a
  sensible default.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="body"
                writable="1"
                transfer-ownership="none"
                setter="set_body"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="227">The "body" property is the main body of text for the notification.
Not all notifications need this, but more complex notifications might.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="has-progress"
                writable="1"
                transfer-ownership="none"
                setter="set_has_progress"
                getter="get_has_progress"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="240">The "has-progress" property denotes the notification will receive
updates to the #IdeNotification:progress property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon"
                writable="1"
                transfer-ownership="none"
                setter="set_icon">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="253">The "icon" property is an optional icon that may be shown next to
the notification title and body under certain senarios.</doc>
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="266">The "icon-name" property is a helper to make setting #IdeNotification:icon
more convenient.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="279">The "id" property is an optional identifier that can be used to locate
the notification later.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                setter="set_priority"
                getter="get_priority"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="292">The "priority" property is used to sort the notification in order of
importance when displaying to the user.

You may also use the #IdeNotification:urgent property to raise the
importance of a message to the user.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="308">The "progress" property is a value between 0.0 and 1.0 describing the progress of
the operation for which the notification represents.

This property is ignored if #IdeNotification:has-progress is unset.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="progress-is-imprecise"
                writable="1"
                transfer-ownership="none"
                setter="set_progress_is_imprecise"
                getter="get_progress_is_imprecise"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="323">The "progress-is-imprecise" property indicates that the notification has
progress, but it is imprecise.

The UI may show a bouncing progress bar if set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="338">The "title" property is the main text to show the user. It may be
displayed more prominently such as in the titlebar.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="urgent"
                writable="1"
                transfer-ownership="none"
                setter="set_urgent"
                getter="get_urgent"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notification.c"
             line="351">If the notification is urgent. These notifications will be displayed with
higher priority than those without the urgent property set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="NotificationClass"
            c:type="IdeNotificationClass"
            glib:is-gtype-struct-for="Notification">
      <source-position filename="src/libide/core/ide-notification.h"
                       line="38"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Notifications"
           c:symbol-prefix="notifications"
           c:type="IdeNotifications"
           parent="Object"
           final="1"
           glib:type-name="IdeNotifications"
           glib:get-type="ide_notifications_get_type"
           glib:type-struct="NotificationsClass">
      <source-position filename="src/libide/core/ide-notifications.h"
                       line="31"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_notifications_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="293">Create a new #IdeNotifications.

Usually, creating this is not necessary, as the #IdeContext root
#IdeObject will create it automatically.</doc>
        <source-position filename="src/libide/core/ide-notifications.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notifications.c"
               line="301">a newly created #IdeNotifications</doc>
          <type name="Notifications" c:type="IdeNotifications*"/>
        </return-value>
      </constructor>
      <method name="add_notification"
              c:identifier="ide_notifications_add_notification">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="309">Adds @notification as a child of @self, sorting it by priority
and urgency.</doc>
        <source-position filename="src/libide/core/ide-notifications.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="311">an #IdeNotifications</doc>
            <type name="Notifications" c:type="IdeNotifications*"/>
          </instance-parameter>
          <parameter name="notification" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="312">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_by_id" c:identifier="ide_notifications_find_by_id">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="474">Finds the first #IdeNotification registered with @self with
#IdeNotification:id of @id.</doc>
        <source-position filename="src/libide/core/ide-notifications.h"
                         line="45"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notifications.c"
               line="482">an #IdeNotification or %NULL</doc>
          <type name="Notification" c:type="IdeNotification*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="476">a #IdeNotifications</doc>
            <type name="Notifications" c:type="IdeNotifications*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="477">the id of the notification</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_progress"
              c:identifier="ide_notifications_get_has_progress"
              glib:get-property="has-progress">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="410">Gets if any of the notification support progress updates.</doc>
        <source-position filename="src/libide/core/ide-notifications.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notifications.c"
               line="416">%TRUE if any notification has progress</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="412">a #IdeNotifications</doc>
            <type name="Notifications" c:type="IdeNotifications*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_notifications_get_progress"
              glib:get-property="progress">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="379">Gets the combined progress of the notifications contained in this
#IdeNotifications object.</doc>
        <source-position filename="src/libide/core/ide-notifications.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notifications.c"
               line="386">A double between 0.0 and 1.0</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="381">a #IdeNotifications</doc>
            <type name="Notifications" c:type="IdeNotifications*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress_is_imprecise"
              c:identifier="ide_notifications_get_progress_is_imprecise"
              glib:get-property="progress-is-imprecise">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="432">Checks if all of the notifications with progress are imprecise.</doc>
        <source-position filename="src/libide/core/ide-notifications.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-notifications.c"
               line="438">%TRUE if all progress-supporting notifications are imprecise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-notifications.c"
                 line="434">a #IdeNotifications</doc>
            <type name="Notifications" c:type="IdeNotifications*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="has-progress"
                transfer-ownership="none"
                getter="get_has_progress"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="166">The "has-progress" property denotes if any of the notifications
have progress supported.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="progress"
                transfer-ownership="none"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="179">The "progress" property is the combination of all of the notifications
currently monitored. It is updated when child notifications progress
changes.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="progress-is-imprecise"
                transfer-ownership="none"
                getter="get_progress_is_imprecise"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-notifications.c"
             line="193">The "progress-is-imprecise" property indicates that all progress-bearing
notifications are imprecise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <class name="NotificationsButton"
           c:symbol-prefix="notifications_button"
           c:type="IdeNotificationsButton"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeNotificationsButton"
           glib:get-type="ide_notifications_button_get_type"
           glib:type-struct="NotificationsButtonClass">
      <source-position filename="src/libide/gui/ide-notifications-button.h"
                       line="35"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_notifications_button_new">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-notifications-button.c"
             line="248">Create a new #IdeNotificationsButton.</doc>
        <source-position filename="src/libide/gui/ide-notifications-button.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-notifications-button.c"
               line="253">a newly created #IdeNotificationsButton</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="NotificationsButtonClass"
            c:type="IdeNotificationsButtonClass"
            glib:is-gtype-struct-for="NotificationsButton">
      <source-position filename="src/libide/gui/ide-notifications-button.h"
                       line="35"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <record name="NotificationsClass"
            c:type="IdeNotificationsClass"
            glib:is-gtype-struct-for="Notifications">
      <source-position filename="src/libide/core/ide-notifications.h"
                       line="31"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="Object"
           c:symbol-prefix="object"
           c:type="IdeObject"
           parent="GObject.Object"
           glib:type-name="IdeObject"
           glib:get-type="ide_object_get_type"
           glib:type-struct="ObjectClass">
      <source-position filename="src/libide/core/ide-object.h" line="63"/>
      <constructor name="new" c:identifier="ide_object_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="533">This is a convenience function for creating an #IdeObject and appending it
to a parent.

This function may only be called from the main-thread, as calling from any
other thread would potentially risk being disposed before returning.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="544">a new #IdeObject</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="535">a #GType of an #IdeObject derived object</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="536">an optional #IdeObject parent</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="animate"
                c:identifier="ide_object_animate"
                introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-animation.c"
             line="1026">Animates the properties of @object. The can be set in a similar manner to g_object_set(). They
will be animated from their current value to the target value over the time period.</doc>
        <source-position filename="src/libide/gtk/ide-animation.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-animation.c"
               line="1036">A #IdeAnimation.
Side effects: None.</doc>
          <type name="Animation" c:type="IdeAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="1028">A #GObject.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="1029">The animation mode.</doc>
            <type name="AnimationMode" c:type="IdeAnimationMode"/>
          </parameter>
          <parameter name="duration_msec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="1030">The duration in milliseconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame_clock" transfer-ownership="none">
            <type name="Gdk.FrameClock" c:type="GdkFrameClock*"/>
          </parameter>
          <parameter name="first_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="1031">The first property to animate.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="animate_full"
                c:identifier="ide_object_animate_full"
                introspectable="0">
        <source-position filename="src/libide/gtk/ide-animation.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-animation.c"
               line="1065">A #IdeAnimation.</doc>
          <type name="Animation" c:type="IdeAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="AnimationMode" c:type="IdeAnimationMode"/>
          </parameter>
          <parameter name="duration_msec" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame_clock" transfer-ownership="none">
            <type name="Gdk.FrameClock" c:type="GdkFrameClock*"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="notify_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="first_property" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="animatev"
                c:identifier="ide_object_animatev"
                introspectable="0">
        <source-position filename="src/libide/gtk/ide-animation.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-animation.c"
               line="940">A #IdeAnimation.</doc>
          <type name="Animation" c:type="IdeAnimation*"/>
        </return-value>
        <parameters>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="933">A #GObject.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="934">The animation mode.</doc>
            <type name="AnimationMode" c:type="IdeAnimationMode"/>
          </parameter>
          <parameter name="duration_msec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="935">The duration in milliseconds.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="frame_clock"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="936">The #GdkFrameClock to synchronize to.</doc>
            <type name="Gdk.FrameClock" c:type="GdkFrameClock*"/>
          </parameter>
          <parameter name="first_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="937">The first property to animate.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-animation.c"
                 line="938">A variadac list of arguments</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </function>
      <function name="destroyed" c:identifier="ide_object_destroyed">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1155">This function sets *object_pointer to NULL if object_pointer != NULL. It's
intended to be used as a callback connected to the "destroy" signal of a
object. You connect ide_object_destroyed() as a signal handler, and pass the
address of your object variable as user data. Then when the object is
destroyed, the variable will be set to NULL. Useful for example to avoid
multiple copies of the same dialog.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1157">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject**"/>
          </parameter>
        </parameters>
      </function>
      <function name="log" c:identifier="ide_object_log" introspectable="0">
        <source-position filename="src/libide/core/ide-object.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="level" transfer-ownership="none">
            <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="notify_by_pspec"
                c:identifier="ide_object_notify_by_pspec">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-notify.c"
             line="52">Like g_object_notify_by_pspec() if the caller is in the main-thread.
Otherwise, the request is deferred to the main thread.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-notify.c"
                 line="54">a #IdeObjectNotify</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-notify.c"
                 line="55">a #GParamSpec</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <function name="notify_in_main" c:identifier="ide_object_notify_in_main">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-notify.c"
             line="82">This helper will perform a g_object_notify_by_pspec() with the
added requirement that it is run from the applications main thread.

You may want to do this when modifying state from a thread, but only
notify from the Gtk+ thread.

This will *always* return to the default main context, and never
emit ::notify immediately.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="instance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-notify.c"
                 line="84">a #GObject</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-notify.c"
                 line="85">a #GParamSpec</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add" invoker="add">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="782">Adds @child to @self, with location dependent on @location.

Generally, it is simpler to use the helper functions such as
ide_object_append(), ide_object_prepend(), ide_object_insert_before(),
or ide_object_insert_after().

This function is primarily meant for consumers that don't know the
relative position they need until runtime.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="784">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="785">an #IdeObject or %NULL</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="786">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="787">location for child</doc>
            <type name="ObjectLocation" c:type="IdeObjectLocation"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="destroy" invoker="destroy">
        <source-position filename="src/libide/core/ide-object.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="parent_set">
        <source-position filename="src/libide/core/ide-object.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove" invoker="remove">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="816">Removes @child from @self.

If @child is a borrowed reference, it may be finalized before this
function returns.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="818">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="819">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="repr" invoker="repr">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1252">This function is similar to Python's `repr()` which gives a string
representation for the object. It is useful when debugging Builder
or when writing plugins.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="59"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1260">a string containing the string representation
  of the #IdeObject</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1254">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="ide_object_add">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="782">Adds @child to @self, with location dependent on @location.

Generally, it is simpler to use the helper functions such as
ide_object_append(), ide_object_prepend(), ide_object_insert_before(),
or ide_object_insert_after().

This function is primarily meant for consumers that don't know the
relative position they need until runtime.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="784">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="sibling"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="785">an #IdeObject or %NULL</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="786">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="787">location for child</doc>
            <type name="ObjectLocation" c:type="IdeObjectLocation"/>
          </parameter>
        </parameters>
      </method>
      <method name="append" c:identifier="ide_object_append">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="836">Inserts @child as the last child of @self.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="838">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="839">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_ready"
              c:identifier="ide_object_check_ready"
              throws="1">
        <source-position filename="src/libide/core/ide-object.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="ide_object_destroy">
        <source-position filename="src/libide/core/ide-object.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ensure_child_typed"
              c:identifier="ide_object_ensure_child_typed">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1107">Like ide_object_get_child_typed() except that it creates an object of
@type if it is missing.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="134"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1115">an #IdeObject or %NULL</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1109">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1110">the #GType of the child</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="ide_object_foreach">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="953">Calls @callback for each child of @self.

@callback is allowed to remove children from @self, but only as long as they are
the child passed to callback (or child itself). See g_queue_foreach() for more
details about what is allowed.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="955">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="956">a #GFunc to call for each child</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="957">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_child_typed" c:identifier="ide_object_get_child_typed">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="994">Finds the first child of @self that is of @type.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="128"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1001">an #IdeObject or %NULL</doc>
          <type name="Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="996">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="997">the #GType of the child to match</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_children_typed"
              c:identifier="ide_object_get_children_typed">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1028">Gets all children matching @type.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1035">a #GPtrArray of
  #IdeObject matching @type.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Object"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1030">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1031">a #GType</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context" c:identifier="ide_object_get_context">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1183">Gets the #IdeContext for the object.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="80"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1189">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1185">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_children" c:identifier="ide_object_get_n_children">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="563">Gets the number of children for an object.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="569">the number of children</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="565">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_child" c:identifier="ide_object_get_nth_child">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="586">Gets the @nth child of @self.

A full reference to the child is returned.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="595">an #IdeObject or %NULL</doc>
          <type name="Object" c:type="IdeObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="588">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="589">position of child to fetch</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="ide_object_get_parent"
              glib:get-property="parent">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="710">Gets the parent #IdeObject, if any.

This function may only be called from the main thread.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="71"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="718">an #IdeObject or %NULL</doc>
          <type name="Object" c:type="IdeObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="712">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="ide_object_get_position">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="617">Gets the position of @self within the parent node.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="623">the position, starting from 0</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="619">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="in_destruction" c:identifier="ide_object_in_destruction">
        <source-position filename="src/libide/core/ide-object.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_after" c:identifier="ide_object_insert_after">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="882">Inserts @child into @self's children, directly after @sibling.

@sibling MUST BE a child of @self.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="884">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="sibling" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="885">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="886">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before" c:identifier="ide_object_insert_before">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="864">Inserts @child into @self's children, directly before @sibling.

@sibling MUST BE a child of @self.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="866">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="sibling" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="867">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="868">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_sorted" c:identifier="ide_object_insert_sorted">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="900">Locates the proper sibling for @child by using @func amongst @self's
children #IdeObject. Those objects must already be sorted.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="902">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="903">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="904">a #GCompareDataFunc that can be used to locate the
   proper sibling</doc>
            <type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="906">user data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_root" c:identifier="ide_object_is_root">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="759">Checks if @self is root, meaning it has no parent.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="765">%TRUE if @self has no parent</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="761">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lock" c:identifier="ide_object_lock">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="646">Acquires the lock for @self. This can be useful when you need to do
multi-threaded work with @self and want to ensure exclusivity.

Call ide_object_unlock() to release the lock.

The synchronization used is a #GRecMutex.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="648">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="ide_object_prepend">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="850">Inserts @child as the first child of @self.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="852">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="853">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_cancellable" c:identifier="ide_object_ref_cancellable">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="685">Gets a #GCancellable for the object.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="691">a #GCancellable</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="687">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_context" c:identifier="ide_object_ref_context">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1216">Gets the root #IdeContext for the object, if any.</doc>
        <source-position filename="src/libide/core/ide-context.h" line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1222">an #IdeContext or %NULL</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1218">a #IdeContext</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_parent" c:identifier="ide_object_ref_parent">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="736">Gets the parent #IdeObject, if any.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="742">an #IdeObject or %NULL</doc>
          <type name="Object" c:type="IdeObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="738">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_root" c:identifier="ide_object_ref_root">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1058">Finds and returns the toplevel object in the tree.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1064">an #IdeObject</doc>
          <type name="Object" c:type="IdeObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1060">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_object_remove">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="816">Removes @child from @self.

If @child is a borrowed reference, it may be finalized before this
function returns.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="818">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="819">an #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="repr" c:identifier="ide_object_repr">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="1252">This function is similar to Python's `repr()` which gives a string
representation for the object. It is useful when debugging Builder
or when writing plugins.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="145"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object.c"
               line="1260">a string containing the string representation
  of the #IdeObject</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1254">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_context" c:identifier="ide_object_set_context">
        <source-position filename="src/libide/core/ide-context.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_error_if_destroyed"
              c:identifier="ide_object_set_error_if_destroyed"
              throws="1">
        <source-position filename="src/libide/core/ide-object.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unlock" c:identifier="ide_object_unlock">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="667">Releases a previously acuiqred lock from ide_object_lock().

The synchronization used is a #GRecMutex.</doc>
        <source-position filename="src/libide/core/ide-object.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="669">a #IdeObject</doc>
            <type name="Object" c:type="IdeObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cancellable"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="472">The "cancellable" property is a #GCancellable that can be used by operations
that will be cancelled when the #IdeObject::destroy signal is emitted on @self.

This is convenient when you want operations to automatically be cancelled when
part of teh object tree is segmented.</doc>
        <type name="Gio.Cancellable"/>
      </property>
      <property name="parent"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_parent">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="460">The parent #IdeObject, if any.</doc>
        <type name="Object"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="destroy" when="cleanup" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object.c"
             line="490">The "destroy" signal is emitted when the object should destroy itself
and cleanup any state that is no longer necessary. This happens when
the object has been removed from the because it was requested to be
destroyed, or because a parent object is being destroyed.

If you do not want to receive the "destroy" signal, then you must
manually remove the object from the tree using ide_object_remove()
while holding a reference to the object.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <class name="ObjectBox"
           c:symbol-prefix="object_box"
           c:type="IdeObjectBox"
           parent="Object"
           final="1"
           glib:type-name="IdeObjectBox"
           glib:get-type="ide_object_box_get_type"
           glib:type-struct="ObjectBoxClass">
      <source-position filename="src/libide/core/ide-object-box.h" line="34"/>
      <constructor name="new" c:identifier="ide_object_box_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-box.c"
             line="58">Create a new #IdeObjectBox.</doc>
        <source-position filename="src/libide/core/ide-object-box.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object-box.c"
               line="63">a newly created #IdeObjectBox</doc>
          <type name="ObjectBox" c:type="IdeObjectBox*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="from_object" c:identifier="ide_object_box_from_object">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-box.c"
             line="235">Gets the #IdeObjectBox that contains @object, if any.

This function may only be called from the main thread.</doc>
        <source-position filename="src/libide/core/ide-object-box.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object-box.c"
               line="243">an #IdeObjectBox</doc>
          <type name="ObjectBox" c:type="IdeObjectBox*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-box.c"
                 line="237">a #GObject</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <method name="contains" c:identifier="ide_object_box_contains">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-box.c"
             line="254">Checks if @self contains @instance.</doc>
        <source-position filename="src/libide/core/ide-object-box.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object-box.c"
               line="261">%TRUE if #IdeObjectBox:object matches @instance</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-box.c"
                 line="256">a #IdeObjectBox</doc>
            <type name="ObjectBox" c:type="IdeObjectBox*"/>
          </instance-parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-box.c"
                 line="257">a #GObject or %NULL</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_object" c:identifier="ide_object_box_ref_object">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-box.c"
             line="212">Gets the boxed object.</doc>
        <source-position filename="src/libide/core/ide-object-box.h"
                         line="39"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-object-box.c"
               line="218">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object-box.c"
                 line="214">an #IdeObjectBox</doc>
            <type name="ObjectBox" c:type="IdeObjectBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="object"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-box.c"
             line="173">The "object" property contains the object that is boxed and
placed onto the object graph using this box.</doc>
        <type name="GObject.Object"/>
      </property>
      <property name="propagate-disposal"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-object-box.c"
             line="186">The "propagate-disposal" property denotes if the #IdeObject:object
property contents should have g_object_run_dispose() called when the
#IdeObjectBox is destroyed.

This is useful when you want to force disposal of an external object
when @self is removed from the object tree.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="ObjectBoxClass"
            c:type="IdeObjectBoxClass"
            glib:is-gtype-struct-for="ObjectBox">
      <source-position filename="src/libide/core/ide-object-box.h" line="34"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="ObjectClass"
            c:type="IdeObjectClass"
            glib:is-gtype-struct-for="Object">
      <source-position filename="src/libide/core/ide-object.h" line="63"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="destroy">
        <callback name="destroy">
          <source-position filename="src/libide/core/ide-object.h" line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add">
        <callback name="add">
          <source-position filename="src/libide/core/ide-object.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="784">an #IdeObject</doc>
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
            <parameter name="sibling"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="785">an #IdeObject or %NULL</doc>
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="786">an #IdeObject</doc>
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="787">location for child</doc>
              <type name="ObjectLocation" c:type="IdeObjectLocation"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <source-position filename="src/libide/core/ide-object.h" line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="818">an #IdeObject</doc>
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="819">an #IdeObject</doc>
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="parent_set">
        <callback name="parent_set">
          <source-position filename="src/libide/core/ide-object.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
            <parameter name="parent" transfer-ownership="none">
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="repr">
        <callback name="repr">
          <source-position filename="src/libide/core/ide-object.h" line="59"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-object.c"
                 line="1260">a string containing the string representation
  of the #IdeObject</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/core/ide-object.c"
                   line="1254">a #IdeObject</doc>
              <type name="Object" c:type="IdeObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="ObjectLocation" c:type="IdeObjectLocation">
      <source-position filename="src/libide/core/ide-object.h" line="41"/>
      <member name="start" value="0" c:identifier="IDE_OBJECT_START">
      </member>
      <member name="end" value="1" c:identifier="IDE_OBJECT_END">
      </member>
      <member name="before_sibling"
              value="2"
              c:identifier="IDE_OBJECT_BEFORE_SIBLING">
      </member>
      <member name="after_sibling"
              value="3"
              c:identifier="IDE_OBJECT_AFTER_SIBLING">
      </member>
    </enumeration>
    <class name="OmniBar"
           c:symbol-prefix="omni_bar"
           c:type="IdeOmniBar"
           parent="Panel.OmniBar"
           final="1"
           glib:type-name="IdeOmniBar"
           glib:get-type="ide_omni_bar_get_type"
           glib:type-struct="OmniBarClass">
      <source-position filename="src/libide/gui/ide-omni-bar.h" line="36"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_omni_bar_new">
        <source-position filename="src/libide/gui/ide-omni-bar.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_popover_section"
              c:identifier="ide_omni_bar_add_popover_section">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-omni-bar.c"
             line="465">Adds @widget to the omnibar popover, sorted by @priority</doc>
        <source-position filename="src/libide/gui/ide-omni-bar.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar.c"
                 line="467">an #IdeOmniBar</doc>
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar.c"
                 line="468">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar.c"
                 line="469">sort priority for the section</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_status_icon"
              c:identifier="ide_omni_bar_add_status_icon">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-omni-bar.c"
             line="393">Adds a status-icon style widget to the end of the omnibar. Generally,
you'll want this to be either a GtkButton, GtkLabel, or something simple.</doc>
        <source-position filename="src/libide/gui/ide-omni-bar.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar.c"
                 line="395">a #IdeOmniBar</doc>
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar.c"
                 line="396">the #GtkWidget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar.c"
                 line="397">the sort priority for @widget</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_placeholder"
              c:identifier="ide_omni_bar_set_placeholder">
        <source-position filename="src/libide/gui/ide-omni-bar.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </instance-parameter>
          <parameter name="placeholder" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="menu-id"
                readable="0"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <interface name="OmniBarAddin"
               c:symbol-prefix="omni_bar_addin"
               c:type="IdeOmniBarAddin"
               glib:type-name="IdeOmniBarAddin"
               glib:get-type="ide_omni_bar_addin_get_type"
               glib:type-struct="OmniBarAddinInterface">
      <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                       line="46"/>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-omni-bar-addin.c"
             line="46">Requests that the #IdeOmniBarAddin initialize, possibly modifying
@omni_bar as necessary.</doc>
        <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="48">an #IdeOmniBarAddin</doc>
            <type name="OmniBarAddin" c:type="IdeOmniBarAddin*"/>
          </instance-parameter>
          <parameter name="omni_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="49">an #IdeOmniBar</doc>
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-omni-bar-addin.c"
             line="65">Requests that the #IdeOmniBarAddin shutdown, possibly modifying
@omni_bar as necessary to return it to the original state before
the addin was loaded.</doc>
        <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="67">an #IdeOmniBarAddin</doc>
            <type name="OmniBarAddin" c:type="IdeOmniBarAddin*"/>
          </instance-parameter>
          <parameter name="omni_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="68">an #IdeOmniBar</doc>
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_omni_bar_addin_load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-omni-bar-addin.c"
             line="46">Requests that the #IdeOmniBarAddin initialize, possibly modifying
@omni_bar as necessary.</doc>
        <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="48">an #IdeOmniBarAddin</doc>
            <type name="OmniBarAddin" c:type="IdeOmniBarAddin*"/>
          </instance-parameter>
          <parameter name="omni_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="49">an #IdeOmniBar</doc>
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_omni_bar_addin_unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-omni-bar-addin.c"
             line="65">Requests that the #IdeOmniBarAddin shutdown, possibly modifying
@omni_bar as necessary to return it to the original state before
the addin was loaded.</doc>
        <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="67">an #IdeOmniBarAddin</doc>
            <type name="OmniBarAddin" c:type="IdeOmniBarAddin*"/>
          </instance-parameter>
          <parameter name="omni_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-omni-bar-addin.c"
                 line="68">an #IdeOmniBar</doc>
            <type name="OmniBar" c:type="IdeOmniBar*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="OmniBarAddinInterface"
            c:type="IdeOmniBarAddinInterface"
            glib:is-gtype-struct-for="OmniBarAddin">
      <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                       line="46"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-omni-bar-addin.c"
                   line="48">an #IdeOmniBarAddin</doc>
              <type name="OmniBarAddin" c:type="IdeOmniBarAddin*"/>
            </parameter>
            <parameter name="omni_bar" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-omni-bar-addin.c"
                   line="49">an #IdeOmniBar</doc>
              <type name="OmniBar" c:type="IdeOmniBar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/gui/ide-omni-bar-addin.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-omni-bar-addin.c"
                   line="67">an #IdeOmniBarAddin</doc>
              <type name="OmniBarAddin" c:type="IdeOmniBarAddin*"/>
            </parameter>
            <parameter name="omni_bar" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-omni-bar-addin.c"
                   line="68">an #IdeOmniBar</doc>
              <type name="OmniBar" c:type="IdeOmniBar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="OmniBarClass"
            c:type="IdeOmniBarClass"
            glib:is-gtype-struct-for="OmniBar">
      <source-position filename="src/libide/gui/ide-omni-bar.h" line="36"/>
      <field name="parent_class">
        <type name="Panel.OmniBarClass" c:type="PanelOmniBarClass"/>
      </field>
    </record>
    <constant name="PIPELINE_PHASE_MASK"
              value="16777215"
              c:type="IDE_PIPELINE_PHASE_MASK">
      <source-position filename="src/libide/foundry/ide-pipeline.h" line="40"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PIPELINE_PHASE_WHENCE_MASK"
              value="805306368"
              c:type="IDE_PIPELINE_PHASE_WHENCE_MASK">
      <source-position filename="src/libide/foundry/ide-pipeline.h" line="41"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PTY_FD_INVALID" value="-1" c:type="IDE_PTY_FD_INVALID">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="PTY_INTERCEPT_MAGIC"
              value="2171745863"
              c:type="IDE_PTY_INTERCEPT_MAGIC">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="33"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Page"
           c:symbol-prefix="page"
           c:type="IdePage"
           parent="Panel.Widget"
           abstract="1"
           glib:type-name="IdePage"
           glib:get-type="ide_page_get_type"
           glib:type-struct="PageClass">
      <source-position filename="src/libide/gui/ide-page.h" line="59"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <virtual-method name="agree_to_close_async"
                      invoker="agree_to_close_async">
        <source-position filename="src/libide/gui/ide-page.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="agree_to_close_finish"
                      invoker="agree_to_close_finish"
                      throws="1">
        <source-position filename="src/libide/gui/ide-page.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_split" invoker="create_split">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="513">This function requests that the #IdePage create a split version
of itself so that the user may view the document in multiple views.

The view should be added to an #IdeLayoutStack where appropriate.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="54"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-page.c"
               line="522">A newly created #IdePage or %NULL.</doc>
          <type name="Page" c:type="IdePage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="515">an #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_file_or_directory"
                      invoker="get_file_or_directory">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="594">Gets a #GFile representing a file or directory that best maps to this
page. A terminal might use the current working directory while an editor
or designer might use the backing file.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="55"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-page.c"
               line="602">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="596">a #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_content_widget"
              c:identifier="ide_page_add_content_widget">
        <source-position filename="src/libide/gui/ide-page.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="agree_to_close_async"
              c:identifier="ide_page_agree_to_close_async">
        <source-position filename="src/libide/gui/ide-page.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="agree_to_close_finish"
              c:identifier="ide_page_agree_to_close_finish"
              throws="1">
        <source-position filename="src/libide/gui/ide-page.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_split" c:identifier="ide_page_create_split">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="513">This function requests that the #IdePage create a split version
of itself so that the user may view the document in multiple views.

The view should be added to an #IdeLayoutStack where appropriate.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="67"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-page.c"
               line="522">A newly created #IdePage or %NULL.</doc>
          <type name="Page" c:type="IdePage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="515">an #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="ide_page_destroy">
        <source-position filename="src/libide/gui/ide-page.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_split"
              c:identifier="ide_page_get_can_split"
              glib:get-property="can-split">
        <source-position filename="src/libide/gui/ide-page.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_failed"
              c:identifier="ide_page_get_failed"
              glib:get-property="failed">
        <source-position filename="src/libide/gui/ide-page.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file_or_directory"
              c:identifier="ide_page_get_file_or_directory">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="594">Gets a #GFile representing a file or directory that best maps to this
page. A terminal might use the current working directory while an editor
or designer might use the backing file.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="94"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-page.c"
               line="602">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="596">a #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_id"
              c:identifier="ide_page_get_menu_id"
              glib:get-property="menu-id">
        <source-position filename="src/libide/gui/ide-page.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="ide_page_get_position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="690">Gets the position of a page within the workspace.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="99"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-page.c"
               line="696">an #PanelPosition or %NULL
  if the page is not rooted.</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="692">a #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="mark_used" c:identifier="ide_page_mark_used">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="156">This function marks the page as used by updating it's position in the
workspaces MRU (most-recently-used) queue.

Pages should call this when their contents have been focused.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="158">a #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="observe" c:identifier="ide_page_observe">
        <source-position filename="src/libide/gui/ide-page.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Page" c:type="IdePage**"/>
          </parameter>
        </parameters>
      </method>
      <method name="report_error"
              c:identifier="ide_page_report_error"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="541">This function reports an error to the user in the layout view.

@format should be a printf-style format string followed by the
arguments for the format.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="543">a #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="544">a printf-style format string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_split"
              c:identifier="ide_page_set_can_split"
              glib:set-property="can-split">
        <source-position filename="src/libide/gui/ide-page.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="can_split" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_failed"
              c:identifier="ide_page_set_failed"
              glib:set-property="failed">
        <source-position filename="src/libide/gui/ide-page.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="failed" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_id"
              c:identifier="ide_page_set_menu_id"
              glib:set-property="menu-id">
        <source-position filename="src/libide/gui/ide-page.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="menu_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress" c:identifier="ide_page_set_progress">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="658">Set interactive progress for the page.

When the operation is completed, the caller shoudl call this method
again and reutrn a value of %NULL for @notification.</doc>
        <source-position filename="src/libide/gui/ide-page.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="660">a #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="notification"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="661">an #IdeNotification or %NULL</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unobserve" c:identifier="ide_page_unobserve">
        <source-position filename="src/libide/gui/ide-page.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Page" c:type="IdePage*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Page" c:type="IdePage**"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-split"
                writable="1"
                transfer-ownership="none"
                setter="set_can_split"
                getter="get_can_split"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="failed"
                writable="1"
                transfer-ownership="none"
                setter="set_failed"
                getter="get_failed"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="menu-id"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_id"
                getter="get_menu_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Panel.Widget" c:type="PanelWidget"/>
      </field>
      <glib:signal name="create-split" when="last">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-page.c"
             line="358">This signal is emitted when the view is requested to make a split
version of itself. This happens when the user requests that a second
version of the file to be displayed, often side-by-side.

This signal will only be emitted when #IdePage:can-split is
set to %TRUE. The default is %FALSE.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-page.c"
               line="369">A newly created #IdePage</doc>
          <type name="Page"/>
        </return-value>
      </glib:signal>
    </class>
    <callback name="PageCallback" c:type="IdePageCallback">
      <source-position filename="src/libide/gui/ide-page.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="page" transfer-ownership="none">
          <type name="Page" c:type="IdePage*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PageClass"
            c:type="IdePageClass"
            glib:is-gtype-struct-for="Page">
      <source-position filename="src/libide/gui/ide-page.h" line="59"/>
      <field name="parent_class">
        <type name="Panel.WidgetClass" c:type="PanelWidgetClass"/>
      </field>
      <field name="agree_to_close_async">
        <callback name="agree_to_close_async">
          <source-position filename="src/libide/gui/ide-page.h" line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Page" c:type="IdePage*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="agree_to_close_finish">
        <callback name="agree_to_close_finish" throws="1">
          <source-position filename="src/libide/gui/ide-page.h" line="51"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Page" c:type="IdePage*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_split">
        <callback name="create_split">
          <source-position filename="src/libide/gui/ide-page.h" line="54"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="522">A newly created #IdePage or %NULL.</doc>
            <type name="Page" c:type="IdePage*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-page.c"
                   line="515">an #IdePage</doc>
              <type name="Page" c:type="IdePage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_file_or_directory">
        <callback name="get_file_or_directory">
          <source-position filename="src/libide/gui/ide-page.h" line="55"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-page.c"
                 line="602">a #GFile or %NULL</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-page.c"
                   line="596">a #IdePage</doc>
              <type name="Page" c:type="IdePage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Pane"
           c:symbol-prefix="pane"
           c:type="IdePane"
           parent="Panel.Widget"
           glib:type-name="IdePane"
           glib:get-type="ide_pane_get_type"
           glib:type-struct="PaneClass">
      <source-position filename="src/libide/gui/ide-pane.h" line="43"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_pane_new">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-pane.c"
             line="42">Creates a new #IdePane widget.

These widgets are meant to be added to #IdePanel widgets.</doc>
        <source-position filename="src/libide/gui/ide-pane.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-pane.c"
               line="49">a new #IdePane</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="destroy" c:identifier="ide_pane_destroy">
        <source-position filename="src/libide/gui/ide-pane.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pane" c:type="IdePane*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_pane_get_id">
        <source-position filename="src/libide/gui/ide-pane.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pane" c:type="IdePane*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position" c:identifier="ide_pane_get_position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-pane.c"
             line="107">Gets the position of the panel or %NULL</doc>
        <source-position filename="src/libide/gui/ide-pane.h" line="60"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-pane.c"
               line="113">an #PanelPosition or %NULL</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-pane.c"
                 line="109">a #IdePane</doc>
            <type name="Pane" c:type="IdePane*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="observe" c:identifier="ide_pane_observe">
        <source-position filename="src/libide/gui/ide-pane.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pane" c:type="IdePane*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Pane" c:type="IdePane**"/>
          </parameter>
        </parameters>
      </method>
      <method name="unobserve" c:identifier="ide_pane_unobserve">
        <source-position filename="src/libide/gui/ide-pane.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pane" c:type="IdePane*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="Pane" c:type="IdePane**"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Panel.Widget" c:type="PanelWidget"/>
      </field>
    </class>
    <record name="PaneClass"
            c:type="IdePaneClass"
            glib:is-gtype-struct-for="Pane">
      <source-position filename="src/libide/gui/ide-pane.h" line="43"/>
      <field name="parent_class">
        <type name="Panel.WidgetClass" c:type="PanelWidgetClass"/>
      </field>
    </record>
    <class name="PathCache"
           c:symbol-prefix="path_cache"
           c:type="IdePathCache"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdePathCache"
           glib:get-type="ide_path_cache_get_type"
           glib:type-struct="PathCacheClass">
      <source-position filename="src/libide/foundry/ide-path-cache.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_path_cache_new">
        <source-position filename="src/libide/foundry/ide-path-cache.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="PathCache" c:type="IdePathCache*"/>
        </return-value>
      </constructor>
      <method name="contains" c:identifier="ide_path_cache_contains">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-path-cache.c"
             line="124">This function helps for detecting negative cache entries without
copying the program_path string.</doc>
        <source-position filename="src/libide/foundry/ide-path-cache.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-path-cache.c"
               line="134">%TRUE if an entry was found and @had_program_path is set;
  otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="126">a #IdePathCache</doc>
            <type name="PathCache" c:type="IdePathCache*"/>
          </instance-parameter>
          <parameter name="program_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="127">the name of the program to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="had_program_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="128">a location to store if a path
  was found for @program_name.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ide_path_cache_insert">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-path-cache.c"
             line="157">Inserts a cache entry for @program_name for @program_path.

@program_path may be %NULL to register a negative cache entry. See
ide_path_cache_lookup() for handling negative cache entries.</doc>
        <source-position filename="src/libide/foundry/ide-path-cache.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="159">a #IdePathCache</doc>
            <type name="PathCache" c:type="IdePathCache*"/>
          </instance-parameter>
          <parameter name="program_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="160">the name of the program</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="program_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="161">the path for the program</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup" c:identifier="ide_path_cache_lookup">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-path-cache.c"
             line="91">%TRUE is returned when an entry is found in the cache. That entry
may be %NULL indicating a negative cache entry.</doc>
        <source-position filename="src/libide/foundry/ide-path-cache.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-path-cache.c"
               line="101">%TRUE if @program_name was found and @program_path is set;
  otherwise %FALSE is returned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="93">a #IdePathCache</doc>
            <type name="PathCache" c:type="IdePathCache*"/>
          </instance-parameter>
          <parameter name="program_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="94">the program name to lookup</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="program_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-path-cache.c"
                 line="95">a location to store
  the @program_path for @program_name.</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="PathCacheClass"
            c:type="IdePathCacheClass"
            glib:is-gtype-struct-for="PathCache">
      <source-position filename="src/libide/foundry/ide-path-cache.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PatternSpec"
            c:type="IdePatternSpec"
            opaque="1"
            glib:type-name="IdePatternSpec"
            glib:get-type="ide_pattern_spec_get_type"
            c:symbol-prefix="pattern_spec">
      <source-position filename="src/libide/search/ide-pattern-spec.h"
                       line="25"/>
      <constructor name="new" c:identifier="ide_pattern_spec_new">
        <source-position filename="src/libide/search/ide-pattern-spec.h"
                         line="32"/>
        <return-value transfer-ownership="full">
          <type name="PatternSpec" c:type="IdePatternSpec*"/>
        </return-value>
        <parameters>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_text" c:identifier="ide_pattern_spec_get_text">
        <source-position filename="src/libide/search/ide-pattern-spec.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="ide_pattern_spec_match">
        <source-position filename="src/libide/search/ide-pattern-spec.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
          <parameter name="haystack" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_pattern_spec_ref">
        <source-position filename="src/libide/search/ide-pattern-spec.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="PatternSpec" c:type="IdePatternSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_pattern_spec_unref">
        <source-position filename="src/libide/search/ide-pattern-spec.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="PersistentMap"
           c:symbol-prefix="persistent_map"
           c:type="IdePersistentMap"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdePersistentMap"
           glib:get-type="ide_persistent_map_get_type"
           glib:type-struct="PersistentMapClass">
      <source-position filename="src/libide/io/ide-persistent-map.h"
                       line="29"/>
      <constructor name="new" c:identifier="ide_persistent_map_new">
        <source-position filename="src/libide/io/ide-persistent-map.h"
                         line="32"/>
        <return-value transfer-ownership="full">
          <type name="PersistentMap" c:type="IdePersistentMap*"/>
        </return-value>
      </constructor>
      <method name="builder_get_metadata_int64"
              c:identifier="ide_persistent_map_builder_get_metadata_int64">
        <source-position filename="src/libide/io/ide-persistent-map.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMap" c:type="IdePersistentMap*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file"
              c:identifier="ide_persistent_map_load_file"
              throws="1">
        <source-position filename="src/libide/io/ide-persistent-map.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMap" c:type="IdePersistentMap*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_async"
              c:identifier="ide_persistent_map_load_file_async">
        <source-position filename="src/libide/io/ide-persistent-map.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMap" c:type="IdePersistentMap*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_file_finish"
              c:identifier="ide_persistent_map_load_file_finish"
              throws="1">
        <source-position filename="src/libide/io/ide-persistent-map.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-persistent-map.c"
               line="231">Whether file is loaded or not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-persistent-map.c"
                 line="227">an #IdePersistentMap</doc>
            <type name="PersistentMap" c:type="IdePersistentMap*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-persistent-map.c"
                 line="228">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_value"
              c:identifier="ide_persistent_map_lookup_value">
        <source-position filename="src/libide/io/ide-persistent-map.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-persistent-map.c"
               line="249">value associalted with @key.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-persistent-map.c"
                 line="246">An #IdePersistentMap instance.</doc>
            <type name="PersistentMap" c:type="IdePersistentMap*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-persistent-map.c"
                 line="247">key to lookup value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <class name="PersistentMapBuilder"
           c:symbol-prefix="persistent_map_builder"
           c:type="IdePersistentMapBuilder"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdePersistentMapBuilder"
           glib:get-type="ide_persistent_map_builder_get_type"
           glib:type-struct="PersistentMapBuilderClass">
      <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                       line="31"/>
      <constructor name="new" c:identifier="ide_persistent_map_builder_new">
        <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="PersistentMapBuilder" c:type="IdePersistentMapBuilder*"/>
        </return-value>
      </constructor>
      <method name="insert" c:identifier="ide_persistent_map_builder_insert">
        <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMapBuilder"
                  c:type="IdePersistentMapBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="replace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_int64"
              c:identifier="ide_persistent_map_builder_set_metadata_int64">
        <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMapBuilder"
                  c:type="IdePersistentMapBuilder*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="write"
              c:identifier="ide_persistent_map_builder_write"
              throws="1">
        <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMapBuilder"
                  c:type="IdePersistentMapBuilder*"/>
          </instance-parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_async"
              c:identifier="ide_persistent_map_builder_write_async">
        <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PersistentMapBuilder"
                  c:type="IdePersistentMapBuilder*"/>
          </instance-parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_finish"
              c:identifier="ide_persistent_map_builder_write_finish"
              throws="1">
        <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-persistent-map-builder.c"
               line="312">%TRUE if the while was written successfully; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-persistent-map-builder.c"
                 line="308">an #IdePersistentMapBuilder</doc>
            <type name="PersistentMapBuilder"
                  c:type="IdePersistentMapBuilder*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-persistent-map-builder.c"
                 line="309">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="PersistentMapBuilderClass"
            c:type="IdePersistentMapBuilderClass"
            glib:is-gtype-struct-for="PersistentMapBuilder">
      <source-position filename="src/libide/io/ide-persistent-map-builder.h"
                       line="31"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PersistentMapClass"
            c:type="IdePersistentMapClass"
            glib:is-gtype-struct-for="PersistentMap">
      <source-position filename="src/libide/io/ide-persistent-map.h"
                       line="29"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Pipeline"
           c:symbol-prefix="pipeline"
           c:type="IdePipeline"
           parent="Object"
           final="1"
           glib:type-name="IdePipeline"
           glib:get-type="ide_pipeline_get_type"
           glib:type-struct="PipelineClass">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-pipeline.c"
           line="70">The #IdePipeline is responsible for managing the build process
for Builder. It consists of multiple build "phases" (see #IdePipelinePhase
for the individual phases). An #IdePipelineStage can be attached with
a priority to each phase and is the primary mechanism that plugins
use to perform their operations in the proper ordering.

For example, the flatpak plugin provides its download stage as part of the
%IDE_PIPELINE_PHASE_DOWNLOAD phase. The autotools plugin provides stages to
phases such as %IDE_PIPELINE_PHASE_AUTOGEN, %IDE_PIPELINE_PHASE_CONFIGURE,
%IDE_PIPELINE_PHASE_BUILD, and %IDE_PIPELINE_PHASE_INSTALL.

If you want ensure a particular phase is performed as part of a build,
then fall ide_pipeline_request_phase() with the phase you are
interested in seeing complete successfully.

If your plugin has discovered that something has changed that invalidates a
given phase, use ide_pipeline_invalidate_phase() to ensure that the
phase is re-build the next time a requested phase of higher precedence
is requested.

It can be useful to perform operations before or after a given stage (but
still be built as part of that stage) so the %IDE_PIPELINE_PHASE_BEFORE and
%IDE_PIPELINE_PHASE_AFTER flags may be xor'd with the requested phase.  If more
precise ordering is required, you may use the priority parameter to order
the operation with regards to other stages in that phase.

Transient stages may be added to the pipeline and they will be removed after
the ide_pipeline_build_async() operation has completed successfully
or has failed. You can mark a stage as transient with
ide_pipeline_stage_set_transient(). This may be useful to perform operations
such as an "export tarball" stage which should only run once as determined
by the user requesting a "make dist" style operation.</doc>
      <source-position filename="src/libide/foundry/ide-pipeline.h" line="53"/>
      <implements name="Gio.Initable"/>
      <implements name="Gio.ListModel"/>
      <method name="add_error_format"
              c:identifier="ide_pipeline_add_error_format">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3224">This can be used to add a regex that will extract errors from
standard output. This is similar to the "errorformat" feature
of vim to extract warnings from standard output.

The regex should used named capture groups to pass information
to the extraction process.

Supported group names are:

 • filename (a string path)
 • line (an integer)
 • column (an integer)
 • level (a string)
 • message (a string)

For example, to extract warnings from GCC you might do something
like the following:

  "(?&amp;lt;filename&amp;gt;[a-zA-Z0-9\\-\\.\\/_]+):"
  "(?&amp;lt;line&amp;gt;\\d+):"
  "(?&amp;lt;column&amp;gt;\\d+): "
  "(?&amp;lt;level&amp;gt;[\\w\\s]+): "
  "(?&amp;lt;message&amp;gt;.*)"

To remove the regex, use the ide_pipeline_remove_error_format()
function with the resulting format id returned from this function.

The resulting format id will be &amp;gt; 0 if successful.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3258">an error format id that may be passed to
  ide_pipeline_remove_error_format().</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3226">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="regex" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3227">A regex to be compiled</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="GLib.RegexCompileFlags" c:type="GRegexCompileFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_log_observer"
              c:identifier="ide_pipeline_add_log_observer">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="observer"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="BuildLogObserver" c:type="IdeBuildLogObserver"/>
          </parameter>
          <parameter name="observer_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="observer_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="addin_find_by_module_name"
              c:identifier="ide_pipeline_addin_find_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4479">Finds the addin (if any) matching the plugin's @module_name.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4486">an #IdePipelineAddin or %NULL</doc>
          <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4481">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4482">the name of the addin module</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach" c:identifier="ide_pipeline_attach">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2540">Insert @stage into the pipeline as part of the phase denoted by @phase.

If priority is non-zero, it will be used to sort the stage among other
stages that are part of the same phase.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2552">A stage_id that may be passed to ide_pipeline_detach().</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2542">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2543">An #IdePipelinePhase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2544">an optional priority for sorting within the phase</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="stage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2545">An #IdePipelineStage</doc>
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_command" c:identifier="ide_pipeline_attach_command">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2671">This creates a new stage that will spawn a process using @run_command and
log the output of stdin/stdout.

It is a programmer error to modify @run_command after passing it to this
function.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2684">A stage_id that may be passed to ide_pipeline_remove().</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2673">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2674">An #IdePipelinePhase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2675">an optional priority for sorting within the phase</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="run_command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2676">An #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_launcher"
              c:identifier="ide_pipeline_attach_launcher">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2635">This creates a new stage that will spawn a process using @launcher and log
the output of stdin/stdout.

It is a programmer error to modify @launcher after passing it to this
function.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2648">A stage_id that may be passed to ide_pipeline_remove().</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2637">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2638">An #IdePipelinePhase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2639">an optional priority for sorting within the phase</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="launcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2640">An #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_pty" c:identifier="ide_pipeline_attach_pty">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3126">Attaches a PTY to stdin/stdout/stderr of the #IdeSubprocessLauncher.
This is useful if the application can take advantage of a PTY for
features like colors and other escape sequences.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3128">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="launcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3129">an #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_async" c:identifier="ide_pipeline_build_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2297">Asynchronously starts the build pipeline.

The @phase parameter should contain the #IdePipelinePhase that is
necessary to complete. If you simply want to trigger a generic
build, you probably want %IDE_PIPELINE_PHASE_BUILD. If you only
need to configure the project (and necessarily the dependencies
up to that phase) you might want %IDE_PIPELINE_PHASE_CONFIGURE.

You may not specify %IDE_PIPELINE_PHASE_AFTER or
%IDE_PIPELINE_PHASE_BEFORE flags as those must always be processed
with the underlying phase they are attached to.

Upon completion, @callback will be built and should call
ide_pipeline_build_finish() to get the status of the
operation.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2299">A @IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2300">the requested build phase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2301">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2302">a callback to build upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2303">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_builddir_path"
              c:identifier="ide_pipeline_build_builddir_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2869">This is a convenience function to create a new path that starts with
the build directory for this build configuration.

This is functionally equivalent to calling g_build_filename() with the
result of ide_pipeline_get_builddir() as the first parameter.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2878">A newly allocated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="first_part" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="ide_pipeline_build_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2331">This function completes the asynchronous request to build
up to a particular phase of the build pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2340">%TRUE if the build stages were built successfully
  up to the requested build phase provided to
  ide_pipeline_build_async().</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2333">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2334">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_srcdir_path"
              c:identifier="ide_pipeline_build_srcdir_path"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2839">This is a convenience function to create a new path that starts with
the source directory of the project.

This is functionally equivalent to calling g_build_filename() with the
working directory of the source tree.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2848">A newly allocated string.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="first_part" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="build_targets_async"
              c:identifier="ide_pipeline_build_targets_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2173">Asynchronously starts the build pipeline.

The @phase parameter should contain the #IdePipelinePhase that is
necessary to complete. If you simply want to trigger a generic
build, you probably want %IDE_PIPELINE_PHASE_BUILD. If you only
need to configure the project (and necessarily the dependencies
up to that phase) you might want %IDE_PIPELINE_PHASE_CONFIGURE.

You may not specify %IDE_PIPELINE_PHASE_AFTER or
%IDE_PIPELINE_PHASE_BEFORE flags as those must always be processed
with the underlying phase they are attached to.

Upon completion, @callback will be build and should call
ide_pipeline_build_finish() to get the status of the
operation.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2175">A @IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2176">the requested build phase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="targets"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2177">an optional array of
  #IdeBuildTarget for the pipeline to build.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="BuildTarget"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2179">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2180">a callback to build upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2181">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_targets_finish"
              c:identifier="ide_pipeline_build_targets_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2267">This function completes the asynchronous request to build
up to a particular phase and targets of the build pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2276">%TRUE if the build stages were built successfully
  up to the requested build phase provided to
  ide_pipeline_build_targets_async().</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2269">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2270">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_async" c:identifier="ide_pipeline_clean_async">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_finish"
              c:identifier="ide_pipeline_clean_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="185"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="contains_program_in_path"
              c:identifier="ide_pipeline_contains_program_in_path">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4398">Looks through the runtime and SDK extensions for binaries matching
@name that may be executed.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4406">%TRUE if @name was found; otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4400">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4401">the name of a binary</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_launcher"
              c:identifier="ide_pipeline_create_launcher"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3029">This is a convenience function to create a new #IdeSubprocessLauncher
using the configuration and runtime associated with the pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3036">An #IdeSubprocessLauncher.</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3031">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_run_context"
              c:identifier="ide_pipeline_create_run_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4563">Creates a new #IdeRunContext to run @run_command.

This helper is generally meant to be used by pipeline stages to create
a run context that will execute within the pipeline to run the command
described in @run_command.

The run context is first prepared using ide_pipeline_prepare_run_context()
after which the run command's ide_run_command_prepare_to_run() is used.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4577">an #IdeRunContext</doc>
          <type name="RunContext" c:type="IdeRunContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4565">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="run_command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4566">an #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="detach" c:identifier="ide_pipeline_detach">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2899">This removes the stage matching @stage_id. You are returned a @stage_id when
inserting a stage with functions such as ide_pipeline_attach()
or ide_pipeline_attach_launcher().

Plugins should use this function to remove their stages when the plugin
is unloading.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2901">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="stage_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2902">An identifier returned from adding a stage</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_arch"
              c:identifier="ide_pipeline_dup_arch"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4341">Gets the name of the arch.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4347">a new string containing the arch</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4343">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_diagnostic"
              c:identifier="ide_pipeline_emit_diagnostic">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="diagnostic" transfer-ownership="none">
            <type name="Diagnostic" c:type="IdeDiagnostic*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_stage" c:identifier="ide_pipeline_foreach_stage">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3430">This function will call @stage_callback for every #IdePipelineStage registered
in the pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3432">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="stage_callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3433">A callback for each #IdePipelineStage</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3434">user data for @stage_callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_builddir" c:identifier="ide_pipeline_get_builddir">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2785">Gets the "builddir" to be used for the build process. This is generally
the location that build systems will use for out-of-tree builds.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2792">the path of the build directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2787">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_busy"
              c:identifier="ide_pipeline_get_busy"
              glib:get-property="busy">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_export" c:identifier="ide_pipeline_get_can_export">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3910">This function is useful to discover if there are any pipeline addins
which implement the export phase. UI or GAction implementations may
want to use this value to set the enabled state of the action or
sensitivity of a button.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3919">%TRUE if there are export pipeline stages.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3912">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="ide_pipeline_get_config"
              glib:get-property="config">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="877">Gets the #IdeConfig to use for the pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="882">An #IdeConfig</doc>
          <type name="Config" c:type="IdeConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_deploy_strategy"
              c:identifier="ide_pipeline_get_deploy_strategy">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4460">Gets the best discovered deployment strategry.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="211"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4466">the best deployment strategy
  if any are supported for the current configuration.</doc>
          <type name="DeployStrategy" c:type="IdeDeployStrategy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4462">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device"
              c:identifier="ide_pipeline_get_device"
              glib:get-property="device">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4252">Gets the device that the pipeline is building for.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4258">an #IdeDevice.</doc>
          <type name="Device" c:type="IdeDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4254">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_device_info"
              c:identifier="ide_pipeline_get_device_info">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4268">Gets the device info for the current device.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4274">an #IdeDeviceInfo or %NULL</doc>
          <type name="DeviceInfo" c:type="IdeDeviceInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4270">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_triplet"
              c:identifier="ide_pipeline_get_host_triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4301">Gets the "host" triplet which specifies where the build results will run.

This is a convenience wrapper around getting the triplet from the device
set for the build pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4310">an #IdeTriplet</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4303">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="ide_pipeline_get_message"
              glib:get-property="message">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3325">Gets the current message for the build pipeline. This can be
shown to users in UI elements to signify progress in the
build.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="84"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3333">A string representing the
  current stage of the build, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3327">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_phase"
              c:identifier="ide_pipeline_get_phase"
              glib:get-property="phase">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="856">Gets the current phase that is executing. This is only useful during
execution of the pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="PipelinePhase" c:type="IdePipelinePhase"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pty"
              c:identifier="ide_pipeline_get_pty"
              glib:get-property="pty">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3172">Gets the #VtePty for the pipeline, if set.

This will not be set until the pipeline has been initialized. That is not
guaranteed to happen at object creation time.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="90"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3181">a #VtePty or %NULL</doc>
          <type name="Vte.Pty" c:type="VtePty*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3174">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requested_phase"
              c:identifier="ide_pipeline_get_requested_phase">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4095">Gets the phase that has been requested. This can be useful when you want to
get an idea of where the build pipeline will attempt to advance.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4102">an #IdePipelinePhase</doc>
          <type name="PipelinePhase" c:type="IdePipelinePhase"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4097">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_runtime" c:identifier="ide_pipeline_get_runtime">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2997">A convenience function to get the runtime for a build pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3003">An #IdeRuntime or %NULL</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2999">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_srcdir" c:identifier="ide_pipeline_get_srcdir">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2802">Gets the "srcdir" of the project. This is equivalent to the
IdeVcs:working-directory property as a string.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2809">the path of the source directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2804">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stage_by_id"
              c:identifier="ide_pipeline_get_stage_by_id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2969">Gets the stage matching the identifier @stage_id as returned from
ide_pipeline_attach().</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="133"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2977">An #IdePipelineStage or %NULL if the
  stage could not be found.</doc>
          <type name="PipelineStage" c:type="IdePipelineStage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2971">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="stage_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2972">the identifier of the stage</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_toolchain" c:identifier="ide_pipeline_get_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3013">A convenience function to get the toolchain for a build pipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3019">An #IdeToolchain</doc>
          <type name="Toolchain" c:type="IdeToolchain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3015">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_configured" c:identifier="ide_pipeline_has_configured">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3978">Checks to see if the pipeline has advanced far enough to ensure that
the configure stage has been reached.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3985">%TRUE if %IDE_PIPELINE_PHASE_CONFIGURE has been reached.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3980">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate_phase"
              c:identifier="ide_pipeline_invalidate_phase">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2939">Invalidates the phases matching @phases flags.

If the requested phases include the phases invalidated here, the next
execution of the pipeline will build these phases.

This should be used by plugins to ensure a particular phase is re-buildd
upon discovering its state is no longer valid. Such an example might be
invalidating the %IDE_PIPELINE_PHASE_AUTOGEN phase when the an autotools
projects autogen.sh file has been changed.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2941">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phases" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2942">The phases to invalidate</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_native" c:identifier="ide_pipeline_is_native">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4320">This is a helper to check if the triplet that we are compiling
for matches the host system. That allows some plugins to do less
work by avoiding some cross-compiling work.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4328">%FALSE if we're possibly cross-compiling, otherwise %TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4322">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_ready" c:identifier="ide_pipeline_is_ready">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4284">Checks to see if the pipeline has been loaded. Loading may be delayed
due to various initialization routines that need to complete.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4291">%TRUE if the pipeline has loaded, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4286">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_run_context"
              c:identifier="ide_pipeline_prepare_run_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4511">Prepares #IdeRunContext to build within the pipeline.

You should use this to prepare a new #IdeRunContext to run within the
build pipeline environment before adding arguments and other settings
to the context.

The runtime will be consulted to modify any commands necessary.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4513">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4514">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild_async" c:identifier="ide_pipeline_rebuild_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3840">Asynchronously starts the build pipeline after cleaning any
existing build artifacts.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3842">A @IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3843">the requested build phase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
          <parameter name="targets"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3844">an array of
  #IdeBuildTarget or %NULL</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="BuildTarget"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3846">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3847">a callback to build upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3848">data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rebuild_finish"
              c:identifier="ide_pipeline_rebuild_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="196"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_toolchain" c:identifier="ide_pipeline_ref_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="4172">Thread-safe variant of ide_pipeline_get_toolchain().</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="4178">an #IdeToolchain or %NULL</doc>
          <type name="Toolchain" c:type="IdeToolchain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="4174">a #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_error_format"
              c:identifier="ide_pipeline_remove_error_format">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="3286">Removes an error format that was registered with
ide_pipeline_add_error_format().</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="3294">%TRUE if the error format was removed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3288">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="error_format_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="3289">an identifier for the error format.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_log_observer"
              c:identifier="ide_pipeline_remove_log_observer">
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="observer_id" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_phase" c:identifier="ide_pipeline_request_phase">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="2705">Requests that the next execution of the pipeline will build up to @phase
including all stages that were previously invalidated.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline.c"
               line="2713">%TRUE if a stage is known to require execution.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2707">An #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="2708">An #IdePipelinePhase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
        </parameters>
      </method>
      <property name="busy"
                writable="1"
                transfer-ownership="none"
                getter="get_busy"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1712">Gets the "busy" property. If %TRUE, the pipeline is busy executing.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="config"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_config">
        <type name="Config"/>
      </property>
      <property name="device"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_device">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1736">The "device" property is the device we are compiling for.</doc>
        <type name="Device"/>
      </property>
      <property name="message"
                transfer-ownership="none"
                getter="get_message"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1748">The "message" property is descriptive text about what the the
pipeline is doing or it's readiness status.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="phase"
                transfer-ownership="none"
                getter="get_phase"
                default-value="IDE_PIPELINE_PHASE_NONE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1761">The current build phase during execution of the pipeline.</doc>
        <type name="PipelinePhase"/>
      </property>
      <property name="pty" transfer-ownership="none" getter="get_pty">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1774">The "pty" property is the #VtePty that is used by build stages that
build subprocesses with a pseudo terminal.</doc>
        <type name="Vte.Pty"/>
      </property>
      <glib:signal name="diagnostic" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1789">This signal is emitted when a plugin has detected a diagnostic while
building the pipeline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="diagnostic" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="1792">The newly created diagnostic</doc>
            <type name="Diagnostic"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="finished" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1828">This signal is emitted when the build process has finished executing.
If the build failed to complete all requested stages, then @failed will
be set to %TRUE, otherwise %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="failed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="1831">If the build was a failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="launcher-created" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1862">The "launcher-created" signal is emitted when a new
#IdeSubprocessLauncher is created by the pipeline. This may be useful
to plugins that wan to modify the launcher in a consistent way for all
pipeline consumers.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="launcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="1865">an #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="loaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1849">The "loaded" signal is emitted after the pipeline has finished
loading addins.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="started" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline.c"
             line="1808">This signal is emitted when the pipeline has started executing in
response to ide_pipeline_build_async() being called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline.c"
                 line="1811">the #IdePipelinePhase for which we are advancing</doc>
            <type name="PipelinePhase"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <interface name="PipelineAddin"
               c:symbol-prefix="pipeline_addin"
               c:type="IdePipelineAddin"
               glib:type-name="IdePipelineAddin"
               glib:get-type="ide_pipeline_addin_get_type"
               glib:type-struct="PipelineAddinInterface">
      <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                       line="48"/>
      <prerequisite name="Object"/>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare" invoker="prepare">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-addin.c"
             line="35">This function is called before prepare so that plugins may setup
signals on the pipeline that may allow them to affect how other
plugins interact.

For example, if you need to connect to pipeline::launcher-created,
you might want to do that here.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-addin.c"
                 line="37">a #IdePipelineAddin</doc>
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-addin.c"
                 line="38">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_pipeline_addin_load">
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare" c:identifier="ide_pipeline_addin_prepare">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-addin.c"
             line="35">This function is called before prepare so that plugins may setup
signals on the pipeline that may allow them to affect how other
plugins interact.

For example, if you need to connect to pipeline::launcher-created,
you might want to do that here.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-addin.c"
                 line="37">a #IdePipelineAddin</doc>
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-addin.c"
                 line="38">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </method>
      <method name="track" c:identifier="ide_pipeline_addin_track">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-addin.c"
             line="95">This function will track the stage_id that was returned from
ide_pipeline_attach() or similar functions. Doing so results in
the stage being automatically disconnected when the addin is unloaded.

This means that many #IdePipelineAddin implementations do not need
an unload vfunc if they track all registered stages.

You should not mix this function with manual pipeline disconnections.
While it should work, that is not yet guaranteed.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-addin.c"
                 line="97">An #IdePipelineAddin</doc>
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="stage_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-addin.c"
                 line="98">a stage id returned from ide_pipeline_attach()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_pipeline_addin_unload">
        <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="PipelineAddinInterface"
            c:type="IdePipelineAddinInterface"
            glib:is-gtype-struct-for="PipelineAddin">
      <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                       line="48"/>
      <field name="type_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare">
        <callback name="prepare">
          <source-position filename="src/libide/foundry/ide-pipeline-addin.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-pipeline-addin.c"
                   line="37">a #IdePipelineAddin</doc>
              <type name="PipelineAddin" c:type="IdePipelineAddin*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-pipeline-addin.c"
                   line="38">an #IdePipeline</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="PipelineClass"
            c:type="IdePipelineClass"
            glib:is-gtype-struct-for="Pipeline">
      <source-position filename="src/libide/foundry/ide-pipeline.h" line="53"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <bitfield name="PipelinePhase"
              glib:type-name="IdePipelinePhase"
              glib:get-type="ide_pipeline_phase_get_type"
              c:type="IdePipelinePhase">
      <member name="none"
              value="0"
              c:identifier="IDE_PIPELINE_PHASE_NONE"
              glib:nick="none"
              glib:name="IDE_PIPELINE_PHASE_NONE">
      </member>
      <member name="prepare"
              value="1"
              c:identifier="IDE_PIPELINE_PHASE_PREPARE"
              glib:nick="prepare"
              glib:name="IDE_PIPELINE_PHASE_PREPARE">
      </member>
      <member name="downloads"
              value="2"
              c:identifier="IDE_PIPELINE_PHASE_DOWNLOADS"
              glib:nick="downloads"
              glib:name="IDE_PIPELINE_PHASE_DOWNLOADS">
      </member>
      <member name="dependencies"
              value="4"
              c:identifier="IDE_PIPELINE_PHASE_DEPENDENCIES"
              glib:nick="dependencies"
              glib:name="IDE_PIPELINE_PHASE_DEPENDENCIES">
      </member>
      <member name="autogen"
              value="8"
              c:identifier="IDE_PIPELINE_PHASE_AUTOGEN"
              glib:nick="autogen"
              glib:name="IDE_PIPELINE_PHASE_AUTOGEN">
      </member>
      <member name="configure"
              value="16"
              c:identifier="IDE_PIPELINE_PHASE_CONFIGURE"
              glib:nick="configure"
              glib:name="IDE_PIPELINE_PHASE_CONFIGURE">
      </member>
      <member name="build"
              value="64"
              c:identifier="IDE_PIPELINE_PHASE_BUILD"
              glib:nick="build"
              glib:name="IDE_PIPELINE_PHASE_BUILD">
      </member>
      <member name="install"
              value="128"
              c:identifier="IDE_PIPELINE_PHASE_INSTALL"
              glib:nick="install"
              glib:name="IDE_PIPELINE_PHASE_INSTALL">
      </member>
      <member name="commit"
              value="256"
              c:identifier="IDE_PIPELINE_PHASE_COMMIT"
              glib:nick="commit"
              glib:name="IDE_PIPELINE_PHASE_COMMIT">
      </member>
      <member name="export"
              value="512"
              c:identifier="IDE_PIPELINE_PHASE_EXPORT"
              glib:nick="export"
              glib:name="IDE_PIPELINE_PHASE_EXPORT">
      </member>
      <member name="final"
              value="1024"
              c:identifier="IDE_PIPELINE_PHASE_FINAL"
              glib:nick="final"
              glib:name="IDE_PIPELINE_PHASE_FINAL">
      </member>
      <member name="before"
              value="268435456"
              c:identifier="IDE_PIPELINE_PHASE_BEFORE"
              glib:nick="before"
              glib:name="IDE_PIPELINE_PHASE_BEFORE">
      </member>
      <member name="after"
              value="536870912"
              c:identifier="IDE_PIPELINE_PHASE_AFTER"
              glib:nick="after"
              glib:name="IDE_PIPELINE_PHASE_AFTER">
      </member>
      <member name="finished"
              value="1073741824"
              c:identifier="IDE_PIPELINE_PHASE_FINISHED"
              glib:nick="finished"
              glib:name="IDE_PIPELINE_PHASE_FINISHED">
      </member>
      <member name="failed"
              value="2147483648"
              c:identifier="IDE_PIPELINE_PHASE_FAILED"
              glib:nick="failed"
              glib:name="IDE_PIPELINE_PHASE_FAILED">
      </member>
    </bitfield>
    <class name="PipelineStage"
           c:symbol-prefix="pipeline_stage"
           c:type="IdePipelineStage"
           parent="Object"
           glib:type-name="IdePipelineStage"
           glib:get-type="ide_pipeline_stage_get_type"
           glib:type-struct="PipelineStageClass">
      <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                       line="121"/>
      <virtual-method name="build" throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_async" invoker="build_async">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_finish" invoker="build_finish" throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="chain" invoker="chain">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="next" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clean_async" invoker="clean_async">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clean_finish" invoker="clean_finish" throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query" introspectable="0">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="targets" transfer-ownership="none">
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="reap">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="reaper" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="build_async" c:identifier="ide_pipeline_stage_build_async">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="ide_pipeline_stage_build_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="chain" c:identifier="ide_pipeline_stage_chain">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="192"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="next" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_async" c:identifier="ide_pipeline_stage_clean_async">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_finish"
              c:identifier="ide_pipeline_stage_clean_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_reap" c:identifier="ide_pipeline_stage_emit_reap">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="reaper" transfer-ownership="none">
            <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="ide_pipeline_stage_get_active"
              glib:get-property="active">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="1155">Gets the "active" property, which is set to %TRUE when the
build stage is actively executing or cleaning.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline-stage.c"
               line="1162">%TRUE if the stage is actively executing or cleaning.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="1157">a #IdePipelineStage</doc>
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_check_stdout"
              c:identifier="ide_pipeline_stage_get_check_stdout"
              glib:get-property="check-stdout">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_completed"
              c:identifier="ide_pipeline_stage_get_completed"
              glib:get-property="completed">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_disabled"
              c:identifier="ide_pipeline_stage_get_disabled"
              glib:get-property="disabled">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_pipeline_stage_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdout_path"
              c:identifier="ide_pipeline_stage_get_stdout_path"
              glib:get-property="stdout-path">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transient"
              c:identifier="ide_pipeline_stage_get_transient"
              glib:get-property="transient">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="log" c:identifier="ide_pipeline_stage_log">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <type name="BuildLogStream" c:type="IdeBuildLogStream"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message_len" transfer-ownership="none">
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="log_subprocess"
              c:identifier="ide_pipeline_stage_log_subprocess">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="848">This function will begin logging @subprocess by reading from the
stdout and stderr streams of the subprocess. You must have created
the subprocess with %G_SUBPROCESS_FLAGS_STDERR_PIPE and
%G_SUBPROCESS_FLAGS_STDOUT_PIPE so that the streams may be read.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="850">An #IdePipelineStage</doc>
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="subprocess" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="851">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="ide_pipeline_stage_pause">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="195"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_active"
              c:identifier="ide_pipeline_stage_set_active"
              glib:set-property="active">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="active" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_check_stdout"
              c:identifier="ide_pipeline_stage_set_check_stdout"
              glib:set-property="check-stdout">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="check_stdout" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_completed"
              c:identifier="ide_pipeline_stage_set_completed"
              glib:set-property="completed">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="completed" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_disabled"
              c:identifier="ide_pipeline_stage_set_disabled"
              glib:set-property="disabled">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="159"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="disabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_log_observer"
              c:identifier="ide_pipeline_stage_set_log_observer">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="641">Sets the log observer to handle calls to the various stage logging
functions. This will be set by the pipeline to mux logs from all
stages into a unified build log.

Plugins that need to handle logging from a build stage should set
an observer on the pipeline so that log distribution may be fanned
out to all observers.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="643">An #IdePipelineStage</doc>
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="observer"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="644">The observer for the log entries</doc>
            <type name="BuildLogObserver" c:type="IdeBuildLogObserver"/>
          </parameter>
          <parameter name="observer_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="645">data for @observer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="observer_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="646">destroy callback for @observer_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_pipeline_stage_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stdout_path"
              c:identifier="ide_pipeline_stage_set_stdout_path"
              glib:set-property="stdout-path">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transient"
              c:identifier="ide_pipeline_stage_set_transient"
              glib:set-property="transient">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
          <parameter name="transient" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpause" c:identifier="ide_pipeline_stage_unpause">
        <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                         line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStage" c:type="IdePipelineStage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="active"
                writable="1"
                transfer-ownership="none"
                setter="set_active"
                getter="get_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="371">This property is set to %TRUE when the build stage is actively
running or cleaning.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="check-stdout"
                writable="1"
                transfer-ownership="none"
                setter="set_check_stdout"
                getter="get_check_stdout"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="384">Most build systems will preserve stderr for the processes they call, such
as gcc, clang, and others. However, if your build system redirects all
output to stdout, you may need to set this property to %TRUE to ensure
that Builder will extract errors from stdout.

One such example is Ninja.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="completed"
                writable="1"
                transfer-ownership="none"
                setter="set_completed"
                getter="get_completed"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="401">The "completed" property is set to %TRUE after the pipeline has
completed processing the stage. When the pipeline invalidates
phases, completed may be reset to %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="disabled"
                writable="1"
                transfer-ownership="none"
                setter="set_disabled"
                getter="get_disabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="415">If the build stage is disabled. This allows you to have a stage that is
attached but will not be activated during execution.

You may enable it later and then re-build the pipeline.

If the stage is both transient and disabled, it will not be removed during
the transient cleanup phase.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="433">The name of the build stage. This is only used by UI to view
the build pipeline.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="stdout-path"
                writable="1"
                transfer-ownership="none"
                setter="set_stdout_path"
                getter="get_stdout_path"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="446">The "stdout-path" property allows a build stage to redirect its log
messages to a stdout file. Instead of passing stdout along to the
build pipeline, they will be redirected to this file.

For safety reasons, the contents are first redirected to a temporary
file and will be redirected to the stdout-path location after the
build stage has completed executing.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transient"
                writable="1"
                transfer-ownership="none"
                setter="set_transient"
                getter="get_transient"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="464">If the build stage is transient.

A transient build stage is removed after the completion of
ide_pipeline_build_async(). This can be a convenient
way to add a temporary item to a build pipeline that should
be immediately discarded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="chain" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="PipelineStage"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="query" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="507">The #IdePipelineStage::query signal is emitted to request that the
build stage update its completed stage from any external resources.

This can be useful if you want to use an existing build stage instances
and use a signal to pause forward progress until an external system
has been checked.

The targets that the user would like to ensure are built are provided
as @targets. Some #IdePipelineStage may use this to reduce the amount
of work they perform

For example, in a signal handler, you may call ide_pipeline_stage_pause()
and perform an external operation. Forward progress of the stage will
be paused until a matching number of ide_pipeline_stage_unpause() calls
have been made.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="510">An #IdePipeline</doc>
            <type name="Pipeline"/>
          </parameter>
          <parameter name="targets"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="511">an array
  of #IdeBuildTarget or %NULL</doc>
            <array name="GLib.PtrArray">
              <type name="BuildTarget"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="513">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reap" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage.c"
             line="547">This signal is emitted when a request to rebuild the project has
occurred. This allows build stages to ensure that certain files are
removed from the system. For example, an autotools build stage might
request that "configure" is removed so that autogen.sh will be Executed
as part of the next build.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reaper" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage.c"
                 line="550">An #IdeDirectoryReaper</doc>
            <type name="DirectoryReaper"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PipelineStageClass"
            c:type="IdePipelineStageClass"
            glib:is-gtype-struct-for="PipelineStage">
      <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                       line="121"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="build">
        <callback name="build" throws="1">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_async">
        <callback name="build_async">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_finish">
        <callback name="build_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="78"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clean_async">
        <callback name="clean_async">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="92"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clean_finish">
        <callback name="clean_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="108"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query" introspectable="0">
        <callback name="query" introspectable="0">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="113"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="targets" transfer-ownership="none">
              <array name="GLib.PtrArray" c:type="GPtrArray*">
                <type name="gpointer" c:type="gpointer"/>
              </array>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reap">
        <callback name="reap">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="117"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="reaper" transfer-ownership="none">
              <type name="DirectoryReaper" c:type="IdeDirectoryReaper*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="chain">
        <callback name="chain">
          <source-position filename="src/libide/foundry/ide-pipeline-stage.h"
                           line="119"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
            <parameter name="next" transfer-ownership="none">
              <type name="PipelineStage" c:type="IdePipelineStage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PipelineStageCommand"
           c:symbol-prefix="pipeline_stage_command"
           c:type="IdePipelineStageCommand"
           parent="PipelineStage"
           glib:type-name="IdePipelineStageCommand"
           glib:get-type="ide_pipeline_stage_command_get_type"
           glib:type-struct="PipelineStageCommandClass">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                       line="42"/>
      <constructor name="new" c:identifier="ide_pipeline_stage_command_new">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <type name="PipelineStage" c:type="IdePipelineStage*"/>
        </return-value>
        <parameters>
          <parameter name="build_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
          <parameter name="clean_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_build_command"
              c:identifier="ide_pipeline_stage_command_set_build_command"
              glib:set-property="build-command">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageCommand"
                  c:type="IdePipelineStageCommand*"/>
          </instance-parameter>
          <parameter name="build_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_clean_command"
              c:identifier="ide_pipeline_stage_command_set_clean_command"
              glib:set-property="clean-command">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageCommand"
                  c:type="IdePipelineStageCommand*"/>
          </instance-parameter>
          <parameter name="clean_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ignore_exit_status"
              c:identifier="ide_pipeline_stage_command_set_ignore_exit_status"
              glib:set-property="ignore-exit-status">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageCommand"
                  c:type="IdePipelineStageCommand*"/>
          </instance-parameter>
          <parameter name="ignore_exit_status" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stdout_path"
              c:identifier="ide_pipeline_stage_command_set_stdout_path"
              glib:set-property="stdout-path">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageCommand"
                  c:type="IdePipelineStageCommand*"/>
          </instance-parameter>
          <parameter name="stdout_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="build-command"
                writable="1"
                transfer-ownership="none"
                setter="set_build_command">
        <type name="RunCommand"/>
      </property>
      <property name="clean-command"
                writable="1"
                transfer-ownership="none"
                setter="set_clean_command">
        <type name="RunCommand"/>
      </property>
      <property name="ignore-exit-status"
                writable="1"
                transfer-ownership="none"
                setter="set_ignore_exit_status"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stdout-path"
                writable="1"
                transfer-ownership="none"
                setter="set_stdout_path"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="PipelineStage" c:type="IdePipelineStage"/>
      </field>
      <glib:signal name="create-run-context" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage-command.c"
             line="401">Sets up the #IdeRunContext which will be used to hoist in the
#IdeRunCommand. If no run context is provided, then the build pipeline
will be used.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline-stage-command.c"
               line="410">an #IdeRunContext</doc>
          <type name="RunContext"/>
        </return-value>
        <parameters>
          <parameter name="command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage-command.c"
                 line="404">an #IdeRunCommand</doc>
            <type name="RunCommand"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PipelineStageCommandClass"
            c:type="IdePipelineStageCommandClass"
            glib:is-gtype-struct-for="PipelineStageCommand">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-command.h"
                       line="42"/>
      <field name="parent_class">
        <type name="PipelineStageClass" c:type="IdePipelineStageClass"/>
      </field>
    </record>
    <class name="PipelineStageLauncher"
           c:symbol-prefix="pipeline_stage_launcher"
           c:type="IdePipelineStageLauncher"
           parent="PipelineStage"
           glib:type-name="IdePipelineStageLauncher"
           glib:get-type="ide_pipeline_stage_launcher_get_type"
           glib:type-struct="PipelineStageLauncherClass">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                       line="45"/>
      <constructor name="new" c:identifier="ide_pipeline_stage_launcher_new">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
             line="522">Creates a new #IdePipelineStageLauncher that can be attached to an
#IdePipeline.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
               line="530">An #IdePipelineStageLauncher</doc>
          <type name="PipelineStage" c:type="IdePipelineStage*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
                 line="524">An #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="launcher"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
                 line="525">An #IdeSubprocessLauncher or %NULL</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_clean_launcher"
              c:identifier="ide_pipeline_stage_launcher_get_clean_launcher"
              glib:get-property="clean-launcher">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
               line="605">An #IdeSubprocessLauncher or %NULL.</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ignore_exit_status"
              c:identifier="ide_pipeline_stage_launcher_get_ignore_exit_status"
              glib:get-property="ignore-exit-status">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
             line="541">Gets the "ignore-exit-status" property.

If set to %TRUE, a non-zero exit status from the subprocess will not cause
the build stage to fail.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_launcher"
              c:identifier="ide_pipeline_stage_launcher_get_launcher"
              glib:get-property="launcher">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
               line="497">An #IdeSubprocessLauncher</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_pty"
              c:identifier="ide_pipeline_stage_launcher_get_use_pty"
              glib:get-property="use-pty">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_clean_launcher"
              c:identifier="ide_pipeline_stage_launcher_set_clean_launcher"
              glib:set-property="clean-launcher">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
          <parameter name="clean_launcher" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ignore_exit_status"
              c:identifier="ide_pipeline_stage_launcher_set_ignore_exit_status"
              glib:set-property="ignore-exit-status">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
             line="559">Sets the "ignore-exit-status" property.

If set to %TRUE, a non-zero exit status from the subprocess will not cause
the build stage to fail.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
          <parameter name="ignore_exit_status" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_launcher"
              c:identifier="ide_pipeline_stage_launcher_set_launcher"
              glib:set-property="launcher">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
          <parameter name="launcher" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_pty"
              c:identifier="ide_pipeline_stage_launcher_set_use_pty"
              glib:set-property="use-pty">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
             line="627">If @use_pty is set to %TRUE, a Pty will be attached to the process.</doc>
        <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
                 line="629">a #IdePipelineStageLauncher</doc>
            <type name="PipelineStageLauncher"
                  c:type="IdePipelineStageLauncher*"/>
          </instance-parameter>
          <parameter name="use_pty" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-pipeline-stage-launcher.c"
                 line="630">If a Pty should be used</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="clean-launcher"
                writable="1"
                transfer-ownership="none"
                setter="set_clean_launcher"
                getter="get_clean_launcher">
        <type name="SubprocessLauncher"/>
      </property>
      <property name="ignore-exit-status"
                writable="1"
                transfer-ownership="none"
                setter="set_ignore_exit_status"
                getter="get_ignore_exit_status"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="launcher"
                writable="1"
                transfer-ownership="none"
                setter="set_launcher"
                getter="get_launcher">
        <type name="SubprocessLauncher"/>
      </property>
      <property name="use-pty"
                writable="1"
                transfer-ownership="none"
                setter="set_use_pty"
                getter="get_use_pty"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="PipelineStage" c:type="IdePipelineStage"/>
      </field>
    </class>
    <record name="PipelineStageLauncherClass"
            c:type="IdePipelineStageLauncherClass"
            glib:is-gtype-struct-for="PipelineStageLauncher">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-launcher.h"
                       line="45"/>
      <field name="parent_class">
        <type name="PipelineStageClass" c:type="IdePipelineStageClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PipelineStageMkdirs"
           c:symbol-prefix="pipeline_stage_mkdirs"
           c:type="IdePipelineStageMkdirs"
           parent="PipelineStage"
           glib:type-name="IdePipelineStageMkdirs"
           glib:get-type="ide_pipeline_stage_mkdirs_get_type"
           glib:type-struct="PipelineStageMkdirsClass">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-mkdirs.h"
                       line="44"/>
      <constructor name="new" c:identifier="ide_pipeline_stage_mkdirs_new">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-mkdirs.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <type name="PipelineStage" c:type="IdePipelineStage*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_path"
              c:identifier="ide_pipeline_stage_mkdirs_add_path">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-mkdirs.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PipelineStageMkdirs" c:type="IdePipelineStageMkdirs*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="with_parents" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="remove_on_rebuild" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="PipelineStage" c:type="IdePipelineStage"/>
      </field>
    </class>
    <record name="PipelineStageMkdirsClass"
            c:type="IdePipelineStageMkdirsClass"
            glib:is-gtype-struct-for="PipelineStageMkdirs">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-mkdirs.h"
                       line="44"/>
      <field name="parent_class">
        <type name="PipelineStageClass" c:type="IdePipelineStageClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="PipelineStageTransfer"
           c:symbol-prefix="pipeline_stage_transfer"
           c:type="IdePipelineStageTransfer"
           parent="PipelineStage"
           final="1"
           glib:type-name="IdePipelineStageTransfer"
           glib:get-type="ide_pipeline_stage_transfer_get_type"
           glib:type-struct="PipelineStageTransferClass">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-transfer.h"
                       line="37"/>
      <constructor name="new" c:identifier="ide_pipeline_stage_transfer_new">
        <source-position filename="src/libide/foundry/ide-pipeline-stage-transfer.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <type name="PipelineStageTransfer"
                c:type="IdePipelineStageTransfer*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="transfer" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="disable-when-metered"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transfer"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Transfer"/>
      </property>
    </class>
    <record name="PipelineStageTransferClass"
            c:type="IdePipelineStageTransferClass"
            glib:is-gtype-struct-for="PipelineStageTransfer">
      <source-position filename="src/libide/foundry/ide-pipeline-stage-transfer.h"
                       line="37"/>
      <field name="parent_class">
        <type name="PipelineStageClass" c:type="IdePipelineStageClass"/>
      </field>
    </record>
    <class name="PkconTransfer"
           c:symbol-prefix="pkcon_transfer"
           c:type="IdePkconTransfer"
           parent="Transfer"
           final="1"
           glib:type-name="IdePkconTransfer"
           glib:get-type="ide_pkcon_transfer_get_type"
           glib:type-struct="PkconTransferClass">
      <source-position filename="src/libide/io/ide-pkcon-transfer.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_pkcon_transfer_new">
        <source-position filename="src/libide/io/ide-pkcon-transfer.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="PkconTransfer" c:type="IdePkconTransfer*"/>
        </return-value>
        <parameters>
          <parameter name="packages" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="packages"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
    </class>
    <record name="PkconTransferClass"
            c:type="IdePkconTransferClass"
            glib:is-gtype-struct-for="PkconTransfer">
      <source-position filename="src/libide/io/ide-pkcon-transfer.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TransferClass" c:type="IdeTransferClass"/>
      </field>
    </record>
    <class name="Plugin"
           c:symbol-prefix="plugin"
           c:type="IdePlugin"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdePlugin"
           glib:get-type="ide_plugin_get_type"
           glib:type-struct="PluginClass">
      <source-position filename="src/libide/plugins/ide-plugin.h" line="36"/>
      <method name="get_category"
              c:identifier="ide_plugin_get_category"
              glib:get-property="category">
        <source-position filename="src/libide/plugins/ide-plugin.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category_id"
              c:identifier="ide_plugin_get_category_id"
              glib:get-property="category-id">
        <source-position filename="src/libide/plugins/ide-plugin.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_plugin_get_description"
              glib:get-property="description">
        <source-position filename="src/libide/plugins/ide-plugin.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_plugin_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/plugins/ide-plugin.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="ide_plugin_get_info"
              glib:get-property="info">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-plugin.c"
             line="224">Get the underlying #PeasPluginInfo.</doc>
        <source-position filename="src/libide/plugins/ide-plugin.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-plugin.c"
               line="230">a #PeasPluginInfo</doc>
          <type name="Peas.PluginInfo" c:type="PeasPluginInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-plugin.c"
                 line="226">a #IdePlugin</doc>
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_plugin_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/plugins/ide-plugin.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_section"
              c:identifier="ide_plugin_get_section"
              glib:get-property="section">
        <source-position filename="src/libide/plugins/ide-plugin.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Plugin" c:type="IdePlugin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="authors" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="category"
                transfer-ownership="none"
                getter="get_category"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="category-id"
                transfer-ownership="none"
                getter="get_category_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="copyright"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="info"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_info">
        <type name="Peas.PluginInfo"/>
      </property>
      <property name="name"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="section"
                transfer-ownership="none"
                getter="get_section"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="version" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="website" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="PluginClass"
            c:type="IdePluginClass"
            glib:is-gtype-struct-for="Plugin">
      <source-position filename="src/libide/plugins/ide-plugin.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="PluginSection"
           c:symbol-prefix="plugin_section"
           c:type="IdePluginSection"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdePluginSection"
           glib:get-type="ide_plugin_section_get_type"
           glib:type-struct="PluginSectionClass">
      <source-position filename="src/libide/plugins/ide-plugin-section.h"
                       line="36"/>
      <method name="get_id"
              c:identifier="ide_plugin_section_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/plugins/ide-plugin-section.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PluginSection" c:type="IdePluginSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_plugins"
              c:identifier="ide_plugin_section_get_plugins"
              glib:get-property="plugins">
        <doc xml:space="preserve"
             filename="src/libide/plugins/ide-plugin-section.c"
             line="136">A #GListModel of #IdePlugin.</doc>
        <source-position filename="src/libide/plugins/ide-plugin-section.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/plugins/ide-plugin-section.c"
               line="142">a #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/plugins/ide-plugin-section.c"
                 line="138">a #IdePluginSection</doc>
            <type name="PluginSection" c:type="IdePluginSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="plugins" transfer-ownership="none" getter="get_plugins">
        <type name="Gio.ListModel"/>
      </property>
    </class>
    <record name="PluginSectionClass"
            c:type="IdePluginSectionClass"
            glib:is-gtype-struct-for="PluginSection">
      <source-position filename="src/libide/plugins/ide-plugin-section.h"
                       line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="PrimaryWorkspace"
           c:symbol-prefix="primary_workspace"
           c:type="IdePrimaryWorkspace"
           parent="Workspace"
           final="1"
           glib:type-name="IdePrimaryWorkspace"
           glib:get-type="ide_primary_workspace_get_type"
           glib:type-struct="PrimaryWorkspaceClass">
      <source-position filename="src/libide/gui/ide-primary-workspace.h"
                       line="36"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <method name="get_omni_bar"
              c:identifier="ide_primary_workspace_get_omni_bar">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-primary-workspace.c"
             line="355">Retrieves the #IdeOmniBar of @self.</doc>
        <source-position filename="src/libide/gui/ide-primary-workspace.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-primary-workspace.c"
               line="361">an #IdeOmniBar</doc>
          <type name="OmniBar" c:type="IdeOmniBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-primary-workspace.c"
                 line="357">an #IdePrimaryWorkspace</doc>
            <type name="PrimaryWorkspace" c:type="IdePrimaryWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="PrimaryWorkspaceClass"
            c:type="IdePrimaryWorkspaceClass"
            glib:is-gtype-struct-for="PrimaryWorkspace">
      <source-position filename="src/libide/gui/ide-primary-workspace.h"
                       line="36"/>
      <field name="parent_class">
        <type name="WorkspaceClass" c:type="IdeWorkspaceClass"/>
      </field>
    </record>
    <enumeration name="ProcessKind" c:type="IdeProcessKind">
      <source-position filename="src/libide/core/ide-global.h" line="37"/>
      <member name="host" value="0" c:identifier="IDE_PROCESS_KIND_HOST">
      </member>
      <member name="flatpak" value="1" c:identifier="IDE_PROCESS_KIND_FLATPAK">
      </member>
    </enumeration>
    <class name="ProgressIcon"
           c:symbol-prefix="progress_icon"
           c:type="IdeProgressIcon"
           parent="Gtk.DrawingArea"
           glib:type-name="IdeProgressIcon"
           glib:get-type="ide_progress_icon_get_type"
           glib:type-struct="ProgressIconClass">
      <source-position filename="src/libide/gtk/ide-progress-icon.h"
                       line="34"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_progress_icon_new">
        <source-position filename="src/libide/gtk/ide-progress-icon.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_progress"
              c:identifier="ide_progress_icon_get_progress"
              glib:get-property="progress">
        <source-position filename="src/libide/gtk/ide-progress-icon.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressIcon" c:type="IdeProgressIcon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="ide_progress_icon_set_progress"
              glib:set-property="progress">
        <source-position filename="src/libide/gtk/ide-progress-icon.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProgressIcon" c:type="IdeProgressIcon*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
    </class>
    <record name="ProgressIconClass"
            c:type="IdeProgressIconClass"
            glib:is-gtype-struct-for="ProgressIcon">
      <source-position filename="src/libide/gtk/ide-progress-icon.h"
                       line="34"/>
      <field name="parent_class">
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <class name="Project"
           c:symbol-prefix="project"
           c:type="IdeProject"
           parent="Object"
           final="1"
           glib:type-name="IdeProject"
           glib:get-type="ide_project_get_type"
           glib:type-struct="ProjectClass">
      <source-position filename="src/libide/projects/ide-project.h" line="30"/>
      <function name="from_context" c:identifier="ide_project_from_context">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project.c"
             line="114">Gets the project for an #IdeContext.</doc>
        <source-position filename="src/libide/projects/ide-project.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project.c"
               line="120">an #IdeProject</doc>
          <type name="Project" c:type="IdeProject*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project.c"
                 line="116">#IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="list_similar_async"
              c:identifier="ide_project_list_similar_async">
        <source-position filename="src/libide/projects/ide-project.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_similar_finish"
              c:identifier="ide_project_list_similar_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project.c"
             line="650">Completes asynchronous request to locate similar files.</doc>
        <source-position filename="src/libide/projects/ide-project.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project.c"
               line="658">a #GListModel of #GFile or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project.c"
                 line="652">a #IdeProject</doc>
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project.c"
                 line="653">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_file_async"
              c:identifier="ide_project_rename_file_async">
        <source-position filename="src/libide/projects/ide-project.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="orig_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="new_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_file_finish"
              c:identifier="ide_project_rename_file_finish"
              throws="1">
        <source-position filename="src/libide/projects/ide-project.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_file_async"
              c:identifier="ide_project_trash_file_async">
        <source-position filename="src/libide/projects/ide-project.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_file_finish"
              c:identifier="ide_project_trash_file_finish"
              throws="1">
        <source-position filename="src/libide/projects/ide-project.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Project" c:type="IdeProject*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="file-renamed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="file-trashed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProjectClass"
            c:type="IdeProjectClass"
            glib:is-gtype-struct-for="Project">
      <source-position filename="src/libide/projects/ide-project.h" line="30"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="ProjectFile"
           c:symbol-prefix="project_file"
           c:type="IdeProjectFile"
           parent="Object"
           glib:type-name="IdeProjectFile"
           glib:get-type="ide_project_file_get_type"
           glib:type-struct="ProjectFileClass">
      <source-position filename="src/libide/projects/ide-project-file.h"
                       line="54"/>
      <constructor name="new" c:identifier="ide_project_file_new">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="574">Creates a new project file for a child of @directory.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="581">an #IdeProjectFile</doc>
          <type name="ProjectFile" c:type="IdeProjectFile*"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="576">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="577">a #GFileInfo</doc>
            <type name="Gio.FileInfo" c:type="GFileInfo*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="compare" c:identifier="ide_project_file_compare">
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="compare_directories_first"
              c:identifier="ide_project_file_compare_directories_first">
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_child" c:identifier="ide_project_file_create_child">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="550">Creates a new child project file of @self.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="557">an #IdeProjectFile</doc>
          <type name="ProjectFile" c:type="IdeProjectFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="552">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="553">a #GFileInfo</doc>
            <type name="Gio.FileInfo" c:type="GFileInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="ide_project_file_get_directory"
              glib:get-property="directory">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="174">Gets the project file.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="180">an #IdeProjectFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="176">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_project_file_get_display_name">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="248">Gets the display-name for the file, which should be shown to users.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="254">a string containing the display name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="250">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="ide_project_file_get_info"
              glib:get-property="info">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="210">Gets the #GFileInfo for the file. This combined with
#IdeProjectFile:directory can be used to determine the underlying
file, such as via #IdeProjectFile:file.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="218">a #GFileInfo</doc>
          <type name="Gio.FileInfo" c:type="GFileInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="212">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_project_file_get_name">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="230">Gets the name for the file, which matches the encoding on disk.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="236">a string containing the name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="232">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbolic_icon"
              c:identifier="ide_project_file_get_symbolic_icon">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="346">Gets the symbolic icon to represent the file.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="80"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="352">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="348">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_directory" c:identifier="ide_project_file_is_directory">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="266">Checks if @self represents a directory. If ide_project_file_is_symlink() is
%TRUE, this may still return %TRUE.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="273">%TRUE if @self is a directory, or symlink to a directory</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="268">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_symlink" c:identifier="ide_project_file_is_symlink">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="286">Checks if @self represents a symlink.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="292">%TRUE if @self is a symlink</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="288">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_children_async"
              c:identifier="ide_project_file_list_children_async">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="426">List the children of @self.

Call ide_project_file_list_children_finish() to get the result
of this operation.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="428">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="429">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="430">callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="431">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_children_finish"
              c:identifier="ide_project_file_list_children_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="464">Completes an asynchronous request to
ide_project_file_list_children_async().</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="473">a #GPtrArray
  of #IdeProjectFile</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="ProjectFile"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="466">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="467">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_file" c:identifier="ide_project_file_ref_file">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-file.c"
             line="192">Gets the file for the #IdeProjectFile.</doc>
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-file.c"
               line="198">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-file.c"
                 line="194">a #IdeProjectFile</doc>
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="trash_async" c:identifier="ide_project_file_trash_async">
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="trash_finish"
              c:identifier="ide_project_file_trash_finish"
              throws="1">
        <source-position filename="src/libide/projects/ide-project-file.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectFile" c:type="IdeProjectFile*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="directory"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_directory">
        <type name="Gio.File"/>
      </property>
      <property name="file" transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="info"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_info">
        <type name="Gio.FileInfo"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="ProjectFileClass"
            c:type="IdeProjectFileClass"
            glib:is-gtype-struct-for="ProjectFile">
      <source-position filename="src/libide/projects/ide-project-file.h"
                       line="54"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ProjectInfo"
           c:symbol-prefix="project_info"
           c:type="IdeProjectInfo"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeProjectInfo"
           glib:get-type="ide_project_info_get_type"
           glib:type-struct="ProjectInfoClass">
      <doc xml:space="preserve"
           filename="src/libide/projects/ide-project-info.c"
           line="37">This class contains information about a project that can be loaded.
This information should be used to display a list of available projects.</doc>
      <source-position filename="src/libide/projects/ide-project-info.h"
                       line="37"/>
      <constructor name="new" c:identifier="ide_project_info_new">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
        </return-value>
      </constructor>
      <method name="compare" c:identifier="ide_project_info_compare">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="info1" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="info2" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="ide_project_info_equal">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-info.c"
             line="733">This function will check to see if information about @self and @other are
similar enough that a request to open @other would instead activate
@self. This is useful when a user tries to open the same project twice.

However, some case is taken to ensure that things like the build system
are the same so that a project may be opened twice with two build systems
as is sometimes necessary when projects are porting to a new build
system.</doc>
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="747">%TRUE if @self and @other are the same project and similar
  enough to be considered equal.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-info.c"
                 line="735">a #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-info.c"
                 line="736">a #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_system_hint"
              c:identifier="ide_project_info_get_build_system_hint"
              glib:get-property="build-system-hint">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_build_system_name"
              c:identifier="ide_project_info_get_build_system_name"
              glib:get-property="build-system-name">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_project_info_get_description"
              glib:get-property="description">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="ide_project_info_get_directory"
              glib:get-property="directory">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-info.c"
             line="167">Gets the #IdeProjectInfo:directory property.
This is the directory containing the project (if known).</doc>
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="174">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-info.c"
                 line="169">an #IdeProjectInfo.</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_doap"
              c:identifier="ide_project_info_get_doap"
              glib:get-property="doap">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="55"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="98">An #IdeDoap or %NULL.</doc>
          <type name="Doap" c:type="IdeDoap*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="ide_project_info_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-info.c"
             line="184">Gets the #IdeProjectInfo:file property.
This is the project file (such as configure.ac) of the project.</doc>
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="191">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-info.c"
                 line="186">an #IdeProjectInfo.</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="ide_project_info_get_icon"
              glib:get-property="icon">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-info.c"
             line="828">Gets the #IdeProjectInfo:icon property.</doc>
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="834">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-info.c"
                 line="830">a #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_project_info_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_recent"
              c:identifier="ide_project_info_get_is_recent"
              glib:get-property="is-recent">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="ide_project_info_get_languages"
              glib:get-property="languages">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="122">An array of language names.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_modified_at"
              c:identifier="ide_project_info_get_last_modified_at"
              glib:get-property="last-modified-at">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="80"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="205">a #GDateTime or %NULL.</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_project_info_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_project_info_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vcs_uri"
              c:identifier="ide_project_info_get_vcs_uri"
              glib:get-property="vcs-uri">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-info.c"
             line="697">Gets the VCS URI for the project info. This should be set with the
remote URI for the version control system. It can be used to clone the
project when activated from the greeter.</doc>
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="89"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-info.c"
               line="705">a #IdeVcsUri or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-info.c"
                 line="699">an #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_build_system_hint"
              c:identifier="ide_project_info_set_build_system_hint"
              glib:set-property="build-system-hint">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="build_system_hint" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_build_system_name"
              c:identifier="ide_project_info_set_build_system_name"
              glib:set-property="build-system-name">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="build_system_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="ide_project_info_set_description"
              glib:set-property="description">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_directory"
              c:identifier="ide_project_info_set_directory"
              glib:set-property="directory">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_doap"
              c:identifier="ide_project_info_set_doap"
              glib:set-property="doap">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="doap" transfer-ownership="none">
            <type name="Doap" c:type="IdeDoap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file"
              c:identifier="ide_project_info_set_file"
              glib:set-property="file">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="ide_project_info_set_icon"
              glib:set-property="icon">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_project_info_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_project_info_set_id"
              glib:set-property="id">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_recent"
              c:identifier="ide_project_info_set_is_recent"
              glib:set-property="is-recent">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="is_recent" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_languages"
              c:identifier="ide_project_info_set_languages"
              glib:set-property="languages">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="languages" transfer-ownership="none">
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_last_modified_at"
              c:identifier="ide_project_info_set_last_modified_at"
              glib:set-property="last-modified-at">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="modified_at" transfer-ownership="none">
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_project_info_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_project_info_set_priority"
              glib:set-property="priority">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vcs_uri"
              c:identifier="ide_project_info_set_vcs_uri"
              glib:set-property="vcs-uri">
        <source-position filename="src/libide/projects/ide-project-info.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </instance-parameter>
          <parameter name="vcs_uri" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="build-system-hint"
                writable="1"
                transfer-ownership="none"
                setter="set_build_system_hint"
                getter="get_build_system_hint"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="build-system-name"
                writable="1"
                transfer-ownership="none"
                setter="set_build_system_name"
                getter="get_build_system_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="directory"
                writable="1"
                transfer-ownership="none"
                setter="set_directory"
                getter="get_directory">
        <type name="Gio.File"/>
      </property>
      <property name="doap"
                writable="1"
                transfer-ownership="none"
                setter="set_doap"
                getter="get_doap">
        <type name="Doap"/>
      </property>
      <property name="file"
                writable="1"
                transfer-ownership="none"
                setter="set_file"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <property name="icon"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-recent"
                writable="1"
                transfer-ownership="none"
                setter="set_is_recent"
                getter="get_is_recent"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="languages"
                writable="1"
                transfer-ownership="none"
                setter="set_languages"
                getter="get_languages">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="last-modified-at"
                writable="1"
                transfer-ownership="none"
                setter="set_last_modified_at"
                getter="get_last_modified_at">
        <type name="GLib.DateTime"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                setter="set_priority"
                getter="get_priority"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="vcs-uri"
                writable="1"
                transfer-ownership="none"
                setter="set_vcs_uri"
                getter="get_vcs_uri"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="ProjectInfoClass"
            c:type="IdeProjectInfoClass"
            glib:is-gtype-struct-for="ProjectInfo">
      <source-position filename="src/libide/projects/ide-project-info.h"
                       line="37"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ProjectTemplate"
           c:symbol-prefix="project_template"
           c:type="IdeProjectTemplate"
           parent="TemplateBase"
           abstract="1"
           glib:type-name="IdeProjectTemplate"
           glib:get-type="ide_project_template_get_type"
           glib:type-struct="ProjectTemplateClass">
      <source-position filename="src/libide/projects/ide-project-template.h"
                       line="59"/>
      <virtual-method name="expand_async" invoker="expand_async">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-template.c"
             line="310">Asynchronously requests expansion of the template.

This may involve creating files and directories on disk as well as
expanding files based on the contents of @params.

It is expected that this method is only called once on an #IdeProjectTemplate.</doc>
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="312">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="313">the template input</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="314">scope for the template</doc>
            <type name="Template.Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="315">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="316">the callback for the asynchronous operation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="317">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="expand_finish" invoker="expand_finish" throws="1">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="validate_app_id" invoker="validate_app_id">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="validate_name" invoker="validate_name">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="compare" c:identifier="ide_project_template_compare">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="a" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="b" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_async"
              c:identifier="ide_project_template_expand_async">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-template.c"
             line="310">Asynchronously requests expansion of the template.

This may involve creating files and directories on disk as well as
expanding files based on the contents of @params.

It is expected that this method is only called once on an #IdeProjectTemplate.</doc>
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="312">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="input" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="313">the template input</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="314">scope for the template</doc>
            <type name="Template.Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="315">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="316">the callback for the asynchronous operation.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="317">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_finish"
              c:identifier="ide_project_template_expand_finish"
              throws="1">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="ide_project_template_get_description"
              glib:get-property="description">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_project_template_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="ide_project_template_get_languages"
              glib:get-property="languages">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-template.c"
             line="281">Gets the list of languages that this template can support when generating
the project.</doc>
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-project-template.c"
               line="288">an array of language names</doc>
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-template.c"
                 line="283">an #IdeProjectTemplate</doc>
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_project_template_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_project_template_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="validate_app_id"
              c:identifier="ide_project_template_validate_app_id">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="validate_name"
              c:identifier="ide_project_template_validate_name">
        <source-position filename="src/libide/projects/ide-project-template.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="languages"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_languages">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_priority"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="TemplateBase" c:type="IdeTemplateBase"/>
      </field>
    </class>
    <record name="ProjectTemplateClass"
            c:type="IdeProjectTemplateClass"
            glib:is-gtype-struct-for="ProjectTemplate">
      <source-position filename="src/libide/projects/ide-project-template.h"
                       line="59"/>
      <field name="parent_instance">
        <type name="TemplateBaseClass" c:type="IdeTemplateBaseClass"/>
      </field>
      <field name="validate_name">
        <callback name="validate_name">
          <source-position filename="src/libide/projects/ide-project-template.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
            <parameter name="name" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="validate_app_id">
        <callback name="validate_app_id">
          <source-position filename="src/libide/projects/ide-project-template.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
            <parameter name="app_id" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expand_async">
        <callback name="expand_async">
          <source-position filename="src/libide/projects/ide-project-template.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-template.c"
                   line="312">an #IdeProjectTemplate</doc>
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
            <parameter name="input" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-template.c"
                   line="313">the template input</doc>
              <type name="TemplateInput" c:type="IdeTemplateInput*"/>
            </parameter>
            <parameter name="scope" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-template.c"
                   line="314">scope for the template</doc>
              <type name="Template.Scope" c:type="TmplScope*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-template.c"
                   line="315">a #GCancellable or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-template.c"
                   line="316">the callback for the asynchronous operation.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-template.c"
                   line="317">user data for @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="expand_finish">
        <callback name="expand_finish" throws="1">
          <source-position filename="src/libide/projects/ide-project-template.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ProjectTemplate" c:type="IdeProjectTemplate*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="ProjectTreeAddin"
               c:symbol-prefix="project_tree_addin"
               c:type="IdeProjectTreeAddin"
               glib:type-name="IdeProjectTreeAddin"
               glib:get-type="ide_project_tree_addin_get_type"
               glib:type-struct="ProjectTreeAddinInterface">
      <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                       line="40"/>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-tree-addin.c"
             line="44">This function will call the IdeProjectTreeAddin::load vfunc of @self.

This is used to initialize the project tree so that plugins can extend
the contents of the tree.

Plugins should add a #IdeTreeBuilder to the tree when loading, and remove
them when unloading.

See also: ide_project_tree_addin_unload()</doc>
        <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="46">a #IdeProjectTreeAddin</doc>
            <type name="ProjectTreeAddin" c:type="IdeProjectTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="47">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-tree-addin.c"
             line="70">This function will call the IdeProjectTreeAddin::unload vfunc of @self.

This is used to unload the project tree so that plugins can clealy be
disabled by the user at runtime. Any changes to @tree done during load
should be undone here.

See also: ide_project_tree_addin_load()</doc>
        <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="72">a #IdeProjectTreeAddin</doc>
            <type name="ProjectTreeAddin" c:type="IdeProjectTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="73">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_project_tree_addin_load">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-tree-addin.c"
             line="44">This function will call the IdeProjectTreeAddin::load vfunc of @self.

This is used to initialize the project tree so that plugins can extend
the contents of the tree.

Plugins should add a #IdeTreeBuilder to the tree when loading, and remove
them when unloading.

See also: ide_project_tree_addin_unload()</doc>
        <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="46">a #IdeProjectTreeAddin</doc>
            <type name="ProjectTreeAddin" c:type="IdeProjectTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="47">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_project_tree_addin_unload">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-project-tree-addin.c"
             line="70">This function will call the IdeProjectTreeAddin::unload vfunc of @self.

This is used to unload the project tree so that plugins can clealy be
disabled by the user at runtime. Any changes to @tree done during load
should be undone here.

See also: ide_project_tree_addin_load()</doc>
        <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="72">a #IdeProjectTreeAddin</doc>
            <type name="ProjectTreeAddin" c:type="IdeProjectTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-project-tree-addin.c"
                 line="73">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ProjectTreeAddinInterface"
            c:type="IdeProjectTreeAddinInterface"
            glib:is-gtype-struct-for="ProjectTreeAddin">
      <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                       line="40"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                           line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-tree-addin.c"
                   line="46">a #IdeProjectTreeAddin</doc>
              <type name="ProjectTreeAddin" c:type="IdeProjectTreeAddin*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-tree-addin.c"
                   line="47">a #IdeTree</doc>
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/projects/ide-project-tree-addin.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-tree-addin.c"
                   line="72">a #IdeProjectTreeAddin</doc>
              <type name="ProjectTreeAddin" c:type="IdeProjectTreeAddin*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-project-tree-addin.c"
                   line="73">a #IdeTree</doc>
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="PropertyActionGroup"
           c:symbol-prefix="property_action_group"
           c:type="IdePropertyActionGroup"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdePropertyActionGroup"
           glib:get-type="ide_property_action_group_get_type"
           glib:type-struct="PropertyActionGroupClass">
      <source-position filename="src/libide/core/ide-property-action-group.h"
                       line="34"/>
      <implements name="Gio.ActionGroup"/>
      <constructor name="new" c:identifier="ide_property_action_group_new">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
        </return-value>
        <parameters>
          <parameter name="item_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="ide_property_action_group_add">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_all" c:identifier="ide_property_action_group_add_all">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_string"
              c:identifier="ide_property_action_group_add_string">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="treat_null_as_empty" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_item"
              c:identifier="ide_property_action_group_dup_item">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item_type"
              c:identifier="ide_property_action_group_get_item_type"
              glib:get-property="item-type">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_item"
              c:identifier="ide_property_action_group_set_item"
              glib:set-property="item">
        <source-position filename="src/libide/core/ide-property-action-group.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PropertyActionGroup" c:type="IdePropertyActionGroup*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="item"
                writable="1"
                transfer-ownership="none"
                setter="set_item">
        <type name="GObject.Object"/>
      </property>
      <property name="item-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_item_type">
        <type name="GType" c:type="GType"/>
      </property>
    </class>
    <record name="PropertyActionGroupClass"
            c:type="IdePropertyActionGroupClass"
            glib:is-gtype-struct-for="PropertyActionGroup">
      <source-position filename="src/libide/core/ide-property-action-group.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="PtyIntercept" c:type="IdePtyIntercept">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="62"/>
      <field name="magic" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="consumer" writable="1">
        <type name="PtyInterceptSide" c:type="IdePtyInterceptSide"/>
      </field>
      <field name="producer" writable="1">
        <type name="PtyInterceptSide" c:type="IdePtyInterceptSide"/>
      </field>
      <method name="clear" c:identifier="ide_pty_intercept_clear">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="554">Cleans up a #IdePtyIntercept previously initialized with
ide_pty_intercept_init().

This diconnects any #GIOChannel that have been attached and
releases any allocated memory.

It is invalid to use @self after calling this function.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="556">a #IdePtyIntercept</doc>
            <type name="PtyIntercept" c:type="IdePtyIntercept*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fd" c:identifier="ide_pty_intercept_get_fd">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="584">Gets a consumer PTY fd created by the #IdePtyIntercept. This is suitable
to use to create a producer fd which can be passed to a child process.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-pty-intercept.c"
               line="591">A FD of a PTY consumer if successful, otherwise -1.</doc>
          <type name="PtyFd" c:type="IdePtyFd"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="586">a #IdePtyIntercept</doc>
            <type name="PtyIntercept" c:type="IdePtyIntercept*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="init" c:identifier="ide_pty_intercept_init">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="466">Creates a enw #IdePtyIntercept using the PTY consumer fd @fd.

A new PTY producer is created that will communicate with @fd.
Additionally, a new PTY consumer is created that can communicate
with another side, and will pass that information to @fd after
extracting any necessary information.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-pty-intercept.c"
               line="479">%TRUE if successful; otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="468">a location of memory to store a #IdePtyIntercept</doc>
            <type name="PtyIntercept" c:type="IdePtyIntercept*"/>
          </instance-parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="469">the PTY consumer fd, possibly from a #VtePty</doc>
            <type name="PtyFd" c:type="IdePtyFd"/>
          </parameter>
          <parameter name="main_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="470">a #GMainContext or %NULL for thread-default</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_callback"
              c:identifier="ide_pty_intercept_set_callback">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="602">This sets the callback to execute every time data is received
from a particular side of the intercept.

You may only set one per side.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="604">a IdePtyIntercept</doc>
            <type name="PtyIntercept" c:type="IdePtyIntercept*"/>
          </instance-parameter>
          <parameter name="side" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="605">the side containing the data to watch</doc>
            <type name="PtyInterceptSide" c:type="IdePtyInterceptSide*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="606">the callback to execute when data is received</doc>
            <type name="PtyInterceptCallback"
                  c:type="IdePtyInterceptCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="607">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_size" c:identifier="ide_pty_intercept_set_size">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="407">Proxies a winsize across to the inferior. If the PTY is the
controlling PTY for the process, then SIGWINCH will be signaled
in the inferior process.

Since we can't track SIGWINCH cleanly in here, we rely on the
external consuming program to notify us of SIGWINCH so that we
can copy the new size across.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="PtyIntercept" c:type="IdePtyIntercept*"/>
          </instance-parameter>
          <parameter name="rows" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <function name="create_consumer"
                c:identifier="ide_pty_intercept_create_consumer">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="159">Creates a new PTY consumer using posix_openpt(). Some fallbacks are
provided for non-Linux systems where O_CLOEXEC and O_NONBLOCK may
not be supported.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-pty-intercept.c"
               line="166">a FD that should be closed with close() if successful.
  Upon error, %IDE_PTY_FD_INVALID (-1) is returned.</doc>
          <type name="PtyFd" c:type="IdePtyFd"/>
        </return-value>
      </function>
      <function name="create_producer"
                c:identifier="ide_pty_intercept_create_producer">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="81">This creates a new producer to the PTY consumer @consumer_fd.

This uses grantpt(), unlockpt(), and ptsname() to open a new
PTY producer.</doc>
        <source-position filename="src/libide/io/ide-pty-intercept.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-pty-intercept.c"
               line="91">a FD for the producer PTY that should be closed with close().
  Upon error, %IDE_PTY_FD_INVALID (-1) is returned.</doc>
          <type name="PtyFd" c:type="IdePtyFd"/>
        </return-value>
        <parameters>
          <parameter name="consumer_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="83">a pty</doc>
            <type name="PtyFd" c:type="IdePtyFd"/>
          </parameter>
          <parameter name="blocking" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-pty-intercept.c"
                 line="84">use %FALSE to set O_NONBLOCK</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="PtyInterceptCallback" c:type="IdePtyInterceptCallback">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="intercept" transfer-ownership="none">
          <type name="PtyIntercept" c:type="const IdePtyIntercept*"/>
        </parameter>
        <parameter name="side" transfer-ownership="none">
          <type name="PtyInterceptSide" c:type="const IdePtyInterceptSide*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PtyInterceptSide" c:type="IdePtyInterceptSide">
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="55"/>
      <field name="channel" writable="1">
        <type name="GLib.IOChannel" c:type="GIOChannel*"/>
      </field>
      <field name="in_watch" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="out_watch" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="read_prio" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="write_prio" writable="1">
        <type name="gint" c:type="gint"/>
      </field>
      <field name="out_bytes" writable="1">
        <type name="GLib.Bytes" c:type="GBytes*"/>
      </field>
      <field name="callback" writable="1">
        <type name="PtyInterceptCallback" c:type="IdePtyInterceptCallback"/>
      </field>
      <field name="callback_data" writable="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <constant name="RECENT_PROJECTS_BOOKMARK_FILENAME"
              value="recent-projects.xbel"
              c:type="IDE_RECENT_PROJECTS_BOOKMARK_FILENAME">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_BUILD_SYSTEM_GROUP_PREFIX"
              value="X-GNOME-Builder-Build-System:"
              c:type="IDE_RECENT_PROJECTS_BUILD_SYSTEM_GROUP_PREFIX">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="32"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_BUILD_SYSTEM_HINT_GROUP_PREFIX"
              value="X-GNOME-Builder-Build-System-Hint:"
              c:type="IDE_RECENT_PROJECTS_BUILD_SYSTEM_HINT_GROUP_PREFIX">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_DIRECTORY"
              value="X-GNOME-Builder-Directory:"
              c:type="IDE_RECENT_PROJECTS_DIRECTORY">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="34"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_GROUP"
              value="X-GNOME-Builder-Project"
              c:type="IDE_RECENT_PROJECTS_GROUP">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="30"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX"
              value="X-GNOME-Builder-Language:"
              c:type="IDE_RECENT_PROJECTS_LANGUAGE_GROUP_PREFIX">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="31"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="RETURN" c:identifier="IDE_RETURN" introspectable="0">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-debug.h"
           line="65">Similar to %IDE_EXIT but allows providing a return value.</doc>
      <source-position filename="src/libide/core/ide-debug.h" line="126"/>
      <parameters>
        <parameter name="_r">
        </parameter>
      </parameters>
    </function-macro>
    <class name="RadioBox"
           c:symbol-prefix="radio_box"
           c:type="IdeRadioBox"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeRadioBox"
           glib:get-type="ide_radio_box_get_type"
           glib:type-struct="RadioBoxClass">
      <source-position filename="src/libide/gtk/ide-radio-box.h" line="34"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_radio_box_new">
        <source-position filename="src/libide/gtk/ide-radio-box.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="add_item" c:identifier="ide_radio_box_add_item">
        <source-position filename="src/libide/gtk/ide-radio-box.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="IdeRadioBox*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active_id"
              c:identifier="ide_radio_box_get_active_id"
              glib:get-property="active-id">
        <source-position filename="src/libide/gtk/ide-radio-box.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="IdeRadioBox*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_item" c:identifier="ide_radio_box_remove_item">
        <source-position filename="src/libide/gtk/ide-radio-box.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="IdeRadioBox*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_active_id"
              c:identifier="ide_radio_box_set_active_id"
              glib:set-property="active-id">
        <source-position filename="src/libide/gtk/ide-radio-box.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RadioBox" c:type="IdeRadioBox*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active-id"
                writable="1"
                transfer-ownership="none"
                setter="set_active_id"
                getter="get_active_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="has-more"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-more"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RadioBoxClass"
            c:type="IdeRadioBoxClass"
            glib:is-gtype-struct-for="RadioBox">
      <source-position filename="src/libide/gtk/ide-radio-box.h" line="34"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="Range"
           c:symbol-prefix="range"
           c:type="IdeRange"
           parent="GObject.Object"
           glib:type-name="IdeRange"
           glib:get-type="ide_range_get_type"
           glib:type-struct="RangeClass">
      <source-position filename="src/libide/code/ide-range.h" line="44"/>
      <constructor name="new" c:identifier="ide_range_new">
        <source-position filename="src/libide/code/ide-range.h" line="49"/>
        <return-value transfer-ownership="full">
          <type name="Range" c:type="IdeRange*"/>
        </return-value>
        <parameters>
          <parameter name="begin" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_range_new_from_variant">
        <source-position filename="src/libide/code/ide-range.h" line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-range.c"
               line="246">a new range or %NULL</doc>
          <type name="Range" c:type="IdeRange*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-range.c"
                 line="244">a #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_begin"
              c:identifier="ide_range_get_begin"
              glib:get-property="begin">
        <source-position filename="src/libide/code/ide-range.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-range.c"
               line="175">the beginning of the range</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-range.c"
                 line="173">a #IdeRange</doc>
            <type name="Range" c:type="IdeRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_end"
              c:identifier="ide_range_get_end"
              glib:get-property="end">
        <source-position filename="src/libide/code/ide-range.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-range.c"
               line="191">the end of the range</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-range.c"
                 line="189">a #IdeRange</doc>
            <type name="Range" c:type="IdeRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_range_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-range.c"
             line="203">Creates a variant to represent the range.

This function will never return a floating variant.</doc>
        <source-position filename="src/libide/code/ide-range.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-range.c"
               line="211">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-range.c"
                 line="205">a #IdeRange</doc>
            <type name="Range" c:type="IdeRange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="begin"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_begin">
        <type name="Location"/>
      </property>
      <property name="end"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_end">
        <type name="Location"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="RangeClass"
            c:type="IdeRangeClass"
            glib:is-gtype-struct-for="Range">
      <source-position filename="src/libide/code/ide-range.h" line="44"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="RecentProjects"
           c:symbol-prefix="recent_projects"
           c:type="IdeRecentProjects"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeRecentProjects"
           glib:get-type="ide_recent_projects_get_type"
           glib:type-struct="RecentProjectsClass">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="38"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_recent_projects_new">
        <source-position filename="src/libide/projects/ide-recent-projects.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <type name="RecentProjects" c:type="IdeRecentProjects*"/>
        </return-value>
      </constructor>
      <function name="get_default"
                c:identifier="ide_recent_projects_get_default">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-recent-projects.c"
             line="59">Gets a shared #IdeRecentProjects instance.

If this instance is unref'd, a new instance will be created on the next
request to get the default #IdeRecentProjects instance.</doc>
        <source-position filename="src/libide/projects/ide-recent-projects.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-recent-projects.c"
               line="67">an #IdeRecentProjects</doc>
          <type name="RecentProjects" c:type="IdeRecentProjects*"/>
        </return-value>
      </function>
      <method name="find_by_directory"
              c:identifier="ide_recent_projects_find_by_directory">
        <source-position filename="src/libide/projects/ide-recent-projects.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invalidate" c:identifier="ide_recent_projects_invalidate">
        <source-position filename="src/libide/projects/ide-recent-projects.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_recent_projects_remove">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-recent-projects.c"
             line="329">Removes the provided projects from the recent projects file.</doc>
        <source-position filename="src/libide/projects/ide-recent-projects.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-recent-projects.c"
                 line="331">An #IdeRecentProjects</doc>
            <type name="RecentProjects" c:type="IdeRecentProjects*"/>
          </instance-parameter>
          <parameter name="project_infos" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-recent-projects.c"
                 line="332">a #GList
  of #IdeProjectInfo.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ProjectInfo"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="RecentProjectsClass"
            c:type="IdeRecentProjectsClass"
            glib:is-gtype-struct-for="RecentProjects">
      <source-position filename="src/libide/projects/ide-recent-projects.h"
                       line="38"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="RecursiveFileMonitor"
           c:symbol-prefix="recursive_file_monitor"
           c:type="IdeRecursiveFileMonitor"
           parent="GObject.Object"
           glib:type-name="IdeRecursiveFileMonitor"
           glib:get-type="ide_recursive_file_monitor_get_type"
           glib:type-struct="RecursiveFileMonitorClass">
      <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                       line="28"/>
      <constructor name="new" c:identifier="ide_recursive_file_monitor_new">
        <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="RecursiveFileMonitor" c:type="IdeRecursiveFileMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="cancel" c:identifier="ide_recursive_file_monitor_cancel">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-recursive-file-monitor.c"
             line="596">Cancels the recursive file monitor.</doc>
        <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="598">a #IdeRecursiveFileMonitor</doc>
            <type name="RecursiveFileMonitor"
                  c:type="IdeRecursiveFileMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="ide_recursive_file_monitor_get_root"
              glib:get-property="root">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-recursive-file-monitor.c"
             line="610">Gets the root directory used forthe file monitor.</doc>
        <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-recursive-file-monitor.c"
               line="616">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="612">a #IdeRecursiveFileMonitor</doc>
            <type name="RecursiveFileMonitor"
                  c:type="IdeRecursiveFileMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_ignore_func"
              c:identifier="ide_recursive_file_monitor_set_ignore_func">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-recursive-file-monitor.c"
             line="626">Sets a callback function to determine if a #GFile should be ignored
from signal emission.

@ignore_func will always be called from the applications main thread.

If @ignore_func is %NULL, it is set to the default which does not
ignore any files or directories.</doc>
        <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="628">a #IdeRecursiveFileMonitor</doc>
            <type name="RecursiveFileMonitor"
                  c:type="IdeRecursiveFileMonitor*"/>
          </instance-parameter>
          <parameter name="ignore_func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="629">a #IdeRecursiveIgnoreFunc</doc>
            <type name="RecursiveIgnoreFunc" c:type="IdeRecursiveIgnoreFunc"/>
          </parameter>
          <parameter name="ignore_func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="630">closure data for @ignore_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="ignore_func_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="631">destroy notify for @ignore_func_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async"
              c:identifier="ide_recursive_file_monitor_start_async">
        <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecursiveFileMonitor"
                  c:type="IdeRecursiveFileMonitor*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="ide_recursive_file_monitor_start_finish"
              throws="1">
        <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RecursiveFileMonitor"
                  c:type="IdeRecursiveFileMonitor*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="root"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_root">
        <type name="Gio.File"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-recursive-file-monitor.c"
             line="549">This event is similar to #GFileMonitor::changed but can be fired from
any of the monitored directories in the recursive mount.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="552">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="other_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="553">a #GFile for the other file when applicable</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-recursive-file-monitor.c"
                 line="554">the #GFileMonitorEvent event</doc>
            <type name="Gio.FileMonitorEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RecursiveFileMonitorClass"
            c:type="IdeRecursiveFileMonitorClass"
            glib:is-gtype-struct-for="RecursiveFileMonitor">
      <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                       line="28"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="RecursiveIgnoreFunc" c:type="IdeRecursiveIgnoreFunc">
      <source-position filename="src/libide/io/ide-recursive-file-monitor.h"
                       line="30"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="RenameProvider"
               c:symbol-prefix="rename_provider"
               c:type="IdeRenameProvider"
               glib:type-name="IdeRenameProvider"
               glib:get-type="ide_rename_provider_get_type"
               glib:type-struct="RenameProviderInterface">
      <source-position filename="src/libide/code/ide-rename-provider.h"
                       line="54"/>
      <prerequisite name="Object"/>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rename_async" invoker="rename_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-rename-provider.c"
             line="74">This requests the provider to determine the edits that must be made to the
project to perform the renaming of a symbol found at @location.

Use ide_rename_provider_rename_finish() to get the results.</doc>
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="76">An #IdeRenameProvider</doc>
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="77">An #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="78">The replacement name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="79">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="80">a callback to complete the request</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="81">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="rename_finish" invoker="rename_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-rename-provider.c"
             line="108">Completes a request to ide_rename_provider_rename_async().

You can use the resulting #GPtrArray of #IdeTextEdit instances to edit the
project to complete the symbol rename.</doc>
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-rename-provider.c"
               line="121">%TRUE if successful and @edits is set. Otherwise %FALSE and @error
  is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="110">An #IdeRenameProvider</doc>
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="111">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="edits"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="112">A location
  for a #GPtrArray of #IdeTextEdit instances.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="TextEdit"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_rename_provider_load">
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="rename_async"
              c:identifier="ide_rename_provider_rename_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-rename-provider.c"
             line="74">This requests the provider to determine the edits that must be made to the
project to perform the renaming of a symbol found at @location.

Use ide_rename_provider_rename_finish() to get the results.</doc>
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="76">An #IdeRenameProvider</doc>
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="77">An #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="78">The replacement name for the symbol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="79">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="80">a callback to complete the request</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="81">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_finish"
              c:identifier="ide_rename_provider_rename_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-rename-provider.c"
             line="108">Completes a request to ide_rename_provider_rename_async().

You can use the resulting #GPtrArray of #IdeTextEdit instances to edit the
project to complete the symbol rename.</doc>
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-rename-provider.c"
               line="121">%TRUE if successful and @edits is set. Otherwise %FALSE and @error
  is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="110">An #IdeRenameProvider</doc>
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="111">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="edits"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="112">A location
  for a #GPtrArray of #IdeTextEdit instances.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="TextEdit"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_rename_provider_unload">
        <source-position filename="src/libide/code/ide-rename-provider.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RenameProvider" c:type="IdeRenameProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="RenameProviderInterface"
            c:type="IdeRenameProviderInterface"
            glib:is-gtype-struct-for="RenameProvider">
      <source-position filename="src/libide/code/ide-rename-provider.h"
                       line="54"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-rename-provider.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RenameProvider" c:type="IdeRenameProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/code/ide-rename-provider.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RenameProvider" c:type="IdeRenameProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rename_async">
        <callback name="rename_async">
          <source-position filename="src/libide/code/ide-rename-provider.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="76">An #IdeRenameProvider</doc>
              <type name="RenameProvider" c:type="IdeRenameProvider*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="77">An #IdeLocation</doc>
              <type name="Location" c:type="IdeLocation*"/>
            </parameter>
            <parameter name="new_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="78">The replacement name for the symbol</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="79">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="80">a callback to complete the request</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="81">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="rename_finish">
        <callback name="rename_finish" throws="1">
          <source-position filename="src/libide/code/ide-rename-provider.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-rename-provider.c"
                 line="121">%TRUE if successful and @edits is set. Otherwise %FALSE and @error
  is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="110">An #IdeRenameProvider</doc>
              <type name="RenameProvider" c:type="IdeRenameProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="111">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="edits"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-rename-provider.c"
                   line="112">A location
  for a #GPtrArray of #IdeTextEdit instances.</doc>
              <array name="GLib.PtrArray" c:type="GPtrArray**">
                <type name="TextEdit"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RunButton"
           c:symbol-prefix="run_button"
           c:type="IdeRunButton"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeRunButton"
           glib:get-type="ide_run_button_get_type"
           glib:type-struct="RunButtonClass">
      <source-position filename="src/libide/gui/ide-run-button.h" line="36"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_run_button_new">
        <source-position filename="src/libide/gui/ide-run-button.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
    </class>
    <record name="RunButtonClass"
            c:type="IdeRunButtonClass"
            glib:is-gtype-struct-for="RunButton">
      <source-position filename="src/libide/gui/ide-run-button.h" line="36"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="RunCommand"
           c:symbol-prefix="run_command"
           c:type="IdeRunCommand"
           parent="GObject.Object"
           glib:type-name="IdeRunCommand"
           glib:get-type="ide_run_command_get_type"
           glib:type-struct="RunCommandClass">
      <source-position filename="src/libide/foundry/ide-run-command.h"
                       line="55"/>
      <constructor name="new" c:identifier="ide_run_command_new">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="58"/>
        <return-value transfer-ownership="full">
          <type name="RunCommand" c:type="IdeRunCommand*"/>
        </return-value>
      </constructor>
      <virtual-method name="prepare_to_run" invoker="prepare_to_run">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="657">Prepares the run command to be run within @run_context.

This requires that the run command add anything necessary to the
@run_context so that the command can be run.

Subclasses may override this to implement custom functionality such as
locality-based execution (see shellcmd plugin).</doc>
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="659">a #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="660">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="661">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_args" c:identifier="ide_run_command_append_args">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="775">A convenience wrapper to append @args to #IdeRunCommand:argv.</doc>
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="777">a #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="778">the arguments to append</doc>
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_argv" c:identifier="ide_run_command_append_argv">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="746">A convenience wrapper to append @arg to #IdeRunCommand:argv.</doc>
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="748">a #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="arg" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="749">the argument to append</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_formatted"
              c:identifier="ide_run_command_append_formatted"
              introspectable="0">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="append_parsed"
              c:identifier="ide_run_command_append_parsed"
              throws="1">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_argv"
              c:identifier="ide_run_command_get_argv"
              glib:get-property="argv">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_default"
              c:identifier="ide_run_command_get_can_default"
              glib:get-property="can-default">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cwd"
              c:identifier="ide_run_command_get_cwd"
              glib:get-property="cwd">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_run_command_get_display_name"
              glib:get-property="display-name">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ"
              c:identifier="ide_run_command_get_environ"
              glib:get-property="environ">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_run_command_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="ide_run_command_get_kind"
              glib:get-property="kind">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="RunCommandKind" c:type="IdeRunCommandKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages"
              c:identifier="ide_run_command_get_languages"
              glib:get-property="languages">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_run_command_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_run_command_getenv">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_to_run"
              c:identifier="ide_run_command_prepare_to_run">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="657">Prepares the run command to be run within @run_context.

This requires that the run command add anything necessary to the
@run_context so that the command can be run.

Subclasses may override this to implement custom functionality such as
locality-based execution (see shellcmd plugin).</doc>
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="659">a #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="660">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="661">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_argv"
              c:identifier="ide_run_command_set_argv"
              glib:set-property="argv">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_default"
              c:identifier="ide_run_command_set_can_default"
              glib:set-property="can-default">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="can_default" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cwd"
              c:identifier="ide_run_command_set_cwd"
              glib:set-property="cwd">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="cwd" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_run_command_set_display_name"
              glib:set-property="display-name">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_environ"
              c:identifier="ide_run_command_set_environ"
              glib:set-property="environ">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="environ" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_run_command_set_id"
              glib:set-property="id">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind"
              c:identifier="ide_run_command_set_kind"
              glib:set-property="kind">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="601">Sets the kind of command.

This is useful for #IdeRunCommandProvider that want to specify
the type of command that is being provided. Doing so allows tooling
in Builder to treat that information specially, such as showing tags
next to the row in UI or including it in "Unit Test" browsers.</doc>
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command.c"
                 line="603">a #IdeRunCommand</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="RunCommandKind" c:type="IdeRunCommandKind"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_languages"
              c:identifier="ide_run_command_set_languages"
              glib:set-property="languages">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="languages" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_run_command_set_priority"
              glib:set-property="priority">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_run_command_setenv">
        <source-position filename="src/libide/foundry/ide-run-command.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="argv"
                writable="1"
                transfer-ownership="none"
                setter="set_argv"
                getter="get_argv">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="can-default"
                writable="1"
                transfer-ownership="none"
                setter="set_can_default"
                getter="get_can_default"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="344">If the command is suitable as the default run command for the project.

Set this to %TRUE if the command is/should be used as the default command
to run the project. This is useful when you are writing plumbing for build
systems or similar so that an item may be a candidate for the default
command when the user selects "Run".</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="category" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="cwd"
                writable="1"
                transfer-ownership="none"
                setter="set_cwd"
                getter="get_cwd"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="environ"
                writable="1"
                transfer-ownership="none"
                setter="set_environ"
                getter="get_environ">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="has-category"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                transfer-ownership="none"
                setter="set_kind"
                getter="get_kind"
                default-value="IDE_RUN_COMMAND_KIND_UNKNOWN">
        <type name="RunCommandKind"/>
      </property>
      <property name="languages"
                writable="1"
                transfer-ownership="none"
                setter="set_languages"
                getter="get_languages">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command.c"
             line="395">Contains the programming languages used.

This is to be set by run command providers when they know what languages
are used to create the program spawned by the run command. This can be
used by debuggers to ensure that a suitable debugger is chosen for a given
language used.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                setter="set_priority"
                getter="get_priority"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="shell-command"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="RunCommandClass"
            c:type="IdeRunCommandClass"
            glib:is-gtype-struct-for="RunCommand">
      <source-position filename="src/libide/foundry/ide-run-command.h"
                       line="55"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="prepare_to_run">
        <callback name="prepare_to_run">
          <source-position filename="src/libide/foundry/ide-run-command.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-run-command.c"
                   line="659">a #IdeRunCommand</doc>
              <type name="RunCommand" c:type="IdeRunCommand*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-run-command.c"
                   line="660">an #IdeRunContext</doc>
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-run-command.c"
                   line="661">an #IdeContext</doc>
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="RunCommandKind"
                 glib:type-name="IdeRunCommandKind"
                 glib:get-type="ide_run_command_kind_get_type"
                 c:type="IdeRunCommandKind">
      <member name="unknown"
              value="0"
              c:identifier="IDE_RUN_COMMAND_KIND_UNKNOWN"
              glib:nick="unknown"
              glib:name="IDE_RUN_COMMAND_KIND_UNKNOWN">
      </member>
      <member name="application"
              value="1"
              c:identifier="IDE_RUN_COMMAND_KIND_APPLICATION"
              glib:nick="application"
              glib:name="IDE_RUN_COMMAND_KIND_APPLICATION">
      </member>
      <member name="utility"
              value="2"
              c:identifier="IDE_RUN_COMMAND_KIND_UTILITY"
              glib:nick="utility"
              glib:name="IDE_RUN_COMMAND_KIND_UTILITY">
      </member>
      <member name="test"
              value="3"
              c:identifier="IDE_RUN_COMMAND_KIND_TEST"
              glib:nick="test"
              glib:name="IDE_RUN_COMMAND_KIND_TEST">
      </member>
      <member name="benchmark"
              value="4"
              c:identifier="IDE_RUN_COMMAND_KIND_BENCHMARK"
              glib:nick="benchmark"
              glib:name="IDE_RUN_COMMAND_KIND_BENCHMARK">
      </member>
      <member name="user_defined"
              value="5"
              c:identifier="IDE_RUN_COMMAND_KIND_USER_DEFINED"
              glib:nick="user-defined"
              glib:name="IDE_RUN_COMMAND_KIND_USER_DEFINED">
      </member>
    </enumeration>
    <interface name="RunCommandProvider"
               c:symbol-prefix="run_command_provider"
               c:type="IdeRunCommandProvider"
               glib:type-name="IdeRunCommandProvider"
               glib:get-type="ide_run_command_provider_get_type"
               glib:type-struct="RunCommandProviderInterface">
      <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                       line="50"/>
      <prerequisite name="Object"/>
      <virtual-method name="invalidated">
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_commands_async" invoker="list_commands_async">
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_commands_finish"
                      invoker="list_commands_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command-provider.c"
             line="63">Completes request to list run commands.</doc>
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-command-provider.c"
               line="71">a #GListModel of #IdeRunCommand</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="65">a #IdeRunCommandProvider</doc>
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="66">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="invalidate"
              c:identifier="ide_run_command_provider_invalidate">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command-provider.c"
             line="83">Emits the #IdeRunCommandProvider::invalidated signal.

This often results in #IdeRunCommands requesting a new set of results for
the run command provider via ide_run_command_provider_list_commands_async().</doc>
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="85">a #IdeRunCommandProvider</doc>
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidates_at_phase"
              c:identifier="ide_run_command_provider_invalidates_at_phase">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command-provider.c"
             line="128">Invalidates the provider when @phase is reached.

This is a helper for run command provider implementations to use which
will automatically invalidate @self when pipeline @phase is reached.

Calling this function will unset any previous call to the function. Setting
@phase to 0 will not subscribe to any new phase.</doc>
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="130">an #IdeRunCommandProvider</doc>
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
          <parameter name="phase" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="131">an #IdePipelinePhase</doc>
            <type name="PipelinePhase" c:type="IdePipelinePhase"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_commands_async"
              c:identifier="ide_run_command_provider_list_commands_async">
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_commands_finish"
              c:identifier="ide_run_command_provider_list_commands_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-command-provider.c"
             line="63">Completes request to list run commands.</doc>
        <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-command-provider.c"
               line="71">a #GListModel of #IdeRunCommand</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="65">a #IdeRunCommandProvider</doc>
            <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="66">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="invalidated" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <record name="RunCommandProviderInterface"
            c:type="IdeRunCommandProviderInterface"
            glib:is-gtype-struct-for="RunCommandProvider">
      <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                       line="50"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="invalidated">
        <callback name="invalidated">
          <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_commands_async">
        <callback name="list_commands_async">
          <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_commands_finish">
        <callback name="list_commands_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-run-command-provider.h"
                           line="47"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-command-provider.c"
                 line="71">a #GListModel of #IdeRunCommand</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-run-command-provider.c"
                   line="65">a #IdeRunCommandProvider</doc>
              <type name="RunCommandProvider" c:type="IdeRunCommandProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-run-command-provider.c"
                   line="66">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="RunCommands"
           c:symbol-prefix="run_commands"
           c:type="IdeRunCommands"
           parent="Object"
           final="1"
           glib:type-name="IdeRunCommands"
           glib:get-type="ide_run_commands_get_type"
           glib:type-struct="RunCommandsClass">
      <source-position filename="src/libide/foundry/ide-run-commands.h"
                       line="36"/>
      <implements name="Gio.ListModel"/>
      <function name="from_context"
                c:identifier="ide_run_commands_from_context">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-foundry-compat.c"
             line="221">Gets the default #IdeRunCommands instance for @context.</doc>
        <source-position filename="src/libide/foundry/ide-run-commands.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="227">an #IdeRunCommands</doc>
          <type name="RunCommands" c:type="IdeRunCommands*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="223">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="dup_by_id" c:identifier="ide_run_commands_dup_by_id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-commands.c"
             line="343">Finds an #IdeRunCommand by it's id.

%NULL is allowed for @id out of convenience, but will return %NULL.</doc>
        <source-position filename="src/libide/foundry/ide-run-commands.h"
                         line="44"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-commands.c"
               line="352">an #IdeRunCommand or %NULL</doc>
          <type name="RunCommand" c:type="IdeRunCommand*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-commands.c"
                 line="345">a #IdeRunCommands</doc>
            <type name="RunCommands" c:type="IdeRunCommands*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-commands.c"
                 line="346">the id of the run command</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_by_kind" c:identifier="ide_run_commands_list_by_kind">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-commands.c"
             line="390">Creates a new #GListModel of #IdeRunCommand filtered by @kind

The model will update as new commands are added or removed from @self.</doc>
        <source-position filename="src/libide/foundry/ide-run-commands.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-commands.c"
               line="399">a #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-commands.c"
                 line="392">an #IdeRunCommands</doc>
            <type name="RunCommands" c:type="IdeRunCommands*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-commands.c"
                 line="393">an #IdeRunCommandKind</doc>
            <type name="RunCommandKind" c:type="IdeRunCommandKind"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="RunCommandsClass"
            c:type="IdeRunCommandsClass"
            glib:is-gtype-struct-for="RunCommands">
      <source-position filename="src/libide/foundry/ide-run-commands.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="RunContext"
           c:symbol-prefix="run_context"
           c:type="IdeRunContext"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeRunContext"
           glib:get-type="ide_run_context_get_type"
           glib:type-struct="RunContextClass">
      <source-position filename="src/libide/foundry/ide-run-context.h"
                       line="36"/>
      <constructor name="new" c:identifier="ide_run_context_new">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <type name="RunContext" c:type="IdeRunContext*"/>
        </return-value>
      </constructor>
      <method name="add_environ" c:identifier="ide_run_context_add_environ">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="environ" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_minimal_environment"
              c:identifier="ide_run_context_add_minimal_environment">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="78">Adds a minimal set of environment variables.

This is useful to get access to things like the display or other
expected variables.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="80">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="append_args" c:identifier="ide_run_context_append_args">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_args_parsed"
              c:identifier="ide_run_context_append_args_parsed"
              throws="1">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_argv" c:identifier="ide_run_context_append_argv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_formatted"
              c:identifier="ide_run_context_append_formatted"
              introspectable="0">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="create_stdio_stream"
              c:identifier="ide_run_context_create_stdio_stream"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="1397">Creates a stream to communicate with the subprocess using stdin/stdout.

The stream is created using UNIX pipes which are attached to the
stdin/stdout of the child process.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-context.c"
               line="1407">a #GIOStream if successful; otherwise
  %NULL and @error is set.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1399">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="end" c:identifier="ide_run_context_end" throws="1">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="162"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-context.c"
               line="1169">an #IdeSubprocessLauncher if successful; otherwise
  %NULL and @error is set.</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1167">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="environ_to_argv"
              c:identifier="ide_run_context_environ_to_argv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_argv" c:identifier="ide_run_context_get_argv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cwd" c:identifier="ide_run_context_get_cwd">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ" c:identifier="ide_run_context_get_environ">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_run_context_getenv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="merge_unix_fd_map"
              c:identifier="ide_run_context_merge_unix_fd_map"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="1293">Merges the #IdeUnixFDMap into the current layer.

If there are collisions in destination FDs, then that may cause an
error and %FALSE is returned.

@unix_fd_map will have the FDs stolen using ide_unix_fd_map_steal_from()
which means that if successful, @unix_fd_map will not have any open
file-descriptors after calling this function.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-context.c"
               line="1308">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1295">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="unix_fd_map" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1296">a #IdeUnixFDMap</doc>
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_args" c:identifier="ide_run_context_prepend_args">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_argv" c:identifier="ide_run_context_prepend_argv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="ide_run_context_push">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="RunContextHandler" c:type="IdeRunContextHandler"/>
          </parameter>
          <parameter name="handler_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="handler_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_at_base" c:identifier="ide_run_context_push_at_base">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <type name="RunContextHandler" c:type="IdeRunContextHandler"/>
          </parameter>
          <parameter name="handler_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="handler_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_error" c:identifier="ide_run_context_push_error">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="506">Pushes a new layer that will always fail with @error.

This is useful if you have an error when attempting to build
a run command, but need it to deliver the error when attempting
to create a subprocess launcher.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="508">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="509">a #GError</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_expansion"
              c:identifier="ide_run_context_push_expansion">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="665">Pushes a layer to expand known environment variables.

The command argv and cwd will have `$FOO` style environment
variables expanded that are known. This can be useful to allow
things like `$BUILDDIR` be expanded at this layer.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="667">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="environ" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_host" c:identifier="ide_run_context_push_host">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="324">Pushes handler to transform command to run on host.

If necessary, a layer is pushed to ensure the command is run on the
host instead of the application container.

If Builder is running on the host already, this function does nothing.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="326">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push_shell" c:identifier="ide_run_context_push_shell">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="427">Pushes a shell which can run the upper layer command with -c.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="429">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="shell" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="430">the kind of shell to be used</doc>
            <type name="RunContextShell" c:type="IdeRunContextShell"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_user_shell"
              c:identifier="ide_run_context_push_user_shell">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="shell" transfer-ownership="none">
            <type name="RunContextShell" c:type="IdeRunContextShell"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_argv" c:identifier="ide_run_context_set_argv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cwd" c:identifier="ide_run_context_set_cwd">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="cwd" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_environ" c:identifier="ide_run_context_set_environ">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="environ" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pty" c:identifier="ide_run_context_set_pty">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="1376">Sets the PTY for a run context.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1378">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="pty" transfer-ownership="none">
            <type name="Vte.Pty" c:type="VtePty*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pty_fd" c:identifier="ide_run_context_set_pty_fd">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="1325">Sets up a PTY for the run context that will communicate with the
consumer. The consumer is the generally the widget that is rendering
the PTY contents and the producer is the FD that is connected to the
subprocess.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1327">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="consumer_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1328">the FD of the PTY consumer</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_run_context_setenv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn" c:identifier="ide_run_context_spawn" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.c"
             line="1257">Spwans the run command.

If there is a failure to build the command into a subprocess launcher,
then %NULL is returned and @error is set.

If the subprocess fails to launch, then %NULL is returned and @error is set.</doc>
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="165"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-context.c"
               line="1268">an #IdeSubprocess if successful; otherwise %NULL
  and @error is set.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-context.c"
                 line="1259">a #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="take_fd" c:identifier="ide_run_context_take_fd">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="source_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsetenv" c:identifier="ide_run_context_unsetenv">
        <source-position filename="src/libide/foundry/ide-run-context.h"
                         line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="RunContextClass"
            c:type="IdeRunContextClass"
            glib:is-gtype-struct-for="RunContext">
      <source-position filename="src/libide/foundry/ide-run-context.h"
                       line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="RunContextHandler"
              c:type="IdeRunContextHandler"
              throws="1">
      <source-position filename="src/libide/foundry/ide-run-context.h"
                       line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.h"
             line="56">%TRUE if successful; otherwise %FALSE and @error must be set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="run_context" transfer-ownership="none">
          <type name="RunContext" c:type="IdeRunContext*"/>
        </parameter>
        <parameter name="argv" transfer-ownership="none">
          <type name="utf8" c:type="const char* const*"/>
        </parameter>
        <parameter name="env" transfer-ownership="none">
          <type name="utf8" c:type="const char* const*"/>
        </parameter>
        <parameter name="cwd" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="unix_fd_map" transfer-ownership="none">
          <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="RunContextShell"
                 glib:type-name="IdeRunContextShell"
                 glib:get-type="ide_run_context_shell_get_type"
                 c:type="IdeRunContextShell">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-run-context.h"
           line="38">Describes the type of shell to be used within the context.</doc>
      <member name="default"
              value="0"
              c:identifier="IDE_RUN_CONTEXT_SHELL_DEFAULT"
              glib:nick="default"
              glib:name="IDE_RUN_CONTEXT_SHELL_DEFAULT">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.h"
             line="40">A basic shell with no user scripts</doc>
      </member>
      <member name="login"
              value="1"
              c:identifier="IDE_RUN_CONTEXT_SHELL_LOGIN"
              glib:nick="login"
              glib:name="IDE_RUN_CONTEXT_SHELL_LOGIN">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.h"
             line="41">A user login shell similar to `bash -l`</doc>
      </member>
      <member name="interactive"
              value="2"
              c:identifier="IDE_RUN_CONTEXT_SHELL_INTERACTIVE"
              glib:nick="interactive"
              glib:name="IDE_RUN_CONTEXT_SHELL_INTERACTIVE">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-context.h"
             line="42">A user interactive shell similar to `bash -i`</doc>
      </member>
    </enumeration>
    <class name="RunManager"
           c:symbol-prefix="run_manager"
           c:type="IdeRunManager"
           parent="Object"
           final="1"
           glib:type-name="IdeRunManager"
           glib:get-type="ide_run_manager_get_type"
           glib:type-struct="RunManagerClass">
      <source-position filename="src/libide/foundry/ide-run-manager.h"
                       line="38"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.Initable"/>
      <function name="from_context"
                c:identifier="ide_run_manager_from_context">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="183">an #IdeRunManager</doc>
          <type name="RunManager" c:type="IdeRunManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="181">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="cancel" c:identifier="ide_run_manager_cancel">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="discover_run_command_async"
              c:identifier="ide_run_manager_discover_run_command_async">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="discover_run_command_finish"
              c:identifier="ide_run_manager_discover_run_command_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-manager.c"
             line="1660">Complete request to discover the default run command.</doc>
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-manager.c"
               line="1666">an #IdeRunCommand if successful; otherwise
  %NULL and @error is set.</doc>
          <type name="RunCommand" c:type="IdeRunCommand*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-manager.c"
                 line="1662">a #IdeRunManager</doc>
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_busy"
              c:identifier="ide_run_manager_get_busy"
              glib:get-property="busy">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_run_manager_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_commands_async"
              c:identifier="ide_run_manager_list_commands_async">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_commands_finish"
              c:identifier="ide_run_manager_list_commands_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-run-manager.c"
               line="1541">a #GListModel of #IdeRunCommand</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_async" c:identifier="ide_run_manager_run_async">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_run_manager_run_finish"
              throws="1">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_run_tool_from_plugin_info"
              c:identifier="ide_run_manager_set_run_tool_from_plugin_info">
        <source-position filename="src/libide/foundry/ide-run-manager.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunManager" c:type="IdeRunManager*"/>
          </instance-parameter>
          <parameter name="plugin_info" transfer-ownership="none">
            <type name="Peas.PluginInfo" c:type="PeasPluginInfo*"/>
          </parameter>
        </parameters>
      </method>
      <property name="busy"
                transfer-ownership="none"
                getter="get_busy"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="run-tool" transfer-ownership="none">
        <type name="RunTool"/>
      </property>
      <glib:signal name="run" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-manager.c"
             line="461">This signal is emitted to allow plugins to add additional settings to a
run context before a launcher is created.

Generally this can only be used in certain situations and you probably
want to modify the run context in another way such as a deploy strategry,
runtime, or similar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-run-manager.c"
                 line="464">An #IdeRunContext</doc>
            <type name="RunContext"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="started" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-manager.c"
             line="488">This signal is emitted when the run manager has spawned a new subprocess.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="stopped" when="last">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-run-manager.c"
             line="505">This signal is emitted when the run manager has detected the running
subprocess has exited.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RunManagerClass"
            c:type="IdeRunManagerClass"
            glib:is-gtype-struct-for="RunManager">
      <source-position filename="src/libide/foundry/ide-run-manager.h"
                       line="38"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="RunTool"
           c:symbol-prefix="run_tool"
           c:type="IdeRunTool"
           parent="Object"
           abstract="1"
           glib:type-name="IdeRunTool"
           glib:get-type="ide_run_tool_get_type"
           glib:type-struct="RunToolClass">
      <source-position filename="src/libide/foundry/ide-run-tool.h" line="53"/>
      <virtual-method name="force_exit" invoker="force_exit">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_to_run" invoker="prepare_to_run">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_signal" invoker="send_signal">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
          <parameter name="signum" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="started">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
          <parameter name="subprocess" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stopped">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="force_exit" c:identifier="ide_run_tool_force_exit">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name" c:identifier="ide_run_tool_get_icon_name">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_to_run" c:identifier="ide_run_tool_prepare_to_run">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_signal" c:identifier="ide_run_tool_send_signal">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
          <parameter name="signum" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name" c:identifier="ide_run_tool_set_icon_name">
        <source-position filename="src/libide/foundry/ide-run-tool.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RunTool" c:type="IdeRunTool*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="started" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Subprocess"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="stopped" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="RunToolClass"
            c:type="IdeRunToolClass"
            glib:is-gtype-struct-for="RunTool">
      <source-position filename="src/libide/foundry/ide-run-tool.h" line="53"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="started">
        <callback name="started">
          <source-position filename="src/libide/foundry/ide-run-tool.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunTool" c:type="IdeRunTool*"/>
            </parameter>
            <parameter name="subprocess" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stopped">
        <callback name="stopped">
          <source-position filename="src/libide/foundry/ide-run-tool.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunTool" c:type="IdeRunTool*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_to_run">
        <callback name="prepare_to_run">
          <source-position filename="src/libide/foundry/ide-run-tool.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunTool" c:type="IdeRunTool*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_command" transfer-ownership="none">
              <type name="RunCommand" c:type="IdeRunCommand*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="force_exit">
        <callback name="force_exit">
          <source-position filename="src/libide/foundry/ide-run-tool.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunTool" c:type="IdeRunTool*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_signal">
        <callback name="send_signal">
          <source-position filename="src/libide/foundry/ide-run-tool.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RunTool" c:type="IdeRunTool*"/>
            </parameter>
            <parameter name="signum" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Runtime"
           c:symbol-prefix="runtime"
           c:type="IdeRuntime"
           parent="Object"
           glib:type-name="IdeRuntime"
           glib:get-type="ide_runtime_get_type"
           glib:type-struct="RuntimeClass">
      <source-position filename="src/libide/foundry/ide-runtime.h" line="72"/>
      <constructor name="new" c:identifier="ide_runtime_new">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="92"/>
        <return-value transfer-ownership="full">
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="contains_program_in_path"
                      invoker="contains_program_in_path">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="program" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_system_include_dirs"
                      invoker="get_system_include_dirs">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="527">Gets the system include dirs for the runtime. Usually, this is just
"/usr/include", but more complex runtimes may include additional.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="534">A newly allocated
  string containing the include dirs.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="529">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_triplet" invoker="get_triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="550">Gets the architecture triplet of the runtime.

This can be used to ensure we're compiling for the right architecture
given the current device.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="559">the architecture triplet the runtime
will build for.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="552">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_configuration"
                      invoker="prepare_configuration">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_to_build" invoker="prepare_to_build">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="685">Prepares a run context for running a build command.

The virtual function implementation should add to the run context anything
necessary to be able to run within the runtime.

That might include pushing a new layer so that the command will run within
a subcommand such as "flatpak", "jhbuild", or "podman".

This is meant to be able to run a build command, so it may not require
access to some features like network or graphical displays.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="687">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="pipeline"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="688">an #IdePipeline or %NULL for the current</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="689">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_to_run" invoker="prepare_to_run">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="635">Prepares a run context to run an application.

The virtual function implementation should add to the run context anything
necessary to be able to run within the runtime.

That might include pushing a new layer so that the command will run within
a subcommand such as "flatpak", "jhbuild", or "podman".

This is meant to be able to run applications, so additional work is expected
of runtimes to ensure access to things like graphical displays.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="637">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="pipeline"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="638">an #IdePipeline or %NULL for the current</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="639">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="supports_toolchain" invoker="supports_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="607">Informs wether a toolchain is supported by this.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="614">%TRUE if the toolchain is supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="609">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="610">the #IdeToolchain to check</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="translate_file" invoker="translate_file">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="499">Translates the file from a path within the runtime to a path that can
be accessed from the host system.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="507">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="501">An #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="502">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="contains_program_in_path"
              c:identifier="ide_runtime_contains_program_in_path">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="program" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arch" c:identifier="ide_runtime_get_arch">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="578">Gets the architecture of the runtime.

This can be used to ensure we're compiling for the right architecture
given the current device.

This is strictly equivalent to calling #ide_triplet_get_arch on the result
of #ide_runtime_get_triplet.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="590">the name of the architecture
the runtime will build for.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="580">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category"
              c:identifier="ide_runtime_get_category"
              glib:get-property="category">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="ide_runtime_get_display_name"
              glib:get-property="display-name">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_runtime_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_runtime_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_runtime_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_short_id"
              c:identifier="ide_runtime_get_short_id"
              glib:get-property="short-id">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_system_include_dirs"
              c:identifier="ide_runtime_get_system_include_dirs">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="527">Gets the system include dirs for the runtime. Usually, this is just
"/usr/include", but more complex runtimes may include additional.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="123"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="534">A newly allocated
  string containing the include dirs.</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="529">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_triplet" c:identifier="ide_runtime_get_triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="550">Gets the architecture triplet of the runtime.

This can be used to ensure we're compiling for the right architecture
given the current device.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="559">the architecture triplet the runtime
will build for.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="552">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_configuration"
              c:identifier="ide_runtime_prepare_configuration">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="configuration" transfer-ownership="none">
            <type name="Config" c:type="IdeConfig*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_to_build"
              c:identifier="ide_runtime_prepare_to_build">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="685">Prepares a run context for running a build command.

The virtual function implementation should add to the run context anything
necessary to be able to run within the runtime.

That might include pushing a new layer so that the command will run within
a subcommand such as "flatpak", "jhbuild", or "podman".

This is meant to be able to run a build command, so it may not require
access to some features like network or graphical displays.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="687">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="pipeline"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="688">an #IdePipeline or %NULL for the current</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="689">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_to_run" c:identifier="ide_runtime_prepare_to_run">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="635">Prepares a run context to run an application.

The virtual function implementation should add to the run context anything
necessary to be able to run within the runtime.

That might include pushing a new layer so that the command will run within
a subcommand such as "flatpak", "jhbuild", or "podman".

This is meant to be able to run applications, so additional work is expected
of runtimes to ensure access to things like graphical displays.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="637">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="pipeline"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="638">an #IdePipeline or %NULL for the current</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
          <parameter name="run_context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="639">an #IdeRunContext</doc>
            <type name="RunContext" c:type="IdeRunContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_category"
              c:identifier="ide_runtime_set_category"
              glib:set-property="category">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_runtime_set_display_name"
              glib:set-property="display-name">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_runtime_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_runtime_set_id"
              glib:set-property="id">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_runtime_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_short_id"
              c:identifier="ide_runtime_set_short_id"
              glib:set-property="short-id">
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="short_id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_toolchain"
              c:identifier="ide_runtime_supports_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="607">Informs wether a toolchain is supported by this.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="614">%TRUE if the toolchain is supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="609">a #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="610">the #IdeToolchain to check</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="translate_file" c:identifier="ide_runtime_translate_file">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime.c"
             line="499">Translates the file from a path within the runtime to a path that can
be accessed from the host system.</doc>
        <source-position filename="src/libide/foundry/ide-runtime.h"
                         line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime.c"
               line="507">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="501">An #IdeRuntime</doc>
            <type name="Runtime" c:type="IdeRuntime*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="502">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <property name="category"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_category"
                getter="get_category"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-name"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="short-id"
                writable="1"
                transfer-ownership="none"
                setter="set_short_id"
                getter="get_short_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="RuntimeClass"
            c:type="IdeRuntimeClass"
            glib:is-gtype-struct-for="Runtime">
      <source-position filename="src/libide/foundry/ide-runtime.h" line="72"/>
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="contains_program_in_path">
        <callback name="contains_program_in_path">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="program" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_configuration">
        <callback name="prepare_configuration">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="IdeConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_to_run">
        <callback name="prepare_to_run">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="637">a #IdeRuntime</doc>
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="pipeline"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="638">an #IdePipeline or %NULL for the current</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="639">an #IdeRunContext</doc>
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_to_build">
        <callback name="prepare_to_build">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="687">a #IdeRuntime</doc>
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="pipeline"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="688">an #IdePipeline or %NULL for the current</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
            <parameter name="run_context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="689">an #IdeRunContext</doc>
              <type name="RunContext" c:type="IdeRunContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="translate_file">
        <callback name="translate_file">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="63"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="507">a #GFile.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="501">An #IdeRuntime</doc>
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="502">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_system_include_dirs">
        <callback name="get_system_include_dirs">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="65"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="534">A newly allocated
  string containing the include dirs.</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="529">a #IdeRuntime</doc>
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_triplet">
        <callback name="get_triplet">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="66"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="559">the architecture triplet the runtime
will build for.</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="552">a #IdeRuntime</doc>
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="supports_toolchain">
        <callback name="supports_toolchain">
          <source-position filename="src/libide/foundry/ide-runtime.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime.c"
                 line="614">%TRUE if the toolchain is supported</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="609">a #IdeRuntime</doc>
              <type name="Runtime" c:type="IdeRuntime*"/>
            </parameter>
            <parameter name="toolchain" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime.c"
                   line="610">the #IdeToolchain to check</doc>
              <type name="Toolchain" c:type="IdeToolchain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="12">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="RuntimeError"
                 glib:type-name="IdeRuntimeError"
                 glib:get-type="ide_runtime_error_get_type"
                 c:type="IdeRuntimeError"
                 glib:error-domain="ide_runtime_error_quark">
      <member name="unknown"
              value="0"
              c:identifier="IDE_RUNTIME_ERROR_UNKNOWN"
              glib:nick="unknown"
              glib:name="IDE_RUNTIME_ERROR_UNKNOWN">
      </member>
      <member name="no_such_runtime"
              value="1"
              c:identifier="IDE_RUNTIME_ERROR_NO_SUCH_RUNTIME"
              glib:nick="no-such-runtime"
              glib:name="IDE_RUNTIME_ERROR_NO_SUCH_RUNTIME">
      </member>
      <member name="build_failed"
              value="2"
              c:identifier="IDE_RUNTIME_ERROR_BUILD_FAILED"
              glib:nick="build-failed"
              glib:name="IDE_RUNTIME_ERROR_BUILD_FAILED">
      </member>
      <member name="target_not_found"
              value="3"
              c:identifier="IDE_RUNTIME_ERROR_TARGET_NOT_FOUND"
              glib:nick="target-not-found"
              glib:name="IDE_RUNTIME_ERROR_TARGET_NOT_FOUND">
      </member>
      <member name="spawn_failed"
              value="4"
              c:identifier="IDE_RUNTIME_ERROR_SPAWN_FAILED"
              glib:nick="spawn-failed"
              glib:name="IDE_RUNTIME_ERROR_SPAWN_FAILED">
      </member>
      <function name="quark" c:identifier="ide_runtime_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="RuntimeManager"
           c:symbol-prefix="runtime_manager"
           c:type="IdeRuntimeManager"
           parent="Object"
           final="1"
           glib:type-name="IdeRuntimeManager"
           glib:get-type="ide_runtime_manager_get_type"
           glib:type-struct="RuntimeManagerClass">
      <source-position filename="src/libide/foundry/ide-runtime-manager.h"
                       line="36"/>
      <implements name="Gio.Initable"/>
      <implements name="Gio.ListModel"/>
      <function name="from_context"
                c:identifier="ide_runtime_manager_from_context">
        <source-position filename="src/libide/foundry/ide-runtime-manager.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="197">an #IdeRuntimeManager</doc>
          <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="195">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="add" c:identifier="ide_runtime_manager_add">
        <source-position filename="src/libide/foundry/ide-runtime-manager.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_runtime"
              c:identifier="ide_runtime_manager_get_runtime">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime-manager.c"
             line="294">Gets the runtime by its internal identifier.</doc>
        <source-position filename="src/libide/foundry/ide-runtime-manager.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-manager.c"
               line="301">An #IdeRuntime.</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-manager.c"
                 line="296">An #IdeRuntimeManager</doc>
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-manager.c"
                 line="297">the identifier of the runtime</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_runtime_manager_remove">
        <source-position filename="src/libide/foundry/ide-runtime-manager.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeManager" c:type="IdeRuntimeManager*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="RuntimeManagerClass"
            c:type="IdeRuntimeManagerClass"
            glib:is-gtype-struct-for="RuntimeManager">
      <source-position filename="src/libide/foundry/ide-runtime-manager.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="RuntimeProvider"
           c:symbol-prefix="runtime_provider"
           c:type="IdeRuntimeProvider"
           parent="Object"
           abstract="1"
           glib:type-name="IdeRuntimeProvider"
           glib:get-type="ide_runtime_provider_get_type"
           glib:type-struct="RuntimeProviderClass">
      <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                       line="50"/>
      <implements name="Gio.ListModel"/>
      <virtual-method name="bootstrap_runtime" invoker="bootstrap_runtime">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime-provider.c"
             line="275">Locates and installs the necessary runtime for @pipeline if possible.

The future must either resolve with an #IdeRuntime or reject with error.</doc>
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-provider.c"
               line="284">a #DexFuture that resolves an #IdeRuntime or
  rejects with error.</doc>
          <type name="Dex.Future" c:type="DexFuture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="277">an #IdeRuntimeProvider</doc>
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="278">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-provider.c"
               line="194">a #DexFuture</doc>
          <type name="Dex.Future" c:type="DexFuture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="192">a #IdeRuntimeProvider</doc>
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="provides" invoker="provides">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="runtime_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-provider.c"
               line="233">a #DexFuture</doc>
          <type name="Dex.Future" c:type="DexFuture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="231">a #IdeRuntimeProvider</doc>
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="ide_runtime_provider_add">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bootstrap_runtime"
              c:identifier="ide_runtime_provider_bootstrap_runtime">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-runtime-provider.c"
             line="275">Locates and installs the necessary runtime for @pipeline if possible.

The future must either resolve with an #IdeRuntime or reject with error.</doc>
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-provider.c"
               line="284">a #DexFuture that resolves an #IdeRuntime or
  rejects with error.</doc>
          <type name="Dex.Future" c:type="DexFuture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="277">an #IdeRuntimeProvider</doc>
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="pipeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="278">an #IdePipeline</doc>
            <type name="Pipeline" c:type="IdePipeline*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_runtime_provider_load">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-provider.c"
               line="194">a #DexFuture</doc>
          <type name="Dex.Future" c:type="DexFuture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="192">a #IdeRuntimeProvider</doc>
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="provides" c:identifier="ide_runtime_provider_provides">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="runtime_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_runtime_provider_remove">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
          <parameter name="runtime" transfer-ownership="none">
            <type name="Runtime" c:type="IdeRuntime*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_runtime_provider_unload">
        <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-runtime-provider.c"
               line="233">a #DexFuture</doc>
          <type name="Dex.Future" c:type="DexFuture*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="231">a #IdeRuntimeProvider</doc>
            <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="RuntimeProviderClass"
            c:type="IdeRuntimeProviderClass"
            glib:is-gtype-struct-for="RuntimeProvider">
      <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                       line="50"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                           line="44"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="194">a #DexFuture</doc>
            <type name="Dex.Future" c:type="DexFuture*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime-provider.c"
                   line="192">a #IdeRuntimeProvider</doc>
              <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                           line="45"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="233">a #DexFuture</doc>
            <type name="Dex.Future" c:type="DexFuture*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime-provider.c"
                   line="231">a #IdeRuntimeProvider</doc>
              <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="bootstrap_runtime">
        <callback name="bootstrap_runtime">
          <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                           line="46"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-runtime-provider.c"
                 line="284">a #DexFuture that resolves an #IdeRuntime or
  rejects with error.</doc>
            <type name="Dex.Future" c:type="DexFuture*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime-provider.c"
                   line="277">an #IdeRuntimeProvider</doc>
              <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
            </parameter>
            <parameter name="pipeline" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-runtime-provider.c"
                   line="278">an #IdePipeline</doc>
              <type name="Pipeline" c:type="IdePipeline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="provides">
        <callback name="provides">
          <source-position filename="src/libide/foundry/ide-runtime-provider.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="RuntimeProvider" c:type="IdeRuntimeProvider*"/>
            </parameter>
            <parameter name="runtime_id" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ScrubberRevealPolicy"
                 glib:type-name="IdeScrubberRevealPolicy"
                 glib:get-type="ide_scrubber_reveal_policy_get_type"
                 c:type="IdeScrubberRevealPolicy">
      <member name="never"
              value="0"
              c:identifier="IDE_SCRUBBER_REVEAL_POLICY_NEVER"
              glib:nick="never"
              glib:name="IDE_SCRUBBER_REVEAL_POLICY_NEVER">
      </member>
      <member name="auto"
              value="1"
              c:identifier="IDE_SCRUBBER_REVEAL_POLICY_AUTO"
              glib:nick="auto"
              glib:name="IDE_SCRUBBER_REVEAL_POLICY_AUTO">
      </member>
      <member name="always"
              value="2"
              c:identifier="IDE_SCRUBBER_REVEAL_POLICY_ALWAYS"
              glib:nick="always"
              glib:name="IDE_SCRUBBER_REVEAL_POLICY_ALWAYS">
      </member>
    </enumeration>
    <class name="ScrubberRevealer"
           c:symbol-prefix="scrubber_revealer"
           c:type="IdeScrubberRevealer"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeScrubberRevealer"
           glib:get-type="ide_scrubber_revealer_get_type"
           glib:type-struct="ScrubberRevealerClass">
      <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                       line="43"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_scrubber_revealer_new">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_content"
              c:identifier="ide_scrubber_revealer_get_content"
              glib:get-property="content">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-scrubber-revealer.c"
               line="485">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-scrubber-revealer.c"
                 line="483">a #IdeScrubberRevealer</doc>
            <type name="ScrubberRevealer" c:type="IdeScrubberRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_policy"
              c:identifier="ide_scrubber_revealer_get_policy"
              glib:get-property="policy">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="ScrubberRevealPolicy" c:type="IdeScrubberRevealPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScrubberRevealer" c:type="IdeScrubberRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scrubber"
              c:identifier="ide_scrubber_revealer_get_scrubber"
              glib:get-property="scrubber">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-scrubber-revealer.c"
               line="499">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-scrubber-revealer.c"
                 line="497">a #IdeScrubberRevealer</doc>
            <type name="ScrubberRevealer" c:type="IdeScrubberRevealer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_content"
              c:identifier="ide_scrubber_revealer_set_content"
              glib:set-property="content">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScrubberRevealer" c:type="IdeScrubberRevealer*"/>
          </instance-parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="ide_scrubber_revealer_set_policy"
              glib:set-property="policy">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScrubberRevealer" c:type="IdeScrubberRevealer*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <type name="ScrubberRevealPolicy"
                  c:type="IdeScrubberRevealPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scrubber"
              c:identifier="ide_scrubber_revealer_set_scrubber"
              glib:set-property="scrubber">
        <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ScrubberRevealer" c:type="IdeScrubberRevealer*"/>
          </instance-parameter>
          <parameter name="scrubber" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <property name="content"
                writable="1"
                transfer-ownership="none"
                setter="set_content"
                getter="get_content">
        <type name="Gtk.Widget"/>
      </property>
      <property name="policy"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy"
                default-value="IDE_SCRUBBER_REVEAL_POLICY_NEVER">
        <type name="ScrubberRevealPolicy"/>
      </property>
      <property name="scrubber"
                writable="1"
                transfer-ownership="none"
                setter="set_scrubber"
                getter="get_scrubber">
        <type name="Gtk.Widget"/>
      </property>
    </class>
    <record name="ScrubberRevealerClass"
            c:type="IdeScrubberRevealerClass"
            glib:is-gtype-struct-for="ScrubberRevealer">
      <source-position filename="src/libide/gtk/ide-scrubber-revealer.h"
                       line="43"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="Sdk"
           c:symbol-prefix="sdk"
           c:type="IdeSdk"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeSdk"
           glib:get-type="ide_sdk_get_type"
           glib:type-struct="SdkClass">
      <source-position filename="src/libide/foundry/ide-sdk.h" line="41"/>
      <method name="get_can_update"
              c:identifier="ide_sdk_get_can_update"
              glib:get-property="can-update">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_installed"
              c:identifier="ide_sdk_get_installed"
              glib:get-property="installed">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_provider" c:identifier="ide_sdk_get_provider">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-sdk.c"
             line="145">Gets the provider of the SDK.</doc>
        <source-position filename="src/libide/foundry/ide-sdk.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-sdk.c"
               line="151">an #IdeSdkProvider</doc>
          <type name="SdkProvider" c:type="IdeSdkProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk.c"
                 line="147">a #IdeSdk</doc>
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_sdk_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_sdk_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_update"
              c:identifier="ide_sdk_set_can_update"
              glib:set-property="can-update">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
          <parameter name="can_update" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_installed"
              c:identifier="ide_sdk_set_installed"
              glib:set-property="installed">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
          <parameter name="installed" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_sdk_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_sdk_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/foundry/ide-sdk.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-update"
                writable="1"
                transfer-ownership="none"
                setter="set_can_update"
                getter="get_can_update"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="installed"
                writable="1"
                transfer-ownership="none"
                setter="set_installed"
                getter="get_installed"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SdkClass"
            c:type="IdeSdkClass"
            glib:is-gtype-struct-for="Sdk">
      <source-position filename="src/libide/foundry/ide-sdk.h" line="41"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SdkManager"
           c:symbol-prefix="sdk_manager"
           c:type="IdeSdkManager"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeSdkManager"
           glib:get-type="ide_sdk_manager_get_type"
           glib:type-struct="SdkManagerClass">
      <source-position filename="src/libide/foundry/ide-sdk-manager.h"
                       line="32"/>
      <implements name="Gio.ListModel"/>
      <function name="get_default" c:identifier="ide_sdk_manager_get_default">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-sdk-manager.c"
             line="227">Gets the #IdeSdkManager instance.</doc>
        <source-position filename="src/libide/foundry/ide-sdk-manager.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-sdk-manager.c"
               line="232">an #IdeSdkManager</doc>
          <type name="SdkManager" c:type="IdeSdkManager*"/>
        </return-value>
      </function>
      <property name="n-items" transfer-ownership="none" default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="SdkManagerClass"
            c:type="IdeSdkManagerClass"
            glib:is-gtype-struct-for="SdkManager">
      <source-position filename="src/libide/foundry/ide-sdk-manager.h"
                       line="32"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SdkProvider"
           c:symbol-prefix="sdk_provider"
           c:type="IdeSdkProvider"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeSdkProvider"
           glib:get-type="ide_sdk_provider_get_type"
           glib:type-struct="SdkProviderClass">
      <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                       line="55"/>
      <implements name="Gio.ListModel"/>
      <virtual-method name="sdk_added" invoker="sdk_added">
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="sdk" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="sdk_removed" invoker="sdk_removed">
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="sdk" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_async" invoker="update_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-sdk-provider.c"
             line="157">Asynchronous request to update an #IdeSdk from the provider.</doc>
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="159">a #IdeSdkProvider</doc>
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="sdk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="160">an #IdeSdk</doc>
            <type name="Sdk" c:type="IdeSdk*"/>
          </parameter>
          <parameter name="notif"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="161">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="162">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="163">callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="164">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_finish" invoker="update_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-sdk-provider.c"
             line="184">Gets result of ide_sdk_provider_update_async().</doc>
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-sdk-provider.c"
               line="192">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="186">a #IdeSdkProvider</doc>
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="187">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="sdk_added" c:identifier="ide_sdk_provider_sdk_added">
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="sdk" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </parameter>
        </parameters>
      </method>
      <method name="sdk_removed" c:identifier="ide_sdk_provider_sdk_removed">
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="sdk" transfer-ownership="none">
            <type name="Sdk" c:type="IdeSdk*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_async" c:identifier="ide_sdk_provider_update_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-sdk-provider.c"
             line="157">Asynchronous request to update an #IdeSdk from the provider.</doc>
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="159">a #IdeSdkProvider</doc>
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="sdk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="160">an #IdeSdk</doc>
            <type name="Sdk" c:type="IdeSdk*"/>
          </parameter>
          <parameter name="notif"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="161">an #IdeNotification</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="162">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="163">callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="164">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_finish"
              c:identifier="ide_sdk_provider_update_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-sdk-provider.c"
             line="184">Gets result of ide_sdk_provider_update_async().</doc>
        <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-sdk-provider.c"
               line="192">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="186">a #IdeSdkProvider</doc>
            <type name="SdkProvider" c:type="IdeSdkProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="187">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="sdk-added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Sdk"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="sdk-removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Sdk"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SdkProviderClass"
            c:type="IdeSdkProviderClass"
            glib:is-gtype-struct-for="SdkProvider">
      <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                       line="55"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="sdk_added">
        <callback name="sdk_added">
          <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SdkProvider" c:type="IdeSdkProvider*"/>
            </parameter>
            <parameter name="sdk" transfer-ownership="none">
              <type name="Sdk" c:type="IdeSdk*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="sdk_removed">
        <callback name="sdk_removed">
          <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SdkProvider" c:type="IdeSdkProvider*"/>
            </parameter>
            <parameter name="sdk" transfer-ownership="none">
              <type name="Sdk" c:type="IdeSdk*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_async">
        <callback name="update_async">
          <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="159">a #IdeSdkProvider</doc>
              <type name="SdkProvider" c:type="IdeSdkProvider*"/>
            </parameter>
            <parameter name="sdk" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="160">an #IdeSdk</doc>
              <type name="Sdk" c:type="IdeSdk*"/>
            </parameter>
            <parameter name="notif"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="161">an #IdeNotification</doc>
              <type name="Notification" c:type="IdeNotification*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="162">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="163">callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="164">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_finish">
        <callback name="update_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-sdk-provider.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-sdk-provider.c"
                 line="192">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="186">a #IdeSdkProvider</doc>
              <type name="SdkProvider" c:type="IdeSdkProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-sdk-provider.c"
                   line="187">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="SearchCategory"
                 glib:type-name="IdeSearchCategory"
                 glib:get-type="ide_search_category_get_type"
                 c:type="IdeSearchCategory">
      <member name="everything"
              value="0"
              c:identifier="IDE_SEARCH_CATEGORY_EVERYTHING"
              glib:nick="everything"
              glib:name="IDE_SEARCH_CATEGORY_EVERYTHING">
      </member>
      <member name="actions"
              value="1"
              c:identifier="IDE_SEARCH_CATEGORY_ACTIONS"
              glib:nick="actions"
              glib:name="IDE_SEARCH_CATEGORY_ACTIONS">
      </member>
      <member name="commands"
              value="2"
              c:identifier="IDE_SEARCH_CATEGORY_COMMANDS"
              glib:nick="commands"
              glib:name="IDE_SEARCH_CATEGORY_COMMANDS">
      </member>
      <member name="files"
              value="3"
              c:identifier="IDE_SEARCH_CATEGORY_FILES"
              glib:nick="files"
              glib:name="IDE_SEARCH_CATEGORY_FILES">
      </member>
      <member name="symbols"
              value="4"
              c:identifier="IDE_SEARCH_CATEGORY_SYMBOLS"
              glib:nick="symbols"
              glib:name="IDE_SEARCH_CATEGORY_SYMBOLS">
      </member>
      <member name="other"
              value="5"
              c:identifier="IDE_SEARCH_CATEGORY_OTHER"
              glib:nick="other"
              glib:name="IDE_SEARCH_CATEGORY_OTHER">
      </member>
    </enumeration>
    <class name="SearchEngine"
           c:symbol-prefix="search_engine"
           c:type="IdeSearchEngine"
           parent="Object"
           final="1"
           glib:type-name="IdeSearchEngine"
           glib:get-type="ide_search_engine_get_type"
           glib:type-struct="SearchEngineClass">
      <source-position filename="src/libide/search/ide-search-engine.h"
                       line="37"/>
      <constructor name="new" c:identifier="ide_search_engine_new">
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <type name="SearchEngine" c:type="IdeSearchEngine*"/>
        </return-value>
      </constructor>
      <method name="add_provider"
              c:identifier="ide_search_engine_add_provider">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-engine.c"
             line="483">Adds a custom search provider to the #IdeSearchEngine. This enables
to bring in custom #IdeSearchProvider during the runtime.</doc>
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="485">a #IdeSearchEngine</doc>
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="486">a #IdeSearchProvider</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_busy"
              c:identifier="ide_search_engine_get_busy"
              glib:get-property="busy">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-engine.c"
             line="255">Checks if the #IdeSearchEngine is currently executing a query.</doc>
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-engine.c"
               line="261">%TRUE if queries are being processed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="257">a #IdeSearchEngine</doc>
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_providers"
              c:identifier="ide_search_engine_list_providers">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-engine.c"
             line="537">Gets a #GListModel that is updated as providers are added or removed.</doc>
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-engine.c"
               line="543">a #GListModel of #IdeSearchProvider</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="539">a #IdeSearchEngine</doc>
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_provider"
              c:identifier="ide_search_engine_remove_provider">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-engine.c"
             line="502">Remove a custom search provider from the #IdeSearchEngine. This removes
custom #IdeSearchProvider during the runtime.</doc>
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="504">a #IdeSearchEngine</doc>
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="505">a #IdeSearchProvider</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_async"
              c:identifier="ide_search_engine_search_async">
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
          <parameter name="category" transfer-ownership="none">
            <type name="SearchCategory" c:type="IdeSearchCategory"/>
          </parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_finish"
              c:identifier="ide_search_engine_search_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-engine.c"
             line="450">Completes an asynchronous request to ide_search_engine_search_async().

The result is a #GListModel of #IdeSearchResult when successful. The type
is #IdeSearchResults which allows you to do additional filtering on the
result set instead of querying providers again.</doc>
        <source-position filename="src/libide/search/ide-search-engine.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-engine.c"
               line="462">a #GListModel of #IdeSearchResult items.</doc>
          <type name="SearchResults" c:type="IdeSearchResults*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="452">a #IdeSearchEngine</doc>
            <type name="SearchEngine" c:type="IdeSearchEngine*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-engine.c"
                 line="453">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="busy"
                transfer-ownership="none"
                getter="get_busy"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SearchEngineClass"
            c:type="IdeSearchEngineClass"
            glib:is-gtype-struct-for="SearchEngine">
      <source-position filename="src/libide/search/ide-search-engine.h"
                       line="37"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <class name="SearchEntry"
           c:symbol-prefix="search_entry"
           c:type="IdeSearchEntry"
           parent="Gtk.Widget"
           glib:type-name="IdeSearchEntry"
           glib:get-type="ide_search_entry_get_type"
           glib:type-struct="SearchEntryClass">
      <source-position filename="src/libide/gtk/ide-search-entry.h" line="36"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Editable"/>
      <constructor name="new" c:identifier="ide_search_entry_new">
        <source-position filename="src/libide/gtk/ide-search-entry.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="set_occurrence_count"
              c:identifier="ide_search_entry_set_occurrence_count">
        <source-position filename="src/libide/gtk/ide-search-entry.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchEntry" c:type="IdeSearchEntry*"/>
          </instance-parameter>
          <parameter name="occurrence_count" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_occurrence_position"
              c:identifier="ide_search_entry_set_occurrence_position">
        <source-position filename="src/libide/gtk/ide-search-entry.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchEntry" c:type="IdeSearchEntry*"/>
          </instance-parameter>
          <parameter name="occurrence_position" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SearchEntryClass"
            c:type="IdeSearchEntryClass"
            glib:is-gtype-struct-for="SearchEntry">
      <source-position filename="src/libide/gtk/ide-search-entry.h" line="36"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="SearchPopover"
           c:symbol-prefix="search_popover"
           c:type="IdeSearchPopover"
           parent="Gtk.Popover"
           final="1"
           glib:type-name="IdeSearchPopover"
           glib:get-type="ide_search_popover_get_type"
           glib:type-struct="SearchPopoverClass">
      <source-position filename="src/libide/gui/ide-search-popover.h"
                       line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.ShortcutManager"/>
      <method name="get_show_preview"
              c:identifier="ide_search_popover_get_show_preview"
              glib:get-property="show-preview">
        <source-position filename="src/libide/gui/ide-search-popover.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPopover" c:type="IdeSearchPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_preview"
              c:identifier="ide_search_popover_set_show_preview"
              glib:set-property="show-preview">
        <source-position filename="src/libide/gui/ide-search-popover.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPopover" c:type="IdeSearchPopover*"/>
          </instance-parameter>
          <parameter name="show_preview" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="search-engine"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SearchEngine"/>
      </property>
      <property name="show-preview"
                writable="1"
                transfer-ownership="none"
                setter="set_show_preview"
                getter="get_show_preview"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="SearchPopoverClass"
            c:type="IdeSearchPopoverClass"
            glib:is-gtype-struct-for="SearchPopover">
      <source-position filename="src/libide/gui/ide-search-popover.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Gtk.PopoverClass" c:type="GtkPopoverClass"/>
      </field>
    </record>
    <class name="SearchPreview"
           c:symbol-prefix="search_preview"
           c:type="IdeSearchPreview"
           parent="Gtk.Widget"
           glib:type-name="IdeSearchPreview"
           glib:get-type="ide_search_preview_get_type"
           glib:type-struct="SearchPreviewClass">
      <source-position filename="src/libide/search/ide-search-preview.h"
                       line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_search_preview_new">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_child"
              c:identifier="ide_search_preview_get_child"
              glib:get-property="child">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-preview.c"
             line="172">Gets the child widget, if any.</doc>
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-preview.c"
               line="178">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-preview.c"
                 line="174">a #IdeSearchPreview</doc>
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_search_preview_get_progress"
              glib:get-property="progress">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_search_preview_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_search_preview_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child"
              c:identifier="ide_search_preview_set_child"
              glib:set-property="child">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="ide_search_preview_set_progress"
              glib:set-property="progress">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_search_preview_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_search_preview_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/search/ide-search-preview.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="child"
                writable="1"
                transfer-ownership="none"
                setter="set_child"
                getter="get_child">
        <type name="Gtk.Widget"/>
      </property>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <record name="SearchPreviewClass"
            c:type="IdeSearchPreviewClass"
            glib:is-gtype-struct-for="SearchPreview">
      <source-position filename="src/libide/search/ide-search-preview.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <interface name="SearchProvider"
               c:symbol-prefix="search_provider"
               c:type="IdeSearchProvider"
               glib:type-name="IdeSearchProvider"
               glib:get-type="ide_search_provider_get_type"
               glib:type-struct="SearchProviderInterface">
      <source-position filename="src/libide/search/ide-search-provider.h"
                       line="68"/>
      <prerequisite name="Object"/>
      <virtual-method name="dup_icon" invoker="dup_icon">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-provider.c"
             line="177">Gets the icon for the provider, if any.</doc>
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="66"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-provider.c"
               line="183">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="179">an #IdeSearchProvider</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_title" invoker="dup_title">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="65"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_category" invoker="get_category">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="SearchCategory" c:type="IdeSearchCategory"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_async" invoker="search_async">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="search_finish" invoker="search_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-provider.c"
             line="127">Completes a request to a search provider.

If the result was truncated because of too many search results, then
@truncated is set to %TRUE.</doc>
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-provider.c"
               line="139">a #GListModel of #IdeSearchResult</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="129">a #IdeSearchProvider</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="130">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="truncated"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="131">if the result was truncated</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_icon" c:identifier="ide_search_provider_dup_icon">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-provider.c"
             line="177">Gets the icon for the provider, if any.</doc>
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="91"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-provider.c"
               line="183">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="179">an #IdeSearchProvider</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_title" c:identifier="ide_search_provider_dup_title">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="89"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_category"
              c:identifier="ide_search_provider_get_category">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="SearchCategory" c:type="IdeSearchCategory"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_search_provider_load">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="search_async"
              c:identifier="ide_search_provider_search_async">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="search_finish"
              c:identifier="ide_search_provider_search_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-provider.c"
             line="127">Completes a request to a search provider.

If the result was truncated because of too many search results, then
@truncated is set to %TRUE.</doc>
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-provider.c"
               line="139">a #GListModel of #IdeSearchResult</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="129">a #IdeSearchProvider</doc>
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="130">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="truncated"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="131">if the result was truncated</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_search_provider_unload">
        <source-position filename="src/libide/search/ide-search-provider.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchProvider" c:type="IdeSearchProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="SearchProviderInterface"
            c:type="IdeSearchProviderInterface"
            glib:is-gtype-struct-for="SearchProvider">
      <source-position filename="src/libide/search/ide-search-provider.h"
                       line="68"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_async">
        <callback name="search_async">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
            <parameter name="query" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="max_results" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="search_finish">
        <callback name="search_finish" throws="1">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="61"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="139">a #GListModel of #IdeSearchResult</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-provider.c"
                   line="129">a #IdeSearchProvider</doc>
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-provider.c"
                   line="130">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="truncated"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-provider.c"
                   line="131">if the result was truncated</doc>
              <type name="gboolean" c:type="gboolean*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_title">
        <callback name="dup_title">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="65"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_icon">
        <callback name="dup_icon">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="66"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-provider.c"
                 line="183">a #GIcon or %NULL</doc>
            <type name="Gio.Icon" c:type="GIcon*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-provider.c"
                   line="179">an #IdeSearchProvider</doc>
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_category">
        <callback name="get_category">
          <source-position filename="src/libide/search/ide-search-provider.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="SearchCategory" c:type="IdeSearchCategory"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SearchProvider" c:type="IdeSearchProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SearchReducer" c:type="IdeSearchReducer">
      <source-position filename="src/libide/search/ide-search-reducer.h"
                       line="38"/>
      <field name="sequence" writable="1">
        <type name="GLib.Sequence" c:type="GSequence*"/>
      </field>
      <field name="max_results" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="count" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <method name="accepts" c:identifier="ide_search_reducer_accepts">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-reducer.c"
             line="167">This helper allows you to check if a result with @score would be allowed
into the result set, or if the score is too low. This helps in situations
where you want to avoid inflating an #IdeSearchResult unless necessary.</doc>
        <source-position filename="src/libide/search/ide-search-reducer.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-reducer.c"
               line="176">%TRUE if there is space for a result with a score of @score.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="169">a #IdeSearchReducer</doc>
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="score" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="170">a score for the result</doc>
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="ide_search_reducer_destroy">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-reducer.c"
             line="59">Frees the results.</doc>
        <source-position filename="src/libide/search/ide-search-reducer.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="61">a #IdeSearchReducer</doc>
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="ide_search_reducer_free">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-reducer.c"
             line="74">Frees all items associated with the result set, unless @free_results is
%FALSE and then the results are returned as an array.</doc>
        <source-position filename="src/libide/search/ide-search-reducer.h"
                         line="55"/>
        <return-value transfer-ownership="container" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-reducer.c"
               line="82">
  An array of #IdeSearchResult unless @free_results is %TRUE, then
  %NULL is returned.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="SearchResult"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="76">a #IdeSearchReducer</doc>
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="free_results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="77">%TRUE if the results should be discarded</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="ide_search_reducer_push">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-reducer.c"
             line="150">Adds result to the set unless it scores too low.</doc>
        <source-position filename="src/libide/search/ide-search-reducer.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="152">an #IdeSearchReducer</doc>
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="153">an #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take" c:identifier="ide_search_reducer_take">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-reducer.c"
             line="123">Like ide_search_reducer_push() but takes ownership of @result by
stealing the reference.</doc>
        <source-position filename="src/libide/search/ide-search-reducer.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="reducer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="125">an #IdeSearchReducer</doc>
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="126">an #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </parameter>
        </parameters>
      </method>
      <function name="init" c:identifier="ide_search_reducer_init">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-reducer.c"
             line="39">Initializes a new #IdeSearchReducer to be used to reduce the number of
search results that are created. This is generally just used to help
keep search performance good.</doc>
        <source-position filename="src/libide/search/ide-search-reducer.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reducer"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="41">The reducer to initialize</doc>
            <type name="SearchReducer" c:type="IdeSearchReducer*"/>
          </parameter>
          <parameter name="max_results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-reducer.c"
                 line="42">max result size for the reuslts</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="SearchResult"
           c:symbol-prefix="search_result"
           c:type="IdeSearchResult"
           parent="GObject.Object"
           glib:type-name="IdeSearchResult"
           glib:get-type="ide_search_result_get_type"
           glib:type-struct="SearchResultClass">
      <source-position filename="src/libide/search/ide-search-result.h"
                       line="50"/>
      <constructor name="new" c:identifier="ide_search_result_new">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <type name="SearchResult" c:type="IdeSearchResult*"/>
        </return-value>
      </constructor>
      <function name="compare" c:identifier="ide_search_result_compare">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <parameter name="a"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="b"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="activate" invoker="activate">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-result.c"
             line="351">Requests that @self activate. @last_focus is provided so that the search
result may activate #GAction or other context-specific actions.</doc>
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="353">a #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="last_focus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="354">a #GtkWidget of the last focus</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_preview" invoker="load_preview">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-result.c"
             line="556">Gets a preview widget for the search result, if any.</doc>
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="48"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-result.c"
               line="563">an #IdeSearchPreview, or %NULL</doc>
          <type name="SearchPreview" c:type="IdeSearchPreview*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="558">a #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="559">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="matches">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="ide_search_result_activate">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-result.c"
             line="351">Requests that @self activate. @last_focus is provided so that the search
result may activate #GAction or other context-specific actions.</doc>
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="353">a #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="last_focus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="354">a #GtkWidget of the last focus</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_accelerator"
              c:identifier="ide_search_result_get_accelerator"
              glib:get-property="accelerator">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gicon"
              c:identifier="ide_search_result_get_gicon"
              glib:get-property="gicon">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-result.c"
             line="462">Gets the #GIcon for the search result, if any.</doc>
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="76"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-result.c"
               line="468">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="464">a #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_paintable"
              c:identifier="ide_search_result_get_paintable"
              glib:get-property="paintable">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-result.c"
             line="370">Gets the paintable for the row, if any.</doc>
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="71"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-result.c"
               line="376">a #GdkPaintable or %NULL</doc>
          <type name="Gdk.Paintable" c:type="GdkPaintable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="372">a #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_search_result_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_score"
              c:identifier="ide_search_result_get_score"
              glib:get-property="score">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gfloat" c:type="float"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_search_result_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_search_result_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="ide_search_result_get_use_markup"
              glib:get-property="use-markup">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="ide_search_result_get_use_underline"
              glib:get-property="use-underline">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_preview"
              c:identifier="ide_search_result_load_preview">
        <doc xml:space="preserve"
             filename="src/libide/search/ide-search-result.c"
             line="556">Gets a preview widget for the search result, if any.</doc>
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="106"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-result.c"
               line="563">an #IdeSearchPreview, or %NULL</doc>
          <type name="SearchPreview" c:type="IdeSearchPreview*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="558">a #IdeSearchResult</doc>
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="559">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_accelerator"
              c:identifier="ide_search_result_set_accelerator"
              glib:set-property="accelerator">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_gicon"
              c:identifier="ide_search_result_set_gicon"
              glib:set-property="gicon">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="gicon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_paintable"
              c:identifier="ide_search_result_set_paintable"
              glib:set-property="paintable">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="paintable" transfer-ownership="none">
            <type name="Gdk.Paintable" c:type="GdkPaintable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_search_result_set_priority"
              glib:set-property="priority">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_score"
              c:identifier="ide_search_result_set_score"
              glib:set-property="score">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="score" transfer-ownership="none">
            <type name="gfloat" c:type="gfloat"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_search_result_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_search_result_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="ide_search_result_set_use_markup"
              glib:set-property="use-markup">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="ide_search_result_set_use_underline"
              glib:set-property="use-underline">
        <source-position filename="src/libide/search/ide-search-result.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResult" c:type="IdeSearchResult*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="accelerator"
                writable="1"
                transfer-ownership="none"
                setter="set_accelerator"
                getter="get_accelerator"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="gicon"
                writable="1"
                transfer-ownership="none"
                setter="set_gicon"
                getter="get_gicon">
        <type name="Gio.Icon"/>
      </property>
      <property name="paintable"
                writable="1"
                transfer-ownership="none"
                setter="set_paintable"
                getter="get_paintable">
        <type name="Gdk.Paintable"/>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                setter="set_priority"
                getter="get_priority"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="score"
                writable="1"
                transfer-ownership="none"
                setter="set_score"
                getter="get_score"
                default-value="0.000000">
        <type name="gfloat" c:type="gfloat"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-markup"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="use-underline"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SearchResultClass"
            c:type="IdeSearchResultClass"
            glib:is-gtype-struct-for="SearchResult">
      <source-position filename="src/libide/search/ide-search-result.h"
                       line="50"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="matches">
        <callback name="matches">
          <source-position filename="src/libide/search/ide-search-result.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SearchResult" c:type="IdeSearchResult*"/>
            </parameter>
            <parameter name="query" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="src/libide/search/ide-search-result.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-result.c"
                   line="353">a #IdeSearchResult</doc>
              <type name="SearchResult" c:type="IdeSearchResult*"/>
            </parameter>
            <parameter name="last_focus" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-result.c"
                   line="354">a #GtkWidget of the last focus</doc>
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_preview">
        <callback name="load_preview">
          <source-position filename="src/libide/search/ide-search-result.h"
                           line="48"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/search/ide-search-result.c"
                 line="563">an #IdeSearchPreview, or %NULL</doc>
            <type name="SearchPreview" c:type="IdeSearchPreview*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-result.c"
                   line="558">a #IdeSearchResult</doc>
              <type name="SearchResult" c:type="IdeSearchResult*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/search/ide-search-result.c"
                   line="559">an #IdeContext</doc>
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SearchResults"
           c:symbol-prefix="search_results"
           c:type="IdeSearchResults"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeSearchResults"
           glib:get-type="ide_search_results_get_type"
           glib:type-struct="SearchResultsClass">
      <source-position filename="src/libide/search/ide-search-results.h"
                       line="34"/>
      <implements name="Gio.ListModel"/>
      <method name="refilter" c:identifier="ide_search_results_refilter">
        <source-position filename="src/libide/search/ide-search-results.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SearchResults" c:type="IdeSearchResults*"/>
          </instance-parameter>
          <parameter name="query" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SearchResultsClass"
            c:type="IdeSearchResultsClass"
            glib:is-gtype-struct-for="SearchResults">
      <source-position filename="src/libide/search/ide-search-results.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Session"
           c:symbol-prefix="session"
           c:type="IdeSession"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeSession"
           glib:get-type="ide_session_get_type"
           glib:type-struct="SessionClass">
      <source-position filename="src/libide/gui/ide-session.h" line="36"/>
      <constructor name="new" c:identifier="ide_session_new">
        <source-position filename="src/libide/gui/ide-session.h" line="39"/>
        <return-value transfer-ownership="full">
          <type name="Session" c:type="IdeSession*"/>
        </return-value>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_session_new_from_variant"
                   throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session.c"
             line="176">Creates a new #IdeSession from a #GVariant.

This creates a new #IdeSession instance from a previous session
which had been serialized to @variant.</doc>
        <source-position filename="src/libide/gui/ide-session.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session.c"
               line="186">a #IdeSession</doc>
          <type name="Session" c:type="IdeSession*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session.c"
                 line="178">a #GVariant from ide_session_to_variant()</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append" c:identifier="ide_session_append">
        <source-position filename="src/libide/gui/ide-session.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_item" c:identifier="ide_session_get_item">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session.c"
             line="213">Gets the item at @position.</doc>
        <source-position filename="src/libide/gui/ide-session.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session.c"
               line="220">The #IdeSessionItem at @position
  or %NULL if there is no item at that position.</doc>
          <type name="SessionItem" c:type="IdeSessionItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session.c"
                 line="215">a #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session.c"
                 line="216">the index of the item</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_items" c:identifier="ide_session_get_n_items">
        <source-position filename="src/libide/gui/ide-session.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert" c:identifier="ide_session_insert">
        <source-position filename="src/libide/gui/ide-session.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_by_id" c:identifier="ide_session_lookup_by_id">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session.c"
             line="289">Gets a session item matching @id.</doc>
        <source-position filename="src/libide/gui/ide-session.h" line="67"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session.c"
               line="296">an #IdeSessionItem or %NULL</doc>
          <type name="SessionItem" c:type="IdeSessionItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session.c"
                 line="291">a #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session.c"
                 line="292">the id of the item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend" c:identifier="ide_session_prepend">
        <source-position filename="src/libide/gui/ide-session.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_session_remove">
        <source-position filename="src/libide/gui/ide-session.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_at" c:identifier="ide_session_remove_at">
        <source-position filename="src/libide/gui/ide-session.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_session_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session.c"
             line="60">Serializes a #IdeSession as a #GVariant

The result of this function may be passed to
ide_session_new_from_variant() to recreate a #IdeSession.

The resulting variant will not be floating.</doc>
        <source-position filename="src/libide/gui/ide-session.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session.c"
               line="71">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session.c"
                 line="62">a #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="SessionClass"
            c:type="IdeSessionClass"
            glib:is-gtype-struct-for="Session">
      <source-position filename="src/libide/gui/ide-session.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SessionItem"
           c:symbol-prefix="session_item"
           c:type="IdeSessionItem"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeSessionItem"
           glib:get-type="ide_session_item_get_type"
           glib:type-struct="SessionItemClass">
      <source-position filename="src/libide/gui/ide-session-item.h" line="36"/>
      <constructor name="new" c:identifier="ide_session_item_new">
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <type name="SessionItem" c:type="IdeSessionItem*"/>
        </return-value>
      </constructor>
      <method name="get_id"
              c:identifier="ide_session_item_get_id"
              glib:get-property="id">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="185">Gets the id for the session item, if any.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="191">a string containing the id; otherwise %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="187">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="ide_session_item_get_metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="459">Extract a metadata value matching @format.

@format must not reference the #GVariant, which means you need to make
copies of data, such as "s" instead of "&amp;s".</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="470">%TRUE if @key was found with @format and parameters were set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="461">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="462">the key for the metadata value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="463">the format of the value</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_metadata_value"
              c:identifier="ide_session_item_get_metadata_value">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="501">Retrieves the metadata value for @key.

If @expected_type is non-%NULL, any non-%NULL value returned from this
function will match @expected_type.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="512">a non-floating #GVariant which should be
  released with g_variant_unref(); otherwise %NULL.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="503">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="504">the metadata key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="expected_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="505">a #GVariantType or %NULL</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_module_name"
              c:identifier="ide_session_item_get_module_name"
              glib:get-property="module-name">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="221">Gets the module-name that created an item.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="227">a module-name or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="223">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="ide_session_item_get_position"
              glib:get-property="position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="328">Gets the #PanelPosition for the item.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="334">a #PanelPosition or %NULL</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="330">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_hint"
              c:identifier="ide_session_item_get_type_hint"
              glib:get-property="type-hint">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="257">Gets the type hint for an item.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="61"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="263">a type-hint or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="259">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workspace"
              c:identifier="ide_session_item_get_workspace"
              glib:get-property="workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="293">Gets the workspace id for the item.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="299">a workspace or %NULL</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="295">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_metadata" c:identifier="ide_session_item_has_metadata">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="391">If the item contains a metadata value for @key.

Checks if a value exists for a metadata key and retrieves the #GVariantType
for that key.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="402">%TRUE if @self contains metadata named @key and @value_type is set
  to the value's #GVariantType. Otherwise %FALSE and @value_type is unchanged.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="393">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="394">the name of the metadata</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="395">a location for a #GVariantType or %NULL</doc>
            <type name="GLib.VariantType" c:type="const GVariantType**"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_metadata_with_type"
              c:identifier="ide_session_item_has_metadata_with_type">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="431">Checks if the item contains metadata @key with @expected_type.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-session-item.c"
               line="439">%TRUE if a value was found for @key matching @expected_typed;
  otherwise %FALSE is returned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="433">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="434">the metadata key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="expected_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="435">the #GVariantType to check for @key</doc>
            <type name="GLib.VariantType" c:type="const GVariantType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_session_item_set_id"
              glib:set-property="id">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="201">Sets the identifier for the item.

The identifier should generally be global to the session as it would
not be expected to come across multiple items with the same id.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="203">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="204">an optional identifier for the item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata"
              c:identifier="ide_session_item_set_metadata"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="362">A variadic helper to set metadata.

The format should be identical to g_variant_new().</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="364">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_metadata_value"
              c:identifier="ide_session_item_set_metadata_value">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="537">Sets the value for metadata @key.

If @value is %NULL, the metadata key is unset.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="539">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="540">the metadata key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="541">the value for @key or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_module_name"
              c:identifier="ide_session_item_set_module_name"
              glib:set-property="module-name">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="237">Sets the module-name for the session item.

This is generally used to help determine which plugin created
the item when decoding them at project load time.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="239">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="module_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="240">the module name owning the item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_position"
              c:identifier="ide_session_item_set_position"
              glib:set-property="position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="344">Sets the position for @self, if any.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="346">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="position"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="347">a #PanelPosition or %NULL</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_hint"
              c:identifier="ide_session_item_set_type_hint"
              glib:set-property="type-hint">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="273">Sets the type-hint value for the item.

This is generally used to help inflate the right version of
an object when loading session items.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="275">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="type_hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="276">a type hint string for the item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_workspace"
              c:identifier="ide_session_item_set_workspace"
              glib:set-property="workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-session-item.c"
             line="309">Sets the workspace id for the item.

This is generally used to tie an item to a specific workspace.</doc>
        <source-position filename="src/libide/gui/ide-session-item.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="311">a #IdeSessionItem</doc>
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </instance-parameter>
          <parameter name="workspace"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-session-item.c"
                 line="312">a workspace string for the item</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="module-name"
                writable="1"
                transfer-ownership="none"
                setter="set_module_name"
                getter="get_module_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="position"
                writable="1"
                transfer-ownership="none"
                setter="set_position"
                getter="get_position">
        <type name="Panel.Position"/>
      </property>
      <property name="type-hint"
                writable="1"
                transfer-ownership="none"
                setter="set_type_hint"
                getter="get_type_hint"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="workspace"
                writable="1"
                transfer-ownership="none"
                setter="set_workspace"
                getter="get_workspace"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SessionItemClass"
            c:type="IdeSessionItemClass"
            glib:is-gtype-struct-for="SessionItem">
      <source-position filename="src/libide/gui/ide-session-item.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Settings"
           c:symbol-prefix="settings"
           c:type="IdeSettings"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeSettings"
           glib:get-type="ide_settings_get_type"
           glib:type-struct="SettingsClass">
      <source-position filename="src/libide/core/ide-settings.h" line="36"/>
      <implements name="Gio.ActionGroup"/>
      <constructor name="new" c:identifier="ide_settings_new">
        <source-position filename="src/libide/core/ide-settings.h" line="43"/>
        <return-value transfer-ownership="full">
          <type name="Settings" c:type="IdeSettings*"/>
        </return-value>
        <parameters>
          <parameter name="project_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_relocatable_with_suffix"
                   c:identifier="ide_settings_new_relocatable_with_suffix">
        <source-position filename="src/libide/core/ide-settings.h" line="50"/>
        <return-value transfer-ownership="full">
          <type name="Settings" c:type="IdeSettings*"/>
        </return-value>
        <parameters>
          <parameter name="project_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="path_suffix" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_path"
                   c:identifier="ide_settings_new_with_path">
        <source-position filename="src/libide/core/ide-settings.h" line="46"/>
        <return-value transfer-ownership="full">
          <type name="Settings" c:type="IdeSettings*"/>
        </return-value>
        <parameters>
          <parameter name="project_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="resolve_schema_path"
                c:identifier="ide_settings_resolve_schema_path">
        <source-position filename="src/libide/core/ide-settings.h" line="39"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="project_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="path_suffix" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </function>
      <method name="bind" c:identifier="ide_settings_bind">
        <source-position filename="src/libide/core/ide-settings.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SettingsBindFlags" c:type="GSettingsBindFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_with_mapping"
              c:identifier="ide_settings_bind_with_mapping">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-settings.c"
             line="596">Like ide_settings_bind() but allows transforming to and from settings storage using
@get_mapping and @set_mapping transformation functions.

Call ide_settings_unbind() to unbind the mapping.</doc>
        <source-position filename="src/libide/core/ide-settings.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="598">An #IdeSettings</doc>
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="599">The settings key</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="600">the object to bind to</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="601">the property of @object to bind to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="602">flags for the binding</doc>
            <type name="Gio.SettingsBindFlags" c:type="GSettingsBindFlags"/>
          </parameter>
          <parameter name="get_mapping"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="603">variant to value mapping</doc>
            <type name="Gio.SettingsBindGetMapping"
                  c:type="GSettingsBindGetMapping"/>
          </parameter>
          <parameter name="set_mapping"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="604">value to variant mapping</doc>
            <type name="Gio.SettingsBindSetMapping"
                  c:type="GSettingsBindSetMapping"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="605">user data for @get_mapping and @set_mapping</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings.c"
                 line="606">destroy function to cleanup @user_data.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_boolean" c:identifier="ide_settings_get_boolean">
        <source-position filename="src/libide/core/ide-settings.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_value"
              c:identifier="ide_settings_get_default_value">
        <source-position filename="src/libide/core/ide-settings.h" line="56"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_double" c:identifier="ide_settings_get_double">
        <source-position filename="src/libide/core/ide-settings.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_int" c:identifier="ide_settings_get_int">
        <source-position filename="src/libide/core/ide-settings.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_schema_id"
              c:identifier="ide_settings_get_schema_id"
              glib:get-property="schema-id">
        <source-position filename="src/libide/core/ide-settings.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string" c:identifier="ide_settings_get_string">
        <source-position filename="src/libide/core/ide-settings.h" line="78"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uint" c:identifier="ide_settings_get_uint">
        <source-position filename="src/libide/core/ide-settings.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_user_value" c:identifier="ide_settings_get_user_value">
        <source-position filename="src/libide/core/ide-settings.h" line="59"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="ide_settings_get_value">
        <source-position filename="src/libide/core/ide-settings.h" line="62"/>
        <return-value transfer-ownership="full">
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean" c:identifier="ide_settings_set_boolean">
        <source-position filename="src/libide/core/ide-settings.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_double" c:identifier="ide_settings_set_double">
        <source-position filename="src/libide/core/ide-settings.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int" c:identifier="ide_settings_set_int">
        <source-position filename="src/libide/core/ide-settings.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="ide_settings_set_string">
        <source-position filename="src/libide/core/ide-settings.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint" c:identifier="ide_settings_set_uint">
        <source-position filename="src/libide/core/ide-settings.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="val" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="ide_settings_set_value">
        <source-position filename="src/libide/core/ide-settings.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="ide_settings_unbind">
        <source-position filename="src/libide/core/ide-settings.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Settings" c:type="IdeSettings*"/>
          </instance-parameter>
          <parameter name="property" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path-suffix"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="project-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_schema_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="changed" when="last" detailed="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SettingsClass"
            c:type="IdeSettingsClass"
            glib:is-gtype-struct-for="Settings">
      <source-position filename="src/libide/core/ide-settings.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="SettingsFlagAction"
           c:symbol-prefix="settings_flag_action"
           c:type="IdeSettingsFlagAction"
           parent="GObject.Object"
           glib:type-name="IdeSettingsFlagAction"
           glib:get-type="ide_settings_flag_action_get_type"
           glib:type-struct="SettingsFlagActionClass">
      <source-position filename="src/libide/core/ide-settings-flag-action.h"
                       line="30"/>
      <implements name="Gio.Action"/>
      <constructor name="new" c:identifier="ide_settings_flag_action_new">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-settings-flag-action.c"
             line="61">This creates a new action that can be used to toggle an individual flag in
a #GSettings key which is of a flags type.</doc>
        <source-position filename="src/libide/core/ide-settings-flag-action.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-settings-flag-action.c"
               line="71">A new #IdeSettingsFlagAction</doc>
          <type name="SettingsFlagAction" c:type="IdeSettingsFlagAction*"/>
        </return-value>
        <parameters>
          <parameter name="schema_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings-flag-action.c"
                 line="63">the settings schema</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="schema_key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings-flag-action.c"
                 line="64">the flags key with in @schema_id</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings-flag-action.c"
                 line="65">the path for the schema or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flag_nick" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-settings-flag-action.c"
                 line="66">the nick within the flag to toggle</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="flag-nick"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-key"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SettingsFlagActionClass"
            c:type="IdeSettingsFlagActionClass"
            glib:is-gtype-struct-for="SettingsFlagAction">
      <source-position filename="src/libide/core/ide-settings-flag-action.h"
                       line="30"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ShortcutAccelDialog"
           c:symbol-prefix="shortcut_accel_dialog"
           c:type="IdeShortcutAccelDialog"
           parent="Adw.Window"
           final="1"
           glib:type-name="IdeShortcutAccelDialog"
           glib:get-type="ide_shortcut_accel_dialog_get_type"
           glib:type-struct="ShortcutAccelDialogClass">
      <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                       line="36"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="ide_shortcut_accel_dialog_new">
        <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_accelerator"
              c:identifier="ide_shortcut_accel_dialog_get_accelerator"
              glib:get-property="accelerator">
        <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="IdeShortcutAccelDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shortcut_title"
              c:identifier="ide_shortcut_accel_dialog_get_shortcut_title"
              glib:get-property="shortcut-title">
        <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="IdeShortcutAccelDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accelerator"
              c:identifier="ide_shortcut_accel_dialog_set_accelerator"
              glib:set-property="accelerator">
        <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="IdeShortcutAccelDialog*"/>
          </instance-parameter>
          <parameter name="accelerator" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shortcut_title"
              c:identifier="ide_shortcut_accel_dialog_set_shortcut_title"
              glib:set-property="shortcut-title">
        <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutAccelDialog" c:type="IdeShortcutAccelDialog*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="accelerator"
                writable="1"
                transfer-ownership="none"
                setter="set_accelerator"
                getter="get_accelerator"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="shortcut-title"
                writable="1"
                transfer-ownership="none"
                setter="set_shortcut_title"
                getter="get_shortcut_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="shortcut-set" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ShortcutAccelDialogClass"
            c:type="IdeShortcutAccelDialogClass"
            glib:is-gtype-struct-for="ShortcutAccelDialog">
      <source-position filename="src/libide/gtk/ide-shortcut-accel-dialog.h"
                       line="36"/>
      <field name="parent_class">
        <type name="Adw.WindowClass" c:type="AdwWindowClass"/>
      </field>
    </record>
    <record name="ShortcutInfo"
            c:type="IdeShortcutInfo"
            disguised="1"
            opaque="1">
      <source-position filename="src/libide/gui/ide-shortcut-info.h"
                       line="27"/>
      <method name="get_accelerator"
              c:identifier="ide_shortcut_info_get_accelerator">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action_name"
              c:identifier="ide_shortcut_info_get_action_name">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_action_target"
              c:identifier="ide_shortcut_info_get_action_target">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="45"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-shortcut-window.c"
               line="672">a #GVariant or %NULL</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-window.c"
                 line="670">a #IdeShortcutInfo</doc>
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group" c:identifier="ide_shortcut_info_get_group">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_shortcut_info_get_icon_name">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="ide_shortcut_info_get_id">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_page" c:identifier="ide_shortcut_info_get_page">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_shortcut_info_get_subtitle">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_shortcut_info_get_title">
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="foreach" c:identifier="ide_shortcut_info_foreach">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-shortcut-window.c"
             line="561">Calls @func for every shortcut info. Accelerators come from
@shortcuts by matching action and target.</doc>
        <source-position filename="src/libide/gui/ide-shortcut-info.h"
                         line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="shortcuts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-window.c"
                 line="563">a #GListModel of #GtkShortcut</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-window.c"
                 line="564">a callback for each shortcut info</doc>
            <type name="ShortcutInfoFunc" c:type="IdeShortcutInfoFunc"/>
          </parameter>
          <parameter name="func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-window.c"
                 line="565">closure data for @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="ShortcutInfoFunc" c:type="IdeShortcutInfoFunc">
      <source-position filename="src/libide/gui/ide-shortcut-info.h"
                       line="29"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <type name="ShortcutInfo" c:type="const IdeShortcutInfo*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="ShortcutProvider"
               c:symbol-prefix="shortcut_provider"
               c:type="IdeShortcutProvider"
               glib:type-name="IdeShortcutProvider"
               glib:get-type="ide_shortcut_provider_get_type"
               glib:type-struct="ShortcutProviderInterface">
      <source-position filename="src/libide/gui/ide-shortcut-provider.h"
                       line="41"/>
      <prerequisite name="Object"/>
      <virtual-method name="list_shortcuts" invoker="list_shortcuts">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-shortcut-provider.c"
             line="43">Gets a #GListModel of #GtkShortcut.

This function should return a #GListModel of #GtkShortcut that are updated
as necessary by the plugin. This list model is used to activate shortcuts
based on user input and allows more control by plugins over when and how
shortcuts may activate.</doc>
        <source-position filename="src/libide/gui/ide-shortcut-provider.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-shortcut-provider.c"
               line="54">A #GListModel of #GtkShortcut</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-provider.c"
                 line="45">a #IdeShortcutProvider</doc>
            <type name="ShortcutProvider" c:type="IdeShortcutProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="list_shortcuts"
              c:identifier="ide_shortcut_provider_list_shortcuts">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-shortcut-provider.c"
             line="43">Gets a #GListModel of #GtkShortcut.

This function should return a #GListModel of #GtkShortcut that are updated
as necessary by the plugin. This list model is used to activate shortcuts
based on user input and allows more control by plugins over when and how
shortcuts may activate.</doc>
        <source-position filename="src/libide/gui/ide-shortcut-provider.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-shortcut-provider.c"
               line="54">A #GListModel of #GtkShortcut</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-provider.c"
                 line="45">a #IdeShortcutProvider</doc>
            <type name="ShortcutProvider" c:type="IdeShortcutProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ShortcutProviderInterface"
            c:type="IdeShortcutProviderInterface"
            glib:is-gtype-struct-for="ShortcutProvider">
      <source-position filename="src/libide/gui/ide-shortcut-provider.h"
                       line="41"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="list_shortcuts">
        <callback name="list_shortcuts">
          <source-position filename="src/libide/gui/ide-shortcut-provider.h"
                           line="40"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-shortcut-provider.c"
                 line="54">A #GListModel of #GtkShortcut</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-shortcut-provider.c"
                   line="45">a #IdeShortcutProvider</doc>
              <type name="ShortcutProvider" c:type="IdeShortcutProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="SimilarFileLocator"
               c:symbol-prefix="similar_file_locator"
               c:type="IdeSimilarFileLocator"
               glib:type-name="IdeSimilarFileLocator"
               glib:get-type="ide_similar_file_locator_get_type"
               glib:type-struct="SimilarFileLocatorInterface">
      <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                       line="46"/>
      <virtual-method name="list_async" invoker="list_async">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-similar-file-locator.c"
             line="34">Asynchronously requests locating similar files.

A similar file may be found such as those with similar file suffixes
or perhaps a designer file associated with a source file.</doc>
        <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="36">a #IdeSimilarFileLocator</doc>
            <type name="SimilarFileLocator" c:type="IdeSimilarFileLocator*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="37">a #GFile to find similar files for</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="38">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="39">callback to use to complete operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="40">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_finish" invoker="list_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-similar-file-locator.c"
             line="65">Completes asynchronous request to list similar files.</doc>
        <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-similar-file-locator.c"
               line="73">a #GListModel of #GFile or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="67">a #IdeSimilarFileLocator</doc>
            <type name="SimilarFileLocator" c:type="IdeSimilarFileLocator*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="68">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="list_async"
              c:identifier="ide_similar_file_locator_list_async">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-similar-file-locator.c"
             line="34">Asynchronously requests locating similar files.

A similar file may be found such as those with similar file suffixes
or perhaps a designer file associated with a source file.</doc>
        <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="36">a #IdeSimilarFileLocator</doc>
            <type name="SimilarFileLocator" c:type="IdeSimilarFileLocator*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="37">a #GFile to find similar files for</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="38">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="39">callback to use to complete operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="40">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_finish"
              c:identifier="ide_similar_file_locator_list_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-similar-file-locator.c"
             line="65">Completes asynchronous request to list similar files.</doc>
        <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-similar-file-locator.c"
               line="73">a #GListModel of #GFile or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="67">a #IdeSimilarFileLocator</doc>
            <type name="SimilarFileLocator" c:type="IdeSimilarFileLocator*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="68">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SimilarFileLocatorInterface"
            c:type="IdeSimilarFileLocatorInterface"
            glib:is-gtype-struct-for="SimilarFileLocator">
      <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                       line="46"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="list_async">
        <callback name="list_async">
          <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                           line="38"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="36">a #IdeSimilarFileLocator</doc>
              <type name="SimilarFileLocator" c:type="IdeSimilarFileLocator*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="37">a #GFile to find similar files for</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="38">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="39">callback to use to complete operation</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="40">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_finish">
        <callback name="list_finish" throws="1">
          <source-position filename="src/libide/projects/ide-similar-file-locator.h"
                           line="43"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-similar-file-locator.c"
                 line="73">a #GListModel of #GFile or %NULL</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="67">a #IdeSimilarFileLocator</doc>
              <type name="SimilarFileLocator" c:type="IdeSimilarFileLocator*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-similar-file-locator.c"
                   line="68">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SimpleBuildSystemDiscovery"
           c:symbol-prefix="simple_build_system_discovery"
           c:type="IdeSimpleBuildSystemDiscovery"
           parent="Object"
           glib:type-name="IdeSimpleBuildSystemDiscovery"
           glib:get-type="ide_simple_build_system_discovery_get_type"
           glib:type-struct="SimpleBuildSystemDiscoveryClass">
      <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                       line="44"/>
      <implements name="BuildSystemDiscovery"/>
      <method name="get_glob"
              c:identifier="ide_simple_build_system_discovery_get_glob"
              glib:get-property="glob">
        <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildSystemDiscovery"
                  c:type="IdeSimpleBuildSystemDiscovery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hint"
              c:identifier="ide_simple_build_system_discovery_get_hint"
              glib:get-property="hint">
        <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildSystemDiscovery"
                  c:type="IdeSimpleBuildSystemDiscovery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority"
              c:identifier="ide_simple_build_system_discovery_get_priority"
              glib:get-property="priority">
        <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildSystemDiscovery"
                  c:type="IdeSimpleBuildSystemDiscovery*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_glob"
              c:identifier="ide_simple_build_system_discovery_set_glob"
              glib:set-property="glob">
        <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildSystemDiscovery"
                  c:type="IdeSimpleBuildSystemDiscovery*"/>
          </instance-parameter>
          <parameter name="glob" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint"
              c:identifier="ide_simple_build_system_discovery_set_hint"
              glib:set-property="hint">
        <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildSystemDiscovery"
                  c:type="IdeSimpleBuildSystemDiscovery*"/>
          </instance-parameter>
          <parameter name="hint" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_simple_build_system_discovery_set_priority"
              glib:set-property="priority">
        <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildSystemDiscovery"
                  c:type="IdeSimpleBuildSystemDiscovery*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="glob"
                writable="1"
                transfer-ownership="none"
                setter="set_glob"
                getter="get_glob"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-simple-build-system-discovery.c"
             line="143">The "glob" property is a glob to match for files within the project
directory. This can be used to quickly match the project file, such as
"configure.*".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="hint"
                writable="1"
                transfer-ownership="none"
                setter="set_hint"
                getter="get_hint"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-simple-build-system-discovery.c"
             line="157">The "hint" property is used from ide_build_system_discovery_discover()
if the build file was discovered.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority"
                writable="1"
                transfer-ownership="none"
                setter="set_priority"
                getter="get_priority"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-simple-build-system-discovery.c"
             line="170">The "priority" property is the priority of any match.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="SimpleBuildSystemDiscoveryClass"
            c:type="IdeSimpleBuildSystemDiscoveryClass"
            glib:is-gtype-struct-for="SimpleBuildSystemDiscovery">
      <source-position filename="src/libide/foundry/ide-simple-build-system-discovery.h"
                       line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SimpleBuildTarget"
           c:symbol-prefix="simple_build_target"
           c:type="IdeSimpleBuildTarget"
           parent="Object"
           glib:type-name="IdeSimpleBuildTarget"
           glib:get-type="ide_simple_build_target_get_type"
           glib:type-struct="SimpleBuildTargetClass">
      <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                       line="44"/>
      <implements name="BuildTarget"/>
      <constructor name="new" c:identifier="ide_simple_build_target_new">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_argv" c:identifier="ide_simple_build_target_set_argv">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cwd" c:identifier="ide_simple_build_target_set_cwd">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
          </instance-parameter>
          <parameter name="cwd" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_install_directory"
              c:identifier="ide_simple_build_target_set_install_directory">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
          </instance-parameter>
          <parameter name="install_directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="ide_simple_build_target_set_language">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ide_simple_build_target_set_name">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority"
              c:identifier="ide_simple_build_target_set_priority">
        <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleBuildTarget" c:type="IdeSimpleBuildTarget*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="SimpleBuildTargetClass"
            c:type="IdeSimpleBuildTargetClass"
            glib:is-gtype-struct-for="SimpleBuildTarget">
      <source-position filename="src/libide/foundry/ide-simple-build-target.h"
                       line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SimpleToolchain"
           c:symbol-prefix="simple_toolchain"
           c:type="IdeSimpleToolchain"
           parent="Toolchain"
           glib:type-name="IdeSimpleToolchain"
           glib:get-type="ide_simple_toolchain_get_type"
           glib:type-struct="SimpleToolchainClass">
      <source-position filename="src/libide/foundry/ide-simple-toolchain.h"
                       line="46"/>
      <constructor name="new" c:identifier="ide_simple_toolchain_new">
        <source-position filename="src/libide/foundry/ide-simple-toolchain.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <type name="SimpleToolchain" c:type="IdeSimpleToolchain*"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_tool_for_language"
              c:identifier="ide_simple_toolchain_set_tool_for_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-simple-toolchain.c"
             line="112">Gets the path of the compiler executable</doc>
        <source-position filename="src/libide/foundry/ide-simple-toolchain.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-simple-toolchain.c"
                 line="114">an #IdeSimpleToolchain</doc>
            <type name="SimpleToolchain" c:type="IdeSimpleToolchain*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-simple-toolchain.c"
                 line="116">the language of the tool like %IDE_TOOLCHAIN_LANGUAGE_C.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tool_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-simple-toolchain.c"
                 line="115">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tool_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-simple-toolchain.c"
                 line="117">The path of</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Toolchain" c:type="IdeToolchain"/>
      </field>
    </class>
    <record name="SimpleToolchainClass"
            c:type="IdeSimpleToolchainClass"
            glib:is-gtype-struct-for="SimpleToolchain">
      <source-position filename="src/libide/foundry/ide-simple-toolchain.h"
                       line="46"/>
      <field name="parent">
        <type name="ToolchainClass" c:type="IdeToolchainClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SourceView"
           c:symbol-prefix="source_view"
           c:type="IdeSourceView"
           parent="GtkSource.View"
           glib:type-name="IdeSourceView"
           glib:get-type="ide_source_view_get_type"
           glib:type-struct="SourceViewClass">
      <source-position filename="src/libide/sourceview/ide-source-view.h"
                       line="36"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="ide_source_view_new">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <function name="jump_to_iter"
                c:identifier="ide_source_view_jump_to_iter">
        <doc xml:space="preserve"
             filename="src/libide/sourceview/ide-source-view.c"
             line="1711">The goal of this function is to be like gtk_text_view_scroll_to_iter() but
without any of the scrolling animation. We use it to move to a position
when animations would cause additional distractions.</doc>
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="text_view" transfer-ownership="none">
            <type name="Gtk.TextView" c:type="GtkTextView*"/>
          </parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
          </parameter>
          <parameter name="within_margin" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="use_align" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="xalign" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
          <parameter name="yalign" transfer-ownership="none">
            <type name="gdouble" c:type="double"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_controller"
              c:identifier="ide_source_view_add_controller">
        <doc xml:space="preserve"
             filename="src/libide/sourceview/ide-source-view.c"
             line="1978">Adds a controller with a priority so that capture/bubble can be
applied in a known order.</doc>
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/sourceview/ide-source-view.c"
                 line="1980">a #IdeSourceView</doc>
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/sourceview/ide-source-view.c"
                 line="1981">the sort priority</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="controller" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/sourceview/ide-source-view.c"
                 line="1982">a #GtkEventController</doc>
            <type name="Gtk.EventController" c:type="GtkEventController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="append_menu" c:identifier="ide_source_view_append_menu">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="menu_model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_position_label"
              c:identifier="ide_source_view_dup_position_label">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enable_search_bubbles"
              c:identifier="ide_source_view_get_enable_search_bubbles">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_font_desc"
              c:identifier="ide_source_view_get_font_desc"
              glib:get-property="font-desc">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="Pango.FontDescription"
                c:type="const PangoFontDescription*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_highlight_current_line"
              c:identifier="ide_source_view_get_highlight_current_line">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_insert_matching_brace"
              c:identifier="ide_source_view_get_insert_matching_brace"
              glib:get-property="insert-matching-brace">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iter_at_visual_position"
              c:identifier="ide_source_view_get_iter_at_visual_position">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="iter" transfer-ownership="none">
            <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
          </parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="line_offset" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_overwrite_braces"
              c:identifier="ide_source_view_get_overwrite_braces"
              glib:get-property="overwrite-braces">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visual_position"
              c:identifier="ide_source_view_get_visual_position">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="line_column" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_visual_position_range"
              c:identifier="ide_source_view_get_visual_position_range">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="line" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="line_column" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="range" transfer-ownership="none">
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_zoom_level"
              c:identifier="ide_source_view_get_zoom_level"
              glib:get-property="zoom-level">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="double"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="jump_to_insert"
              c:identifier="ide_source_view_jump_to_insert">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend_menu" c:identifier="ide_source_view_prepend_menu">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="menu_model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_controller"
              c:identifier="ide_source_view_remove_controller">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="controller" transfer-ownership="none">
            <type name="Gtk.EventController" c:type="GtkEventController*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_menu" c:identifier="ide_source_view_remove_menu">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="menu_model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_insert"
              c:identifier="ide_source_view_scroll_to_insert">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="dir" transfer-ownership="none">
            <type name="Gtk.DirectionType" c:type="GtkDirectionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enable_search_bubbles"
              c:identifier="ide_source_view_set_enable_search_bubbles">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="enable_search_bubbles" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_font_desc"
              c:identifier="ide_source_view_set_font_desc"
              glib:set-property="font-desc">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="font_desc" transfer-ownership="none">
            <type name="Pango.FontDescription"
                  c:type="const PangoFontDescription*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_highlight_current_line"
              c:identifier="ide_source_view_set_highlight_current_line">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="highlight_current_line" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_insert_matching_brace"
              c:identifier="ide_source_view_set_insert_matching_brace"
              glib:set-property="insert-matching-brace">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="insert_matching_brace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_overwrite_braces"
              c:identifier="ide_source_view_set_overwrite_braces"
              glib:set-property="overwrite-braces">
        <source-position filename="src/libide/sourceview/ide-source-view.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SourceView" c:type="IdeSourceView*"/>
          </instance-parameter>
          <parameter name="overwrite_braces" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="font-desc"
                writable="1"
                transfer-ownership="none"
                setter="set_font_desc"
                getter="get_font_desc">
        <type name="Pango.FontDescription"/>
      </property>
      <property name="font-scale"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="insert-matching-brace"
                writable="1"
                transfer-ownership="none"
                setter="set_insert_matching_brace"
                getter="get_insert_matching_brace"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="line-height"
                writable="1"
                transfer-ownership="none"
                default-value="1.200000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="overwrite-braces"
                writable="1"
                transfer-ownership="none"
                setter="set_overwrite_braces"
                getter="get_overwrite_braces"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="zoom-level"
                transfer-ownership="none"
                getter="get_zoom_level"
                default-value="1.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <glib:signal name="populate-menu" when="last">
        <doc xml:space="preserve"
             filename="src/libide/sourceview/ide-source-view.c"
             line="1372">The "populate-menu" signal is emitted before the context meu is shown
to the user. Handlers of this signal should update any menu items they
have which have been connected using ide_source_view_append_menu() or
simmilar.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="SourceViewClass"
            c:type="IdeSourceViewClass"
            glib:is-gtype-struct-for="SourceView">
      <source-position filename="src/libide/sourceview/ide-source-view.h"
                       line="36"/>
      <field name="parent_class">
        <type name="GtkSource.ViewClass" c:type="GtkSourceViewClass"/>
      </field>
    </record>
    <bitfield name="SpacesStyle"
              glib:type-name="IdeSpacesStyle"
              glib:get-type="ide_spaces_style_get_type"
              c:type="IdeSpacesStyle">
      <member name="ignore"
              value="0"
              c:identifier="IDE_SPACES_STYLE_IGNORE"
              glib:nick="ignore"
              glib:name="IDE_SPACES_STYLE_IGNORE">
      </member>
      <member name="before_left_paren"
              value="1"
              c:identifier="IDE_SPACES_STYLE_BEFORE_LEFT_PAREN"
              glib:nick="before-left-paren"
              glib:name="IDE_SPACES_STYLE_BEFORE_LEFT_PAREN">
      </member>
      <member name="before_left_bracket"
              value="2"
              c:identifier="IDE_SPACES_STYLE_BEFORE_LEFT_BRACKET"
              glib:nick="before-left-bracket"
              glib:name="IDE_SPACES_STYLE_BEFORE_LEFT_BRACKET">
      </member>
      <member name="before_left_brace"
              value="4"
              c:identifier="IDE_SPACES_STYLE_BEFORE_LEFT_BRACE"
              glib:nick="before-left-brace"
              glib:name="IDE_SPACES_STYLE_BEFORE_LEFT_BRACE">
      </member>
      <member name="before_left_angle"
              value="8"
              c:identifier="IDE_SPACES_STYLE_BEFORE_LEFT_ANGLE"
              glib:nick="before-left-angle"
              glib:name="IDE_SPACES_STYLE_BEFORE_LEFT_ANGLE">
      </member>
      <member name="before_colon"
              value="16"
              c:identifier="IDE_SPACES_STYLE_BEFORE_COLON"
              glib:nick="before-colon"
              glib:name="IDE_SPACES_STYLE_BEFORE_COLON">
      </member>
      <member name="before_comma"
              value="32"
              c:identifier="IDE_SPACES_STYLE_BEFORE_COMMA"
              glib:nick="before-comma"
              glib:name="IDE_SPACES_STYLE_BEFORE_COMMA">
      </member>
      <member name="before_semicolon"
              value="64"
              c:identifier="IDE_SPACES_STYLE_BEFORE_SEMICOLON"
              glib:nick="before-semicolon"
              glib:name="IDE_SPACES_STYLE_BEFORE_SEMICOLON">
      </member>
    </bitfield>
    <interface name="Subprocess"
               c:symbol-prefix="subprocess"
               c:type="IdeSubprocess"
               glib:type-name="IdeSubprocess"
               glib:get-type="ide_subprocess_get_type"
               glib:type-struct="SubprocessInterface">
      <source-position filename="src/libide/threading/ide-subprocess.h"
                       line="96"/>
      <virtual-method name="communicate" invoker="communicate" throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_async" invoker="communicate_async">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess.c"
             line="328">Asynchronously communicates with the the child process.

There is no need to call ide_subprocess_wait() on the process if using
this asynchronous operation as it will internally wait for the child
to exit or be signaled.

Ensure you've set the proper flags to ensure that you can write to stdin
or read from stderr/stdout as necessary.</doc>
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="330">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="331">a #GBytes to send to stdin or %NULL</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="332">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="333">A callback to complete the request</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="334">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_finish"
                      invoker="communicate_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess.c"
             line="358">Finishes a request to ide_subprocess_communicate_async().</doc>
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="368">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="360">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="361">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="362">A location for a #Bytes.</doc>
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="363">A location for a #Bytes.</doc>
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_utf8"
                      invoker="communicate_utf8"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess.c"
             line="302">This process acts identical to g_subprocess_communicate_utf8().</doc>
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="312">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="304">an #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="305">input to deliver to the subprocesses stdin stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="306">an optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="307">an optional location for the stdout contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="308">an optional location for the stderr contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_utf8_async"
                      invoker="communicate_utf8_async">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="385">The data to send to stdin or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="communicate_utf8_finish"
                      invoker="communicate_utf8_finish"
                      throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="410">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="404">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="405">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="406">A location for the UTF-8 formatted output string or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="407">A location for the UTF-8 formatted output string or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="force_exit" invoker="force_exit">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_exit_status" invoker="get_exit_status">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_identifier" invoker="get_identifier">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_if_exited" invoker="get_if_exited">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_if_signaled" invoker="get_if_signaled">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_status" invoker="get_status">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stderr_pipe" invoker="get_stderr_pipe">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="69">a #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdin_pipe" invoker="get_stdin_pipe">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="82">a #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_stdout_pipe" invoker="get_stdout_pipe">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="56">a #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_successful" invoker="get_successful">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_term_sig" invoker="get_term_sig">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="send_signal" invoker="send_signal">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="signal_num" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wait" invoker="wait" throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wait_async" invoker="wait_async">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="wait_finish" invoker="wait_finish" throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_exit_status"
              c:identifier="ide_subprocess_check_exit_status"
              throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="communicate"
              c:identifier="ide_subprocess_communicate"
              throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_async"
              c:identifier="ide_subprocess_communicate_async">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess.c"
             line="328">Asynchronously communicates with the the child process.

There is no need to call ide_subprocess_wait() on the process if using
this asynchronous operation as it will internally wait for the child
to exit or be signaled.

Ensure you've set the proper flags to ensure that you can write to stdin
or read from stderr/stdout as necessary.</doc>
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="330">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="331">a #GBytes to send to stdin or %NULL</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="332">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="333">A callback to complete the request</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="334">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_finish"
              c:identifier="ide_subprocess_communicate_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess.c"
             line="358">Finishes a request to ide_subprocess_communicate_async().</doc>
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="368">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="360">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="361">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="362">A location for a #Bytes.</doc>
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="363">A location for a #Bytes.</doc>
            <type name="GLib.Bytes" c:type="GBytes**"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_utf8"
              c:identifier="ide_subprocess_communicate_utf8"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess.c"
             line="302">This process acts identical to g_subprocess_communicate_utf8().</doc>
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="312">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="304">an #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="305">input to deliver to the subprocesses stdin stream</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="306">an optional #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="307">an optional location for the stdout contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="308">an optional location for the stderr contents</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_utf8_async"
              c:identifier="ide_subprocess_communicate_utf8_async">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="stdin_buf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="385">The data to send to stdin or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="communicate_utf8_finish"
              c:identifier="ide_subprocess_communicate_utf8_finish"
              throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="410">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="404">An #IdeSubprocess</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="405">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="stdout_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="406">A location for the UTF-8 formatted output string or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="stderr_buf"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="407">A location for the UTF-8 formatted output string or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="force_exit" c:identifier="ide_subprocess_force_exit">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_exit_status"
              c:identifier="ide_subprocess_get_exit_status">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="140"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identifier"
              c:identifier="ide_subprocess_get_identifier">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_if_exited" c:identifier="ide_subprocess_get_if_exited">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_if_signaled"
              c:identifier="ide_subprocess_get_if_signaled">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status" c:identifier="ide_subprocess_get_status">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stderr_pipe"
              c:identifier="ide_subprocess_get_stderr_pipe">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="69">a #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdin_pipe"
              c:identifier="ide_subprocess_get_stdin_pipe">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="82">a #GOutputStream or %NULL.</doc>
          <type name="Gio.OutputStream" c:type="GOutputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stdout_pipe"
              c:identifier="ide_subprocess_get_stdout_pipe">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess.c"
               line="56">a #GInputStream or %NULL.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_successful"
              c:identifier="ide_subprocess_get_successful">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_term_sig" c:identifier="ide_subprocess_get_term_sig">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_signal" c:identifier="ide_subprocess_send_signal">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="signal_num" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_signal_upon_cancel"
              c:identifier="ide_subprocess_send_signal_upon_cancel">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="signal_num" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait" c:identifier="ide_subprocess_wait" throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_async" c:identifier="ide_subprocess_wait_async">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_check"
              c:identifier="ide_subprocess_wait_check"
              throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_check_async"
              c:identifier="ide_subprocess_wait_check_async">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_check_finish"
              c:identifier="ide_subprocess_wait_check_finish"
              throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_finish"
              c:identifier="ide_subprocess_wait_finish"
              throws="1">
        <source-position filename="src/libide/threading/ide-subprocess.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SubprocessInterface"
            c:type="IdeSubprocessInterface"
            glib:is-gtype-struct-for="Subprocess">
      <source-position filename="src/libide/threading/ide-subprocess.h"
                       line="96"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_identifier">
        <callback name="get_identifier">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdout_pipe">
        <callback name="get_stdout_pipe">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="56">a #GInputStream or %NULL.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stderr_pipe">
        <callback name="get_stderr_pipe">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="69">a #GInputStream or %NULL.</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_stdin_pipe">
        <callback name="get_stdin_pipe">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="82">a #GOutputStream or %NULL.</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wait">
        <callback name="wait" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wait_async">
        <callback name="wait_async">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="wait_finish">
        <callback name="wait_finish" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_successful">
        <callback name="get_successful">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_if_exited">
        <callback name="get_if_exited">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_exit_status">
        <callback name="get_exit_status">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_if_signaled">
        <callback name="get_if_signaled">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="58"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_term_sig">
        <callback name="get_term_sig">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_status">
        <callback name="get_status">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="send_signal">
        <callback name="send_signal">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="signal_num" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="force_exit">
        <callback name="force_exit">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate">
        <callback name="communicate" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="stdout_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
            <parameter name="stderr_buf" transfer-ownership="none">
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_utf8">
        <callback name="communicate_utf8" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="312">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="304">an #IdeSubprocess</doc>
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="305">input to deliver to the subprocesses stdin stream</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="306">an optional #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="stdout_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="307">an optional location for the stdout contents</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="stderr_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       nullable="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="308">an optional location for the stderr contents</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_async">
        <callback name="communicate_async">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="330">An #IdeSubprocess</doc>
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="331">a #GBytes to send to stdin or %NULL</doc>
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="332">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="333">A callback to complete the request</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="334">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_finish">
        <callback name="communicate_finish" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="81"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="368">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="360">An #IdeSubprocess</doc>
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="361">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="stdout_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="362">A location for a #Bytes.</doc>
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
            <parameter name="stderr_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="363">A location for a #Bytes.</doc>
              <type name="GLib.Bytes" c:type="GBytes**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_utf8_async">
        <callback name="communicate_utf8_async">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="86"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="stdin_buf"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="385">The data to send to stdin or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="communicate_utf8_finish">
        <callback name="communicate_utf8_finish" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess.h"
                           line="91"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess.c"
                 line="410">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="404">An #IdeSubprocess</doc>
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="405">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="stdout_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="406">A location for the UTF-8 formatted output string or %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="stderr_buf"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/threading/ide-subprocess.c"
                   line="407">A location for the UTF-8 formatted output string or %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SubprocessLauncher"
           c:symbol-prefix="subprocess_launcher"
           c:type="IdeSubprocessLauncher"
           parent="GObject.Object"
           glib:type-name="IdeSubprocessLauncher"
           glib:get-type="ide_subprocess_launcher_get_type"
           glib:type-struct="SubprocessLauncherClass">
      <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                       line="50"/>
      <constructor name="new" c:identifier="ide_subprocess_launcher_new">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="53"/>
        <return-value transfer-ownership="full">
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="spawn" invoker="spawn" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="666">Synchronously spawn a process using the internal state.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess-launcher.c"
               line="671">an #IdeSubprocess or %NULL upon error.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="append_path"
              c:identifier="ide_subprocess_launcher_append_path">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="append_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arg" c:identifier="ide_subprocess_launcher_get_arg">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="pos" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_argv" c:identifier="ide_subprocess_launcher_get_argv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_clear_env"
              c:identifier="ide_subprocess_launcher_get_clear_env">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cwd"
              c:identifier="ide_subprocess_launcher_get_cwd"
              glib:get-property="cwd">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_environ"
              c:identifier="ide_subprocess_launcher_get_environ"
              glib:get-property="environ">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="ide_subprocess_launcher_get_flags"
              glib:get-property="flags">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_fd"
              c:identifier="ide_subprocess_launcher_get_max_fd">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="1053">Gets the hightest number of FD that has been mapped into the
subprocess launcher.

This will always return a value &gt;= 2 (to indicate stdin/stdout/stderr).</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess-launcher.c"
               line="1062">an integer for the max-fd</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="1055">a #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_tty"
              c:identifier="ide_subprocess_launcher_get_needs_tty">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="148"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_on_host"
              c:identifier="ide_subprocess_launcher_get_run_on_host"
              glib:get-property="run-on-host">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="781">Gets if the process should be executed on the host system. This might be
useful for situations where running in a contained environment is not
sufficient to perform the given task.

Currently, only flatpak is supported for breaking out of the containment
zone and requires the application was built with --allow=devel.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess-launcher.c"
               line="791">%TRUE if the process should be executed outside the containment zone.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="getenv" c:identifier="ide_subprocess_launcher_getenv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_argv"
              c:identifier="ide_subprocess_launcher_insert_argv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="join_args_for_sh_c"
              c:identifier="ide_subprocess_launcher_join_args_for_sh_c">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="start_pos" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="overlay_environment"
              c:identifier="ide_subprocess_launcher_overlay_environment">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="environment" transfer-ownership="none">
            <type name="Environment" c:type="IdeEnvironment*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pop_argv" c:identifier="ide_subprocess_launcher_pop_argv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="123"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepend_path"
              c:identifier="ide_subprocess_launcher_prepend_path">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="prepend_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_args"
              c:identifier="ide_subprocess_launcher_push_args">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="738">This function is semantically identical to calling ide_subprocess_launcher_push_argv()
for each element of @args.

If @args is %NULL, this function does nothing.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="740">an #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="args"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="741">the arguments</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="push_argv"
              c:identifier="ide_subprocess_launcher_push_argv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_argv_format"
              c:identifier="ide_subprocess_launcher_push_argv_format"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="1117">Convenience function which allows combining a g_strdup_printf() and
call to ide_subprocess_launcher_push_argv() into one call.

@format is used to build the argument string which is added using
ide_subprocess_launcher_push_argv() and then freed.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="1119">a #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="1120">a printf-style format string</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="push_argv_parsed"
              c:identifier="ide_subprocess_launcher_push_argv_parsed">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="args_to_parse" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_argv"
              c:identifier="ide_subprocess_launcher_replace_argv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_argv" c:identifier="ide_subprocess_launcher_set_argv">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="885">Clears the previous arguments and copies @args as the new argument array for
the subprocess.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="887">an #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="888">a
  %NULL terminated array of strings.</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_clear_env"
              c:identifier="ide_subprocess_launcher_set_clear_env">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="clear_env" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_cwd"
              c:identifier="ide_subprocess_launcher_set_cwd"
              glib:set-property="cwd">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cwd" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_environ"
              c:identifier="ide_subprocess_launcher_set_environ"
              glib:set-property="environ">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="596">Replace the environment variables by a new list of variables.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="598">an #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="environ_"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="599">the list
of environment variables to set</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="ide_subprocess_launcher_set_flags"
              glib:set-property="flags">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="Gio.SubprocessFlags" c:type="GSubprocessFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_run_on_host"
              c:identifier="ide_subprocess_launcher_set_run_on_host"
              glib:set-property="run-on-host">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="803">Sets the #IdeSubprocessLauncher:run-on-host property. See
ide_subprocess_launcher_get_run_on_host() for more information.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="run_on_host" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_setup_tty"
              c:identifier="ide_subprocess_launcher_set_setup_tty">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="1167">Requests the controlling TTY be set on the subprocess.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="1169">a #IdeSubprocessLauncher</doc>
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="setup_tty" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="1170">if TTY should be prepared in subprocess</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stdout_file_path"
              c:identifier="ide_subprocess_launcher_set_stdout_file_path">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stdout_file_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setenv" c:identifier="ide_subprocess_launcher_setenv">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="replace" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn"
              c:identifier="ide_subprocess_launcher_spawn"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-launcher.c"
             line="666">Synchronously spawn a process using the internal state.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess-launcher.c"
               line="671">an #IdeSubprocess or %NULL upon error.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_fd" c:identifier="ide_subprocess_launcher_take_fd">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="source_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_stderr_fd"
              c:identifier="ide_subprocess_launcher_take_stderr_fd">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stderr_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_stdin_fd"
              c:identifier="ide_subprocess_launcher_take_stdin_fd">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stdin_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_stdout_fd"
              c:identifier="ide_subprocess_launcher_take_stdout_fd">
        <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </instance-parameter>
          <parameter name="stdout_fd" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="clean-env"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cwd"
                writable="1"
                transfer-ownership="none"
                setter="set_cwd"
                getter="get_cwd"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="environ"
                writable="1"
                transfer-ownership="none"
                setter="set_environ"
                getter="get_environ">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="flags"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="G_SUBPROCESS_FLAGS_NONE">
        <type name="Gio.SubprocessFlags"/>
      </property>
      <property name="run-on-host"
                writable="1"
                transfer-ownership="none"
                setter="set_run_on_host"
                getter="get_run_on_host"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SubprocessLauncherClass"
            c:type="IdeSubprocessLauncherClass"
            glib:is-gtype-struct-for="SubprocessLauncher">
      <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                       line="50"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="spawn">
        <callback name="spawn" throws="1">
          <source-position filename="src/libide/threading/ide-subprocess-launcher.h"
                           line="44"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-launcher.c"
                 line="671">an #IdeSubprocess or %NULL upon error.</doc>
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SubprocessSupervisor"
           c:symbol-prefix="subprocess_supervisor"
           c:type="IdeSubprocessSupervisor"
           parent="GObject.Object"
           glib:type-name="IdeSubprocessSupervisor"
           glib:get-type="ide_subprocess_supervisor_get_type"
           glib:type-struct="SubprocessSupervisorClass">
      <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                       line="48"/>
      <constructor name="new" c:identifier="ide_subprocess_supervisor_new">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="51"/>
        <return-value transfer-ownership="full">
          <type name="SubprocessSupervisor" c:type="IdeSubprocessSupervisor*"/>
        </return-value>
      </constructor>
      <virtual-method name="spawned">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
          <parameter name="subprocess" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_launcher"
              c:identifier="ide_subprocess_supervisor_get_launcher">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess-supervisor.c"
               line="215">An #IdeSubprocessLauncher or %NULL.</doc>
          <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subprocess"
              c:identifier="ide_subprocess_supervisor_get_subprocess">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-subprocess-supervisor.c"
             line="336">Gets the current #IdeSubprocess that is being supervised. This might be
%NULL if the ide_subprocess_supervisor_start() has not yet been
called or if there was a failure to spawn the process.</doc>
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-subprocess-supervisor.c"
               line="344">An #IdeSubprocess or %NULL.</doc>
          <type name="Subprocess" c:type="IdeSubprocess*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-subprocess-supervisor.c"
                 line="338">An #IdeSubprocessSupervisor</doc>
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_launcher"
              c:identifier="ide_subprocess_supervisor_set_launcher">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
          <parameter name="launcher" transfer-ownership="none">
            <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subprocess"
              c:identifier="ide_subprocess_supervisor_set_subprocess">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
          <parameter name="subprocess" transfer-ownership="none">
            <type name="Subprocess" c:type="IdeSubprocess*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="ide_subprocess_supervisor_start">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="ide_subprocess_supervisor_stop">
        <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SubprocessSupervisor"
                  c:type="IdeSubprocessSupervisor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="exited" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Subprocess"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="spawned" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Subprocess"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="supervise" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SubprocessLauncher"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="unsupervise" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="SubprocessLauncher"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SubprocessSupervisorClass"
            c:type="IdeSubprocessSupervisorClass"
            glib:is-gtype-struct-for="SubprocessSupervisor">
      <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                       line="48"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="spawned">
        <callback name="spawned">
          <source-position filename="src/libide/threading/ide-subprocess-supervisor.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SubprocessSupervisor"
                    c:type="IdeSubprocessSupervisor*"/>
            </parameter>
            <parameter name="subprocess" transfer-ownership="none">
              <type name="Subprocess" c:type="IdeSubprocess*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Symbol"
           c:symbol-prefix="symbol"
           c:type="IdeSymbol"
           parent="GObject.Object"
           glib:type-name="IdeSymbol"
           glib:get-type="ide_symbol_get_type"
           glib:type-struct="SymbolClass">
      <source-position filename="src/libide/code/ide-symbol.h" line="111"/>
      <constructor name="new" c:identifier="ide_symbol_new">
        <source-position filename="src/libide/code/ide-symbol.h" line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol.c"
               line="551">an #IdeSymbol</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="SymbolKind" c:type="IdeSymbolKind"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
          </parameter>
          <parameter name="location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="header_location"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_symbol_new_from_variant">
        <source-position filename="src/libide/code/ide-symbol.h" line="130"/>
        <return-value transfer-ownership="full">
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <parameter name="variant" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_flags"
              c:identifier="ide_symbol_get_flags"
              glib:get-property="flags">
        <source-position filename="src/libide/code/ide-symbol.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header_location"
              c:identifier="ide_symbol_get_header_location"
              glib:get-property="header-location">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol.c"
             line="238">Gets the header location, if any.</doc>
        <source-position filename="src/libide/code/ide-symbol.h" line="128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol.c"
               line="244">an #IdeLocation or %NULL</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol.c"
                 line="240">a #IdeSymbol</doc>
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="ide_symbol_get_kind"
              glib:get-property="kind">
        <source-position filename="src/libide/code/ide-symbol.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="ide_symbol_get_location"
              glib:get-property="location">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol.c"
             line="220">Gets the location, if any.</doc>
        <source-position filename="src/libide/code/ide-symbol.h" line="126"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol.c"
               line="226">an #IdeLocation or %NULL</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol.c"
                 line="222">a #IdeSymbol</doc>
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_symbol_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/code/ide-symbol.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_symbol_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol.c"
             line="459">This converts the symbol to a #GVariant that is suitable for passing
across an IPC boundary.

This function will never return a floating reference.</doc>
        <source-position filename="src/libide/code/ide-symbol.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol.c"
               line="468">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol.c"
                 line="461">a #IdeSymbol</doc>
            <type name="Symbol" c:type="IdeSymbol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_flags"
                default-value="IDE_SYMBOL_FLAGS_NONE">
        <type name="SymbolFlags"/>
      </property>
      <property name="header-location"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_header_location">
        <type name="Location"/>
      </property>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_kind"
                default-value="IDE_SYMBOL_KIND_NONE">
        <type name="SymbolKind"/>
      </property>
      <property name="location"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_location">
        <type name="Location"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SymbolClass"
            c:type="IdeSymbolClass"
            glib:is-gtype-struct-for="Symbol">
      <source-position filename="src/libide/code/ide-symbol.h" line="111"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="SymbolFlags"
              glib:type-name="IdeSymbolFlags"
              glib:get-type="ide_symbol_flags_get_type"
              c:type="IdeSymbolFlags">
      <member name="none"
              value="0"
              c:identifier="IDE_SYMBOL_FLAGS_NONE"
              glib:nick="none"
              glib:name="IDE_SYMBOL_FLAGS_NONE">
      </member>
      <member name="is_static"
              value="1"
              c:identifier="IDE_SYMBOL_FLAGS_IS_STATIC"
              glib:nick="is-static"
              glib:name="IDE_SYMBOL_FLAGS_IS_STATIC">
      </member>
      <member name="is_member"
              value="2"
              c:identifier="IDE_SYMBOL_FLAGS_IS_MEMBER"
              glib:nick="is-member"
              glib:name="IDE_SYMBOL_FLAGS_IS_MEMBER">
      </member>
      <member name="is_deprecated"
              value="4"
              c:identifier="IDE_SYMBOL_FLAGS_IS_DEPRECATED"
              glib:nick="is-deprecated"
              glib:name="IDE_SYMBOL_FLAGS_IS_DEPRECATED">
      </member>
      <member name="is_definition"
              value="8"
              c:identifier="IDE_SYMBOL_FLAGS_IS_DEFINITION"
              glib:nick="is-definition"
              glib:name="IDE_SYMBOL_FLAGS_IS_DEFINITION">
      </member>
    </bitfield>
    <enumeration name="SymbolKind"
                 glib:type-name="IdeSymbolKind"
                 glib:get-type="ide_symbol_kind_get_type"
                 c:type="IdeSymbolKind">
      <member name="none"
              value="0"
              c:identifier="IDE_SYMBOL_KIND_NONE"
              glib:nick="none"
              glib:name="IDE_SYMBOL_KIND_NONE">
      </member>
      <member name="alias"
              value="1"
              c:identifier="IDE_SYMBOL_KIND_ALIAS"
              glib:nick="alias"
              glib:name="IDE_SYMBOL_KIND_ALIAS">
      </member>
      <member name="array"
              value="2"
              c:identifier="IDE_SYMBOL_KIND_ARRAY"
              glib:nick="array"
              glib:name="IDE_SYMBOL_KIND_ARRAY">
      </member>
      <member name="boolean"
              value="3"
              c:identifier="IDE_SYMBOL_KIND_BOOLEAN"
              glib:nick="boolean"
              glib:name="IDE_SYMBOL_KIND_BOOLEAN">
      </member>
      <member name="class"
              value="4"
              c:identifier="IDE_SYMBOL_KIND_CLASS"
              glib:nick="class"
              glib:name="IDE_SYMBOL_KIND_CLASS">
      </member>
      <member name="constant"
              value="5"
              c:identifier="IDE_SYMBOL_KIND_CONSTANT"
              glib:nick="constant"
              glib:name="IDE_SYMBOL_KIND_CONSTANT">
      </member>
      <member name="constructor"
              value="6"
              c:identifier="IDE_SYMBOL_KIND_CONSTRUCTOR"
              glib:nick="constructor"
              glib:name="IDE_SYMBOL_KIND_CONSTRUCTOR">
      </member>
      <member name="enum"
              value="7"
              c:identifier="IDE_SYMBOL_KIND_ENUM"
              glib:nick="enum"
              glib:name="IDE_SYMBOL_KIND_ENUM">
      </member>
      <member name="enum_value"
              value="8"
              c:identifier="IDE_SYMBOL_KIND_ENUM_VALUE"
              glib:nick="enum-value"
              glib:name="IDE_SYMBOL_KIND_ENUM_VALUE">
      </member>
      <member name="field"
              value="9"
              c:identifier="IDE_SYMBOL_KIND_FIELD"
              glib:nick="field"
              glib:name="IDE_SYMBOL_KIND_FIELD">
      </member>
      <member name="file"
              value="10"
              c:identifier="IDE_SYMBOL_KIND_FILE"
              glib:nick="file"
              glib:name="IDE_SYMBOL_KIND_FILE">
      </member>
      <member name="function"
              value="11"
              c:identifier="IDE_SYMBOL_KIND_FUNCTION"
              glib:nick="function"
              glib:name="IDE_SYMBOL_KIND_FUNCTION">
      </member>
      <member name="header"
              value="12"
              c:identifier="IDE_SYMBOL_KIND_HEADER"
              glib:nick="header"
              glib:name="IDE_SYMBOL_KIND_HEADER">
      </member>
      <member name="interface"
              value="13"
              c:identifier="IDE_SYMBOL_KIND_INTERFACE"
              glib:nick="interface"
              glib:name="IDE_SYMBOL_KIND_INTERFACE">
      </member>
      <member name="macro"
              value="14"
              c:identifier="IDE_SYMBOL_KIND_MACRO"
              glib:nick="macro"
              glib:name="IDE_SYMBOL_KIND_MACRO">
      </member>
      <member name="method"
              value="15"
              c:identifier="IDE_SYMBOL_KIND_METHOD"
              glib:nick="method"
              glib:name="IDE_SYMBOL_KIND_METHOD">
      </member>
      <member name="module"
              value="16"
              c:identifier="IDE_SYMBOL_KIND_MODULE"
              glib:nick="module"
              glib:name="IDE_SYMBOL_KIND_MODULE">
      </member>
      <member name="namespace"
              value="17"
              c:identifier="IDE_SYMBOL_KIND_NAMESPACE"
              glib:nick="namespace"
              glib:name="IDE_SYMBOL_KIND_NAMESPACE">
      </member>
      <member name="number"
              value="18"
              c:identifier="IDE_SYMBOL_KIND_NUMBER"
              glib:nick="number"
              glib:name="IDE_SYMBOL_KIND_NUMBER">
      </member>
      <member name="package"
              value="19"
              c:identifier="IDE_SYMBOL_KIND_PACKAGE"
              glib:nick="package"
              glib:name="IDE_SYMBOL_KIND_PACKAGE">
      </member>
      <member name="property"
              value="20"
              c:identifier="IDE_SYMBOL_KIND_PROPERTY"
              glib:nick="property"
              glib:name="IDE_SYMBOL_KIND_PROPERTY">
      </member>
      <member name="scalar"
              value="21"
              c:identifier="IDE_SYMBOL_KIND_SCALAR"
              glib:nick="scalar"
              glib:name="IDE_SYMBOL_KIND_SCALAR">
      </member>
      <member name="string"
              value="22"
              c:identifier="IDE_SYMBOL_KIND_STRING"
              glib:nick="string"
              glib:name="IDE_SYMBOL_KIND_STRING">
      </member>
      <member name="struct"
              value="23"
              c:identifier="IDE_SYMBOL_KIND_STRUCT"
              glib:nick="struct"
              glib:name="IDE_SYMBOL_KIND_STRUCT">
      </member>
      <member name="template"
              value="24"
              c:identifier="IDE_SYMBOL_KIND_TEMPLATE"
              glib:nick="template"
              glib:name="IDE_SYMBOL_KIND_TEMPLATE">
      </member>
      <member name="union"
              value="25"
              c:identifier="IDE_SYMBOL_KIND_UNION"
              glib:nick="union"
              glib:name="IDE_SYMBOL_KIND_UNION">
      </member>
      <member name="variable"
              value="26"
              c:identifier="IDE_SYMBOL_KIND_VARIABLE"
              glib:nick="variable"
              glib:name="IDE_SYMBOL_KIND_VARIABLE">
      </member>
      <member name="keyword"
              value="27"
              c:identifier="IDE_SYMBOL_KIND_KEYWORD"
              glib:nick="keyword"
              glib:name="IDE_SYMBOL_KIND_KEYWORD">
      </member>
      <member name="ui_attributes"
              value="28"
              c:identifier="IDE_SYMBOL_KIND_UI_ATTRIBUTES"
              glib:nick="ui-attributes"
              glib:name="IDE_SYMBOL_KIND_UI_ATTRIBUTES">
      </member>
      <member name="ui_child"
              value="29"
              c:identifier="IDE_SYMBOL_KIND_UI_CHILD"
              glib:nick="ui-child"
              glib:name="IDE_SYMBOL_KIND_UI_CHILD">
      </member>
      <member name="ui_item"
              value="30"
              c:identifier="IDE_SYMBOL_KIND_UI_ITEM"
              glib:nick="ui-item"
              glib:name="IDE_SYMBOL_KIND_UI_ITEM">
      </member>
      <member name="ui_menu"
              value="31"
              c:identifier="IDE_SYMBOL_KIND_UI_MENU"
              glib:nick="ui-menu"
              glib:name="IDE_SYMBOL_KIND_UI_MENU">
      </member>
      <member name="ui_menu_attribute"
              value="32"
              c:identifier="IDE_SYMBOL_KIND_UI_MENU_ATTRIBUTE"
              glib:nick="ui-menu-attribute"
              glib:name="IDE_SYMBOL_KIND_UI_MENU_ATTRIBUTE">
      </member>
      <member name="ui_object"
              value="33"
              c:identifier="IDE_SYMBOL_KIND_UI_OBJECT"
              glib:nick="ui-object"
              glib:name="IDE_SYMBOL_KIND_UI_OBJECT">
      </member>
      <member name="ui_packing"
              value="34"
              c:identifier="IDE_SYMBOL_KIND_UI_PACKING"
              glib:nick="ui-packing"
              glib:name="IDE_SYMBOL_KIND_UI_PACKING">
      </member>
      <member name="ui_property"
              value="35"
              c:identifier="IDE_SYMBOL_KIND_UI_PROPERTY"
              glib:nick="ui-property"
              glib:name="IDE_SYMBOL_KIND_UI_PROPERTY">
      </member>
      <member name="ui_section"
              value="36"
              c:identifier="IDE_SYMBOL_KIND_UI_SECTION"
              glib:nick="ui-section"
              glib:name="IDE_SYMBOL_KIND_UI_SECTION">
      </member>
      <member name="ui_signal"
              value="37"
              c:identifier="IDE_SYMBOL_KIND_UI_SIGNAL"
              glib:nick="ui-signal"
              glib:name="IDE_SYMBOL_KIND_UI_SIGNAL">
      </member>
      <member name="ui_style"
              value="38"
              c:identifier="IDE_SYMBOL_KIND_UI_STYLE"
              glib:nick="ui-style"
              glib:name="IDE_SYMBOL_KIND_UI_STYLE">
      </member>
      <member name="ui_style_class"
              value="39"
              c:identifier="IDE_SYMBOL_KIND_UI_STYLE_CLASS"
              glib:nick="ui-style-class"
              glib:name="IDE_SYMBOL_KIND_UI_STYLE_CLASS">
      </member>
      <member name="ui_submenu"
              value="40"
              c:identifier="IDE_SYMBOL_KIND_UI_SUBMENU"
              glib:nick="ui-submenu"
              glib:name="IDE_SYMBOL_KIND_UI_SUBMENU">
      </member>
      <member name="ui_template"
              value="41"
              c:identifier="IDE_SYMBOL_KIND_UI_TEMPLATE"
              glib:nick="ui-template"
              glib:name="IDE_SYMBOL_KIND_UI_TEMPLATE">
      </member>
      <member name="xml_attribute"
              value="42"
              c:identifier="IDE_SYMBOL_KIND_XML_ATTRIBUTE"
              glib:nick="xml-attribute"
              glib:name="IDE_SYMBOL_KIND_XML_ATTRIBUTE">
      </member>
      <member name="xml_declaration"
              value="43"
              c:identifier="IDE_SYMBOL_KIND_XML_DECLARATION"
              glib:nick="xml-declaration"
              glib:name="IDE_SYMBOL_KIND_XML_DECLARATION">
      </member>
      <member name="xml_element"
              value="44"
              c:identifier="IDE_SYMBOL_KIND_XML_ELEMENT"
              glib:nick="xml-element"
              glib:name="IDE_SYMBOL_KIND_XML_ELEMENT">
      </member>
      <member name="xml_comment"
              value="45"
              c:identifier="IDE_SYMBOL_KIND_XML_COMMENT"
              glib:nick="xml-comment"
              glib:name="IDE_SYMBOL_KIND_XML_COMMENT">
      </member>
      <member name="xml_cdata"
              value="46"
              c:identifier="IDE_SYMBOL_KIND_XML_CDATA"
              glib:nick="xml-cdata"
              glib:name="IDE_SYMBOL_KIND_XML_CDATA">
      </member>
      <member name="object"
              value="47"
              c:identifier="IDE_SYMBOL_KIND_OBJECT"
              glib:nick="object"
              glib:name="IDE_SYMBOL_KIND_OBJECT">
      </member>
      <member name="event"
              value="48"
              c:identifier="IDE_SYMBOL_KIND_EVENT"
              glib:nick="event"
              glib:name="IDE_SYMBOL_KIND_EVENT">
      </member>
      <member name="operator"
              value="49"
              c:identifier="IDE_SYMBOL_KIND_OPERATOR"
              glib:nick="operator"
              glib:name="IDE_SYMBOL_KIND_OPERATOR">
      </member>
      <member name="type_param"
              value="50"
              c:identifier="IDE_SYMBOL_KIND_TYPE_PARAM"
              glib:nick="type-param"
              glib:name="IDE_SYMBOL_KIND_TYPE_PARAM">
      </member>
      <member name="last"
              value="51"
              c:identifier="IDE_SYMBOL_KIND_LAST"
              glib:nick="last"
              glib:name="IDE_SYMBOL_KIND_LAST">
      </member>
      <function name="get_gicon" c:identifier="ide_symbol_kind_get_gicon">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol.c"
             line="422">Gets a #GIcon to represent the symbol kind.

You may only call this from the main (GTK) thread.</doc>
        <source-position filename="src/libide/code/ide-symbol.h" line="136"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol.c"
               line="430">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol.c"
                 line="424">a #IdeSymbolKind</doc>
            <type name="SymbolKind" c:type="IdeSymbolKind"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_icon_name"
                c:identifier="ide_symbol_kind_get_icon_name">
        <source-position filename="src/libide/code/ide-symbol.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <type name="SymbolKind" c:type="IdeSymbolKind"/>
          </parameter>
        </parameters>
      </function>
    </enumeration>
    <class name="SymbolNode"
           c:symbol-prefix="symbol_node"
           c:type="IdeSymbolNode"
           parent="GObject.Object"
           glib:type-name="IdeSymbolNode"
           glib:get-type="ide_symbol_node_get_type"
           glib:type-struct="SymbolNodeClass">
      <source-position filename="src/libide/code/ide-symbol-node.h" line="53"/>
      <virtual-method name="get_location_async" invoker="get_location_async">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_location_finish"
                      invoker="get_location_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-node.c"
             line="312">Completes the request to gets the location for the symbol node.</doc>
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-node.c"
               line="317">An #IdeLocation or %NULL.</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_flags"
              c:identifier="ide_symbol_node_get_flags"
              glib:get-property="flags">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="SymbolFlags" c:type="IdeSymbolFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gicon" c:identifier="ide_symbol_node_get_gicon">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-node.c"
             line="87">Gets a #GIcon for the symbol node.</doc>
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="64"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-node.c"
               line="93">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-node.c"
                 line="89">a #IdeSymbolNode</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_symbol_node_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind"
              c:identifier="ide_symbol_node_get_kind"
              glib:get-property="kind">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location_async"
              c:identifier="ide_symbol_node_get_location_async">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location_finish"
              c:identifier="ide_symbol_node_get_location_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-node.c"
             line="312">Completes the request to gets the location for the symbol node.</doc>
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-node.c"
               line="317">An #IdeLocation or %NULL.</doc>
          <type name="Location" c:type="IdeLocation*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_symbol_node_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="ide_symbol_node_get_use_markup"
              glib:get-property="use-markup">
        <source-position filename="src/libide/code/ide-symbol-node.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags"
                writable="1"
                transfer-ownership="none"
                getter="get_flags"
                default-value="IDE_SYMBOL_FLAGS_NONE">
        <type name="SymbolFlags"/>
      </property>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kind"
                writable="1"
                transfer-ownership="none"
                getter="get_kind"
                default-value="IDE_SYMBOL_KIND_NONE">
        <type name="SymbolKind"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-markup"
                writable="1"
                transfer-ownership="none"
                getter="get_use_markup"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="SymbolNodeClass"
            c:type="IdeSymbolNodeClass"
            glib:is-gtype-struct-for="SymbolNode">
      <source-position filename="src/libide/code/ide-symbol-node.h" line="53"/>
      <field name="parent">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_location_async">
        <callback name="get_location_async">
          <source-position filename="src/libide/code/ide-symbol-node.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_location_finish">
        <callback name="get_location_finish" throws="1">
          <source-position filename="src/libide/code/ide-symbol-node.h"
                           line="47"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-node.c"
                 line="317">An #IdeLocation or %NULL.</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <interface name="SymbolResolver"
               c:symbol-prefix="symbol_resolver"
               c:type="IdeSymbolResolver"
               glib:type-name="IdeSymbolResolver"
               glib:get-type="ide_symbol_resolver_get_type"
               glib:type-struct="SymbolResolverInterface">
      <source-position filename="src/libide/code/ide-symbol-resolver.h"
                       line="78"/>
      <prerequisite name="Object"/>
      <virtual-method name="find_nearest_scope_async"
                      invoker="find_nearest_scope_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="354">This function asynchronously requests to locate the containing
scope for a given source location.

See ide_symbol_resolver_find_nearest_scope_finish() for how to
complete the operation.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="356">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="357">an #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="358">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="359">an async callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="360">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="find_nearest_scope_finish"
                      invoker="find_nearest_scope_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="382">This function completes an asynchronous operation to locate the containing
scope for a given source location.

See ide_symbol_resolver_find_nearest_scope_async() for more information.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="75"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="393">An #IdeSymbol or %NULL</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="384">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="385">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="find_references_async"
                      invoker="find_references_async">
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="309">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="310">an #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="language_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="311">a language identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="312">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="313">a callback to execute</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="314">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="find_references_finish"
                      invoker="find_references_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="332">Completes an asynchronous request to ide_symbol_resolver_find_references_async().</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="340">a #GPtrArray
  of #IdeRange if successful; otherwise %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Range"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="334">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="335">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symbol_tree_async"
                      invoker="get_symbol_tree_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="232">Asynchronously fetch an up to date symbol tree for @file.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="234">An #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="235">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="236">a #GBytes or %NULL</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="237">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="238">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="239">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_symbol_tree_finish"
                      invoker="get_symbol_tree_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="263">Completes an asynchronous request to get the symbol tree for the
requested file.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="58"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="269">An #IdeSymbolTree; otherwise
  %NULL and @error is set.</doc>
          <type name="SymbolTree" c:type="IdeSymbolTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lookup_symbol_async" invoker="lookup_symbol_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="172">Asynchronously requests that @self determine the symbol existing at the source location
denoted by @self. @callback should call ide_symbol_resolver_lookup_symbol_finish() to
retrieve the result.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="174">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="175">An #IdeLocation.</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="176">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="177">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="178">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lookup_symbol_finish"
                      invoker="lookup_symbol_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="204">Completes an asynchronous call to lookup a symbol using
ide_symbol_resolver_lookup_symbol_async().</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="49"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="213">An #IdeSymbol if successful; otherwise %NULL.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="206">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="207">a #GAsyncResult provided to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="find_nearest_scope_async"
              c:identifier="ide_symbol_resolver_find_nearest_scope_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="354">This function asynchronously requests to locate the containing
scope for a given source location.

See ide_symbol_resolver_find_nearest_scope_finish() for how to
complete the operation.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="356">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="357">an #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="358">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="359">an async callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="360">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_nearest_scope_finish"
              c:identifier="ide_symbol_resolver_find_nearest_scope_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="382">This function completes an asynchronous operation to locate the containing
scope for a given source location.

See ide_symbol_resolver_find_nearest_scope_async() for more information.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="123"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="393">An #IdeSymbol or %NULL</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="384">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="385">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_references_async"
              c:identifier="ide_symbol_resolver_find_references_async">
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="309">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="310">an #IdeLocation</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="language_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="311">a language identifier or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="312">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="313">a callback to execute</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="314">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_references_finish"
              c:identifier="ide_symbol_resolver_find_references_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="332">Completes an asynchronous request to ide_symbol_resolver_find_references_async().</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="340">a #GPtrArray
  of #IdeRange if successful; otherwise %NULL and @error is set.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Range"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="334">a #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="335">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_tree_async"
              c:identifier="ide_symbol_resolver_get_symbol_tree_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="232">Asynchronously fetch an up to date symbol tree for @file.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="234">An #IdeSymbolResolver</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="235">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="contents"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="236">a #GBytes or %NULL</doc>
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="237">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="238">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="239">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_symbol_tree_finish"
              c:identifier="ide_symbol_resolver_get_symbol_tree_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="263">Completes an asynchronous request to get the symbol tree for the
requested file.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="102"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="269">An #IdeSymbolTree; otherwise
  %NULL and @error is set.</doc>
          <type name="SymbolTree" c:type="IdeSymbolTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_symbol_resolver_load">
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_symbol_async"
              c:identifier="ide_symbol_resolver_lookup_symbol_async">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="172">Asynchronously requests that @self determine the symbol existing at the source location
denoted by @self. @callback should call ide_symbol_resolver_lookup_symbol_finish() to
retrieve the result.</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="174">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="175">An #IdeLocation.</doc>
            <type name="Location" c:type="IdeLocation*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="176">a #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="177">A callback to execute upon completion.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="178">user data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_symbol_finish"
              c:identifier="ide_symbol_resolver_lookup_symbol_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-resolver.c"
             line="204">Completes an asynchronous call to lookup a symbol using
ide_symbol_resolver_lookup_symbol_async().</doc>
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="91"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-resolver.c"
               line="213">An #IdeSymbol if successful; otherwise %NULL.</doc>
          <type name="Symbol" c:type="IdeSymbol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="206">An #IdeSymbolResolver.</doc>
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="207">a #GAsyncResult provided to the callback.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_symbol_resolver_unload">
        <source-position filename="src/libide/code/ide-symbol-resolver.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="SymbolResolverInterface"
            c:type="IdeSymbolResolverInterface"
            glib:is-gtype-struct-for="SymbolResolver">
      <source-position filename="src/libide/code/ide-symbol-resolver.h"
                       line="78"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lookup_symbol_async">
        <callback name="lookup_symbol_async">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="174">An #IdeSymbolResolver.</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="175">An #IdeLocation.</doc>
              <type name="Location" c:type="IdeLocation*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="176">a #GCancellable or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="177">A callback to execute upon completion.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="178">user data for @callback.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lookup_symbol_finish">
        <callback name="lookup_symbol_finish" throws="1">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="49"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="213">An #IdeSymbol if successful; otherwise %NULL.</doc>
            <type name="Symbol" c:type="IdeSymbol*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="206">An #IdeSymbolResolver.</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="207">a #GAsyncResult provided to the callback.</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symbol_tree_async">
        <callback name="get_symbol_tree_async">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="234">An #IdeSymbolResolver</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="235">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="contents"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="236">a #GBytes or %NULL</doc>
              <type name="GLib.Bytes" c:type="GBytes*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="237">a #GCancellable or %NULL.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="238">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="239">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_symbol_tree_finish">
        <callback name="get_symbol_tree_finish" throws="1">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="58"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="269">An #IdeSymbolTree; otherwise
  %NULL and @error is set.</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="find_references_async">
        <callback name="find_references_async">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="309">a #IdeSymbolResolver</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="310">an #IdeLocation</doc>
              <type name="Location" c:type="IdeLocation*"/>
            </parameter>
            <parameter name="language_id"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="311">a language identifier or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="312">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="313">a callback to execute</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="314">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="find_references_finish">
        <callback name="find_references_finish" throws="1">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="67"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="340">a #GPtrArray
  of #IdeRange if successful; otherwise %NULL and @error is set.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Range"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="334">a #IdeSymbolResolver</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="335">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="find_nearest_scope_async">
        <callback name="find_nearest_scope_async">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="356">a #IdeSymbolResolver</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="location" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="357">an #IdeLocation</doc>
              <type name="Location" c:type="IdeLocation*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="358">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="359">an async callback</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="360">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="find_nearest_scope_finish">
        <callback name="find_nearest_scope_finish" throws="1">
          <source-position filename="src/libide/code/ide-symbol-resolver.h"
                           line="75"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-resolver.c"
                 line="393">An #IdeSymbol or %NULL</doc>
            <type name="Symbol" c:type="IdeSymbol*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="384">a #IdeSymbolResolver</doc>
              <type name="SymbolResolver" c:type="IdeSymbolResolver*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-resolver.c"
                   line="385">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="SymbolTree"
               c:symbol-prefix="symbol_tree"
               c:type="IdeSymbolTree"
               glib:type-name="IdeSymbolTree"
               glib:get-type="ide_symbol_tree_get_type"
               glib:type-struct="SymbolTreeInterface">
      <source-position filename="src/libide/code/ide-symbol-tree.h" line="47"/>
      <virtual-method name="get_n_children" invoker="get_n_children">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-tree.c"
             line="35">Get the number of children of @node. If @node is NULL, the root node
is assumed.</doc>
        <source-position filename="src/libide/code/ide-symbol-tree.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-tree.c"
               line="43">An unsigned integer containing the number of children.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="37">An @IdeSymbolTree</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="38">An #IdeSymbolNode or %NULL.</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_nth_child" invoker="get_nth_child">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-tree.c"
             line="55">Gets the @nth child node of @node.</doc>
        <source-position filename="src/libide/code/ide-symbol-tree.h"
                         line="44"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-tree.c"
               line="63">an #IdeSymbolNode or %NULL.</doc>
          <type name="SymbolNode" c:type="IdeSymbolNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="57">An #IdeSymbolTree.</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="58">an #IdeSymboNode</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="59">the nth child to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_n_children"
              c:identifier="ide_symbol_tree_get_n_children">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-tree.c"
             line="35">Get the number of children of @node. If @node is NULL, the root node
is assumed.</doc>
        <source-position filename="src/libide/code/ide-symbol-tree.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-tree.c"
               line="43">An unsigned integer containing the number of children.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="37">An @IdeSymbolTree</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="38">An #IdeSymbolNode or %NULL.</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_nth_child"
              c:identifier="ide_symbol_tree_get_nth_child">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol-tree.c"
             line="55">Gets the @nth child node of @node.</doc>
        <source-position filename="src/libide/code/ide-symbol-tree.h"
                         line="53"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol-tree.c"
               line="63">an #IdeSymbolNode or %NULL.</doc>
          <type name="SymbolNode" c:type="IdeSymbolNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="57">An #IdeSymbolTree.</doc>
            <type name="SymbolTree" c:type="IdeSymbolTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="58">an #IdeSymboNode</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </parameter>
          <parameter name="nth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="59">the nth child to retrieve.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="SymbolTreeInterface"
            c:type="IdeSymbolTreeInterface"
            glib:is-gtype-struct-for="SymbolTree">
      <source-position filename="src/libide/code/ide-symbol-tree.h" line="47"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_n_children">
        <callback name="get_n_children">
          <source-position filename="src/libide/code/ide-symbol-tree.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="43">An unsigned integer containing the number of children.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-tree.c"
                   line="37">An @IdeSymbolTree</doc>
              <type name="SymbolTree" c:type="IdeSymbolTree*"/>
            </parameter>
            <parameter name="node"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-tree.c"
                   line="38">An #IdeSymbolNode or %NULL.</doc>
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_nth_child">
        <callback name="get_nth_child">
          <source-position filename="src/libide/code/ide-symbol-tree.h"
                           line="44"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-symbol-tree.c"
                 line="63">an #IdeSymbolNode or %NULL.</doc>
            <type name="SymbolNode" c:type="IdeSymbolNode*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-tree.c"
                   line="57">An #IdeSymbolTree.</doc>
              <type name="SymbolTree" c:type="IdeSymbolTree*"/>
            </parameter>
            <parameter name="node"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-tree.c"
                   line="58">an #IdeSymboNode</doc>
              <type name="SymbolNode" c:type="IdeSymbolNode*"/>
            </parameter>
            <parameter name="nth" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/code/ide-symbol-tree.c"
                   line="59">the nth child to retrieve.</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <function-macro name="TODO" c:identifier="IDE_TODO" introspectable="0">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-debug.h"
           line="79">Appends to the tracing log that unsupported code has been
reached.</doc>
      <source-position filename="src/libide/core/ide-debug.h" line="115"/>
      <parameters>
        <parameter name="_msg">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-debug.h"
               line="81">the message to append to the trace log</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="TOOLCHAIN_LANGUAGE_ANY"
              value="*"
              c:type="IDE_TOOLCHAIN_LANGUAGE_ANY">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_LANGUAGE_C"
              value="c"
              c:type="IDE_TOOLCHAIN_LANGUAGE_C">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="64"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_LANGUAGE_CPLUSPLUS"
              value="c++"
              c:type="IDE_TOOLCHAIN_LANGUAGE_CPLUSPLUS">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_LANGUAGE_D"
              value="d"
              c:type="IDE_TOOLCHAIN_LANGUAGE_D">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_LANGUAGE_FORTRAN"
              value="fortran"
              c:type="IDE_TOOLCHAIN_LANGUAGE_FORTRAN">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_LANGUAGE_PYTHON"
              value="python"
              c:type="IDE_TOOLCHAIN_LANGUAGE_PYTHON">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_LANGUAGE_VALA"
              value="vala"
              c:type="IDE_TOOLCHAIN_LANGUAGE_VALA">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_AR"
              value="ar"
              c:type="IDE_TOOLCHAIN_TOOL_AR">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_CC"
              value="cc"
              c:type="IDE_TOOLCHAIN_TOOL_CC">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_CPP"
              value="cpp"
              c:type="IDE_TOOLCHAIN_TOOL_CPP">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_EXEC"
              value="exec"
              c:type="IDE_TOOLCHAIN_TOOL_EXEC">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_LD"
              value="ld"
              c:type="IDE_TOOLCHAIN_TOOL_LD">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_PKG_CONFIG"
              value="pkg-config"
              c:type="IDE_TOOLCHAIN_TOOL_PKG_CONFIG">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOOLCHAIN_TOOL_STRIP"
              value="strip"
              c:type="IDE_TOOLCHAIN_TOOL_STRIP">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="TRACE_MSG"
                    c:identifier="IDE_TRACE_MSG"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-debug.h"
           line="93">Similar to %IDE_PROBE but allows specifying a log message.</doc>
      <source-position filename="src/libide/core/ide-debug.h" line="111"/>
      <parameters>
        <parameter name="fmt">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="TREE_NODE_FLAGS_VCS_MASK"
              value="15"
              c:type="IDE_TREE_NODE_FLAGS_VCS_MASK">
      <source-position filename="src/libide/tree/ide-tree-node.h" line="49"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="Task"
           c:symbol-prefix="task"
           c:type="IdeTask"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTask"
           glib:get-type="ide_task_get_type"
           glib:type-struct="TaskClass">
      <source-position filename="src/libide/threading/ide-task.h" line="33"/>
      <implements name="Gio.AsyncResult"/>
      <constructor name="new" c:identifier="ide_task_new">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="727">Creates a new #IdeTask.

#IdeTask is similar to #GTask but provides some additional guarantees
such that by default, the source object, task data, and unused results
are guaranteed to be finalized in the #GMainContext associated with
the task itself.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="741">an #IdeTask</doc>
          <type name="Task" c:type="IdeTask*"/>
        </return-value>
        <parameters>
          <parameter name="source_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="729">a #GObject or %NULL</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="730">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="731">a #GAsyncReadyCallback or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="732">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="report_new_error"
                c:identifier="ide_task_report_new_error"
                introspectable="0">
        <source-position filename="src/libide/threading/ide-task.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="source_tag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <method name="chain" c:identifier="ide_task_chain">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1637">Causes the result of @self to also be delivered to @other_task.

This API is useful in situations when you want to avoid doing the same
work multiple times, and can share the result between mutliple async
operations requesting the same work.

Users of this API must make sure one of two things is true. Either they
have called ide_task_set_release_on_propagate() with @self and set
release_on_propagate to %FALSE, or @self has not yet completed.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1639">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="other_task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1640">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cancellable" c:identifier="ide_task_get_cancellable">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="859">Gets the #GCancellable for the task.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="58"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="865">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="861">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_complete_priority"
              c:identifier="ide_task_get_complete_priority">
        <source-position filename="src/libide/threading/ide-task.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_completed"
              c:identifier="ide_task_get_completed"
              glib:get-property="completed">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="783">Gets the "completed" property. This is %TRUE after the callback used when
creating the task has been executed.

The property will be notified using g_object_notify() exactly once in the
same #GMainContext as the callback.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="793">%TRUE if the task has completed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="785">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kind" c:identifier="ide_task_get_kind">
        <source-position filename="src/libide/threading/ide-task.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="TaskKind" c:type="IdeTaskKind"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="ide_task_get_name">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1949">Gets the name assigned for the task.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="64"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="1955">a string or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1951">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_task_get_priority">
        <source-position filename="src/libide/threading/ide-task.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_return_on_cancel"
              c:identifier="ide_task_get_return_on_cancel">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1842">Gets the return_on_cancel value, which means the task will return
immediately when the #GCancellable is cancelled.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1844">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_object"
              c:identifier="ide_task_get_source_object"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="695">Gets the #GObject used when creating the source object.

As this does not provide ownership transfer of the #GObject, it is a
programmer error to call this function outside of a thread worker called
from ide_task_run_in_thread() or outside the #GMainContext that is
associated with the task.

If you need to access the object in other scenarios, you must use the
g_async_result_get_source_object() which provides a full reference to the
source object, safely. You are responsible for ensuring that you do not
release the object in a manner that is unsafe for the source object.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="70"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="711">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="697">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source_tag" c:identifier="ide_task_get_source_tag">
        <source-position filename="src/libide/threading/ide-task.h" line="72"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_task_data"
              c:identifier="ide_task_get_task_data"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1725">Gets the task data previously set with ide_task_set_task_data().</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="74"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="1731">previously registered task data or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1727">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="had_error" c:identifier="ide_task_had_error">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="2004">Checks to see if the task had an error.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="2010">%TRUE if an error has occurred</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="2006">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_valid" c:identifier="ide_task_is_valid">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="767">Checks if @source_object matches the object the task was created with.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="774">%TRUE is source_object matches</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="769">a #IdeTask</doc>
            <type name="Task" c:type="gpointer"/>
          </instance-parameter>
          <parameter name="source_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="770">a #GObject or %NULL</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="propagate_boolean"
              c:identifier="ide_task_propagate_boolean"
              throws="1">
        <source-position filename="src/libide/threading/ide-task.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="propagate_boxed"
              c:identifier="ide_task_propagate_boxed"
              throws="1">
        <source-position filename="src/libide/threading/ide-task.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="propagate_int"
              c:identifier="ide_task_propagate_int"
              throws="1">
        <source-position filename="src/libide/threading/ide-task.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="propagate_object"
              c:identifier="ide_task_propagate_object"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1586">Returns an object if the task completed with an object. Otherwise, %NULL
is returned.

@error is set if the task completed with an error.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="1596">a #GObject or %NULL
  and @error may be set.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1588">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="propagate_pointer"
              c:identifier="ide_task_propagate_pointer"
              throws="1">
        <source-position filename="src/libide/threading/ide-task.h" line="93"/>
        <return-value transfer-ownership="none" nullable="1">
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="return_boolean" c:identifier="ide_task_return_boolean">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1137">Sets the result of the task to @result.

Other tasks depending on the result will be notified after returning
to the #GMainContext of the task.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1139">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1140">the result for the task</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="return_boxed"
              c:identifier="ide_task_return_boxed"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1162">This is similar to ide_task_return_pointer(), but allows the task to
know the boxed #GType so that the result may be propagated to chained
tasks.</doc>
        <source-position filename="src/libide/threading/ide-task.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1164">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="result_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1165">the #GType of the boxed type</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="result"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1166">the result to be returned</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="return_error" c:identifier="ide_task_return_error">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1250">Sets @error as the result of the #IdeTask</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1252">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1253">a #GError</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="return_error_if_cancelled"
              c:identifier="ide_task_return_error_if_cancelled">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1300">Returns a new #GError if the cancellable associated with the task
has been cancelled. If so, %TRUE is returned, otherwise %FALSE.

If the source object related to the task is an #IdeObject and that
object has had been requested to destroy, it too will be considered
a cancellation state.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-task.c"
               line="1311">%TRUE if the task was cancelled and error returned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1302">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="return_int" c:identifier="ide_task_return_int">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1112">Sets the result of the task to @result.

Other tasks depending on the result will be notified after returning
to the #GMainContext of the task.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1114">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1115">the result for the task</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="return_new_error"
              c:identifier="ide_task_return_new_error"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1272">Creates a new #GError and sets it as the result for the task.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1274">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="error_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1275">the error domain of the #GError</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="error_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1276">the error code for the #GError</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1277">the printf-style format string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="return_object" c:identifier="ide_task_return_object">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1191">Returns a new object instance.

Takes ownership of @instance to allow saving a reference increment and
decrement by the caller.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1193">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="instance" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1194">a #GObject instance</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="return_pointer"
              c:identifier="ide_task_return_pointer"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1217">Returns a new raw pointer.

Note that pointers cannot be chained to other tasks, so you may not
use ide_task_chain() in conjunction with a task returning a pointer
using ide_task_return_pointer().

If you need task chaining with pointers, see ide_task_return_boxed()
or ide_task_return_object().</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1219">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1220">the data to return</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1221">an optional #GDestroyNotify to cleanup data if no handler
  propagates the result</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_in_thread"
              c:identifier="ide_task_run_in_thread"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1409">Scheules @thread_func to be executed on a worker thread.

@thread_func must complete the task from the worker thread using one of
ide_task_return_boolean(), ide_task_return_int(), or
ide_task_return_pointer().</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1411">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="thread_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1412">a function to execute on a worker thread</doc>
            <type name="TaskThreadFunc" c:type="IdeTaskThreadFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_check_cancellable"
              c:identifier="ide_task_set_check_cancellable">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1386">Setting @check_cancellable to %TRUE (the default) ensures that the
#GCancellable used when creating the #IdeTask is checked for cancellation
before propagating a result. If cancelled, an error will be returned
instead of the result.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1388">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="check_cancellable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1389">%TRUE if the cancellable should be checked</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_complete_priority"
              c:identifier="ide_task_set_complete_priority">
        <source-position filename="src/libide/threading/ide-task.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="complete_priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind" c:identifier="ide_task_set_kind">
        <source-position filename="src/libide/threading/ide-task.h"
                         line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="TaskKind" c:type="IdeTaskKind"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ide_task_set_name">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1971">Sets a useful name for the task.

This string is interned, so it is best to avoid dynamic names as
that can result in lots of unnecessary strings being interned for
the lifetime of the process.

This name may be used in various g_critical() messages which can
be useful in troubleshooting.

If using #IdeTask from C, a default name is set using the source
file name and line number.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1973">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority" c:identifier="ide_task_set_priority">
        <source-position filename="src/libide/threading/ide-task.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_release_on_propagate"
              c:identifier="ide_task_set_release_on_propagate">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1341">Setting this to %TRUE (the default) ensures that the task will release all
task data and source_object references after executing the configured
callback. This is useful to ensure that dependent objects are finalized
in the thread-default #GMainContext the task was created in.

Generally, you want to leave this as %TRUE to ensure thread-safety on the
dependent objects and task data.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1343">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="release_on_propagate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1344">if data should be released on propagate</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_return_on_cancel"
              c:identifier="ide_task_set_return_on_cancel">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1863">Setting @return_on_cancel to %TRUE ensures that the task will cancel
immediately when #GCancellable::cancelled is emitted by the configured
cancellable.

Setting this requires that the caller can ensure the configured #GMainContext
will outlive the threaded worker so that task state can be freed in a delayed
fashion.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1865">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="return_on_cancel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1866">if the task should return immediately when the
  #GCancellable has been cancelled.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source_tag" c:identifier="ide_task_set_source_tag">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-task.c"
             line="1367">Sets the source tag for the task. Generally this is a function pointer
of the function that created the task.</doc>
        <source-position filename="src/libide/threading/ide-task.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1369">a #IdeTask</doc>
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="source_tag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-task.c"
                 line="1370">a tag to identify the task, usual a function pointer</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_task_data" c:identifier="ide_task_set_task_data">
        <source-position filename="src/libide/threading/ide-task.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Task" c:type="IdeTask*"/>
          </instance-parameter>
          <parameter name="task_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="task_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <property name="completed"
                transfer-ownership="none"
                getter="get_completed"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <class name="TaskCache"
           c:symbol-prefix="task_cache"
           c:type="IdeTaskCache"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTaskCache"
           glib:get-type="ide_task_cache_get_type"
           glib:type-struct="TaskCacheClass">
      <source-position filename="src/libide/io/ide-task-cache.h" line="32"/>
      <constructor name="new"
                   c:identifier="ide_task_cache_new"
                   introspectable="0">
        <source-position filename="src/libide/io/ide-task-cache.h" line="57"/>
        <return-value transfer-ownership="full">
          <type name="TaskCache" c:type="IdeTaskCache*"/>
        </return-value>
        <parameters>
          <parameter name="key_hash_func" transfer-ownership="none">
            <type name="GLib.HashFunc" c:type="GHashFunc"/>
          </parameter>
          <parameter name="key_equal_func" transfer-ownership="none">
            <type name="GLib.EqualFunc" c:type="GEqualFunc"/>
          </parameter>
          <parameter name="key_copy_func" transfer-ownership="none">
            <type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
          </parameter>
          <parameter name="key_destroy_func" transfer-ownership="none">
            <type name="GObject.BoxedFreeFunc" c:type="GBoxedFreeFunc"/>
          </parameter>
          <parameter name="value_copy_func" transfer-ownership="none">
            <type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
          </parameter>
          <parameter name="value_free_func" transfer-ownership="none">
            <type name="GObject.BoxedFreeFunc" c:type="GBoxedFreeFunc"/>
          </parameter>
          <parameter name="time_to_live_msec" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="populate_callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="8"
                     destroy="9">
            <type name="TaskCacheCallback" c:type="IdeTaskCacheCallback"/>
          </parameter>
          <parameter name="populate_callback_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="populate_callback_data_destroy"
                     transfer-ownership="none"
                     scope="async">
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="evict" c:identifier="ide_task_cache_evict">
        <source-position filename="src/libide/io/ide-task-cache.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="evict_all" c:identifier="ide_task_cache_evict_all">
        <source-position filename="src/libide/io/ide-task-cache.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_async" c:identifier="ide_task_cache_get_async">
        <source-position filename="src/libide/io/ide-task-cache.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="force_update" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_finish"
              c:identifier="ide_task_cache_get_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-task-cache.c"
             line="639">Finish a call to ide_task_cache_get_async().</doc>
        <source-position filename="src/libide/io/ide-task-cache.h" line="78"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.c"
               line="644">The result from the cache.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values"
              c:identifier="ide_task_cache_get_values"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-task-cache.c"
             line="994">Gets all the values in the cache.

The caller owns the resulting GPtrArray, which itself owns a reference to the children.</doc>
        <source-position filename="src/libide/io/ide-task-cache.h" line="90"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.c"
               line="1001">The values.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="ide_task_cache_peek">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-task-cache.c"
             line="331">Peeks to see @key is contained in the cache and returns the
matching #GObject if it does.

The reference count of the resulting #GObject is not incremented.
For that reason, it is important to remember that this function
may only be called from the main thread.</doc>
        <source-position filename="src/libide/io/ide-task-cache.h" line="87"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.c"
               line="343">A #GObject or
  %NULL if the key was not found in the cache.</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-task-cache.c"
                 line="333">An #IdeTaskCache</doc>
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
          <parameter name="key"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/io/ide-task-cache.c"
                 line="334">The key for the cache</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name" c:identifier="ide_task_cache_set_name">
        <source-position filename="src/libide/io/ide-task-cache.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TaskCache" c:type="IdeTaskCache*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="key-copy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="key-destroy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="key-equal-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="key-hash-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="populate-callback"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="populate-callback-data"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="populate-callback-data-destroy"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="time-to-live"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="30000">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-task-cache.c"
             line="923">This is the number of milliseconds before an item should be evicted
from the cache.

A value of zero indicates no eviction.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="value-copy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="value-destroy-func"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
    </class>
    <callback name="TaskCacheCallback" c:type="IdeTaskCacheCallback">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-task-cache.h"
           line="34">#IdeTaskCacheCallback is the prototype for a function to be executed to
populate an item in the cache.

This function will be executed when a fault (cache miss) occurs from
a caller requesting an item from the cache.

The callee may complete the operation asynchronously, but MUST return
either a GObject using g_task_return_pointer() or a #GError using
g_task_return_error() or g_task_return_new_error().</doc>
      <source-position filename="src/libide/io/ide-task-cache.h" line="51"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.h"
               line="36">An #IdeTaskCache.</doc>
          <type name="TaskCache" c:type="IdeTaskCache*"/>
        </parameter>
        <parameter name="key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.h"
               line="37">the key to fetch</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="task" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.h"
               line="38">the task to be completed</doc>
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-task-cache.h"
               line="39">user_data registered at initialization.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="TaskCacheClass"
            c:type="IdeTaskCacheClass"
            glib:is-gtype-struct-for="TaskCache">
      <source-position filename="src/libide/io/ide-task-cache.h" line="32"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TaskClass"
            c:type="IdeTaskClass"
            glib:is-gtype-struct-for="Task">
      <source-position filename="src/libide/threading/ide-task.h" line="33"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="TaskKind" c:type="IdeTaskKind">
      <source-position filename="src/libide/threading/ide-task.h" line="47"/>
      <member name="default" value="0" c:identifier="IDE_TASK_KIND_DEFAULT">
      </member>
      <member name="compiler" value="1" c:identifier="IDE_TASK_KIND_COMPILER">
      </member>
      <member name="indexer" value="2" c:identifier="IDE_TASK_KIND_INDEXER">
      </member>
      <member name="io" value="3" c:identifier="IDE_TASK_KIND_IO">
      </member>
      <member name="last" value="4" c:identifier="IDE_TASK_KIND_LAST">
      </member>
    </enumeration>
    <callback name="TaskThreadFunc" c:type="IdeTaskThreadFunc">
      <source-position filename="src/libide/threading/ide-task.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="task" transfer-ownership="none">
          <type name="Task" c:type="IdeTask*"/>
        </parameter>
        <parameter name="source_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="task_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TemplateBase"
           c:symbol-prefix="template_base"
           c:type="IdeTemplateBase"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeTemplateBase"
           glib:get-type="ide_template_base_get_type"
           glib:type-struct="TemplateBaseClass">
      <source-position filename="src/libide/projects/ide-template-base.h"
                       line="41"/>
      <method name="add_path" c:identifier="ide_template_base_add_path">
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="Template.Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_resource"
              c:identifier="ide_template_base_add_resource">
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="Template.Scope" c:type="TmplScope*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_all_async"
              c:identifier="ide_template_base_expand_all_async">
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_all_finish"
              c:identifier="ide_template_base_expand_all_finish"
              throws="1">
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_locator"
              c:identifier="ide_template_base_get_locator"
              glib:get-property="locator">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-template-base.c"
             line="131">Fetches the #TmplTemplateLocator used for resolving templates.</doc>
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="44"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-base.c"
               line="137">a #TmplTemplateLocator or %NULL.</doc>
          <type name="Template.TemplateLocator" c:type="TmplTemplateLocator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-base.c"
                 line="133">An #IdeTemplateBase</doc>
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="ide_template_base_reset">
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_locator"
              c:identifier="ide_template_base_set_locator"
              glib:set-property="locator">
        <source-position filename="src/libide/projects/ide-template-base.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateBase" c:type="IdeTemplateBase*"/>
          </instance-parameter>
          <parameter name="locator" transfer-ownership="none">
            <type name="Template.TemplateLocator"
                  c:type="TmplTemplateLocator*"/>
          </parameter>
        </parameters>
      </method>
      <property name="locator"
                writable="1"
                transfer-ownership="none"
                setter="set_locator"
                getter="get_locator">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-template-base.c"
             line="241">The #IdeTemplateBase:locator property contains the #TmplTemplateLocator
that should be used to resolve template includes. If %NULL, templates
will not be allowed to include other templates.
directive.</doc>
        <type name="Template.TemplateLocator"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TemplateBaseClass"
            c:type="IdeTemplateBaseClass"
            glib:is-gtype-struct-for="TemplateBase">
      <source-position filename="src/libide/projects/ide-template-base.h"
                       line="41"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="TemplateInput"
           c:symbol-prefix="template_input"
           c:type="IdeTemplateInput"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTemplateInput"
           glib:get-type="ide_template_input_get_type"
           glib:type-struct="TemplateInputClass">
      <source-position filename="src/libide/projects/ide-template-input.h"
                       line="46"/>
      <constructor name="new" c:identifier="ide_template_input_new">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="49"/>
        <return-value transfer-ownership="full">
          <type name="TemplateInput" c:type="IdeTemplateInput*"/>
        </return-value>
      </constructor>
      <method name="expand_async"
              c:identifier="ide_template_input_expand_async">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_finish"
              c:identifier="ide_template_input_expand_finish"
              throws="1">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-input.c"
               line="1282">a #GFile or %NULL and @error is set.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_app_id"
              c:identifier="ide_template_input_get_app_id"
              glib:get-property="app-id">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_author"
              c:identifier="ide_template_input_get_author"
              glib:get-property="author">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="ide_template_input_get_directory"
              glib:get-property="directory">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-template-input.c"
             line="488">Gets the directory to use to contain the new project directory.</doc>
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-input.c"
               line="494">a #GFile for the directory
  to use when generating the template.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-input.c"
                 line="490">a #IdeTemplateInput</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="ide_template_input_get_language"
              glib:get-property="language">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_languages_model"
              c:identifier="ide_template_input_get_languages_model"
              glib:get-property="languages-model">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-input.c"
               line="1017">A #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-input.c"
                 line="1015">a #IdeTemplateInput</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_name"
              c:identifier="ide_template_input_get_license_name"
              glib:get-property="license-name">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_license_path"
              c:identifier="ide_template_input_get_license_path">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-template-input.c"
             line="971">Gets a path to a #GResource containing the full license text.</doc>
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="104"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-input.c"
               line="977">a resource path or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-input.c"
                 line="973">a #IdeTemplateInput</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_licenses_model"
              c:identifier="ide_template_input_get_licenses_model"
              glib:get-property="licenses-model">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-input.c"
               line="1031">A #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-input.c"
                 line="1029">a #IdeTemplateInput</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_template_input_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_project_version"
              c:identifier="ide_template_input_get_project_version"
              glib:get-property="project-version">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_template"
              c:identifier="ide_template_input_get_template"
              glib:get-property="template">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_templates_model"
              c:identifier="ide_template_input_get_templates_model"
              glib:get-property="templates-model">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-input.c"
               line="1003">A #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-input.c"
                 line="1001">a #IdeTemplateInput</doc>
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_version_control"
              c:identifier="ide_template_input_get_use_version_control"
              glib:get-property="use-version-control">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_app_id"
              c:identifier="ide_template_input_set_app_id"
              glib:set-property="app-id">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="app_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_author"
              c:identifier="ide_template_input_set_author"
              glib:set-property="author">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="author" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_directory"
              c:identifier="ide_template_input_set_directory"
              glib:set-property="directory">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="ide_template_input_set_language"
              glib:set-property="language">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_license_name"
              c:identifier="ide_template_input_set_license_name"
              glib:set-property="license-name">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="license_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_template_input_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_project_version"
              c:identifier="ide_template_input_set_project_version"
              glib:set-property="project-version">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="project_version" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_template"
              c:identifier="ide_template_input_set_template"
              glib:set-property="template">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="template" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_version_control"
              c:identifier="ide_template_input_set_use_version_control"
              glib:set-property="use-version-control">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
          <parameter name="use_version_control" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="validate" c:identifier="ide_template_input_validate">
        <source-position filename="src/libide/projects/ide-template-input.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <type name="TemplateInputValidation"
                c:type="IdeTemplateInputValidation"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateInput" c:type="IdeTemplateInput*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="app-id"
                writable="1"
                transfer-ownership="none"
                setter="set_app_id"
                getter="get_app_id">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="author"
                writable="1"
                transfer-ownership="none"
                setter="set_author"
                getter="get_author"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="directory"
                writable="1"
                transfer-ownership="none"
                setter="set_directory"
                getter="get_directory">
        <type name="Gio.File"/>
      </property>
      <property name="language"
                writable="1"
                transfer-ownership="none"
                setter="set_language"
                getter="get_language"
                default-value="C">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="languages-model"
                transfer-ownership="none"
                getter="get_languages_model">
        <type name="Gio.ListModel"/>
      </property>
      <property name="license-name"
                writable="1"
                transfer-ownership="none"
                setter="set_license_name"
                getter="get_license_name"
                default-value="GPL-3.0-or-later">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="licenses-model"
                transfer-ownership="none"
                getter="get_licenses_model">
        <type name="Gio.ListModel"/>
      </property>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="project-version"
                writable="1"
                transfer-ownership="none"
                setter="set_project_version"
                getter="get_project_version"
                default-value="0.1.0">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="template"
                writable="1"
                transfer-ownership="none"
                setter="set_template"
                getter="get_template"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="template-name"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="templates-model"
                transfer-ownership="none"
                getter="get_templates_model">
        <type name="Gio.ListModel"/>
      </property>
      <property name="use-version-control"
                writable="1"
                transfer-ownership="none"
                setter="set_use_version_control"
                getter="get_use_version_control"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TemplateInputClass"
            c:type="IdeTemplateInputClass"
            glib:is-gtype-struct-for="TemplateInput">
      <source-position filename="src/libide/projects/ide-template-input.h"
                       line="46"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="TemplateInputValidation"
              c:type="IdeTemplateInputValidation">
      <source-position filename="src/libide/projects/ide-template-input.h"
                       line="43"/>
      <member name="valid" value="0" c:identifier="IDE_TEMPLATE_INPUT_VALID">
      </member>
      <member name="inval_name"
              value="1"
              c:identifier="IDE_TEMPLATE_INPUT_INVAL_NAME">
      </member>
      <member name="inval_app_id"
              value="2"
              c:identifier="IDE_TEMPLATE_INPUT_INVAL_APP_ID">
      </member>
      <member name="inval_location"
              value="4"
              c:identifier="IDE_TEMPLATE_INPUT_INVAL_LOCATION">
      </member>
      <member name="inval_language"
              value="8"
              c:identifier="IDE_TEMPLATE_INPUT_INVAL_LANGUAGE">
      </member>
      <member name="inval_template"
              value="16"
              c:identifier="IDE_TEMPLATE_INPUT_INVAL_TEMPLATE">
      </member>
    </bitfield>
    <class name="TemplateLocator"
           c:symbol-prefix="template_locator"
           c:type="IdeTemplateLocator"
           parent="Template.TemplateLocator"
           glib:type-name="IdeTemplateLocator"
           glib:get-type="ide_template_locator_get_type"
           glib:type-struct="TemplateLocatorClass">
      <source-position filename="src/libide/projects/ide-template-locator.h"
                       line="41"/>
      <constructor name="new" c:identifier="ide_template_locator_new">
        <source-position filename="src/libide/projects/ide-template-locator.h"
                         line="44"/>
        <return-value transfer-ownership="full">
          <type name="TemplateLocator" c:type="IdeTemplateLocator*"/>
        </return-value>
      </constructor>
      <method name="get_license_text"
              c:identifier="ide_template_locator_get_license_text"
              glib:get-property="license-text">
        <source-position filename="src/libide/projects/ide-template-locator.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateLocator" c:type="IdeTemplateLocator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_license_text"
              c:identifier="ide_template_locator_set_license_text"
              glib:set-property="license-text">
        <source-position filename="src/libide/projects/ide-template-locator.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TemplateLocator" c:type="IdeTemplateLocator*"/>
          </instance-parameter>
          <parameter name="license_text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="license-text"
                writable="1"
                transfer-ownership="none"
                setter="set_license_text"
                getter="get_license_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Template.TemplateLocator" c:type="TmplTemplateLocator"/>
      </field>
    </class>
    <record name="TemplateLocatorClass"
            c:type="IdeTemplateLocatorClass"
            glib:is-gtype-struct-for="TemplateLocator">
      <source-position filename="src/libide/projects/ide-template-locator.h"
                       line="41"/>
      <field name="parent_class">
        <type name="Template.TemplateLocatorClass"
              c:type="TmplTemplateLocatorClass"/>
      </field>
    </record>
    <interface name="TemplateProvider"
               c:symbol-prefix="template_provider"
               c:type="IdeTemplateProvider"
               glib:type-name="IdeTemplateProvider"
               glib:get-type="ide_template_provider_get_type"
               glib:type-struct="TemplateProviderInterface">
      <source-position filename="src/libide/projects/ide-template-provider.h"
                       line="43"/>
      <virtual-method name="get_project_templates"
                      invoker="get_project_templates">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-template-provider.c"
             line="41">Gets a list of templates for this provider.

Plugins should implement this interface to feed #IdeProjectTemplate's into
the project creation workflow.</doc>
        <source-position filename="src/libide/projects/ide-template-provider.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-provider.c"
               line="50">a #GList of
  #IdeProjectTemplate instances.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ProjectTemplate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-provider.c"
                 line="43">An #IdeTemplateProvider</doc>
            <type name="TemplateProvider" c:type="IdeTemplateProvider*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_project_templates"
              c:identifier="ide_template_provider_get_project_templates">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-template-provider.c"
             line="41">Gets a list of templates for this provider.

Plugins should implement this interface to feed #IdeProjectTemplate's into
the project creation workflow.</doc>
        <source-position filename="src/libide/projects/ide-template-provider.h"
                         line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-template-provider.c"
               line="50">a #GList of
  #IdeProjectTemplate instances.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ProjectTemplate"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-provider.c"
                 line="43">An #IdeTemplateProvider</doc>
            <type name="TemplateProvider" c:type="IdeTemplateProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="TemplateProviderInterface"
            c:type="IdeTemplateProviderInterface"
            glib:is-gtype-struct-for="TemplateProvider">
      <source-position filename="src/libide/projects/ide-template-provider.h"
                       line="43"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_project_templates">
        <callback name="get_project_templates">
          <source-position filename="src/libide/projects/ide-template-provider.h"
                           line="42"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/projects/ide-template-provider.c"
                 line="50">a #GList of
  #IdeProjectTemplate instances.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ProjectTemplate"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/projects/ide-template-provider.c"
                   line="43">An #IdeTemplateProvider</doc>
              <type name="TemplateProvider" c:type="IdeTemplateProvider*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Terminal"
           c:symbol-prefix="terminal"
           c:type="IdeTerminal"
           parent="Vte.Terminal"
           glib:type-name="IdeTerminal"
           glib:get-type="ide_terminal_get_type"
           glib:type-struct="TerminalClass">
      <source-position filename="src/libide/terminal/ide-terminal.h"
                       line="40"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Scrollable"/>
      <constructor name="new" c:identifier="ide_terminal_new">
        <source-position filename="src/libide/terminal/ide-terminal.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_colors" c:identifier="ide_terminal_get_colors">
        <source-position filename="src/libide/terminal/ide-terminal.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Terminal" c:type="IdeTerminal*"/>
          </instance-parameter>
          <parameter name="bg" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
          <parameter name="fg" transfer-ownership="none">
            <type name="Gdk.RGBA" c:type="GdkRGBA*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Vte.Terminal" c:type="VteTerminal"/>
      </field>
    </class>
    <record name="TerminalClass"
            c:type="IdeTerminalClass"
            glib:is-gtype-struct-for="Terminal">
      <source-position filename="src/libide/terminal/ide-terminal.h"
                       line="40"/>
      <field name="parent_class">
        <type name="Vte.TerminalClass" c:type="VteTerminalClass"/>
      </field>
    </record>
    <class name="TerminalLauncher"
           c:symbol-prefix="terminal_launcher"
           c:type="IdeTerminalLauncher"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTerminalLauncher"
           glib:get-type="ide_terminal_launcher_get_type"
           glib:type-struct="TerminalLauncherClass">
      <source-position filename="src/libide/terminal/ide-terminal-launcher.h"
                       line="35"/>
      <constructor name="new" c:identifier="ide_terminal_launcher_new">
        <doc xml:space="preserve"
             filename="src/libide/terminal/ide-terminal-launcher.c"
             line="246">Create an #IdeTerminalLauncher that spawns @run_command.</doc>
        <source-position filename="src/libide/terminal/ide-terminal-launcher.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-launcher.c"
               line="253">a newly created #IdeTerminalLauncher</doc>
          <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-launcher.c"
                 line="248">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="run_command" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-launcher.c"
                 line="249">an #IdeRunCommand to spawn</doc>
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="ide_terminal_launcher_copy">
        <doc xml:space="preserve"
             filename="src/libide/terminal/ide-terminal-launcher.c"
             line="268">Copies @self into a new launcher.</doc>
        <source-position filename="src/libide/terminal/ide-terminal-launcher.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-launcher.c"
               line="274">a newly created #IdeTerminalLauncher</doc>
          <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-launcher.c"
                 line="270">an #IdeTerminalLauncher</doc>
            <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="spawn_async"
              c:identifier="ide_terminal_launcher_spawn_async">
        <source-position filename="src/libide/terminal/ide-terminal-launcher.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
          </instance-parameter>
          <parameter name="pty" transfer-ownership="none">
            <type name="Vte.Pty" c:type="VtePty*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="spawn_finish"
              c:identifier="ide_terminal_launcher_spawn_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/terminal/ide-terminal-launcher.c"
             line="132">Completes a request to ide_terminal_launcher_spawn_async()</doc>
        <source-position filename="src/libide/terminal/ide-terminal-launcher.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-launcher.c"
               line="138">%TRUE if the process executed successfully; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-launcher.c"
                 line="134">a #IdeTerminalLauncher</doc>
            <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Context"/>
      </property>
      <property name="run-command" writable="1" transfer-ownership="none">
        <type name="RunCommand"/>
      </property>
    </class>
    <record name="TerminalLauncherClass"
            c:type="IdeTerminalLauncherClass"
            glib:is-gtype-struct-for="TerminalLauncher">
      <source-position filename="src/libide/terminal/ide-terminal-launcher.h"
                       line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="TerminalPage"
           c:symbol-prefix="terminal_page"
           c:type="IdeTerminalPage"
           parent="Page"
           final="1"
           glib:type-name="IdeTerminalPage"
           glib:get-type="ide_terminal_page_get_type"
           glib:type-struct="TerminalPageClass">
      <source-position filename="src/libide/terminal/ide-terminal-page.h"
                       line="39"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new_completed"
                   c:identifier="ide_terminal_page_new_completed">
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="TerminalPage" c:type="IdeTerminalPage*"/>
        </return-value>
        <parameters>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="columns" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="rows" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="feed" c:identifier="ide_terminal_page_feed">
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_directory_uri"
              c:identifier="ide_terminal_page_get_current_directory_uri">
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_launcher"
              c:identifier="ide_terminal_page_get_launcher"
              glib:get-property="launcher">
        <doc xml:space="preserve"
             filename="src/libide/terminal/ide-terminal-page.c"
             line="651">Gets the launcher for the page.</doc>
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-page.c"
               line="657">an #IdeTerminalLauncher or %NULL</doc>
          <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-page.c"
                 line="653">a #IdeTerminalPage</doc>
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pty"
              c:identifier="ide_terminal_page_get_pty"
              glib:get-property="pty">
        <doc xml:space="preserve"
             filename="src/libide/terminal/ide-terminal-page.c"
             line="583">Gets the #VtePty for the page.</doc>
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-page.c"
               line="589">a #VtePty</doc>
          <type name="Vte.Pty" c:type="VtePty*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-page.c"
                 line="585">a #IdeTerminalPage</doc>
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_terminal"
              c:identifier="ide_terminal_page_get_terminal">
        <doc xml:space="preserve"
             filename="src/libide/terminal/ide-terminal-page.c"
             line="675">Gets the underlying terminal widget.</doc>
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-page.c"
               line="681">an #IdeTerminal</doc>
          <type name="Terminal" c:type="IdeTerminal*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-page.c"
                 line="677">a #IdeTerminalPage</doc>
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_exited" c:identifier="ide_terminal_page_has_exited">
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_launcher"
              c:identifier="ide_terminal_page_set_launcher"
              glib:set-property="launcher">
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
          <parameter name="launcher" transfer-ownership="none">
            <type name="TerminalLauncher" c:type="IdeTerminalLauncher*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pty" c:identifier="ide_terminal_page_set_pty">
        <source-position filename="src/libide/terminal/ide-terminal-page.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TerminalPage" c:type="IdeTerminalPage*"/>
          </instance-parameter>
          <parameter name="pty" transfer-ownership="none">
            <type name="Vte.Pty" c:type="VtePty*"/>
          </parameter>
        </parameters>
      </method>
      <property name="close-on-exit"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="launcher"
                writable="1"
                transfer-ownership="none"
                setter="set_launcher"
                getter="get_launcher">
        <type name="TerminalLauncher"/>
      </property>
      <property name="manage-spawn"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="pty"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_pty">
        <type name="Vte.Pty"/>
      </property>
      <property name="respawn-on-exit"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TerminalPageClass"
            c:type="IdeTerminalPageClass"
            glib:is-gtype-struct-for="TerminalPage">
      <source-position filename="src/libide/terminal/ide-terminal-page.h"
                       line="39"/>
      <field name="parent_class">
        <type name="PageClass" c:type="IdePageClass"/>
      </field>
    </record>
    <class name="TerminalPopover"
           c:symbol-prefix="terminal_popover"
           c:type="IdeTerminalPopover"
           parent="Gtk.Popover"
           final="1"
           glib:type-name="IdeTerminalPopover"
           glib:get-type="ide_terminal_popover_get_type"
           glib:type-struct="TerminalPopoverClass">
      <source-position filename="src/libide/terminal/ide-terminal-popover.h"
                       line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="ide_terminal_popover_new">
        <source-position filename="src/libide/terminal/ide-terminal-popover.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_runtime"
              c:identifier="ide_terminal_popover_get_runtime">
        <source-position filename="src/libide/terminal/ide-terminal-popover.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-popover.c"
               line="210">an #IdeRuntime or %NULL</doc>
          <type name="Runtime" c:type="IdeRuntime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-popover.c"
                 line="208">a #IdeTerminalPopover</doc>
            <type name="TerminalPopover" c:type="IdeTerminalPopover*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="TerminalPopoverClass"
            c:type="IdeTerminalPopoverClass"
            glib:is-gtype-struct-for="TerminalPopover">
      <source-position filename="src/libide/terminal/ide-terminal-popover.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Gtk.PopoverClass" c:type="GtkPopoverClass"/>
      </field>
    </record>
    <class name="TerminalSearch"
           c:symbol-prefix="terminal_search"
           c:type="IdeTerminalSearch"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeTerminalSearch"
           glib:get-type="ide_terminal_search_get_type"
           glib:type-struct="TerminalSearchClass">
      <source-position filename="src/libide/terminal/ide-terminal-search.h"
                       line="37"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <method name="get_regex"
              c:identifier="ide_terminal_search_get_regex"
              glib:get-property="regex">
        <source-position filename="src/libide/terminal/ide-terminal-search.h"
                         line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/terminal/ide-terminal-search.c"
               line="431">a #VteRegex or %NULL.</doc>
          <type name="Vte.Regex" c:type="VteRegex*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-search.c"
                 line="429">a #IdeTerminalSearch</doc>
            <type name="TerminalSearch" c:type="IdeTerminalSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_wrap_around"
              c:identifier="ide_terminal_search_get_wrap_around"
              glib:get-property="wrap-around">
        <source-position filename="src/libide/terminal/ide-terminal-search.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-search.c"
                 line="443">a #IdeTerminalSearch</doc>
            <type name="TerminalSearch" c:type="IdeTerminalSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_terminal"
              c:identifier="ide_terminal_search_set_terminal">
        <source-position filename="src/libide/terminal/ide-terminal-search.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/terminal/ide-terminal-search.c"
                 line="415">a #IdeTerminalSearch</doc>
            <type name="TerminalSearch" c:type="IdeTerminalSearch*"/>
          </instance-parameter>
          <parameter name="terminal" transfer-ownership="none">
            <type name="Vte.Terminal" c:type="VteTerminal*"/>
          </parameter>
        </parameters>
      </method>
      <property name="case-sensitive"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="regex" transfer-ownership="none" getter="get_regex">
        <type name="Vte.Regex"/>
      </property>
      <property name="use-regex"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="whole-words"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="wrap-around"
                writable="1"
                transfer-ownership="none"
                getter="get_wrap_around"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="search" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TerminalSearchClass"
            c:type="IdeTerminalSearchClass"
            glib:is-gtype-struct-for="TerminalSearch">
      <source-position filename="src/libide/terminal/ide-terminal-search.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Adw.BinClass" c:type="AdwBinClass"/>
      </field>
    </record>
    <class name="Test"
           c:symbol-prefix="test"
           c:type="IdeTest"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTest"
           glib:get-type="ide_test_get_type"
           glib:type-struct="TestClass">
      <source-position filename="src/libide/foundry/ide-test.h" line="46"/>
      <constructor name="new" c:identifier="ide_test_new">
        <source-position filename="src/libide/foundry/ide-test.h" line="49"/>
        <return-value transfer-ownership="full">
          <type name="Test" c:type="IdeTest*"/>
        </return-value>
        <parameters>
          <parameter name="run_command" transfer-ownership="none">
            <type name="RunCommand" c:type="IdeRunCommand*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_icon_name"
              c:identifier="ide_test_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/libide/foundry/ide-test.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Test" c:type="IdeTest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_test_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/foundry/ide-test.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Test" c:type="IdeTest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_run_command"
              c:identifier="ide_test_get_run_command"
              glib:get-property="run-command">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test.c"
             line="237">Gets the run command for the test.</doc>
        <source-position filename="src/libide/foundry/ide-test.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-test.c"
               line="243">an #IdeTest</doc>
          <type name="RunCommand" c:type="IdeRunCommand*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test.c"
                 line="239">a #IdeTest</doc>
            <type name="Test" c:type="IdeTest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="ide_test_get_status"
              glib:get-property="status">
        <source-position filename="src/libide/foundry/ide-test.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="TestStatus" c:type="IdeTestStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Test" c:type="IdeTest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_test_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/foundry/ide-test.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Test" c:type="IdeTest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="icon-name"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="run-command"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_run_command">
        <type name="RunCommand"/>
      </property>
      <property name="status"
                transfer-ownership="none"
                getter="get_status"
                default-value="IDE_TEST_STATUS_NONE">
        <type name="TestStatus"/>
      </property>
      <property name="title"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TestClass"
            c:type="IdeTestClass"
            glib:is-gtype-struct-for="Test">
      <source-position filename="src/libide/foundry/ide-test.h" line="46"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="TestManager"
           c:symbol-prefix="test_manager"
           c:type="IdeTestManager"
           parent="Object"
           final="1"
           glib:type-name="IdeTestManager"
           glib:get-type="ide_test_manager_get_type"
           glib:type-struct="TestManagerClass">
      <source-position filename="src/libide/foundry/ide-test-manager.h"
                       line="38"/>
      <implements name="Gio.ActionGroup"/>
      <function name="from_context"
                c:identifier="ide_test_manager_from_context">
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="211">an #IdeTestManager</doc>
          <type name="TestManager" c:type="IdeTestManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="209">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_pty" c:identifier="ide_test_manager_get_pty">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="660">Gets the #VtePty to use for running unit tests.</doc>
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-test-manager.c"
               line="666">a #VtePty</doc>
          <type name="Vte.Pty" c:type="VtePty*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="662">a #IdeTestManager</doc>
            <type name="TestManager" c:type="IdeTestManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_tests" c:identifier="ide_test_manager_list_tests">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="676">Gets a #GListModel of #IdeTest.

This will return a #GListModel immediately, but that list may not complete
until some time in the future based on how quickly various
#IdeRunCommandProvider return commands.</doc>
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-test-manager.c"
               line="686">an #GListModel of #IdeTest</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="678">a #IdeTestManager</doc>
            <type name="TestManager" c:type="IdeTestManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="run_all_async"
              c:identifier="ide_test_manager_run_all_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="390">Executes all tests in an undefined order.

Upon completion, @callback will be executed which must call
ide_test_manager_run_all_finish() to get the result.

Note that the individual test result information will be attached
to the specific #IdeTest instances.</doc>
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="392">An #IdeTestManager</doc>
            <type name="TestManager" c:type="IdeTestManager*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="393">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="394">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="395">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_all_finish"
              c:identifier="ide_test_manager_run_all_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="484">Completes an asynchronous request to execute all unit tests.

A return value of %TRUE does not indicate that all tests succeeded,
only that all tests were executed. Individual test failures will be
attached to the #IdeTest instances.</doc>
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-test-manager.c"
               line="496">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="486">An #IdeTestManager</doc>
            <type name="TestManager" c:type="IdeTestManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="487">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_async" c:identifier="ide_test_manager_run_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="554">Executes a single unit test, asynchronously.

The caller can access the result of the operation from @callback
by calling ide_test_manager_run_finish() with the provided result.</doc>
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="556">An #IdeTestManager</doc>
            <type name="TestManager" c:type="IdeTestManager*"/>
          </instance-parameter>
          <parameter name="test" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="557">An #IdeTest</doc>
            <type name="Test" c:type="IdeTest*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="558">a #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="559">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="560">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_finish"
              c:identifier="ide_test_manager_run_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="628">Completes a request to ide_test_manager_run_finish().

When this function returns %TRUE, it does not indicate that the test
succeeded; only that the test was executed. Thest #IdeTest instance
itself will contain information about the success of the test.</doc>
        <source-position filename="src/libide/foundry/ide-test-manager.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-test-manager.c"
               line="640">%TRUE if the test was executed; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="630">An #IdeTestManager</doc>
            <type name="TestManager" c:type="IdeTestManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-test-manager.c"
                 line="631">The #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="model" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-test-manager.c"
             line="267">The "model" property contains a #GListModel of #IdeTest.

Fetching this property will not cause the #GListModel to be
populated. That is only done by calling ide_test_manager_list_tests().

This may be a more convenient way to get access to the model when you
do not want the tests to autopopulate just to be bound to UI elements.</doc>
        <type name="Gio.ListModel"/>
      </property>
      <glib:signal name="begin-test-all" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="end-test-all" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TestManagerClass"
            c:type="IdeTestManagerClass"
            glib:is-gtype-struct-for="TestManager">
      <source-position filename="src/libide/foundry/ide-test-manager.h"
                       line="38"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <record name="TestProvider"
            c:type="IdeTestProvider"
            disguised="1"
            opaque="1">
      <source-position filename="src/libide/foundry/ide-foundry-types.h"
                       line="68"/>
    </record>
    <enumeration name="TestStatus"
                 glib:type-name="IdeTestStatus"
                 glib:get-type="ide_test_status_get_type"
                 c:type="IdeTestStatus">
      <member name="none"
              value="0"
              c:identifier="IDE_TEST_STATUS_NONE"
              glib:nick="none"
              glib:name="IDE_TEST_STATUS_NONE">
      </member>
      <member name="running"
              value="1"
              c:identifier="IDE_TEST_STATUS_RUNNING"
              glib:nick="running"
              glib:name="IDE_TEST_STATUS_RUNNING">
      </member>
      <member name="success"
              value="2"
              c:identifier="IDE_TEST_STATUS_SUCCESS"
              glib:nick="success"
              glib:name="IDE_TEST_STATUS_SUCCESS">
      </member>
      <member name="failed"
              value="3"
              c:identifier="IDE_TEST_STATUS_FAILED"
              glib:nick="failed"
              glib:name="IDE_TEST_STATUS_FAILED">
      </member>
    </enumeration>
    <class name="TextEdit"
           c:symbol-prefix="text_edit"
           c:type="IdeTextEdit"
           parent="Object"
           glib:type-name="IdeTextEdit"
           glib:get-type="ide_text_edit_get_type"
           glib:type-struct="TextEditClass">
      <source-position filename="src/libide/code/ide-text-edit.h" line="44"/>
      <constructor name="new" c:identifier="ide_text_edit_new">
        <source-position filename="src/libide/code/ide-text-edit.h" line="47"/>
        <return-value transfer-ownership="full">
          <type name="TextEdit" c:type="IdeTextEdit*"/>
        </return-value>
        <parameters>
          <parameter name="range" transfer-ownership="none">
            <type name="Range" c:type="IdeRange*"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_variant"
                   c:identifier="ide_text_edit_new_from_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-edit.c"
             line="268">Creates a new #IdeTextEdit from the variant.

If @variant is %NULL, %NULL is returned.</doc>
        <source-position filename="src/libide/code/ide-text-edit.h" line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-edit.c"
               line="276">an #IdeTextEdit or %NULL</doc>
          <type name="TextEdit" c:type="IdeTextEdit*"/>
        </return-value>
        <parameters>
          <parameter name="variant"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-text-edit.c"
                 line="270">a #GVariant</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_range"
              c:identifier="ide_text_edit_get_range"
              glib:get-property="range">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-edit.c"
             line="159">Gets the range for the edit.</doc>
        <source-position filename="src/libide/code/ide-text-edit.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-edit.c"
               line="165">the range for the replacement, or %NULL</doc>
          <type name="Range" c:type="IdeRange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-text-edit.c"
                 line="161">a #IdeTextEdit</doc>
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_text"
              c:identifier="ide_text_edit_get_text"
              glib:get-property="text">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-edit.c"
             line="141">Gets the text for the edit.</doc>
        <source-position filename="src/libide/code/ide-text-edit.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-edit.c"
               line="147">the text to replace, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-text-edit.c"
                 line="143">a #IdeTextEdit</doc>
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_range"
              c:identifier="ide_text_edit_set_range"
              glib:set-property="range">
        <source-position filename="src/libide/code/ide-text-edit.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </instance-parameter>
          <parameter name="range" transfer-ownership="none">
            <type name="Range" c:type="IdeRange*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="ide_text_edit_set_text"
              glib:set-property="text">
        <source-position filename="src/libide/code/ide-text-edit.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_variant" c:identifier="ide_text_edit_to_variant">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-edit.c"
             line="239">Creates a #GVariant to represent a text_edit.

This function will never return a floating variant.</doc>
        <source-position filename="src/libide/code/ide-text-edit.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-edit.c"
               line="247">a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-text-edit.c"
                 line="241">a #IdeTextEdit</doc>
            <type name="TextEdit" c:type="IdeTextEdit*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="range"
                writable="1"
                transfer-ownership="none"
                setter="set_range"
                getter="get_range">
        <type name="Range"/>
      </property>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="TextEditClass"
            c:type="IdeTextEditClass"
            glib:is-gtype-struct-for="TextEdit">
      <source-position filename="src/libide/code/ide-text-edit.h" line="44"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <callback name="TextIterCharPredicate" c:type="IdeTextIterCharPredicate">
      <source-position filename="src/libide/code/ide-text-iter.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="ch" transfer-ownership="none">
          <type name="gunichar" c:type="gunichar"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ThreadFunc" c:type="IdeThreadFunc">
      <source-position filename="src/libide/threading/ide-thread-pool.h"
                       line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.h"
               line="45">The closure for the callback.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ThreadPool" c:type="IdeThreadPool" disguised="1" opaque="1">
      <source-position filename="src/libide/threading/ide-thread-pool.h"
                       line="32"/>
      <function name="push" c:identifier="ide_thread_pool_push">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-thread-pool.c"
             line="123">Runs the callback on the thread pool thread.</doc>
        <source-position filename="src/libide/threading/ide-thread-pool.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="125">the threadpool kind to use.</doc>
            <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="126">A function to call in the worker thread.</doc>
            <type name="ThreadFunc" c:type="IdeThreadFunc"/>
          </parameter>
          <parameter name="func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="127">user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="push_task" c:identifier="ide_thread_pool_push_task">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-thread-pool.c"
             line="78">This pushes a task to be executed on a worker thread based on the task kind as denoted by
@kind. Some tasks will be placed on special work queues or throttled based on priority.</doc>
        <source-position filename="src/libide/threading/ide-thread-pool.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="80">The task kind.</doc>
            <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
          </parameter>
          <parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="81">a #GTask to execute.</doc>
            <type name="Gio.Task" c:type="GTask*"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="82">The thread worker to execute for @task.</doc>
            <type name="Gio.TaskThreadFunc" c:type="GTaskThreadFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="push_with_priority"
                c:identifier="ide_thread_pool_push_with_priority">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-thread-pool.c"
             line="139">Runs the callback on the thread pool thread.</doc>
        <source-position filename="src/libide/threading/ide-thread-pool.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="141">the threadpool kind to use.</doc>
            <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="142">the priority for func</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="143">A function to call in the worker thread.</doc>
            <type name="ThreadFunc" c:type="IdeThreadFunc"/>
          </parameter>
          <parameter name="func_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-thread-pool.c"
                 line="144">user data for @func.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="ThreadPoolKind" c:type="IdeThreadPoolKind">
      <source-position filename="src/libide/threading/ide-thread-pool.h"
                       line="41"/>
      <member name="default" value="0" c:identifier="IDE_THREAD_POOL_DEFAULT">
      </member>
      <member name="compiler"
              value="1"
              c:identifier="IDE_THREAD_POOL_COMPILER">
      </member>
      <member name="indexer" value="2" c:identifier="IDE_THREAD_POOL_INDEXER">
      </member>
      <member name="io" value="3" c:identifier="IDE_THREAD_POOL_IO">
      </member>
      <member name="last" value="4" c:identifier="IDE_THREAD_POOL_LAST">
      </member>
    </enumeration>
    <class name="Toolchain"
           c:symbol-prefix="toolchain"
           c:type="IdeToolchain"
           parent="Object"
           abstract="1"
           glib:type-name="IdeToolchain"
           glib:get-type="ide_toolchain_get_type"
           glib:type-struct="ToolchainClass">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="53"/>
      <virtual-method name="get_tool_for_language"
                      invoker="get_tool_for_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="183">Gets the path of the specified tool for the requested language.
If %IDE_TOOLCHAIN_LANGUAGE_ANY is used in the @language field, the first tool matching @tool_id
will be returned.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain.c"
               line="193">A string containing the path of the tool for the given language, or
%NULL is no tool has been found.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="185">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="186">the language of the tool like %IDE_TOOLCHAIN_LANGUAGE_C.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tool_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="187">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_tools_for_id" invoker="get_tools_for_id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="212">Gets the list of all the paths to the specified tool id.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain.c"
               line="219">A table of language names and paths.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="214">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="tool_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="215">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_display_name"
              c:identifier="ide_toolchain_get_display_name"
              glib:get-property="display-name">
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host_triplet"
              c:identifier="ide_toolchain_get_host_triplet"
              glib:get-property="host-triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="138">Gets the combination of arch-kernel-system, sometimes referred to as
the "host triplet".

For Linux based devices, this will generally be something like
"x86_64-linux-gnu".</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain.c"
               line="148">The host system.type of the toolchain</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="140">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_toolchain_get_id"
              glib:get-property="id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="49">Gets the internal identifier of the toolchain</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain.c"
               line="55">the unique identifier.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="51">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tool_for_language"
              c:identifier="ide_toolchain_get_tool_for_language">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="183">Gets the path of the specified tool for the requested language.
If %IDE_TOOLCHAIN_LANGUAGE_ANY is used in the @language field, the first tool matching @tool_id
will be returned.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain.c"
               line="193">A string containing the path of the tool for the given language, or
%NULL is no tool has been found.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="185">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="186">the language of the tool like %IDE_TOOLCHAIN_LANGUAGE_C.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="tool_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="187">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_tools_for_id"
              c:identifier="ide_toolchain_get_tools_for_id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="212">Gets the list of all the paths to the specified tool id.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain.c"
               line="219">A table of language names and paths.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="214">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="tool_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="215">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="ide_toolchain_set_display_name"
              glib:set-property="display-name">
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host_triplet"
              c:identifier="ide_toolchain_set_host_triplet"
              glib:set-property="host-triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="115">Sets the host system of the toolchain</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="117">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="host_triplet" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="118">an #IdeTriplet representing the host architecture of the toolchain</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_toolchain_set_id"
              glib:set-property="id">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain.c"
             line="68">Sets the internal identifier of the toolchain</doc>
        <source-position filename="src/libide/foundry/ide-toolchain.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="70">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="71">the unique identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="display-name"
                writable="1"
                transfer-ownership="none"
                setter="set_display_name"
                getter="get_display_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host-triplet"
                writable="1"
                transfer-ownership="none"
                setter="set_host_triplet"
                getter="get_host_triplet">
        <type name="Triplet"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
    </class>
    <record name="ToolchainClass"
            c:type="IdeToolchainClass"
            glib:is-gtype-struct-for="Toolchain">
      <source-position filename="src/libide/foundry/ide-toolchain.h"
                       line="53"/>
      <field name="parent">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="get_tool_for_language">
        <callback name="get_tool_for_language">
          <source-position filename="src/libide/foundry/ide-toolchain.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="193">A string containing the path of the tool for the given language, or
%NULL is no tool has been found.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain.c"
                   line="185">an #IdeToolchain</doc>
              <type name="Toolchain" c:type="IdeToolchain*"/>
            </parameter>
            <parameter name="language" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain.c"
                   line="186">the language of the tool like %IDE_TOOLCHAIN_LANGUAGE_C.</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="tool_id" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain.c"
                   line="187">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_tools_for_id">
        <callback name="get_tools_for_id">
          <source-position filename="src/libide/foundry/ide-toolchain.h"
                           line="48"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain.c"
                 line="219">A table of language names and paths.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain.c"
                   line="214">an #IdeToolchain</doc>
              <type name="Toolchain" c:type="IdeToolchain*"/>
            </parameter>
            <parameter name="tool_id" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain.c"
                   line="215">the identifier of the tool like %IDE_TOOLCHAIN_TOOL_CC</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ToolchainManager"
           c:symbol-prefix="toolchain_manager"
           c:type="IdeToolchainManager"
           parent="Object"
           final="1"
           glib:type-name="IdeToolchainManager"
           glib:get-type="ide_toolchain_manager_get_type"
           glib:type-struct="ToolchainManagerClass">
      <source-position filename="src/libide/foundry/ide-toolchain-manager.h"
                       line="38"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.ListModel"/>
      <function name="from_context"
                c:identifier="ide_toolchain_manager_from_context">
        <source-position filename="src/libide/foundry/ide-foundry-compat.h"
                         line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="169">an #IdeToolchainManager</doc>
          <type name="ToolchainManager" c:type="IdeToolchainManager*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-foundry-compat.c"
                 line="167">a #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_toolchain"
              c:identifier="ide_toolchain_manager_get_toolchain">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-manager.c"
             line="441">Gets the toolchain by its internal identifier.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-manager.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain-manager.c"
               line="448">An #IdeToolchain.</doc>
          <type name="Toolchain" c:type="IdeToolchain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-manager.c"
                 line="443">An #IdeToolchainManager</doc>
            <type name="ToolchainManager" c:type="IdeToolchainManager*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-manager.c"
                 line="444">the identifier of the toolchain</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_loaded" c:identifier="ide_toolchain_manager_is_loaded">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-manager.c"
             line="469">Gets whether all the #IdeToolchainProvider implementations are loaded
and have registered all their #IdeToolchain.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-manager.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain-manager.c"
               line="476">%TRUE if all the toolchains are loaded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-manager.c"
                 line="471">An #IdeToolchainManager</doc>
            <type name="ToolchainManager" c:type="IdeToolchainManager*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="ToolchainManagerClass"
            c:type="IdeToolchainManagerClass"
            glib:is-gtype-struct-for="ToolchainManager">
      <source-position filename="src/libide/foundry/ide-toolchain-manager.h"
                       line="38"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="ToolchainProvider"
               c:symbol-prefix="toolchain_provider"
               c:type="IdeToolchainProvider"
               glib:type-name="IdeToolchainProvider"
               glib:get-type="ide_toolchain_provider_get_type"
               glib:type-struct="ToolchainProviderInterface">
      <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                       line="57"/>
      <prerequisite name="Object"/>
      <virtual-method name="added">
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_async" invoker="load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-provider.c"
             line="143">This function is called to initialize the toolchain provider after
the plugin instance has been created. The provider should locate any
toolchain within the project and call ide_toolchain_provider_emit_added()
before completing the asynchronous function so that the toolchain
manager may be made aware of the toolchains.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="145">a #IdeToolchainProvider</doc>
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="146">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="147">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="148">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_finish" invoker="load_finish" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-provider.c"
             line="167">Completes an asynchronous request to ide_toolchain_provider_load_async().</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain-provider.c"
               line="175">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="169">a #IdeToolchainProvider</doc>
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="170">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="removed">
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="ToolchainManager" c:type="IdeToolchainManager*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_added"
              c:identifier="ide_toolchain_provider_emit_added">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-provider.c"
             line="189">#IdeToolchainProvider implementations should call this function with
a @toolchain when it has discovered a new toolchain.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="191">an #IdeToolchainProvider</doc>
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="192">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_removed"
              c:identifier="ide_toolchain_provider_emit_removed">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-provider.c"
             line="207">#IdeToolchainProvider implementations should call this function with
a @toolchain when the toolchain was removed.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="209">an #IdeToolchainProvider</doc>
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="toolchain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="210">an #IdeToolchain</doc>
            <type name="Toolchain" c:type="IdeToolchain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_async"
              c:identifier="ide_toolchain_provider_load_async">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-provider.c"
             line="143">This function is called to initialize the toolchain provider after
the plugin instance has been created. The provider should locate any
toolchain within the project and call ide_toolchain_provider_emit_added()
before completing the asynchronous function so that the toolchain
manager may be made aware of the toolchains.</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="145">a #IdeToolchainProvider</doc>
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="146">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="147">a callback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="148">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_finish"
              c:identifier="ide_toolchain_provider_load_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-toolchain-provider.c"
             line="167">Completes an asynchronous request to ide_toolchain_provider_load_async().</doc>
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-toolchain-provider.c"
               line="175">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="169">a #IdeToolchainProvider</doc>
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="170">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_toolchain_provider_unload">
        <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
          </instance-parameter>
          <parameter name="manager" transfer-ownership="none">
            <type name="ToolchainManager" c:type="IdeToolchainManager*"/>
          </parameter>
        </parameters>
      </method>
      <glib:signal name="added" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Toolchain"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="removed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Toolchain"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ToolchainProviderInterface"
            c:type="IdeToolchainProviderInterface"
            glib:is-gtype-struct-for="ToolchainProvider">
      <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                       line="57"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load_async">
        <callback name="load_async">
          <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain-provider.c"
                   line="145">a #IdeToolchainProvider</doc>
              <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain-provider.c"
                   line="146">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain-provider.c"
                   line="147">a callback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain-provider.c"
                   line="148">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_finish">
        <callback name="load_finish" throws="1">
          <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-toolchain-provider.c"
                 line="175">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain-provider.c"
                   line="169">a #IdeToolchainProvider</doc>
              <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/foundry/ide-toolchain-provider.c"
                   line="170">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
            </parameter>
            <parameter name="manager" transfer-ownership="none">
              <type name="ToolchainManager" c:type="IdeToolchainManager*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="added">
        <callback name="added">
          <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
            </parameter>
            <parameter name="toolchain" transfer-ownership="none">
              <type name="Toolchain" c:type="IdeToolchain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="removed">
        <callback name="removed">
          <source-position filename="src/libide/foundry/ide-toolchain-provider.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ToolchainProvider" c:type="IdeToolchainProvider*"/>
            </parameter>
            <parameter name="toolchain" transfer-ownership="none">
              <type name="Toolchain" c:type="IdeToolchain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Transfer"
           c:symbol-prefix="transfer"
           c:type="IdeTransfer"
           parent="Object"
           glib:type-name="IdeTransfer"
           glib:get-type="ide_transfer_get_type"
           glib:type-struct="TransferClass">
      <source-position filename="src/libide/core/ide-transfer.h" line="53"/>
      <function name="error_quark" c:identifier="ide_transfer_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="execute_async" invoker="execute_async">
        <source-position filename="src/libide/core/ide-transfer.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="execute_finish"
                      invoker="execute_finish"
                      throws="1">
        <source-position filename="src/libide/core/ide-transfer.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="cancel" c:identifier="ide_transfer_cancel">
        <source-position filename="src/libide/core/ide-transfer.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_notification"
              c:identifier="ide_transfer_create_notification">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer.c"
             line="507">Creates a new #IdeNotification that is updated with the progress
of the #IdeTransfer. This is useful when you need to bridge an
#IdeTransfer into something that can be displayed to the user.

If the transfer has completed, %NULL is returned.</doc>
        <source-position filename="src/libide/core/ide-transfer.h" line="99"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-transfer.c"
               line="517">an #IdeNotification or %NULL</doc>
          <type name="Notification" c:type="IdeNotification*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer.c"
                 line="509">a #IdeTransfer</doc>
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute_async" c:identifier="ide_transfer_execute_async">
        <source-position filename="src/libide/core/ide-transfer.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_transfer_execute_finish"
              throws="1">
        <source-position filename="src/libide/core/ide-transfer.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active"
              c:identifier="ide_transfer_get_active"
              glib:get-property="active">
        <source-position filename="src/libide/core/ide-transfer.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_completed"
              c:identifier="ide_transfer_get_completed"
              glib:get-property="completed">
        <source-position filename="src/libide/core/ide-transfer.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_transfer_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/libide/core/ide-transfer.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_transfer_get_progress"
              glib:get-property="progress">
        <source-position filename="src/libide/core/ide-transfer.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="ide_transfer_get_status"
              glib:get-property="status">
        <source-position filename="src/libide/core/ide-transfer.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_transfer_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/core/ide-transfer.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_transfer_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/core/ide-transfer.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progress"
              c:identifier="ide_transfer_set_progress"
              glib:set-property="progress">
        <source-position filename="src/libide/core/ide-transfer.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_status"
              c:identifier="ide_transfer_set_status"
              glib:set-property="status">
        <source-position filename="src/libide/core/ide-transfer.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_transfer_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/core/ide-transfer.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="active"
                transfer-ownership="none"
                getter="get_active"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="completed"
                transfer-ownership="none"
                getter="get_completed"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="folder-download-symbolic">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="progress"
                writable="1"
                transfer-ownership="none"
                setter="set_progress"
                getter="get_progress"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="status"
                writable="1"
                transfer-ownership="none"
                setter="set_status"
                getter="get_status"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Object" c:type="IdeObject"/>
      </field>
      <glib:signal name="cancelled" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TransferClass"
            c:type="IdeTransferClass"
            glib:is-gtype-struct-for="Transfer">
      <source-position filename="src/libide/core/ide-transfer.h" line="53"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
      <field name="execute_async">
        <callback name="execute_async">
          <source-position filename="src/libide/core/ide-transfer.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Transfer" c:type="IdeTransfer*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="execute_finish">
        <callback name="execute_finish" throws="1">
          <source-position filename="src/libide/core/ide-transfer.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Transfer" c:type="IdeTransfer*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="TransferError" c:type="IdeTransferError">
      <source-position filename="src/libide/core/ide-transfer.h" line="59"/>
      <member name="unknown"
              value="0"
              c:identifier="IDE_TRANSFER_ERROR_UNKNOWN">
      </member>
      <member name="connection_is_metered"
              value="1"
              c:identifier="IDE_TRANSFER_ERROR_CONNECTION_IS_METERED">
      </member>
    </enumeration>
    <class name="TransferManager"
           c:symbol-prefix="transfer_manager"
           c:type="IdeTransferManager"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTransferManager"
           glib:get-type="ide_transfer_manager_get_type"
           glib:type-struct="TransferManagerClass">
      <source-position filename="src/libide/core/ide-transfer-manager.h"
                       line="35"/>
      <implements name="Gio.ListModel"/>
      <function name="get_default"
                c:identifier="ide_transfer_manager_get_default">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="496">Gets the #IdeTransferManager singleton.</doc>
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-transfer-manager.c"
               line="501">an #IdeTransferManager</doc>
          <type name="TransferManager" c:type="IdeTransferManager*"/>
        </return-value>
      </function>
      <method name="cancel_all" c:identifier="ide_transfer_manager_cancel_all">
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="ide_transfer_manager_clear">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="296">Removes all transfers from the manager that are completed.</doc>
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="execute_async"
              c:identifier="ide_transfer_manager_execute_async">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="434">This is a convenience function that will queue @transfer into the transfer
manager and execute callback upon completion of the transfer. The success
or failure #GError will be propagated to the caller via
ide_transfer_manager_execute_finish().</doc>
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="436">An #IdeTransferManager</doc>
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
          <parameter name="transfer" transfer-ownership="none">
            <type name="Transfer" c:type="IdeTransfer*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="437">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="438">A callback or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="439">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="execute_finish"
              c:identifier="ide_transfer_manager_execute_finish"
              throws="1">
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_active"
              c:identifier="ide_transfer_manager_get_has_active"
              glib:get-property="has-active">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="63">Gets if there are active transfers.</doc>
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-transfer-manager.c"
               line="68">%TRUE if there are active transfers.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progress"
              c:identifier="ide_transfer_manager_get_progress"
              glib:get-property="progress">
        <source-position filename="src/libide/core/ide-transfer-manager.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TransferManager" c:type="IdeTransferManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="has-active"
                transfer-ownership="none"
                getter="get_has_active"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="128">If there are transfers active, this will be set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="progress"
                transfer-ownership="none"
                getter="get_progress"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="140">A double between and including 0.0 and 1.0 describing the progress of
all tasks.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <glib:signal name="all-transfers-completed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="157">This signal is emitted when all of the transfers have completed or failed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="transfer-completed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="174">This signal is emitted when a transfer has completed successfully.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transfer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="177">An #IdeTransfer</doc>
            <type name="Transfer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="transfer-failed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-transfer-manager.c"
             line="195">This signal is emitted when a transfer has failed to complete
successfully.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="transfer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="198">An #IdeTransfer</doc>
            <type name="Transfer"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/core/ide-transfer-manager.c"
                 line="199">The reason for the failure.</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TransferManagerClass"
            c:type="IdeTransferManagerClass"
            glib:is-gtype-struct-for="TransferManager">
      <source-position filename="src/libide/core/ide-transfer-manager.h"
                       line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Tree"
           c:symbol-prefix="tree"
           c:type="IdeTree"
           parent="Gtk.Widget"
           glib:type-name="IdeTree"
           glib:get-type="ide_tree_get_type"
           glib:type-struct="TreeClass">
      <source-position filename="src/libide/tree/ide-tree.h" line="43"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_tree_new">
        <source-position filename="src/libide/tree/ide-tree.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="Tree" c:type="IdeTree*"/>
        </return-value>
      </constructor>
      <function name="get_resource" c:identifier="ide_tree_get_resource">
        <source-position filename="src/libide/tree/ide-tree-resources.h"
                         line="6"/>
        <return-value transfer-ownership="full">
          <type name="Gio.Resource" c:type="GResource*"/>
        </return-value>
      </function>
      <method name="collapse_node" c:identifier="ide_tree_collapse_node">
        <source-position filename="src/libide/tree/ide-tree.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_node" c:identifier="ide_tree_expand_node">
        <source-position filename="src/libide/tree/ide-tree.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_node_async"
              c:identifier="ide_tree_expand_node_async">
        <source-position filename="src/libide/tree/ide-tree.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_node_finish"
              c:identifier="ide_tree_expand_node_finish"
              throws="1">
        <source-position filename="src/libide/tree/ide-tree.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="expand_to_node" c:identifier="ide_tree_expand_to_node">
        <source-position filename="src/libide/tree/ide-tree.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_menu_model"
              c:identifier="ide_tree_get_menu_model"
              glib:get-property="menu-model">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree.c"
             line="1558">Gets the menu model for the tree.</doc>
        <source-position filename="src/libide/tree/ide-tree.h" line="53"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree.c"
               line="1564">a #GMenuModel or %NULL</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree.c"
                 line="1560">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="ide_tree_get_root"
              glib:get-property="root">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree.c"
             line="1215">Gets the root node.</doc>
        <source-position filename="src/libide/tree/ide-tree.h" line="48"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree.c"
               line="1221">an IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree.c"
                 line="1217">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_node"
              c:identifier="ide_tree_get_selected_node"
              glib:get-property="selected-node">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree.c"
             line="1372">Gets the selected item.</doc>
        <source-position filename="src/libide/tree/ide-tree.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree.c"
               line="1378">an #IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree.c"
                 line="1374">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invalidate_all" c:identifier="ide_tree_invalidate_all">
        <source-position filename="src/libide/tree/ide-tree.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_node_expanded" c:identifier="ide_tree_is_node_expanded">
        <source-position filename="src/libide/tree/ide-tree.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_model"
              c:identifier="ide_tree_set_menu_model"
              glib:set-property="menu-model">
        <source-position filename="src/libide/tree/ide-tree.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="menu_model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root"
              c:identifier="ide_tree_set_root"
              glib:set-property="root">
        <source-position filename="src/libide/tree/ide-tree.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_node"
              c:identifier="ide_tree_set_selected_node"
              glib:set-property="selected-node">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree.c"
             line="1403">Sets the selected item in the tree.

If @node is %NULL, the current selection is cleared.</doc>
        <source-position filename="src/libide/tree/ide-tree.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree.c"
                 line="1405">a #IdeTree</doc>
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree.c"
                 line="1406">an #IdeTreeNode or %NULL</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_popover_at_node"
              c:identifier="ide_tree_show_popover_at_node">
        <source-position filename="src/libide/tree/ide-tree.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="popover" transfer-ownership="none">
            <type name="Gtk.Popover" c:type="GtkPopover*"/>
          </parameter>
        </parameters>
      </method>
      <property name="kind"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="menu-model"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_model"
                getter="get_menu_model">
        <type name="Gio.MenuModel"/>
      </property>
      <property name="root"
                writable="1"
                transfer-ownership="none"
                setter="set_root"
                getter="get_root">
        <type name="TreeNode"/>
      </property>
      <property name="selected-node"
                writable="1"
                transfer-ownership="none"
                setter="set_selected_node"
                getter="get_selected_node">
        <type name="TreeNode"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Widget" c:type="GtkWidget"/>
      </field>
    </class>
    <interface name="TreeAddin"
               c:symbol-prefix="tree_addin"
               c:type="IdeTreeAddin"
               glib:type-name="IdeTreeAddin"
               glib:get-type="ide_tree_addin_get_type"
               glib:type-struct="TreeAddinInterface">
      <source-position filename="src/libide/tree/ide-tree-addin.h" line="83"/>
      <virtual-method name="build_children">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_children_async"
                      invoker="build_children_async">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="106">This function is called when building the children of a node. This
happens when expanding an node that might have children, or building the
root node.

You may want to use ide_tree_node_holds() to determine if the node
contains an item that you are interested in.

This function will call the synchronous form of
IdeTreeAddin.build_children() if no asynchronous form is available.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="108">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="109">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="110">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="111">a #GAsyncReadyCallback or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="112">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_children_finish"
                      invoker="build_children_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="139">Completes an asynchronous request to ide_tree_addin_build_children_async().</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-addin.c"
               line="147">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="141">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="142">result given to callback in ide_tree_addin_build_children_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="build_node" invoker="build_node">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="161">This function is called when preparing a node for display in the tree.

Addins should adjust any state on the node that makes sense based on the
addin.

You may want to use ide_tree_node_holds() to determine if the node
contains an item that you are interested in.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="163">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="164">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_activated" invoker="node_activated">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_collapsed" invoker="node_collapsed">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_draggable"
                      invoker="node_draggable"
                      version="44">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="273">Checks if a node is draggable.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="68"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-addin.c"
               line="280">%NULL or a #GdkContentProvider if
  the node is draggable.</doc>
          <type name="Gdk.ContentProvider" c:type="GdkContentProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="275">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="276">an #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_droppable"
                      invoker="node_droppable"
                      version="44">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="298">Determines if @drop_node is a droppable for @drop_target.

If so, this function should add the allowed #GType to @gtypes.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-addin.c"
               line="309">0 if not droppable, otherwise a #GdkDragAction</doc>
          <type name="Gdk.DragAction" c:type="GdkDragAction"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="300">an #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="drop_target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="301">a #GtkDropTarget</doc>
            <type name="Gtk.DropTarget" c:type="GtkDropTarget*"/>
          </parameter>
          <parameter name="drop_node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="302">an #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="gtypes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="303">an array of #GType</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="GType"/>
            </array>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_dropped_async" invoker="node_dropped_async">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="drop_target" transfer-ownership="none">
            <type name="Gtk.DropTarget" c:type="GtkDropTarget*"/>
          </parameter>
          <parameter name="drop_node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_dropped_finish"
                      invoker="node_dropped_finish"
                      throws="1">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="node_expanded" invoker="node_expanded">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="selection_changed" invoker="selection_changed">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="selection" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="build_children_async"
              c:identifier="ide_tree_addin_build_children_async">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="106">This function is called when building the children of a node. This
happens when expanding an node that might have children, or building the
root node.

You may want to use ide_tree_node_holds() to determine if the node
contains an item that you are interested in.

This function will call the synchronous form of
IdeTreeAddin.build_children() if no asynchronous form is available.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="108">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="109">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="110">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="111">a #GAsyncReadyCallback or %NULL</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="112">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_children_finish"
              c:identifier="ide_tree_addin_build_children_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="139">Completes an asynchronous request to ide_tree_addin_build_children_async().</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-addin.c"
               line="147">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="141">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="142">result given to callback in ide_tree_addin_build_children_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_node" c:identifier="ide_tree_addin_build_node">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="161">This function is called when preparing a node for display in the tree.

Addins should adjust any state on the node that makes sense based on the
addin.

You may want to use ide_tree_node_holds() to determine if the node
contains an item that you are interested in.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="163">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="164">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_tree_addin_load">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </method>
      <method name="node_activated"
              c:identifier="ide_tree_addin_node_activated">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="node_collapsed"
              c:identifier="ide_tree_addin_node_collapsed">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="node_draggable"
              c:identifier="ide_tree_addin_node_draggable"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="273">Checks if a node is draggable.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="118"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-addin.c"
               line="280">%NULL or a #GdkContentProvider if
  the node is draggable.</doc>
          <type name="Gdk.ContentProvider" c:type="GdkContentProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="275">a #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="276">an #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="node_droppable"
              c:identifier="ide_tree_addin_node_droppable"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-addin.c"
             line="298">Determines if @drop_node is a droppable for @drop_target.

If so, this function should add the allowed #GType to @gtypes.</doc>
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-addin.c"
               line="309">0 if not droppable, otherwise a #GdkDragAction</doc>
          <type name="Gdk.DragAction" c:type="GdkDragAction"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="300">an #IdeTreeAddin</doc>
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="drop_target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="301">a #GtkDropTarget</doc>
            <type name="Gtk.DropTarget" c:type="GtkDropTarget*"/>
          </parameter>
          <parameter name="drop_node" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="302">an #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="gtypes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="303">an array of #GType</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="GType"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="node_dropped_async"
              c:identifier="ide_tree_addin_node_dropped_async">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="drop_target" transfer-ownership="none">
            <type name="Gtk.DropTarget" c:type="GtkDropTarget*"/>
          </parameter>
          <parameter name="drop_node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="node_dropped_finish"
              c:identifier="ide_tree_addin_node_dropped_finish"
              throws="1">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="node_expanded" c:identifier="ide_tree_addin_node_expanded">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="selection_changed"
              c:identifier="ide_tree_addin_selection_changed">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="selection" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_tree_addin_unload">
        <source-position filename="src/libide/tree/ide-tree-addin.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeAddin" c:type="IdeTreeAddin*"/>
          </instance-parameter>
          <parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="IdeTree*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="TreeAddinInterface"
            c:type="IdeTreeAddinInterface"
            glib:is-gtype-struct-for="TreeAddin">
      <source-position filename="src/libide/tree/ide-tree-addin.h" line="83"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_node">
        <callback name="build_node">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="163">a #IdeTreeAddin</doc>
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="164">a #IdeTreeNode</doc>
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_children">
        <callback name="build_children">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_children_async">
        <callback name="build_children_async">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="108">a #IdeTreeAddin</doc>
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="109">a #IdeTreeNode</doc>
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="110">a #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="111">a #GAsyncReadyCallback or %NULL</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="112">user data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="build_children_finish">
        <callback name="build_children_finish" throws="1">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="147">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="141">a #IdeTreeAddin</doc>
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="142">result given to callback in ide_tree_addin_build_children_async()</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_activated">
        <callback name="node_activated">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="tree" transfer-ownership="none">
              <type name="Tree" c:type="IdeTree*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="selection_changed">
        <callback name="selection_changed">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="selection" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_expanded">
        <callback name="node_expanded">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_collapsed">
        <callback name="node_collapsed">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_draggable">
        <callback name="node_draggable">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="68"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="280">%NULL or a #GdkContentProvider if
  the node is draggable.</doc>
            <type name="Gdk.ContentProvider" c:type="GdkContentProvider*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="275">a #IdeTreeAddin</doc>
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="node" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="276">an #IdeTreeNode</doc>
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_droppable">
        <callback name="node_droppable">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-addin.c"
                 line="309">0 if not droppable, otherwise a #GdkDragAction</doc>
            <type name="Gdk.DragAction" c:type="GdkDragAction"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="300">an #IdeTreeAddin</doc>
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="drop_target" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="301">a #GtkDropTarget</doc>
              <type name="Gtk.DropTarget" c:type="GtkDropTarget*"/>
            </parameter>
            <parameter name="drop_node" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="302">an #IdeTreeNode</doc>
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
            <parameter name="gtypes" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tree/ide-tree-addin.c"
                   line="303">an array of #GType</doc>
              <array name="GLib.Array" c:type="GArray*">
                <type name="GType"/>
              </array>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_dropped_async">
        <callback name="node_dropped_async">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="drop_target" transfer-ownership="none">
              <type name="Gtk.DropTarget" c:type="GtkDropTarget*"/>
            </parameter>
            <parameter name="drop_node" transfer-ownership="none">
              <type name="TreeNode" c:type="IdeTreeNode*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="node_dropped_finish">
        <callback name="node_dropped_finish" throws="1">
          <source-position filename="src/libide/tree/ide-tree-addin.h"
                           line="80"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TreeAddin" c:type="IdeTreeAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="TreeClass"
            c:type="IdeTreeClass"
            glib:is-gtype-struct-for="Tree">
      <source-position filename="src/libide/tree/ide-tree.h" line="43"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="TreeExpander"
           c:symbol-prefix="tree_expander"
           c:type="IdeTreeExpander"
           parent="Gtk.Widget"
           final="1"
           glib:type-name="IdeTreeExpander"
           glib:get-type="ide_tree_expander_get_type"
           glib:type-struct="TreeExpanderClass">
      <source-position filename="src/libide/gtk/ide-tree-expander.h"
                       line="32"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_tree_expander_new">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_expanded_icon"
              c:identifier="ide_tree_expander_get_expanded_icon"
              glib:get-property="expanded-icon">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-tree-expander.c"
             line="523">Gets the icon for the row when expanded.</doc>
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-tree-expander.c"
               line="529">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-tree-expander.c"
                 line="525">a #IdeTreeExpander</doc>
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="ide_tree_expander_get_icon"
              glib:get-property="icon">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-tree-expander.c"
             line="507">Gets the icon for the row.</doc>
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="42"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-tree-expander.c"
               line="513">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-tree-expander.c"
                 line="509">a #IdeTreeExpander</doc>
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item"
              c:identifier="ide_tree_expander_get_item"
              glib:get-property="item">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-tree-expander.c"
             line="461">Gets the item instance from the model.</doc>
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-tree-expander.c"
               line="467">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-tree-expander.c"
                 line="463">a #IdeTreeExpander</doc>
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_list_row"
              c:identifier="ide_tree_expander_get_list_row"
              glib:get-property="list-row">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-tree-expander.c"
             line="652">Gets the list row for the expander.</doc>
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="68"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-tree-expander.c"
               line="658">a #GtkTreeListRow or %NULL</doc>
          <type name="Gtk.TreeListRow" c:type="GtkTreeListRow*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-tree-expander.c"
                 line="654">a #IdeTreeExpander</doc>
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_model"
              c:identifier="ide_tree_expander_get_menu_model"
              glib:get-property="menu-model">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-tree-expander.c"
             line="480">Sets the menu model to use for context menus.</doc>
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="37"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-tree-expander.c"
               line="486">a #GMenuModel or %NULL</doc>
          <type name="Gio.MenuModel" c:type="GMenuModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-tree-expander.c"
                 line="482">a #IdeTreeExpander</doc>
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suffix"
              c:identifier="ide_tree_expander_get_suffix"
              glib:get-property="suffix">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-tree-expander.c"
             line="595">Get the suffix widget, if any.</doc>
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="63"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-tree-expander.c"
               line="601">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-tree-expander.c"
                 line="597">a #IdeTreeExpander</doc>
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tree_expander_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="ide_tree_expander_get_use_markup"
              glib:get-property="use-markup">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_expanded_icon"
              c:identifier="ide_tree_expander_set_expanded_icon"
              glib:set-property="expanded-icon">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded_icon_name"
              c:identifier="ide_tree_expander_set_expanded_icon_name"
              glib:set-property="expanded-icon-name">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="expanded_icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="ide_tree_expander_set_icon"
              glib:set-property="icon">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_tree_expander_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_list_row"
              c:identifier="ide_tree_expander_set_list_row"
              glib:set-property="list-row">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="list_row" transfer-ownership="none">
            <type name="Gtk.TreeListRow" c:type="GtkTreeListRow*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_menu_model"
              c:identifier="ide_tree_expander_set_menu_model"
              glib:set-property="menu-model">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="menu_model" transfer-ownership="none">
            <type name="Gio.MenuModel" c:type="GMenuModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_suffix"
              c:identifier="ide_tree_expander_set_suffix"
              glib:set-property="suffix">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="suffix" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tree_expander_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="ide_tree_expander_set_use_markup"
              glib:set-property="use-markup">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_popover"
              c:identifier="ide_tree_expander_show_popover">
        <source-position filename="src/libide/gtk/ide-tree-expander.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeExpander" c:type="IdeTreeExpander*"/>
          </instance-parameter>
          <parameter name="popover" transfer-ownership="none">
            <type name="Gtk.Popover" c:type="GtkPopover*"/>
          </parameter>
        </parameters>
      </method>
      <property name="expanded"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expanded-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded_icon"
                getter="get_expanded_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="expanded-icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="item" transfer-ownership="none" getter="get_item">
        <type name="GObject.Object"/>
      </property>
      <property name="list-row"
                writable="1"
                transfer-ownership="none"
                setter="set_list_row"
                getter="get_list_row">
        <type name="Gtk.TreeListRow"/>
      </property>
      <property name="menu-model"
                writable="1"
                transfer-ownership="none"
                setter="set_menu_model"
                getter="get_menu_model">
        <type name="Gio.MenuModel"/>
      </property>
      <property name="suffix"
                writable="1"
                transfer-ownership="none"
                setter="set_suffix"
                getter="get_suffix">
        <type name="Gtk.Widget"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-markup"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TreeExpanderClass"
            c:type="IdeTreeExpanderClass"
            glib:is-gtype-struct-for="TreeExpander">
      <source-position filename="src/libide/gtk/ide-tree-expander.h"
                       line="32"/>
      <field name="parent_class">
        <type name="Gtk.WidgetClass" c:type="GtkWidgetClass"/>
      </field>
    </record>
    <class name="TreeNode"
           c:symbol-prefix="tree_node"
           c:type="IdeTreeNode"
           parent="GObject.Object"
           glib:type-name="IdeTreeNode"
           glib:get-type="ide_tree_node_get_type"
           glib:type-struct="TreeNodeClass">
      <source-position filename="src/libide/tree/ide-tree-node.h" line="56"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_tree_node_new">
        <source-position filename="src/libide/tree/ide-tree-node.h" line="84"/>
        <return-value transfer-ownership="full">
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
      </constructor>
      <method name="get_children_possible"
              c:identifier="ide_tree_node_get_children_possible"
              glib:get-property="children-possible">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_destroy_item"
              c:identifier="ide_tree_node_get_destroy_item"
              glib:get-property="destroy-item">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded_icon"
              c:identifier="ide_tree_node_get_expanded_icon"
              glib:get-property="expanded-icon">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="535">Gets the icon used when the node is expanded.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h" line="98"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="541">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="537">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_first_child"
              c:identifier="ide_tree_node_get_first_child">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="840">Gets the first child of @self.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="149"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="846">a #IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="842">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="ide_tree_node_get_flags"
              glib:get-property="flags">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="TreeNodeFlags" c:type="IdeTreeNodeFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_error"
              c:identifier="ide_tree_node_get_has_error"
              glib:get-property="has-error">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon"
              c:identifier="ide_tree_node_get_icon"
              glib:get-property="icon">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="508">Gets the icon for the node.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h" line="93"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="514">a #GIcon or %NULL</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="510">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_header"
              c:identifier="ide_tree_node_get_is_header"
              glib:get-property="is-header">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item"
              c:identifier="ide_tree_node_get_item"
              glib:get-property="item">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="705">Gets the #IdeTreeNode:item property.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="711">a #GObject or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="707">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_child"
              c:identifier="ide_tree_node_get_last_child">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="856">Gets the last child of @self.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="151"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="862">a #IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="858">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_children"
              c:identifier="ide_tree_node_get_n_children">
        <source-position filename="src/libide/tree/ide-tree-node.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_sibling"
              c:identifier="ide_tree_node_get_next_sibling">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="888">Gets the nextious sibling, if any.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="155"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="894">an #IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="890">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="ide_tree_node_get_parent"
              glib:get-property="parent">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="755">Gets the parent node, if any.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="165"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="761">an #IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="757">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prev_sibling"
              c:identifier="ide_tree_node_get_prev_sibling">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="872">Gets the previous sibling, if any.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="153"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="878">an #IdeTreeNode or %NULL</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="874">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reset_on_collapse"
              c:identifier="ide_tree_node_get_reset_on_collapse"
              glib:get-property="reset-on-collapse">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root" c:identifier="ide_tree_node_get_root">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="904">Gets the root #IdeTreeNode, or @self if it has no parent.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.c"
               line="910">an #IdeTreeNode</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="906">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tree_node_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tree/ide-tree-node.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_markup"
              c:identifier="ide_tree_node_get_use_markup"
              glib:get-property="use-markup">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="holds" c:identifier="ide_tree_node_holds">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_after" c:identifier="ide_tree_node_insert_after">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="previous_sibling" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before" c:identifier="ide_tree_node_insert_before">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="next_sibling" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_sorted" c:identifier="ide_tree_node_insert_sorted">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="990">Insert @child as a child of @self at the sorted position
determined by @cmpfn.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="992">an #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="993">an #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
          <parameter name="cmpfn" transfer-ownership="none" scope="call">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="994">an #IdeTreeNodeCompare</doc>
            <type name="TreeNodeCompare" c:type="IdeTreeNodeCompare"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_tree_node_remove">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="823">Like ide_tree_node_unparent() but checks parent first.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="825">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_children_possible"
              c:identifier="ide_tree_node_set_children_possible"
              glib:set-property="children-possible">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="children_possible" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_destroy_item"
              c:identifier="ide_tree_node_set_destroy_item"
              glib:set-property="destroy-item">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="destroy_item" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded_icon"
              c:identifier="ide_tree_node_set_expanded_icon"
              glib:set-property="expanded-icon">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="expanded_icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded_icon_name"
              c:identifier="ide_tree_node_set_expanded_icon_name"
              glib:set-property="expanded-icon-name">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="expanded_icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flags"
              c:identifier="ide_tree_node_set_flags"
              glib:set-property="flags">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="TreeNodeFlags" c:type="IdeTreeNodeFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_error"
              c:identifier="ide_tree_node_set_has_error"
              glib:set-property="has-error">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="has_error" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon"
              c:identifier="ide_tree_node_set_icon"
              glib:set-property="icon">
        <source-position filename="src/libide/tree/ide-tree-node.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <type name="Gio.Icon" c:type="GIcon*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_tree_node_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_header"
              c:identifier="ide_tree_node_set_is_header"
              glib:set-property="is-header">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="is_header" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_item"
              c:identifier="ide_tree_node_set_item"
              glib:set-property="item">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="722">Sets the #IdeTreeNode:item property.

This item is typically used so that #IdeTreeAddin can annotate
the node with additional data.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="724">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="725">a #GObject or %NULL</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent"
              c:identifier="ide_tree_node_set_parent"
              glib:set-property="parent">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="node" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reset_on_collapse"
              c:identifier="ide_tree_node_set_reset_on_collapse"
              glib:set-property="reset-on-collapse">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="reset_on_collapse" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tree_node_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tree/ide-tree-node.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_markup"
              c:identifier="ide_tree_node_set_use_markup"
              glib:set-property="use-markup">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="use_markup" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="traverse" c:identifier="ide_tree_node_traverse">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.c"
             line="1100">Calls @traverse_func for each node that matches the requested
type, flags, and depth.

Traversal is stopped if @traverse_func returns %TRUE.</doc>
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="1102">a #IdeTreeNode</doc>
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
          <parameter name="traverse_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="1103">the type of traversal, pre and post supported</doc>
            <type name="GLib.TraverseType" c:type="GTraverseType"/>
          </parameter>
          <parameter name="traverse_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="1104">the flags for what nodes to match</doc>
            <type name="GLib.TraverseFlags" c:type="GTraverseFlags"/>
          </parameter>
          <parameter name="max_depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="1105">the max depth for the traversal or -1 for all</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="traverse_func"
                     transfer-ownership="none"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="1106">the callback for each matching node</doc>
            <type name="TreeTraverseFunc" c:type="IdeTreeTraverseFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tree/ide-tree-node.c"
                 line="1107">user data for @traverse_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unparent" c:identifier="ide_tree_node_unparent">
        <source-position filename="src/libide/tree/ide-tree-node.h"
                         line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TreeNode" c:type="IdeTreeNode*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="children-possible"
                writable="1"
                transfer-ownership="none"
                setter="set_children_possible"
                getter="get_children_possible"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="destroy-item"
                writable="1"
                transfer-ownership="none"
                setter="set_destroy_item"
                getter="get_destroy_item"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expanded-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded_icon"
                getter="get_expanded_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="expanded-icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="flags"
                writable="1"
                transfer-ownership="none"
                setter="set_flags"
                getter="get_flags"
                default-value="IDE_TREE_NODE_FLAGS_NONE">
        <type name="TreeNodeFlags"/>
      </property>
      <property name="has-error"
                writable="1"
                transfer-ownership="none"
                setter="set_has_error"
                getter="get_has_error"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon"
                writable="1"
                transfer-ownership="none"
                setter="set_icon"
                getter="get_icon">
        <type name="Gio.Icon"/>
      </property>
      <property name="icon-name"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-header"
                writable="1"
                transfer-ownership="none"
                setter="set_is_header"
                getter="get_is_header"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="item"
                writable="1"
                transfer-ownership="none"
                setter="set_item"
                getter="get_item">
        <type name="GObject.Object"/>
      </property>
      <property name="loading" transfer-ownership="none" default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="parent"
                writable="1"
                transfer-ownership="none"
                setter="set_parent"
                getter="get_parent">
        <type name="GObject.Object"/>
      </property>
      <property name="reset-on-collapse"
                writable="1"
                transfer-ownership="none"
                setter="set_reset_on_collapse"
                getter="get_reset_on_collapse"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-markup"
                writable="1"
                transfer-ownership="none"
                setter="set_use_markup"
                getter="get_use_markup"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="show-popover" when="last">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gtk.Popover"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TreeNodeClass"
            c:type="IdeTreeNodeClass"
            glib:is-gtype-struct-for="TreeNode">
      <source-position filename="src/libide/tree/ide-tree-node.h" line="56"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <callback name="TreeNodeCompare" c:type="IdeTreeNodeCompare">
      <doc xml:space="preserve"
           filename="src/libide/tree/ide-tree-node.h"
           line="70">This callback function is a convenience wrapper around GCompareFunc</doc>
      <source-position filename="src/libide/tree/ide-tree-node.h" line="80"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.h"
             line="78">int</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.h"
               line="72">an #IdeTreeNode that iterate over children</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="child" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.h"
               line="73">an #IdeTreeNode to be inserted</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="TreeNodeFlags"
              glib:type-name="IdeTreeNodeFlags"
              glib:get-type="ide_tree_node_flags_get_type"
              c:type="IdeTreeNodeFlags">
      <member name="none"
              value="0"
              c:identifier="IDE_TREE_NODE_FLAGS_NONE"
              glib:nick="none"
              glib:name="IDE_TREE_NODE_FLAGS_NONE">
      </member>
      <member name="descendant"
              value="1"
              c:identifier="IDE_TREE_NODE_FLAGS_DESCENDANT"
              glib:nick="descendant"
              glib:name="IDE_TREE_NODE_FLAGS_DESCENDANT">
      </member>
      <member name="added"
              value="2"
              c:identifier="IDE_TREE_NODE_FLAGS_ADDED"
              glib:nick="added"
              glib:name="IDE_TREE_NODE_FLAGS_ADDED">
      </member>
      <member name="changed"
              value="4"
              c:identifier="IDE_TREE_NODE_FLAGS_CHANGED"
              glib:nick="changed"
              glib:name="IDE_TREE_NODE_FLAGS_CHANGED">
      </member>
      <member name="removed"
              value="8"
              c:identifier="IDE_TREE_NODE_FLAGS_REMOVED"
              glib:nick="removed"
              glib:name="IDE_TREE_NODE_FLAGS_REMOVED">
      </member>
    </bitfield>
    <enumeration name="TreeNodeVisit"
                 glib:type-name="IdeTreeNodeVisit"
                 glib:get-type="ide_tree_node_visit_get_type"
                 c:type="IdeTreeNodeVisit">
      <member name="break"
              value="0"
              c:identifier="IDE_TREE_NODE_VISIT_BREAK"
              glib:nick="break"
              glib:name="IDE_TREE_NODE_VISIT_BREAK">
      </member>
      <member name="continue"
              value="1"
              c:identifier="IDE_TREE_NODE_VISIT_CONTINUE"
              glib:nick="continue"
              glib:name="IDE_TREE_NODE_VISIT_CONTINUE">
      </member>
      <member name="children"
              value="3"
              c:identifier="IDE_TREE_NODE_VISIT_CHILDREN"
              glib:nick="children"
              glib:name="IDE_TREE_NODE_VISIT_CHILDREN">
      </member>
    </enumeration>
    <callback name="TreeTraverseFunc" c:type="IdeTreeTraverseFunc">
      <doc xml:space="preserve"
           filename="src/libide/tree/ide-tree-node.h"
           line="58">This function prototype is used to traverse a tree of #IdeTreeNode.</doc>
      <source-position filename="src/libide/tree/ide-tree-node.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/tree/ide-tree-node.h"
             line="65">#IdeTreeNodeVisit, %IDE_TREE_NODE_VISIT_BREAK to stop traversal.</doc>
        <type name="TreeNodeVisit" c:type="IdeTreeNodeVisit"/>
      </return-value>
      <parameters>
        <parameter name="node" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.h"
               line="60">an #IdeTreeNode</doc>
          <type name="TreeNode" c:type="IdeTreeNode*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/libide/tree/ide-tree-node.h"
               line="61">closure data provided to ide_tree_node_traverse()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Triplet"
            c:type="IdeTriplet"
            opaque="1"
            glib:type-name="IdeTriplet"
            glib:get-type="ide_triplet_get_type"
            c:symbol-prefix="triplet">
      <source-position filename="src/libide/foundry/ide-foundry-types.h"
                       line="72"/>
      <constructor name="new" c:identifier="ide_triplet_new">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="57">Creates a new #IdeTriplet from a given identifier. This identifier
can be a simple architecture name, a duet of "arch-kernel" (like "m68k-coff"), a triplet
of "arch-kernel-os" (like "x86_64-linux-gnu") or a quadriplet of "arch-vendor-kernel-os"
(like "i686-pc-linux-gnu")</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="66">An #IdeTriplet.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <parameter name="full_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="59">The complete identifier of the machine</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_system"
                   c:identifier="ide_triplet_new_from_system">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="107">Creates a new #IdeTriplet from a the current system information</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="41"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="112">An #IdeTriplet.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_quadruplet"
                   c:identifier="ide_triplet_new_with_quadruplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="170">Creates a new #IdeTriplet from a given quadruplet of
"arch-vendor-kernel-os" (like "i686-pc-linux-gnu")</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="180">An #IdeTriplet.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <parameter name="arch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="172">The name of the architecture of the machine (like "x86_64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="vendor"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="173">The name of the vendor of the machine (like "pc")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="174">The name of the kernel of the machine (like "linux")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="operating_system"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="175">The name of the os of the machine (like "gnuabi64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_triplet"
                   c:identifier="ide_triplet_new_with_triplet">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="125">Creates a new #IdeTriplet from a given triplet of "arch-kernel-os"
(like "x86_64-linux-gnu")</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="135">An #IdeTriplet.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <parameter name="arch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="127">The name of the architecture of the machine (like "x86_64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kernel"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="128">The name of the kernel of the machine (like "linux")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="operating_system"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="129">The name of the os of the machine
(like "gnuabi64")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_arch" c:identifier="ide_triplet_get_arch">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="284">Gets the architecture name of the machine</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="290">The architecture name of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="286">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_full_name" c:identifier="ide_triplet_get_full_name">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="267">Gets the full name of the machine configuration name (can be an architecture name,
a duet, a triplet or a quadruplet).</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="274">The full name of the machine configuration name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="269">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernel" c:identifier="ide_triplet_get_kernel">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="316">Gets name of the kernel of the machine</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="62"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="322">The name of the kernel of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="318">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_operating_system"
              c:identifier="ide_triplet_get_operating_system">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="332">Gets name of the operating system of the machine</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="64"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="338">The name of the operating system of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="334">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor" c:identifier="ide_triplet_get_vendor">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="300">Gets the vendor name of the machine</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="306">The vendor name of the machine</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="302">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_system" c:identifier="ide_triplet_is_system">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="349">Gets whether this is the same architecture as the system</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="355">%TRUE if this is the same architecture as the system, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="351">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_triplet_ref">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="231">Increases the reference count of @self</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-triplet.c"
               line="237">An #IdeTriplet.</doc>
          <type name="Triplet" c:type="IdeTriplet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="233">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_triplet_unref">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-triplet.c"
             line="250">Decreases the reference count of @self
Once the reference count reaches 0, the object is freed.</doc>
        <source-position filename="src/libide/foundry/ide-triplet.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/foundry/ide-triplet.c"
                 line="252">An #IdeTriplet</doc>
            <type name="Triplet" c:type="IdeTriplet*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="TruncateModel"
           c:symbol-prefix="truncate_model"
           c:type="IdeTruncateModel"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeTruncateModel"
           glib:get-type="ide_truncate_model_get_type"
           glib:type-struct="TruncateModelClass">
      <source-position filename="src/libide/gtk/ide-truncate-model.h"
                       line="34"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new" c:identifier="ide_truncate_model_new">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-truncate-model.c"
             line="87">Create a new #IdeTruncateModel that wraps @child_model. Only
#IdeTruncateModel:max-items will be displayed until
#IdeTrunicateModel:expanded is set.</doc>
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-truncate-model.c"
               line="95">a newly created #IdeTruncateModel</doc>
          <type name="TruncateModel" c:type="IdeTruncateModel*"/>
        </return-value>
        <parameters>
          <parameter name="child_model" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-truncate-model.c"
                 line="89">a #GListModel</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_can_expand"
              c:identifier="ide_truncate_model_get_can_expand"
              glib:get-property="can-expand">
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TruncateModel" c:type="IdeTruncateModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_model"
              c:identifier="ide_truncate_model_get_child_model"
              glib:get-property="child-model">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-truncate-model.c"
             line="304">Gets the #IdeTruncateModel:child-model property.</doc>
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-truncate-model.c"
               line="309">a #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TruncateModel" c:type="IdeTruncateModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded"
              c:identifier="ide_truncate_model_get_expanded"
              glib:get-property="expanded">
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TruncateModel" c:type="IdeTruncateModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_items"
              c:identifier="ide_truncate_model_get_max_items"
              glib:get-property="max-items">
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TruncateModel" c:type="IdeTruncateModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_expanded"
              c:identifier="ide_truncate_model_set_expanded"
              glib:set-property="expanded">
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TruncateModel" c:type="IdeTruncateModel*"/>
          </instance-parameter>
          <parameter name="expanded" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_max_items"
              c:identifier="ide_truncate_model_set_max_items"
              glib:set-property="max-items">
        <source-position filename="src/libide/gtk/ide-truncate-model.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TruncateModel" c:type="IdeTruncateModel*"/>
          </instance-parameter>
          <parameter name="max_items" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-expand"
                transfer-ownership="none"
                getter="get_can_expand"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="child-model"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_child_model">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-truncate-model.c"
             line="208">The "child-model" property is the model to be trunicated.</doc>
        <type name="Gio.ListModel"/>
      </property>
      <property name="expanded"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded"
                getter="get_expanded"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="max-items"
                writable="1"
                transfer-ownership="none"
                setter="set_max_items"
                getter="get_max_items"
                default-value="4">
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="TruncateModelClass"
            c:type="IdeTruncateModelClass"
            glib:is-gtype-struct-for="TruncateModel">
      <source-position filename="src/libide/gtk/ide-truncate-model.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Tweaks"
           c:symbol-prefix="tweaks"
           c:type="IdeTweaks"
           parent="TweaksItem"
           final="1"
           glib:type-name="IdeTweaks"
           glib:get-type="ide_tweaks_get_type"
           glib:type-struct="TweaksClass">
      <source-position filename="src/libide/tweaks/ide-tweaks.h" line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_new">
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="37"/>
        <return-value transfer-ownership="full">
          <type name="Tweaks" c:type="IdeTweaks*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_context"
                   c:identifier="ide_tweaks_new_for_context">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks.c"
             line="288">Creates a new #IdeTweaks for @context.

If @context is %NULL, this function acts the same as ide_tweaks_new().

If @context is non-%NULL, this function will expose @context as
"IdeContext" to the templates as well as with the #IdeTweaks:context
property to make property bindings easier with lookup.

#IdeTweaks:project-id is also set when @context is non-%NULL.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks.c"
               line="302">a new #IdeTweaks</doc>
          <type name="Tweaks" c:type="IdeTweaks*"/>
        </return-value>
        <parameters>
          <parameter name="context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks.c"
                 line="290">an #IdeContext or %NULL</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_callback" c:identifier="ide_tweaks_add_callback">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks.c"
             line="230">Adds @callback to the scope used when expanding future templates
from @self.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks.c"
                 line="232">a #IdeTweaks</doc>
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks.c"
                 line="233">the name of the callback</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="forever">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks.c"
                 line="234">the callback represented by @name</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="expose_object" c:identifier="ide_tweaks_expose_object">
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="ide_tweaks_get_context"
              glib:get-property="context">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks.c"
             line="314">Gets the #IdeContext if any.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks.c"
               line="320">an #IdeContext or %NULL</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks.c"
                 line="316">a #IdeTweaks</doc>
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object" c:identifier="ide_tweaks_get_object">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks.c"
             line="270">Gets the object with @name.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks.c"
               line="276">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks.c"
                 line="272">a #IdeTweaks</doc>
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_project_id"
              c:identifier="ide_tweaks_get_project_id"
              glib:get-property="project-id">
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_from_file"
              c:identifier="ide_tweaks_load_from_file"
              throws="1">
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_project_id"
              c:identifier="ide_tweaks_set_project_id"
              glib:set-property="project-id">
        <source-position filename="src/libide/tweaks/ide-tweaks.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </instance-parameter>
          <parameter name="project_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_context">
        <type name="Context"/>
      </property>
      <property name="project-id"
                writable="1"
                transfer-ownership="none"
                setter="set_project_id"
                getter="get_project_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <class name="TweaksAddin"
           c:symbol-prefix="tweaks_addin"
           c:type="IdeTweaksAddin"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeTweaksAddin"
           glib:get-type="ide_tweaks_addin_get_type"
           glib:type-struct="TweaksAddinClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                       line="51"/>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
          <parameter name="tweaks" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
          <parameter name="tweaks" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_callback" c:identifier="ide_tweaks_addin_add_callback">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-addin.c"
             line="214">Adds @callback to @addin so that it is registered when the
tweaks template, set by ide_tweaks_addin_set_resource_path(),
is expanded by an #IdeTweaks.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-addin.c"
                 line="216">a #IdeTweaksAddin</doc>
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-addin.c"
                 line="217">the name of the callback within the template scope</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" scope="forever">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-addin.c"
                 line="218">the address of the callback</doc>
            <type name="GObject.Callback" c:type="GCallback"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_resource_paths"
              c:identifier="ide_tweaks_addin_get_resource_paths"
              glib:get-property="resource-paths">
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_tweaks_addin_load">
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
          <parameter name="tweaks" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resource_paths"
              c:identifier="ide_tweaks_addin_set_resource_paths"
              glib:set-property="resource-paths">
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
          <parameter name="resource_path" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_tweaks_addin_unload">
        <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
          </instance-parameter>
          <parameter name="tweaks" transfer-ownership="none">
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </parameter>
        </parameters>
      </method>
      <property name="resource-paths"
                writable="1"
                transfer-ownership="none"
                setter="set_resource_paths"
                getter="get_resource_paths">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TweaksAddinClass"
            c:type="IdeTweaksAddinClass"
            glib:is-gtype-struct-for="TweaksAddin">
      <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                       line="51"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
            </parameter>
            <parameter name="tweaks" transfer-ownership="none">
              <type name="Tweaks" c:type="IdeTweaks*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksAddin" c:type="IdeTweaksAddin*"/>
            </parameter>
            <parameter name="tweaks" transfer-ownership="none">
              <type name="Tweaks" c:type="IdeTweaks*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TweaksBinding"
           c:symbol-prefix="tweaks_binding"
           c:type="IdeTweaksBinding"
           parent="TweaksItem"
           abstract="1"
           glib:type-name="IdeTweaksBinding"
           glib:get-type="ide_tweaks_binding_get_type"
           glib:type-struct="TweaksBindingClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                       line="51"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="changed" invoker="changed">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_adjustment" invoker="create_adjustment">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-binding.c"
             line="492">Creates a new adjustment for the setting.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-binding.c"
               line="498">A #GtkAdjustment, or %NULL if
  an adjustment is not supported for the binding.</doc>
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="494">a #IdeTweaksBinding</doc>
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_expected_type">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_value" invoker="get_value">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_value" invoker="set_value">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="bind" c:identifier="ide_tweaks_binding_bind">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_with_transform"
              c:identifier="ide_tweaks_binding_bind_with_transform">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-binding.c"
             line="372">Binds the value with an optional transform.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="374">a #IdeTweaksBinding</doc>
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="instance"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="375">a #GObject</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="376">a property of @instance</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="get_transform"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="377">an #IdeTweaksBindingTransform or %NULL</doc>
            <type name="TweaksBindingTransform"
                  c:type="IdeTweaksBindingTransform"/>
          </parameter>
          <parameter name="set_transform"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="378">an #IdeTweaksBindingTransform or %NULL</doc>
            <type name="TweaksBindingTransform"
                  c:type="IdeTweaksBindingTransform"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="379">closure data for @get_transform and @set_transform</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="380">closure notify for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="changed" c:identifier="ide_tweaks_binding_changed">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_adjustment"
              c:identifier="ide_tweaks_binding_create_adjustment">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-binding.c"
             line="492">Creates a new adjustment for the setting.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="92"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-binding.c"
               line="498">A #GtkAdjustment, or %NULL if
  an adjustment is not supported for the binding.</doc>
          <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="494">a #IdeTweaksBinding</doc>
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_string" c:identifier="ide_tweaks_binding_dup_string">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-binding.c"
             line="434">Gets the current value as a newly allocated string.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="65"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-binding.c"
               line="440">a string or %NULL</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="436">a #IdeTweaksBinding</doc>
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_strv" c:identifier="ide_tweaks_binding_dup_strv">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-binding.c"
             line="512">Gets the value as a #GStrv.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="70"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-binding.c"
               line="518">A
  newly allocated string array, or %NULL</doc>
          <array c:type="char**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="514">a #IdeTweaksBinding</doc>
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expected_type"
              c:identifier="ide_tweaks_binding_get_expected_type">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-binding.c"
             line="144">Gets the expected type for a binding.

This is a best effort to determine the type and may end up being
different based on how bindings are applied.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-binding.c"
               line="154">%TRUE if succesful and @type is set, otherwise %FALSE and
  @type is set to %G_TYPE_INVALID.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="146">a #IdeTweaksBinding</doc>
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="147">a #GType</doc>
            <type name="GType" c:type="GType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="ide_tweaks_binding_get_value">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string" c:identifier="ide_tweaks_binding_set_string">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="string" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_strv" c:identifier="ide_tweaks_binding_set_strv">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="strv" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="ide_tweaks_binding_set_value">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variant" c:identifier="ide_tweaks_binding_set_variant">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
          <parameter name="variant" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unbind" c:identifier="ide_tweaks_binding_unbind">
        <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="TweaksItem" c:type="IdeTweaksItem"/>
      </field>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TweaksBindingClass"
            c:type="IdeTweaksBindingClass"
            glib:is-gtype-struct-for="TweaksBinding">
      <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                       line="51"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_value">
        <callback name="get_value">
          <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_value">
        <callback name="set_value">
          <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_expected_type">
        <callback name="get_expected_type">
          <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_adjustment">
        <callback name="create_adjustment">
          <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                           line="50"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-binding.c"
                 line="498">A #GtkAdjustment, or %NULL if
  an adjustment is not supported for the binding.</doc>
            <type name="Gtk.Adjustment" c:type="GtkAdjustment*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tweaks/ide-tweaks-binding.c"
                   line="494">a #IdeTweaksBinding</doc>
              <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="TweaksBindingTransform" c:type="IdeTweaksBindingTransform">
      <source-position filename="src/libide/tweaks/ide-tweaks-binding.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="from_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="to_value" transfer-ownership="none">
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TweaksCaption"
           c:symbol-prefix="tweaks_caption"
           c:type="IdeTweaksCaption"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksCaption"
           glib:get-type="ide_tweaks_caption_get_type"
           glib:type-struct="TweaksCaptionClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-caption.h"
                       line="30"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_caption_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-caption.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <type name="TweaksCaption" c:type="IdeTweaksCaption*"/>
        </return-value>
      </constructor>
      <method name="get_text"
              c:identifier="ide_tweaks_caption_get_text"
              glib:get-property="text">
        <source-position filename="src/libide/tweaks/ide-tweaks-caption.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksCaption" c:type="IdeTweaksCaption*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_text"
              c:identifier="ide_tweaks_caption_set_text"
              glib:set-property="text">
        <source-position filename="src/libide/tweaks/ide-tweaks-caption.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksCaption" c:type="IdeTweaksCaption*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="text"
                writable="1"
                transfer-ownership="none"
                setter="set_text"
                getter="get_text"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksCaptionClass"
            c:type="IdeTweaksCaptionClass"
            glib:is-gtype-struct-for="TweaksCaption">
      <source-position filename="src/libide/tweaks/ide-tweaks-caption.h"
                       line="30"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksChoice"
           c:symbol-prefix="tweaks_choice"
           c:type="IdeTweaksChoice"
           parent="TweaksItem"
           final="1"
           glib:type-name="IdeTweaksChoice"
           glib:get-type="ide_tweaks_choice_get_type"
           glib:type-struct="TweaksChoiceClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_choice_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
        </return-value>
      </constructor>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_choice_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_choice_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_tweaks_choice_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="49"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-choice.c"
               line="166">A #GVariant or %NULL</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-choice.c"
                 line="164">a #IdeTweaksChoice</doc>
            <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_choice_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_choice_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_tweaks_choice_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksChoice" c:type="IdeTweaksChoice*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value">
        <type name="GLib.Variant"/>
      </property>
    </class>
    <record name="TweaksChoiceClass"
            c:type="IdeTweaksChoiceClass"
            glib:is-gtype-struct-for="TweaksChoice">
      <source-position filename="src/libide/tweaks/ide-tweaks-choice.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
    </record>
    <record name="TweaksClass"
            c:type="IdeTweaksClass"
            glib:is-gtype-struct-for="Tweaks">
      <source-position filename="src/libide/tweaks/ide-tweaks.h" line="34"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
    </record>
    <class name="TweaksCombo"
           c:symbol-prefix="tweaks_combo"
           c:type="IdeTweaksCombo"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksCombo"
           glib:get-type="ide_tweaks_combo_get_type"
           glib:type-struct="TweaksComboClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_combo_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksCombo" c:type="IdeTweaksCombo*"/>
        </return-value>
      </constructor>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_combo_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksCombo" c:type="IdeTweaksCombo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_combo_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksCombo" c:type="IdeTweaksCombo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_combo_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksCombo" c:type="IdeTweaksCombo*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_combo_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksCombo" c:type="IdeTweaksCombo*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksComboClass"
            c:type="IdeTweaksComboClass"
            glib:is-gtype-struct-for="TweaksCombo">
      <source-position filename="src/libide/tweaks/ide-tweaks-combo.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksComboRow"
           c:symbol-prefix="tweaks_combo_row"
           c:type="IdeTweaksComboRow"
           parent="Adw.ComboRow"
           final="1"
           glib:type-name="IdeTweaksComboRow"
           glib:get-type="ide_tweaks_combo_row_get_type"
           glib:type-struct="TweaksComboRowClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-combo-row.h"
                       line="30"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <property name="binding"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="TweaksBinding"/>
      </property>
    </class>
    <record name="TweaksComboRowClass"
            c:type="IdeTweaksComboRowClass"
            glib:is-gtype-struct-for="TweaksComboRow">
      <source-position filename="src/libide/tweaks/ide-tweaks-combo-row.h"
                       line="30"/>
      <field name="parent_class">
        <type name="Adw.ComboRowClass" c:type="AdwComboRowClass"/>
      </field>
    </record>
    <class name="TweaksDirectory"
           c:symbol-prefix="tweaks_directory"
           c:type="IdeTweaksDirectory"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksDirectory"
           glib:get-type="ide_tweaks_directory_get_type"
           glib:type-struct="TweaksDirectoryClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_directory_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
        </return-value>
      </constructor>
      <method name="get_is_directory"
              c:identifier="ide_tweaks_directory_get_is_directory"
              glib:get-property="is-directory">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_directory_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_directory_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_is_directory"
              c:identifier="ide_tweaks_directory_set_is_directory"
              glib:set-property="is-directory">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
          </instance-parameter>
          <parameter name="is_directory" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_directory_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_directory_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksDirectory" c:type="IdeTweaksDirectory*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="is-directory"
                writable="1"
                transfer-ownership="none"
                setter="set_is_directory"
                getter="get_is_directory"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksDirectoryClass"
            c:type="IdeTweaksDirectoryClass"
            glib:is-gtype-struct-for="TweaksDirectory">
      <source-position filename="src/libide/tweaks/ide-tweaks-directory.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksEntry"
           c:symbol-prefix="tweaks_entry"
           c:type="IdeTweaksEntry"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksEntry"
           glib:get-type="ide_tweaks_entry_get_type"
           glib:type-struct="TweaksEntryClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-entry.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_entry_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-entry.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksEntry" c:type="IdeTweaksEntry*"/>
        </return-value>
      </constructor>
      <method name="get_title"
              c:identifier="ide_tweaks_entry_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-entry.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksEntry" c:type="IdeTweaksEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_entry_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-entry.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksEntry" c:type="IdeTweaksEntry*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksEntryClass"
            c:type="IdeTweaksEntryClass"
            glib:is-gtype-struct-for="TweaksEntry">
      <source-position filename="src/libide/tweaks/ide-tweaks-entry.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksFactory"
           c:symbol-prefix="tweaks_factory"
           c:type="IdeTweaksFactory"
           parent="TweaksItem"
           final="1"
           glib:type-name="IdeTweaksFactory"
           glib:get-type="ide_tweaks_factory_get_type"
           glib:type-struct="TweaksFactoryClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                       line="30"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_factory_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <type name="TweaksFactory" c:type="IdeTweaksFactory*"/>
        </return-value>
      </constructor>
      <method name="get_item"
              c:identifier="ide_tweaks_factory_get_item"
              glib:get-property="item">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-factory.c"
             line="302">Gets the item for the factory while it is being built.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                         line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-factory.c"
               line="308">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-factory.c"
                 line="304">a #IdeTweaksFactory</doc>
            <type name="TweaksFactory" c:type="IdeTweaksFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="ide_tweaks_factory_get_model"
              glib:get-property="model">
        <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                         line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-factory.c"
               line="140">a #GListModel or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-factory.c"
                 line="138">a #IdeTweaksFactory</doc>
            <type name="TweaksFactory" c:type="IdeTweaksFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="ide_tweaks_factory_set_model"
              glib:set-property="model">
        <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksFactory" c:type="IdeTweaksFactory*"/>
          </instance-parameter>
          <parameter name="model" transfer-ownership="none">
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="visit" c:identifier="ide_tweaks_factory_visit">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-factory.c"
             line="224">Like ide_tweaks_item_visit_children() but works on each factory-created
child of @self.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-factory.c"
               line="233">%TRUE if @visitor prematurely stopped.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-factory.c"
                 line="226">a #IdeTweaksFactory</doc>
            <type name="TweaksFactory" c:type="IdeTweaksFactory*"/>
          </instance-parameter>
          <parameter name="visitor"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-factory.c"
                 line="227">visitor callback</doc>
            <type name="TweaksItemVisitor" c:type="IdeTweaksItemVisitor"/>
          </parameter>
          <parameter name="visitor_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-factory.c"
                 line="228">closure data for @visitor</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="item" transfer-ownership="none" getter="get_item">
        <type name="GObject.Object"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Gio.ListModel"/>
      </property>
    </class>
    <record name="TweaksFactoryClass"
            c:type="IdeTweaksFactoryClass"
            glib:is-gtype-struct-for="TweaksFactory">
      <source-position filename="src/libide/tweaks/ide-tweaks-factory.h"
                       line="30"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
    </record>
    <class name="TweaksFont"
           c:symbol-prefix="tweaks_font"
           c:type="IdeTweaksFont"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksFont"
           glib:get-type="ide_tweaks_font_get_type"
           glib:type-struct="TweaksFontClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_font_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksFont" c:type="IdeTweaksFont*"/>
        </return-value>
      </constructor>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_font_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksFont" c:type="IdeTweaksFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_font_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksFont" c:type="IdeTweaksFont*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_font_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksFont" c:type="IdeTweaksFont*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_font_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksFont" c:type="IdeTweaksFont*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksFontClass"
            c:type="IdeTweaksFontClass"
            glib:is-gtype-struct-for="TweaksFont">
      <source-position filename="src/libide/tweaks/ide-tweaks-font.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksGroup"
           c:symbol-prefix="tweaks_group"
           c:type="IdeTweaksGroup"
           parent="TweaksItem"
           final="1"
           glib:type-name="IdeTweaksGroup"
           glib:get-type="ide_tweaks_group_get_type"
           glib:type-struct="TweaksGroupClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-group.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_group_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-group.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksGroup" c:type="IdeTweaksGroup*"/>
        </return-value>
      </constructor>
      <method name="get_title"
              c:identifier="ide_tweaks_group_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-group.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksGroup" c:type="IdeTweaksGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_group_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-group.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksGroup" c:type="IdeTweaksGroup*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksGroupClass"
            c:type="IdeTweaksGroupClass"
            glib:is-gtype-struct-for="TweaksGroup">
      <source-position filename="src/libide/tweaks/ide-tweaks-group.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
    </record>
    <class name="TweaksInfo"
           c:symbol-prefix="tweaks_info"
           c:type="IdeTweaksInfo"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksInfo"
           glib:get-type="ide_tweaks_info_get_type"
           glib:type-struct="TweaksInfoClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_info_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksInfo" c:type="IdeTweaksInfo*"/>
        </return-value>
      </constructor>
      <method name="get_title"
              c:identifier="ide_tweaks_info_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksInfo" c:type="IdeTweaksInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_tweaks_info_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksInfo" c:type="IdeTweaksInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_info_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksInfo" c:type="IdeTweaksInfo*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_tweaks_info_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksInfo" c:type="IdeTweaksInfo*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksInfoClass"
            c:type="IdeTweaksInfoClass"
            glib:is-gtype-struct-for="TweaksInfo">
      <source-position filename="src/libide/tweaks/ide-tweaks-info.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksItem"
           c:symbol-prefix="tweaks_item"
           c:type="IdeTweaksItem"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="IdeTweaksItem"
           glib:get-type="ide_tweaks_item_get_type"
           glib:type-struct="TweaksItemClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                       line="66"/>
      <implements name="Gtk.Buildable"/>
      <virtual-method name="accepts">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="copy" invoker="copy">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="704">Does a deep copy starting from @self.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="710">an #IdeTweaksItem</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="706">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="match" invoker="match">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="copy" c:identifier="ide_tweaks_item_copy">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="704">Does a deep copy starting from @self.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="710">an #IdeTweaksItem</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="706">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ancestor" c:identifier="ide_tweaks_item_get_ancestor">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="738">Finds the first ancestor of @self matching the #GType @ancestor_type.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="109"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="745">an #IdeTweaksItem or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="740">an #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="ancestor_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="741">the #GType of #IdeTweaksItem or subclass</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_first_child"
              c:identifier="ide_tweaks_item_get_first_child">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="325">Gets the first child of @self.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="95"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="331">a #IdeTweaksItem or %NULL</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="327">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hidden_when"
              c:identifier="ide_tweaks_item_get_hidden_when"
              glib:get-property="hidden-when">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_tweaks_item_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_keywords"
              c:identifier="ide_tweaks_item_get_keywords"
              glib:get-property="keywords">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <array c:type="const char* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_child"
              c:identifier="ide_tweaks_item_get_last_child">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="343">Gets the last child of @self.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="93"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="349">a #IdeTweaksItem or %NULL</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="345">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_next_sibling"
              c:identifier="ide_tweaks_item_get_next_sibling">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="382">Gets the next sibling within the parent.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="99"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="388">A #IdeTweaksItem or %NULL</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="384">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="ide_tweaks_item_get_parent">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="477">Gets the parent #IdeTweaksItem</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="91"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="483">the parent #IdeTweaksItem or %NULL</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="479">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_previous_sibling"
              c:identifier="ide_tweaks_item_get_previous_sibling">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="361">Gets the previous sibling within the parent.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="97"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="367">A #IdeTweaksItem or %NULL</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="363">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root" c:identifier="ide_tweaks_item_get_root">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="814">Gets the root #IdeTweaksItem.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="820">the top-most #IdeTweaksItem</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="816">a #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_after" c:identifier="ide_tweaks_item_insert_after">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
          <parameter name="previous_sibling" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="insert_before"
              c:identifier="ide_tweaks_item_insert_before">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
          <parameter name="next_sibling" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ancestor" c:identifier="ide_tweaks_item_is_ancestor">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="ancestor" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="match" c:identifier="ide_tweaks_item_match">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="spec" transfer-ownership="none">
            <type name="PatternSpec" c:type="IdePatternSpec*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hidden_when"
              c:identifier="ide_tweaks_item_set_hidden_when"
              glib:set-property="hidden-when">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="279">Sets the "hidden-when" property.

Use this to hide #IdeTweaksItem in situations where they should
not be visible. Generally this is used to hide items when the
#IdeTweaksWindow is in project or application mode.

Currently supported values include:

 - "application" to hide when in application-mode
 - "project" to hide when in project-mode

Items that are hidden will not be visited by ide_tweaks_item_visit_children().</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="281">an #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="hidden_when"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="282">the value for when the item is hidden</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_keywords"
              c:identifier="ide_tweaks_item_set_keywords"
              glib:set-property="keywords">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="keywords" transfer-ownership="none">
            <type name="utf8" c:type="const char* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unparent" c:identifier="ide_tweaks_item_unparent">
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="visit_children"
              c:identifier="ide_tweaks_item_visit_children">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.c"
             line="765">Calls @visitor for every matching item.

Based on the result of @visitor, items may be recursed into.

It is an error to modify @self or any descendant from @visitor.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.c"
               line="777">%TRUE if %IDE_TWEAKS_ITEM_VISIT_STOP was returned; otherwise
  %FALSE is returned.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="767">an #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </instance-parameter>
          <parameter name="visitor"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="768">an #IdeTweaksItemVistor to callback</doc>
            <type name="TweaksItemVisitor" c:type="IdeTweaksItemVisitor"/>
          </parameter>
          <parameter name="visitor_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="769">closure data for @visitor</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="hidden-when"
                writable="1"
                transfer-ownership="none"
                setter="set_hidden_when"
                getter="get_hidden_when"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                transfer-ownership="none"
                getter="get_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="keywords"
                writable="1"
                transfer-ownership="none"
                setter="set_keywords"
                getter="get_keywords">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="TweaksItemClass"
            c:type="IdeTweaksItemClass"
            glib:is-gtype-struct-for="TweaksItem">
      <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                       line="66"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="accepts">
        <callback name="accepts">
          <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksItem" c:type="IdeTweaksItem*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="TweaksItem" c:type="IdeTweaksItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="copy">
        <callback name="copy">
          <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                           line="63"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-item.c"
                 line="710">an #IdeTweaksItem</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/tweaks/ide-tweaks-item.c"
                   line="706">a #IdeTweaksItem</doc>
              <type name="TweaksItem" c:type="IdeTweaksItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="match">
        <callback name="match">
          <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksItem" c:type="IdeTweaksItem*"/>
            </parameter>
            <parameter name="spec" transfer-ownership="none">
              <type name="PatternSpec" c:type="IdePatternSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="TweaksItemVisitResult"
                 c:type="IdeTweaksItemVisitResult">
      <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                       line="38"/>
      <member name="stop" value="1" c:identifier="IDE_TWEAKS_ITEM_VISIT_STOP">
      </member>
      <member name="continue"
              value="2"
              c:identifier="IDE_TWEAKS_ITEM_VISIT_CONTINUE">
      </member>
      <member name="recurse"
              value="3"
              c:identifier="IDE_TWEAKS_ITEM_VISIT_RECURSE">
      </member>
      <member name="accept_and_continue"
              value="4"
              c:identifier="IDE_TWEAKS_ITEM_VISIT_ACCEPT_AND_CONTINUE">
      </member>
    </enumeration>
    <callback name="TweaksItemVisitor" c:type="IdeTweaksItemVisitor">
      <doc xml:space="preserve"
           filename="src/libide/tweaks/ide-tweaks-item.h"
           line="45">Called for every matching item while visiting the item graph.</doc>
      <source-position filename="src/libide/tweaks/ide-tweaks-item.h"
                       line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-item.h"
             line="52">an #IdeTweaksItemVisitResult</doc>
        <type name="TweaksItemVisitResult" c:type="IdeTweaksItemVisitResult"/>
      </return-value>
      <parameters>
        <parameter name="item" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.h"
               line="47">an #IdeTweaksItem being visited</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-item.h"
               line="48">user data provided</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="TweaksPage"
           c:symbol-prefix="tweaks_page"
           c:type="IdeTweaksPage"
           parent="TweaksItem"
           final="1"
           glib:type-name="IdeTweaksPage"
           glib:get-type="ide_tweaks_page_get_type"
           glib:type-struct="TweaksPageClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                       line="31"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_page_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="34"/>
        <return-value transfer-ownership="full">
          <type name="TweaksPage" c:type="IdeTweaksPage*"/>
        </return-value>
      </constructor>
      <method name="get_has_subpage"
              c:identifier="ide_tweaks_page_get_has_subpage"
              glib:get-property="has-subpage">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-page.c"
             line="321">Checks if @page has a subpage or a factory that can generate subpages.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-page.c"
               line="327">%TRUE if @self might have a subpage</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-page.c"
                 line="323">a #IdeTweaksPage</doc>
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="ide_tweaks_page_get_icon_name"
              glib:get-property="icon-name">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="36"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_section"
              c:identifier="ide_tweaks_page_get_section"
              glib:get-property="section">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-page.c"
             line="294">Gets the section containing the page.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-page.c"
               line="300">an #IdeTweaksItem or %NULL</doc>
          <type name="TweaksItem" c:type="IdeTweaksItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-page.c"
                 line="296">a #IdeTweaksPage</doc>
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_icon"
              c:identifier="ide_tweaks_page_get_show_icon"
              glib:get-property="show-icon">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_search"
              c:identifier="ide_tweaks_page_get_show_search"
              glib:get-property="show-search">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_page_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="ide_tweaks_page_set_icon_name"
              glib:set-property="icon-name">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_icon"
              c:identifier="ide_tweaks_page_set_show_icon"
              glib:set-property="show-icon">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
          <parameter name="show_icon" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_search"
              c:identifier="ide_tweaks_page_set_show_search"
              glib:set-property="show-search">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
          <parameter name="show_search" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_page_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksPage" c:type="IdeTweaksPage*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-subpage"
                transfer-ownership="none"
                getter="get_has_subpage"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="section" transfer-ownership="none" getter="get_section">
        <type name="TweaksSection"/>
      </property>
      <property name="show-icon"
                writable="1"
                transfer-ownership="none"
                setter="set_show_icon"
                getter="get_show_icon"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-search"
                writable="1"
                transfer-ownership="none"
                setter="set_show_search"
                getter="get_show_search"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksPageClass"
            c:type="IdeTweaksPageClass"
            glib:is-gtype-struct-for="TweaksPage">
      <source-position filename="src/libide/tweaks/ide-tweaks-page.h"
                       line="31"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
    </record>
    <class name="TweaksProperty"
           c:symbol-prefix="tweaks_property"
           c:type="IdeTweaksProperty"
           parent="TweaksBinding"
           final="1"
           glib:type-name="IdeTweaksProperty"
           glib:get-type="ide_tweaks_property_get_type"
           glib:type-struct="TweaksPropertyClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_property_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksProperty" c:type="IdeTweaksProperty*"/>
        </return-value>
      </constructor>
      <method name="dup_object" c:identifier="ide_tweaks_property_dup_object">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-property.c"
             line="393">Gets the object to tweak the property of.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                         line="39"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-property.c"
               line="399">a #GObject or %NULL</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-property.c"
                 line="395">a #IdeTweaksProperty</doc>
            <type name="TweaksProperty" c:type="IdeTweaksProperty*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="ide_tweaks_property_get_name"
              glib:get-property="name">
        <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksProperty" c:type="IdeTweaksProperty*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="ide_tweaks_property_set_name"
              glib:set-property="name">
        <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksProperty" c:type="IdeTweaksProperty*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object"
              c:identifier="ide_tweaks_property_set_object"
              glib:set-property="object">
        <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksProperty" c:type="IdeTweaksProperty*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="object"
                writable="1"
                transfer-ownership="none"
                setter="set_object">
        <type name="GObject.Object"/>
      </property>
    </class>
    <record name="TweaksPropertyClass"
            c:type="IdeTweaksPropertyClass"
            glib:is-gtype-struct-for="TweaksProperty">
      <source-position filename="src/libide/tweaks/ide-tweaks-property.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksBindingClass" c:type="IdeTweaksBindingClass"/>
      </field>
    </record>
    <class name="TweaksRadio"
           c:symbol-prefix="tweaks_radio"
           c:type="IdeTweaksRadio"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksRadio"
           glib:get-type="ide_tweaks_radio_get_type"
           glib:type-struct="TweaksRadioClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                       line="30"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_radio_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
        </return-value>
      </constructor>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_radio_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_radio_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="ide_tweaks_radio_get_value"
              glib:get-property="value">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="45"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-radio.c"
               line="349">a #GVariant or %NULL</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-radio.c"
                 line="347">a #IdeTweaksRadio</doc>
            <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_radio_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_radio_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="ide_tweaks_radio_set_value"
              glib:set-property="value">
        <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksRadio" c:type="IdeTweaksRadio*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value">
        <type name="GLib.Variant"/>
      </property>
    </class>
    <record name="TweaksRadioClass"
            c:type="IdeTweaksRadioClass"
            glib:is-gtype-struct-for="TweaksRadio">
      <source-position filename="src/libide/tweaks/ide-tweaks-radio.h"
                       line="30"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksSection"
           c:symbol-prefix="tweaks_section"
           c:type="IdeTweaksSection"
           parent="TweaksItem"
           final="1"
           glib:type-name="IdeTweaksSection"
           glib:get-type="ide_tweaks_section_get_type"
           glib:type-struct="TweaksSectionClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_section_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksSection" c:type="IdeTweaksSection*"/>
        </return-value>
      </constructor>
      <method name="get_show_header"
              c:identifier="ide_tweaks_section_get_show_header"
              glib:get-property="show-header">
        <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSection" c:type="IdeTweaksSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_section_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSection" c:type="IdeTweaksSection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_header"
              c:identifier="ide_tweaks_section_set_show_header"
              glib:set-property="show-header">
        <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSection" c:type="IdeTweaksSection*"/>
          </instance-parameter>
          <parameter name="show_header" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_section_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSection" c:type="IdeTweaksSection*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="show-header"
                writable="1"
                transfer-ownership="none"
                setter="set_show_header"
                getter="get_show_header"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksSectionClass"
            c:type="IdeTweaksSectionClass"
            glib:is-gtype-struct-for="TweaksSection">
      <source-position filename="src/libide/tweaks/ide-tweaks-section.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
    </record>
    <class name="TweaksSetting"
           c:symbol-prefix="tweaks_setting"
           c:type="IdeTweaksSetting"
           parent="TweaksBinding"
           final="1"
           glib:type-name="IdeTweaksSetting"
           glib:get-type="ide_tweaks_setting_get_type"
           glib:type-struct="TweaksSettingClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_setting_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
        </return-value>
      </constructor>
      <method name="get_path_suffix"
              c:identifier="ide_tweaks_setting_get_path_suffix"
              glib:get-property="path-suffix">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_schema_id"
              c:identifier="ide_tweaks_setting_get_schema_id"
              glib:get-property="schema-id">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_schema_key"
              c:identifier="ide_tweaks_setting_get_schema_key"
              glib:get-property="schema-key">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_path_suffix"
              c:identifier="ide_tweaks_setting_set_path_suffix"
              glib:set-property="path-suffix">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
          </instance-parameter>
          <parameter name="path_suffix" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_schema_id"
              c:identifier="ide_tweaks_setting_set_schema_id"
              glib:set-property="schema-id">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
          </instance-parameter>
          <parameter name="schema_id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_schema_key"
              c:identifier="ide_tweaks_setting_set_schema_key"
              glib:set-property="schema-key">
        <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSetting" c:type="IdeTweaksSetting*"/>
          </instance-parameter>
          <parameter name="schema_key" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="path-suffix"
                writable="1"
                transfer-ownership="none"
                setter="set_path_suffix"
                getter="get_path_suffix"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-id"
                writable="1"
                transfer-ownership="none"
                setter="set_schema_id"
                getter="get_schema_id"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="schema-key"
                writable="1"
                transfer-ownership="none"
                setter="set_schema_key"
                getter="get_schema_key"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksSettingClass"
            c:type="IdeTweaksSettingClass"
            glib:is-gtype-struct-for="TweaksSetting">
      <source-position filename="src/libide/tweaks/ide-tweaks-setting.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksBindingClass" c:type="IdeTweaksBindingClass"/>
      </field>
    </record>
    <class name="TweaksSpin"
           c:symbol-prefix="tweaks_spin"
           c:type="IdeTweaksSpin"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksSpin"
           glib:get-type="ide_tweaks_spin_get_type"
           glib:type-struct="TweaksSpinClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                       line="34"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_spin_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
        </return-value>
      </constructor>
      <method name="get_digits"
              c:identifier="ide_tweaks_spin_get_digits"
              glib:get-property="digits">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_spin_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_spin_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_digits"
              c:identifier="ide_tweaks_spin_set_digits"
              glib:set-property="digits">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
          </instance-parameter>
          <parameter name="digits" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_spin_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_spin_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSpin" c:type="IdeTweaksSpin*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="digits"
                writable="1"
                transfer-ownership="none"
                setter="set_digits"
                getter="get_digits"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksSpinClass"
            c:type="IdeTweaksSpinClass"
            glib:is-gtype-struct-for="TweaksSpin">
      <source-position filename="src/libide/tweaks/ide-tweaks-spin.h"
                       line="34"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksSwitch"
           c:symbol-prefix="tweaks_switch"
           c:type="IdeTweaksSwitch"
           parent="TweaksWidget"
           final="1"
           glib:type-name="IdeTweaksSwitch"
           glib:get-type="ide_tweaks_switch_get_type"
           glib:type-struct="TweaksSwitchClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                       line="30"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_switch_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                         line="33"/>
        <return-value transfer-ownership="full">
          <type name="TweaksSwitch" c:type="IdeTweaksSwitch*"/>
        </return-value>
      </constructor>
      <method name="get_subtitle"
              c:identifier="ide_tweaks_switch_get_subtitle"
              glib:get-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSwitch" c:type="IdeTweaksSwitch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="ide_tweaks_switch_get_title"
              glib:get-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                         line="35"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSwitch" c:type="IdeTweaksSwitch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="ide_tweaks_switch_set_subtitle"
              glib:set-property="subtitle">
        <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSwitch" c:type="IdeTweaksSwitch*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="ide_tweaks_switch_set_title"
              glib:set-property="title">
        <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                         line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksSwitch" c:type="IdeTweaksSwitch*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="TweaksSwitchClass"
            c:type="IdeTweaksSwitchClass"
            glib:is-gtype-struct-for="TweaksSwitch">
      <source-position filename="src/libide/tweaks/ide-tweaks-switch.h"
                       line="30"/>
      <field name="parent_class">
        <type name="TweaksWidgetClass" c:type="IdeTweaksWidgetClass"/>
      </field>
    </record>
    <class name="TweaksWidget"
           c:symbol-prefix="tweaks_widget"
           c:type="IdeTweaksWidget"
           parent="TweaksItem"
           glib:type-name="IdeTweaksWidget"
           glib:get-type="ide_tweaks_widget_get_type"
           glib:type-struct="TweaksWidgetClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                       line="45"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="ide_tweaks_widget_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <type name="TweaksWidget" c:type="IdeTweaksWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="create_for_item" introspectable="0">
        <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                         line="43"/>
        <return-value>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksWidget" c:type="IdeTweaksWidget*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_binding"
              c:identifier="ide_tweaks_widget_get_binding"
              glib:get-property="binding">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-widget.c"
             line="234">Gets the binding for the widget.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                         line="50"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-widget.c"
               line="240">an #IdeTweaksBinding or %NULL</doc>
          <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-widget.c"
                 line="236">a #IdeTweaksWidget</doc>
            <type name="TweaksWidget" c:type="IdeTweaksWidget*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_binding"
              c:identifier="ide_tweaks_widget_set_binding"
              glib:set-property="binding">
        <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksWidget" c:type="IdeTweaksWidget*"/>
          </instance-parameter>
          <parameter name="binding" transfer-ownership="none">
            <type name="TweaksBinding" c:type="IdeTweaksBinding*"/>
          </parameter>
        </parameters>
      </method>
      <property name="binding"
                writable="1"
                transfer-ownership="none"
                setter="set_binding"
                getter="get_binding">
        <type name="TweaksBinding"/>
      </property>
      <field name="parent_instance">
        <type name="TweaksItem" c:type="IdeTweaksItem"/>
      </field>
      <glib:signal name="create-for-item" when="last">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-widget.c"
             line="173">Creates a new #GtkWidget that can be inserted into the #IdeTweaksWindow
representing the item.

@item is the original item (which might be a clone) to create the
widget for.

Only the first signal handler is used.</doc>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-widget.c"
               line="186">a #GtkWidget or %NULL</doc>
          <type name="Gtk.Widget"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-widget.c"
                 line="176">the original #IdeTweaksItem which might be a clone</doc>
            <type name="TweaksItem"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TweaksWidgetClass"
            c:type="IdeTweaksWidgetClass"
            glib:is-gtype-struct-for="TweaksWidget">
      <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                       line="45"/>
      <field name="parent_class">
        <type name="TweaksItemClass" c:type="IdeTweaksItemClass"/>
      </field>
      <field name="create_for_item" introspectable="0">
        <callback name="create_for_item" introspectable="0">
          <source-position filename="src/libide/tweaks/ide-tweaks-widget.h"
                           line="43"/>
          <return-value>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="TweaksWidget" c:type="IdeTweaksWidget*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <type name="TweaksItem" c:type="IdeTweaksItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TweaksWindow"
           c:symbol-prefix="tweaks_window"
           c:type="IdeTweaksWindow"
           parent="Adw.Window"
           final="1"
           glib:type-name="IdeTweaksWindow"
           glib:get-type="ide_tweaks_window_get_type"
           glib:type-struct="TweaksWindowClass">
      <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                       line="36"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <constructor name="new" c:identifier="ide_tweaks_window_new">
        <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_tweaks"
              c:identifier="ide_tweaks_window_get_tweaks"
              glib:get-property="tweaks">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-window.c"
             line="401">Gets the tweaks property of the window.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/tweaks/ide-tweaks-window.c"
               line="407">an #IdeTweaks or %NULL</doc>
          <type name="Tweaks" c:type="IdeTweaks*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-window.c"
                 line="403">a #IdeTweaksWindow</doc>
            <type name="TweaksWindow" c:type="IdeTweaksWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="navigate_initial"
              c:identifier="ide_tweaks_window_navigate_initial">
        <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="TweaksWindow" c:type="IdeTweaksWindow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="navigate_to" c:identifier="ide_tweaks_window_navigate_to">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-window.c"
             line="450">Navigates to @item.

If @item is %NULL and #IdeTweaksWindow:tweaks is set, then navigates
to the topmost item.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-window.c"
                 line="452">a #IdeTweaksWindow</doc>
            <type name="TweaksWindow" c:type="IdeTweaksWindow*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-window.c"
                 line="453">an #IdeTweaksItem or %NULL</doc>
            <type name="TweaksItem" c:type="IdeTweaksItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_tweaks"
              c:identifier="ide_tweaks_window_set_tweaks"
              glib:set-property="tweaks">
        <doc xml:space="preserve"
             filename="src/libide/tweaks/ide-tweaks-window.c"
             line="417">Sets the tweaks to be displayed in the window.</doc>
        <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-window.c"
                 line="419">a #IdeTweaksWindow</doc>
            <type name="TweaksWindow" c:type="IdeTweaksWindow*"/>
          </instance-parameter>
          <parameter name="tweaks"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/tweaks/ide-tweaks-window.c"
                 line="420">an #IdeTweaks</doc>
            <type name="Tweaks" c:type="IdeTweaks*"/>
          </parameter>
        </parameters>
      </method>
      <property name="folded"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="tweaks"
                writable="1"
                transfer-ownership="none"
                setter="set_tweaks"
                getter="get_tweaks">
        <type name="Tweaks"/>
      </property>
    </class>
    <record name="TweaksWindowClass"
            c:type="IdeTweaksWindowClass"
            glib:is-gtype-struct-for="TweaksWindow">
      <source-position filename="src/libide/tweaks/ide-tweaks-window.h"
                       line="36"/>
      <field name="parent_class">
        <type name="Adw.WindowClass" c:type="AdwWindowClass"/>
      </field>
    </record>
    <function-macro name="UNAVAILABLE"
                    c:identifier="IDE_UNAVAILABLE"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-version-macros.h"
                       line="36"/>
      <parameters>
        <parameter name="maj">
        </parameter>
        <parameter name="min">
        </parameter>
      </parameters>
    </function-macro>
    <class name="UniqueListModel"
           c:symbol-prefix="unique_list_model"
           c:type="IdeUniqueListModel"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeUniqueListModel"
           glib:get-type="ide_unique_list_model_get_type"
           glib:type-struct="UniqueListModelClass">
      <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                       line="35"/>
      <implements name="Gio.ListModel"/>
      <constructor name="new"
                   c:identifier="ide_unique_list_model_new"
                   version="44">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-unique-list-model.c"
             line="453">Creates a new #IdeUniqueListModel which can deduplicate items
which are sequential.</doc>
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-unique-list-model.c"
               line="461">an #IdeUniqueListModel</doc>
          <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
        </return-value>
        <parameters>
          <parameter name="model"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="455">a #GListModel or %NULL</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="sorter"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="456">a #GtkSorter or %NULL</doc>
            <type name="Gtk.Sorter" c:type="GtkSorter*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_incremental"
              c:identifier="ide_unique_list_model_get_incremental"
              glib:get-property="incremental"
              version="44">
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="570">a #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="ide_unique_list_model_get_model"
              glib:get-property="model"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-unique-list-model.c"
             line="485">Gets the underlying model.</doc>
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="41"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-unique-list-model.c"
               line="491">a #GListModel</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="487">a #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pending"
              c:identifier="ide_unique_list_model_get_pending"
              glib:get-property="pending">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-unique-list-model.c"
             line="605">Returns the number of items that have not yet been filtered.

You can use this value to check if @self is busy filtering by
comparing the return value to 0 or you can compute the percentage
of the filter remaining by dividing the return value by the total
number of items in the underlying model:</doc>
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-unique-list-model.c"
               line="616">The number of items noet yet filtered</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="607">an #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sorter"
              c:identifier="ide_unique_list_model_get_sorter"
              glib:get-property="sorter"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-unique-list-model.c"
             line="527">Get the #GtkSorter used to deduplicate items.</doc>
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-unique-list-model.c"
               line="533">a GtkSorter or %NULL</doc>
          <type name="Gtk.Sorter" c:type="GtkSorter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="529">a #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_incremental"
              c:identifier="ide_unique_list_model_set_incremental"
              glib:set-property="incremental"
              version="44">
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="584">a #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
          <parameter name="incremental" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="585">if filtering should be incremental</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="ide_unique_list_model_set_model"
              glib:set-property="model"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-unique-list-model.c"
             line="503">Sets the underlying model to be deduplicated.</doc>
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="505">a #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="506">a #GListModel or %NULL</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sorter"
              c:identifier="ide_unique_list_model_set_sorter"
              glib:set-property="sorter"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-unique-list-model.c"
             line="545">Sets the sorter used to deduplicate items.</doc>
        <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="547">a #IdeUniqueListModel</doc>
            <type name="UniqueListModel" c:type="IdeUniqueListModel*"/>
          </instance-parameter>
          <parameter name="sorter"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gtk/ide-unique-list-model.c"
                 line="548">a #GtkSorter or %NULL</doc>
            <type name="Gtk.Sorter" c:type="GtkSorter*"/>
          </parameter>
        </parameters>
      </method>
      <property name="incremental"
                writable="1"
                transfer-ownership="none"
                setter="set_incremental"
                getter="get_incremental"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="model"
                writable="1"
                transfer-ownership="none"
                setter="set_model"
                getter="get_model">
        <type name="Gio.ListModel"/>
      </property>
      <property name="n-items" transfer-ownership="none" default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="pending"
                transfer-ownership="none"
                getter="get_pending"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="sorter"
                writable="1"
                transfer-ownership="none"
                setter="set_sorter"
                getter="get_sorter">
        <type name="Gtk.Sorter"/>
      </property>
    </class>
    <record name="UniqueListModelClass"
            c:type="IdeUniqueListModelClass"
            glib:is-gtype-struct-for="UniqueListModel">
      <source-position filename="src/libide/gtk/ide-unique-list-model.h"
                       line="35"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="UnixFDMap"
           c:symbol-prefix="unix_fd_map"
           c:type="IdeUnixFDMap"
           parent="GObject.Object"
           final="1"
           glib:type-name="IdeUnixFDMap"
           glib:get-type="ide_unix_fd_map_get_type"
           glib:type-struct="UnixFDMapClass">
      <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                       line="34"/>
      <constructor name="new" c:identifier="ide_unix_fd_map_new">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
        </return-value>
      </constructor>
      <method name="create_stream"
              c:identifier="ide_unix_fd_map_create_stream"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-unix-fd-map.c"
             line="445">Creates a #GIOStream to communicate with another process.

Use this to create a #GIOStream to use from the calling process to communicate
with a subprocess. Generally, you should pass STDIN_FILENO for @dest_read_fd
and STDOUT_FILENO for @dest_write_fd.</doc>
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-unix-fd-map.c"
               line="457">a #GIOStream if successful; otherwise %NULL and
  @error is set.</doc>
          <type name="Gio.IOStream" c:type="GIOStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-unix-fd-map.c"
                 line="447">a #IdeUnixFDMap</doc>
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="dest_read_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-unix-fd-map.c"
                 line="448">the FD number in the destination process for the read side (stdin)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_write_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/threading/ide-unix-fd-map.c"
                 line="449">the FD number in the destinatino process for the write side (stdout)</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="ide_unix_fd_map_get" throws="1">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_length" c:identifier="ide_unix_fd_map_get_length">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_max_dest_fd"
              c:identifier="ide_unix_fd_map_get_max_dest_fd">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_file"
              c:identifier="ide_unix_fd_map_open_file"
              throws="1">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="mode" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="ide_unix_fd_map_peek">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek_stderr" c:identifier="ide_unix_fd_map_peek_stderr">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_stdin" c:identifier="ide_unix_fd_map_peek_stdin">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek_stdout" c:identifier="ide_unix_fd_map_peek_stdout">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="silence_fd"
              c:identifier="ide_unix_fd_map_silence_fd"
              throws="1">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="stderr_isatty"
              c:identifier="ide_unix_fd_map_stderr_isatty">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stdin_isatty" c:identifier="ide_unix_fd_map_stdin_isatty">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stdout_isatty"
              c:identifier="ide_unix_fd_map_stdout_isatty">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="steal" c:identifier="ide_unix_fd_map_steal">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_from"
              c:identifier="ide_unix_fd_map_steal_from"
              throws="1">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_stderr" c:identifier="ide_unix_fd_map_steal_stderr">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="steal_stdin" c:identifier="ide_unix_fd_map_steal_stdin">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="steal_stdout" c:identifier="ide_unix_fd_map_steal_stdout">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="take" c:identifier="ide_unix_fd_map_take">
        <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnixFDMap" c:type="IdeUnixFDMap*"/>
          </instance-parameter>
          <parameter name="source_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="dest_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="UnixFDMapClass"
            c:type="IdeUnixFDMapClass"
            glib:is-gtype-struct-for="UnixFDMap">
      <source-position filename="src/libide/threading/ide-unix-fd-map.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="UnsavedFile"
            c:type="IdeUnsavedFile"
            opaque="1"
            glib:type-name="IdeUnsavedFile"
            glib:get-type="ide_unsaved_file_get_type"
            c:symbol-prefix="unsaved_file">
      <source-position filename="src/libide/code/ide-code-types.h" line="57"/>
      <method name="get_content" c:identifier="ide_unsaved_file_get_content">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-unsaved-file.c"
             line="143">Gets the contents of the unsaved file.</doc>
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-unsaved-file.c"
               line="149">a #GBytes containing the unsaved file content.</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-unsaved-file.c"
                 line="145">an #IdeUnsavedFile.</doc>
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file" c:identifier="ide_unsaved_file_get_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-unsaved-file.c"
             line="160">Retrieves the underlying file represented by @self.</doc>
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-unsaved-file.c"
               line="165">a #GFile.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sequence" c:identifier="ide_unsaved_file_get_sequence">
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temp_path"
              c:identifier="ide_unsaved_file_get_temp_path">
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="persist"
              c:identifier="ide_unsaved_file_persist"
              throws="1">
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_unsaved_file_ref">
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="36"/>
        <return-value transfer-ownership="full">
          <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_unsaved_file_unref">
        <source-position filename="src/libide/code/ide-unsaved-file.h"
                         line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="UnsavedFiles"
           c:symbol-prefix="unsaved_files"
           c:type="IdeUnsavedFiles"
           parent="Object"
           final="1"
           glib:type-name="IdeUnsavedFiles"
           glib:get-type="ide_unsaved_files_get_type"
           glib:type-struct="UnsavedFilesClass">
      <source-position filename="src/libide/code/ide-unsaved-files.h"
                       line="36"/>
      <function name="from_context"
                c:identifier="ide_unsaved_files_from_context">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-unsaved-files.c"
             line="985">Gets the unsaved files object for @context.</doc>
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-unsaved-files.c"
               line="991">an #IdeContext</doc>
          <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-unsaved-files.c"
                 line="987">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="clear" c:identifier="ide_unsaved_files_clear">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="contains" c:identifier="ide_unsaved_files_contains">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sequence"
              c:identifier="ide_unsaved_files_get_sequence">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_unsaved_file"
              c:identifier="ide_unsaved_files_get_unsaved_file">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-unsaved-files.c"
             line="756">Retrieves the unsaved file content for a particular file. If no unsaved
file content is registered, %NULL is returned.</doc>
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="70"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-unsaved-files.c"
               line="762">An #IdeUnsavedFile or %NULL.

Thread safety: you may call this from any thread, as long as you
  hold a reference to @self.</doc>
          <type name="UnsavedFile" c:type="IdeUnsavedFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reap_async" c:identifier="ide_unsaved_files_reap_async">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reap_finish"
              c:identifier="ide_unsaved_files_reap_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="ide_unsaved_files_remove">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_async"
              c:identifier="ide_unsaved_files_restore_async">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_finish"
              c:identifier="ide_unsaved_files_restore_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="ide_unsaved_files_save_async">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="ide_unsaved_files_save_finish"
              throws="1">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="files" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_array" c:identifier="ide_unsaved_files_to_array">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-unsaved-files.c"
             line="683">This retrieves all of the unsaved file buffers known to the context.
These are handy if you need to pass modified state to parsers such as
clang.

Call g_ptr_array_unref() on the resulting #GPtrArray when no longer in use.

If you would like to hold onto an unsaved file instance, call
ide_unsaved_file_ref() to increment its reference count.</doc>
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-unsaved-files.c"
               line="696">a #GPtrArray
  containing #IdeUnsavedFile elements.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="UnsavedFile"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/code/ide-unsaved-files.c"
                 line="685">an #IdeUnsavedFiles</doc>
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update" c:identifier="ide_unsaved_files_update">
        <source-position filename="src/libide/code/ide-unsaved-files.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="UnsavedFiles" c:type="IdeUnsavedFiles*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content" transfer-ownership="none">
            <type name="GLib.Bytes" c:type="GBytes*"/>
          </parameter>
        </parameters>
      </method>
      <property name="project-id"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="UnsavedFilesClass"
            c:type="IdeUnsavedFilesClass"
            glib:is-gtype-struct-for="UnsavedFiles">
      <source-position filename="src/libide/code/ide-unsaved-files.h"
                       line="36"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <constant name="VERSION" value="45.000000" c:type="IDE_VERSION">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="64">libide version.</doc>
      <source-position filename="src/libide/core/ide-version.h" line="69"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <constant name="VERSION_S" value="45.0" c:type="IDE_VERSION_S">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="71">libide version, encoded as a string, useful for printing and
concatenation.</doc>
      <source-position filename="src/libide/core/ide-version.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <interface name="Vcs"
               c:symbol-prefix="vcs"
               c:type="IdeVcs"
               glib:type-name="IdeVcs"
               glib:get-type="ide_vcs_get_type"
               glib:type-struct="VcsInterface">
      <source-position filename="src/libide/vcs/ide-vcs.h" line="92"/>
      <prerequisite name="Object"/>
      <function name="from_context" c:identifier="ide_vcs_from_context">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="481">Gets the #IdeVcs for the context.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="487">an #IdeVcs</doc>
          <type name="Vcs" c:type="IdeVcs*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="483">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <function name="ref_from_context"
                c:identifier="ide_vcs_ref_from_context">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="504">A thread-safe version of ide_vcs_from_context().</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="510">an #IdeVcs</doc>
          <type name="Vcs" c:type="IdeVcs*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="506">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="changed">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_branch_name" invoker="get_branch_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="385">Retrieves the name of the branch in the current working directory.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="390">A string containing the branch name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_config" invoker="get_config">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="362">Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
support access to configuration, then %NULL is returned.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="368">An #IdeVcsConfig or %NULL.</doc>
          <type name="VcsConfig" c:type="IdeVcsConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_display_name" invoker="get_display_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="650">Gets the display name for the VCS.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="656">a string describing the VCS</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="652">a #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_priority" invoker="get_priority">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_workdir" invoker="get_workdir">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="327">Retrieves the working directory for the context. This is the root of where
the project files exist.

This function is safe to call from threads holding a reference to @self.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="336">a #GFile.

Thread safety: this function is safe to call from threads. The working
  directory should only be set at creating and therefore safe to call
  at any time from any thread that holds a reference to @self. Those
  implementing #IdeVcs are required to ensure this invariant holds true.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="329">An #IdeVcs.</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_ignored" invoker="is_ignored" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="216">This function will check if @file is considered an "ignored file" by
the underlying Version Control System.

For convenience, this function will return %TRUE if @file is %NULL.

If @self is %NULL, only static checks against known ignored files
will be performed (such as .git, .flatpak-builder, etc).</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="230">%TRUE if the path should be ignored.

Thread safety: This function is safe to call from a thread as
  #IdeVcs implementations are required to ensure this function
  is thread-safe.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="218">An #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="219">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_branches_async" invoker="list_branches_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_branches_finish"
                      invoker="list_branches_finish"
                      throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="550">an array of
  #IdeVcsBranch.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="VcsBranch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="546">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="547">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_status_async" invoker="list_status_async">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="410">Retrieves the status of the files matching the request. If
@directory_or_file is a directory, then all files within that directory
will be scanned for changes. If @include_descendants is %TRUE, the
#IdeVcs will scan sub-directories for changes as well.

The function specified by @callback should call ide_vcs_list_status_finish()
to retrieve the result of this asynchronous operation.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="412">a #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="directory_or_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="413">a #GFile containing a file or directory within the
  working tree to retrieve the status of.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="include_descendants" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="415">if descendants of @directory_or_file should be
  included when retrieving status information.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="417">a priority for the IO, such as %G_PRIORITY_DEFAULT.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="418">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="419">a callback for the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="420">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_status_finish"
                      invoker="list_status_finish"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="455">Completes an asynchronous request to ide_vcs_list_status_async().

The result of this function is a #GListModel containing objects that are
#IdeVcsFileInfo.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="59"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="466">
  A #GListModel containing an #IdeVcsFileInfo for each of the files scanned
  by the #IdeVcs. Upon failure, %NULL is returned and @error is set.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="457">a #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="458">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_tags_async" invoker="list_tags_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_tags_finish"
                      invoker="list_tags_finish"
                      throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="583">an array of
  #IdeVcsBranch.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="VcsBranch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="579">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="580">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="push_branch_async" invoker="push_branch_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="branch" transfer-ownership="none">
            <type name="VcsBranch" c:type="IdeVcsBranch*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="push_branch_finish"
                      invoker="push_branch_finish"
                      throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="switch_branch_async" invoker="switch_branch_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="branch" transfer-ownership="none">
            <type name="VcsBranch" c:type="IdeVcsBranch*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="switch_branch_finish"
                      invoker="switch_branch_finish"
                      throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="emit_changed" c:identifier="ide_vcs_emit_changed">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_branch_name"
              c:identifier="ide_vcs_get_branch_name"
              glib:get-property="branch-name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="385">Retrieves the name of the branch in the current working directory.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="390">A string containing the branch name.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config" c:identifier="ide_vcs_get_config">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="362">Retrieves an #IdeVcsConfig for the #IdeVcs provided. If the #IdeVcs implementation does not
support access to configuration, then %NULL is returned.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="113"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="368">An #IdeVcsConfig or %NULL.</doc>
          <type name="VcsConfig" c:type="IdeVcsConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name" c:identifier="ide_vcs_get_display_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="650">Gets the display name for the VCS.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="167"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="656">a string describing the VCS</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="652">a #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_priority" c:identifier="ide_vcs_get_priority">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workdir"
              c:identifier="ide_vcs_get_workdir"
              glib:get-property="workdir">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="327">Retrieves the working directory for the context. This is the root of where
the project files exist.

This function is safe to call from threads holding a reference to @self.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="336">a #GFile.

Thread safety: this function is safe to call from threads. The working
  directory should only be set at creating and therefore safe to call
  at any time from any thread that holds a reference to @self. Those
  implementing #IdeVcs are required to ensure this invariant holds true.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="329">An #IdeVcs.</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_ignored" c:identifier="ide_vcs_is_ignored" throws="1">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="216">This function will check if @file is considered an "ignored file" by
the underlying Version Control System.

For convenience, this function will return %TRUE if @file is %NULL.

If @self is %NULL, only static checks against known ignored files
will be performed (such as .git, .flatpak-builder, etc).</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="230">%TRUE if the path should be ignored.

Thread safety: This function is safe to call from a thread as
  #IdeVcs implementations are required to ensure this function
  is thread-safe.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="218">An #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="219">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_branches_async"
              c:identifier="ide_vcs_list_branches_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_branches_finish"
              c:identifier="ide_vcs_list_branches_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="134"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="550">an array of
  #IdeVcsBranch.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="VcsBranch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="546">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="547">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_status_async"
              c:identifier="ide_vcs_list_status_async">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="410">Retrieves the status of the files matching the request. If
@directory_or_file is a directory, then all files within that directory
will be scanned for changes. If @include_descendants is %TRUE, the
#IdeVcs will scan sub-directories for changes as well.

The function specified by @callback should call ide_vcs_list_status_finish()
to retrieve the result of this asynchronous operation.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="412">a #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="directory_or_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="413">a #GFile containing a file or directory within the
  working tree to retrieve the status of.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="include_descendants" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="415">if descendants of @directory_or_file should be
  included when retrieving status information.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="417">a priority for the IO, such as %G_PRIORITY_DEFAULT.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="418">A #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="419">a callback for the operation</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="420">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_status_finish"
              c:identifier="ide_vcs_list_status_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="455">Completes an asynchronous request to ide_vcs_list_status_async().

The result of this function is a #GListModel containing objects that are
#IdeVcsFileInfo.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="125"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="466">
  A #GListModel containing an #IdeVcsFileInfo for each of the files scanned
  by the #IdeVcs. Upon failure, %NULL is returned and @error is set.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="457">a #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="458">a #GAsyncResult provided to the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_tags_async" c:identifier="ide_vcs_list_tags_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_tags_finish"
              c:identifier="ide_vcs_list_tags_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="583">an array of
  #IdeVcsBranch.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="VcsBranch"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="579">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="580">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="path_is_ignored"
              c:identifier="ide_vcs_path_is_ignored"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="259">This function acts like ide_vcs_is_ignored() except that it
allows for using a regular file-system path.

It will check if the path is absolute or relative to the project
directory and adjust as necessary.

For convenience, this function will return %TRUE if @path is %NULL.

If @self is %NULL, only registered ignore patterns will be checked.</doc>
        <source-position filename="src/libide/vcs/ide-vcs.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="275">%TRUE if the path should be ignored.

Thread safety: This function is safe to call from a thread as
  #IdeVcs implementations are required to ensure this function
  is thread-safe.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="261">An #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="262">The path to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_branch_async"
              c:identifier="ide_vcs_push_branch_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="branch" transfer-ownership="none">
            <type name="VcsBranch" c:type="IdeVcsBranch*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="push_branch_finish"
              c:identifier="ide_vcs_push_branch_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_branch_async"
              c:identifier="ide_vcs_switch_branch_async">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="branch" transfer-ownership="none">
            <type name="VcsBranch" c:type="IdeVcsBranch*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="switch_branch_finish"
              c:identifier="ide_vcs_switch_branch_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="branch-name"
                transfer-ownership="none"
                getter="get_branch_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="workdir" transfer-ownership="none" getter="get_workdir">
        <type name="Gio.File"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="196">The "changed" signal should be emitted when the VCS has detected a change
to the underlying VCS storage. This can be used by consumers to reload
their respective data structures.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </interface>
    <interface name="VcsBranch"
               c:symbol-prefix="vcs_branch"
               c:type="IdeVcsBranch"
               glib:type-name="IdeVcsBranch"
               glib:get-type="ide_vcs_branch_get_type"
               glib:type-struct="VcsBranchInterface">
      <source-position filename="src/libide/vcs/ide-vcs-branch.h" line="35"/>
      <method name="dup_id" c:identifier="ide_vcs_branch_dup_id">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-branch.c"
             line="59">Gets the identifier of the branch.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-branch.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-branch.c"
               line="65">a string containing the branch identifier</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-branch.c"
                 line="61">an #IdeVcsBranch</doc>
            <type name="VcsBranch" c:type="IdeVcsBranch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name" c:identifier="ide_vcs_branch_dup_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-branch.c"
             line="41">Gets the name of the branch, which is used in various UI elements
to display to the user.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-branch.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-branch.c"
               line="48">a string containing the branch name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-branch.c"
                 line="43">an #IdeVcsBranch</doc>
            <type name="VcsBranch" c:type="IdeVcsBranch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="id" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="VcsBranchInterface"
            c:type="IdeVcsBranchInterface"
            glib:is-gtype-struct-for="VcsBranch">
      <source-position filename="src/libide/vcs/ide-vcs-branch.h" line="35"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="VcsCloneRequest"
           c:symbol-prefix="vcs_clone_request"
           c:type="IdeVcsCloneRequest"
           parent="Object"
           final="1"
           glib:type-name="IdeVcsCloneRequest"
           glib:get-type="ide_vcs_clone_request_get_type"
           glib:type-struct="VcsCloneRequestClass">
      <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                       line="42"/>
      <constructor name="new" c:identifier="ide_vcs_clone_request_new">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="45"/>
        <return-value transfer-ownership="full">
          <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
        </return-value>
      </constructor>
      <method name="clone_async"
              c:identifier="ide_vcs_clone_request_clone_async">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="notif" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="pty_fd" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clone_finish"
              c:identifier="ide_vcs_clone_request_clone_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-clone-request.c"
             line="666">Complete a clone request.

The result of the request is the directory that the clone was
completed within. This is the subdirectory within
#IdeVcsCloneRequest:directory.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-clone-request.c"
               line="678">a #GFile or %NULL and @error is set.</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-clone-request.c"
                 line="668">a #IdeVcsCloneRequest</doc>
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-clone-request.c"
                 line="669">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_author_email"
              c:identifier="ide_vcs_clone_request_get_author_email"
              glib:get-property="author-email">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_author_name"
              c:identifier="ide_vcs_clone_request_get_author_name"
              glib:get-property="author-name">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_branch_model"
              c:identifier="ide_vcs_clone_request_get_branch_model"
              glib:get-property="branch-model">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-clone-request.c"
             line="444">Gets the #GListModel of #IdeVcsBranch once available.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-clone-request.c"
               line="450">a #GListModel of #IdeVcsBranch, or %NULL
  if the model has not yet been created.</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-clone-request.c"
                 line="446">a #IdeVcsCloneRequest</doc>
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_branch_name"
              c:identifier="ide_vcs_clone_request_get_branch_name"
              glib:get-property="branch-name">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="ide_vcs_clone_request_get_directory"
              glib:get-property="directory">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-clone-request.c"
             line="325">Gets the directory to use which will contain the new subdirectory
created when checking out the project.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-clone-request.c"
               line="332">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-clone-request.c"
                 line="327">a #IdeVcsCloneRequest</doc>
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_module_name"
              c:identifier="ide_vcs_clone_request_get_module_name"
              glib:get-property="module-name">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="ide_vcs_clone_request_get_uri"
              glib:get-property="uri">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="populate_branches"
              c:identifier="ide_vcs_clone_request_populate_branches">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_author_email"
              c:identifier="ide_vcs_clone_request_set_author_email"
              glib:set-property="author-email">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="author_email" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_author_name"
              c:identifier="ide_vcs_clone_request_set_author_name"
              glib:set-property="author-name">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="author_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_branch_name"
              c:identifier="ide_vcs_clone_request_set_branch_name"
              glib:set-property="branch-name">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="branch_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_directory"
              c:identifier="ide_vcs_clone_request_set_directory"
              glib:set-property="directory">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_module_name"
              c:identifier="ide_vcs_clone_request_set_module_name"
              glib:set-property="module-name">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri"
              c:identifier="ide_vcs_clone_request_set_uri"
              glib:set-property="uri">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="validate" c:identifier="ide_vcs_clone_request_validate">
        <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="VcsCloneRequestValidation"
                c:type="IdeVcsCloneRequestValidation"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloneRequest" c:type="IdeVcsCloneRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="author-email"
                writable="1"
                transfer-ownership="none"
                setter="set_author_email"
                getter="get_author_email"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="author-name"
                writable="1"
                transfer-ownership="none"
                setter="set_author_name"
                getter="get_author_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="branch-model"
                transfer-ownership="none"
                getter="get_branch_model">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-clone-request.c"
             line="230">The "branch-model" contains a #GListModel of #IdeVcsBranch that
represents the names of branches that may be available on the peer.

This model is not automatically updated until
ide_vcs_clone_request_populate_branches() is called. This is to make it
clear to the user that it is being done in response to an action (such
as showing a popover) since user/password information may be requested
from the user.

The UI may use this to show a popover/selection of branches for the
user to select.</doc>
        <type name="Gio.ListModel"/>
      </property>
      <property name="branch-model-busy"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="branch-name"
                writable="1"
                transfer-ownership="none"
                setter="set_branch_name"
                getter="get_branch_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="can-select-branch"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="directory"
                writable="1"
                transfer-ownership="none"
                setter="set_directory"
                getter="get_directory">
        <type name="Gio.File"/>
      </property>
      <property name="module-name"
                writable="1"
                transfer-ownership="none"
                setter="set_module_name"
                getter="get_module_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uri"
                writable="1"
                transfer-ownership="none"
                setter="set_uri"
                getter="get_uri"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="VcsCloneRequestClass"
            c:type="IdeVcsCloneRequestClass"
            glib:is-gtype-struct-for="VcsCloneRequest">
      <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                       line="42"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <bitfield name="VcsCloneRequestValidation"
              c:type="IdeVcsCloneRequestValidation">
      <source-position filename="src/libide/vcs/ide-vcs-clone-request.h"
                       line="39"/>
      <member name="valid"
              value="0"
              c:identifier="IDE_VCS_CLONE_REQUEST_VALID">
      </member>
      <member name="inval_uri"
              value="1"
              c:identifier="IDE_VCS_CLONE_REQUEST_INVAL_URI">
      </member>
      <member name="inval_directory"
              value="2"
              c:identifier="IDE_VCS_CLONE_REQUEST_INVAL_DIRECTORY">
      </member>
      <member name="inval_email"
              value="4"
              c:identifier="IDE_VCS_CLONE_REQUEST_INVAL_EMAIL">
      </member>
    </bitfield>
    <interface name="VcsCloner"
               c:symbol-prefix="vcs_cloner"
               c:type="IdeVcsCloner"
               glib:type-name="IdeVcsCloner"
               glib:get-type="ide_vcs_cloner_get_type"
               glib:type-struct="VcsClonerInterface">
      <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="65"/>
      <prerequisite name="Object"/>
      <function name="clone_simple"
                c:identifier="ide_vcs_cloner_clone_simple"
                throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
          <parameter name="module_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="url" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="branch" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="notif" transfer-ownership="none">
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="clone_async" invoker="clone_async">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="68">an #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="69">a string containing the URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="70">a string containing the destination path</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="71">a #GVariant containing any user supplied options</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="progress"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="73">a location for an #IdeNotification, or %NULL</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="72">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="74">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="75">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clone_finish" invoker="clone_finish" throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="111">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="107">an #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="108">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_directory_name" invoker="get_directory_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="348">Gets the directory name that will be used to clone from @uri.

If the path has "foo.git", this function would be expected to
return "foo".</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="358">a string containing the directory name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="350">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="351">an #IdeVcsUri</doc>
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_title" invoker="get_title">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="124">Gets the for the cloner, such as "Git". This may be used to present
a selector to the user based on the backend clone engine. Other suitable
titles might be "Subversion" or "CVS".</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="132">a string containing the title</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="126">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_branches_async" invoker="list_branches_async">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="list_branches_finish"
                      invoker="list_branches_finish"
                      throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="327">a #GListModel of #IdeVcsBranch</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_pty_fd" invoker="set_pty_fd" version="44">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="376">Sets a PTY that should be written to for message contents.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="378">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="pty_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="379">a fd or -1</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="validate_uri" invoker="validate_uri">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="39">Checks to see if @uri is valid, and if not, sets @errmsg to a string
describing how the URI is invalid.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="48">%TRUE if @uri is valid, otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="41">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="42">a string containing the URI to validate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="errmsg"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="43">a location for an error message</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clone_async" c:identifier="ide_vcs_cloner_clone_async">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="68">an #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="69">a string containing the URI</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="destination" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="70">a string containing the destination path</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="options" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="71">a #GVariant containing any user supplied options</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="progress"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="73">a location for an #IdeNotification, or %NULL</doc>
            <type name="Notification" c:type="IdeNotification*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="72">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="74">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="75">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="clone_finish"
              c:identifier="ide_vcs_cloner_clone_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="111">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="107">an #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="108">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_directory_name"
              c:identifier="ide_vcs_cloner_get_directory_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="348">Gets the directory name that will be used to clone from @uri.

If the path has "foo.git", this function would be expected to
return "foo".</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="358">a string containing the directory name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="350">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="351">an #IdeVcsUri</doc>
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_title" c:identifier="ide_vcs_cloner_get_title">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="124">Gets the for the cloner, such as "Git". This may be used to present
a selector to the user based on the backend clone engine. Other suitable
titles might be "Subversion" or "CVS".</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="132">a string containing the title</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="126">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_branches_async"
              c:identifier="ide_vcs_cloner_list_branches_async">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_branches_finish"
              c:identifier="ide_vcs_cloner_list_branches_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="327">a #GListModel of #IdeVcsBranch</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pty_fd"
              c:identifier="ide_vcs_cloner_set_pty_fd"
              version="44">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="376">Sets a PTY that should be written to for message contents.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="378">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="pty_fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="379">a fd or -1</doc>
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </method>
      <method name="validate_uri" c:identifier="ide_vcs_cloner_validate_uri">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-cloner.c"
             line="39">Checks to see if @uri is valid, and if not, sets @errmsg to a string
describing how the URI is invalid.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-cloner.c"
               line="48">%TRUE if @uri is valid, otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="41">a #IdeVcsCloner</doc>
            <type name="VcsCloner" c:type="IdeVcsCloner*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="42">a string containing the URI to validate</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="errmsg"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="43">a location for an error message</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VcsClonerInterface"
            c:type="IdeVcsClonerInterface"
            glib:is-gtype-struct-for="VcsCloner">
      <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="65"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="38"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="132">a string containing the title</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="126">a #IdeVcsCloner</doc>
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="validate_uri">
        <callback name="validate_uri">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="39"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="48">%TRUE if @uri is valid, otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="41">a #IdeVcsCloner</doc>
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="42">a string containing the URI to validate</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="errmsg"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="43">a location for an error message</doc>
              <type name="utf8" c:type="char**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clone_async">
        <callback name="clone_async">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="68">an #IdeVcsCloner</doc>
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="69">a string containing the URI</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="destination" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="70">a string containing the destination path</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="options" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="71">a #GVariant containing any user supplied options</doc>
              <type name="GLib.Variant" c:type="GVariant*"/>
            </parameter>
            <parameter name="progress"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="73">a location for an #IdeNotification, or %NULL</doc>
              <type name="Notification" c:type="IdeNotification*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="72">a #GCancellable</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="7">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="74">a #GAsyncReadyCallback to execute upon completion</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="75">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clone_finish">
        <callback name="clone_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="111">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="107">an #IdeVcsCloner</doc>
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="108">a #GAsyncResult provided to callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_branches_async">
        <callback name="list_branches_async">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <type name="VcsUri" c:type="IdeVcsUri*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_branches_finish">
        <callback name="list_branches_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="58"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="327">a #GListModel of #IdeVcsBranch</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_directory_name">
        <callback name="get_directory_name">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="61"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-cloner.c"
                 line="358">a string containing the directory name</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="350">a #IdeVcsCloner</doc>
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="351">an #IdeVcsUri</doc>
              <type name="VcsUri" c:type="IdeVcsUri*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_pty_fd">
        <callback name="set_pty_fd">
          <source-position filename="src/libide/vcs/ide-vcs-cloner.h"
                           line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="378">a #IdeVcsCloner</doc>
              <type name="VcsCloner" c:type="IdeVcsCloner*"/>
            </parameter>
            <parameter name="pty_fd" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-cloner.c"
                   line="379">a fd or -1</doc>
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="VcsConfig"
               c:symbol-prefix="vcs_config"
               c:type="IdeVcsConfig"
               glib:type-name="IdeVcsConfig"
               glib:get-type="ide_vcs_config_get_type"
               glib:type-struct="VcsConfigInterface">
      <source-position filename="src/libide/vcs/ide-vcs-config.h" line="52"/>
      <prerequisite name="Object"/>
      <virtual-method name="get_config" invoker="get_config">
        <source-position filename="src/libide/vcs/ide-vcs-config.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_config" invoker="set_config">
        <source-position filename="src/libide/vcs/ide-vcs-config.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_config" c:identifier="ide_vcs_config_get_config">
        <source-position filename="src/libide/vcs/ide-vcs-config.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config" c:identifier="ide_vcs_config_set_config">
        <source-position filename="src/libide/vcs/ide-vcs-config.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VcsConfigInterface"
            c:type="IdeVcsConfigInterface"
            glib:is-gtype-struct-for="VcsConfig">
      <source-position filename="src/libide/vcs/ide-vcs-config.h" line="52"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_config">
        <callback name="get_config">
          <source-position filename="src/libide/vcs/ide-vcs-config.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsConfig" c:type="IdeVcsConfig*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_config">
        <callback name="set_config">
          <source-position filename="src/libide/vcs/ide-vcs-config.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsConfig" c:type="IdeVcsConfig*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="VcsConfigType" c:type="IdeVcsConfigType"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="const GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="VcsConfigType"
                 glib:type-name="IdeVcsConfigType"
                 glib:get-type="ide_vcs_config_type_get_type"
                 c:type="IdeVcsConfigType">
      <member name="full_name"
              value="0"
              c:identifier="IDE_VCS_CONFIG_FULL_NAME"
              glib:nick="full-name"
              glib:name="IDE_VCS_CONFIG_FULL_NAME">
      </member>
      <member name="email"
              value="1"
              c:identifier="IDE_VCS_CONFIG_EMAIL"
              glib:nick="email"
              glib:name="IDE_VCS_CONFIG_EMAIL">
      </member>
    </enumeration>
    <class name="VcsFileInfo"
           c:symbol-prefix="vcs_file_info"
           c:type="IdeVcsFileInfo"
           parent="GObject.Object"
           glib:type-name="IdeVcsFileInfo"
           glib:get-type="ide_vcs_file_info_get_type"
           glib:type-struct="VcsFileInfoClass">
      <source-position filename="src/libide/vcs/ide-vcs-file-info.h"
                       line="53"/>
      <constructor name="new" c:identifier="ide_vcs_file_info_new">
        <source-position filename="src/libide/vcs/ide-vcs-file-info.h"
                         line="56"/>
        <return-value transfer-ownership="full">
          <type name="VcsFileInfo" c:type="IdeVcsFileInfo*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_file"
              c:identifier="ide_vcs_file_info_get_file"
              glib:get-property="file">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-file-info.c"
             line="45">Gets the file the #IdeVcsFileInfo describes.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-file-info.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-file-info.c"
               line="51">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-file-info.c"
                 line="47">a #IdeVcsFileInfo</doc>
            <type name="VcsFileInfo" c:type="IdeVcsFileInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="ide_vcs_file_info_get_status"
              glib:get-property="status">
        <source-position filename="src/libide/vcs/ide-vcs-file-info.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="VcsFileStatus" c:type="IdeVcsFileStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsFileInfo" c:type="IdeVcsFileInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_status"
              c:identifier="ide_vcs_file_info_set_status"
              glib:set-property="status">
        <source-position filename="src/libide/vcs/ide-vcs-file-info.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsFileInfo" c:type="IdeVcsFileInfo*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <type name="VcsFileStatus" c:type="IdeVcsFileStatus"/>
          </parameter>
        </parameters>
      </method>
      <property name="file"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_file">
        <type name="Gio.File"/>
      </property>
      <property name="status"
                writable="1"
                transfer-ownership="none"
                setter="set_status"
                getter="get_status"
                default-value="IDE_VCS_FILE_STATUS_UNCHANGED">
        <type name="VcsFileStatus"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="VcsFileInfoClass"
            c:type="IdeVcsFileInfoClass"
            glib:is-gtype-struct-for="VcsFileInfo">
      <source-position filename="src/libide/vcs/ide-vcs-file-info.h"
                       line="53"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="VcsFileStatus"
                 glib:type-name="IdeVcsFileStatus"
                 glib:get-type="ide_vcs_file_status_get_type"
                 c:type="IdeVcsFileStatus">
      <member name="ignored"
              value="1"
              c:identifier="IDE_VCS_FILE_STATUS_IGNORED"
              glib:nick="ignored"
              glib:name="IDE_VCS_FILE_STATUS_IGNORED">
      </member>
      <member name="unchanged"
              value="2"
              c:identifier="IDE_VCS_FILE_STATUS_UNCHANGED"
              glib:nick="unchanged"
              glib:name="IDE_VCS_FILE_STATUS_UNCHANGED">
      </member>
      <member name="untracked"
              value="3"
              c:identifier="IDE_VCS_FILE_STATUS_UNTRACKED"
              glib:nick="untracked"
              glib:name="IDE_VCS_FILE_STATUS_UNTRACKED">
      </member>
      <member name="added"
              value="4"
              c:identifier="IDE_VCS_FILE_STATUS_ADDED"
              glib:nick="added"
              glib:name="IDE_VCS_FILE_STATUS_ADDED">
      </member>
      <member name="renamed"
              value="5"
              c:identifier="IDE_VCS_FILE_STATUS_RENAMED"
              glib:nick="renamed"
              glib:name="IDE_VCS_FILE_STATUS_RENAMED">
      </member>
      <member name="deleted"
              value="6"
              c:identifier="IDE_VCS_FILE_STATUS_DELETED"
              glib:nick="deleted"
              glib:name="IDE_VCS_FILE_STATUS_DELETED">
      </member>
      <member name="changed"
              value="7"
              c:identifier="IDE_VCS_FILE_STATUS_CHANGED"
              glib:nick="changed"
              glib:name="IDE_VCS_FILE_STATUS_CHANGED">
      </member>
    </enumeration>
    <interface name="VcsInitializer"
               c:symbol-prefix="vcs_initializer"
               c:type="IdeVcsInitializer"
               glib:type-name="IdeVcsInitializer"
               glib:get-type="ide_vcs_initializer_get_type"
               glib:type-struct="VcsInitializerInterface">
      <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                       line="49"/>
      <prerequisite name="Object"/>
      <virtual-method name="get_title" invoker="get_title">
        <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="initialize_async" invoker="initialize_async">
        <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="initialize_finish"
                      invoker="initialize_finish"
                      throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_title" c:identifier="ide_vcs_initializer_get_title">
        <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                         line="52"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="initialize_async"
              c:identifier="ide_vcs_initializer_initialize_async">
        <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="initialize_finish"
              c:identifier="ide_vcs_initializer_initialize_finish"
              throws="1">
        <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="VcsInitializerInterface"
            c:type="IdeVcsInitializerInterface"
            glib:is-gtype-struct-for="VcsInitializer">
      <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                       line="49"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_title">
        <callback name="get_title">
          <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                           line="40"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="initialize_async">
        <callback name="initialize_async">
          <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                           line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="initialize_finish">
        <callback name="initialize_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs-initializer.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="VcsInitializer" c:type="IdeVcsInitializer*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="VcsInterface"
            c:type="IdeVcsInterface"
            glib:is-gtype-struct-for="Vcs">
      <source-position filename="src/libide/vcs/ide-vcs.h" line="92"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="get_display_name">
        <callback name="get_display_name">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="43"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="656">a string describing the VCS</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="652">a #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_workdir">
        <callback name="get_workdir">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="44"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="336">a #GFile.

Thread safety: this function is safe to call from threads. The working
  directory should only be set at creating and therefore safe to call
  at any time from any thread that holds a reference to @self. Those
  implementing #IdeVcs are required to ensure this invariant holds true.</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="329">An #IdeVcs.</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_ignored">
        <callback name="is_ignored" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="45"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="230">%TRUE if the path should be ignored.

Thread safety: This function is safe to call from a thread as
  #IdeVcs implementations are required to ensure this function
  is thread-safe.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="218">An #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="file"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="219">a #GFile</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_priority">
        <callback name="get_priority">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="48"/>
          <return-value transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_config">
        <callback name="get_config">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="50"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="368">An #IdeVcsConfig or %NULL.</doc>
            <type name="VcsConfig" c:type="IdeVcsConfig*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_branch_name">
        <callback name="get_branch_name">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="51"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="390">A string containing the branch name.</doc>
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_status_async">
        <callback name="list_status_async">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="412">a #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="directory_or_file" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="413">a #GFile containing a file or directory within the
  working tree to retrieve the status of.</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="include_descendants" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="415">if descendants of @directory_or_file should be
  included when retrieving status information.</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="io_priority" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="417">a priority for the IO, such as %G_PRIORITY_DEFAULT.</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="418">A #GCancellable or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="6">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="419">a callback for the operation</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="6">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="420">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_status_finish">
        <callback name="list_status_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="59"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="466">
  A #GListModel containing an #IdeVcsFileInfo for each of the files scanned
  by the #IdeVcs. Upon failure, %NULL is returned and @error is set.</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="457">a #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="458">a #GAsyncResult provided to the callback</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_branches_async">
        <callback name="list_branches_async">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_branches_finish">
        <callback name="list_branches_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="66"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="550">an array of
  #IdeVcsBranch.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="VcsBranch"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="546">an #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="547">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_tags_async">
        <callback name="list_tags_async">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="list_tags_finish">
        <callback name="list_tags_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="73"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs.c"
                 line="583">an array of
  #IdeVcsBranch.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="VcsBranch"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="579">an #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs.c"
                   line="580">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="switch_branch_async">
        <callback name="switch_branch_async">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="branch" transfer-ownership="none">
              <type name="VcsBranch" c:type="IdeVcsBranch*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="switch_branch_finish">
        <callback name="switch_branch_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="push_branch_async">
        <callback name="push_branch_async">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="84"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="branch" transfer-ownership="none">
              <type name="VcsBranch" c:type="IdeVcsBranch*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="push_branch_finish">
        <callback name="push_branch_finish" throws="1">
          <source-position filename="src/libide/vcs/ide-vcs.h" line="89"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="VcsMonitor"
           c:symbol-prefix="vcs_monitor"
           c:type="IdeVcsMonitor"
           parent="Object"
           final="1"
           glib:type-name="IdeVcsMonitor"
           glib:get-type="ide_vcs_monitor_get_type"
           glib:type-struct="VcsMonitorClass">
      <source-position filename="src/libide/vcs/ide-vcs-monitor.h" line="37"/>
      <function name="from_context"
                c:identifier="ide_vcs_monitor_from_context">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="640">Gets the #IdeVcsMonitor for a context.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="40"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-monitor.c"
               line="646">an #IdeVcsMonitor</doc>
          <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="642">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_sequence" c:identifier="ide_vcs_monitor_get_sequence">
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_info" c:identifier="ide_vcs_monitor_ref_info">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="518">Gets an #IdeVcsFileInfo for the given @file.

If the file information has not been loaded, %NULL is returned. You
can wait for #IdeVcsMonitor::reloaded and query again if you expect
the info to be there.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="42"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-monitor.c"
               line="529">an #IdeVcsFileInfo or %NULL</doc>
          <type name="VcsFileInfo" c:type="IdeVcsFileInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="520">a #IdeVcsMonitor</doc>
            <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="521">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_root" c:identifier="ide_vcs_monitor_ref_root">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="573">Gets the #IdeVcsMonitor:root property and increments the reference
count of the #GFile by one.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="45"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-monitor.c"
               line="580">a #GFile or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="575">a #IdeVcsMonitor</doc>
            <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_vcs" c:identifier="ide_vcs_monitor_ref_vcs">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="550">Increments the reference count of the #IdeVcs monitored using the
#IdeVcsMonitor and returns it.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-monitor.c"
               line="557">an #IdeVcs or %NULL</doc>
          <type name="Vcs" c:type="IdeVcs*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="552">a #IdeVcsMonitor</doc>
            <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_root"
              c:identifier="ide_vcs_monitor_set_root"
              glib:set-property="root">
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vcs"
              c:identifier="ide_vcs_monitor_set_vcs"
              glib:set-property="vcs">
        <source-position filename="src/libide/vcs/ide-vcs-monitor.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
          </instance-parameter>
          <parameter name="vcs" transfer-ownership="none">
            <type name="Vcs" c:type="IdeVcs*"/>
          </parameter>
        </parameters>
      </method>
      <property name="root"
                writable="1"
                transfer-ownership="none"
                setter="set_root">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="428">The "root" property is the root of the file-system to begin
monitoring for changes.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="vcs"
                writable="1"
                transfer-ownership="none"
                setter="set_vcs">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="441">The "vcs" property is the version control system to be queried for
additional status information when a file has been discovered to
have been changed.</doc>
        <type name="Vcs"/>
      </property>
      <glib:signal name="changed" when="last">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="457">The "changed" signal is emitted when a file has been discovered to
have been changed on disk.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="460">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="other_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="461">a #GFile or %NULL</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-monitor.c"
                 line="462">a #GFileMonitorEvent</doc>
            <type name="Gio.FileMonitorEvent"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="reloaded" when="last">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-monitor.c"
             line="483">The "reloaded" signal is emitted when the monitor has been reloaded.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="VcsMonitorClass"
            c:type="IdeVcsMonitorClass"
            glib:is-gtype-struct-for="VcsMonitor">
      <source-position filename="src/libide/vcs/ide-vcs-monitor.h" line="37"/>
      <field name="parent_class">
        <type name="ObjectClass" c:type="IdeObjectClass"/>
      </field>
    </record>
    <interface name="VcsTag"
               c:symbol-prefix="vcs_tag"
               c:type="IdeVcsTag"
               glib:type-name="IdeVcsTag"
               glib:get-type="ide_vcs_tag_get_type"
               glib:type-struct="VcsTagInterface">
      <source-position filename="src/libide/vcs/ide-vcs-tag.h" line="37"/>
      <virtual-method name="dup_name" invoker="dup_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-tag.c"
             line="37">Gets the name of the tag, which is used in various UI elements
to display to the user.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-tag.h" line="36"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-tag.c"
               line="44">a string containing the tag name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-tag.c"
                 line="39">an #IdeVcsTag</doc>
            <type name="VcsTag" c:type="IdeVcsTag*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="dup_name" c:identifier="ide_vcs_tag_dup_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-tag.c"
             line="37">Gets the name of the tag, which is used in various UI elements
to display to the user.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-tag.h" line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-tag.c"
               line="44">a string containing the tag name</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-tag.c"
                 line="39">an #IdeVcsTag</doc>
            <type name="VcsTag" c:type="IdeVcsTag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="name" transfer-ownership="none" default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
    </interface>
    <record name="VcsTagInterface"
            c:type="IdeVcsTagInterface"
            glib:is-gtype-struct-for="VcsTag">
      <source-position filename="src/libide/vcs/ide-vcs-tag.h" line="37"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="dup_name">
        <callback name="dup_name">
          <source-position filename="src/libide/vcs/ide-vcs-tag.h" line="36"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-tag.c"
                 line="44">a string containing the tag name</doc>
            <type name="utf8" c:type="char*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/vcs/ide-vcs-tag.c"
                   line="39">an #IdeVcsTag</doc>
              <type name="VcsTag" c:type="IdeVcsTag*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="VcsUri"
            c:type="IdeVcsUri"
            opaque="1"
            glib:type-name="IdeVcsUri"
            glib:get-type="ide_vcs_uri_get_type"
            c:symbol-prefix="vcs_uri">
      <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="33"/>
      <constructor name="new" c:identifier="ide_vcs_uri_new">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="38"/>
        <return-value transfer-ownership="full">
          <type name="VcsUri" c:type="IdeVcsUri*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_clone_name" c:identifier="ide_vcs_uri_get_clone_name">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs-uri.c"
             line="463">Determines a suggested name for the checkout directory. Some special
handling of suffixes such as ".git" are performed to improve the the
quality of results.</doc>
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="73"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs-uri.c"
               line="471">a string containing the suggested
  clone directory name, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/vcs/ide-vcs-uri.c"
                 line="465">an #ideVcsUri</doc>
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host" c:identifier="ide_vcs_uri_get_host">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path" c:identifier="ide_vcs_uri_get_path">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="ide_vcs_uri_get_port">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scheme" c:identifier="ide_vcs_uri_get_scheme">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user" c:identifier="ide_vcs_uri_get_user">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="ide_vcs_uri_ref">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="40"/>
        <return-value transfer-ownership="full">
          <type name="VcsUri" c:type="IdeVcsUri*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_host" c:identifier="ide_vcs_uri_set_host">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_path" c:identifier="ide_vcs_uri_set_path">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port" c:identifier="ide_vcs_uri_set_port">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scheme" c:identifier="ide_vcs_uri_set_scheme">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="scheme" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user" c:identifier="ide_vcs_uri_set_user">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
          <parameter name="user" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="ide_vcs_uri_to_string">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="69"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="const IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="ide_vcs_uri_unref">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="VcsUri" c:type="IdeVcsUri*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="is_valid" c:identifier="ide_vcs_uri_is_valid">
        <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="uri_string" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <class name="WebkitPage"
           c:symbol-prefix="webkit_page"
           c:type="IdeWebkitPage"
           parent="Page"
           glib:type-name="IdeWebkitPage"
           glib:get-type="ide_webkit_page_get_type"
           glib:type-struct="WebkitPageClass">
      <source-position filename="src/libide/webkit/ide-webkit-page.h"
                       line="41"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <constructor name="new" c:identifier="ide_webkit_page_new">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="WebkitPage" c:type="IdeWebkitPage*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_generator"
                   c:identifier="ide_webkit_page_new_for_generator">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="WebkitPage" c:type="IdeWebkitPage*"/>
        </return-value>
        <parameters>
          <parameter name="generator" transfer-ownership="none">
            <type name="HtmlGenerator" c:type="IdeHtmlGenerator*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="focus_address"
              c:identifier="ide_webkit_page_focus_address">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_toolbar"
              c:identifier="ide_webkit_page_get_show_toolbar"
              glib:get-property="show-toolbar">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_view" c:identifier="ide_webkit_page_get_view">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-webkit-page.c"
             line="711">Gets the underlying #WebKitWebView.</doc>
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/webkit/ide-webkit-page.c"
               line="717">a #WebKitWebView</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/webkit/ide-webkit-page.c"
                 line="713">a #IdeWebkitPage</doc>
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_back" c:identifier="ide_webkit_page_go_back">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="go_forward" c:identifier="ide_webkit_page_go_forward">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_generator"
              c:identifier="ide_webkit_page_has_generator">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_uri" c:identifier="ide_webkit_page_load_uri">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="print" c:identifier="ide_webkit_page_print">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reload" c:identifier="ide_webkit_page_reload">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reload_ignoring_cache"
              c:identifier="ide_webkit_page_reload_ignoring_cache">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_show_toolbar"
              c:identifier="ide_webkit_page_set_show_toolbar"
              glib:set-property="show-toolbar">
        <source-position filename="src/libide/webkit/ide-webkit-page.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WebkitPage" c:type="IdeWebkitPage*"/>
          </instance-parameter>
          <parameter name="show_toolbar" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enable-javascript"
                version="44"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/libide/webkit/ide-webkit-page.c"
             line="403">The "enable-javascript" allows disabling javascript within the webview.
It is also exported via the "web.enable-javascript" action (although
should generally be used with the "page." prefix to that action.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-toolbar"
                writable="1"
                transfer-ownership="none"
                setter="set_show_toolbar"
                getter="get_show_toolbar"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Page" c:type="IdePage"/>
      </field>
    </class>
    <record name="WebkitPageClass"
            c:type="IdeWebkitPageClass"
            glib:is-gtype-struct-for="WebkitPage">
      <source-position filename="src/libide/webkit/ide-webkit-page.h"
                       line="41"/>
      <field name="parent_class">
        <type name="PageClass" c:type="IdePageClass"/>
      </field>
    </record>
    <callback name="WidgetContextHandler" c:type="IdeWidgetContextHandler">
      <source-position filename="src/libide/gui/ide-gui-global.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Workbench"
           c:symbol-prefix="workbench"
           c:type="IdeWorkbench"
           parent="Gtk.WindowGroup"
           final="1"
           glib:type-name="IdeWorkbench"
           glib:get-type="ide_workbench_get_type"
           glib:type-struct="WorkbenchClass">
      <source-position filename="src/libide/gui/ide-workbench.h" line="40"/>
      <constructor name="new" c:identifier="ide_workbench_new">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="598">Creates a new #IdeWorkbench.

This does not create any windows, you'll need to request that a workspace
be created based on the kind of workspace you want to display to the user.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="45"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="606">an #IdeWorkbench</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
      </constructor>
      <constructor name="new_for_context"
                   c:identifier="ide_workbench_new_for_context">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="616">Creates a new #IdeWorkbench using @context for the #IdeWorkbench:context.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="47"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="621">an #IdeWorkbench</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="from_context" c:identifier="ide_workbench_from_context">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="196">Helper to get the #IdeWorkbench for a given context.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="43"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="202">an #IdeWorkbench or %NULL</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="198">an #IdeContext</doc>
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </function>
      <function name="from_widget" c:identifier="ide_workbench_from_widget">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="650">Finds the #IdeWorkbench associated with a widget.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="64"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="656">an #IdeWorkbench or %NULL</doc>
          <type name="Workbench" c:type="IdeWorkbench*"/>
        </return-value>
        <parameters>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="652">a #GtkWidget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </function>
      <method name="activate" c:identifier="ide_workbench_activate">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2338">This function will attempt to raise the most recently focused workspace.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2340">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_workspace" c:identifier="ide_workbench_add_workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="779">Adds @workspace to @workbench.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="781">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="782">an #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="addin_find_by_module_name"
              c:identifier="ide_workbench_addin_find_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2627">Finds the addin (if any) matching the plugin's @module_name.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="161"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2634">an #IdeWorkbenchAddin or %NULL</doc>
          <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="workbench" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2629">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2630">the name of the addin module</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="focus_workspace"
              c:identifier="ide_workbench_focus_workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="927">Requests that @workspace be raised in the windows of @self, and
displayed to the user.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="929">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="930">an #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_page" c:identifier="ide_workbench_foreach_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="734">Calls @callback for every page loaded in the workbench, by iterating
workspaces in order of most-recently-used.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="736">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="737">a callback to execute for each page</doc>
            <type name="PageCallback" c:type="IdePageCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="738">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_workspace"
              c:identifier="ide_workbench_foreach_workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="681">Iterates the available workspaces in the workbench. Workspaces are iterated
in most-recently-used order.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="683">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="684">a #IdeWorkspaceCallback to call for each #IdeWorkspace</doc>
            <type name="WorkspaceCallback" c:type="IdeWorkspaceCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="685">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_build_system"
              c:identifier="ide_workbench_get_build_system">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2489">Gets the #IdeBuildSystem for the workbench, if any.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="142"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2495">an #IdeBuildSystem or %NULL</doc>
          <type name="BuildSystem" c:type="IdeBuildSystem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2491">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="ide_workbench_get_context"
              glib:get-property="context">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="633">Gets the #IdeContext for the workbench.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="639">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="635">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_workspace"
              c:identifier="ide_workbench_get_current_workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2318">Gets the most recently focused workspace, which may be used to
deliver events such as opening new pages.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="57"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2325">an #IdeWorkspace or %NULL</doc>
          <type name="Workspace" c:type="IdeWorkspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2320">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_project_info"
              c:identifier="ide_workbench_get_project_info">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1610">Gets the #IdeProjectInfo for the workbench, if a project has been or is
currently, loading.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="51"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="1617">an #IdeProjectInfo or %NULL</doc>
          <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1612">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_engine"
              c:identifier="ide_workbench_get_search_engine">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1589">Gets the search engine for the workbench, if any.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="1595">an #IdeSearchEngine</doc>
          <type name="SearchEngine" c:type="IdeSearchEngine*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1591">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vcs"
              c:identifier="ide_workbench_get_vcs"
              glib:get-property="vcs">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2372">Gets the #IdeVcs that has been loaded for the workbench, if any.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="135"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2378">an #IdeVcs or %NULL</doc>
          <type name="Vcs" c:type="IdeVcs*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2374">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vcs_monitor"
              c:identifier="ide_workbench_get_vcs_monitor">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2388">Gets the #IdeVcsMonitor for the workbench, if any.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="140"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2394">an #IdeVcsMonitor or %NULL</doc>
          <type name="VcsMonitor" c:type="IdeVcsMonitor*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2390">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_workspace_by_type"
              c:identifier="ide_workbench_get_workspace_by_type">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2568">Gets the most-recently-used workspace that matches @type.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="59"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2575">an #IdeWorkspace or %NULL</doc>
          <type name="Workspace" c:type="IdeWorkspace*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2570">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2571">a #GType of a subclass of #IdeWorkspace</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_project" c:identifier="ide_workbench_has_project">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2609">Returns %TRUE if a project is loaded (or currently loading) in the
workbench.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2616">%TRUE if the workbench has a project</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2611">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_project_async"
              c:identifier="ide_workbench_load_project_async">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1169">Requests that a project be opened in the workbench.

@project_info should contain enough information to discover and load the
project. Depending on the various fields of the #IdeProjectInfo,
different plugins may become active as part of loading the project.

Note that this may only be called once for an #IdeWorkbench. If you need
to open a second project, you need to create and register a second
workbench first, and then open using that secondary workbench.

@callback should call ide_workbench_load_project_finish() to obtain the
result of the open request.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1171">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1172">an #IdeProjectInfo describing the project to open</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
          <parameter name="workspace_type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1173">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1174">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1175">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_project_finish"
              c:identifier="ide_workbench_load_project_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1343">Completes an asynchronous request to open a project using
ide_workbench_load_project_async().</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="1350">%TRUE if the project was successfully opened; otherwise %FALSE
  and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1345">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_all_async"
              c:identifier="ide_workbench_open_all_async">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1889">Requests that the workbench open all of the #GFile denoted by @files.

If @hint is provided, that will be used to determine what workbench
addin to use when opening the file. The @hint name should match the
module name of the plugin.

Call ide_workbench_open_finish() from @callback to complete this
operation.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1891">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1892">an array of #GFile</doc>
            <array length="1" zero-terminated="0" c:type="GFile**">
              <type name="Gio.File" c:type="GFile*"/>
            </array>
          </parameter>
          <parameter name="n_files" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1893">number of #GFiles contained in @files</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1894">an optional hint about what addin to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1895">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1896">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1897">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_async" c:identifier="ide_workbench_open_async">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1956">Requests that the workbench open @file.

If @hint is provided, that will be used to determine what workbench
addin to use when opening the file. The @hint name should match the
module name of the plugin.

@flags may be ignored by some backends.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1958">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1959">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1960">an optional hint about what addin to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1961">optional flags when opening the file</doc>
            <type name="BufferOpenFlags" c:type="IdeBufferOpenFlags"/>
          </parameter>
          <parameter name="position"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1962">a position to open the page</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1963">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1964">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1965">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_at_async" c:identifier="ide_workbench_open_at_async">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2182">Like ide_workbench_open_async(), this allows opening a file
within the workbench. However, it also allows specifying a
line and column offset within the file to focus. Usually, this
only makes sense for files that can be opened in an editor.

@at_line and @at_line_offset may be &lt; 0 to ignore the parameters.

@flags may be ignored by some backends

Use ide_workbench_open_finish() to receive teh result of this
asynchronous operation.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2184">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2185">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="hint"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2186">an optional hint about what addin to use</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="at_line" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2187">the line number to open at, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="at_line_offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2188">the line offset to open at, or -1 to ignore</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2189">optional #IdeBufferOpenFlags</doc>
            <type name="BufferOpenFlags" c:type="IdeBufferOpenFlags"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2190">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2191">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2192">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_finish"
              c:identifier="ide_workbench_open_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2295">Completes a request to open a file using either
ide_workbench_open_async() or ide_workbench_open_at_async().</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2304">%TRUE if the file was successfully opened; otherwise
  %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2297">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2298">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_workspace"
              c:identifier="ide_workbench_remove_workspace">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="859">Removes @workspace from @workbench.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="861">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="862">an #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_file_async"
              c:identifier="ide_workbench_resolve_file_async">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2711">This function will try to locate a given file based on the filename,
possibly resolving it from a build directory, or source directory.

If no file was discovered, some attempt will be made to locate a file
that matches appropriately.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2713">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2714">the filename to discover</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resolve_file_finish"
              c:identifier="ide_workbench_resolve_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2766">Completes an asynchronous request to ide_workbench_resolve_file_async().</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="2774">a #GFile, or %NULL and @error is set</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2768">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2769">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_build_system"
              c:identifier="ide_workbench_set_build_system">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2518">Sets the #IdeBuildSystem for the workbench.

If @build_system is %NULL, then a fallback build system will be used
instead. It does not provide building capabilities, but allows for some
components that require a build system to continue functioning.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2520">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="build_system"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2521">an #IdeBuildSystem or %NULL</doc>
            <type name="BuildSystem" c:type="IdeBuildSystem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vcs"
              c:identifier="ide_workbench_set_vcs"
              glib:set-property="vcs">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="2437">Sets the #IdeVcs for the workbench.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2439">a #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="vcs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="2440">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_async" c:identifier="ide_workbench_unload_async">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1725">Asynchronously unloads the workbench.

All #IdeWorkspace windows will be closed after calling this
function.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1727">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1728">a #GCancellable</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1729">a #GAsyncReadyCallback to execute upon completion</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1730">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_finish"
              c:identifier="ide_workbench_unload_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="1841">Completes a request to unload the workbench.</doc>
        <source-position filename="src/libide/gui/ide-workbench.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench.c"
               line="1849">%TRUE if the workbench was unloaded successfully,
  otherwise %FALSE and @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1843">an #IdeWorkbench</doc>
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench.c"
                 line="1844">a #GAsyncResult provided to callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_context">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="503">The "context" property is the #IdeContext for the project.

The #IdeContext is the root #IdeObject used in the tree of
objects representing the project and the workings of the IDE.</doc>
        <type name="Context"/>
      </property>
      <property name="vcs"
                writable="1"
                transfer-ownership="none"
                setter="set_vcs"
                getter="get_vcs">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench.c"
             line="518">The "vcs" property contains an #IdeVcs that represents the version control
system that is currently loaded for the project.

The #IdeVcs is registered by an #IdeWorkbenchAddin when loading a project.</doc>
        <type name="Vcs"/>
      </property>
    </class>
    <interface name="WorkbenchAddin"
               c:symbol-prefix="workbench_addin"
               c:type="IdeWorkbenchAddin"
               glib:type-name="IdeWorkbenchAddin"
               glib:get-type="ide_workbench_addin_get_type"
               glib:type-struct="WorkbenchAddinInterface">
      <source-position filename="src/libide/gui/ide-workbench-addin.h"
                       line="92"/>
      <virtual-method name="can_open" invoker="can_open">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load" invoker="load">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_project_async" invoker="load_project_async">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_project_finish"
                      invoker="load_project_finish"
                      throws="1">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_async" invoker="open_async">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="at_line" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="at_line_offset" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="BufferOpenFlags" c:type="IdeBufferOpenFlags"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="8">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_finish" invoker="open_finish" throws="1">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="82"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="project_loaded" invoker="project_loaded">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="306">This function is called after the project has been loaded.

It is useful for situations where you do not need to influence the
project loading, but do need to perform operations after it has
completed.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="308">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="309">an #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ref_action_group" invoker="ref_action_group">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="370">Gets the action group for the addin.

If provided, the action group will be registered for the addin at
"context.workbench.module-name" where "module-name" is replaced with the
module-name of the plugin.

If @self is a #GActionGroup and @self did not implement the
`IdeWorkbenchAddinInterface.ref_action_group` vfunc, then @self is
returned with it's reference count incremented.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="87"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench-addin.c"
               line="384">a #GActionGroup or %NULL</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="372">a #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restore_session" invoker="restore_session">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="351">Requests that the workbench restore any session state that was saved
into the session object @session.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="353">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="354">an #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_session" invoker="save_session">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="328">Saves session state from @self into @session.

This function is used for workbench addins that want to save state between
application runs of Builder. You can add items to the session and then
restore them when ide_workbench_addin_restore_session() is called as part
of the project loading in a future Builder application instance.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="330">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="331">an #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload_project_async"
                      invoker="unload_project_async">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload_project_finish"
                      invoker="unload_project_finish"
                      throws="1">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="vcs_changed" invoker="vcs_changed">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="283">This function notifies an #IdeWorkbenchAddin that the version control
system has changed. This happens when ide_workbench_set_vcs() is called
or after an addin is loaded.

This is helpful for plugins that want to react to VCS changes such as
changing branches, or tracking commits.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="285">a #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="vcs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="286">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="workspace_added" invoker="workspace_added">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="workspace_removed" invoker="workspace_removed">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_open" c:identifier="ide_workbench_addin_can_open">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load" c:identifier="ide_workbench_addin_load">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_project_async"
              c:identifier="ide_workbench_addin_load_project_async">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_project_finish"
              c:identifier="ide_workbench_addin_load_project_finish"
              throws="1">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_async" c:identifier="ide_workbench_addin_open_async">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="at_line" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="at_line_offset" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="BufferOpenFlags" c:type="IdeBufferOpenFlags"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_finish"
              c:identifier="ide_workbench_addin_open_finish"
              throws="1">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="project_loaded"
              c:identifier="ide_workbench_addin_project_loaded">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="306">This function is called after the project has been loaded.

It is useful for situations where you do not need to influence the
project loading, but do need to perform operations after it has
completed.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="308">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="309">an #IdeProjectInfo</doc>
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_action_group"
              c:identifier="ide_workbench_addin_ref_action_group">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="370">Gets the action group for the addin.

If provided, the action group will be registered for the addin at
"context.workbench.module-name" where "module-name" is replaced with the
module-name of the plugin.

If @self is a #GActionGroup and @self did not implement the
`IdeWorkbenchAddinInterface.ref_action_group` vfunc, then @self is
returned with it's reference count incremented.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="153"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workbench-addin.c"
               line="384">a #GActionGroup or %NULL</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="372">a #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="restore_session"
              c:identifier="ide_workbench_addin_restore_session">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="351">Requests that the workbench restore any session state that was saved
into the session object @session.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="353">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="354">an #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_session"
              c:identifier="ide_workbench_addin_save_session">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="328">Saves session state from @self into @session.

This function is used for workbench addins that want to save state between
application runs of Builder. You can add items to the session and then
restore them when ide_workbench_addin_restore_session() is called as part
of the project loading in a future Builder application instance.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="330">an #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="331">an #IdeSession</doc>
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_workbench_addin_unload">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workbench" transfer-ownership="none">
            <type name="Workbench" c:type="IdeWorkbench*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_project_async"
              c:identifier="ide_workbench_addin_unload_project_async">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="project_info" transfer-ownership="none">
            <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload_project_finish"
              c:identifier="ide_workbench_addin_unload_project_finish"
              throws="1">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="vcs_changed"
              c:identifier="ide_workbench_addin_vcs_changed">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workbench-addin.c"
             line="283">This function notifies an #IdeWorkbenchAddin that the version control
system has changed. This happens when ide_workbench_set_vcs() is called
or after an addin is loaded.

This is helpful for plugins that want to react to VCS changes such as
changing branches, or tracking commits.</doc>
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="285">a #IdeWorkbenchAddin</doc>
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="vcs"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="286">an #IdeVcs</doc>
            <type name="Vcs" c:type="IdeVcs*"/>
          </parameter>
        </parameters>
      </method>
      <method name="workspace_added"
              c:identifier="ide_workbench_addin_workspace_added">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="workspace_removed"
              c:identifier="ide_workbench_addin_workspace_removed">
        <source-position filename="src/libide/gui/ide-workbench-addin.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="WorkbenchAddinInterface"
            c:type="IdeWorkbenchAddinInterface"
            glib:is-gtype-struct-for="WorkbenchAddin">
      <source-position filename="src/libide/gui/ide-workbench-addin.h"
                       line="92"/>
      <field name="parent">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="workbench" transfer-ownership="none">
              <type name="Workbench" c:type="IdeWorkbench*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="workbench" transfer-ownership="none">
              <type name="Workbench" c:type="IdeWorkbench*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_project_async">
        <callback name="load_project_async">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="project_info" transfer-ownership="none">
              <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="load_project_finish">
        <callback name="load_project_finish" throws="1">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_project_async">
        <callback name="unload_project_async">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="54"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="project_info" transfer-ownership="none">
              <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload_project_finish">
        <callback name="unload_project_finish" throws="1">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="project_loaded">
        <callback name="project_loaded">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="308">an #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="project_info" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="309">an #IdeProjectInfo</doc>
              <type name="ProjectInfo" c:type="IdeProjectInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workspace_added">
        <callback name="workspace_added">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="workspace" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="workspace_removed">
        <callback name="workspace_removed">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="workspace" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_open">
        <callback name="can_open">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="content_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="priority" transfer-ownership="none">
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open_async">
        <callback name="open_async">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="content_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="at_line" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="at_line_offset" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <type name="BufferOpenFlags" c:type="IdeBufferOpenFlags"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <type name="Panel.Position" c:type="PanelPosition*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="9">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="9">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open_finish">
        <callback name="open_finish" throws="1">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="82"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="vcs_changed">
        <callback name="vcs_changed">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="85"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="285">a #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="vcs"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="286">an #IdeVcs</doc>
              <type name="Vcs" c:type="IdeVcs*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ref_action_group">
        <callback name="ref_action_group">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="87"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workbench-addin.c"
                 line="384">a #GActionGroup or %NULL</doc>
            <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="372">a #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_session">
        <callback name="save_session">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="88"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="330">an #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="331">an #IdeSession</doc>
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restore_session">
        <callback name="restore_session">
          <source-position filename="src/libide/gui/ide-workbench-addin.h"
                           line="90"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="353">an #IdeWorkbenchAddin</doc>
              <type name="WorkbenchAddin" c:type="IdeWorkbenchAddin*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workbench-addin.c"
                   line="354">an #IdeSession</doc>
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="WorkbenchClass"
            c:type="IdeWorkbenchClass"
            glib:is-gtype-struct-for="Workbench">
      <source-position filename="src/libide/gui/ide-workbench.h" line="40"/>
      <field name="parent_class">
        <type name="Gtk.WindowGroupClass" c:type="GtkWindowGroupClass"/>
      </field>
    </record>
    <class name="Workspace"
           c:symbol-prefix="workspace"
           c:type="IdeWorkspace"
           parent="Adw.ApplicationWindow"
           abstract="1"
           glib:type-name="IdeWorkspace"
           glib:get-type="ide_workspace_get_type"
           glib:type-struct="WorkspaceClass">
      <source-position filename="src/libide/gui/ide-workspace.h" line="100"/>
      <implements name="Gio.ActionGroup"/>
      <implements name="Gio.ActionMap"/>
      <implements name="Gtk.Accessible"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.ConstraintTarget"/>
      <implements name="Gtk.Native"/>
      <implements name="Gtk.Root"/>
      <implements name="Gtk.ShortcutManager"/>
      <virtual-method name="add_grid_column" invoker="add_grid_column">
        <source-position filename="src/libide/gui/ide-workspace.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="column" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_overlay" invoker="add_overlay">
        <source-position filename="src/libide/gui/ide-workspace.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="overlay" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_page" invoker="add_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1059">Adds @page to @workspace.

In future versions, @position may be updated to reflect the
position in which @page was added.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1061">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1062">an #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1063">the position for the page</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="add_pane" invoker="add_pane">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1086">Adds @pane to @workspace.

In future versions, @position may be updated to reflect the
position in which @pane was added.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1088">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="pane" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1089">an #IdePane</doc>
            <type name="Pane" c:type="IdePane*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1090">the position for the pane</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="agree_to_close_async">
        <source-position filename="src/libide/gui/ide-workspace.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="agree_to_close_finish" throws="1">
        <source-position filename="src/libide/gui/ide-workspace.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="can_search">
        <source-position filename="src/libide/gui/ide-workspace.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="context_set">
        <source-position filename="src/libide/gui/ide-workspace.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <type name="Context" c:type="IdeContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="foreach_page" invoker="foreach_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="878">Calls @callback for each #IdePage found within the workspace.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="880">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="881">a callback to execute for each view</doc>
            <type name="PageCallback" c:type="IdePageCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="882">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_frame_at_position"
                      invoker="get_frame_at_position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1431">Attempts to locate the #PanelFrame at a given position.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="87"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="1438">a #PaneFrame or %NULL</doc>
          <type name="Panel.Frame" c:type="PanelFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1433">an #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1434">an #PanelPosition</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_header_bar" invoker="get_header_bar">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="898">Gets the headerbar for the workspace, if it is an #IdeHeaderBar.
Also works around Gtk giving back a GtkStack for the header bar.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="65"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="905">an #IdeHeaderBar or %NULL</doc>
          <type name="HeaderBar" c:type="IdeHeaderBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="900">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_most_recent_frame"
                      invoker="get_most_recent_frame">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="936">Gets the most recently selected frame.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="67"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="942">an #IdeFrame or %NULL</doc>
          <type name="Frame" c:type="IdeFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="938">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_most_recent_page"
                      invoker="get_most_recent_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="915">Gets the most recently focused #IdePage.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="66"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="921">an #IdePage or %NULL</doc>
          <type name="Page" c:type="IdePage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="917">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_overlay" invoker="remove_overlay">
        <source-position filename="src/libide/gui/ide-workspace.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="overlay" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restore_session">
        <source-position filename="src/libide/gui/ide-workspace.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restore_size">
        <source-position filename="src/libide/gui/ide-workspace.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_session">
        <source-position filename="src/libide/gui/ide-workspace.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_size">
        <source-position filename="src/libide/gui/ide-workspace.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="width" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height" transfer-ownership="none">
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="action_set_enabled"
              c:identifier="ide_workspace_action_set_enabled">
        <source-position filename="src/libide/gui/ide-workspace.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_grid_column"
              c:identifier="ide_workspace_add_grid_column">
        <source-position filename="src/libide/gui/ide-workspace.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_overlay" c:identifier="ide_workspace_add_overlay">
        <source-position filename="src/libide/gui/ide-workspace.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_page" c:identifier="ide_workspace_add_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1059">Adds @page to @workspace.

In future versions, @position may be updated to reflect the
position in which @page was added.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1061">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="page" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1062">an #IdePage</doc>
            <type name="Page" c:type="IdePage*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1063">the position for the page</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_pane" c:identifier="ide_workspace_add_pane">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1086">Adds @pane to @workspace.

In future versions, @position may be updated to reflect the
position in which @pane was added.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1088">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="pane" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1089">an #IdePane</doc>
            <type name="Pane" c:type="IdePane*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1090">the position for the pane</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="addin_find_by_module_name"
              c:identifier="ide_workspace_addin_find_by_module_name">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1026">Finds the addin (if any) matching the plugin's @module_name.</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="78"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="1033">an #IdeWorkspaceAddin or %NULL</doc>
          <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
        </return-value>
        <parameters>
          <instance-parameter name="workspace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1028">an #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="module_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1029">the name of the addin module</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="foreach_page" c:identifier="ide_workspace_foreach_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="878">Calls @callback for each #IdePage found within the workspace.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="880">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="881">a callback to execute for each view</doc>
            <type name="PageCallback" c:type="IdePageCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="882">closure data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cancellable"
              c:identifier="ide_workspace_get_cancellable">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="855">Gets a cancellable for a window. This is useful when you want operations
to be cancelled if a window is closed.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="862">a #GCancellable</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="857">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_context"
              c:identifier="ide_workspace_get_context"
              glib:get-property="context">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="819">Gets the #IdeContext for the #IdeWorkspace, which is set when the
workspace joins an #IdeWorkbench.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="126"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="825">an #IdeContext or %NULL</doc>
          <type name="Context" c:type="IdeContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_frame_at_position"
              c:identifier="ide_workspace_get_frame_at_position">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1431">Attempts to locate the #PanelFrame at a given position.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="138"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="1438">a #PaneFrame or %NULL</doc>
          <type name="Panel.Frame" c:type="PanelFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1433">an #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1434">an #PanelPosition</doc>
            <type name="Panel.Position" c:type="PanelPosition*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_header_bar"
              c:identifier="ide_workspace_get_header_bar">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="898">Gets the headerbar for the workspace, if it is an #IdeHeaderBar.
Also works around Gtk giving back a GtkStack for the header bar.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="124"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="905">an #IdeHeaderBar or %NULL</doc>
          <type name="HeaderBar" c:type="IdeHeaderBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="900">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="ide_workspace_get_id"
              glib:get-property="id">
        <source-position filename="src/libide/gui/ide-workspace.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_most_recent_frame"
              c:identifier="ide_workspace_get_most_recent_frame">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="936">Gets the most recently selected frame.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="136"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="942">an #IdeFrame or %NULL</doc>
          <type name="Frame" c:type="IdeFrame*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="938">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_most_recent_page"
              c:identifier="ide_workspace_get_most_recent_page">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="915">Gets the most recently focused #IdePage.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="134"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="921">an #IdePage or %NULL</doc>
          <type name="Page" c:type="IdePage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="917">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_statusbar" c:identifier="ide_workspace_get_statusbar">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1172">Gets the statusbar if any.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="152"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace.c"
               line="1178">a #PanelStatusbar or %NULL</doc>
          <type name="Panel.Statusbar" c:type="PanelStatusbar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1174">a #IdeWorkspace</doc>
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_toolbar_style"
              c:identifier="ide_workspace_get_toolbar_style"
              glib:get-property="toolbar-style">
        <source-position filename="src/libide/gui/ide-workspace.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="Adw.ToolbarStyle" c:type="AdwToolbarStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="inhibit_logout"
              c:identifier="ide_workspace_inhibit_logout">
        <source-position filename="src/libide/gui/ide-workspace.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_overlay"
              c:identifier="ide_workspace_remove_overlay">
        <source-position filename="src/libide/gui/ide-workspace.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="ide_workspace_set_id"
              glib:set-property="id">
        <source-position filename="src/libide/gui/ide-workspace.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_toolbar_style"
              c:identifier="ide_workspace_set_toolbar_style"
              glib:set-property="toolbar-style">
        <source-position filename="src/libide/gui/ide-workspace.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <type name="Adw.ToolbarStyle" c:type="AdwToolbarStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="uninhibit_logout"
              c:identifier="ide_workspace_uninhibit_logout">
        <source-position filename="src/libide/gui/ide-workspace.h" line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="context" transfer-ownership="none" getter="get_context">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="723">The "context" property is the #IdeContext for the workspace. This is set
when the workspace joins a workbench.</doc>
        <type name="Context"/>
      </property>
      <property name="id"
                writable="1"
                transfer-ownership="none"
                setter="set_id"
                getter="get_id"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="736">The "id" property is a unique identifier for the workspace
within the project.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="search-popover" transfer-ownership="none">
        <type name="SearchPopover"/>
      </property>
      <property name="toolbar-style"
                writable="1"
                transfer-ownership="none"
                setter="set_toolbar_style"
                getter="get_toolbar_style"
                default-value="ADW_TOOLBAR_RAISED">
        <type name="Adw.ToolbarStyle"/>
      </property>
      <field name="parent_instance">
        <type name="Adw.ApplicationWindow" c:type="AdwApplicationWindow"/>
      </field>
    </class>
    <interface name="WorkspaceAddin"
               c:symbol-prefix="workspace_addin"
               c:type="IdeWorkspaceAddin"
               glib:type-name="IdeWorkspaceAddin"
               glib:get-type="ide_workspace_addin_get_type"
               glib:type-struct="WorkspaceAddinInterface">
      <source-position filename="src/libide/gui/ide-workspace-addin.h"
                       line="58"/>
      <virtual-method name="load" invoker="load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="95">Lods the #IdeWorkspaceAddin.

This is a good place to modify the workspace from your addin.
Remember to unmodify the workspace in ide_workspace_addin_unload().</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="97">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="page_changed" invoker="page_changed">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="141">Called when the current page has changed based on focus within
the workspace.</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="143">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="page"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="144">an #IdePage or %NULL</doc>
            <type name="Page" c:type="IdePage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="ref_action_group" invoker="ref_action_group">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="160">Gets the action group for the workspace addin. This is automatically
registered with an action prefix like "workspace.module-name" where
"module-name" is the value of "Module=" in the plugin's manifest.</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace-addin.c"
               line="168">a #GActionGroup or %NULL</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="162">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restore_session" invoker="restore_session">
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="restore_session_item">
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
          <parameter name="item" transfer-ownership="none">
            <type name="SessionItem" c:type="IdeSessionItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_session" invoker="save_session">
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unload" invoker="unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="118">Unloads the #IdeWorkspaceAddin.

This is a good place to unmodify the workspace from anything you
did in ide_workspace_addin_load().</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="120">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="load" c:identifier="ide_workspace_addin_load">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="95">Lods the #IdeWorkspaceAddin.

This is a good place to modify the workspace from your addin.
Remember to unmodify the workspace in ide_workspace_addin_unload().</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="97">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
      <method name="page_changed"
              c:identifier="ide_workspace_addin_page_changed">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="141">Called when the current page has changed based on focus within
the workspace.</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="143">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="page"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="144">an #IdePage or %NULL</doc>
            <type name="Page" c:type="IdePage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_action_group"
              c:identifier="ide_workspace_addin_ref_action_group">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="160">Gets the action group for the workspace addin. This is automatically
registered with an action prefix like "workspace.module-name" where
"module-name" is the value of "Module=" in the plugin's manifest.</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="76"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-workspace-addin.c"
               line="168">a #GActionGroup or %NULL</doc>
          <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="162">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="restore_session"
              c:identifier="ide_workspace_addin_restore_session">
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_session"
              c:identifier="ide_workspace_addin_save_session">
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="session" transfer-ownership="none">
            <type name="Session" c:type="IdeSession*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unload" c:identifier="ide_workspace_addin_unload">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace-addin.c"
             line="118">Unloads the #IdeWorkspaceAddin.

This is a good place to unmodify the workspace from anything you
did in ide_workspace_addin_load().</doc>
        <source-position filename="src/libide/gui/ide-workspace-addin.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="120">a #IdeWorkspaceAddin</doc>
            <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
          </instance-parameter>
          <parameter name="workspace" transfer-ownership="none">
            <type name="Workspace" c:type="IdeWorkspace*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="WorkspaceAddinInterface"
            c:type="IdeWorkspaceAddinInterface"
            glib:is-gtype-struct-for="WorkspaceAddin">
      <source-position filename="src/libide/gui/ide-workspace-addin.h"
                       line="58"/>
      <field name="parent_iface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="load">
        <callback name="load">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace-addin.c"
                   line="97">a #IdeWorkspaceAddin</doc>
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
            <parameter name="workspace" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unload">
        <callback name="unload">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace-addin.c"
                   line="120">a #IdeWorkspaceAddin</doc>
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
            <parameter name="workspace" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="page_changed">
        <callback name="page_changed">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace-addin.c"
                   line="143">a #IdeWorkspaceAddin</doc>
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
            <parameter name="page"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace-addin.c"
                   line="144">an #IdePage or %NULL</doc>
              <type name="Page" c:type="IdePage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="ref_action_group">
        <callback name="ref_action_group">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="50"/>
          <return-value transfer-ownership="full" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace-addin.c"
                 line="168">a #GActionGroup or %NULL</doc>
            <type name="Gio.ActionGroup" c:type="GActionGroup*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace-addin.c"
                   line="162">a #IdeWorkspaceAddin</doc>
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_session">
        <callback name="save_session">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restore_session">
        <callback name="restore_session">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restore_session_item">
        <callback name="restore_session_item">
          <source-position filename="src/libide/gui/ide-workspace-addin.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="WorkspaceAddin" c:type="IdeWorkspaceAddin*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <type name="SessionItem" c:type="IdeSessionItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <callback name="WorkspaceCallback" c:type="IdeWorkspaceCallback">
      <source-position filename="src/libide/gui/ide-workspace.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="workspace" transfer-ownership="none">
          <type name="Workspace" c:type="IdeWorkspace*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="WorkspaceClass"
            c:type="IdeWorkspaceClass"
            glib:is-gtype-struct-for="Workspace">
      <source-position filename="src/libide/gui/ide-workspace.h" line="100"/>
      <field name="parent_class">
        <type name="Adw.ApplicationWindowClass"
              c:type="AdwApplicationWindowClass"/>
      </field>
      <field name="action_mixin">
        <type name="ActionMixin" c:type="IdeActionMixin"/>
      </field>
      <field name="kind">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="has_statusbar" bits="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="_unused_flags" bits="31">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="context_set">
        <callback name="context_set">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="context" transfer-ownership="none">
              <type name="Context" c:type="IdeContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="foreach_page">
        <callback name="foreach_page">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="880">a #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       scope="call"
                       closure="2">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="881">a callback to execute for each view</doc>
              <type name="PageCallback" c:type="IdePageCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="2">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="882">closure data for @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_header_bar">
        <callback name="get_header_bar">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="65"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="905">an #IdeHeaderBar or %NULL</doc>
            <type name="HeaderBar" c:type="IdeHeaderBar*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="900">a #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_most_recent_page">
        <callback name="get_most_recent_page">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="66"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="921">an #IdePage or %NULL</doc>
            <type name="Page" c:type="IdePage*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="917">a #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_most_recent_frame">
        <callback name="get_most_recent_frame">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="67"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="942">an #IdeFrame or %NULL</doc>
            <type name="Frame" c:type="IdeFrame*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="938">a #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="agree_to_close_async">
        <callback name="agree_to_close_async">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="agree_to_close_finish">
        <callback name="agree_to_close_finish" throws="1">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="72"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_pane">
        <callback name="add_pane">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1088">a #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="pane" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1089">an #IdePane</doc>
              <type name="Pane" c:type="IdePane*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1090">the position for the pane</doc>
              <type name="Panel.Position" c:type="PanelPosition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_page">
        <callback name="add_page">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="78"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1061">a #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="page" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1062">an #IdePage</doc>
              <type name="Page" c:type="IdePage*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1063">the position for the page</doc>
              <type name="Panel.Position" c:type="PanelPosition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_grid_column">
        <callback name="add_grid_column">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="column" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="add_overlay">
        <callback name="add_overlay">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="83"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="overlay" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_overlay">
        <callback name="remove_overlay">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="85"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="overlay" transfer-ownership="none">
              <type name="Gtk.Widget" c:type="GtkWidget*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_frame_at_position">
        <callback name="get_frame_at_position">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="87"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1438">a #PaneFrame or %NULL</doc>
            <type name="Panel.Frame" c:type="PanelFrame*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1433">an #IdeWorkspace</doc>
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libide/gui/ide-workspace.c"
                   line="1434">an #PanelPosition</doc>
              <type name="Panel.Position" c:type="PanelPosition*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restore_size">
        <callback name="restore_size">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="89"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_size">
        <callback name="save_size">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="92"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="width" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
            <parameter name="height" transfer-ownership="none">
              <type name="gint" c:type="int*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_search">
        <callback name="can_search">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="95"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_session">
        <callback name="save_session">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="96"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="restore_session">
        <callback name="restore_session">
          <source-position filename="src/libide/gui/ide-workspace.h"
                           line="98"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Workspace" c:type="IdeWorkspace*"/>
            </parameter>
            <parameter name="session" transfer-ownership="none">
              <type name="Session" c:type="IdeSession*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <method name="install_action"
              c:identifier="ide_workspace_class_install_action">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1560">This should be called at class initialization time to specify
actions to be added for all instances of this class.

Actions installed by this function are stateless. The only state
they have is whether they are enabled or not.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="workspace_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1562">an `IdeWorkspaceClass`</doc>
            <type name="WorkspaceClass" c:type="IdeWorkspaceClass*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1563">a prefixed action name, such as "clipboard.paste"</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="parameter_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1564">the parameter type</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="activate"
                     transfer-ownership="none"
                     scope="notified">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1565">callback to use when the action is activated</doc>
            <type name="ActionActivateFunc" c:type="IdeActionActivateFunc"/>
          </parameter>
        </parameters>
      </method>
      <method name="install_property_action"
              c:identifier="ide_workspace_class_install_property_action">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="1584">Installs an action called @action_name on @widget_class and
binds its state to the value of the @property_name property.

This function will perform a few santity checks on the property selected
via @property_name. Namely, the property must exist, must be readable,
writable and must not be construct-only. There are also restrictions
on the type of the given property, it must be boolean, int, unsigned int,
double or string. If any of these conditions are not met, a critical
warning will be printed and no action will be added.

The state type of the action matches the property type.

If the property is boolean, the action will have no parameter and
toggle the property value. Otherwise, the action will have a parameter
of the same type as the property.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="workspace_class" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1586">an `IdeWorkspaceClass`</doc>
            <type name="WorkspaceClass" c:type="IdeWorkspaceClass*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1587">name of the action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="property_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="1588">name of the property in instances of @widget_class
  or any parent class.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kind" c:identifier="ide_workspace_class_set_kind">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-workspace.c"
             line="368">Sets the shorthand name for the kind of workspace. This is used to limit
what #IdeWorkspaceAddin may load within the workspace.</doc>
        <source-position filename="src/libide/gui/ide-workspace.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libide/gui/ide-workspace.c"
                 line="370">a #IdeWorkspaceClass</doc>
            <type name="WorkspaceClass" c:type="IdeWorkspaceClass*"/>
          </instance-parameter>
          <parameter name="kind" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <function name="action_mixin_get_action_muxer"
              c:identifier="ide_action_mixin_get_action_muxer"
              moved-to="ActionMixin.get_action_muxer"
              introspectable="0">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="62"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-action-muxer.c"
             line="1033">an #IdeActionMuxer or %NULL</doc>
        <type name="ActionMuxer" c:type="IdeActionMuxer*"/>
      </return-value>
      <parameters>
        <parameter name="instance"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-action-muxer.c"
               line="1031">a #IdeActionMuxer</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="action_mixin_set_enabled"
              c:identifier="ide_action_mixin_set_enabled"
              moved-to="ActionMixin.set_enabled">
      <source-position filename="src/libide/core/ide-action-muxer.h"
                       line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="instance"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="action" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="enabled" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="build_error_quark" c:identifier="ide_build_error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="build_system_from_context"
              c:identifier="ide_build_system_from_context"
              moved-to="BuildSystem.from_context">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-foundry-compat.c"
           line="120">Gets the build system for the context. If no build system has been
registered, then this returns %NULL.</doc>
      <source-position filename="src/libide/foundry/ide-build-system.h"
                       line="75"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-foundry-compat.c"
             line="127">an #IdeBuildSystem</doc>
        <type name="BuildSystem" c:type="IdeBuildSystem*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-compat.c"
               line="122">a #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="cancellable_chain" c:identifier="ide_cancellable_chain">
      <doc xml:space="preserve"
           filename="src/libide/threading/ide-cancellable.c"
           line="127">If both @self and @other are not %NULL, then the cancellation of
@other will be propagated to @self if @other is cancelled.

If @self and @other are the same, @self is returned and no additional
chaining will occur.

If @self and @other are %NULL, then %NULL is returned.
If @self is non-%NULL, it will be returned.
If @self is %NULL and @other is non-%NULL, other will be
returned. This is useful to succinctly chain cancellables like:

|[
cancellable = ide_cancellable_chain (cancellable, self-&gt;cancellable);
]|</doc>
      <source-position filename="src/libide/threading/ide-cancellable.h"
                       line="26"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-cancellable.c"
             line="147">a #GCancellable or %NULL</doc>
        <type name="Gio.Cancellable" c:type="GCancellable*"/>
      </return-value>
      <parameters>
        <parameter name="self"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-cancellable.c"
               line="129">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="other"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-cancellable.c"
               line="130">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="clear_page" c:identifier="ide_clear_page">
      <source-position filename="src/libide/gui/ide-page.h" line="109"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <type name="Page" c:type="IdePage**"/>
        </parameter>
      </parameters>
    </function>
    <function name="clear_pane" c:identifier="ide_clear_pane">
      <source-position filename="src/libide/gui/ide-pane.h" line="58"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="location" transfer-ownership="none">
          <type name="Pane" c:type="IdePane**"/>
        </parameter>
      </parameters>
    </function>
    <function name="code_get_resource" c:identifier="ide_code_get_resource">
      <source-position filename="src/libide/code/ide-code-resources.h"
                       line="6"/>
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function-macro name="context_warning"
                    c:identifier="ide_context_warning"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-context.h" line="104"/>
      <parameters>
        <parameter name="instance">
        </parameter>
        <parameter name="format">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <function name="create_host_triplet"
              c:identifier="ide_create_host_triplet">
      <source-position filename="src/libide/core/ide-global.h" line="62"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="arch" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="kernel" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="system" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="create_project_id" c:identifier="ide_create_project_id">
      <doc xml:space="preserve"
           filename="src/libide/projects/ide-projects-global.c"
           line="112">Escapes the project name into something suitable using as an id.
This can be uesd to determine the directory name when the project
name should be used.</doc>
      <source-position filename="src/libide/projects/ide-projects-global.h"
                       line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-projects-global.c"
             line="120">a new string</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/projects/ide-projects-global.c"
               line="114">the name of the project</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_error_quark"
              c:identifier="ide_device_error_quark"
              moved-to="DeviceError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="diagnostic_severity_to_string"
              c:identifier="ide_diagnostic_severity_to_string"
              moved-to="DiagnosticSeverity.to_string">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-diagnostic.c"
           line="296">Returns a string suitable to represent the diagnsotic severity.</doc>
      <source-position filename="src/libide/code/ide-diagnostic.h" line="85"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-diagnostic.c"
             line="302">a string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="severity" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-diagnostic.c"
               line="298">a #IdeDiagnosticSeverity</doc>
          <type name="DiagnosticSeverity" c:type="IdeDiagnosticSeverity"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="diagnostics_get_size"
                    c:identifier="ide_diagnostics_get_size"
                    introspectable="0">
      <source-position filename="src/libide/code/ide-diagnostics.h" line="97"/>
      <parameters>
        <parameter name="d">
        </parameter>
      </parameters>
    </function-macro>
    <function name="editor_encoding_menu_new"
              c:identifier="ide_editor_encoding_menu_new">
      <doc xml:space="preserve"
           filename="src/libide/editor/ide-editor-utils.c"
           line="53">Creates a new #GMenuModel with items which will activate using
their encoding charset for the action @action_name target.</doc>
      <source-position filename="src/libide/editor/ide-editor-utils.h"
                       line="38"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-utils.c"
             line="60">a #GMenuModel</doc>
        <type name="Gio.MenuModel" c:type="GMenuModel*"/>
      </return-value>
      <parameters>
        <parameter name="action_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-utils.c"
               line="55">the action to activate when selecting menu items</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_file_chooser_add_encodings"
              c:identifier="ide_editor_file_chooser_add_encodings">
      <source-position filename="src/libide/editor/ide-editor-utils.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="chooser" transfer-ownership="none">
          <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_file_chooser_add_line_endings"
              c:identifier="ide_editor_file_chooser_add_line_endings">
      <source-position filename="src/libide/editor/ide-editor-utils.h"
                       line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="chooser" transfer-ownership="none">
          <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
        </parameter>
        <parameter name="selected" transfer-ownership="none">
          <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_file_chooser_get_encoding"
              c:identifier="ide_editor_file_chooser_get_encoding">
      <source-position filename="src/libide/editor/ide-editor-utils.h"
                       line="36"/>
      <return-value transfer-ownership="none">
        <type name="GtkSource.Encoding" c:type="const GtkSourceEncoding*"/>
      </return-value>
      <parameters>
        <parameter name="chooser" transfer-ownership="none">
          <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_file_chooser_get_line_ending"
              c:identifier="ide_editor_file_chooser_get_line_ending">
      <source-position filename="src/libide/editor/ide-editor-utils.h"
                       line="37"/>
      <return-value transfer-ownership="none">
        <type name="GtkSource.NewlineType" c:type="GtkSourceNewlineType"/>
      </return-value>
      <parameters>
        <parameter name="chooser" transfer-ownership="none">
          <type name="Gtk.FileChooser" c:type="GtkFileChooser*"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_focus_buffer"
              c:identifier="ide_editor_focus_buffer">
      <source-position filename="src/libide/editor/ide-editor.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="workspace" transfer-ownership="none">
          <type name="Workspace" c:type="IdeWorkspace*"/>
        </parameter>
        <parameter name="position" transfer-ownership="none">
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <type name="Buffer" c:type="IdeBuffer*"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_focus_location"
              c:identifier="ide_editor_focus_location">
      <source-position filename="src/libide/editor/ide-editor.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="workspace" transfer-ownership="none">
          <type name="Workspace" c:type="IdeWorkspace*"/>
        </parameter>
        <parameter name="position" transfer-ownership="none">
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="Location" c:type="IdeLocation*"/>
        </parameter>
      </parameters>
    </function>
    <function name="editor_get_resource"
              c:identifier="ide_editor_get_resource">
      <source-position filename="src/libide/editor/ide-editor-resources.h"
                       line="6"/>
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function name="editor_syntax_menu_new"
              c:identifier="ide_editor_syntax_menu_new">
      <doc xml:space="preserve"
           filename="src/libide/editor/ide-editor-utils.c"
           line="242">Creates a new #GMenuModel with items which will activate using
their syntax id for the action @action_name target.</doc>
      <source-position filename="src/libide/editor/ide-editor-utils.h"
                       line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/editor/ide-editor-utils.c"
             line="249">a #GMenuModel</doc>
        <type name="Gio.MenuModel" c:type="GMenuModel*"/>
      </return-value>
      <parameters>
        <parameter name="action_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/editor/ide-editor-utils.c"
               line="244">the action to activate when selecting menu items</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="environ_parse" c:identifier="ide_environ_parse">
      <doc xml:space="preserve"
           filename="src/libide/threading/ide-environment.c"
           line="365">Parses a KEY=VALUE style key-pair into @key and @value.</doc>
      <source-position filename="src/libide/threading/ide-environment.h"
                       line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/threading/ide-environment.c"
             line="373">%TRUE if @pair was successfully parsed</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="pair" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-environment.c"
               line="367">the KEY=VALUE pair</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-environment.c"
               line="368">a location for a @key</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-environment.c"
               line="369">a location for a @value</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_manager_show"
              c:identifier="ide_file_manager_show"
              moved-to="File.manager_show"
              throws="1">
      <doc xml:space="preserve"
           filename="src/libide/gtk/ide-file-manager.c"
           line="62">Requests that @file is displayed within the default desktop file manager.
Typically this means browsing to the parent directory and then selecting
@file within that directory.</doc>
      <source-position filename="src/libide/gtk/ide-file-manager.h" line="27"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-file-manager.c"
             line="71">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-file-manager.c"
               line="64">a #GFile to load within the desktop file manager</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="find_program_in_host_path"
              c:identifier="ide_find_program_in_host_path">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-path.c"
           line="157">Like g_find_program_in_path() but checks the host system which may not be
the same as the container we're running within.</doc>
      <source-position filename="src/libide/io/ide-path.h" line="40"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-path.c"
             line="164">a path or %NULL</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="program" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-path.c"
               line="159">the name of the executable</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="font_description_to_css"
              c:identifier="ide_font_description_to_css">
      <source-position filename="src/libide/gtk/ide-font-description.h"
                       line="31"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="font_desc" transfer-ownership="none">
          <type name="Pango.FontDescription"
                c:type="const PangoFontDescription*"/>
        </parameter>
      </parameters>
    </function>
    <function name="foundry_bytes_to_memfd"
              c:identifier="ide_foundry_bytes_to_memfd">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-foundry-global.c"
           line="205">Writes all of @bytes to a new memfd or tempfile and returns
the file-descriptor. -1 is returned upon error.

if @bytes is %NULL, then a memfd/tempfile that is empty will
be returned if successful.</doc>
      <source-position filename="src/libide/foundry/ide-foundry-global.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-foundry-global.c"
             line="216">-1 upon failure, otherwise a file-descriptor</doc>
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="bytes"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-global.c"
               line="207">a #GBytes or %NULL</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-global.c"
               line="208">the name for the memfd or tempfile</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="foundry_file_to_memfd"
              c:identifier="ide_foundry_file_to_memfd">
      <source-position filename="src/libide/foundry/ide-foundry-global.h"
                       line="36"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="foundry_get_launcher_for_context"
              c:identifier="ide_foundry_get_launcher_for_context"
              throws="1">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-foundry-global.c"
           line="52">A helper to get a launcher for @program in the proper environment.

If available within the build environment, that will be used.
Otherwise, either the host system or a bundled version of the
program may be used as a fallback.

If the program could not be located, %NULL is returned and
@error is set.</doc>
      <source-position filename="src/libide/foundry/ide-foundry-global.h"
                       line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-foundry-global.c"
             line="68">a #IdeSubprocessLauncher or %NULL and
  @error is set.</doc>
        <type name="SubprocessLauncher" c:type="IdeSubprocessLauncher*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-global.c"
               line="54">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
        <parameter name="program_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-global.c"
               line="55">the basename of the program</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="bundled_program_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/foundry/ide-foundry-global.c"
               line="56">the path to a bundled version of the program</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="fuzzy_highlight" c:identifier="ide_fuzzy_highlight">
      <source-position filename="src/libide/search/ide-fuzzy-mutable-index.h"
                       line="70"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="query" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="case_sensitive" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_content_type_get_symbolic_icon"
              c:identifier="ide_g_content_type_get_symbolic_icon">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-content-type.c"
           line="134">This function is similar to g_content_type_get_symbolic_icon() except that
it takes our bundled icons into account to ensure that they are taken at a
higher priority than the fallbacks from the current icon theme such as
Adwaita.

In 3.40, this function was modified to add the @filename parameter.</doc>
      <source-position filename="src/libide/io/ide-content-type.h" line="28"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-content-type.c"
             line="145">A #GIcon or %NULL</doc>
        <type name="Gio.Icon" c:type="GIcon*"/>
      </return-value>
      <parameters>
        <parameter name="content_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-content-type.c"
               line="136">the content-type to lookup</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_date_time_format_for_display"
              c:identifier="ide_g_date_time_format_for_display">
      <doc xml:space="preserve"
           filename="src/libide/gtk/ide-gtk.c"
           line="421">Helper function to create a human-friendly string describing approximately
how long ago a #GDateTime is.</doc>
      <source-position filename="src/libide/gtk/ide-gtk.h" line="61"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-gtk.c"
             line="428">A newly allocated string describing the
  date and time imprecisely such as "Yesterday".</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="423">A #GDateTime</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_add_ignored_pattern"
              c:identifier="ide_g_file_add_ignored_pattern">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="57">Adds a pattern that can be used to match ignored files. These are global
to the application, so they should only include well-known ignored files
such as those internal to a build system, or version control system, and
similar.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="48"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="59">a #GPatternSpec style glob pattern</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_find_async" c:identifier="ide_g_file_find_async">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="604">Searches descendants of @file for files matching @pattern.

You may only match on the filename, not the directory.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="606">a #IdeGlib</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="607">the glob pattern to search for using GPatternSpec</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="608">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="609">a callback to execute upon completion</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="610">closure data for @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_find_finish"
              c:identifier="ide_g_file_find_finish"
              throws="1">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="626">Gets the files that were found which matched the pattern.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="71"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="634">A #GPtrArray of #GFile</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="Gio.File"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="628">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="629">a result provided to callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_find_in_ancestors_async"
              c:identifier="ide_g_file_find_in_ancestors_async">
      <source-position filename="src/libide/io/ide-gfile.h" line="105"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_find_in_ancestors_finish"
              c:identifier="ide_g_file_find_in_ancestors_finish"
              throws="1">
      <source-position filename="src/libide/io/ide-gfile.h" line="111"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="1001">a #GFile if successful; otherwise %NULL
  and @error is et.</doc>
        <type name="Gio.File" c:type="GFile*"/>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_find_with_depth"
              c:identifier="ide_g_file_find_with_depth">
      <source-position filename="src/libide/io/ide-gfile.h" line="53"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="520">a #GPtrArray of #GFile.</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="Gio.File"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="514">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="515">the glob pattern to search for using GPatternSpec</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="max_depth" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="516">maximum tree depth to search</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="517">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_find_with_depth_async"
              c:identifier="ide_g_file_find_with_depth_async">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="548">Searches descendants of @file for files matching @pattern.

Only up to @max_depth subdirectories will be searched. However, if
@max_depth is zero, then all directories will be searched.

You may only match on the filename, not the directory.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="58"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="550">a #IdeGlib</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="pattern" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="551">the glob pattern to search for using GPatternSpec</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="max_depth" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="552">maximum tree depth to search</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="553">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="554">a callback to execute upon completion</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="555">closure data for @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_get_children_async"
              c:identifier="ide_g_file_get_children_async">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="332">This function is like g_file_enumerate_children_async() except that
it returns a #GPtrArray of #GFileInfo instead of an enumerator.

This can be convenient when you know you need all of the #GFileInfo
accessable at once, or the size will be small.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="75"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="334">a #IdeGlib</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="335">attributes to retrieve</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="336">flags for the query</doc>
          <type name="Gio.FileQueryInfoFlags" c:type="GFileQueryInfoFlags"/>
        </parameter>
        <parameter name="io_priority" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="337">the io priority</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="338">a #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="6">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="339">a callback to execute upon completion</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="340">closure data for @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_get_children_finish"
              c:identifier="ide_g_file_get_children_finish"
              throws="1">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="385">Completes an asynchronous request to ide_g_file_get_children_async().</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="83"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="393">A #GPtrArray
  of #GFileInfo if successful, otherwise %NULL.</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="Gio.FileInfo"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="387">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="388">a #GAsyncResult provided to callback</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_get_uncanonical_relative_path"
              c:identifier="ide_g_file_get_uncanonical_relative_path">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="174">This function is similar to g_file_get_relative_path() except that
@file and @other only need to have a shared common ancestor.

This is useful if you must use a relative path instead of the absolute,
canonical path.

This is being implemented for use when communicating to GDB. When that
becomes unnecessary, this should no longer be used.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="50"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="188">A relative path, or %NULL if no common ancestor was
  found for the relative path.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="176">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="other" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="177">a #GFile with a common ancestor to @file</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_is_ignored" c:identifier="ide_g_file_is_ignored">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="124">Checks if @file should be ignored using the internal ignore rules.  If you
care about the version control system, see #IdeVcs and ide_vcs_is_ignored().</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="131">%TRUE if @file should be ignored; otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="126">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_walk" c:identifier="ide_g_file_walk">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="836">Calls @callback for every directory starting from @directory.

All of the fileinfo for the directory will be provided to the callback for
each directory.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="838">a #GFile that is a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="839">attributes to include in #GFileInfo</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="840">an optional cancellable</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="4">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="841">a callback for each directory starting from @directory</doc>
          <type name="FileWalkCallback" c:type="IdeFileWalkCallback"/>
        </parameter>
        <parameter name="callback_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="842">closure data for @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_file_walk_with_ignore"
              c:identifier="ide_g_file_walk_with_ignore">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="723">Calls @callback for every directory starting from @directory.

All of the fileinfo for the directory will be provided to the callback for
each directory.

If @ignore_file is set, this function will check to see if that file exists
within @directory and skip it (and all descendants) if discovered.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="98"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="directory" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="725">a #GFile that is a directory</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="726">attributes to include in #GFileInfo</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ignore_file"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="727">the filename within @directory to indicate that
  the directory should be ignored</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="729">an optional cancellable</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="730">a callback for each directory starting from
  the @directory</doc>
          <type name="FileWalkCallback" c:type="IdeFileWalkCallback"/>
        </parameter>
        <parameter name="callback_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="732">closure data for @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_host_file_get_contents"
              c:identifier="ide_g_host_file_get_contents"
              throws="1">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="651">This is similar to g_file_get_contents() but ensures that we get
the file from the host, rather than our mount namespace.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="87"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="661">%TRUE if successful; otherwise %FALSE and @error is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="653">the path on the host</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="contents"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="654">a location for the contents</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="len"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="655">a location for the size, not including trailing \0</doc>
          <type name="gsize" c:type="gsize*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_time_span_to_label"
              c:identifier="ide_g_time_span_to_label">
      <doc xml:space="preserve"
           filename="src/libide/gtk/ide-gtk.c"
           line="387">Creates a string describing the time span in hours, minutes, and seconds.
For example, a time span of three and a half minutes would be "3:30".
2 days, 3 hours, 6 minutes, and 20 seconds would be "51:06:20".</doc>
      <source-position filename="src/libide/gtk/ide-gtk.h" line="59"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/gtk/ide-gtk.c"
             line="395">A newly allocated string describing the time span.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="span" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="389">the span of time</doc>
          <type name="GLib.TimeSpan" c:type="GTimeSpan"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_application_id" c:identifier="ide_get_application_id">
      <source-position filename="src/libide/core/ide-global.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_main_thread" c:identifier="ide_get_main_thread">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-global.c"
           line="62">Gets #GThread of the main thread.

Generally this is used by macros to determine what thread they code is
currently running within.</doc>
      <source-position filename="src/libide/core/ide-global.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-global.c"
             line="70">a #GThread</doc>
        <type name="GLib.Thread" c:type="GThread*"/>
      </return-value>
    </function>
    <function name="get_process_kind" c:identifier="ide_get_process_kind">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-global.c"
           line="78">Gets the kind of process we're running as.</doc>
      <source-position filename="src/libide/core/ide-global.h" line="50"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-global.c"
             line="83">an #IdeProcessKind</doc>
        <type name="ProcessKind" c:type="IdeProcessKind"/>
      </return-value>
    </function>
    <function name="get_program_name" c:identifier="ide_get_program_name">
      <source-position filename="src/libide/core/ide-global.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_projects_dir" c:identifier="ide_get_projects_dir">
      <doc xml:space="preserve"
           filename="src/libide/projects/ide-projects-global.c"
           line="44">Gets the directory to store projects within.

First, this checks GSettings for a directory. If that directory exists,
it is returned.

If not, it then checks for the non-translated name "Projects" in the
users home directory. If it exists, that is returned.

If that does not exist, and a GSetting path existed, but was non-existant
that is returned.

If the GSetting was empty, the translated name "Projects" is returned.</doc>
      <source-position filename="src/libide/core/ide-global.h" line="70"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/projects/ide-projects-global.c"
             line="60">a #GFile</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="get_relocatable_path"
              c:identifier="ide_get_relocatable_path">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-global.c"
           line="216">Gets the path to a resource that may be relocatable at runtime.</doc>
      <source-position filename="src/libide/core/ide-global.h" line="68"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/core/ide-global.c"
             line="222">a new string containing the path</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-global.c"
               line="218">a relocatable path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_system_arch" c:identifier="ide_get_system_arch">
      <source-position filename="src/libide/core/ide-global.h" line="58"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="get_system_page_size"
              c:identifier="ide_get_system_page_size">
      <source-position filename="src/libide/core/ide-global.h" line="66"/>
      <return-value transfer-ownership="none">
        <type name="gsize" c:type="gsize"/>
      </return-value>
    </function>
    <function name="get_system_type" c:identifier="ide_get_system_type">
      <source-position filename="src/libide/core/ide-global.h" line="60"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_user_default_path"
              c:identifier="ide_get_user_default_path">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-shell.c"
           line="260">Gets the default `$PATH` on the system for the user on the host.

This value is sniffed during startup and will default to `SAFE_PATH`
configured when building Builder until that value has been discovered.</doc>
      <source-position filename="src/libide/io/ide-shell.h" line="34"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-shell.c"
             line="268">a string such as "/bin:/usr/bin"</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="get_user_shell" c:identifier="ide_get_user_shell">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-shell.c"
           line="243">Gets the user preferred shell on the host.

If the background shell discovery has not yet finished due to
slow or misconfigured getent on the host, this will provide a
sensible fallback.</doc>
      <source-position filename="src/libide/io/ide-shell.h" line="32"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-shell.c"
             line="252">a shell such as "/bin/sh"</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
    </function>
    <function name="gettext" c:identifier="ide_gettext">
      <source-position filename="src/libide/core/ide-global.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="greeter_get_resource"
              c:identifier="ide_greeter_get_resource">
      <source-position filename="src/libide/greeter/ide-greeter-resources.h"
                       line="6"/>
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function name="gtk_get_resource" c:identifier="ide_gtk_get_resource">
      <source-position filename="src/libide/gtk/ide-gtk-resources.h" line="6"/>
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function name="gtk_list_store_insert_sorted"
              c:identifier="ide_gtk_list_store_insert_sorted"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/libide/gtk/ide-gtk.c"
           line="269">This function will binary search the contents of @store looking for the
location to insert a new row.

@compare_column must be the index of a column that is a %G_TYPE_POINTER,
%G_TYPE_BOXED or %G_TYPE_OBJECT based column.

@compare_func will be called with @key as the first parameter and the
value from the #GtkListStore row as the second parameter. The third and
final parameter is @compare_data.</doc>
      <source-position filename="src/libide/gtk/ide-gtk.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="store" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="271">A #GtkListStore</doc>
          <type name="Gtk.ListStore" c:type="GtkListStore*"/>
        </parameter>
        <parameter name="iter"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="272">A location for a #GtkTextIter</doc>
          <type name="Gtk.TreeIter" c:type="GtkTreeIter*"/>
        </parameter>
        <parameter name="key"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="273">A key to compare to when binary searching</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="compare_column" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="274">the column containing the data to compare</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="compare_func"
                   transfer-ownership="none"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="275">A callback to compare</doc>
          <type name="GLib.CompareDataFunc" c:type="GCompareDataFunc"/>
        </parameter>
        <parameter name="compare_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/gtk/ide-gtk.c"
               line="276">data for @compare_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_list_view_get_selected_row"
              c:identifier="ide_gtk_list_view_get_selected_row">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="67"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="view" transfer-ownership="none">
          <type name="Gtk.ListView" c:type="GtkListView*"/>
        </parameter>
        <parameter name="position" transfer-ownership="none">
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_list_view_move_next"
              c:identifier="ide_gtk_list_view_move_next">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="view" transfer-ownership="none">
          <type name="Gtk.ListView" c:type="GtkListView*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_list_view_move_previous"
              c:identifier="ide_gtk_list_view_move_previous">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="view" transfer-ownership="none">
          <type name="Gtk.ListView" c:type="GtkListView*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_progress_bar_start_pulsing"
              c:identifier="ide_gtk_progress_bar_start_pulsing">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="progress" transfer-ownership="none">
          <type name="Gtk.ProgressBar" c:type="GtkProgressBar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_progress_bar_stop_pulsing"
              c:identifier="ide_gtk_progress_bar_stop_pulsing">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="progress" transfer-ownership="none">
          <type name="Gtk.ProgressBar" c:type="GtkProgressBar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_show_uri_on_window"
              c:identifier="ide_gtk_show_uri_on_window"
              throws="1">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
        <parameter name="uri" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="timestamp" transfer-ownership="none">
          <type name="gint64" c:type="gint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_destroyed"
              c:identifier="ide_gtk_widget_destroyed">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="location" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget**"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_hide_when_empty"
              c:identifier="ide_gtk_widget_hide_when_empty">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
        <parameter name="model" transfer-ownership="none">
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_hide_with_fade"
              c:identifier="ide_gtk_widget_hide_with_fade">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="47"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_widget_show_with_fade"
              c:identifier="ide_gtk_widget_show_with_fade">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="gtk_window_present" c:identifier="ide_gtk_window_present">
      <source-position filename="src/libide/gtk/ide-gtk.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="window" transfer-ownership="none">
          <type name="Gtk.Window" c:type="GtkWindow*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="heap_index"
                    c:identifier="ide_heap_index"
                    introspectable="0">
      <source-position filename="src/libide/io/ide-heap.h" line="31"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="t">
        </parameter>
        <parameter name="i">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="heap_insert_val"
                    c:identifier="ide_heap_insert_val"
                    introspectable="0">
      <source-position filename="src/libide/io/ide-heap.h" line="30"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="v">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="heap_peek"
                    c:identifier="ide_heap_peek"
                    introspectable="0">
      <source-position filename="src/libide/io/ide-heap.h" line="32"/>
      <parameters>
        <parameter name="h">
        </parameter>
        <parameter name="t">
        </parameter>
      </parameters>
    </function-macro>
    <docsection name="ide-application-addin">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-application-addin.c"
           line="27">The #IdeApplicationAddin interface is used by plugins that want to extend
the set of features provided by #IdeApplication. This is useful if you need
utility code that is bound to the lifetime of the #IdeApplication.

The #IdeApplicationAddin is created after the application has initialized
and unloaded when Builder is shut down.

Use this interface when you can share code between multiple projects that
are open at the same time.</doc>
    </docsection>
    <docsection name="ide-buffer-addin">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-buffer-addin.c"
           line="33">The #IdeBufferAddin allows a plugin to register an object that will be
created with every #IdeBuffer. It can register extra features with the
buffer or extend it as necessary.

Once use of #IdeBufferAddin is to add a spellchecker to the buffer that
may be used by views to show the misspelled words. This is preferrable
to adding a spellchecker in each view because it allows for multiple
views to share one spellcheker on the underlying buffer.</doc>
    </docsection>
    <docsection name="ide-build-manager">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-build-manager.c"
           line="55">The #IdeBuildManager is responsible for managing the active build pipeline
as well as providing common high-level actions to plugins.

You can use various async operations such as
ide_build_manager_build_async(), ide_build_manager_clean_async(), or
ide_build_manager_rebuild_async() to build, clean, and rebuild respectively
without needing to track the build pipeline.

The #IdePipeline is used to specify how and when build operations
should occur. Plugins attach build stages to the pipeline to perform
build actions.</doc>
    </docsection>
    <docsection name="ide-code-index-entry">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-code-index-entry.c"
           line="28">The #IdeCodeIndexEntry structure contains information about something to be
indexed in the code index. It is an immutable data object so that it can be
passed between threads where data is indexed. Plugins should use
#IdeCodeIndexEntryBuilder to create index entries.</doc>
    </docsection>
    <docsection name="ide-code-indexer">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-code-indexer.c"
           line="29">The #IdeCodeIndexer interface is used to index source code in the project.
Plugins that want to provide global search features for source code should
implement this interface and specify which languages they support in their
.plugin definition, using "X-Code-Indexer-Languages". For example. to index
Python source code, you might use:

  X-Code-Indexer-Languages=python,python3</doc>
    </docsection>
    <docsection name="ide-compile-commands">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-compile-commands.c"
           line="32">The #IdeCompileCommands object provides a simplified interface to
interact with compile_commands.json files which are generated by a
number of build systems, including Clang tooling, Meson and CMake.

Create a new #IdeCompileCommands instance, and then asynchronously
load the file using ide_compile_commands_load_async(). After the
database has been loaded, you can access build commands using
ide_compile_commands_lookup().

Due to the rather unfortunate design of JSON, this file holds on
to a number of strings during the lifetime of the object, for each
of the compile commands. On larger projects, this can be the order
of a couple of megabytes.</doc>
    </docsection>
    <docsection name="ide-context">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-context.c"
           line="39">The #IdeContext object is the root object for a project. Everything
in a project is contained by this object.</doc>
    </docsection>
    <docsection name="ide-debug">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-debug.h"
           line="38">The debug macros such as %IDE_ENTRY, %IDE_EXIT, and %IDE_RETURN provide
helpers for tracing Builder and plugins at runtime.

These tracing macros will compile out when Builder is configured for a
release build. Otherwise, running Builder with the "-vvvv" command line
argument will show tracing output.</doc>
    </docsection>
    <docsection name="ide-debugger">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger.c"
           line="29">The IdeDebugger abstract base class is used by debugger implementations.
They should bridge their backend-specific features into those supported
by the API using the series of "emit" functions provided as part of
this class.

For example, when the inferior creates a new thread, the debugger
implementation should call ide_debugger_emit_thread_added().</doc>
    </docsection>
    <docsection name="ide-debugger-breakpoints">
      <doc xml:space="preserve"
           filename="src/libide/debugger/ide-debugger-breakpoints.c"
           line="30">The #IdeDebuggerBreakpoints provides a convenient container for breakpoints
about a single file. This is useful for situations like the document gutter
where we need very fast access to whether or not a line has a breakpoint set
during the rendering process.

At it's core, this is a sparse array as rarely do we have more than one
cacheline of information about breakpoints in a file.

This object is controled by the IdeDebuggerManager and will modify the
breakpoints as necessary by the current debugger. If no debugger is
active, the breakpoints are queued until the debugger has started, and
then synchronized to the debugger process.</doc>
    </docsection>
    <docsection name="ide-editor-workspace">
      <doc xml:space="preserve"
           filename="src/libide/editor/ide-editor-workspace.c"
           line="28">The editor workspace is a secondary workspace that may be added to
supplement the IdePrimaryWorkspace for additional editors. It may
also be used in an "editor" mode without a project.</doc>
    </docsection>
    <docsection name="ide-frame">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-frame.c"
           line="37">This widget is used to represent a stack of #IdePage widgets.  it
includes an #IdeFrameHeader at the top, and then a stack of pages
below.

If there are no #IdePage visibile, then an empty state widget is
displayed with some common information for the user.</doc>
    </docsection>
    <docsection name="ide-fuzzy-mutable-index">
      <doc xml:space="preserve"
           filename="src/libide/search/ide-fuzzy-mutable-index.c"
           line="28">#IdeFuzzyMutableIndex provides a fulltext index that focuses around fuzzy
matching words. This version of the datastructure is focused around
in-memory storage. This makes mutability performance of adding or removing
items from the corpus simpler.

If you need mostly read-only indexes, you might consider using
#IdeFuzzyIndex and #IdeFuzzyIndexBuilder which can create a disk-based file
and mmap() a read-only version of the data set.

It is a programming error to modify #Fuzzy while holding onto an array
of #FuzzyMatch elements. The position of strings within the IdeFuzzyMutableIndexMatch
may no longer be valid.</doc>
    </docsection>
    <docsection name="ide-greeter-workspace">
      <doc xml:space="preserve"
           filename="src/libide/greeter/ide-greeter-workspace.c"
           line="36">Use the #IdeWorkspace APIs to add pages for user guides such
as the git workflow or project creation wizard.

You can add buttons to the headerbar and use actions to change
pages such as "win.page::'page-name'".</doc>
    </docsection>
    <docsection name="ide-log">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-log.c"
           line="45">This module manages the logging facilities in Builder. It involves
formatting the standard output and error logs as well as filtering
logs based on their #GLogLevelFlags.

Generally speaking, you want to continue using the GLib logging API
such as g_debug(), g_warning(), g_message(), or g_error(). These functions
will redirect their logging information to this module who will format
the log message appropriately.

If you are writing code for Builder that is in C, you want to ensure you
set the %G_LOG_DOMAIN define at the top of your file (after the license)
as such:

## Logging from C

|[
#define G_LOG_DOMAIN "my-module"
...
static void
some_function (void)
{
  g_debug ("Use normal logging facilities");
}
]|

## Logging from Python

If you are writing an extension to Builder from Python, you may use the
helper functions provided by our Ide python module.

|[&lt;!-- Language="py" --&gt;
from gi.repository import Ide

Ide.warning("This is a warning")
Ide.debug("This is a debug")
Ide.error("This is a fatal error")
]|</doc>
    </docsection>
    <docsection name="ide-lsp-hover-provider">
      <doc xml:space="preserve"
           filename="src/libide/lsp/ide-lsp-hover-provider.c"
           line="34">The #IdeLspHoverProvider provides integration with language servers
that support hover requests. This can display markup in the interactive
tooltip that is displayed in the editor.</doc>
    </docsection>
    <docsection name="ide-notifications-button">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-notifications-button.c"
           line="31">The #IdeNotificationsButton shows ongoing notifications that have progress.
The individual notifications are displayed in a popover with appropriate
progress show for each.

The button itself will show a "combined" progress of all the active
notifications.</doc>
    </docsection>
    <docsection name="ide-object">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-object.c"
           line="30">#IdeObject is a specialized #GObject for use in Builder. It provides a
hierarchy of objects using a specialized tree similar to a DOM. You can
insert/append/prepend objects to a parent node, and track their lifetime
as part of the tree.

When an object is removed from the tree, it can automatically be destroyed
via the #IdeObject::destroy signal. This is useful as it may cause the
children of that object to be removed, recursively destroying the objects
descendants. This behavior is ideal when you want a large amount of objects
to be reclaimed once an ancestor is no longer necessary.

#IdeObject's may also have a #GCancellable associated with them. The
cancellable is created on demand when ide_object_ref_cancellable() is
called. When the object is destroyed, the #GCancellable::cancel signal
is emitted. This allows automatic cleanup of asynchronous operations
when used properly.</doc>
    </docsection>
    <docsection name="ide-omni-bar-addin">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-omni-bar-addin.c"
           line="27">The #IdeOmniBarAddin allows plugins to extend how the #IdeOmniBar
works. They can add additional components such as buttons, or more
information to the popover.

See #IdeOmniBar for information about what you can alter.</doc>
    </docsection>
    <docsection name="ide-path-cache">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-path-cache.c"
           line="27">#IdePathCache can be used to cache path lookup entries as often
needed by runtimes.

This object is thread-safe and may be accessed from multiple
threads simultaneously.</doc>
    </docsection>
    <docsection name="ide-pattern-spec">
      <doc xml:space="preserve"
           filename="src/libide/search/ide-pattern-spec.c"
           line="32">This works similar to #GPatternSpec except the query syntax is different.
It tries to match word boundaries, but with matching partial words up
to those boundaries. For example, "gtk widg" would match "gtk_widget_show".
Word boundaries include '_' and ' '. If any character is uppercase, then
case sensitivity is used.</doc>
    </docsection>
    <docsection name="ide-primary-workspace">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-primary-workspace.c"
           line="35">The primary workspace is the main workspace window for the user. This is the
"IDE experience" workspace. It is generally created by the workbench when
opening a project (unless another workspace type has been requested).

See ide_workbench_open_async() for how to select another workspace type
when opening a project.</doc>
    </docsection>
    <docsection name="ide-project-tree-addin">
      <doc xml:space="preserve"
           filename="src/libide/projects/ide-project-tree-addin.c"
           line="27">The #IdeProjectTreeAddin is used to extend the project tree. Plugins
can add new tree builders to the tree in the load virtual function. They
should remove the tree builders from the unload virtual function.</doc>
    </docsection>
    <docsection name="ide-recursive-file-monitor">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-recursive-file-monitor.c"
           line="32">This works by creating a #GFileMonitor for each directory underneath a root
directory (and recursively beyond that).

This is only designed for use on Linux, where we are using a single inotify
FD. You can still hit the max watch limit, but it is much higher than the FD
limit.</doc>
    </docsection>
    <docsection name="ide-search-reducer">
      <doc xml:space="preserve"
           filename="src/libide/search/ide-search-reducer.c"
           line="28">This is a helper structure for search engines to reduce the number
of items they inflate when performing a search.</doc>
    </docsection>
    <docsection name="ide-settings">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-settings.c"
           line="35">In Builder, we need support for settings at the user level (their chosen
defaults) as well as defaults for a project. #IdeSettings attempts to
simplify this by providing a layered approach to settings.

If a setting has been set for the current project, it will be returned. If
not, the users preference will be returned. Setting a preference via
#IdeSettings will always modify the projects setting, not the users default
settings.</doc>
    </docsection>
    <docsection name="ide-task">
      <doc xml:space="preserve"
           filename="src/libide/threading/ide-task.c"
           line="37">#IdeTask is meant to be an improved form of #GTask. There are a few
deficiencies in #GTask that have made it unsuitable for certain use cases.

#GTask does not provide a way to guarantee that the source object,
task data, and unused results are freed with in a given #GMainContext.
#IdeTask addresses this by having a more flexible result and object
ownership control.

Furthermore, #IdeTask allows consumers to force disposal from a given
thread so that the data is released there.

#IdeTask also supports chaining tasks together which makes it simpler
to avoid doing duplicate work by instead simply chaining the tasks.

There are some costs to this design. It uses the main context a bit
more than #GTask may use it.

#IdeTask allows setting a task kind which determines which thread pool
the task will be executed (and throttled) on.

Because #IdeTask needs more control over result life-cycles (for chaining
results), additional return methods have been provided. Consumers should
use ide_task_return_boxed() when working with boxed types as it allows us
to copy the result to another task. Additionally, ide_task_return_object()
provides a simplified API over ide_task_return_pointer() which also allows
copying the result to chained tasks.</doc>
    </docsection>
    <docsection name="ide-test-manager">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-test-manager.c"
           line="46">The #IdeTestManager is responsible for loading unit test provider
plugins (via the #IdeTestProvider interface) and running those unit
tests on behalf of the user.

You can access the test manager using ide_context_get_text_manager()
using the #IdeContext for the loaded project.</doc>
    </docsection>
    <docsection name="ide-version">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-version.h"
           line="26">This module provides various macros that may be used to build code based
on the version of Builder at build time.</doc>
    </docsection>
    <docsection name="ide-workbench">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-workbench.c"
           line="52">The #IdeWorkbench is a #GtkWindowGroup containing the #IdeContext (root
data-structure for a project) and all of the windows associated with the
project.

Usually, windows within the #IdeWorkbench are an #IdeWorkspace. They can
react to changes in the #IdeContext or its descendants to represent the
project and it's state.</doc>
    </docsection>
    <docsection name="ide-workspace-addin">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-workspace-addin.c"
           line="30">The #IdeWorkspaceAddin is created with each #IdeWorkspace, allowing
plugins a chance to modify each window that is created.

If you set `X-Workspace-Kind=primary` in your `.plugin` file, your
addin will only be loaded in the primary workspace. You may specify
multiple workspace kinds such as `primary` or `secondary` separated
by a comma such as `primary,secondary;`.</doc>
    </docsection>
    <function-macro name="is_flatpak"
                    c:identifier="ide_is_flatpak"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-global.h" line="40"/>
    </function-macro>
    <function name="language_format_header"
              c:identifier="ide_language_format_header">
      <source-position filename="src/libide/code/ide-language.h" line="33"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="language" transfer-ownership="none">
          <type name="GtkSource.Language" c:type="GtkSourceLanguage*"/>
        </parameter>
        <parameter name="header" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="log_get_verbosity" c:identifier="ide_log_get_verbosity">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-log.c"
           line="356">Retrieves the log verbosity, which is the number of times -v was
provided on the command line.</doc>
      <source-position filename="src/libide/core/ide-log.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
    </function>
    <function name="lsp_decode_completion_kind"
              c:identifier="ide_lsp_decode_completion_kind">
      <source-position filename="src/libide/lsp/ide-lsp-util.h" line="34"/>
      <return-value transfer-ownership="none">
        <type name="SymbolKind" c:type="IdeSymbolKind"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="lsp_decode_symbol_kind"
              c:identifier="ide_lsp_decode_symbol_kind">
      <source-position filename="src/libide/lsp/ide-lsp-util.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="SymbolKind" c:type="IdeSymbolKind"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="lsp_decode_text_edit"
              c:identifier="ide_lsp_decode_text_edit">
      <doc xml:space="preserve"
           filename="src/libide/lsp/ide-lsp-util.c"
           line="99">Attempt to parse an encoded LSP text edit into an #IdeTextEdit.</doc>
      <source-position filename="src/libide/lsp/ide-lsp-util.h" line="36"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/lsp/ide-lsp-util.c"
             line="106">an #IdeTextEdit
See_also: https://microsoft.github.io/language-server-protocol/specifications/specification-current/#textEdit</doc>
        <type name="TextEdit" c:type="IdeTextEdit*"/>
      </return-value>
      <parameters>
        <parameter name="text_edit" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-util.c"
               line="101">an lsp text edit encoded in a variant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </parameter>
        <parameter name="gfile" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/lsp/ide-lsp-util.c"
               line="102">The file the edit should be applied to</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
      </parameters>
    </function>
    <function name="lsp_plugin_register_types"
              c:identifier="ide_lsp_plugin_register_types">
      <source-position filename="src/libide/lsp/ide-lsp-plugin.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object_module" transfer-ownership="none">
          <type name="Peas.ObjectModule" c:type="PeasObjectModule*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="object_debug"
                    c:identifier="ide_object_debug"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-object.h" line="159"/>
      <parameters>
        <parameter name="instance">
        </parameter>
        <parameter name="format">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="object_message"
                    c:identifier="ide_object_message"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-object.h" line="157"/>
      <parameters>
        <parameter name="instance">
        </parameter>
        <parameter name="format">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="object_warning"
                    c:identifier="ide_object_warning"
                    introspectable="0">
      <source-position filename="src/libide/core/ide-object.h" line="158"/>
      <parameters>
        <parameter name="instance">
        </parameter>
        <parameter name="format">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
    <function name="panel_position_get_area"
              c:identifier="ide_panel_position_get_area">
      <source-position filename="src/libide/gui/ide-panel-position.h"
                       line="34"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-panel-position.c"
             line="32">%TRUE if the area was set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="29">a #PanelPosition</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </parameter>
        <parameter name="area"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="30">a location for the area</doc>
          <type name="Panel.Area" c:type="PanelArea*"/>
        </parameter>
      </parameters>
    </function>
    <function name="panel_position_get_column"
              c:identifier="ide_panel_position_get_column">
      <source-position filename="src/libide/gui/ide-panel-position.h"
                       line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-panel-position.c"
             line="51">%TRUE if the column was set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="48">a #PanelPosition</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </parameter>
        <parameter name="column"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="49">a location for a column</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="panel_position_get_depth"
              c:identifier="ide_panel_position_get_depth">
      <source-position filename="src/libide/gui/ide-panel-position.h"
                       line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-panel-position.c"
             line="89">%TRUE if the depth was set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="86">a #PanelPosition</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </parameter>
        <parameter name="depth"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="87">a location for the depth</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="panel_position_get_row"
              c:identifier="ide_panel_position_get_row">
      <source-position filename="src/libide/gui/ide-panel-position.h"
                       line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-panel-position.c"
             line="70">%TRUE if the row was set</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="67">a #PanelPosition</doc>
          <type name="Panel.Position" c:type="PanelPosition*"/>
        </parameter>
        <parameter name="row"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-panel-position.c"
               line="68">a location for the row</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_collapse" c:identifier="ide_path_collapse">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-path.c"
           line="90">This function will collapse a path that starts with the users home
directory into a shorthand notation using ~/ for the home directory.

If the path does not have the home directory as a prefix, it will
simply return a copy of @path.</doc>
      <source-position filename="src/libide/io/ide-path.h" line="32"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-path.c"
             line="99">A new path, possibly collapsed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_expand" c:identifier="ide_path_expand">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-path.c"
           line="33">This function will expand various "shell-like" features of the provided
path using the POSIX wordexp(3) function. Command substitution will
not be enabled, but path features such as ~user will be expanded.</doc>
      <source-position filename="src/libide/io/ide-path.h" line="34"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-path.c"
             line="40">A newly allocated string containing the
  expansion. A copy of the input string upon failure to expand.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_is_c_like" c:identifier="ide_path_is_c_like">
      <source-position filename="src/libide/io/ide-path.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_is_cpp_like" c:identifier="ide_path_is_cpp_like">
      <source-position filename="src/libide/io/ide-path.h" line="38"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="path_is_ignored" c:identifier="ide_path_is_ignored">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-gfile.c"
           line="74">Checks if @path should be ignored using the global file
ignores registered with Builder.</doc>
      <source-position filename="src/libide/io/ide-gfile.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-gfile.c"
             line="81">%TRUE if @path should be ignored, otherwise %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-gfile.c"
               line="76">the path to the file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="pty_intercept_create_consumer"
              c:identifier="ide_pty_intercept_create_consumer"
              moved-to="PtyIntercept.create_consumer">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-pty-intercept.c"
           line="159">Creates a new PTY consumer using posix_openpt(). Some fallbacks are
provided for non-Linux systems where O_CLOEXEC and O_NONBLOCK may
not be supported.</doc>
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="86"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="166">a FD that should be closed with close() if successful.
  Upon error, %IDE_PTY_FD_INVALID (-1) is returned.</doc>
        <type name="PtyFd" c:type="IdePtyFd"/>
      </return-value>
    </function>
    <function name="pty_intercept_create_producer"
              c:identifier="ide_pty_intercept_create_producer"
              moved-to="PtyIntercept.create_producer">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-pty-intercept.c"
           line="81">This creates a new producer to the PTY consumer @consumer_fd.

This uses grantpt(), unlockpt(), and ptsname() to open a new
PTY producer.</doc>
      <source-position filename="src/libide/io/ide-pty-intercept.h" line="88"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-pty-intercept.c"
             line="91">a FD for the producer PTY that should be closed with close().
  Upon error, %IDE_PTY_FD_INVALID (-1) is returned.</doc>
        <type name="PtyFd" c:type="IdePtyFd"/>
      </return-value>
      <parameters>
        <parameter name="consumer_fd" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-pty-intercept.c"
               line="83">a pty</doc>
          <type name="PtyFd" c:type="IdePtyFd"/>
        </parameter>
        <parameter name="blocking" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-pty-intercept.c"
               line="84">use %FALSE to set O_NONBLOCK</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="pty_new_sync" c:identifier="ide_pty_new_sync" throws="1">
      <doc xml:space="preserve"
           filename="src/libide/foundry/ide-pty.c"
           line="29">Creates a new #VtePty suitable for Builder to be able to pass the
PTY across PTY namespaces on Linux.

Use this instead of vte_pty_new_sync() or similar.</doc>
      <source-position filename="src/libide/foundry/ide-pty.h" line="34"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/foundry/ide-pty.c"
             line="38">a #VtePty if successful, otherwise %NULL
  and @error is set.</doc>
        <type name="Vte.Pty" c:type="VtePty*"/>
      </return-value>
    </function>
    <function name="runtime_error_quark"
              c:identifier="ide_runtime_error_quark"
              moved-to="RuntimeError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="search_path_append" c:identifier="ide_search_path_append">
      <source-position filename="src/libide/threading/ide-search-path.h"
                       line="31"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="append" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_path_prepend"
              c:identifier="ide_search_path_prepend">
      <source-position filename="src/libide/threading/ide-search-path.h"
                       line="28"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="char*"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="prepend" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="search_reducer_init"
              c:identifier="ide_search_reducer_init"
              moved-to="SearchReducer.init">
      <doc xml:space="preserve"
           filename="src/libide/search/ide-search-reducer.c"
           line="39">Initializes a new #IdeSearchReducer to be used to reduce the number of
search results that are created. This is generally just used to help
keep search performance good.</doc>
      <source-position filename="src/libide/search/ide-search-reducer.h"
                       line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="reducer"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-reducer.c"
               line="41">The reducer to initialize</doc>
          <type name="SearchReducer" c:type="IdeSearchReducer*"/>
        </parameter>
        <parameter name="max_results" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/search/ide-search-reducer.c"
               line="42">max result size for the reuslts</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="set_application_id" c:identifier="ide_set_application_id">
      <doc xml:space="preserve"
           filename="src/libide/core/ide-global.c"
           line="97">Sets the application id that will be used.

This must be set at application startup before any GApplication
has connected to the D-Bus.

The default is "org.gnome.Builder".</doc>
      <source-position filename="src/libide/core/ide-global.h" line="54"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="app_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/core/ide-global.c"
               line="99">the application id</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shell_supports_dash_c"
              c:identifier="ide_shell_supports_dash_c">
      <source-position filename="src/libide/io/ide-shell.h" line="28"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="shell" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shell_supports_dash_login"
              c:identifier="ide_shell_supports_dash_login">
      <doc xml:space="preserve"
           filename="src/libide/io/ide-shell.c"
           line="52">Checks if the shell is known to support login semantics. Originally,
this meant `--login`, but now is meant to mean `-l` as more shells
support `-l` than `--login` (notably dash).</doc>
      <source-position filename="src/libide/io/ide-shell.h" line="30"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/io/ide-shell.c"
             line="60">%TRUE if @shell likely supports `-l`.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="shell" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/io/ide-shell.c"
               line="54">the name of the shell, such as `sh` or `/bin/sh`</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="shortcut_info_foreach"
              c:identifier="ide_shortcut_info_foreach"
              moved-to="ShortcutInfo.foreach">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-shortcut-window.c"
           line="561">Calls @func for every shortcut info. Accelerators come from
@shortcuts by matching action and target.</doc>
      <source-position filename="src/libide/gui/ide-shortcut-info.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="shortcuts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-shortcut-window.c"
               line="563">a #GListModel of #GtkShortcut</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-shortcut-window.c"
               line="564">a callback for each shortcut info</doc>
          <type name="ShortcutInfoFunc" c:type="IdeShortcutInfoFunc"/>
        </parameter>
        <parameter name="func_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-shortcut-window.c"
               line="565">closure data for @func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="show_tweaks" c:identifier="ide_show_tweaks">
      <source-position filename="src/libide/gui/ide-application-tweaks.h"
                       line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
        <parameter name="page" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="source_style_scheme_apply_style"
              c:identifier="ide_source_style_scheme_apply_style">
      <source-position filename="src/libide/code/ide-source-style-scheme.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="style_scheme" transfer-ownership="none">
          <type name="GtkSource.StyleScheme" c:type="GtkSourceStyleScheme*"/>
        </parameter>
        <parameter name="style" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="tag" transfer-ownership="none">
          <type name="Gtk.TextTag" c:type="GtkTextTag*"/>
        </parameter>
      </parameters>
    </function>
    <function name="source_style_scheme_get_variant"
              c:identifier="ide_source_style_scheme_get_variant">
      <doc xml:space="preserve"
           filename="src/libide/sourceview/ide-source-style-scheme.c"
           line="112">Gets an alternate for a style scheme if one exists. Otherwise
@scheme is returned.</doc>
      <source-position filename="src/libide/sourceview/ide-source-style-scheme.h"
                       line="36"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/sourceview/ide-source-style-scheme.c"
             line="120">a #GtkSourceStyleScheme</doc>
        <type name="GtkSource.StyleScheme" c:type="GtkSourceStyleScheme*"/>
      </return-value>
      <parameters>
        <parameter name="scheme" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/sourceview/ide-source-style-scheme.c"
               line="114">a #GtkSourceStyleScheme</doc>
          <type name="GtkSource.StyleScheme" c:type="GtkSourceStyleScheme*"/>
        </parameter>
        <parameter name="variant" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/sourceview/ide-source-style-scheme.c"
               line="115">the alternative variant</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="source_style_scheme_is_dark"
              c:identifier="ide_source_style_scheme_is_dark">
      <source-position filename="src/libide/sourceview/ide-source-style-scheme.h"
                       line="34"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="scheme" transfer-ownership="none">
          <type name="GtkSource.StyleScheme" c:type="GtkSourceStyleScheme*"/>
        </parameter>
      </parameters>
    </function>
    <function name="sourceview_get_resource"
              c:identifier="ide_sourceview_get_resource">
      <source-position filename="src/libide/sourceview/ide-sourceview-resources.h"
                       line="6"/>
      <return-value transfer-ownership="full">
        <type name="Gio.Resource" c:type="GResource*"/>
      </return-value>
    </function>
    <function name="symbol_kind_get_gicon"
              c:identifier="ide_symbol_kind_get_gicon"
              moved-to="SymbolKind.get_gicon">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-symbol.c"
           line="422">Gets a #GIcon to represent the symbol kind.

You may only call this from the main (GTK) thread.</doc>
      <source-position filename="src/libide/code/ide-symbol.h" line="136"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-symbol.c"
             line="430">a #GIcon or %NULL</doc>
        <type name="Gio.Icon" c:type="GIcon*"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-symbol.c"
               line="424">a #IdeSymbolKind</doc>
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </parameter>
      </parameters>
    </function>
    <function name="symbol_kind_get_icon_name"
              c:identifier="ide_symbol_kind_get_icon_name"
              moved-to="SymbolKind.get_icon_name">
      <source-position filename="src/libide/code/ide-symbol.h" line="134"/>
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <type name="SymbolKind" c:type="IdeSymbolKind"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_WORD_end"
              c:identifier="ide_text_iter_backward_WORD_end">
      <source-position filename="src/libide/code/ide-text-iter.h" line="75"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_WORD_start"
              c:identifier="ide_text_iter_backward_WORD_start">
      <source-position filename="src/libide/code/ide-text-iter.h" line="69"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_find_char"
              c:identifier="ide_text_iter_backward_find_char">
      <source-position filename="src/libide/code/ide-text-iter.h" line="44"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="pred"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <type name="TextIterCharPredicate"
                c:type="IdeTextIterCharPredicate"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="limit" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_paragraph_start"
              c:identifier="ide_text_iter_backward_paragraph_start">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-text-iter.c"
           line="128">Searches backwards until we find the beginning of a paragraph.</doc>
      <source-position filename="src/libide/code/ide-text-iter.h" line="61"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-iter.c"
             line="134">%TRUE if we are not at the beginning of the buffer; otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="130">a #GtkTextIter</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_sentence_start"
              c:identifier="ide_text_iter_backward_sentence_start">
      <source-position filename="src/libide/code/ide-text-iter.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_word_end"
              c:identifier="ide_text_iter_backward_word_end">
      <source-position filename="src/libide/code/ide-text-iter.h" line="78"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_backward_word_start"
              c:identifier="ide_text_iter_backward_word_start">
      <source-position filename="src/libide/code/ide-text-iter.h" line="72"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_current_symbol"
              c:identifier="ide_text_iter_current_symbol">
      <source-position filename="src/libide/code/ide-text-iter.h" line="99"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
        <parameter name="out_begin" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_find_chars_backward"
              c:identifier="ide_text_iter_find_chars_backward">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-text-iter.c"
           line="785">Search backward for a @str string, starting at @iter position till @limit if there's one.
In case of succes, @iter is updated to @str start position.

Notice that for @str to be found, @iter need to be at least on the @str last char</doc>
      <source-position filename="src/libide/code/ide-text-iter.h" line="87"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-iter.c"
             line="798">%TRUE if case of succes, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="787">a #GtkTextIter indicating the start position to check for.</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="limit"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="788">a #GtkTextIter indicating the limit of the search.</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="end"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="789">a #GtkTextIter returning the str end iter (if found).</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="790">A C type string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_at_start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="791">%TRUE if the searched @str string should be constrained to start @iter position.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_find_chars_forward"
              c:identifier="ide_text_iter_find_chars_forward">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-text-iter.c"
           line="856">Search forward for a @str string, starting at @iter position till @limit if there's one.
In case of succes, @iter is updated to the found @str start position,
otherwise, its position is undefined.</doc>
      <source-position filename="src/libide/code/ide-text-iter.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-iter.c"
             line="868">%TRUE if case of succes, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="858">a #GtkTextIter indicating the start position to check for.</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="limit"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="859">a #GtkTextIter indicating the limit of the search.</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="end"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none"
                   nullable="1">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="860">a #GtkTextIter returning the str end iter (if found).</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="861">A C type string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_at_start" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="862">%TRUE if the searched @str string should be constrained to start @iter position.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_WORD_end"
              c:identifier="ide_text_iter_forward_WORD_end">
      <source-position filename="src/libide/code/ide-text-iter.h" line="58"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_WORD_start"
              c:identifier="ide_text_iter_forward_WORD_start">
      <source-position filename="src/libide/code/ide-text-iter.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_find_char"
              c:identifier="ide_text_iter_forward_find_char">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-text-iter.c"
           line="626">Similar to gtk_text_iter_forward_find_char but
lets us acces to the iter in the predicate.</doc>
      <source-position filename="src/libide/code/ide-text-iter.h" line="39"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-iter.c"
             line="633">%TRUE if found</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="pred"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="628">a callback to locate the char.</doc>
          <type name="TextIterCharPredicate"
                c:type="IdeTextIterCharPredicate"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="limit" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="const GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_paragraph_end"
              c:identifier="ide_text_iter_forward_paragraph_end">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-text-iter.c"
           line="155">Searches forward until the end of a paragraph has been hit.</doc>
      <source-position filename="src/libide/code/ide-text-iter.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-iter.c"
             line="161">%TRUE if we are not at the end of the buffer; otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="157">a #GtkTextIter</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_sentence_end"
              c:identifier="ide_text_iter_forward_sentence_end">
      <source-position filename="src/libide/code/ide-text-iter.h" line="67"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_word_end"
              c:identifier="ide_text_iter_forward_word_end">
      <source-position filename="src/libide/code/ide-text-iter.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_forward_word_start"
              c:identifier="ide_text_iter_forward_word_start">
      <source-position filename="src/libide/code/ide-text-iter.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="newline_stop" transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_iter_in_string"
              c:identifier="ide_text_iter_in_string">
      <doc xml:space="preserve"
           filename="src/libide/code/ide-text-iter.c"
           line="688">Check if @iter position in the buffer is part of @str.</doc>
      <source-position filename="src/libide/code/ide-text-iter.h" line="81"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/code/ide-text-iter.c"
             line="698">%TRUE if case of succes, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="iter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="690">a #GtkTextIter indicating the position to check for.</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="691">A C type string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="str_start"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="692">a #GtkTextIter returning the str start iter (if found).</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="str_end"
                   direction="out"
                   caller-allocates="1"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="693">a #GtkTextIter returning the str end iter (if found).</doc>
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="include_str_bounds" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/code/ide-text-iter.c"
               line="694">%TRUE if we take into account the str limits as possible @iter positions.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_util_delete_line"
              c:identifier="ide_text_util_delete_line">
      <source-position filename="src/libide/sourceview/ide-text-util.h"
                       line="34"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="text_view" transfer-ownership="none">
          <type name="Gtk.TextView" c:type="GtkTextView*"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <type name="gint" c:type="int"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_util_int_to_string"
              c:identifier="ide_text_util_int_to_string">
      <source-position filename="src/libide/sourceview/ide-text-util.h"
                       line="40"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="outstr" transfer-ownership="none">
          <type name="utf8" c:type="const char**"/>
        </parameter>
      </parameters>
    </function>
    <function name="text_util_remove_common_prefix"
              c:identifier="ide_text_util_remove_common_prefix">
      <source-position filename="src/libide/sourceview/ide-text-util.h"
                       line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="begin" transfer-ownership="none">
          <type name="Gtk.TextIter" c:type="GtkTextIter*"/>
        </parameter>
        <parameter name="prefix" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
      </parameters>
    </function>
    <function name="thread_pool_push"
              c:identifier="ide_thread_pool_push"
              moved-to="ThreadPool.push">
      <doc xml:space="preserve"
           filename="src/libide/threading/ide-thread-pool.c"
           line="123">Runs the callback on the thread pool thread.</doc>
      <source-position filename="src/libide/threading/ide-thread-pool.h"
                       line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="125">the threadpool kind to use.</doc>
          <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="126">A function to call in the worker thread.</doc>
          <type name="ThreadFunc" c:type="IdeThreadFunc"/>
        </parameter>
        <parameter name="func_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="127">user data for @func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="thread_pool_push_task"
              c:identifier="ide_thread_pool_push_task"
              moved-to="ThreadPool.push_task">
      <doc xml:space="preserve"
           filename="src/libide/threading/ide-thread-pool.c"
           line="78">This pushes a task to be executed on a worker thread based on the task kind as denoted by
@kind. Some tasks will be placed on special work queues or throttled based on priority.</doc>
      <source-position filename="src/libide/threading/ide-thread-pool.h"
                       line="61"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="80">The task kind.</doc>
          <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
        </parameter>
        <parameter name="task" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="81">a #GTask to execute.</doc>
          <type name="Gio.Task" c:type="GTask*"/>
        </parameter>
        <parameter name="func" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="82">The thread worker to execute for @task.</doc>
          <type name="Gio.TaskThreadFunc" c:type="GTaskThreadFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="thread_pool_push_with_priority"
              c:identifier="ide_thread_pool_push_with_priority"
              moved-to="ThreadPool.push_with_priority">
      <doc xml:space="preserve"
           filename="src/libide/threading/ide-thread-pool.c"
           line="139">Runs the callback on the thread pool thread.</doc>
      <source-position filename="src/libide/threading/ide-thread-pool.h"
                       line="56"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="141">the threadpool kind to use.</doc>
          <type name="ThreadPoolKind" c:type="IdeThreadPoolKind"/>
        </parameter>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="142">the priority for func</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="143">A function to call in the worker thread.</doc>
          <type name="ThreadFunc" c:type="IdeThreadFunc"/>
        </parameter>
        <parameter name="func_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/libide/threading/ide-thread-pool.c"
               line="144">user data for @func.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="tweaks_addin_bind_callback"
                    c:identifier="ide_tweaks_addin_bind_callback"
                    introspectable="0">
      <source-position filename="src/libide/tweaks/ide-tweaks-addin.h"
                       line="33"/>
      <parameters>
        <parameter name="instance">
        </parameter>
        <parameter name="callback">
        </parameter>
      </parameters>
    </function-macro>
    <function name="vcs_cloner_clone_simple"
              c:identifier="ide_vcs_cloner_clone_simple"
              moved-to="VcsCloner.clone_simple"
              throws="1">
      <source-position filename="src/libide/vcs/ide-vcs-cloner.h" line="103"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
        <parameter name="module_name" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="url" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="branch" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="destination" transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="notif" transfer-ownership="none">
          <type name="Notification" c:type="IdeNotification*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vcs_from_context"
              c:identifier="ide_vcs_from_context"
              moved-to="Vcs.from_context">
      <doc xml:space="preserve"
           filename="src/libide/vcs/ide-vcs.c"
           line="481">Gets the #IdeVcs for the context.</doc>
      <source-position filename="src/libide/vcs/ide-vcs.h" line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="487">an #IdeVcs</doc>
        <type name="Vcs" c:type="IdeVcs*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="483">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vcs_ref_from_context"
              c:identifier="ide_vcs_ref_from_context"
              moved-to="Vcs.ref_from_context">
      <doc xml:space="preserve"
           filename="src/libide/vcs/ide-vcs.c"
           line="504">A thread-safe version of ide_vcs_from_context().</doc>
      <source-position filename="src/libide/vcs/ide-vcs.h" line="97"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/libide/vcs/ide-vcs.c"
             line="510">an #IdeVcs</doc>
        <type name="Vcs" c:type="IdeVcs*"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/vcs/ide-vcs.c"
               line="506">an #IdeContext</doc>
          <type name="Context" c:type="IdeContext*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vcs_uri_is_valid"
              c:identifier="ide_vcs_uri_is_valid"
              moved-to="VcsUri.is_valid">
      <source-position filename="src/libide/vcs/ide-vcs-uri.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uri_string" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="vte_pty_create_producer"
              c:identifier="ide_vte_pty_create_producer">
      <source-position filename="src/libide/terminal/ide-terminal-util.h"
                       line="33"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="int"/>
      </return-value>
      <parameters>
        <parameter name="pty" transfer-ownership="none">
          <type name="Vte.Pty" c:type="VtePty*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_get_context" c:identifier="ide_widget_get_context">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-gui-global.c"
           line="149">Gets the context for the widget.</doc>
      <source-position filename="src/libide/gui/ide-gui-global.h" line="56"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-gui-global.c"
             line="155">an #IdeContext, or %NULL</doc>
        <type name="Context" c:type="IdeContext*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-gui-global.c"
               line="151">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_get_workbench"
              c:identifier="ide_widget_get_workbench">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-gui-global.c"
           line="201">Gets the #IdeWorkbench that contains @widget.</doc>
      <source-position filename="src/libide/gui/ide-gui-global.h" line="58"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-gui-global.c"
             line="207">an #IdeWorkbench or %NULL</doc>
        <type name="Workbench" c:type="IdeWorkbench*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-gui-global.c"
               line="203">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_get_workspace"
              c:identifier="ide_widget_get_workspace">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-gui-global.c"
           line="239">Gets the #IdeWorkspace containing @widget.</doc>
      <source-position filename="src/libide/gui/ide-gui-global.h" line="60"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="src/libide/gui/ide-gui-global.c"
             line="245">an #IdeWorkspace or %NULL</doc>
        <type name="Workspace" c:type="IdeWorkspace*"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-gui-global.c"
               line="241">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <function name="widget_set_context_handler"
              c:identifier="ide_widget_set_context_handler">
      <doc xml:space="preserve"
           filename="src/libide/gui/ide-gui-global.c"
           line="112">Calls @handler when the #IdeContext has been set for @widget.</doc>
      <source-position filename="src/libide/gui/ide-gui-global.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-gui-global.c"
               line="114">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="gpointer"/>
        </parameter>
        <parameter name="handler" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="src/libide/gui/ide-gui-global.c"
               line="115">A callback to handle the context</doc>
          <type name="WidgetContextHandler" c:type="IdeWidgetContextHandler"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="widget_warning"
                    c:identifier="ide_widget_warning"
                    introspectable="0">
      <source-position filename="src/libide/gui/ide-gui-global.h" line="36"/>
      <parameters>
        <parameter name="instance">
        </parameter>
        <parameter name="format">
        </parameter>
        <parameter name="...">
        </parameter>
      </parameters>
    </function-macro>
  </namespace>
</repository>
