<?xml version="1.0"?>
<!-- GCalc-1.gir generated by valac 0.46.1.123-b540e, do not modify. -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="Gee" version="0.8"/>
<include name="Gio" version="2.0"/>
<include name="GObject" version="2.0"/>
<package name="gcalc-1"/>
<c:include name="gcalc/gcalc.h"/>
<namespace name="GCalc" version="1" c:prefix="GCalc">
	<enumeration name="AssigError" c:type="GCalcAssigError" glib:error-domain="gcalc-assig-error-quark">
		<member name="invalid_structure_error" c:identifier="GCALC_ASSIG_ERROR_INVALID_STRUCTURE_ERROR" value="0"/>
	</enumeration>
	<enumeration name="FunctionError" c:type="GCalcFunctionError" glib:error-domain="gcalc-function-error-quark">
		<member name="invalid_parameters_error" c:identifier="GCALC_FUNCTION_ERROR_INVALID_PARAMETERS_ERROR" value="0"/>
		<member name="invocation_error" c:identifier="GCALC_FUNCTION_ERROR_INVOCATION_ERROR" value="1"/>
	</enumeration>
	<enumeration name="ParserError" c:type="GCalcParserError" glib:error-domain="gcalc-parser-error-quark">
		<member name="invalid_token_error" c:identifier="GCALC_PARSER_ERROR_INVALID_TOKEN_ERROR" value="0"/>
		<member name="invalid_expression_error" c:identifier="GCALC_PARSER_ERROR_INVALID_EXPRESSION_ERROR" value="1"/>
	</enumeration>
	<enumeration name="GroupError" c:type="GCalcGroupError" glib:error-domain="gcalc-group-error-quark">
		<member name="invalid_polynomial" c:identifier="GCALC_GROUP_ERROR_INVALID_POLYNOMIAL" value="0"/>
		<member name="invalid_internal_term" c:identifier="GCALC_GROUP_ERROR_INVALID_INTERNAL_TERM" value="1"/>
	</enumeration>
	<enumeration name="SolverError" c:type="GCalcSolverError" glib:error-domain="gcalc-solver-error-quark">
		<member name="expression_error" c:identifier="GCALC_SOLVER_ERROR_EXPRESSION_ERROR" value="0"/>
	</enumeration>
	<enumeration name="TermError" c:type="GCalcTermError" glib:error-domain="gcalc-term-error-quark">
		<member name="invalid_operator" c:identifier="GCALC_TERM_ERROR_INVALID_OPERATOR" value="0"/>
		<member name="evaluation_fail" c:identifier="GCALC_TERM_ERROR_EVALUATION_FAIL" value="1"/>
	</enumeration>
	<enumeration name="VariableError" c:type="GCalcVariableError" glib:error-domain="gcalc-variable-error-quark">
		<member name="invalid_parent" c:identifier="GCALC_VARIABLE_ERROR_INVALID_PARENT" value="0"/>
		<member name="invalid_expression_definition" c:identifier="GCALC_VARIABLE_ERROR_INVALID_EXPRESSION_DEFINITION" value="1"/>
		<member name="evaluation_fail" c:identifier="GCALC_VARIABLE_ERROR_EVALUATION_FAIL" value="2"/>
	</enumeration>
	<class name="ExpressionContainer" c:type="GCalcExpressionContainer" glib:type-name="GCalcExpressionContainer" glib:get-type="gcalc_expression_container_get_type" glib:type-struct="ExpressionContainerClass" parent="Gee.ArrayList">
		<implements name="Gio.ListModel"/>
		<field name="parent_instance">
			<type name="Gee.ArrayList" c:type="GeeArrayList"/>
		</field>
		<field name="priv">
			<type name="ExpressionContainerPrivate" c:type="GCalcExpressionContainerPrivate*"/>
		</field>
		<method name="add" c:identifier="gcalc_expression_container_add">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="exp" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove_at" c:identifier="gcalc_expression_container_remove_at">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="index" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="gcalc_expression_container_remove">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="exp" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_object" c:identifier="gcalc_expression_container_get_object">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GObject.Object" c:type="GObject*"/>
			</return-value>
			<parameters>
				<parameter name="position" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<method name="find" c:identifier="gcalc_expression_container_find">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="exp" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
		<method name="find_named" c:identifier="gcalc_expression_container_find_named">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="gcalc_expression_container_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</constructor>
		<property name="parent" writable="1">
			<type name="GCalc.Expression" c:type="GCalcExpression*"/>
		</property>
		<method name="get_parent" c:identifier="gcalc_expression_container_get_parent">
			<return-value transfer-ownership="none">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<method name="set_parent" c:identifier="gcalc_expression_container_set_parent">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ExpressionContainerClass" c:type="GCalcExpressionContainerClass" glib:is-gtype-struct-for="ExpressionContainer">
		<field name="parent_class">
			<type name="Gee.ArrayListClass" c:type="GeeArrayListClass"/>
		</field>
	</record>
	<record name="ExpressionContainerPrivate" c:type="GCalcExpressionContainerPrivate" disguised="1"/>
	<class name="ExpressionHashMap" c:type="GCalcExpressionHashMap" glib:type-name="GCalcExpressionHashMap" glib:get-type="gcalc_expression_hash_map_get_type" glib:type-struct="ExpressionHashMapClass" parent="Gee.HashMap">
		<field name="parent_instance">
			<type name="Gee.HashMap" c:type="GeeHashMap"/>
		</field>
		<field name="priv">
			<type name="ExpressionHashMapPrivate" c:type="GCalcExpressionHashMapPrivate*"/>
		</field>
		<method name="add" c:identifier="gcalc_expression_hash_map_add">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="exp" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
		<method name="remove" c:identifier="gcalc_expression_hash_map_remove">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="exp" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
		<method name="find_named" c:identifier="gcalc_expression_hash_map_find_named">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="gcalc_expression_hash_map_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.ExpressionHashMap" c:type="GCalcExpressionHashMap*"/>
			</return-value>
		</constructor>
		<property name="parent" writable="1">
			<type name="GCalc.Expression" c:type="GCalcExpression*"/>
		</property>
		<method name="get_parent" c:identifier="gcalc_expression_hash_map_get_parent">
			<return-value transfer-ownership="none">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<method name="set_parent" c:identifier="gcalc_expression_hash_map_set_parent">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ExpressionHashMapClass" c:type="GCalcExpressionHashMapClass" glib:is-gtype-struct-for="ExpressionHashMap">
		<field name="parent_class">
			<type name="Gee.HashMapClass" c:type="GeeHashMapClass"/>
		</field>
	</record>
	<record name="ExpressionHashMapPrivate" c:type="GCalcExpressionHashMapPrivate" disguised="1"/>
	<class name="GFunctionAcos" c:type="GCalcGFunctionAcos" glib:type-name="GCalcGFunctionAcos" glib:get-type="gcalc_gfunction_acos_get_type" glib:type-struct="GFunctionAcosClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionAcosPrivate" c:type="GCalcGFunctionAcosPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_acos_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionAcos" c:type="GCalcGFunctionAcos*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionAcosClass" c:type="GCalcGFunctionAcosClass" glib:is-gtype-struct-for="GFunctionAcos">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionAcosPrivate" c:type="GCalcGFunctionAcosPrivate" disguised="1"/>
	<class name="GFunctionAcosh" c:type="GCalcGFunctionAcosh" glib:type-name="GCalcGFunctionAcosh" glib:get-type="gcalc_gfunction_acosh_get_type" glib:type-struct="GFunctionAcoshClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionAcoshPrivate" c:type="GCalcGFunctionAcoshPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_acosh_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionAcosh" c:type="GCalcGFunctionAcosh*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionAcoshClass" c:type="GCalcGFunctionAcoshClass" glib:is-gtype-struct-for="GFunctionAcosh">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionAcoshPrivate" c:type="GCalcGFunctionAcoshPrivate" disguised="1"/>
	<class name="GFunctionAsin" c:type="GCalcGFunctionAsin" glib:type-name="GCalcGFunctionAsin" glib:get-type="gcalc_gfunction_asin_get_type" glib:type-struct="GFunctionAsinClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionAsinPrivate" c:type="GCalcGFunctionAsinPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_asin_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionAsin" c:type="GCalcGFunctionAsin*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionAsinClass" c:type="GCalcGFunctionAsinClass" glib:is-gtype-struct-for="GFunctionAsin">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionAsinPrivate" c:type="GCalcGFunctionAsinPrivate" disguised="1"/>
	<class name="GFunctionAsinh" c:type="GCalcGFunctionAsinh" glib:type-name="GCalcGFunctionAsinh" glib:get-type="gcalc_gfunction_asinh_get_type" glib:type-struct="GFunctionAsinhClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionAsinhPrivate" c:type="GCalcGFunctionAsinhPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_asinh_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionAsinh" c:type="GCalcGFunctionAsinh*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionAsinhClass" c:type="GCalcGFunctionAsinhClass" glib:is-gtype-struct-for="GFunctionAsinh">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionAsinhPrivate" c:type="GCalcGFunctionAsinhPrivate" disguised="1"/>
	<class name="GFunctionAtan" c:type="GCalcGFunctionAtan" glib:type-name="GCalcGFunctionAtan" glib:get-type="gcalc_gfunction_atan_get_type" glib:type-struct="GFunctionAtanClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionAtanPrivate" c:type="GCalcGFunctionAtanPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_atan_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionAtan" c:type="GCalcGFunctionAtan*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionAtanClass" c:type="GCalcGFunctionAtanClass" glib:is-gtype-struct-for="GFunctionAtan">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionAtanPrivate" c:type="GCalcGFunctionAtanPrivate" disguised="1"/>
	<class name="GFunctionAtanh" c:type="GCalcGFunctionAtanh" glib:type-name="GCalcGFunctionAtanh" glib:get-type="gcalc_gfunction_atanh_get_type" glib:type-struct="GFunctionAtanhClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionAtanhPrivate" c:type="GCalcGFunctionAtanhPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_atanh_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionAtanh" c:type="GCalcGFunctionAtanh*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionAtanhClass" c:type="GCalcGFunctionAtanhClass" glib:is-gtype-struct-for="GFunctionAtanh">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionAtanhPrivate" c:type="GCalcGFunctionAtanhPrivate" disguised="1"/>
	<class name="GFunctionCos" c:type="GCalcGFunctionCos" glib:type-name="GCalcGFunctionCos" glib:get-type="gcalc_gfunction_cos_get_type" glib:type-struct="GFunctionCosClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionCosPrivate" c:type="GCalcGFunctionCosPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_cos_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionCos" c:type="GCalcGFunctionCos*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionCosClass" c:type="GCalcGFunctionCosClass" glib:is-gtype-struct-for="GFunctionCos">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionCosPrivate" c:type="GCalcGFunctionCosPrivate" disguised="1"/>
	<class name="GFunctionCosh" c:type="GCalcGFunctionCosh" glib:type-name="GCalcGFunctionCosh" glib:get-type="gcalc_gfunction_cosh_get_type" glib:type-struct="GFunctionCoshClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionCoshPrivate" c:type="GCalcGFunctionCoshPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_cosh_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionCosh" c:type="GCalcGFunctionCosh*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionCoshClass" c:type="GCalcGFunctionCoshClass" glib:is-gtype-struct-for="GFunctionCosh">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionCoshPrivate" c:type="GCalcGFunctionCoshPrivate" disguised="1"/>
	<class name="GFunctionExp" c:type="GCalcGFunctionExp" glib:type-name="GCalcGFunctionExp" glib:get-type="gcalc_gfunction_exp_get_type" glib:type-struct="GFunctionExpClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionExpPrivate" c:type="GCalcGFunctionExpPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_exp_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionExp" c:type="GCalcGFunctionExp*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionExpClass" c:type="GCalcGFunctionExpClass" glib:is-gtype-struct-for="GFunctionExp">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionExpPrivate" c:type="GCalcGFunctionExpPrivate" disguised="1"/>
	<class name="GFunctionLog" c:type="GCalcGFunctionLog" glib:type-name="GCalcGFunctionLog" glib:get-type="gcalc_gfunction_log_get_type" glib:type-struct="GFunctionLogClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionLogPrivate" c:type="GCalcGFunctionLogPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_log_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionLog" c:type="GCalcGFunctionLog*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionLogClass" c:type="GCalcGFunctionLogClass" glib:is-gtype-struct-for="GFunctionLog">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionLogPrivate" c:type="GCalcGFunctionLogPrivate" disguised="1"/>
	<class name="GFunctionSin" c:type="GCalcGFunctionSin" glib:type-name="GCalcGFunctionSin" glib:get-type="gcalc_gfunction_sin_get_type" glib:type-struct="GFunctionSinClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionSinPrivate" c:type="GCalcGFunctionSinPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_sin_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionSin" c:type="GCalcGFunctionSin*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionSinClass" c:type="GCalcGFunctionSinClass" glib:is-gtype-struct-for="GFunctionSin">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionSinPrivate" c:type="GCalcGFunctionSinPrivate" disguised="1"/>
	<class name="GFunctionSinh" c:type="GCalcGFunctionSinh" glib:type-name="GCalcGFunctionSinh" glib:get-type="gcalc_gfunction_sinh_get_type" glib:type-struct="GFunctionSinhClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionSinhPrivate" c:type="GCalcGFunctionSinhPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_sinh_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionSinh" c:type="GCalcGFunctionSinh*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionSinhClass" c:type="GCalcGFunctionSinhClass" glib:is-gtype-struct-for="GFunctionSinh">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionSinhPrivate" c:type="GCalcGFunctionSinhPrivate" disguised="1"/>
	<class name="GFunctionSqrt" c:type="GCalcGFunctionSqrt" glib:type-name="GCalcGFunctionSqrt" glib:get-type="gcalc_gfunction_sqrt_get_type" glib:type-struct="GFunctionSqrtClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionSqrtPrivate" c:type="GCalcGFunctionSqrtPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_sqrt_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionSqrt" c:type="GCalcGFunctionSqrt*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionSqrtClass" c:type="GCalcGFunctionSqrtClass" glib:is-gtype-struct-for="GFunctionSqrt">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionSqrtPrivate" c:type="GCalcGFunctionSqrtPrivate" disguised="1"/>
	<class name="GFunctionTan" c:type="GCalcGFunctionTan" glib:type-name="GCalcGFunctionTan" glib:get-type="gcalc_gfunction_tan_get_type" glib:type-struct="GFunctionTanClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionTanPrivate" c:type="GCalcGFunctionTanPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_tan_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionTan" c:type="GCalcGFunctionTan*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionTanClass" c:type="GCalcGFunctionTanClass" glib:is-gtype-struct-for="GFunctionTan">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionTanPrivate" c:type="GCalcGFunctionTanPrivate" disguised="1"/>
	<class name="GFunctionTanh" c:type="GCalcGFunctionTanh" glib:type-name="GCalcGFunctionTanh" glib:get-type="gcalc_gfunction_tanh_get_type" glib:type-struct="GFunctionTanhClass" parent="GCalc.GFunction">
		<field name="parent_instance">
			<type name="GCalc.GFunction" c:type="GCalcGFunction"/>
		</field>
		<field name="priv">
			<type name="GFunctionTanhPrivate" c:type="GCalcGFunctionTanhPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gfunction_tanh_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunctionTanh" c:type="GCalcGFunctionTanh*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionTanhClass" c:type="GCalcGFunctionTanhClass" glib:is-gtype-struct-for="GFunctionTanh">
		<field name="parent_class">
			<type name="GCalc.GFunctionClass" c:type="GCalcGFunctionClass"/>
		</field>
	</record>
	<record name="GFunctionTanhPrivate" c:type="GCalcGFunctionTanhPrivate" disguised="1"/>
	<class name="GExpression" c:type="GCalcGExpression" glib:type-name="GCalcGExpression" glib:get-type="gcalc_gexpression_get_type" glib:type-struct="GExpressionClass" parent="GObject.Object">
		<implements name="GCalc.Expression"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="GExpressionPrivate" c:type="GCalcGExpressionPrivate*"/>
		</field>
		<method name="to_string" c:identifier="gcalc_gexpression_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</virtual-method>
		<method name="solve" c:identifier="gcalc_gexpression_solve">
			<return-value transfer-ownership="full">
				<type name="GCalc.Result" c:type="GCalcResult*"/>
			</return-value>
		</method>
		<virtual-method name="solve" invoker="solve">
			<return-value transfer-ownership="full">
				<type name="GCalc.Result" c:type="GCalcResult*"/>
			</return-value>
		</virtual-method>
		<constructor name="new" c:identifier="gcalc_gexpression_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GExpression" c:type="GCalcGExpression*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GExpressionClass" c:type="GCalcGExpressionClass" glib:is-gtype-struct-for="GExpression">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.GExpression" c:type="GCalcGExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="solve">
			<callback name="solve" c:type="solve">
				<return-value transfer-ownership="full">
					<type name="GCalc.Result" c:type="GCalcResult*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.GExpression" c:type="GCalcGExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="GExpressionPrivate" c:type="GCalcGExpressionPrivate" disguised="1"/>
	<class name="GErrorExpression" c:type="GCalcGErrorExpression" glib:type-name="GCalcGErrorExpression" glib:get-type="gcalc_gerror_expression_get_type" glib:type-struct="GErrorExpressionClass" parent="GCalc.GExpression">
		<implements name="GCalc.ErrorExpression"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GErrorExpressionPrivate" c:type="GCalcGErrorExpressionPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gerror_expression_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GErrorExpression" c:type="GCalcGErrorExpression*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GErrorExpressionClass" c:type="GCalcGErrorExpressionClass" glib:is-gtype-struct-for="GErrorExpression">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GErrorExpressionPrivate" c:type="GCalcGErrorExpressionPrivate" disguised="1"/>
	<class name="GAssign" c:type="GCalcGAssign" glib:type-name="GCalcGAssign" glib:get-type="gcalc_gassign_get_type" glib:type-struct="GAssignClass" parent="GCalc.GExpression">
		<implements name="GCalc.Operator"/>
		<implements name="GCalc.BinaryOperator"/>
		<implements name="GCalc.Assign"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GAssignPrivate" c:type="GCalcGAssignPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gassign_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GAssign" c:type="GCalcGAssign*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GAssignClass" c:type="GCalcGAssignClass" glib:is-gtype-struct-for="GAssign">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GAssignPrivate" c:type="GCalcGAssignPrivate" disguised="1"/>
	<class name="GConstant" c:type="GCalcGConstant" glib:type-name="GCalcGConstant" glib:get-type="gcalc_gconstant_get_type" glib:type-struct="GConstantClass" parent="GCalc.GExpression">
		<implements name="GCalc.Constant"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GConstantPrivate" c:type="GCalcGConstantPrivate*"/>
		</field>
		<constructor name="integer" c:identifier="gcalc_gconstant_new_integer">
			<return-value transfer-ownership="full">
				<type name="GCalc.GConstant" c:type="GCalcGConstant*"/>
			</return-value>
			<parameters>
				<parameter name="val" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="unsigned_integer" c:identifier="gcalc_gconstant_new_unsigned_integer">
			<return-value transfer-ownership="full">
				<type name="GCalc.GConstant" c:type="GCalcGConstant*"/>
			</return-value>
			<parameters>
				<parameter name="val" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="double" c:identifier="gcalc_gconstant_new_double">
			<return-value transfer-ownership="full">
				<type name="GCalc.GConstant" c:type="GCalcGConstant*"/>
			</return-value>
			<parameters>
				<parameter name="val" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="complex" c:identifier="gcalc_gconstant_new_complex">
			<return-value transfer-ownership="full">
				<type name="GCalc.GConstant" c:type="GCalcGConstant*"/>
			</return-value>
			<parameters>
				<parameter name="real" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
				<parameter name="imag" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="subtract" c:identifier="gcalc_gconstant_subtract">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</method>
		<constructor name="new" c:identifier="gcalc_gconstant_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GConstant" c:type="GCalcGConstant*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GConstantClass" c:type="GCalcGConstantClass" glib:is-gtype-struct-for="GConstant">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GConstantPrivate" c:type="GCalcGConstantPrivate" disguised="1"/>
	<class name="GDivision" c:type="GCalcGDivision" glib:type-name="GCalcGDivision" glib:get-type="gcalc_gdivision_get_type" glib:type-struct="GDivisionClass" parent="GCalc.GExpression">
		<implements name="GCalc.Operator"/>
		<implements name="GCalc.BinaryOperator"/>
		<implements name="GCalc.Division"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GDivisionPrivate" c:type="GCalcGDivisionPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gdivision_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GDivision" c:type="GCalcGDivision*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GDivisionClass" c:type="GCalcGDivisionClass" glib:is-gtype-struct-for="GDivision">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GDivisionPrivate" c:type="GCalcGDivisionPrivate" disguised="1"/>
	<class name="GErrorResult" c:type="GCalcGErrorResult" glib:type-name="GCalcGErrorResult" glib:get-type="gcalc_gerror_result_get_type" glib:type-struct="GErrorResultClass" parent="GObject.Object">
		<implements name="GCalc.Result"/>
		<implements name="GCalc.ErrorResult"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="GErrorResultPrivate" c:type="GCalcGErrorResultPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gerror_result_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GErrorResult" c:type="GCalcGErrorResult*"/>
			</return-value>
			<parameters>
				<parameter name="msg" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="GErrorResultClass" c:type="GCalcGErrorResultClass" glib:is-gtype-struct-for="GErrorResult">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="GErrorResultPrivate" c:type="GCalcGErrorResultPrivate" disguised="1"/>
	<class name="GFunction" c:type="GCalcGFunction" glib:type-name="GCalcGFunction" glib:get-type="gcalc_gfunction_get_type" glib:type-struct="GFunctionClass" parent="GCalc.GExpression">
		<implements name="GCalc.Function"/>
		<implements name="GCalc.Hashable"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GFunctionPrivate" c:type="GCalcGFunctionPrivate*"/>
		</field>
		<constructor name="with_name" c:identifier="gcalc_gfunction_new_with_name">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunction" c:type="GCalcGFunction*"/>
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="nparams" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="evaluate" c:identifier="gcalc_gfunction_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="evaluate" invoker="evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
		<constructor name="new" c:identifier="gcalc_gfunction_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GFunction" c:type="GCalcGFunction*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GFunctionClass" c:type="GCalcGFunctionClass" glib:is-gtype-struct-for="GFunction">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
		<field name="evaluate">
			<callback name="evaluate" c:type="evaluate" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.GFunction" c:type="GCalcGFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="GFunctionPrivate" c:type="GCalcGFunctionPrivate" disguised="1"/>
	<class name="GMathEquation" c:type="GCalcGMathEquation" glib:type-name="GCalcGMathEquation" glib:get-type="gcalc_gmath_equation_get_type" glib:type-struct="GMathEquationClass" parent="GCalc.GExpression">
		<implements name="GCalc.MathEquation"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GMathEquationPrivate" c:type="GCalcGMathEquationPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gmath_equation_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GMathEquation" c:type="GCalcGMathEquation*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GMathEquationClass" c:type="GCalcGMathEquationClass" glib:is-gtype-struct-for="GMathEquation">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GMathEquationPrivate" c:type="GCalcGMathEquationPrivate" disguised="1"/>
	<class name="GMathEquationManager" c:type="GCalcGMathEquationManager" glib:type-name="GCalcGMathEquationManager" glib:get-type="gcalc_gmath_equation_manager_get_type" glib:type-struct="GMathEquationManagerClass" parent="GObject.Object">
		<implements name="GCalc.MathEquationManager"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="GMathEquationManagerPrivate" c:type="GCalcGMathEquationManagerPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gmath_equation_manager_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GMathEquationManager" c:type="GCalcGMathEquationManager*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GMathEquationManagerClass" c:type="GCalcGMathEquationManagerClass" glib:is-gtype-struct-for="GMathEquationManager">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="GMathEquationManagerPrivate" c:type="GCalcGMathEquationManagerPrivate" disguised="1"/>
	<class name="GMinus" c:type="GCalcGMinus" glib:type-name="GCalcGMinus" glib:get-type="gcalc_gminus_get_type" glib:type-struct="GMinusClass" parent="GCalc.GExpression">
		<implements name="GCalc.Operator"/>
		<implements name="GCalc.BinaryOperator"/>
		<implements name="GCalc.Minus"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GMinusPrivate" c:type="GCalcGMinusPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gminus_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GMinus" c:type="GCalcGMinus*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GMinusClass" c:type="GCalcGMinusClass" glib:is-gtype-struct-for="GMinus">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GMinusPrivate" c:type="GCalcGMinusPrivate" disguised="1"/>
	<class name="GMultiply" c:type="GCalcGMultiply" glib:type-name="GCalcGMultiply" glib:get-type="gcalc_gmultiply_get_type" glib:type-struct="GMultiplyClass" parent="GCalc.GExpression">
		<implements name="GCalc.Operator"/>
		<implements name="GCalc.BinaryOperator"/>
		<implements name="GCalc.Multiply"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GMultiplyPrivate" c:type="GCalcGMultiplyPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gmultiply_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GMultiply" c:type="GCalcGMultiply*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GMultiplyClass" c:type="GCalcGMultiplyClass" glib:is-gtype-struct-for="GMultiply">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GMultiplyPrivate" c:type="GCalcGMultiplyPrivate" disguised="1"/>
	<class name="GParser" c:type="GCalcGParser" glib:type-name="GCalcGParser" glib:get-type="gcalc_gparser_get_type" glib:type-struct="GParserClass" parent="GObject.Object">
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="GParserPrivate" c:type="GCalcGParserPrivate*"/>
		</field>
		<method name="parse" c:identifier="gcalc_gparser_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="eqman" transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</parameter>
			</parameters>
		</method>
		<method name="read_token" c:identifier="gcalc_gparser_read_token">
			<return-value transfer-ownership="full">
				<type name="GCalc.GParserTokenType" c:type="GCalcGParserTokenType"/>
			</return-value>
		</method>
		<method name="token_to_string" c:identifier="gcalc_gparser_token_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</method>
		<constructor name="new" c:identifier="gcalc_gparser_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GParser" c:type="GCalcGParser*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GParserClass" c:type="GCalcGParserClass" glib:is-gtype-struct-for="GParser">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="GParserPrivate" c:type="GCalcGParserPrivate" disguised="1"/>
	<enumeration name="GParserTokenType" c:type="GCalcGParserTokenType" glib:type-name="GCalcGParserTokenType" glib:get-type="gcalc_gparser_token_type_get_type">
		<member name="none" c:identifier="GCALC_GPARSER_TOKEN_TYPE_NONE" value="0"/>
		<member name="eof" c:identifier="GCALC_GPARSER_TOKEN_TYPE_EOF" value="1"/>
		<member name="identifier" c:identifier="GCALC_GPARSER_TOKEN_TYPE_IDENTIFIER" value="2"/>
		<member name="integer_literal" c:identifier="GCALC_GPARSER_TOKEN_TYPE_INTEGER_LITERAL" value="3"/>
		<member name="real_literal" c:identifier="GCALC_GPARSER_TOKEN_TYPE_REAL_LITERAL" value="4"/>
		<member name="star" c:identifier="GCALC_GPARSER_TOKEN_TYPE_STAR" value="5"/>
		<member name="plus" c:identifier="GCALC_GPARSER_TOKEN_TYPE_PLUS" value="6"/>
		<member name="div" c:identifier="GCALC_GPARSER_TOKEN_TYPE_DIV" value="7"/>
		<member name="minus" c:identifier="GCALC_GPARSER_TOKEN_TYPE_MINUS" value="8"/>
		<member name="assign" c:identifier="GCALC_GPARSER_TOKEN_TYPE_ASSIGN" value="9"/>
		<member name="open_parens" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OPEN_PARENS" value="10"/>
		<member name="close_parens" c:identifier="GCALC_GPARSER_TOKEN_TYPE_CLOSE_PARENS" value="11"/>
		<member name="carret" c:identifier="GCALC_GPARSER_TOKEN_TYPE_CARRET" value="12"/>
		<member name="close_brace" c:identifier="GCALC_GPARSER_TOKEN_TYPE_CLOSE_BRACE" value="13"/>
		<member name="close_bracket" c:identifier="GCALC_GPARSER_TOKEN_TYPE_CLOSE_BRACKET" value="14"/>
		<member name="open_brace" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OPEN_BRACE" value="15"/>
		<member name="open_bracket" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OPEN_BRACKET" value="16"/>
		<member name="string_literal" c:identifier="GCALC_GPARSER_TOKEN_TYPE_STRING_LITERAL" value="17"/>
		<member name="op_and" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_AND" value="18"/>
		<member name="op_coalescing" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_COALESCING" value="19"/>
		<member name="op_dec" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_DEC" value="20"/>
		<member name="op_eq" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_EQ" value="21"/>
		<member name="op_ge" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_GE" value="22"/>
		<member name="op_gt" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_GT" value="23"/>
		<member name="op_inc" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_INC" value="24"/>
		<member name="op_le" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_LE" value="25"/>
		<member name="op_lt" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_LT" value="26"/>
		<member name="op_ne" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_NE" value="27"/>
		<member name="op_neg" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_NEG" value="28"/>
		<member name="op_or" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_OR" value="29"/>
		<member name="op_ptr" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_PTR" value="30"/>
		<member name="op_shift_left" c:identifier="GCALC_GPARSER_TOKEN_TYPE_OP_SHIFT_LEFT" value="31"/>
		<member name="semicolon" c:identifier="GCALC_GPARSER_TOKEN_TYPE_SEMICOLON" value="32"/>
		<member name="tilde" c:identifier="GCALC_GPARSER_TOKEN_TYPE_TILDE" value="33"/>
		<member name="colon" c:identifier="GCALC_GPARSER_TOKEN_TYPE_COLON" value="34"/>
		<member name="comma" c:identifier="GCALC_GPARSER_TOKEN_TYPE_COMMA" value="35"/>
		<member name="double_colon" c:identifier="GCALC_GPARSER_TOKEN_TYPE_DOUBLE_COLON" value="36"/>
		<member name="dot" c:identifier="GCALC_GPARSER_TOKEN_TYPE_DOT" value="37"/>
		<member name="ellipsis" c:identifier="GCALC_GPARSER_TOKEN_TYPE_ELLIPSIS" value="38"/>
		<member name="interr" c:identifier="GCALC_GPARSER_TOKEN_TYPE_INTERR" value="39"/>
		<member name="hash" c:identifier="GCALC_GPARSER_TOKEN_TYPE_HASH" value="40"/>
	</enumeration>
	<class name="GPlus" c:type="GCalcGPlus" glib:type-name="GCalcGPlus" glib:get-type="gcalc_gplus_get_type" glib:type-struct="GPlusClass" parent="GCalc.GExpression">
		<implements name="GCalc.Operator"/>
		<implements name="GCalc.BinaryOperator"/>
		<implements name="GCalc.Plus"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GPlusPrivate" c:type="GCalcGPlusPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gplus_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GPlus" c:type="GCalcGPlus*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GPlusClass" c:type="GCalcGPlusClass" glib:is-gtype-struct-for="GPlus">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GPlusPrivate" c:type="GCalcGPlusPrivate" disguised="1"/>
	<class name="GPolynomial" c:type="GCalcGPolynomial" glib:type-name="GCalcGPolynomial" glib:get-type="gcalc_gpolynomial_get_type" glib:type-struct="GPolynomialClass" parent="GCalc.GExpression">
		<implements name="GCalc.Polynomial"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GPolynomialPrivate" c:type="GCalcGPolynomialPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gpolynomial_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GPolynomial" c:type="GCalcGPolynomial*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GPolynomialClass" c:type="GCalcGPolynomialClass" glib:is-gtype-struct-for="GPolynomial">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GPolynomialPrivate" c:type="GCalcGPolynomialPrivate" disguised="1"/>
	<class name="GPow" c:type="GCalcGPow" glib:type-name="GCalcGPow" glib:get-type="gcalc_gpow_get_type" glib:type-struct="GPowClass" parent="GCalc.GExpression">
		<implements name="GCalc.Operator"/>
		<implements name="GCalc.Pow"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GPowPrivate" c:type="GCalcGPowPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gpow_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GPow" c:type="GCalcGPow*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GPowClass" c:type="GCalcGPowClass" glib:is-gtype-struct-for="GPow">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GPowPrivate" c:type="GCalcGPowPrivate" disguised="1"/>
	<class name="GResult" c:type="GCalcGResult" glib:type-name="GCalcGResult" glib:get-type="gcalc_gresult_get_type" glib:type-struct="GResultClass" parent="GObject.Object">
		<implements name="GCalc.Result"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="GResultPrivate" c:type="GCalcGResultPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gresult_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GResult" c:type="GCalcGResult*"/>
			</return-value>
			<parameters>
				<parameter name="exp" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="GResultClass" c:type="GCalcGResultClass" glib:is-gtype-struct-for="GResult">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="GResultPrivate" c:type="GCalcGResultPrivate" disguised="1"/>
	<class name="GGroup" c:type="GCalcGGroup" glib:type-name="GCalcGGroup" glib:get-type="gcalc_ggroup_get_type" glib:type-struct="GGroupClass" parent="GCalc.GExpression">
		<implements name="GCalc.Group"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GGroupPrivate" c:type="GCalcGGroupPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_ggroup_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GGroup" c:type="GCalcGGroup*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GGroupClass" c:type="GCalcGGroupClass" glib:is-gtype-struct-for="GGroup">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GGroupPrivate" c:type="GCalcGGroupPrivate" disguised="1"/>
	<class name="GSolver" c:type="GCalcGSolver" glib:type-name="GCalcGSolver" glib:get-type="gcalc_gsolver_get_type" glib:type-struct="GSolverClass" parent="GObject.Object">
		<implements name="GCalc.Solver"/>
		<field name="parent_instance">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv">
			<type name="GSolverPrivate" c:type="GCalcGSolverPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gsolver_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GSolver" c:type="GCalcGSolver*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GSolverClass" c:type="GCalcGSolverClass" glib:is-gtype-struct-for="GSolver">
		<field name="parent_class">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="GSolverPrivate" c:type="GCalcGSolverPrivate" disguised="1"/>
	<class name="GTerm" c:type="GCalcGTerm" glib:type-name="GCalcGTerm" glib:get-type="gcalc_gterm_get_type" glib:type-struct="GTermClass" parent="GCalc.GExpression">
		<implements name="GCalc.Term"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GTermPrivate" c:type="GCalcGTermPrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gterm_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GTerm" c:type="GCalcGTerm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="GTermClass" c:type="GCalcGTermClass" glib:is-gtype-struct-for="GTerm">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GTermPrivate" c:type="GCalcGTermPrivate" disguised="1"/>
	<class name="GVariable" c:type="GCalcGVariable" glib:type-name="GCalcGVariable" glib:get-type="gcalc_gvariable_get_type" glib:type-struct="GVariableClass" parent="GCalc.GExpression">
		<implements name="GCalc.Variable"/>
		<implements name="GCalc.Hashable"/>
		<field name="parent_instance">
			<type name="GCalc.GExpression" c:type="GCalcGExpression"/>
		</field>
		<field name="priv">
			<type name="GVariablePrivate" c:type="GCalcGVariablePrivate*"/>
		</field>
		<constructor name="new" c:identifier="gcalc_gvariable_new">
			<return-value transfer-ownership="full">
				<type name="GCalc.GVariable" c:type="GCalcGVariable*"/>
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="GVariableClass" c:type="GCalcGVariableClass" glib:is-gtype-struct-for="GVariable">
		<field name="parent_class">
			<type name="GCalc.GExpressionClass" c:type="GCalcGExpressionClass"/>
		</field>
	</record>
	<record name="GVariablePrivate" c:type="GCalcGVariablePrivate" disguised="1"/>
	<interface name="Assign" c:type="GCalcAssign" glib:type-name="GCalcAssign" glib:get-type="gcalc_assign_get_type" glib:type-struct="AssignIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
		<prerequisite name="GCalc.BinaryOperator"/>
		<method name="evaluate" c:identifier="gcalc_assign_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
	</interface>
	<record name="AssignIface" c:type="GCalcAssignIface" glib:is-gtype-struct-for="Assign">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="BinaryOperator" c:type="GCalcBinaryOperator" glib:type-name="GCalcBinaryOperator" glib:get-type="gcalc_binary_operator_get_type" glib:type-struct="BinaryOperatorIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
	</interface>
	<record name="BinaryOperatorIface" c:type="GCalcBinaryOperatorIface" glib:is-gtype-struct-for="BinaryOperator">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Constant" c:type="GCalcConstant" glib:type-name="GCalcConstant" glib:get-type="gcalc_constant_get_type" glib:type-struct="ConstantIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<method name="real" c:identifier="gcalc_constant_real">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
		</method>
		<virtual-method name="real" invoker="real">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
		</virtual-method>
		<method name="imag" c:identifier="gcalc_constant_imag">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
		</method>
		<virtual-method name="imag" invoker="imag">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
		</virtual-method>
		<method name="zero" c:identifier="gcalc_constant_zero">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
		</method>
		<virtual-method name="zero" invoker="zero">
			<return-value transfer-ownership="full">
				<type name="none"/>
			</return-value>
		</virtual-method>
		<method name="add" c:identifier="gcalc_constant_add">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add" invoker="add">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="multiply" c:identifier="gcalc_constant_multiply">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="multiply" invoker="multiply">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="divide" c:identifier="gcalc_constant_divide">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="divide" invoker="divide">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="neg" c:identifier="gcalc_constant_neg">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
		</method>
		<virtual-method name="neg" invoker="neg">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
		</virtual-method>
		<method name="pow" c:identifier="gcalc_constant_pow">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="pow" invoker="pow">
			<return-value transfer-ownership="full">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
			<parameters>
				<parameter name="c" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="ConstantIface" c:type="GCalcConstantIface" glib:is-gtype-struct-for="Constant">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="real">
			<callback name="real" c:type="real">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="imag">
			<callback name="imag" c:type="imag">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="zero">
			<callback name="zero" c:type="zero">
				<return-value transfer-ownership="full">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add">
			<callback name="add" c:type="add">
				<return-value transfer-ownership="full">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
					<parameter name="c" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="multiply">
			<callback name="multiply" c:type="multiply">
				<return-value transfer-ownership="full">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
					<parameter name="c" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="divide">
			<callback name="divide" c:type="divide">
				<return-value transfer-ownership="full">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
					<parameter name="c" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="neg">
			<callback name="neg" c:type="neg">
				<return-value transfer-ownership="full">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="pow">
			<callback name="pow" c:type="pow">
				<return-value transfer-ownership="full">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
					<parameter name="c" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Division" c:type="GCalcDivision" glib:type-name="GCalcDivision" glib:get-type="gcalc_division_get_type" glib:type-struct="DivisionIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
		<prerequisite name="GCalc.BinaryOperator"/>
	</interface>
	<record name="DivisionIface" c:type="GCalcDivisionIface" glib:is-gtype-struct-for="Division">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Expression" c:type="GCalcExpression" glib:type-name="GCalcExpression" glib:get-type="gcalc_expression_get_type" glib:type-struct="ExpressionIface">
		<prerequisite name="GObject.Object"/>
		<method name="to_string" c:identifier="gcalc_expression_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</virtual-method>
		<method name="solve" c:identifier="gcalc_expression_solve">
			<return-value transfer-ownership="full">
				<type name="GCalc.Result" c:type="GCalcResult*"/>
			</return-value>
		</method>
		<virtual-method name="solve" invoker="solve">
			<return-value transfer-ownership="full">
				<type name="GCalc.Result" c:type="GCalcResult*"/>
			</return-value>
		</virtual-method>
		<property name="parent" writable="1">
			<type name="GCalc.Expression" c:type="GCalcExpression*"/>
		</property>
		<method name="get_parent" c:identifier="gcalc_expression_get_parent">
			<return-value transfer-ownership="none">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="get_parent" invoker="get_parent">
			<return-value transfer-ownership="none">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
		<method name="set_parent" c:identifier="gcalc_expression_set_parent">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_parent" invoker="set_parent">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="expressions">
			<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
		</property>
		<method name="get_expressions" c:identifier="gcalc_expression_get_expressions">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</method>
		<virtual-method name="get_expressions" invoker="get_expressions">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="ExpressionIface" c:type="GCalcExpressionIface" glib:is-gtype-struct-for="Expression">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Expression" c:type="GCalcExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="solve">
			<callback name="solve" c:type="solve">
				<return-value transfer-ownership="full">
					<type name="GCalc.Result" c:type="GCalcResult*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Expression" c:type="GCalcExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_parent">
			<callback name="get_parent" c:type="get_parent">
				<return-value transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Expression" c:type="GCalcExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_parent">
			<callback name="set_parent" c:type="set_parent">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Expression" c:type="GCalcExpression*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GCalc.Expression" c:type="GCalcExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_expressions">
			<callback name="get_expressions" c:type="get_expressions">
				<return-value transfer-ownership="none">
					<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Expression" c:type="GCalcExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="ErrorExpression" c:type="GCalcErrorExpression" glib:type-name="GCalcErrorExpression" glib:get-type="gcalc_error_expression_get_type" glib:type-struct="ErrorExpressionIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
	</interface>
	<record name="ErrorExpressionIface" c:type="GCalcErrorExpressionIface" glib:is-gtype-struct-for="ErrorExpression">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Function" c:type="GCalcFunction" glib:type-name="GCalcFunction" glib:get-type="gcalc_function_get_type" glib:type-struct="FunctionIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<method name="evaluate" c:identifier="gcalc_function_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="evaluate" invoker="evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
		<method name="verify_params" c:identifier="gcalc_function_verify_params" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="verify_params" invoker="verify_params" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<property name="param-types">
			<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
		</property>
		<method name="get_param_types" c:identifier="gcalc_function_get_param_types">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</method>
		<virtual-method name="get_param_types" invoker="get_param_types">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</virtual-method>
		<property name="name" writable="1" construct="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="gcalc_function_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
		</virtual-method>
		<method name="set_name" c:identifier="gcalc_function_set_name">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_name" invoker="set_name">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="n-params" writable="1" construct="1">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_n_params" c:identifier="gcalc_function_get_n_params">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
		</method>
		<virtual-method name="get_n_params" invoker="get_n_params">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
		</virtual-method>
		<method name="set_n_params" c:identifier="gcalc_function_set_n_params">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_n_params" invoker="set_n_params">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="closed" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_closed" c:identifier="gcalc_function_get_closed">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="get_closed" invoker="get_closed">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="set_closed" c:identifier="gcalc_function_set_closed">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_closed" invoker="set_closed">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="FunctionIface" c:type="GCalcFunctionIface" glib:is-gtype-struct-for="Function">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="evaluate">
			<callback name="evaluate" c:type="evaluate" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="verify_params">
			<callback name="verify_params" c:type="verify_params" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_param_types">
			<callback name="get_param_types" c:type="get_param_types">
				<return-value transfer-ownership="none">
					<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_name">
			<callback name="set_name" c:type="set_name">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_n_params">
			<callback name="get_n_params" c:type="get_n_params">
				<return-value transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_n_params">
			<callback name="set_n_params" c:type="set_n_params">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_closed">
			<callback name="get_closed" c:type="get_closed">
				<return-value transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_closed">
			<callback name="set_closed" c:type="set_closed">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Function" c:type="GCalcFunction*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gboolean" c:type="gboolean"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="ErrorResult" c:type="GCalcErrorResult" glib:type-name="GCalcErrorResult" glib:get-type="gcalc_error_result_get_type" glib:type-struct="ErrorResultIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Result"/>
		<property name="message">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_message" c:identifier="gcalc_error_result_get_message">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
		</method>
		<virtual-method name="get_message" invoker="get_message">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="ErrorResultIface" c:type="GCalcErrorResultIface" glib:is-gtype-struct-for="ErrorResult">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_message">
			<callback name="get_message" c:type="get_message">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.ErrorResult" c:type="GCalcErrorResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Group" c:type="GCalcGroup" glib:type-name="GCalcGroup" glib:get-type="gcalc_group_get_type" glib:type-struct="GroupIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<method name="evaluate" c:identifier="gcalc_group_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="evaluate" invoker="evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
		<property name="level" writable="1">
			<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
		</property>
		<method name="get_level" c:identifier="gcalc_group_get_level">
			<return-value transfer-ownership="none">
				<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
			</return-value>
		</method>
		<virtual-method name="get_level" invoker="get_level">
			<return-value transfer-ownership="none">
				<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
			</return-value>
		</virtual-method>
		<method name="set_level" c:identifier="gcalc_group_set_level">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_level" invoker="set_level">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="closed" writable="1">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_closed" c:identifier="gcalc_group_get_closed">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="get_closed" invoker="get_closed">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
		<method name="set_closed" c:identifier="gcalc_group_set_closed">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_closed" invoker="set_closed">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="GroupIface" c:type="GCalcGroupIface" glib:is-gtype-struct-for="Group">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="evaluate">
			<callback name="evaluate" c:type="evaluate" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Group" c:type="GCalcGroup*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_level">
			<callback name="get_level" c:type="get_level">
				<return-value transfer-ownership="none">
					<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Group" c:type="GCalcGroup*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_level">
			<callback name="set_level" c:type="set_level">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Group" c:type="GCalcGroup*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GCalc.GroupLevel" c:type="GCalcGroupLevel"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_closed">
			<callback name="get_closed" c:type="get_closed">
				<return-value transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Group" c:type="GCalcGroup*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_closed">
			<callback name="set_closed" c:type="set_closed">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Group" c:type="GCalcGroup*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gboolean" c:type="gboolean"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<enumeration name="GroupLevel" c:type="GCalcGroupLevel" glib:type-name="GCalcGroupLevel" glib:get-type="gcalc_group_level_get_type">
		<member name="one" c:identifier="GCALC_GROUP_LEVEL_ONE" value="0"/>
		<member name="two" c:identifier="GCALC_GROUP_LEVEL_TWO" value="1"/>
		<member name="three" c:identifier="GCALC_GROUP_LEVEL_THREE" value="2"/>
	</enumeration>
	<interface name="Hashable" c:type="GCalcHashable" glib:type-name="GCalcHashable" glib:get-type="gcalc_hashable_get_type" glib:type-struct="HashableIface">
		<prerequisite name="GObject.Object"/>
		<method name="hash" c:identifier="gcalc_hashable_hash">
			<return-value transfer-ownership="full">
				<type name="guint" c:type="guint"/>
			</return-value>
		</method>
		<virtual-method name="hash" invoker="hash">
			<return-value transfer-ownership="full">
				<type name="guint" c:type="guint"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="HashableIface" c:type="GCalcHashableIface" glib:is-gtype-struct-for="Hashable">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="hash">
			<callback name="hash" c:type="hash">
				<return-value transfer-ownership="full">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Hashable" c:type="GCalcHashable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="MathEquation" c:type="GCalcMathEquation" glib:type-name="GCalcMathEquation" glib:get-type="gcalc_math_equation_get_type" glib:type-struct="MathEquationIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<property name="variables">
			<type name="GCalc.ExpressionHashMap" c:type="GCalcExpressionHashMap*"/>
		</property>
		<method name="get_variables" c:identifier="gcalc_math_equation_get_variables">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionHashMap" c:type="GCalcExpressionHashMap*"/>
			</return-value>
		</method>
		<virtual-method name="get_variables" invoker="get_variables">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionHashMap" c:type="GCalcExpressionHashMap*"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="MathEquationIface" c:type="GCalcMathEquationIface" glib:is-gtype-struct-for="MathEquation">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_variables">
			<callback name="get_variables" c:type="get_variables">
				<return-value transfer-ownership="none">
					<type name="GCalc.ExpressionHashMap" c:type="GCalcExpressionHashMap*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.MathEquation" c:type="GCalcMathEquation*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="MathEquationManager" c:type="GCalcMathEquationManager" glib:type-name="GCalcMathEquationManager" glib:get-type="gcalc_math_equation_manager_get_type" glib:type-struct="MathEquationManagerIface">
		<prerequisite name="GObject.Object"/>
		<method name="find_variable" c:identifier="gcalc_math_equation_manager_find_variable">
			<return-value transfer-ownership="full">
				<type name="GCalc.Variable" c:type="GCalcVariable*"/>
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="find_variable" invoker="find_variable">
			<return-value transfer-ownership="full">
				<type name="GCalc.Variable" c:type="GCalcVariable*"/>
			</return-value>
			<parameters>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="equations">
			<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
		</property>
		<method name="get_equations" c:identifier="gcalc_math_equation_manager_get_equations">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</method>
		<virtual-method name="get_equations" invoker="get_equations">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</virtual-method>
		<property name="functions">
			<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
		</property>
		<method name="get_functions" c:identifier="gcalc_math_equation_manager_get_functions">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</method>
		<virtual-method name="get_functions" invoker="get_functions">
			<return-value transfer-ownership="none">
				<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="MathEquationManagerIface" c:type="GCalcMathEquationManagerIface" glib:is-gtype-struct-for="MathEquationManager">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="find_variable">
			<callback name="find_variable" c:type="find_variable">
				<return-value transfer-ownership="full">
					<type name="GCalc.Variable" c:type="GCalcVariable*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
					</parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_equations">
			<callback name="get_equations" c:type="get_equations">
				<return-value transfer-ownership="none">
					<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_functions">
			<callback name="get_functions" c:type="get_functions">
				<return-value transfer-ownership="none">
					<type name="GCalc.ExpressionContainer" c:type="GCalcExpressionContainer*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Minus" c:type="GCalcMinus" glib:type-name="GCalcMinus" glib:get-type="gcalc_minus_get_type" glib:type-struct="MinusIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
		<prerequisite name="GCalc.BinaryOperator"/>
	</interface>
	<record name="MinusIface" c:type="GCalcMinusIface" glib:is-gtype-struct-for="Minus">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Multiply" c:type="GCalcMultiply" glib:type-name="GCalcMultiply" glib:get-type="gcalc_multiply_get_type" glib:type-struct="MultiplyIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
		<prerequisite name="GCalc.BinaryOperator"/>
	</interface>
	<record name="MultiplyIface" c:type="GCalcMultiplyIface" glib:is-gtype-struct-for="Multiply">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Operator" c:type="GCalcOperator" glib:type-name="GCalcOperator" glib:get-type="gcalc_operator_get_type" glib:type-struct="OperatorIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
	</interface>
	<record name="OperatorIface" c:type="GCalcOperatorIface" glib:is-gtype-struct-for="Operator">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Plus" c:type="GCalcPlus" glib:type-name="GCalcPlus" glib:get-type="gcalc_plus_get_type" glib:type-struct="PlusIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
		<prerequisite name="GCalc.BinaryOperator"/>
	</interface>
	<record name="PlusIface" c:type="GCalcPlusIface" glib:is-gtype-struct-for="Plus">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Polynomial" c:type="GCalcPolynomial" glib:type-name="GCalcPolynomial" glib:get-type="gcalc_polynomial_get_type" glib:type-struct="PolynomialIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<method name="evaluate" c:identifier="gcalc_polynomial_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="evaluate" invoker="evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="PolynomialIface" c:type="GCalcPolynomialIface" glib:is-gtype-struct-for="Polynomial">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="evaluate">
			<callback name="evaluate" c:type="evaluate" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Polynomial" c:type="GCalcPolynomial*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Pow" c:type="GCalcPow" glib:type-name="GCalcPow" glib:get-type="gcalc_pow_get_type" glib:type-struct="PowIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<prerequisite name="GCalc.Operator"/>
	</interface>
	<record name="PowIface" c:type="GCalcPowIface" glib:is-gtype-struct-for="Pow">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Result" c:type="GCalcResult" glib:type-name="GCalcResult" glib:get-type="gcalc_result_get_type" glib:type-struct="ResultIface">
		<prerequisite name="GObject.Object"/>
		<method name="to_string" c:identifier="gcalc_result_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
		</virtual-method>
		<property name="expression">
			<type name="GCalc.Expression" c:type="GCalcExpression*"/>
		</property>
		<method name="get_expression" c:identifier="gcalc_result_get_expression">
			<return-value transfer-ownership="none">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="get_expression" invoker="get_expression">
			<return-value transfer-ownership="none">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="ResultIface" c:type="GCalcResultIface" glib:is-gtype-struct-for="Result">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Result" c:type="GCalcResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_expression">
			<callback name="get_expression" c:type="get_expression">
				<return-value transfer-ownership="none">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Result" c:type="GCalcResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Solver" c:type="GCalcSolver" glib:type-name="GCalcSolver" glib:get-type="gcalc_solver_get_type" glib:type-struct="SolverIface">
		<prerequisite name="GObject.Object"/>
		<method name="solve" c:identifier="gcalc_solver_solve" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Result" c:type="GCalcResult*"/>
			</return-value>
			<parameters>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="solve" invoker="solve" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Result" c:type="GCalcResult*"/>
			</return-value>
			<parameters>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="equation-manager" writable="1">
			<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
		</property>
		<method name="get_equation_manager" c:identifier="gcalc_solver_get_equation_manager">
			<return-value transfer-ownership="none">
				<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
			</return-value>
		</method>
		<virtual-method name="get_equation_manager" invoker="get_equation_manager">
			<return-value transfer-ownership="none">
				<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
			</return-value>
		</virtual-method>
		<method name="set_equation_manager" c:identifier="gcalc_solver_set_equation_manager">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_equation_manager" invoker="set_equation_manager">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SolverIface" c:type="GCalcSolverIface" glib:is-gtype-struct-for="Solver">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="solve">
			<callback name="solve" c:type="solve" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Result" c:type="GCalcResult*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Solver" c:type="GCalcSolver*"/>
					</parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_equation_manager">
			<callback name="get_equation_manager" c:type="get_equation_manager">
				<return-value transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Solver" c:type="GCalcSolver*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_equation_manager">
			<callback name="set_equation_manager" c:type="set_equation_manager">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Solver" c:type="GCalcSolver*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Term" c:type="GCalcTerm" glib:type-name="GCalcTerm" glib:get-type="gcalc_term_get_type" glib:type-struct="TermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<method name="add" c:identifier="gcalc_term_add" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="t" transfer-ownership="none">
					<type name="GCalc.Term" c:type="GCalcTerm*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add" invoker="add" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="t" transfer-ownership="none">
					<type name="GCalc.Term" c:type="GCalcTerm*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="evaluate" c:identifier="gcalc_term_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="evaluate" invoker="evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
		<function name="evaluate_constants" c:identifier="gcalc_term_evaluate_constants" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
			<parameters>
				<parameter name="c1" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
				<parameter name="c2" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
				<parameter name="op" transfer-ownership="none">
					<type name="GCalc.Operator" c:type="GCalcOperator*"/>
				</parameter>
			</parameters>
		</function>
	</interface>
	<record name="TermIface" c:type="GCalcTermIface" glib:is-gtype-struct-for="Term">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="add">
			<callback name="add" c:type="add" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Term" c:type="GCalcTerm*"/>
					</parameter>
					<parameter name="t" transfer-ownership="none">
						<type name="GCalc.Term" c:type="GCalcTerm*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="evaluate">
			<callback name="evaluate" c:type="evaluate" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Term" c:type="GCalcTerm*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Variable" c:type="GCalcVariable" glib:type-name="GCalcVariable" glib:get-type="gcalc_variable_get_type" glib:type-struct="VariableIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="GCalc.Expression"/>
		<method name="evaluate" c:identifier="gcalc_variable_evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</method>
		<virtual-method name="evaluate" invoker="evaluate" throws="1">
			<return-value transfer-ownership="full">
				<type name="GCalc.Expression" c:type="GCalcExpression*"/>
			</return-value>
		</virtual-method>
		<property name="name" writable="1" construct="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="gcalc_variable_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
		</virtual-method>
		<method name="set_name" c:identifier="gcalc_variable_set_name">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_name" invoker="set_name">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="value" writable="1">
			<type name="GCalc.Constant" c:type="GCalcConstant*"/>
		</property>
		<method name="get_value" c:identifier="gcalc_variable_get_value">
			<return-value transfer-ownership="none">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
		</method>
		<virtual-method name="get_value" invoker="get_value">
			<return-value transfer-ownership="none">
				<type name="GCalc.Constant" c:type="GCalcConstant*"/>
			</return-value>
		</virtual-method>
		<method name="set_value" c:identifier="gcalc_variable_set_value">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_value" invoker="set_value">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="bind" writable="1">
			<type name="GCalc.Variable" c:type="GCalcVariable*"/>
		</property>
		<method name="get_bind" c:identifier="gcalc_variable_get_bind">
			<return-value transfer-ownership="none">
				<type name="GCalc.Variable" c:type="GCalcVariable*"/>
			</return-value>
		</method>
		<virtual-method name="get_bind" invoker="get_bind">
			<return-value transfer-ownership="none">
				<type name="GCalc.Variable" c:type="GCalcVariable*"/>
			</return-value>
		</virtual-method>
		<method name="set_bind" c:identifier="gcalc_variable_set_bind">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Variable" c:type="GCalcVariable*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_bind" invoker="set_bind">
			<return-value transfer-ownership="none">
				<type name="none"/>
			</return-value>
			<parameters>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.Variable" c:type="GCalcVariable*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_binded" c:identifier="gcalc_variable_get_binded">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</method>
		<virtual-method name="get_binded" invoker="get_binded">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
		</virtual-method>
	</interface>
	<record name="VariableIface" c:type="GCalcVariableIface" glib:is-gtype-struct-for="Variable">
		<field name="parent_iface">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="evaluate">
			<callback name="evaluate" c:type="evaluate" throws="1">
				<return-value transfer-ownership="full">
					<type name="GCalc.Expression" c:type="GCalcExpression*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_name">
			<callback name="set_name" c:type="set_name">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_value">
			<callback name="get_value" c:type="get_value">
				<return-value transfer-ownership="none">
					<type name="GCalc.Constant" c:type="GCalcConstant*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_value">
			<callback name="set_value" c:type="set_value">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GCalc.Constant" c:type="GCalcConstant*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_bind">
			<callback name="get_bind" c:type="get_bind">
				<return-value transfer-ownership="none">
					<type name="GCalc.Variable" c:type="GCalcVariable*"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_bind">
			<callback name="set_bind" c:type="set_bind">
				<return-value transfer-ownership="none">
					<type name="none"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_binded">
			<callback name="get_binded" c:type="get_binded">
				<return-value transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<parameter name="self" transfer-ownership="none">
						<type name="GCalc.Variable" c:type="GCalcVariable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
</namespace>
</repository>
