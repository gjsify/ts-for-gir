<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="telepathy-glib"/>
  <c:include name="telepathy-glib/telepathy-glib.h"/>
  <namespace name="TelepathyGLib"
             version="0.12"
             shared-library="libtelepathy-glib.so.0"
             c:identifier-prefixes="Tp"
             c:symbol-prefixes="tp">
    <alias name="Handle" c:type="TpHandle">
      <doc xml:space="preserve"
           filename="handle.h"
           line="35">Type representing Telepathy handles within telepathy-glib.

This is guint despite the wire protocol having 32-bit integers, because
dbus-glib expects GArrays of guint and so on. If the dbus-glib ABI changes
in future, telepathy-glib is likely to have a matching ABI change.</doc>
      <source-position filename="handle.h" line="44"/>
      <type name="guint" c:type="guint"/>
    </alias>
    <alias name="IntSet" c:type="TpIntSet" introspectable="0">
      <doc xml:space="preserve"
           filename="intset.h"
           line="44">Before 0.11.16, this was the name for &lt;type&gt;TpIntset&lt;/type&gt;, but it's
now just a backwards compatibility typedef.</doc>
      <source-position filename="intset.h" line="50"/>
      <type name="Intset" c:type="TpIntset"/>
    </alias>
    <alias name="IntSetFastIter"
           c:type="TpIntSetFastIter"
           introspectable="0"
           deprecated="1">
      <doc xml:space="preserve"
           filename="intset.c"
           line="888">Before 0.11.16, this was the name for &lt;type&gt;TpIntsetFastIter&lt;/type&gt;,
but it's now just a backwards compatibility typedef.</doc>
      <doc-deprecated xml:space="preserve">since 0.19.0. Use #TpIntsetFastIter instead</doc-deprecated>
      <source-position filename="intset.h" line="115"/>
      <type name="IntsetFastIter" c:type="TpIntsetFastIter"/>
    </alias>
    <alias name="IntSetIter"
           c:type="TpIntSetIter"
           introspectable="0"
           deprecated="1">
      <doc xml:space="preserve"
           filename="intset.c"
           line="98">Before 0.11.16, this was the name for &lt;type&gt;TpIntsetIter&lt;/type&gt;, but
it's now just a backwards compatibility typedef.</doc>
      <doc-deprecated xml:space="preserve">since 0.19.0. Use #TpIntsetFastIter instead</doc-deprecated>
      <source-position filename="intset.h" line="95"/>
      <type name="IntsetIter" c:type="TpIntsetIter"/>
    </alias>
    <function-macro name="ACCOUNT"
                    c:identifier="TP_ACCOUNT"
                    introspectable="0">
      <source-position filename="account.h" line="59"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_CHANNEL_REQUEST"
                    c:identifier="TP_ACCOUNT_CHANNEL_REQUEST"
                    introspectable="0">
      <source-position filename="account-channel-request.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_CHANNEL_REQUEST_CLASS"
                    c:identifier="TP_ACCOUNT_CHANNEL_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="account-channel-request.h" line="53"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_CHANNEL_REQUEST_GET_CLASS"
                    c:identifier="TP_ACCOUNT_CHANNEL_REQUEST_GET_CLASS"
                    introspectable="0">
      <source-position filename="account-channel-request.h" line="60"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_CLASS"
                    c:identifier="TP_ACCOUNT_CLASS"
                    introspectable="0">
      <source-position filename="account.h" line="62"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_GET_CLASS"
                    c:identifier="TP_ACCOUNT_GET_CLASS"
                    introspectable="0">
      <source-position filename="account.h" line="69"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_MANAGER"
                    c:identifier="TP_ACCOUNT_MANAGER"
                    introspectable="0">
      <source-position filename="account-manager.h" line="57"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ACCOUNT_MANAGER_BUS_NAME"
              value="org.freedesktop.Telepathy.AccountManager"
              c:type="TP_ACCOUNT_MANAGER_BUS_NAME">
      <doc xml:space="preserve"
           filename="defs.h"
           line="68">The account manager's well-known bus name</doc>
      <source-position filename="defs.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="ACCOUNT_MANAGER_CLASS"
                    c:identifier="TP_ACCOUNT_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="account-manager.h" line="60"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_MANAGER_GET_CLASS"
                    c:identifier="TP_ACCOUNT_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="account-manager.h" line="67"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="ACCOUNT_MANAGER_OBJECT_PATH"
              value="/org/freedesktop/Telepathy/AccountManager"
              c:type="TP_ACCOUNT_MANAGER_OBJECT_PATH">
      <doc xml:space="preserve"
           filename="defs.h"
           line="75">The account manager's standard object path</doc>
      <source-position filename="defs.h" line="80"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="ACCOUNT_OBJECT_PATH_BASE"
              value="/org/freedesktop/Telepathy/Account/"
              c:type="TP_ACCOUNT_OBJECT_PATH_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="82">The common prefix of the object path for all Account objects.</doc>
      <source-position filename="defs.h" line="87"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="ACCOUNT_REQUEST"
                    c:identifier="TP_ACCOUNT_REQUEST"
                    introspectable="0">
      <source-position filename="account-request.h" line="53"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_REQUEST_CLASS"
                    c:identifier="TP_ACCOUNT_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="account-request.h" line="56"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ACCOUNT_REQUEST_GET_CLASS"
                    c:identifier="TP_ACCOUNT_REQUEST_GET_CLASS"
                    introspectable="0">
      <source-position filename="account-request.h" line="63"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ADD_DISPATCH_OPERATION_CONTEXT"
                    c:identifier="TP_ADD_DISPATCH_OPERATION_CONTEXT"
                    introspectable="0">
      <source-position filename="add-dispatch-operation-context.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ADD_DISPATCH_OPERATION_CONTEXT_CLASS"
                    c:identifier="TP_ADD_DISPATCH_OPERATION_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="add-dispatch-operation-context.h" line="45"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ADD_DISPATCH_OPERATION_CONTEXT_GET_CLASS"
                    c:identifier="TP_ADD_DISPATCH_OPERATION_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="add-dispatch-operation-context.h" line="52"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTOMATIC_CLIENT_FACTORY"
                    c:identifier="TP_AUTOMATIC_CLIENT_FACTORY"
                    introspectable="0">
      <source-position filename="automatic-client-factory.h" line="55"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTOMATIC_CLIENT_FACTORY_CLASS"
                    c:identifier="TP_AUTOMATIC_CLIENT_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="automatic-client-factory.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTOMATIC_CLIENT_FACTORY_GET_CLASS"
                    c:identifier="TP_AUTOMATIC_CLIENT_FACTORY_GET_CLASS"
                    introspectable="0">
      <source-position filename="automatic-client-factory.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTOMATIC_PROXY_FACTORY"
                    c:identifier="TP_AUTOMATIC_PROXY_FACTORY"
                    introspectable="0">
      <source-position filename="automatic-proxy-factory.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTOMATIC_PROXY_FACTORY_CLASS"
                    c:identifier="TP_AUTOMATIC_PROXY_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="automatic-proxy-factory.h" line="53"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="AUTOMATIC_PROXY_FACTORY_GET_CLASS"
                    c:identifier="TP_AUTOMATIC_PROXY_FACTORY_GET_CLASS"
                    introspectable="0">
      <source-position filename="automatic-proxy-factory.h" line="60"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="AccessControlType" c:type="TpAccessControlType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="232">&lt;![CDATA[         A type for communication access control. These control           policies are used in           CommunicationPolicy.DRAFT           as well as most rich presence interfaces.          New interfaces should use this type, and NOT           Rich_Presence_Access_Control_Type.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="138"/>
      <member name="whitelist"
              value="0"
              c:identifier="TP_ACCESS_CONTROL_TYPE_WHITELIST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="234">&lt;![CDATA[           Only allow contacts that are in a certain whitelist.            The associated variant             in Access_Control is a list of             Contact_Handle representing             the whitelist, with signature au.         ]]&gt;</doc>
      </member>
      <member name="publish_list"
              value="1"
              c:identifier="TP_ACCESS_CONTROL_TYPE_PUBLISH_LIST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="235">&lt;![CDATA[           Allow contacts in the user's 'publish' list. The associated           variant in Access_Control is ignored.         ]]&gt;</doc>
      </member>
      <member name="group"
              value="2"
              c:identifier="TP_ACCESS_CONTROL_TYPE_GROUP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="236">&lt;![CDATA[           Only allow contacts that are in a certain group.            The associated variant in Access_Control is a             Group_Handle representing the permitted             group.         ]]&gt;</doc>
      </member>
      <member name="open" value="3" c:identifier="TP_ACCESS_CONTROL_TYPE_OPEN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="237">&lt;![CDATA[           Allow all contacts.  The associated           variant in Access_Control is ignored.         ]]&gt;</doc>
      </member>
      <member name="subscribe_or_publish_list"
              value="4"
              c:identifier="TP_ACCESS_CONTROL_TYPE_SUBSCRIBE_OR_PUBLISH_LIST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="238">&lt;![CDATA[           Allow all contacts in the user's 'subscribe' or 'publish'           list. The associated variant in Access_Control is           ignored.         ]]&gt;</doc>
      </member>
      <member name="closed"
              value="5"
              c:identifier="TP_ACCESS_CONTROL_TYPE_CLOSED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="239">&lt;![CDATA[           Forbid all contacts. The associated variant in           Access_Control is ignored.         ]]&gt;</doc>
      </member>
      <member name="not_understood"
              value="6"
              c:identifier="TP_ACCESS_CONTROL_TYPE_NOT_UNDERSTOOD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="240">&lt;![CDATA[           The access control rule is too complex to be represented             in the current Telepathy API. The associated variant is             meaningless. Setting this mode is never valid; the             connection manager MUST raise an error if this is attempted.                         XEP-0016 Privacy Lists can easily produce access control             mechanisms that can't be expressed in a simpler API. We             need to be able to at least indicate that fact.                       The associated variant in Access_Control is             ignored.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="Account"
           c:symbol-prefix="account"
           c:type="TpAccount"
           version="0.7.32"
           parent="Proxy"
           glib:type-name="TpAccount"
           glib:get-type="tp_account_get_type"
           glib:type-struct="AccountClass">
      <doc xml:space="preserve"
           filename="account.c"
           line="61">The Telepathy Account Manager stores the user's configured real-time
communication accounts. This object represents a stored account.

If this account is deleted from the account manager, the
#TpProxy::invalidated signal will be emitted
with the domain %TP_DBUS_ERRORS and the error code
%TP_DBUS_ERROR_OBJECT_REMOVED.

One can connect to the #GObject::notify signal to get change notifications
for many of the properties on this object. Refer to each property's
documentation for whether it can be used in this way.

#TpAccount objects should normally be obtained from the #TpAccountManager.

Since 0.16, #TpAccount always has a non-%NULL #TpProxy:factory, and its
#TpProxy:factory will be propagated to its #TpConnection
(if any). If a #TpAccount is created without going via the
#TpAccountManager or specifying a #TpProxy:factory, the default
is to use a new #TpAutomaticClientFactory.</doc>
      <source-position filename="account.h" line="54"/>
      <constructor name="new"
                   c:identifier="tp_account_new"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2219">Convenience function to create a new account proxy. The returned #TpAccount
is not guaranteed to be ready at the point of return.</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_account() instead.</doc-deprecated>
        <source-position filename="account.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account.c"
               line="2228">a new reference to an account proxy, or %NULL if @object_path is
   not valid</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <parameter name="bus_daemon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2221">Proxy for the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2222">The non-NULL object path of this account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_addressing"
                c:identifier="tp_account_get_feature_quark_addressing">
        <source-position filename="account.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_connection"
                c:identifier="tp_account_get_feature_quark_connection"
                version="0.15.5">
        <doc xml:space="preserve"
             filename="account.c"
             line="304">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="309">the quark used for representing the connection feature of a
         #TpAccount</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_core"
                c:identifier="tp_account_get_feature_quark_core"
                version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="288">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="293">the quark used for representing the core feature of a
         #TpAccount</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_storage"
                c:identifier="tp_account_get_feature_quark_storage"
                version="0.13.2">
        <doc xml:space="preserve"
             filename="account.c"
             line="320">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="325">the quark used for representing the storage interface of a
         #TpAccount</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_account_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="account.c"
             line="2188">Ensure that the known interfaces for TpAccount have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_ACCOUNT.</doc>
        <source-position filename="account.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="parse_object_path"
                c:identifier="tp_account_parse_object_path"
                version="0.9.0"
                deprecated="1"
                throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3758">Validates and parses a Telepathy Account's object path, extracting the
connection manager's name, the protocol, and the account's unique identifier
from the path. This includes replacing underscores with hyphens in the
protocol name, as defined in the Account specification.

Any of the out parameters may be %NULL if not needed. If %TRUE is returned,
the caller is responsible for freeing the strings stored in any non-%NULL
out parameters, using g_free().</doc>
        <doc-deprecated xml:space="preserve">Use tp_account_get_protocol() and
 tp_account_get_connection_manager() instead.</doc-deprecated>
        <source-position filename="account.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3778">%TRUE if @object_path was successfully parsed; %FALSE and sets
         @error otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3760">a Telepathy Account's object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cm"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3761">location at which to store the account's
 connection manager's name</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="protocol"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3763">location at which to store the account's
 protocol</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="account_id"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3765">location at which to store the account's
 unique identifier</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </function>
      <method name="associated_with_uri_scheme"
              c:identifier="tp_account_associated_with_uri_scheme"
              version="0.13.8">
        <doc xml:space="preserve"
             filename="account.c"
             line="4366">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="306"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4373">%TRUE if the result of tp_account_get_uri_schemes() would include
 @scheme</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4368">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4369">a URI scheme such as "tel", "sip" or "xmpp"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_connection_status_to_property"
              c:identifier="tp_account_bind_connection_status_to_property"
              version="0.13.16">
        <doc xml:space="preserve"
             filename="account.c"
             line="4501">Binds the :connection-status of @self to the boolean property of another
object using a #GBinding such that the @target_property will be set to
%TRUE when @self is connected (and @invert is %FALSE).

@target_property will be synchronised immediately (%G_BINDING_SYNC_CREATE).
@invert can be interpreted as analogous to %G_BINDING_INVERT_BOOLEAN.

For instance, this function can be used to bind the GtkWidget:sensitive
property to only make a widget sensitive when the account is connected.

See g_object_bind_property() for more information.</doc>
        <source-position filename="account.h" line="314"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4521">the #GBinding instance representing the binding
  between the @self and the @target. The binding is released whenever the
  #GBinding reference count reaches zero.</doc>
          <type name="GObject.Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4503">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4504">the target #GObject</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4505">the property on @target to bind (must be %G_TYPE_BOOLEAN)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="invert" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4506">%TRUE if you wish to invert the value of @target_property
  (i.e. %FALSE if connected)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_detailed_error_vardict"
              c:identifier="tp_account_dup_detailed_error_vardict"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="account.c"
             line="3993">If the account's connection is not connected, return the D-Bus error name
with which it last disconnected or failed to connect (in particular, this
is %TP_ERROR_STR_CANCELLED if it was disconnected by a user request).
This is the same as #TpAccount:connection-error.

If @details is not %NULL, it will be used to return additional details about
the error (the same as #TpAccount:connection-error-details).

Otherwise, return %NULL, without altering @details.

The returned string and @details may become invalid when the main loop is
re-entered or the account is destroyed.</doc>
        <source-position filename="account.h" line="218"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="account.c"
               line="4013">a D-Bus error name, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3995">an account</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3996">
 optionally used to return a variant of type %G_VARIANT_TYPE_VARDICT,
 which must be unreffed by the caller with g_variant_unref()</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_parameters_vardict"
              c:identifier="tp_account_dup_parameters_vardict"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="account.c"
             line="2568">Returns the parameters of the account, in a variant of type
%G_VARIANT_TYPE_VARDICT where the keys
are parameter names (account, password, require-encryption etc.).
Use g_variant_lookup() or g_variant_lookup_value() for convenient
access to the values.

The allowed parameters depend on the connection manager, and can be found
via tp_connection_manager_get_protocol() and
tp_connection_manager_protocol_get_param(). Well-known parameters are
listed
&lt;ulink url="http://telepathy.freedesktop.org/spec/org.freedesktop.Telepathy.ConnectionManager.html#org.freedesktop.Telepathy.ConnectionManager.RequestConnection"&gt;in
the Telepathy D-Bus Interface Specification&lt;/ulink&gt;.</doc>
        <source-position filename="account.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account.c"
               line="2585">the dictionary of
 parameters on @account, of type %G_VARIANT_TYPE_VARDICT</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2570">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_storage_identifier_variant"
              c:identifier="tp_account_dup_storage_identifier_variant"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="account.c"
             line="4070">Return provider-specific information used to identify this
account. Use g_variant_get_type() to check that the type
is what you expect; for instance, if the
#TpAccount:storage-provider has string-based user identifiers,
this variant should have type %G_VARIANT_TYPE_STRING.</doc>
        <source-position filename="account.h" line="286"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account.c"
               line="4080">the same as the
 #TpAccount:storage-identifier-variant property</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4072">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_storage_specific_information_vardict_async"
              c:identifier="tp_account_dup_storage_specific_information_vardict_async"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="account.c"
             line="4175">Makes an asynchronous request of @self's StorageSpecificInformation
property (part of the Account.Interface.Storage interface).

When the operation is finished, @callback will be called. You must then
call tp_account_dup_storage_specific_information_vardict_finish() to get the
result of the request.</doc>
        <source-position filename="account.h" line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4177">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4178">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4179">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_storage_specific_information_vardict_finish"
              c:identifier="tp_account_dup_storage_specific_information_vardict_finish"
              version="0.17.6"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="4228">Retrieve the value of the request begun with
tp_account_dup_storage_specific_information_vardict_async().</doc>
        <source-position filename="account.h" line="298"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account.c"
               line="4237">a map from strings to variants,
 of type %G_VARIANT_TYPE_VARDICT</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4230">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4231">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_connection"
              c:identifier="tp_account_ensure_connection"
              version="0.9.0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2317">Set the connection of the account by specifying the connection object path.
This function does not return a new ref and it is not guaranteed that the
returned #TpConnection object is ready.

The use-case for this function is in a HandleChannels callback and you
already know the object path for the connection, so you can let @account
create its #TpConnection and return it for use.</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_simple_client_factory_ensure_connection()
 instead.</doc-deprecated>
        <source-position filename="account.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2330">the connection of the account, or %NULL if either
 the object path @path is invalid or it is the null-value "/"</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2319">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2320">the path to connection object for #TpAccount</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_automatic_presence"
              c:identifier="tp_account_get_automatic_presence"
              version="0.13.8">
        <doc xml:space="preserve"
             filename="account.c"
             line="4448">Gets the automatic presence, status and status message of @account. These
values are the same as the #TpAccount:automatic-presence-type,
#TpAccount:automatic-status and #TpAccount:automatic-status-message
properties, and are the values that will be used if the account should
be put online automatically.</doc>
        <source-position filename="account.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4461">the same as the #TpAccount:automatic-presence-type property</doc>
          <type name="ConnectionPresenceType"
                c:type="TpConnectionPresenceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4450">an account</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="status"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4451">return location for the presence status</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="status_message"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4452">return location for the
 user-defined message</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_avatar_async"
              c:identifier="tp_account_get_avatar_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3620">Requests an asynchronous get of @account's avatar. When
the operation is finished, @callback will be called. You can then call
tp_account_get_avatar_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3622">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3623">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3624">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_avatar_finish"
              c:identifier="tp_account_get_avatar_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3649">Finishes an async get operation of @account's avatar.

Beware that the returned value is only valid until @result is freed.
Copy it with g_array_ref() if you need to keep it for longer.</doc>
        <source-position filename="account.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3660">a #GArray of #guchar
 containing the bytes of the account's avatar, or %NULL on failure</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3651">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3652">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_changing_presence"
              c:identifier="tp_account_get_changing_presence"
              glib:get-property="changing-presence"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="account.c"
             line="3268">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="282"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3274">the same as the #TpAccount:changing-presence property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3270">an account</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cm_name"
              c:identifier="tp_account_get_cm_name"
              glib:get-property="cm-name"
              version="0.19.3">
        <doc xml:space="preserve"
             filename="account.c"
             line="2466">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2472">the same as the #TpAccount:cm-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2468">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connect_automatically"
              c:identifier="tp_account_get_connect_automatically"
              glib:get-property="connect-automatically"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3286">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3292">the same as the #TpAccount:connect-automatically property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3288">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="tp_account_get_connection"
              glib:get-property="connection"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2291">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2297">the same as the #TpAccount:connection property</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2293">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_manager"
              c:identifier="tp_account_get_connection_manager"
              glib:get-property="connection-manager"
              version="0.9.0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2428">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Use tp_account_get_cm_name() instead.</doc-deprecated>
        <source-position filename="account.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2434">the same as the #TpAccount:connection-manager property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2430">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_status"
              c:identifier="tp_account_get_connection_status"
              glib:get-property="connection-status"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3381">Gets the connection status and reason from @account. The two values
are the same as the #TpAccount:connection-status and
#TpAccount:connection-status-reason properties.</doc>
        <source-position filename="account.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3390">the same as the #TpAccount:connection-status property</doc>
          <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3383">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3384">a #TpConnectionStatusReason to fill, or %NULL</doc>
            <type name="ConnectionStatusReason"
                  c:type="TpConnectionStatusReason*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_presence"
              c:identifier="tp_account_get_current_presence"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3407">Gets the current presence, status and status message of @account. These
values are the same as the #TpAccount:current-presence-type,
#TpAccount:current-status and #TpAccount:current-status-message properties.</doc>
        <source-position filename="account.h" line="221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3418">the same as the #TpAccount:current-presence-type property</doc>
          <type name="ConnectionPresenceType"
                c:type="TpConnectionPresenceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3409">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="status"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3410">return location for the current status</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="status_message"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3411">return location for the current
 status message</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_detailed_error"
              c:identifier="tp_account_get_detailed_error"
              version="0.11.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3954">If the account's connection is not connected, return the D-Bus error name
with which it last disconnected or failed to connect (in particular, this
is %TP_ERROR_STR_CANCELLED if it was disconnected by a user request).
This is the same as #TpAccount:connection-error.

If @details is not %NULL, it will be used to return additional details about
the error (the same as #TpAccount:connection-error-details).

Otherwise, return %NULL, without altering @details.

The returned string and @details may become invalid when the main loop is
re-entered or the account is destroyed.</doc>
        <source-position filename="account.h" line="215"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="account.c"
               line="3974">a D-Bus error name, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3956">an account</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3957">
 optionally used to return a map from string to #GValue, which must not be
 modified, destroyed or unreffed by the caller</doc>
            <type name="GLib.HashTable" c:type="const GHashTable**">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="tp_account_get_display_name"
              glib:get-property="display-name"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2392">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2398">the same as the #TpAccount:display-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2394">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_been_online"
              c:identifier="tp_account_get_has_been_online"
              glib:get-property="has-been-online"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3363">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3369">the same as the #TpAccount:has-been-online property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3365">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="tp_account_get_icon_name"
              glib:get-property="icon-name"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2520">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2526">the same as the #TpAccount:icon-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2522">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nickname"
              c:identifier="tp_account_get_nickname"
              glib:get-property="nickname"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3472">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="234"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3478">the same as the #TpAccount:nickname property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3474">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_normalized_name"
              c:identifier="tp_account_get_normalized_name"
              glib:get-property="normalized-name"
              version="0.13.8">
        <doc xml:space="preserve"
             filename="account.c"
             line="4482">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4488">the same as the #TpAccount:normalized-name
 property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4484">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parameters"
              c:identifier="tp_account_get_parameters"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2538">Returns the parameters of the account, in a hash table where each string
is the parameter name (account, password, require-encryption etc.), and
each value is a #GValue. Using the tp_asv_get family of functions
(tp_asv_get_uint32(), tp_asv_get_string() etc.) to access the parameters is
recommended.

The allowed parameters depend on the connection manager, and can be found
via tp_connection_manager_get_protocol() and
tp_connection_manager_protocol_get_param(). Well-known parameters are
listed
&lt;ulink url="http://telepathy.freedesktop.org/spec/org.freedesktop.Telepathy.ConnectionManager.html#org.freedesktop.Telepathy.ConnectionManager.RequestConnection"&gt;in
the Telepathy D-Bus Interface Specification&lt;/ulink&gt;.</doc>
        <source-position filename="account.h" line="230"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2555">the hash table of
 parameters on @account</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2540">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path_suffix"
              c:identifier="tp_account_get_path_suffix"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="account.c"
             line="2360">Returns the portion of @account's object path after the standard
#TP_ACCOUNT_OBJECT_PATH_BASE prefix, of the form "cm/protocol/acct". This
string uniquely identifies the account.

This function is only intended to be used when printing debug messages or in
tools for developer. For a string suitable for displaying to the user, see
tp_account_get_display_name(). To retrieve the connection manager and
protocol name parts of the object path, see
tp_account_get_connection_manager() and tp_account_get_protocol(). For
persistent identification of the account, use tp_proxy_get_object_path().</doc>
        <source-position filename="account.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2375">a suffix of @account's object path, for debugging purposes.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2362">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="tp_account_get_protocol"
              glib:get-property="protocol"
              version="0.9.0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2447">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Use tp_account_get_cm_name() instead.</doc-deprecated>
        <source-position filename="account.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2453">the same as the #TpAccount:protocol property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2449">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_name"
              c:identifier="tp_account_get_protocol_name"
              glib:get-property="protocol-name"
              version="0.19.3">
        <doc xml:space="preserve"
             filename="account.c"
             line="2484">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2490">the same as the #TpAccount:protocol-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2486">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requested_presence"
              c:identifier="tp_account_get_requested_presence"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3439">Gets the requested presence, status and status message of @account. These
values are the same as the #TpAccount:requested-presence-type,
#TpAccount:requested-status and #TpAccount:requested-status-message
properties.</doc>
        <source-position filename="account.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3451">the same as the #TpAccount:requested-presence-type property</doc>
          <type name="ConnectionPresenceType"
                c:type="TpConnectionPresenceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3441">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="status"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3442">return location for the requested status</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="status_message"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3443">return location for the requested
 status message</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_service"
              c:identifier="tp_account_get_service"
              glib:get-property="service"
              version="0.11.9">
        <doc xml:space="preserve"
             filename="account.c"
             line="2502">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2508">the same as the #TpAccount:service property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2504">an account</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage_identifier"
              c:identifier="tp_account_get_storage_identifier"
              glib:get-property="storage-identifier"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="account.c"
             line="4051">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4057">the same as the #TpAccount:storage-identifier property</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4053">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage_provider"
              c:identifier="tp_account_get_storage_provider"
              glib:get-property="storage-provider"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="account.c"
             line="4032">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="284"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4038">the same as the #TpAccount:storage-provider property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4034">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage_restrictions"
              c:identifier="tp_account_get_storage_restrictions"
              glib:get-property="storage-restrictions"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="account.c"
             line="4097">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="287"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4103">the same as the #TpAccount:storage-restrictions property</doc>
          <type name="StorageRestrictionFlags"
                c:type="TpStorageRestrictionFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4099">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage_specific_information_async"
              c:identifier="tp_account_get_storage_specific_information_async"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="account.c"
             line="4142">Makes an asynchronous request of @self's StorageSpecificInformation
property (part of the Account.Interface.Storage interface).

When the operation is finished, @callback will be called. You must then
call tp_account_get_storage_specific_information_finish() to get the
result of the request.</doc>
        <source-position filename="account.h" line="288"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4144">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4145">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4146">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_storage_specific_information_finish"
              c:identifier="tp_account_get_storage_specific_information_finish"
              version="0.13.2"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="4201">Retrieve the value of the request begun with
tp_account_get_storage_specific_information_async().

Beware that the returned value is only valid until @result is freed.
Copy it with g_hash_table_ref() if you need to keep it for longer.</doc>
        <source-position filename="account.h" line="290"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4213">a #GHashTable
 of strings to GValues representing the D-Bus type a{sv}.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4203">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4204">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_supersedes"
              c:identifier="tp_account_get_supersedes"
              glib:get-property="supersedes"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="account.c"
             line="3556">Return the same thing as the #TpAccount:supersedes property, in a way
that may be more convenient for C code.

The returned pointers are not guaranteed to remain valid after the
main loop has been re-entered.</doc>
        <source-position filename="account.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3566">the same as the #TpAccount:supersedes property</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3558">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri_schemes"
              c:identifier="tp_account_get_uri_schemes"
              glib:get-property="uri-schemes"
              version="0.13.8">
        <doc xml:space="preserve"
             filename="account.c"
             line="4348">Return the #TpAccount:uri-schemes property</doc>
        <source-position filename="account.h" line="305"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4354">the value of #TpAccount:uri_schemes property</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4350">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_enabled"
              c:identifier="tp_account_is_enabled"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2598">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2604">the same as the #TpAccount:enabled property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2600">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_prepared"
              c:identifier="tp_account_is_prepared"
              version="0.9.0"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3674">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">since 0.23.0, use tp_proxy_is_prepared() instead.</doc-deprecated>
        <source-position filename="account.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3681">the same thing as tp_proxy_is_prepared()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3676">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3677">a feature which is required</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_valid"
              c:identifier="tp_account_is_valid"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2410">&lt;!-- --&gt;</doc>
        <source-position filename="account.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2416">the same as the #TpAccount:valid property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2412">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="prepare_async"
              c:identifier="tp_account_prepare_async"
              version="0.9.0"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3693">Requests an asynchronous preparation of @account with the features specified
by @features. When the operation is finished, @callback will be called. You
can then call tp_account_prepare_finish() to get the result of the
operation.

If @features is %NULL, then @callback will be called when the implied
%TP_ACCOUNT_FEATURE_CORE feature is ready.

If %NULL is given to @callback, then no callback will be called when the
operation is finished. Instead, it will simply set @features on @manager.
Note that if @callback is %NULL, then @user_data must also be %NULL.

Since 0.11.3, this is equivalent to calling the new function
tp_proxy_prepare_async() with the same arguments.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.6, use tp_proxy_prepare_async() instead.</doc-deprecated>
        <source-position filename="account.h" line="260"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3695">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3696">a 0-terminated list of features, or %NULL</doc>
            <type name="GLib.Quark" c:type="const GQuark*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3697">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3698">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_finish"
              c:identifier="tp_account_prepare_finish"
              version="0.9.0"
              introspectable="0"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3727">Finishes an async preparation of the account @account.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.6, use tp_proxy_prepare_finish() instead.</doc-deprecated>
        <source-position filename="account.h" line="266"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3735">%TRUE if the preparation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3729">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3730">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reconnect_async"
              c:identifier="tp_account_reconnect_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2726">Requests an asynchronous reconnect of @account. When the operation is
finished, @callback will be called. You can then call
tp_account_reconnect_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2728">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2729">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2730">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reconnect_finish"
              c:identifier="tp_account_reconnect_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2706">Finishes an async reconnect of @account.</doc>
        <source-position filename="account.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2714">%TRUE if the reconnect call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2708">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2709">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_async"
              c:identifier="tp_account_remove_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3220">Requests an asynchronous removal of @account. When the operation is
finished, @callback will be called. You can then call
tp_account_remove_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3222">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3223">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3224">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="tp_account_remove_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3248">Finishes an async removal of @account.</doc>
        <source-position filename="account.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3256">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3250">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3251">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_presence_async"
              c:identifier="tp_account_request_presence_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2841">Requests an asynchronous change of presence on @account. When the
operation is finished, @callback will be called. You can then call
tp_account_request_presence_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2843">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2844">the requested presence</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2845">a status message to set, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2846">a message for the change, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2847">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2848">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_presence_finish"
              c:identifier="tp_account_request_presence_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2821">Finishes an async presence change request on @account.</doc>
        <source-position filename="account.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2829">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2823">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2824">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_automatic_presence_async"
              c:identifier="tp_account_set_automatic_presence_async"
              version="0.13.8">
        <doc xml:space="preserve"
             filename="account.c"
             line="2775">Requests an asynchronous change of @account's automatic presence. When the
operation is finished, @callback will be called. You can then call
tp_account_set_automatic_presence_finish() to get the result of the
operation.</doc>
        <source-position filename="account.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2777">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2778">the requested presence</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2779">a status message to set, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2780">a message for the change, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2781">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2782">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_automatic_presence_finish"
              c:identifier="tp_account_set_automatic_presence_finish"
              version="0.13.8"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2754">Finishes an asynchronous request to change the automatic presence of
@account.</doc>
        <source-position filename="account.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2763">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2756">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2757">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_avatar_async"
              c:identifier="tp_account_set_avatar_async"
              version="0.11.1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3895">Requests an asynchronous change of the Avatar parameter on @self. When
the operation is finished, @callback will be called. You can then call
tp_account_set_avatar_finish() to get the result of the operation.

If @len equals 0, the avatar is cleared.</doc>
        <source-position filename="account.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3897">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="avatar"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3898">a new avatar to set; can be %NULL
 only if @len equals 0</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3900">the length of the new avatar</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3901">the MIME type of the new avatar; can be %NULL
 only if @len equals 0</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3903">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3904">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_avatar_finish"
              c:identifier="tp_account_set_avatar_finish"
              version="0.11.1"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3875">Finishes an async avatar change request on @account.</doc>
        <source-position filename="account.h" line="278"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3883">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3877">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3878">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connect_automatically_async"
              c:identifier="tp_account_set_connect_automatically_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3304">Requests an asynchronous set of the ConnectAutomatically property of
@account. When the operation is finished, @callback will be called. You can
then call tp_account_set_display_name_finish() to get the result of the
operation.</doc>
        <source-position filename="account.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3306">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="connect_automatically" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3307">new value for the parameter</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3308">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3309">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connect_automatically_finish"
              c:identifier="tp_account_set_connect_automatically_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3342">Finishes an async set of the ConnectAutomatically property.</doc>
        <source-position filename="account.h" line="207"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3350">%TRUE if the call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3344">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3345">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name_async"
              c:identifier="tp_account_set_display_name_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3031">Requests an asynchronous set of the DisplayName property of @account. When
the operation is finished, @callback will be called. You can then call
tp_account_set_display_name_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3033">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3034">a new display name, or %NULL to unset the display name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3035">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3036">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name_finish"
              c:identifier="tp_account_set_display_name_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3074">Finishes an async set of the DisplayName property.</doc>
        <source-position filename="account.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3082">%TRUE if the call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3076">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3077">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_async"
              c:identifier="tp_account_set_enabled_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2654">Requests an asynchronous set of the Enabled property of @account. When the
operation is finished, @callback will be called. You can then call
tp_account_set_enabled_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2656">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2657">the new enabled value of @account</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2658">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2659">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_finish"
              c:identifier="tp_account_set_enabled_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2634">Finishes an async set of the Enabled property.</doc>
        <source-position filename="account.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2642">%TRUE if the set was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2636">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2637">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name_async"
              c:identifier="tp_account_set_icon_name_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3156">Requests an asynchronous set of the Icon property of @account. When
the operation is finished, @callback will be called. You can then call
tp_account_set_icon_name_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3158">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3159">a new icon name, or %NULL to unset the icon name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3160">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3161">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name_finish"
              c:identifier="tp_account_set_icon_name_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3200">Finishes an async set of the Icon parameter.</doc>
        <source-position filename="account.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3208">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3202">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3203">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nickname_async"
              c:identifier="tp_account_set_nickname_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="3510">Requests an asynchronous change of the Nickname parameter on @account. When
the operation is finished, @callback will be called. You can then call
tp_account_set_nickname_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="236"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3512">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="nickname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3513">a new nickname to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3514">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3515">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nickname_finish"
              c:identifier="tp_account_set_nickname_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3490">Finishes an async nickname change request on @account.</doc>
        <source-position filename="account.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3498">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3492">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3493">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_service_async"
              c:identifier="tp_account_set_service_async"
              version="0.11.9">
        <doc xml:space="preserve"
             filename="account.c"
             line="3094">Requests an asynchronous set of the Service property on @self. When
the operation is finished, @callback will be called. You can then call
tp_account_set_service_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3096">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3097">a new service name, or %NULL or the empty string to unset the
 service name (which will result in the #TpAccount:service property
 becoming the same as #TpAccount:protocol)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3100">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3101">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_service_finish"
              c:identifier="tp_account_set_service_finish"
              version="0.11.9"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3136">Finishes an async set of the Service parameter.</doc>
        <source-position filename="account.h" line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3144">%TRUE if the operation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3138">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3139">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri_scheme_association_async"
              c:identifier="tp_account_set_uri_scheme_association_async"
              version="0.13.8">
        <doc xml:space="preserve"
             filename="account.c"
             line="4385">Add @scheme to the list of additional URI schemes that would be returned
by tp_account_get_uri_schemes(), or remove it from that list.

@scheme should not be the primary URI scheme for the account's
protocol (for instance, "xmpp" for XMPP, or "sip" or "sips" for SIP),
since the account should be assumed to be useful for those schemes
regardless of the contents of the list.

Calling this method does not require the %TP_ACCOUNT_FEATURE_ADDRESSING
feature to be enabled, but the change will not be reflected in the result
of tp_account_get_uri_schemes() or tp_account_associated_with_uri_scheme()
unless that feature has been enabled.</doc>
        <source-position filename="account.h" line="308"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4387">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="scheme" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4388">a non-%NULL URI scheme such as "tel"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="associate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4389">%TRUE to use this account for @scheme, or %FALSE to not use it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4390">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4391">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uri_scheme_association_finish"
              c:identifier="tp_account_set_uri_scheme_association_finish"
              version="0.13.8"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="4428">Interpret the result of tp_account_set_uri_scheme_association_async().</doc>
        <source-position filename="account.h" line="311"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="4436">%TRUE if the call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4430">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="4431">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_parameters_async"
              c:identifier="tp_account_update_parameters_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2908">Requests an asynchronous update of parameters of @account. When the
operation is finished, @callback will be called. You can then call
tp_account_update_parameters_finish() to get the result of the operation.</doc>
        <source-position filename="account.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2910">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2911">new
 parameters to set on @account</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
          <parameter name="unset_parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2913">list of parameters to unset on @account</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2914">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2915">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_parameters_finish"
              c:identifier="tp_account_update_parameters_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="2942">Finishes an async update of the parameters on @account.</doc>
        <source-position filename="account.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="2952">%TRUE if the request succeeded, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2944">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2945">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="reconnect_required"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2946">a #GStrv to
 fill with properties that need a reconnect to take effect</doc>
            <array c:type="gchar***">
              <type name="utf8" c:type="gchar**"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="update_parameters_vardict_async"
              c:identifier="tp_account_update_parameters_vardict_async"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="account.c"
             line="2967">Requests an asynchronous update of parameters of @account. When the
operation is finished, @callback will be called. You can then call
tp_account_update_parameters_finish() to get the result of the operation.

If @parameters is a floating reference (see g_variant_ref_sink()),
ownership of @parameters is taken by this function. This means
you can pass the result of g_variant_new() or g_variant_new_parsed()
directly to this function without additional reference-count management.</doc>
        <source-position filename="account.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2969">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2970">a variant of type %G_VARIANT_TYPE_VARDICT
 containing new parameters to set on @account</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="unset_parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2972">list of parameters to unset on @account</doc>
            <array c:type="const gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2973">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2974">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_parameters_vardict_finish"
              c:identifier="tp_account_update_parameters_vardict_finish"
              version="0.17.6"
              throws="1">
        <doc xml:space="preserve"
             filename="account.c"
             line="3006">Finishes an async update of the parameters on @account.</doc>
        <source-position filename="account.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account.c"
               line="3016">%TRUE if the request succeeded, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3008">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3009">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="reconnect_required"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="3010">a #GStrv to
 fill with properties that need a reconnect to take effect</doc>
            <array c:type="gchar***">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="automatic-presence-type"
                version="0.13.8"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="account.c"
             line="1875">The account's automatic presence type (a #TpConnectionPresenceType).

When the account is put online automatically, for instance to make a
channel request or because network connectivity becomes available,
the automatic presence type, status and message will be copied to
their "requested" counterparts.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for automatic-presence-type,
automatic-status and automatic-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%TP_CONNECTION_PRESENCE_TYPE_UNSET.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="automatic-status"
                version="0.13.8"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1906">The string status name to use in conjunction with the
#TpAccount:automatic-presence-type.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for automatic-presence-type,
automatic-status and automatic-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="automatic-status-message"
                version="0.13.8"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1931">The user-defined message to use in conjunction with the
#TpAccount:automatic-presence-type.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for automatic-presence-type,
automatic-status and automatic-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="changing-presence"
                version="0.11.6"
                transfer-ownership="none"
                getter="get_changing_presence"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account.c"
             line="1416">%TRUE if an attempt is currently being made to change the account's
presence (#TpAccount:current-presence-type, #TpAccount:current-status
and #TpAccount:current-status-message) to match its requested presence
(#TpAccount:requested-presence-type, #TpAccount:requested-status
and #TpAccount:requested-status-message).

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cm-name"
                version="0.19.3"
                transfer-ownership="none"
                getter="get_cm_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1628">The account's connection manager name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connect-automatically"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_connect_automatically"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account.c"
             line="1709">Whether the account should connect automatically or not. To change this
property, use tp_account_set_connect_automatically_async().

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="connection"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_connection">
        <doc xml:space="preserve"
             filename="account.c"
             line="1548">The connection of the account, or %NULL if account is offline.
Note that the returned #TpConnection is not guaranteed to have any
features pre-prepared (not even %TP_CONNECTION_FEATURE_CORE) unless
%TP_ACCOUNT_FEATURE_CONNECTION has been prepared on the account

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. If %TP_ACCOUNT_FEATURE_CONNECTION has been prepared, this signal
will be delayed until the connection is ready.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="Connection"/>
      </property>
      <property name="connection-error"
                version="0.11.7"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1492">The D-Bus error name for the last disconnection or connection failure,
(in particular, %TP_ERROR_STR_CANCELLED if it was disconnected by user
request), or %NULL if the account is connected.

One can receive change notifications on this property by connecting
to the #TpAccount::status-changed signal, or by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connection-error-details"
                version="0.11.7"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account.c"
             line="1517">A map from string to #GValue containing extensible error details
related to #TpAccount:connection-error. Functions like tp_asv_get_string()
can be used to read from this map.

The keys for this map are defined by
&lt;ulink url="http://telepathy.freedesktop.org/spec/"&gt;the Telepathy D-Bus
Interface Specification&lt;/ulink&gt;. They will typically include
&lt;literal&gt;debug-message&lt;/literal&gt;, which is a debugging message in the C
locale, analogous to #GError&lt;!-- --&gt;.message.

One can receive change notifications on this property by connecting
to the #TpAccount::status-changed signal, or by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
an empty map.</doc>
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="connection-manager"
                version="0.9.0"
                deprecated="1"
                transfer-ownership="none"
                getter="get_connection_manager"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1596">The account's connection manager name.</doc>
        <doc-deprecated xml:space="preserve">Use #TpAccount:cm-name instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connection-status"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_connection_status"
                default-value="2">
        <doc xml:space="preserve"
             filename="account.c"
             line="1442">The account's connection status type (a %TpConnectionStatus).

One can receive change notifications on this property by connecting
to the #TpAccount::status-changed signal, or by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%TP_CONNECTION_STATUS_DISCONNECTED.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="connection-status-reason"
                version="0.9.0"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="account.c"
             line="1467">The account's connection status reason (a %TpConnectionStatusReason).

One can receive change notifications on this property by connecting
to the #TpAccount::status-changed signal, or by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-presence-type"
                version="0.9.0"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="account.c"
             line="1341">The account connection's current presence type
(a %TpConnectionPresenceType).

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for current-presence-type,
current-status and current-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%TP_CONNECTION_PRESENCE_TYPE_UNSET.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-status"
                version="0.9.0"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1368">The current Status string of the account.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for current-presence-type,
current-status and current-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="current-status-message"
                version="0.9.0"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1392">The current status message message of the account.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for current-presence-type,
current-status and current-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-name"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_display_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1574">The account's display name, from the DisplayName property.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                version="0.9.0"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account.c"
             line="1320">Whether this account is enabled or not.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-been-online"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_has_been_online"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account.c"
             line="1732">Whether this account has been online or not.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1686">The account's icon name. To change this propery, use
tp_account_set_icon_name_async().

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nickname"
                version="0.9.0"
                transfer-ownership="none"
                getter="get_nickname"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1853">The nickname that should be set for the user on this account.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="normalized-name"
                version="0.13.8"
                transfer-ownership="none"
                getter="get_normalized_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1956">The normalized form of the user's own unique identifier on this
protocol. For example, on XMPP accounts this is the user's JID; on
ICQ this is the user's UIN; and so on.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol"
                version="0.9.0"
                deprecated="1"
                transfer-ownership="none"
                getter="get_protocol"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1611">The account's machine-readable protocol name, such as "jabber", "msn" or
"local-xmpp". Recommended names for most protocols can be found in the
Telepathy D-Bus Interface Specification.</doc>
        <doc-deprecated xml:space="preserve">Use #TpAccount:protocol-name instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol-name"
                version="0.19.3"
                transfer-ownership="none"
                getter="get_protocol_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1642">The account's machine-readable protocol name, such as "jabber", "msn" or
"local-xmpp". Recommended names for most protocols can be found in the
Telepathy D-Bus Interface Specification.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="requested-presence-type"
                version="0.9.0"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="account.c"
             line="1776">The account's requested presence type (a #TpConnectionPresenceType).

Since 0.13.8,
one can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for requested-presence-type,
requested-status and requested-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="requested-status"
                version="0.9.0"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1803">The requested Status string of the account.

Since 0.13.8,
one can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for requested-presence-type,
requested-status and requested-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="requested-status-message"
                version="0.9.0"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1828">The requested status message message of the account.

Since 0.13.8,
one can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail. Change notifications for requested-presence-type,
requested-status and requested-status-message are always emitted together,
so it is sufficient to connect to one of the notification signals.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service"
                version="0.11.9"
                transfer-ownership="none"
                getter="get_service"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1658">A machine-readable name identifying a specific service to which this
account connects, or a copy of #TpAccount:protocol if there is no more
specific service.

Well-known names for various services can be found in the Telepathy D-Bus
Interface Specification.

For instance, accounts for the "jabber" protocol should have the service
names "google-talk", "ovi-chat", "facebook" and "lj-talk" for accounts
that connect to Google Talk, Ovi Chat, Facebook and Livejournal,
respectively, and this property will be "jabber" for accounts that
connect to a generic Jabber server.

To change this property, use
tp_account_set_service_async().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="storage-identifier"
                version="0.13.2"
                transfer-ownership="none"
                getter="get_storage_identifier">
        <doc xml:space="preserve"
             filename="account.c"
             line="2003">The storage identifier for this account.

A provider-specific variant type used to identify this account with the
provider. This value will be %NULL if #TpAccount:storage-provider is
an empty string.

This property cannot change once an Account has been created.

This is not guaranteed to have been retrieved until the
%TP_ACCOUNT_FEATURE_STORAGE feature has been prepared; until then,
the value is %NULL.</doc>
        <type name="GObject.Value"/>
      </property>
      <property name="storage-identifier-variant"
                version="0.13.2"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account.c"
             line="2027">Provider-specific information used to identify this
account. Use g_variant_get_type() to check that the type
is what you expect. For instance, if you use a
#TpAccount:storage-provider with numeric identifiers for accounts,
this variant might have type %G_VARIANT_TYPE_UINT32;
if the storage provider has string-based identifiers, it should
have type %G_VARIANT_TYPE_STRING.

This property cannot change once an Account has been created.

This is not guaranteed to have been retrieved until the
%TP_ACCOUNT_FEATURE_STORAGE feature has been prepared; until then,
the value is %NULL.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="storage-provider"
                version="0.13.2"
                transfer-ownership="none"
                getter="get_storage_provider"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account.c"
             line="1980">The storage provider for this account.

The name of the account storage implementation. When this
is the empty string the account is internally stored.

This property cannot change once an Account has been created.

This is not guaranteed to have been retrieved until the
%TP_ACCOUNT_FEATURE_STORAGE feature has been prepared; until then,
the value is %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="storage-restrictions"
                version="0.13.2"
                transfer-ownership="none"
                getter="get_storage_restrictions"
                default-value="0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2055">The storage restrictions for this account.

A bitfield of #TpStorageRestrictionFlags that give the limitations of
this account imposed by the storage provider. This value will be 0
if #TpAccount:storage-provider is an empty string.

This property cannot change once an Account has been created.

This is not guaranteed to have been retrieved until the
%TP_ACCOUNT_FEATURE_STORAGE feature has been prepared; until then,
the value is 0.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="supersedes"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_supersedes">
        <doc xml:space="preserve"
             filename="account.c"
             line="2079">The object paths of previously-active accounts superseded by this one.
For instance, this can be used in a logger to read old logs for an
account that has been migrated from one connection manager to another.

This is not guaranteed to have been retrieved until the
%TP_ACCOUNT_FEATURE_CORE feature has been prepared; until then,
the value is NULL.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="uri-schemes"
                version="0.21.0"
                transfer-ownership="none"
                getter="get_uri_schemes">
        <doc xml:space="preserve"
             filename="account.c"
             line="2099">If the %TP_ACCOUNT_FEATURE_ADDRESSING feature has been prepared
successfully, a list of additional URI schemes for which this
account should be used if possible. Otherwise %NULL.

For instance, a SIP or Skype account might have "tel" in this list if the
user would like to use that account to call phone numbers.

This list should not contain the primary URI scheme(s) for the account's
protocol (for instance, "xmpp" for XMPP, or "sip" or "sips" for SIP),
since it should be assumed to be useful for those schemes in any case.

The notify::uri-schemes signal cannot be relied on if the Account Manager
is Mission Control version 5.14.0 or older.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="valid"
                version="0.9.0"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account.c"
             line="1754">Whether this account is valid.

One can receive change notifications on this property by connecting
to the #GObject::notify signal and using this property as the signal
detail.

This is not guaranteed to have been retrieved until
tp_proxy_prepare_async() has finished; until then, the value is
%FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AccountPrivate" c:type="TpAccountPrivate*"/>
      </field>
      <glib:signal name="avatar-changed" when="last" version="0.23.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2167">Emitted when the avatar changes. Call tp_account_get_avatar_async()
to get the new avatar data.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="presence-changed" when="last" version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2150">Emitted when the presence of the account changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="presence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2153">the new presence</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2154">the new presence status</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="status_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2155">the new presence status message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="status-changed" when="last" version="0.9.0">
        <doc xml:space="preserve"
             filename="account.c"
             line="2125">Emitted when the connection status on the account changes.

The @dbus_error_name and @details parameters were present, but
non-functional (always %NULL), in older versions. They have been
available with their current behaviour since version 0.11.7.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2128">old #TpAccount:connection-status</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="new_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2129">new #TpAccount:connection-status</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2130">the #TpAccount:connection-status-reason</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="dbus_error_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2131">the #TpAccount:connection-error</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account.c"
                 line="2132">the
 #TpAccount:connection-error-details</doc>
            <type name="GLib.HashTable">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="AccountChannelRequest"
           c:symbol-prefix="account_channel_request"
           c:type="TpAccountChannelRequest"
           version="0.11.12"
           parent="GObject.Object"
           glib:type-name="TpAccountChannelRequest"
           glib:get-type="tp_account_channel_request_get_type"
           glib:type-struct="AccountChannelRequestClass">
      <doc xml:space="preserve"
           filename="account-channel-request.c"
           line="45">Data structure representing a #TpAccountChannelRequest object.</doc>
      <source-position filename="account-channel-request.h" line="43"/>
      <constructor name="new"
                   c:identifier="tp_account_channel_request_new"
                   version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="522">Convenience function to create a new #TpAccountChannelRequest object.</doc>
        <source-position filename="account-channel-request.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="534">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="524">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="525">the requested
 properties of the channel (see #TpAccountChannelRequest:request)</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="527">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_audio_call"
                   c:identifier="tp_account_channel_request_new_audio_call"
                   version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2053">Convenience function to create a new #TpAccountChannelRequest object
which will yield a Call channel, initially carrying audio only.

After creating the request, you will usually also need to set the "target"
of the channel by calling one of the following functions:

- tp_account_channel_request_set_target_contact()
- tp_account_channel_request_set_target_id()

To call a contact, either use
tp_account_channel_request_set_target_contact() or one of the generic
methods that takes a handle type argument. To check whether this
is possible, use tp_capabilities_supports_audio_call() with
@handle_type set to %TP_HANDLE_TYPE_CONTACT.

&lt;!-- reinstate this when we have CMs that actually allow it:
In some protocols it is possible to create a conference call which
takes place in a named chatroom, by calling
tp_account_channel_request_set_target_id() with @handle_type
set to %TP_HANDLE_TYPE_ROOM. To test whether this is possible, use
tp_capabilities_supports_audio_call() with @handle_type set to
%TP_HANDLE_TYPE_ROOM.
--&gt;

In some protocols, it is possible to create a Call channel without
setting a target at all, which will result in a new, empty
conference call. To test whether this is possible, use
tp_capabilities_supports_audio_call() with @handle_type set to
%TP_HANDLE_TYPE_NONE.</doc>
        <source-position filename="account-channel-request.h" line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="2091">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2055">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2056">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_audio_video_call"
                   c:identifier="tp_account_channel_request_new_audio_video_call"
                   version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2119">Convenience function to create a new #TpAccountChannelRequest object
which will yield a Call channel, initially carrying both audio
and video.

This is the same as tp_account_channel_request_new_audio_call(),
except that the channel will initially carry video as well as audio,
and instead of using tp_capabilities_supports_audio_call()
you should test capabilities with
tp_capabilities_supports_audio_video_call().

See the documentation of tp_account_channel_request_new_audio_call()
for details of how to set the target (contact, chatroom etc.) for the call.</doc>
        <source-position filename="account-channel-request.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="2140">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2121">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2122">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_dbus_tube"
                   c:identifier="tp_account_channel_request_new_dbus_tube"
                   version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2476">Convenience function to create a new #TpAccountChannelRequest object,
which will yield a DBusTube channel.

After creating the request, you will also need to set the "target"
of the channel by calling one of the following functions:

- tp_account_channel_request_set_target_contact()
- tp_account_channel_request_set_target_id()</doc>
        <source-position filename="account-channel-request.h" line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="2494">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2478">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2479">the service name that will be used over the tube. It should be</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2480">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_file_transfer"
                   c:identifier="tp_account_channel_request_new_file_transfer"
                   version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2169">Convenience function to create a new #TpAccountChannelRequest object,
which will yield a FileTransfer channel to send a file to a contact.

After creating the request, you will also need to set the "target"
of the channel by calling one of the following functions:

- tp_account_channel_request_set_target_contact()
- tp_account_channel_request_set_target_id()</doc>
        <source-position filename="account-channel-request.h" line="135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="2193">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2171">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2172">a suggested name for the file, which should not contain
 directories or directory separators (for example, if you are sending
a file called /home/user/monkey.pdf, set this to monkey.pdf)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2175">the MIME type (content-type) of the file;
 a %NULL value is allowed, and is treated as
 "application/octet-stream"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2178">the file's size in bytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2179">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_stream_tube"
                   c:identifier="tp_account_channel_request_new_stream_tube"
                   version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2424">Convenience function to create a new #TpAccountChannelRequest object,
which will yield a StreamTube channel.

After creating the request, you will also need to set the "target"
of the channel by calling one of the following functions:

- tp_account_channel_request_set_target_contact()
- tp_account_channel_request_set_target_id()</doc>
        <source-position filename="account-channel-request.h" line="168"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="2445">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2426">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2427">the service name that will be used over the tube. It should be a
well-known TCP service name as defined by
http://www.iana.org/assignments/port-numbers or
http://www.dns-sd.org/ServiceTypes.html, for instance "rsync" or "daap".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2431">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_text"
                   c:identifier="tp_account_channel_request_new_text"
                   version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1956">Convenience function to create a new #TpAccountChannelRequest object
which will yield a Text channel.

After creating the request, you will also need to set the "target"
of the channel by calling one of the following functions:

- tp_account_channel_request_set_target_contact()
- tp_account_channel_request_set_target_id()</doc>
        <source-position filename="account-channel-request.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1973">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1958">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1959">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_vardict"
                   c:identifier="tp_account_channel_request_new_vardict"
                   version="0.19.10">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="554">Convenience function to create a new #TpAccountChannelRequest object.

If @request is a floating reference, this function will
take ownership of it, much like g_variant_ref_sink(). See documentation of
that function for details.</doc>
        <source-position filename="account-channel-request.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="571">a new #TpAccountChannelRequest object</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="556">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="557">the requested
 properties of the channel (see #TpAccountChannelRequest:request)
 as a %G_VARIANT_TYPE_VARDICT</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="560">the time of the user action that caused this request,
 or one of the special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME (see
 #TpAccountChannelRequest:user-action-time)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="create_and_handle_channel_async"
              c:identifier="tp_account_channel_request_create_and_handle_channel_async"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1166">Asynchronously calls CreateChannel on the ChannelDispatcher to create a
channel with the properties defined in #TpAccountChannelRequest:request
that you are going to handle yourself.
When the operation is finished, @callback will be called. You can then call
tp_account_channel_request_create_and_handle_channel_finish() to get the
result of the operation.

(Behind the scenes, this works by creating a temporary #TpBaseClient, then
acting like tp_account_channel_request_create_channel_async() with the
temporary #TpBaseClient as the @preferred_handler.)

The caller is responsible for closing the channel with
tp_cli_channel_call_close() when it has finished handling it.</doc>
        <source-position filename="account-channel-request.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1168">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1169">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1170">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1171">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_and_handle_channel_finish"
              c:identifier="tp_account_channel_request_create_and_handle_channel_finish"
              version="0.11.12"
              throws="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1200">Finishes an async channel creation started using
tp_account_channel_request_create_and_handle_channel_async().

See tp_account_channel_request_ensure_and_handle_channel_finish()
for details of how @context can be used.

The caller is responsible for closing the channel with
tp_cli_channel_call_close() when it has finished handling it.</doc>
        <source-position filename="account-channel-request.h" line="223"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1217">a new reference on a #TpChannel if the
channel was successfully created and you are handling it, otherwise %NULL.</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1202">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1203">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="context"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1204">pointer used to return a
 reference to the context of the HandleChannels() call, or %NULL</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext**"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_and_observe_channel_async"
              c:identifier="tp_account_channel_request_create_and_observe_channel_async"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1613">Asynchronously calls CreateChannel on the ChannelDispatcher to create a
channel with the properties defined in #TpAccountChannelRequest:request
and let the ChannelDispatcher dispatch it to an handler.
@callback will be called when the channel has been created and dispatched,
or the request has failed.
You can then call tp_account_channel_request_create_channel_finish() to
get the result of the operation and a #TpChannel representing the channel
which has been created. Note that you are &lt;emphasis&gt;not&lt;/emphasis&gt; handling
this channel and so should interact with the channel as an Observer.
See &lt;ulink url="http://telepathy.freedesktop.org/doc/book/sect.channel-dispatcher.clients.html"&gt;
the Telepathy book&lt;/ulink&gt; for details about how clients should interact
with channels.</doc>
        <source-position filename="account-channel-request.h" line="281"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1615">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="preferred_handler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1616">Either the well-known bus name (starting with
%TP_CLIENT_BUS_NAME_BASE) of the preferred handler for the channel,
or %NULL to indicate that any handler would be acceptable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1619">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1620">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1621">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_and_observe_channel_finish"
              c:identifier="tp_account_channel_request_create_and_observe_channel_finish"
              version="0.13.14"
              throws="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1650">Finishes an async channel creation started using
tp_account_channel_request_create_and_observe_channel_async().</doc>
        <source-position filename="account-channel-request.h" line="288"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1659">a newly created #TpChannel if the channel was
successfully created and dispatched, otherwise %NULL.</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1652">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1653">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_channel_async"
              c:identifier="tp_account_channel_request_create_channel_async"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1381">Asynchronously calls CreateChannel on the ChannelDispatcher to create a
channel with the properties defined in #TpAccountChannelRequest:request
and let the ChannelDispatcher dispatch it to an handler.
@callback will be called when the channel has been created and dispatched,
or the request has failed.
You can then call tp_account_channel_request_create_channel_finish() to
get the result of the operation.</doc>
        <source-position filename="account-channel-request.h" line="255"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1383">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="preferred_handler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1384">Either the well-known bus name (starting with
%TP_CLIENT_BUS_NAME_BASE) of the preferred handler for the channel,
or %NULL to indicate that any handler would be acceptable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1387">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1388">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1389">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_channel_finish"
              c:identifier="tp_account_channel_request_create_channel_finish"
              version="0.11.12"
              throws="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1422">Finishes an async channel creation started using
tp_account_channel_request_create_channel_async().</doc>
        <source-position filename="account-channel-request.h" line="262"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1431">%TRUE if the channel was successfully created and dispatched,
otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1424">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1425">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_request"
              c:identifier="tp_account_channel_request_dup_request"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="633">Return the #TpAccountChannelRequest:request-vardict construct-only
property.</doc>
        <source-position filename="account-channel-request.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="640">the value of
 #TpAccountChannelRequest:request-vardict</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="635">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ensure_and_handle_channel_async"
              c:identifier="tp_account_channel_request_ensure_and_handle_channel_async"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1233">Asynchronously calls EnsureChannel on the ChannelDispatcher to create a
channel with the properties defined in #TpAccountChannelRequest:request
that you are going to handle yourself.
When the operation is finished, @callback will be called. You can then call
tp_account_channel_request_ensure_and_handle_channel_finish() to get the
result of the operation.

If the channel already exists and is already being handled, or if a
newly created channel is sent to a different handler, this operation
will fail with the error %TP_ERROR_NOT_YOURS. The other handler
will be notified that the channel was requested again (for instance
with #TpAccountChannelRequest::re-handled,
#TpBaseClientClassHandleChannelsImpl or #TpSimpleHandler:callback),
and can move its window to the foreground, if applicable.

(Behind the scenes, this works by creating a temporary #TpBaseClient, then
acting like tp_account_channel_request_ensure_channel_async() with the
temporary #TpBaseClient as the @preferred_handler.)</doc>
        <source-position filename="account-channel-request.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1235">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1236">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1237">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1238">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_and_handle_channel_finish"
              c:identifier="tp_account_channel_request_ensure_and_handle_channel_finish"
              version="0.11.12"
              throws="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1272">Finishes an async channel creation started using
tp_account_channel_request_ensure_and_handle_channel_async().

If the channel already exists and is already being handled, or if a
newly created channel is sent to a different handler, this operation
will fail with the error %TP_ERROR_NOT_YOURS.

@context can be used to obtain extensible information about the channel
via tp_handle_channels_context_get_handler_info(), and any similar methods
that are added in future. It is not valid for the caller of this method
to call tp_handle_channels_context_accept(),
tp_handle_channels_context_delay() or tp_handle_channels_context_fail().</doc>
        <source-position filename="account-channel-request.h" line="235"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1293">a new reference on a #TpChannel if the
channel was successfully created and you are handling it, otherwise %NULL.</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1274">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1275">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="context"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1276">pointer used to return a
 reference to the context of the HandleChannels() call, or %NULL</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext**"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_and_observe_channel_async"
              c:identifier="tp_account_channel_request_ensure_and_observe_channel_async"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1675">Asynchronously calls EnsureChannel on the ChannelDispatcher to create a
channel with the properties defined in #TpAccountChannelRequest:request
and let the ChannelDispatcher dispatch it to an handler.
@callback will be called when the channel has been created and dispatched,
or the request has failed.
You can then call tp_account_channel_request_create_channel_finish() to
get the result of the operation and a #TpChannel representing the channel
which has been created. Note that you are &lt;emphasis&gt;not&lt;/emphasis&gt; handling
this channel and so should interact with the channel as an Observer.
See &lt;ulink url="http://telepathy.freedesktop.org/doc/book/sect.channel-dispatcher.clients.html"&gt;
the Telepathy book&lt;/ulink&gt; for details about how clients should interact
with channels.

If a suitable channel already existed, its handler will be notified that
the channel was requested again (for instance with
#TpAccountChannelRequest::re-handled, #TpBaseClientClassHandleChannelsImpl
or #TpSimpleHandler:callback, if it is implemented using Telepathy-GLib),
so that it can re-present the window to the user, for example.
Otherwise, a new channel will be created and dispatched to a handler.</doc>
        <source-position filename="account-channel-request.h" line="293"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1677">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="preferred_handler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1678">Either the well-known bus name (starting with
%TP_CLIENT_BUS_NAME_BASE) of the preferred handler for the channel,
or %NULL to indicate that any handler would be acceptable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1681">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1682">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1683">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_and_observe_channel_finish"
              c:identifier="tp_account_channel_request_ensure_and_observe_channel_finish"
              version="0.13.14"
              throws="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1719">Finishes an async channel creation started using
tp_account_channel_request_create_and_observe_channel_async().</doc>
        <source-position filename="account-channel-request.h" line="300"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1728">a newly created #TpChannel if the channel was
successfully ensure and (re-)dispatched, otherwise %NULL.</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1721">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1722">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_channel_async"
              c:identifier="tp_account_channel_request_ensure_channel_async"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1446">Asynchronously calls EnsureChannel on the ChannelDispatcher to create a
channel with the properties defined in #TpAccountChannelRequest:request
and let the ChannelDispatcher dispatch it to an handler.

If a suitable channel already existed, its handler will be notified that
the channel was requested again (for instance with
#TpAccountChannelRequest::re-handled, #TpBaseClientClassHandleChannelsImpl
or #TpSimpleHandler:callback, if it is implemented using Telepathy-GLib),
so that it can re-present the window to the user, for example.
Otherwise, a new channel will be created and dispatched to a handler.

@callback will be called when an existing channel's handler has been
notified, a new channel has been created and dispatched, or the request
has failed.
You can then call tp_account_channel_request_ensure_channel_finish() to
get the result of the operation.</doc>
        <source-position filename="account-channel-request.h" line="267"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1448">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="preferred_handler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1449">Either the well-known bus name (starting with
%TP_CLIENT_BUS_NAME_BASE) of the preferred handler for the channel,
or %NULL to indicate that any handler would be acceptable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1452">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1453">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1454">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_channel_finish"
              c:identifier="tp_account_channel_request_ensure_channel_finish"
              version="0.11.12"
              throws="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1487">Finishes an async channel creation started using
tp_account_channel_request_ensure_channel_async().</doc>
        <source-position filename="account-channel-request.h" line="274"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1496">%TRUE if the channel was successfully ensured and (re-)dispatched,
otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1489">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1490">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="tp_account_channel_request_get_account"
              glib:get-property="account"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="599">Return the #TpAccountChannelRequest:account construct-only property</doc>
        <source-position filename="account-channel-request.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="605">the value of #TpAccountChannelRequest:account</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="601">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel_request"
              c:identifier="tp_account_channel_request_get_channel_request"
              glib:get-property="channel-request"
              version="0.13.13">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1547">Return the #TpAccountChannelRequest:channel-request property</doc>
        <source-position filename="account-channel-request.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="1553">the value of
#TpAccountChannelRequest:channel-request</doc>
          <type name="ChannelRequest" c:type="TpChannelRequest*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1549">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_request"
              c:identifier="tp_account_channel_request_get_request"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="616">Return the #TpAccountChannelRequest:request construct-only property</doc>
        <source-position filename="account-channel-request.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="622">the value of #TpAccountChannelRequest:request</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="618">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_action_time"
              c:identifier="tp_account_channel_request_get_user_action_time"
              glib:get-property="user-action-time"
              version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="654">Return the #TpAccountChannelRequest:user-action-time construct-only property</doc>
        <source-position filename="account-channel-request.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="660">the value of #TpAccountChannelRequest:user-action-time</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="656">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_channel_factory"
              c:identifier="tp_account_channel_request_set_channel_factory"
              version="0.13.2"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1511">Set @factory as the #TpClientChannelFactory that will be used to
create the channel requested by @self.
By default #TpAutomaticProxyFactory is used.

This function can't be called once @self has been used to request a
channel.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.5. The factory is taken from
 #TpAccountChannelRequest:account.</doc-deprecated>
        <source-position filename="account-channel-request.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1513">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1514">a #TpClientChannelFactory</doc>
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_conference_initial_channels"
              c:identifier="tp_account_channel_request_set_conference_initial_channels"
              version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2550">Indicate that the channel which is going to be requested using @self
is an upgrade of the channels whose object paths is listed in @channels.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2552">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2553">a #NULL-terminated array of channel paths</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delegate_to_preferred_handler"
              c:identifier="tp_account_channel_request_set_delegate_to_preferred_handler"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1807">If @delegate is %TRUE, asks to the client currently handling the channels to
delegate them to the preferred handler (passed when calling
tp_account_channel_request_ensure_channel_async() for example).

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1809">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="delegate" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1810">%TRUE to request to delegate channels</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delegated_channel_callback"
              c:identifier="tp_account_channel_request_set_delegated_channel_callback"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1836">Turn on support for
the org.freedesktop.Telepathy.ChannelRequest.DelegateToPreferredHandler
hint.

When receiving a request containing this hint, @self will automatically
delegate the channel to the preferred handler of the request and then call
@callback to inform the client that it is no longer handling this channel.

@callback may be called any time after (and only after) requesting and
handling the channel (i.e. you have called create_and_handle or
ensure_and_handle).

This function can't be called once @self has been used to request a
channel.

See also: tp_base_client_set_delegated_channels_callback()</doc>
        <source-position filename="account-channel-request.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1838">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1839">function called the channel requested using @self is
delegated, may not be %NULL</doc>
            <type name="AccountChannelRequestDelegatedChannelCb"
                  c:type="TpAccountChannelRequestDelegatedChannelCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1841">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1842">called with the @user_data as argument, when @self is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file_transfer_description"
              c:identifier="tp_account_channel_request_set_file_transfer_description"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2232">Configure this channel request to provide the recipient of the file
with the given description.

If file descriptions are not supported by the protocol, or if this
method is used on a request that is not actually a file transfer, the
channel request will fail. Use
tp_capabilities_supports_file_transfer_description() to determine
whether outgoing file transfers can have a description.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2234">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2235">a description of the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file_transfer_hash"
              c:identifier="tp_account_channel_request_set_file_transfer_hash"
              version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2391">Configure this channel request to accompany the file transfer with
the hash of the file.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2393">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="hash_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2394">a type of @hash</doc>
            <type name="FileHashType" c:type="TpFileHashType"/>
          </parameter>
          <parameter name="hash" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2395">hash of the contents of the file transfer</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file_transfer_initial_offset"
              c:identifier="tp_account_channel_request_set_file_transfer_initial_offset"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2347">Configure this channel request to inform the recipient of the file
that this channel will not send the first @offset bytes of the file.
In some protocols, this can be used to resume an interrupted transfer.

If this method is not called, the default is to start from the
beginning of the file (equivalent to @offset = 0).

If offsets greater than 0 are not supported by the protocol, or if this
method is used on a request that is not actually a file transfer, the
channel request will fail. Use
tp_capabilities_supports_file_transfer_initial_offset() to determine
whether offsets greater than 0 are available.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2349">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2350">the offset into the file at which the transfer will start</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file_transfer_timestamp"
              c:identifier="tp_account_channel_request_set_file_transfer_timestamp"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2313">Configure this channel request to accompany the file transfer with
the given modification timestamp for the file.

If file timestamps are not supported by the protocol, or if this
method is used on a request that is not actually a file transfer, the
channel request will fail. Use
tp_capabilities_supports_file_transfer_date() to determine
whether outgoing file transfers can have a timestamp.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2315">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="timestamp" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2316">the modification timestamp of the file, in seconds since the
 Unix epoch (the beginning of 1970 in the UTC time zone), as returned
 by g_date_time_to_unix()</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_file_transfer_uri"
              c:identifier="tp_account_channel_request_set_file_transfer_uri"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2265">Configure this channel request to provide other local Telepathy
components with the URI of the file being sent. Unlike most
properties on a file transfer channel, this information is not
sent to the recipient of the file; instead, it is signalled on
D-Bus for use by other Telepathy components.

The URI should usually be a &lt;code&gt;file&lt;/code&gt; URI as defined by
&lt;ulink url="http://www.apps.ietf.org/rfc/rfc1738.html#sec-3.10"&gt;RFC 1738
§3.10&lt;/ulink&gt; (for instance, &lt;code&gt;file:///path/to/file&lt;/code&gt; or
&lt;code&gt;file://localhost/path/to/file&lt;/code&gt;). If a remote resource
is being transferred to a contact, it may have a different scheme,
such as &lt;code&gt;http&lt;/code&gt;.

Even if this method is used, the connection manager will not read
the file from disk: the handler for the channel is still
responsible for streaming the file. However, providing the URI
allows a local logger to log which file was transferred, for instance.

If this functionality is not supported by the connection manager, or
if this method is used on a request that is not actually a file transfer,
the channel request will fail. Use
tp_capabilities_supports_file_transfer_uri() to determine
whether outgoing file transfers can have a URI.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2267">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2268">the source URI for the file</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hint"
              c:identifier="tp_account_channel_request_set_hint"
              version="0.19.8">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1744">Set additional information about the channel request, which will be used
in the resulting request's #TpChannelRequest:hints property.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1746">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1747">the key used for the hint</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1748">a variant containting the hint value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_hints"
              c:identifier="tp_account_channel_request_set_hints"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1780">Set additional information about the channel request, which will be used
as the value for the resulting request's #TpChannelRequest:hints property.

This function can't be called once @self has been used to request a
channel.

In high-level language bindings, use tp_account_channel_request_set_hint()
instead.</doc>
        <source-position filename="account-channel-request.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1782">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="hints" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1783">a #TP_HASH_TYPE_STRING_VARIANT_MAP</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_invitee_ids"
              c:identifier="tp_account_channel_request_set_initial_invitee_ids"
              version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2585">Indicate that the contacts listed in @ids have to be invited to the
conference represented by the channel which is going to be requested
using @self.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2587">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2588">a #NULL-terminated array of contact ids</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_initial_invitees"
              c:identifier="tp_account_channel_request_set_initial_invitees"
              version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2612">Indicate that the contacts listed in @contacts have to be invited to the
conference represented by the channel which is going to be requested
using @self.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2614">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2615">a #GPtrArray of #TpContact</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray*">
              <type name="Contact"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_request_property"
              c:identifier="tp_account_channel_request_set_request_property"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2000">Configure this channel request to include the given property, as
documented in the Telepathy D-Bus API Specification or an
implementation-specific extension.

Using this method is not recommended, but it can be necessary for
experimental or implementation-specific interfaces.

If the property is not supported by the protocol or channel type, the
channel request will fail. Use #TpCapabilities and the Telepathy
D-Bus API Specification to determine which properties are available.

If @value is a floating reference, this method takes ownership of it
by using g_variant_ref_sink(). This allows convenient inline use of
#GVariant constructors:

|[
tp_account_channel_request_set_request_property (acr, "com.example.Int",
    g_variant_new_int32 (17));
tp_account_channel_request_set_request_property (acr, "com.example.String",
    g_variant_new_string ("ferret"));
]|

It is an error to provide a @value which contains types not supported by
D-Bus.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2002">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2003">a D-Bus property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2004">an arbitrary value for the property</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sms_channel"
              c:identifier="tp_account_channel_request_set_sms_channel"
              version="0.23.2">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="2525">If @is_sms_channel is set to #TRUE, messages sent and received on the
requested channel will be transmitted via SMS.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2527">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="is_sms_channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="2528">#TRUE if the channel should use SMS</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_contact"
              c:identifier="tp_account_channel_request_set_target_contact"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1888">Configure this request to create a peer-to-peer channel with @contact as
the other peer.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1890">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1891">the contact to be contacted</doc>
            <type name="Contact" c:type="TpContact*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target_id"
              c:identifier="tp_account_channel_request_set_target_id"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="1920">Configure this request to create a channel with @identifier,
an identifier of type @handle_type.

This function can't be called once @self has been used to request a
channel.</doc>
        <source-position filename="account-channel-request.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1922">a #TpAccountChannelRequest</doc>
            <type name="AccountChannelRequest"
                  c:type="TpAccountChannelRequest*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1923">the type of @identifier, typically %TP_HANDLE_TYPE_CONTACT
 or %TP_HANDLE_TYPE_ROOM</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="1925">the unique identifier of the contact, room etc. to be
 contacted</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.11.12"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_account">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="367">The #TpAccount used to request the channel.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Account"/>
      </property>
      <property name="channel-request"
                transfer-ownership="none"
                getter="get_channel_request">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="459">The #TpChannelRequest used to request the channel, or %NULL if the
channel has not be requested yet.

This can be useful for example to compare with the #TpChannelRequest
objects received from the requests_satisfied argument of
#TpSimpleHandlerHandleChannelsImpl to check if the client is asked to
handle the channel it just requested.

Note that the #TpChannelRequest objects may be different while still
representing the same ChannelRequest on D-Bus. You have to compare
them using their object paths (tp_proxy_get_object_path()).

Since 0.13.13</doc>
        <type name="ChannelRequest"/>
      </property>
      <property name="request"
                version="0.11.12"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="384">The desired D-Bus properties for the channel, represented as a
#GHashTable where the keys are strings and the values are #GValue.

When constructing a new object, one of
#TpAccountChannelRequest:request or
#TpAccountChannelRequest:request-vardict must be set to a non-%NULL
value, and the other must remain unspecified.</doc>
        <type/>
      </property>
      <property name="request-vardict"
                version="0.19.10"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="404">The desired D-Bus properties for the channel.

When constructing a new object, one of
#TpAccountChannelRequest:request or
#TpAccountChannelRequest:request-vardict must be set to a non-%NULL
value, and the other must remain unspecified.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="user-action-time"
                version="0.11.12"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_user_action_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="423">The user action time that will be passed to the channel dispatcher when
requesting the channel.

This may be the time at which user action occurred, or one of the special
values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
%TP_USER_ACTION_TIME_CURRENT_TIME.

If %TP_USER_ACTION_TIME_NOT_USER_ACTION, the action doesn't involve any
user action. Clients should avoid stealing focus when presenting the
channel.

If %TP_USER_ACTION_TIME_CURRENT_TIME, clients SHOULD behave as though the
user action happened at the current time, e.g. a client may
request that its window gains focus.

On X11-based systems, GDK 2, GDK 3, Clutter 1.0 etc.,
tp_user_action_time_from_x11() can be used to convert an X11 timestamp to
a Telepathy user action time.

If the channel request succeeds, this user action time will be passed on
to the channel's handler. If the handler is a GUI, it may use
tp_user_action_time_should_present() to decide whether to bring its
window to the foreground.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <glib:signal name="re-handled"
                   when="last"
                   detailed="1"
                   version="0.11.12">
        <doc xml:space="preserve"
             filename="account-channel-request.c"
             line="483">Emitted when the channel created using @self has been "re-handled".

This means that a Telepathy client has made another request for a
matching channel using an "ensure" API like
tp_account_channel_request_ensure_channel_async(), while the channel
still exists. Instead of creating a new channel, the channel dispatcher
notifies the existing handler of @channel, resulting in this signal.

Most GUI handlers should respond to this signal by checking
@user_action_time, and if appropriate, moving to the foreground.

@context can be used to obtain extensible information about the channel
via tp_handle_channels_context_get_handler_info(), and any similar methods
that are added in future. It is not valid for the receiver of this signal
to call tp_handle_channels_context_accept(),
tp_handle_channels_context_delay() or tp_handle_channels_context_fail().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="486">the #TpChannel being re-handled</doc>
            <type name="Channel"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="487">the time at which user action occurred, or one of the
 special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME; see
 #TpAccountChannelRequest:user-action-time</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-channel-request.c"
                 line="491">a #TpHandleChannelsContext representing the context of
the HandleChannels() call.</doc>
            <type name="HandleChannelsContext"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AccountChannelRequestClass"
            c:type="TpAccountChannelRequestClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="AccountChannelRequest"
            version="0.11.12">
      <doc xml:space="preserve"
           filename="account-channel-request.c"
           line="53">The class of a #TpAccountChannelRequest.</doc>
      <source-position filename="account-channel-request.h" line="43"/>
    </record>
    <callback name="AccountChannelRequestDelegatedChannelCb"
              c:type="TpAccountChannelRequestDelegatedChannelCb"
              version="0.15.3">
      <doc xml:space="preserve"
           filename="account-channel-request.c"
           line="61">Called when a client asked us to delegate @channel to another Handler.
When this function is called you are no longer handling @channel.</doc>
      <source-position filename="account-channel-request.h" line="241"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="request" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="63">a #TpAccountChannelRequest instance</doc>
          <type name="AccountChannelRequest"
                c:type="TpAccountChannelRequest*"/>
        </parameter>
        <parameter name="channel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="64">a #TpChannel</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="account-channel-request.c"
               line="65">arbitrary user-supplied data passed to
tp_account_channel_request_set_delegated_channel_callback()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="AccountChannelRequestPrivate"
            c:type="TpAccountChannelRequestPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="account-channel-request.h" line="45"/>
    </record>
    <record name="AccountClass"
            c:type="TpAccountClass"
            glib:is-gtype-struct-for="Account">
      <doc xml:space="preserve"
           filename="account.c"
           line="87">The class of a #TpAccount.</doc>
      <source-position filename="account.h" line="54"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AccountClassPrivate" c:type="TpAccountClassPrivate*"/>
      </field>
    </record>
    <record name="AccountClassPrivate"
            c:type="TpAccountClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="account.h" line="41"/>
    </record>
    <class name="AccountManager"
           c:symbol-prefix="account_manager"
           c:type="TpAccountManager"
           version="0.7.32"
           parent="Proxy"
           glib:type-name="TpAccountManager"
           glib:get-type="tp_account_manager_get_type"
           glib:type-struct="AccountManagerClass">
      <doc xml:space="preserve"
           filename="account-manager.c"
           line="76">The Telepathy Account Manager stores real-time communication accounts and
their configuration, places accounts online on request, and manipulates
accounts' presence, nicknames and avatars.

#TpAccountManager is the "top level" object. Since 0.16 it always has a
non-%NULL #TpProxy:factory, and its #TpProxy:factory will be
propagated to all other objects like #TpAccountManager -&gt; #TpAccount -&gt;
#TpConnection -&gt; #TpContact and #TpChannel. This means that desired features
set on that factory will be prepared on all those objects.
If a #TpProxy:factory is not specified when the #TpAccountManager is
constructed, it will use a #TpAutomaticClientFactory.

&lt;example id="account-manager"&gt;&lt;title&gt;TpAccountManager example&lt;/title&gt;&lt;programlisting&gt;&lt;xi:include xmlns:xi="http://www.w3.org/2001/XInclude" parse="text" href="../../../examples/client/contact-list.c"&gt;&lt;xi:fallback&gt;FIXME: MISSING XINCLUDE CONTENT&lt;/xi:fallback&gt;&lt;/xi:include&gt;&lt;/programlisting&gt;&lt;/example&gt;</doc>
      <source-position filename="account-manager.h" line="52"/>
      <constructor name="new" c:identifier="tp_account_manager_new">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="750">Convenience function to create a new account manager proxy. The returned
#TpAccountManager is not guaranteed to be prepared on return.
Its #TpProxy:factory will be a new #TpAutomaticClientFactory for
@bus_daemon.

Use tp_account_manager_dup() instead if you want an account manager proxy
on the starter or session bus (which is almost always the right thing for
Telepathy).</doc>
        <source-position filename="account-manager.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="763">a new reference to an account manager proxy</doc>
          <type name="AccountManager" c:type="TpAccountManager*"/>
        </return-value>
        <parameters>
          <parameter name="bus_daemon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="752">Proxy for the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_factory"
                   c:identifier="tp_account_manager_new_with_factory">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="773">Convenience function to create a new account manager proxy. The returned
#TpAccountManager is not guaranteed to be ready on return.

Should be used only by applications having their own #TpSimpleClientFactory
subclass. Usually this should be done at application startup and followed by
a call to tp_account_manager_set_default() to ensure other libraries/plugins
will use this custom factory as well.</doc>
        <source-position filename="account-manager.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="785">a new reference to an account manager proxy</doc>
          <type name="AccountManager" c:type="TpAccountManager*"/>
        </return-value>
        <parameters>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="775">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="can_set_default"
                c:identifier="tp_account_manager_can_set_default"
                version="0.19.6">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="841">Check if tp_account_manager_set_default() has already successfully been
called.</doc>
        <source-position filename="account-manager.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="847">%TRUE if tp_account_manager_set_default() has already successfully
been called in this process, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="dup"
                c:identifier="tp_account_manager_dup"
                version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="858">Returns an account manager proxy on the D-Bus daemon on which this
process was activated (if it was launched by D-Bus service activation), or
the session bus (otherwise). This account manager will always have
the result of tp_dbus_daemon_dup() as its #TpProxy:dbus-daemon.

The returned #TpAccountManager is cached; the same #TpAccountManager object
will be returned by this function repeatedly, as long as at least one
reference exists. Note that the returned #TpAccountManager is not guaranteed
to be ready on return.

If tp_account_manager_set_default() has been called successfully,
that #TpAccountManager will be returned. Otherwise, a new #TpAccountManager
will be created the first time this function is called, using a new
#TpAutomaticClientFactory as its #TpProxy:factory.</doc>
        <source-position filename="account-manager.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="876">an account manager proxy on the starter or session
         bus, or %NULL if it wasn't possible to get a dbus daemon proxy for
         the appropriate bus</doc>
          <type name="AccountManager" c:type="TpAccountManager*"/>
        </return-value>
      </function>
      <function name="get_feature_quark_core"
                c:identifier="tp_account_manager_get_feature_quark_core"
                version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="168">&lt;!-- --&gt;</doc>
        <source-position filename="account-manager.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="173">the quark used for representing the core feature of a
         #TpAccountManager</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_account_manager_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="706">Ensure that the known interfaces for TpAccountManager have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_ACCOUNT_MANAGER.</doc>
        <source-position filename="account-manager.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="create_account_async"
              c:identifier="tp_account_manager_create_account_async"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1369">Requests an asynchronous create of an account on the account manager
@manager. When the operation is finished, @callback will be called. You can
then call tp_account_manager_create_account_finish() to get the result of
the operation.

The #TpAccount returned by tp_account_manager_create_account_finish()
will already have %TP_ACCOUNT_FEATURE_CORE prepared, along with all
features previously passed to
tp_simple_client_factory_add_account_features() for the account
manager's #TpProxy:factory.

It is usually better to use #TpAccountRequest instead, particularly when
using high-level language bindings.</doc>
        <source-position filename="account-manager.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1371">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="connection_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1372">the name of a connection manager</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1373">the name of a protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1374">the display name for the account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1375">parameters
 for the new account</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1377">properties
 for the new account</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1379">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1380">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_account_finish"
              c:identifier="tp_account_manager_create_account_finish"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1427">Finishes an async create account operation, and returns a new #TpAccount
object. It has %TP_ACCOUNT_FEATURE_CORE prepared, along with all
features previously passed to
tp_simple_client_factory_add_account_features() for the account
manager's #TpProxy:factory.

The caller must keep a ref to the returned object using g_object_ref() if
it is to be kept beyond the lifetime of @result.</doc>
        <source-position filename="account-manager.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1442">a new #TpAccount which was just created on
 success, otherwise %NULL</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1429">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1430">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_valid_accounts"
              c:identifier="tp_account_manager_dup_valid_accounts"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1146">Returns a newly allocated #GList of reffed valid accounts in @manager.
The list must be freed with g_list_free_full() and g_object_unref() after
used.

The returned #TpAccount&lt;!-- --&gt;s are guaranteed to have
%TP_ACCOUNT_FEATURE_CORE prepared, along with all features previously passed
to tp_simple_client_factory_add_account_features() for the account
manager's #TpProxy:factory.

The list of valid accounts returned is not guaranteed to have been retrieved
until %TP_ACCOUNT_MANAGER_FEATURE_CORE is prepared
(tp_proxy_prepare_async() has returned). Until this feature has
been prepared, an empty list (%NULL) will be returned.</doc>
        <source-position filename="account-manager.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1164">a newly
 allocated #GList of reffed valid accounts in @manager</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Account"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1148">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="enable_restart"
              c:identifier="tp_account_manager_enable_restart">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1528">Enable autostarting the account manager D-Bus service. This means
that the account manager will be restarted if it disappears from
the bus.</doc>
        <source-position filename="account-manager.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1530">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ensure_account"
              c:identifier="tp_account_manager_ensure_account"
              version="0.9.0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1039">Lookup an account in the account manager @manager. If the desired account
has already been ensured then the same object will be returned, otherwise
it will create a new #TpAccount and add it to @manager. As a result, if
@manager thinks that the account doesn't exist, this will still add it to
@manager to avoid races.

The account will be constructed via this account manager's #TpProxy:factory
(so it will be of an appropriate #TpAccount subclass if the factory
returns one), but does not necessarily have any features prepared yet.
Use tp_proxy_prepare_async() to prepare features, using
the contents of tp_simple_client_factory_dup_account_features() as a
parameter if you want to prepare the same features that would
normally be used.

The caller must keep a ref to the returned object using g_object_ref() if
it is to be kept.</doc>
        <doc-deprecated xml:space="preserve">New code should call tp_simple_client_factory_ensure_account()
 on this object's #TpProxy:factory instead, which ensures that a new
 reference is returned.</doc-deprecated>
        <source-position filename="account-manager.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1061">a new #TpAccount at @path, or %NULL if @path is
 not a valid account path.</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1041">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1042">the object path for an account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_most_available_presence"
              c:identifier="tp_account_manager_get_most_available_presence"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1246">Gets the most available presence over all accounts in @manager. This
function does not average presences across all accounts, but it merely
finds the "most available" presence. As a result, there is a guarantee
that there exists at least one account in @manager with the returned
presence.

If no accounts are enabled or valid the output will be
(%TP_CONNECTION_PRESENCE_TYPE_OFFLINE, "offline", "").

Since 0.17.5, if the only connected accounts does not implement
%TP_IFACE_CONNECTION_INTERFACE_SIMPLE_PRESENCE, the output will be
(%TP_CONNECTION_PRESENCE_TYPE_AVAILABLE, "available", "").

The return value of this function is not guaranteed to have been retrieved
until tp_proxy_prepare_async() has finished; until then, the
value will be the same as if no accounts are enabled or valid.</doc>
        <source-position filename="account-manager.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1270">the most available presence across all accounts</doc>
          <type name="ConnectionPresenceType"
                c:type="TpConnectionPresenceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1248">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="status"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1249">a string to fill with the actual status</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="message"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1250">a string to fill with the actual status
 message</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_valid_accounts"
              c:identifier="tp_account_manager_get_valid_accounts"
              version="0.9.0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1105">Returns a newly allocated #GList of valid accounts in @manager. The list
must be freed with g_list_free() after used. None of the accounts in the
returned list are guaranteed to be ready.

Note that the #TpAccount&lt;!-- --&gt;s in the returned #GList are not reffed
before returning from this function. One could ref every item in the list
like the following example:
|[
GList *accounts;
account = tp_account_manager_get_valid_accounts (manager);
g_list_foreach (accounts, (GFunc) g_object_ref, NULL);
]|

The returned #TpAccount&lt;!-- --&gt;s are guaranteed to have
%TP_ACCOUNT_FEATURE_CORE prepared, along with all features previously passed
to tp_simple_client_factory_add_account_features() for the account
manager's #TpProxy:factory.

The list of valid accounts returned is not guaranteed to have been retrieved
until %TP_ACCOUNT_MANAGER_FEATURE_CORE is prepared
(tp_proxy_prepare_async() has returned). Until this feature has
been prepared, an empty list (%NULL) will be returned.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_account_manager_dup_valid_accounts() instead.</doc-deprecated>
        <source-position filename="account-manager.h" line="101"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1132">a newly allocated #GList of valid accounts in @manager</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Account"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1107">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_prepared"
              c:identifier="tp_account_manager_is_prepared"
              version="0.9.0"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1456">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">since 0.23.0, use tp_proxy_is_prepared() instead.</doc-deprecated>
        <source-position filename="account-manager.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1463">the same thing as tp_proxy_is_prepared()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1458">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1459">a feature which is required</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_async"
              c:identifier="tp_account_manager_prepare_async"
              version="0.9.0"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1475">Requests an asynchronous preparation of @manager with
%TP_ACCOUNT_MANAGER_FEATURE_CORE, plus any features specified
by @features. When the operation is finished, @callback will be called. You
can then call tp_account_manager_prepare_finish() to get the result of the
operation.

If %NULL is given to @callback, then no callback will be called when the
operation is finished. Instead, it will simply set @features on @manager.
Note that if @callback is %NULL, then @user_data must also be %NULL.

In version 0.11.3 or later, this is equivalent to calling
tp_proxy_prepare_async() with the same arguments.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.6, use tp_proxy_prepare_async() instead.</doc-deprecated>
        <source-position filename="account-manager.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1477">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1478">a 0-terminated list of features, or %NULL</doc>
            <type name="GLib.Quark" c:type="const GQuark*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1479">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1480">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_finish"
              c:identifier="tp_account_manager_prepare_finish"
              version="0.9.0"
              introspectable="0"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1507">Finishes an async preparation of the account manager @manager.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.6, use tp_proxy_prepare_finish() instead.</doc-deprecated>
        <source-position filename="account-manager.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="account-manager.c"
               line="1515">%TRUE if the preparation was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1509">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1510">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_all_requested_presences"
              c:identifier="tp_account_manager_set_all_requested_presences"
              version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="1182">Iterates through the accounts in @manager and requests the presence
(@type, @status and @message). Note that the presence requested here is
merely a request, and if might not be satisfiable.

You can find the most available presence across all accounts by calling
tp_account_manager_get_most_available_presence().

Setting a requested presence on all accounts will have no effect
until tp_proxy_prepare_async()
(or the older tp_account_manager_prepare_async()) has finished.</doc>
        <source-position filename="account-manager.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1184">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1185">a presence type to request</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1186">a status to request</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="1187">a status message to request</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default"
              c:identifier="tp_account_manager_set_default"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="798">Define the #TpAccountManager singleton that will be returned by
tp_account_manager_dup().

This function may only be called before the first call to
tp_account_manager_dup(), and may not be called more than once. Applications
which use a custom #TpSimpleClientFactory and want the default
#TpAccountManager to use that factory should call this after calling
tp_account_manager_new_with_factory().

Unlike tp_account_manager_dup(), this function will keep an internal
reference to @manager, so it will never be destroyed.

Note that @manager must use the default #TpDBusDaemon as returned by
tp_dbus_daemon_dup()</doc>
        <source-position filename="account-manager.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="800">a #TpAccountManager</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AccountManagerPrivate" c:type="TpAccountManagerPrivate*"/>
      </field>
      <glib:signal name="account-disabled" when="last" version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="666">Emitted when an account from @manager is disabled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="669">a #TpAccount</doc>
            <type name="Account"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="account-enabled" when="last" version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="645">Emitted when an account from @manager is enabled.

@account is guaranteed to have %TP_ACCOUNT_FEATURE_CORE prepared, along
with all the features previously passed to the #TpProxy:factory&lt;!-- --&gt;'s
tp_simple_client_factory_add_account_features().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="648">a #TpAccount</doc>
            <type name="Account"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="account-removed" when="last" version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="628">Emitted when an account is removed from @manager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="631">a #TpAccount</doc>
            <type name="Account"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="account-validity-changed" when="last" version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="602">Emitted when the validity on @account changes.

This signal is also used to indicate a new account that did not
previously exist has been added (with @valid set to %TRUE).

If @valid is %TRUE,
@account is guaranteed to have %TP_ACCOUNT_FEATURE_CORE prepared, along
with all the features previously passed to the #TpProxy:factory&lt;!-- --&gt;'s
tp_simple_client_factory_add_account_features().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="605">a #TpAccount</doc>
            <type name="Account"/>
          </parameter>
          <parameter name="valid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="606">%TRUE if the account is now valid</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="most-available-presence-changed"
                   when="last"
                   version="0.9.0">
        <doc xml:space="preserve"
             filename="account-manager.c"
             line="683">Emitted when the most available presence on @manager changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="presence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="686">new presence type</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="687">new status</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-manager.c"
                 line="688">new status message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="AccountManagerClass"
            c:type="TpAccountManagerClass"
            glib:is-gtype-struct-for="AccountManager">
      <doc xml:space="preserve"
           filename="account-manager.c"
           line="96">The class of a #TpAccount.</doc>
      <source-position filename="account-manager.h" line="52"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AccountManagerClassPrivate"
              c:type="TpAccountManagerClassPrivate*"/>
      </field>
    </record>
    <record name="AccountManagerClassPrivate"
            c:type="TpAccountManagerClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="account-manager.h" line="39"/>
    </record>
    <record name="AccountManagerPrivate"
            c:type="TpAccountManagerPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="account-manager.h" line="38"/>
    </record>
    <record name="AccountPrivate"
            c:type="TpAccountPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="account.h" line="40"/>
    </record>
    <class name="AccountRequest"
           c:symbol-prefix="account_request"
           c:type="TpAccountRequest"
           version="0.19.1"
           parent="GObject.Object"
           glib:type-name="TpAccountRequest"
           glib:get-type="tp_account_request_get_type"
           glib:type-struct="AccountRequestClass">
      <doc xml:space="preserve"
           filename="account-request.c"
           line="95">An object for representing a currently non-existent account which
is to be created on a #TpAccountManager.</doc>
      <source-position filename="account-request.h" line="48"/>
      <constructor name="new"
                   c:identifier="tp_account_request_new"
                   version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="724">Convenience function to create a new account request object which
will assist in the creation of a new account on @account_manager,
using connection manager @manager, and protocol @protocol.</doc>
        <source-position filename="account-request.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-request.c"
               line="735">a new reference to an account request
  object, or %NULL if any argument is incorrect</doc>
          <type name="AccountRequest" c:type="TpAccountRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="726">the #TpAccountManager to create the account on</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </parameter>
          <parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="727">the name of the connection manager</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="728">the name of the protocol on @manager</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="729">the user-visible name of this account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_protocol"
                   c:identifier="tp_account_request_new_from_protocol"
                   version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="758">Convenience function to create a new #TpAccountRequest object using
a #TpProtocol instance, instead of specifying connection manager
and protocol name specifically. See tp_account_request_new() for
more details.</doc>
        <source-position filename="account-request.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-request.c"
               line="769">a new reference to an account request
  object, or %NULL if any argument is incorrect</doc>
          <type name="AccountRequest" c:type="TpAccountRequest*"/>
        </return-value>
        <parameters>
          <parameter name="account_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="760">the #TpAccountManager to create the account on</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="761">a #TpProtocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="762">the user-visible name of this account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_supersedes"
              c:identifier="tp_account_request_add_supersedes"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1014">Add an account object path to the list of superseded accounts which
this new account will supersede. Use the
#TpAccountRequest:supersedes property to read the current list of
superseded accounts.</doc>
        <source-position filename="account-request.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1016">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="superseded_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1017">an account object path to add to the supersedes
  list</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_account_async"
              c:identifier="tp_account_request_create_account_async"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1322">Start an asynchronous operation to create the account @self on the
account manager.

@callback will only be called when the newly created #TpAccount has
the %TP_ACCOUNT_FEATURE_CORE feature ready on it, so when calling
tp_account_request_create_account_finish(), one can guarantee this
feature.</doc>
        <source-position filename="account-request.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1324">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1325">a function to call when the account has been created</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1326">user data to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_account_finish"
              c:identifier="tp_account_request_create_account_finish"
              version="0.19.1"
              throws="1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1377">Finishes an asynchronous account creation operation and returns a
new ref to a #TpAccount object. The returned account will have the
features listed in tp_simple_client_factory_dup_account_features()
(with the proxy factory from #TpAccountRequest:account-manager)
prepared on it.</doc>
        <source-position filename="account-request.h" line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="account-request.c"
               line="1389">a new ref to a #TpAccount, or %NULL</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1379">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1380">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_automatic_presence"
              c:identifier="tp_account_request_set_automatic_presence"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="914">Set the automatic presence for the new account, @self, to the type
(@presence, @status), with message @message. Use the
#TpAccountRequest:automatic-presence-type,
#TpAccountRequest:automatic-status, and
#TpAccountRequest:automatic-status-message properties to read the
current automatic presence.</doc>
        <source-position filename="account-request.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="916">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="presence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="917">the automatic presence type</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="918">the automatic presence status</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="919">the automatic presence message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_avatar"
              c:identifier="tp_account_request_set_avatar"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1057">Set the avatar of the account @self to @avatar. Use the
#TpAccountRequest:avatar and #TpAccountRequest:avatar-mime-type
properties to read the current avatar.</doc>
        <source-position filename="account-request.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1059">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="avatar"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1060">a new avatar to set; can
  be %NULL only if %len equals 0</doc>
            <array length="1" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1062">the length of the new avatar</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1063">the MIME type of the new avatar; can be %NULL
 only if @len equals 0</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connect_automatically"
              c:identifier="tp_account_request_set_connect_automatically"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="984">Set the connect automatically property of the account on creation
to @connect_automatically so that the account is brought online to
the automatic presence. Use the
#TpAccountRequest:connect-automatically property to read the current
connect automatically value.</doc>
        <source-position filename="account-request.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="986">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="connect_automatically" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="987">%TRUE if the account is to connect automatically</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="tp_account_request_set_display_name"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="790">Set the display name for the new account, @self, to @name. Use the
#TpAccountRequest:display-name property to read the current display
name.</doc>
        <source-position filename="account-request.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="792">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="793">a display name for the account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="tp_account_request_set_enabled"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="958">Set the enabled property of the account on creation to
@enabled. Use the #TpAccountRequest:enabled property to read the
current enabled value.</doc>
        <source-position filename="account-request.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="960">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="961">%TRUE if the account is to be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="tp_account_request_set_icon_name"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="818">Set the icon name for the new account, @self, to @icon. Use the
#TpAccountRequest:icon-name property to read the current icon name.</doc>
        <source-position filename="account-request.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="820">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="icon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="821">an icon name for the account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_nickname"
              c:identifier="tp_account_request_set_nickname"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="844">Set the nickname for the new account, @self, to @nickname. Use the
#TpAccountRequest:nickname property to read the current nickname.</doc>
        <source-position filename="account-request.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="846">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="nickname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="847">a nickname for the account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parameter"
              c:identifier="tp_account_request_set_parameter"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1160">Set an account parameter, @key, to @value. Use the
#TpAccountRequest:parameters property to read the current list of
set parameters.

Parameters can be unset using tp_account_request_unset_parameter().</doc>
        <source-position filename="account-request.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1162">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1163">the parameter key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1164">a variant containing the parameter value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parameter_string"
              c:identifier="tp_account_request_set_parameter_string"
              version="0.19.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1225">Convenience function to set an account parameter string value. See
tp_account_request_set_parameter() for more details.</doc>
        <source-position filename="account-request.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1227">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1228">the parameter key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1229">the parameter value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_requested_presence"
              c:identifier="tp_account_request_set_requested_presence"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="870">Set the requested presence for the new account, @self, to the type
(@presence, @status), with message @message. Use the
#TpAccountRequest:requested-presence-type,
#TpAccountRequest:requested-status, and
#TpAccountRequest:requested-status-message properties to read the
current requested presence.</doc>
        <source-position filename="account-request.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="872">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="presence" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="873">the requested presence type</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="874">the requested presence status</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="875">the requested presence message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_service"
              c:identifier="tp_account_request_set_service"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1107">Set the service property of the account to @service. Use the
#TpAccountRequest:service property to read the current value.</doc>
        <source-position filename="account-request.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1109">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1110">the service name for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_storage_provider"
              c:identifier="tp_account_request_set_storage_provider"
              version="0.19.4">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1134">Set the account storage to use when creating the account. Use the
#TpAccountRequest:storage-provider property to read the current value.</doc>
        <source-position filename="account-request.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1136">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1137">the name of an account storage implementation</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_parameter"
              c:identifier="tp_account_request_unset_parameter"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="1198">Unset the account parameter @key which has previously been set
using tp_account_request_set_parameter() or another convenience
function.</doc>
        <source-position filename="account-request.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1200">a #TpAccountRequest</doc>
            <type name="AccountRequest" c:type="TpAccountRequest*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="account-request.c"
                 line="1201">the parameter key</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account-manager"
                version="0.19.1"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="390">The #TpAccountManager to create the account on.</doc>
        <type name="AccountManager"/>
      </property>
      <property name="automatic-presence-type"
                version="0.19.1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="556">The account's automatic presence type (a
#TpConnectionPresenceType). To change this property use
tp_account_request_set_automatic_presence().

When the account is put online automatically, for instance to
make a channel request or because network connectivity becomes
available, the automatic presence type, status and message will
be copied to their "requested" counterparts.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="automatic-status"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="579">The string status name to use in conjunction with the
#TpAccountRequest:automatic-presence-type. To change this property
use tp_account_request_set_automatic_presence().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="automatic-status-message"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="595">The user-defined message to use in conjunction with the
#TpAccount:automatic-presence-type. To change this property use
tp_account_request_set_automatic_presence().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="avatar" version="0.19.1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="659">The avatar set on the account. The avatar's mime type can be read
in the #TpAccountRequest:avatar-mime-type property. To change this
property, use tp_account_request_set_avatar().</doc>
        <array name="GLib.Array">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="avatar-mime-type"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="675">The mime type of the #TpAccountRequest:avatar property. To change
this property, use tp_account_request_set_avatar().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connect-automatically"
                version="0.19.1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="626">Whether the account should connect automatically or not. To change this
property, use tp_account_request_set_connect_automatically().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="connection-manager"
                version="0.19.1"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="404">The account's connection manager name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-name"
                version="0.19.1"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="434">The account's display name. To change this property use
tp_account_request_set_display_name().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                version="0.19.1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="611">Whether the account is enabled or not. To change this property
use tp_account_request_set_enabled().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="478">The account's icon name. To change this propery, use
tp_account_request_set_icon_name().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="nickname"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="493">The account's nickname. To change this property use
tp_account_request_set_nickname().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parameters" version="0.19.1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="449">The account's connection parameters. To add a parameter, use
tp_account_request_set_parameter() or another convience function.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="properties" version="0.19.1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="464">The account's properties.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="protocol"
                version="0.19.1"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="418">The account's machine-readable protocol name, such as "jabber", "msn" or
"local-xmpp". Recommended names for most protocols can be found in the
Telepathy D-Bus Interface Specification.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="requested-presence-type"
                version="0.19.1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="508">The account's requested presence type (a
#TpConnectionPresenceType). To change this property use
tp_account_request_set_requested_presence().</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="requested-status"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="526">The requested Status string of the account. To change this
property use tp_account_request_set_requested_presence().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="requested-status-message"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="541">The requested status message message of the account. To change
this property use tp_account_request_set_requested_presence().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service"
                version="0.19.1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="690">A string describing the service of the account, which must
consist only of ASCII letters, numbers and hyphen/minus signs,
and start with a letter (matching the requirements for
Protocol). To change this property, use
tp_account_request_set_service().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="storage-provider"
                version="0.19.4"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="708">The account's storage provider. To change this property use
tp_account_request_set_storage_provider().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="supersedes" version="0.19.1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="account-request.c"
             line="641">The object paths of previously-active accounts superseded by this one.
For instance, this can be used in a logger to read old logs for an
account that has been migrated from one connection manager to another.

To add to this property use tp_account_request_add_supersedes().</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="AccountRequestPrivate" c:type="TpAccountRequestPrivate*"/>
      </field>
    </class>
    <record name="AccountRequestClass"
            c:type="TpAccountRequestClass"
            glib:is-gtype-struct-for="AccountRequest">
      <doc xml:space="preserve"
           filename="account-request.c"
           line="104">The class of a #TpAccountRequest.</doc>
      <source-position filename="account-request.h" line="48"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="AccountRequestPrivate"
            c:type="TpAccountRequestPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="account-request.h" line="36"/>
    </record>
    <class name="AddDispatchOperationContext"
           c:symbol-prefix="add_dispatch_operation_context"
           c:type="TpAddDispatchOperationContext"
           version="0.11.5"
           parent="GObject.Object"
           glib:type-name="TpAddDispatchOperationContext"
           glib:get-type="tp_add_dispatch_operation_context_get_type"
           glib:type-struct="AddDispatchOperationContextClass">
      <doc xml:space="preserve"
           filename="add-dispatch-operation-context.c"
           line="30">Data structure representing the context of a Approver.AddDispatchOperation()
call.</doc>
      <source-position filename="add-dispatch-operation-context.h" line="35"/>
      <method name="accept"
              c:identifier="tp_add_dispatch_operation_context_accept"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="363">Called by #TpBaseClientClassAddDispatchOperationImpl when it's done so
the D-Bus method can return.</doc>
        <source-position filename="add-dispatch-operation-context.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="add-dispatch-operation-context.c"
                 line="365">a #TpAddDispatchOperationContext</doc>
            <type name="AddDispatchOperationContext"
                  c:type="TpAddDispatchOperationContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delay"
              c:identifier="tp_add_dispatch_operation_context_delay"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="410">Called by #TpBaseClientClassAddDispatchOperationImpl to indicate that it
implements the method in an async way. The caller must take a reference
to the #TpAddDispatchOperationContext before calling this function, and
is responsible for calling either
tp_add_dispatch_operation_context_accept() or
tp_add_dispatch_operation_context_fail() later.</doc>
        <source-position filename="add-dispatch-operation-context.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="add-dispatch-operation-context.c"
                 line="412">a #TpAddDispatchOperationContext</doc>
            <type name="AddDispatchOperationContext"
                  c:type="TpAddDispatchOperationContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fail"
              c:identifier="tp_add_dispatch_operation_context_fail"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="386">Called by #TpBaseClientClassAddDispatchOperationImpl to raise a D-Bus error.</doc>
        <source-position filename="add-dispatch-operation-context.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="add-dispatch-operation-context.c"
                 line="388">a #TpAddDispatchOperationContext</doc>
            <type name="AddDispatchOperationContext"
                  c:type="TpAddDispatchOperationContext*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="add-dispatch-operation-context.c"
                 line="389">the error to return from the method</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="256">A #TpAccount object representing the Account of the DispatchOperation
that has been passed to AddDispatchOperation.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Account"/>
      </property>
      <property name="channels"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="292">A #GPtrArray containing #TpChannel objects representing the channels
that have been passed to AddDispatchOperation.
Read-only except during construction.

This property can't be %NULL.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="connection"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="274">A #TpConnection object representing the Connection of the DispatchOperation
that has been passed to AddDispatchOperation.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Connection"/>
      </property>
      <property name="dbus-context"
                version="0.11.5"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="330">The #DBusGMethodInvocation representing the D-Bus context of the
AddDispatchOperation call.
Can only be written during construction.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="dispatch-operation"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="add-dispatch-operation-context.c"
             line="310">A #TpChannelDispatchOperation object representing the
ChannelDispatchOperation that has been passed to AddDispatchOperation.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="ChannelDispatchOperation"/>
      </property>
    </class>
    <record name="AddDispatchOperationContextClass"
            c:type="TpAddDispatchOperationContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="AddDispatchOperationContext"
            version="0.11.5">
      <doc xml:space="preserve"
           filename="add-dispatch-operation-context.c"
           line="39">The class of a #TpAddDispatchOperationContext.</doc>
      <source-position filename="add-dispatch-operation-context.h" line="35"/>
    </record>
    <record name="AddDispatchOperationContextPrivate"
            c:type="TpAddDispatchOperationContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="add-dispatch-operation-context.h" line="37"/>
    </record>
    <bitfield name="AnonymityModeFlags" c:type="TpAnonymityModeFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="95">&lt;![CDATA[         Flags for the various types of anonymity modes.  These modes are solely to         inform the CM of the desired anonymous settings.  It is up to the         CM to determine whether the anonymity modes should be handled within         the CM itself, or whether the network that a CM might be talking to         should be enforcing anonymity.          CMs MAY support only a subset of these modes, and specific         connections MAY support none at all.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="67"/>
      <member name="client_info"
              value="1"
              c:identifier="TP_ANONYMITY_MODE_CLIENT_INFO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="97">&lt;![CDATA[           Obscure any information that provides user identification,           user-agent identification or personal details. Examples of this           information might be GSM CallerID, SIP from address, various           informational email headers, etc.            The CM should scrub/replace any of this information before           passing messages or data onto the network. Note that a CM which           has the option of obscuring the information at the CM or privacy           service level would choose both (anonymity services are opaque           to clients of this interface).            Clients SHOULD NOT set both Client_Info and Show_Client_Info modes.           If they are set, the CM MUST respect Client_Info and ignore           Show_Client_Info.         ]]&gt;</doc>
      </member>
      <member name="show_client_info"
              value="2"
              c:identifier="TP_ANONYMITY_MODE_SHOW_CLIENT_INFO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="98">&lt;![CDATA[           Explicitly request showing of client information. In connection           context, this can be used to override service default. In channel           context, this overrides connection anonymity modes.                         In GSM, it's possible to have CLIR enabled by default, and               explicitly suppress CLIR for a single phone call.                       Clients SHOULD NOT set both Client_Info and Show_Client_Info modes.           If they are set, the CM MUST respect Client_Info and ignore           Show_Client_Info. The CM MAY set both Client_Info and Show_Client_Info           in SupportedAnonymityModes to indicate           its support for explicitly hiding and publicising client information.                    ]]&gt;</doc>
      </member>
      <member name="network_info"
              value="4"
              c:identifier="TP_ANONYMITY_MODE_NETWORK_INFO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="99">&lt;![CDATA[           Obscure any originating IP address information, contact URIs,           and anonymize all traffic involved with sending/receiving any           media streams or call content.           Examples of this include the "headers" portions of           RFC 3323 as           well as the History-Info (described in           RFC 4244)           for a SIP CM.            This SHOULD have the effect of hiding address information from           the remote contact (ie, the contact cannot know what IP address           the session is originated from). Obviously the network still needs           to be able to route information between contacts, so this provides           no guarantees of what can be seen by intermediaries.         ]]&gt;</doc>
      </member>
    </bitfield>
    <class name="AutomaticClientFactory"
           c:symbol-prefix="automatic_client_factory"
           c:type="TpAutomaticClientFactory"
           version="0.15.5"
           parent="SimpleClientFactory"
           glib:type-name="TpAutomaticClientFactory"
           glib:get-type="tp_automatic_client_factory_get_type"
           glib:type-struct="AutomaticClientFactoryClass">
      <doc xml:space="preserve"
           filename="automatic-client-factory.c"
           line="93">Data structure representing a #TpAutomaticClientFactory</doc>
      <source-position filename="automatic-client-factory.h" line="44"/>
      <constructor name="new"
                   c:identifier="tp_automatic_client_factory_new"
                   version="0.15.5">
        <doc xml:space="preserve"
             filename="automatic-client-factory.c"
             line="289">Returns a new #TpAutomaticClientFactory instance. If @dbus is %NULL,
tp_dbus_daemon_dup() will be used.</doc>
        <source-position filename="automatic-client-factory.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="automatic-client-factory.c"
               line="296">a new #TpAutomaticClientFactory</doc>
          <type name="AutomaticClientFactory"
                c:type="TpAutomaticClientFactory*"/>
        </return-value>
        <parameters>
          <parameter name="dbus"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="automatic-client-factory.c"
                 line="291">a #TpDBusDaemon, or %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent" readable="0" private="1">
        <type name="SimpleClientFactory" c:type="TpSimpleClientFactory"/>
      </field>
    </class>
    <record name="AutomaticClientFactoryClass"
            c:type="TpAutomaticClientFactoryClass"
            glib:is-gtype-struct-for="AutomaticClientFactory"
            version="0.15.5">
      <doc xml:space="preserve"
           filename="automatic-client-factory.c"
           line="101">The class of a #TpAutomaticClientFactory.</doc>
      <source-position filename="automatic-client-factory.h" line="44"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="automatic-client-factory.c"
             line="103">the parent class</doc>
        <type name="SimpleClientFactoryClass"
              c:type="TpSimpleClientFactoryClass"/>
      </field>
    </record>
    <class name="AutomaticProxyFactory"
           c:symbol-prefix="automatic_proxy_factory"
           c:type="TpAutomaticProxyFactory"
           version="0.13.2"
           parent="GObject.Object"
           glib:type-name="TpAutomaticProxyFactory"
           glib:get-type="tp_automatic_proxy_factory_get_type"
           glib:type-struct="AutomaticProxyFactoryClass">
      <doc xml:space="preserve"
           filename="automatic-proxy-factory.c"
           line="79">Data structure representing a #TpAutomaticProxyFactory</doc>
      <source-position filename="automatic-proxy-factory.h" line="40"/>
      <implements name="ClientChannelFactory"/>
      <constructor name="new"
                   c:identifier="tp_automatic_proxy_factory_new"
                   version="0.13.2"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="automatic-proxy-factory.c"
             line="256">Convenient function to create a new #TpAutomaticProxyFactory instance.</doc>
        <doc-deprecated xml:space="preserve">New code should use #TpAutomaticClientFactory instead</doc-deprecated>
        <source-position filename="automatic-proxy-factory.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="automatic-proxy-factory.c"
               line="261">a new #TpAutomaticProxyFactory</doc>
          <type name="AutomaticProxyFactory"
                c:type="TpAutomaticProxyFactory*"/>
        </return-value>
      </constructor>
      <function name="dup"
                c:identifier="tp_automatic_proxy_factory_dup"
                version="0.13.2"
                deprecated="1">
        <doc xml:space="preserve"
             filename="automatic-proxy-factory.c"
             line="279">Returns a cached #TpAutomaticProxyFactory; the same
#TpAutomaticProxyFactory object will be returned by this function repeatedly,
as long as at least one reference exists.</doc>
        <doc-deprecated xml:space="preserve">New code should use #TpAutomaticClientFactory instead</doc-deprecated>
        <source-position filename="automatic-proxy-factory.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="automatic-proxy-factory.c"
               line="286">a #TpAutomaticProxyFactory</doc>
          <type name="AutomaticProxyFactory"
                c:type="TpAutomaticProxyFactory*"/>
        </return-value>
      </function>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="AutomaticProxyFactoryClass"
            c:type="TpAutomaticProxyFactoryClass"
            glib:is-gtype-struct-for="AutomaticProxyFactory"
            version="0.13.2">
      <doc xml:space="preserve"
           filename="automatic-proxy-factory.c"
           line="87">The class of a #TpAutomaticProxyFactory.</doc>
      <source-position filename="automatic-proxy-factory.h" line="40"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="automatic-proxy-factory.c"
             line="89">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="AvatarRequirements"
            c:type="TpAvatarRequirements"
            version="0.11.4"
            glib:type-name="TpAvatarRequirements"
            glib:get-type="tp_avatar_requirements_get_type"
            c:symbol-prefix="avatar_requirements">
      <doc xml:space="preserve"
           filename="connection-avatars.c"
           line="132">The requirements for setting an avatar on a particular protocol.</doc>
      <source-position filename="connection.h" line="309"/>
      <field name="supported_mime_types" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="134">An array of supported MIME types (e.g. "image/jpeg")
 Clients MAY assume that the first type in this array is preferred</doc>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </field>
      <field name="minimum_width" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="136">The minimum width in pixels of an avatar, which MAY be 0</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="minimum_height" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="137">The minimum height in pixels of an avatar, which MAY be 0</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="recommended_width" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="138">The recommended width in pixels of an avatar, or 0 if
 there is no preferred width.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="recommended_height" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="140">The recommended height in pixels of an avatar, or 0 if
 there is no preferred height</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="maximum_width" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="142">The maximum width in pixels of an avatar on this protocol,
 or 0 if there is no limit.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="maximum_height" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="144">The maximum height in pixels of an avatar, or 0 if there is
 no limit.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="maximum_bytes" writable="1">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="146">he maximum size in bytes of an avatar, or 0 if there is no
 limit.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <constructor name="new"
                   c:identifier="tp_avatar_requirements_new"
                   version="0.11.4">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="165">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="313"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-avatars.c"
               line="184">a newly allocated #TpAvatarRequirements, free it with
tp_avatar_requirements_destroy()</doc>
          <type name="AvatarRequirements" c:type="TpAvatarRequirements*"/>
        </return-value>
        <parameters>
          <parameter name="supported_mime_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="167">An array of supported MIME types (e.g. "image/jpeg")
 Clients MAY assume that the first type in this array is preferred</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="minimum_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="169">The minimum width in pixels of an avatar, which MAY be 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="minimum_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="170">The minimum height in pixels of an avatar, which MAY be 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="recommended_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="171">The recommended width in pixels of an avatar, or 0 if
 there is no preferred width.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="recommended_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="173">The recommended height in pixels of an avatar, or 0 if
 there is no preferred height</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="maximum_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="175">The maximum width in pixels of an avatar on this protocol,
 or 0 if there is no limit.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="maximum_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="177">The maximum height in pixels of an avatar, or 0 if there is
 no limit.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="maximum_bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="179">he maximum size in bytes of an avatar, or 0 if there is no
 limit.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="tp_avatar_requirements_copy"
              version="0.11.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="215">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="321"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-avatars.c"
               line="221">a newly allocated #TpAvatarRequirements, free it with
tp_avatar_requirements_destroy()</doc>
          <type name="AvatarRequirements" c:type="TpAvatarRequirements*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="217">a #TpAvatarRequirements</doc>
            <type name="AvatarRequirements"
                  c:type="const TpAvatarRequirements*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy"
              c:identifier="tp_avatar_requirements_destroy"
              version="0.11.4"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="240">Free all memory used by the #TpAvatarRequirements.</doc>
        <source-position filename="connection.h" line="323"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="242">a #TpAvatarRequirements</doc>
            <type name="AvatarRequirements" c:type="TpAvatarRequirements*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <function-macro name="BASE_CLIENT"
                    c:identifier="TP_BASE_CLIENT"
                    introspectable="0">
      <source-position filename="base-client.h" line="253"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASE_CLIENT_CLASS"
                    c:identifier="TP_BASE_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="base-client.h" line="256"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASE_CLIENT_GET_CLASS"
                    c:identifier="TP_BASE_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="base-client.h" line="263"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASE_CONNECTION"
                    c:identifier="TP_BASE_CONNECTION"
                    introspectable="0">
      <source-position filename="base-connection.h" line="205"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASE_CONNECTION_CLASS"
                    c:identifier="TP_BASE_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="base-connection.h" line="208"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASE_CONNECTION_ERROR_IF_NOT_CONNECTED"
                    c:identifier="TP_BASE_CONNECTION_ERROR_IF_NOT_CONNECTED"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="235">If @conn is not in state #TP_CONNECTION_STATUS_CONNECTED, complete the
D-Bus method invocation @context by raising the Telepathy error
#TP_ERROR_DISCONNECTED, and return from the current function (which
must be void). For use in D-Bus method implementations.</doc>
      <source-position filename="base-connection.h" line="219"/>
      <parameters>
        <parameter name="conn">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="237">A TpBaseConnection</doc>
        </parameter>
        <parameter name="context">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="238">A DBusGMethodInvocation</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASE_CONNECTION_GET_CLASS"
                    c:identifier="TP_BASE_CONNECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="base-connection.h" line="215"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASIC_PROXY_FACTORY"
                    c:identifier="TP_BASIC_PROXY_FACTORY"
                    introspectable="0">
      <source-position filename="basic-proxy-factory.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASIC_PROXY_FACTORY_CLASS"
                    c:identifier="TP_BASIC_PROXY_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="basic-proxy-factory.h" line="53"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BASIC_PROXY_FACTORY_GET_CLASS"
                    c:identifier="TP_BASIC_PROXY_FACTORY_GET_CLASS"
                    introspectable="0">
      <source-position filename="basic-proxy-factory.h" line="60"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="BaseClient"
           c:symbol-prefix="base_client"
           c:type="TpBaseClient"
           version="0.11.5"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="TpBaseClient"
           glib:get-type="tp_base_client_get_type"
           glib:type-struct="BaseClientClass">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="35">Data structure representing a generic #TpSvcClient implementation.</doc>
      <source-position filename="base-client.h" line="89"/>
      <function name="implement_add_dispatch_operation"
                c:identifier="tp_base_client_implement_add_dispatch_operation"
                version="0.11.5"
                introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2837">Called by subclasses to define the actual implementation of the
AddDispatchOperation() D-Bus method.

Since 0.11.13 this is exactly equivalent to setting the
#TpBaseClientClass.add_dispatch_operation function pointer.</doc>
        <source-position filename="base-client.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2839">the #TpBaseClientClass of the object</doc>
            <type name="BaseClientClass" c:type="TpBaseClientClass*"/>
          </parameter>
          <parameter name="impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2840">the #TpBaseClientClassAddDispatchOperationImpl function implementing
AddDispatchOperation()</doc>
            <type name="BaseClientClassAddDispatchOperationImpl"
                  c:type="TpBaseClientClassAddDispatchOperationImpl"/>
          </parameter>
        </parameters>
      </function>
      <function name="implement_handle_channels"
                c:identifier="tp_base_client_implement_handle_channels"
                version="0.11.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2858">Called by subclasses to define the actual implementation of the
HandleChannels() D-Bus method.

Since 0.11.13 this is exactly equivalent to setting the
#TpBaseClientClass.handle_channels function pointer.</doc>
        <source-position filename="base-client.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2860">the #TpBaseClientClass of the object</doc>
            <type name="BaseClientClass" c:type="TpBaseClientClass*"/>
          </parameter>
          <parameter name="impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2861">the #TpBaseClientClassHandleChannelsImpl function implementing
HandleCHannels()</doc>
            <type name="BaseClientClassHandleChannelsImpl"
                  c:type="TpBaseClientClassHandleChannelsImpl"/>
          </parameter>
        </parameters>
      </function>
      <function name="implement_observe_channels"
                c:identifier="tp_base_client_implement_observe_channels"
                version="0.11.5"
                introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2698">Called by subclasses to define the actual implementation of the
ObserveChannels() D-Bus method.

Since 0.11.13 this is exactly equivalent to setting the
#TpBaseClientClass.observe_channels function pointer.</doc>
        <source-position filename="base-client.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2700">the #TpBaseClientClass of the object</doc>
            <type name="BaseClientClass" c:type="TpBaseClientClass*"/>
          </parameter>
          <parameter name="impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2701">the #TpBaseClientClassObserveChannelsImpl function implementing
ObserveChannels()</doc>
            <type name="BaseClientClassObserveChannelsImpl"
                  c:type="TpBaseClientClassObserveChannelsImpl"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="add_dispatch_operation">
        <source-position filename="base-client.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="99">a #TpBaseClient instance</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="100">a #TpAccount with %TP_ACCOUNT_FEATURE_CORE, and any other
 features added via tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if
 possible</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="104">a #TpConnection with %TP_CONNECTION_FEATURE_CORE,
 and any other features added via tp_base_client_add_connection_features(),
 or tp_simple_client_factory_add_connection_features(), prepared if possible</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="107">a #GList of #TpChannel,
 each with %TP_CHANNEL_FEATURE_CORE, and any other features added via
 tp_base_client_add_channel_features() or
 tp_simple_client_factory_add_channel_features(), prepared if possible</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Channel"/>
            </type>
          </parameter>
          <parameter name="dispatch_operation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="111">a #TpChannelDispatchOperation having
%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE prepared if possible</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="113">a #TpObserveChannelsContext representing the context of this
 D-Bus call</doc>
            <type name="AddDispatchOperationContext"
                  c:type="TpAddDispatchOperationContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_channels">
        <source-position filename="base-client.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="132">a #TpBaseClient instance</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="133">a #TpAccount with %TP_ACCOUNT_FEATURE_CORE, and any other
 features added via tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if
 possible</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="137">a #TpConnection with %TP_CONNECTION_FEATURE_CORE,
 and any other features added via tp_base_client_add_connection_features(),
 or tp_simple_client_factory_add_connection_features(), prepared if possible</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="140">a #GList of #TpChannel,
 each with %TP_CHANNEL_FEATURE_CORE, and any other features added via
 tp_base_client_add_channel_features() or
 tp_simple_client_factory_add_channel_features(), prepared if possible</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Channel"/>
            </type>
          </parameter>
          <parameter name="requests_satisfied" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="144">a #GList of
 #TpChannelRequest having their object-path defined but are not guaranteed
 to be prepared.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ChannelRequest"/>
            </type>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="147">the time at which user action occurred, or one of the
 special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME
 (see #TpAccountChannelRequest:user-action-time for details)</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="151">a #TpHandleChannelsContext representing the context of this
 D-Bus call</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="observe_channels">
        <source-position filename="base-client.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="68">a #TpBaseClient instance</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="69">a #TpAccount with %TP_ACCOUNT_FEATURE_CORE, and any other
 features added via tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if
 possible</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="73">a #TpConnection with %TP_CONNECTION_FEATURE_CORE,
 and any other features added via tp_base_client_add_connection_features(),
 or tp_simple_client_factory_add_connection_features(), prepared if possible</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="76">a #GList of #TpChannel,
 each with %TP_CHANNEL_FEATURE_CORE, and any other features added via
 tp_base_client_add_channel_features() or
 tp_simple_client_factory_add_channel_features(), prepared if possible</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Channel"/>
            </type>
          </parameter>
          <parameter name="dispatch_operation"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="80">a #TpChannelDispatchOperation or %NULL;
 the dispatch_operation is not guaranteed to be prepared</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </parameter>
          <parameter name="requests" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="82">a #GList of
 #TpChannelRequest having their object-path defined but are not guaranteed
 to be prepared.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ChannelRequest"/>
            </type>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="85">a #TpObserveChannelsContext representing the context of this
 D-Bus call</doc>
            <type name="ObserveChannelsContext"
                  c:type="TpObserveChannelsContext*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_account_features"
              c:identifier="tp_base_client_add_account_features"
              version="0.11.14"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3021">Request that the given features are prepared on each #TpAccount (in
addition to %TP_ACCOUNT_FEATURE_CORE) before calling
#TpBaseClientClass.observe_channels,
#TpBaseClientClass.add_dispatch_operation or
#TpBaseClientClass.handle_channels, or emitting
#TpBaseClient::request-added.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_simple_client_factory_add_account_features() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3023">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3024">the features</doc>
            <array length="1" zero-terminated="0" c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3025">the number of features, or -1 if @features is 0-terminated</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_account_features_varargs"
              c:identifier="tp_base_client_add_account_features_varargs"
              version="0.11.14"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2937">The same as tp_base_client_add_account_features(), but with a more
convenient calling convention from C.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_simple_client_factory_add_account_features_varargs() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2939">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2940">the first feature</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2941">the second and subsequent features, if any, ending with 0</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_approver_filter"
              c:identifier="tp_base_client_add_approver_filter"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="535">Register a new channel class as Approver.ApproverChannelFilter.
The #TpBaseClientClass.add_dispatch_operation virtual method will be called
whenever a new channel's properties match the ones in @filter.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.add_dispatch_operation.</doc>
        <source-position filename="base-client.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="537">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="538">
a %TP_HASH_TYPE_CHANNEL_CLASS</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="add_approver_filter_vardict"
              c:identifier="tp_base_client_add_approver_filter_vardict"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="595">Register a new channel class as Approver.ApproverChannelFilter.
The #TpBaseClientClass.add_dispatch_operation virtual method will be called
whenever a new channel's properties match the ones in @filter.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.add_dispatch_operation.

If the variant is floating (see g_variant_ref_sink()), ownership
will be taken. See tp_base_client_add_observer_filter_vardict() for
more details.</doc>
        <source-position filename="base-client.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="597">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="598">a variant of type %G_VARIANT_TYPE_VARDICT</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_features"
              c:identifier="tp_base_client_add_channel_features"
              version="0.11.14"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3050">Request that the given features are prepared on each #TpChannel (in
addition to %TP_CHANNEL_FEATURE_CORE) before calling
#TpBaseClientClass.observe_channels,
#TpBaseClientClass.add_dispatch_operation or
#TpBaseClientClass.handle_channels.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_simple_client_factory_add_channel_features() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3052">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3053">the features</doc>
            <array length="1" zero-terminated="0" c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3054">the number of features, or -1 if @features is 0-terminated</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_features_varargs"
              c:identifier="tp_base_client_add_channel_features_varargs"
              version="0.11.14"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2993">The same as tp_base_client_add_channel_features(), but with a more
convenient calling convention from C.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_simple_client_factory_add_channel_features_varargs() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2995">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2996">the first feature</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2997">the second and subsequent features, if any, ending with 0</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_features"
              c:identifier="tp_base_client_add_connection_features"
              version="0.11.14"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3077">Request that the given features are prepared on each #TpConnection (in
addition to %TP_CONNECTION_FEATURE_CORE) before calling
#TpBaseClientClass.observe_channels,
#TpBaseClientClass.add_dispatch_operation or
#TpBaseClientClass.handle_channels.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_simple_client_factory_add_connection_features() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3079">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3080">the features</doc>
            <array length="1" zero-terminated="0" c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3081">the number of features, or -1 if @features is 0-terminated</doc>
            <type name="gssize" c:type="gssize"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_features_varargs"
              c:identifier="tp_base_client_add_connection_features_varargs"
              version="0.11.14"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2965">The same as tp_base_client_add_connection_features(), but with a more
convenient calling convention from C.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_simple_client_factory_add_connection_features_varargs() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2967">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2968">the first feature</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2969">the second and subsequent features, if any, ending with 0</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_handler_capabilities"
              c:identifier="tp_base_client_add_handler_capabilities"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="854">Add several capability tokens to this client. These are used to signal
that Telepathy connection managers should advertise certain capabilities
to other contacts, such as the ability to receive audio/video calls using
particular streaming protocols and codecs.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="856">a client, which must not have been registered with
 tp_base_client_register() yet</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="tokens" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="858">capability
 tokens as defined by the Telepathy D-Bus API Specification</doc>
            <array c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_handler_capabilities_varargs"
              c:identifier="tp_base_client_add_handler_capabilities_varargs"
              version="0.11.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="888">Convenience C API equivalent to calling
tp_base_client_add_handler_capability() for each capability token.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="890">a client, which must not have been registered with
 tp_base_client_register() yet</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="first_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="892">a capability token from the Telepathy D-Bus API Specification</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="893">more tokens, ending with %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_handler_capability"
              c:identifier="tp_base_client_add_handler_capability"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="825">Add one capability token to this client, as if via
tp_base_client_add_handler_capabilities().

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="827">a client, which must not have been registered with
 tp_base_client_register() yet</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="829">a capability token as defined by the Telepathy D-Bus API
 Specification</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_handler_filter"
              c:identifier="tp_base_client_add_handler_filter"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="651">Register a new channel class as Handler.HandlerChannelFilter.
The #TpBaseClientClass.handle_channels virtual method will be called
whenever a new channel's properties match the ones in @filter.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="653">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="654">
a %TP_HASH_TYPE_CHANNEL_CLASS</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="add_handler_filter_vardict"
              c:identifier="tp_base_client_add_handler_filter_vardict"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="712">Register a new channel class as Handler.HandlerChannelFilter.
The #TpBaseClientClass.handle_channels virtual method will be called
whenever a new channel's properties match the ones in @filter.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.

If the variant is floating (see g_variant_ref_sink()), ownership
will be taken. See tp_base_client_add_observer_filter_vardict() for
more details.</doc>
        <source-position filename="base-client.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="714">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="715">a variant of type %G_VARIANT_TYPE_VARDICT</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_observer_filter"
              c:identifier="tp_base_client_add_observer_filter"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="352">Register a new channel class as Observer.ObserverChannelFilter.
The #TpBaseClientClass.observe_channels virtual method will be called
whenever a new channel's properties match the ones in @filter.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.observe_channels.</doc>
        <source-position filename="base-client.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="354">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="355">
a %TP_HASH_TYPE_CHANNEL_CLASS</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="add_observer_filter_vardict"
              c:identifier="tp_base_client_add_observer_filter_vardict"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="412">Register a new channel class as Observer.ObserverChannelFilter.
The #TpBaseClientClass.observe_channels virtual method will be called
whenever a new channel's properties match the ones in @filter.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.observe_channels.

If the variant is floating (see g_variant_ref_sink()), ownership
will be taken, allowing for uses like this:

|[
tp_base_client_add_observer_filter_vardict (client,
   g_variant_new_parsed ("{ %s: &lt;%s&gt;, %s: &lt;%u&gt;, ... }",
       TP_PROP_CHANNEL_CHANNEL_TYPE, TP_IFACE_CHANNEL_TYPE_TEXT,
       TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, (guint32) TP_HANDLE_TYPE_CONTACT,
       ...));
]|</doc>
        <source-position filename="base-client.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="414">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="415">a variant of type %G_VARIANT_TYPE_VARDICT</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="be_a_handler"
              c:identifier="tp_base_client_be_a_handler"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="625">Register @self as a Client.Handler with an empty list of filters.
This is useful if you want to create a client that only handle channels
for which it's the PreferredHandler.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="627">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delegate_channels_async"
              c:identifier="tp_base_client_delegate_channels_async"
              version="0.15.0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3327">Asynchronously calls DelegateChannels on the ChannelDispatcher to try
stopping handling @channels and pass them to another Handler.
You can then call tp_base_client_delegate_channels_finish() to
get the result of the operation.</doc>
        <source-position filename="base-client.h" line="225"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3329">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="channels" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3330">a #GList of #TpChannel
handled by @self</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Channel"/>
            </type>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3332">the time at which user action occurred,
or #TP_USER_ACTION_TIME_NOT_USER_ACTION if this delegation request is
for some reason not involving user action.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="preferred_handler" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3335">Either the well-known bus name (starting with
%TP_CLIENT_BUS_NAME_BASE) of the preferred handler for the channels,
or %NULL to indicate that any handler but @self would be acceptable.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3338">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3339">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delegate_channels_finish"
              c:identifier="tp_base_client_delegate_channels_finish"
              version="0.15.0"
              throws="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3398">Finishes an async channels delegation request started using
tp_base_client_delegate_channels_async().</doc>
        <source-position filename="base-client.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="3414">%TRUE if the operation succeed, @delegated and @not_delegated
can be used to know the channels that @self is not handling any more,
otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3400">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3401">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="delegated"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3402">
if not %NULL, used to return a #GPtrArray containing the #TpChannel&lt;!-- --&gt;s
which have been properly delegated</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Channel"/>
            </array>
          </parameter>
          <parameter name="not_delegated"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3405">
if not not %NULL, used to return a #GHashTable mapping #TpChannel&lt;!-- --&gt;s
which have not been delegated to a #GError explaining the reason of
the failure</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="Channel"/>
              <type name="GLib.Error"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="dup_handled_channels"
              c:identifier="tp_base_client_dup_handled_channels"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1087">Returns the set of channels currently handled by this base client or by any
other #TpBaseClient with which it shares a unique name.</doc>
        <source-position filename="base-client.h" line="219"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="1094">the
handled channels</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1089">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_pending_requests"
              c:identifier="tp_base_client_dup_pending_requests"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1065">Only works if tp_base_client_set_handler_request_notification() has been
called.
Returns the list of requests @self is likely be asked to handle.</doc>
        <source-position filename="base-client.h" line="217"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="1073">a
#GList of #TpChannelRequest</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1067">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_account_manager"
              c:identifier="tp_base_client_get_account_manager"
              glib:get-property="account-manager"
              version="0.11.14"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2812">Return the #TpBaseClient:account-manager construct-only property, which
is the account manager used to look up or create #TpAccount objects.

The returned object's reference count is not incremented, so it is not
necessarily valid after @self is destroyed.

It is not guaranteed that any particular features are prepared on this
object; enable and wait for features with tp_proxy_prepare_async().</doc>
        <doc-deprecated xml:space="preserve">New code should not use this function, it may return %NULL in
 the case @self was constructed with a #TpSimpleClientFactory.</doc-deprecated>
        <source-position filename="base-client.h" line="247"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="2825">the value of #TpBaseClient:account-manager</doc>
          <type name="AccountManager" c:type="TpAccountManager*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2814">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bus_name"
              c:identifier="tp_base_client_get_bus_name"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2719">Return the bus name of @self. Note that doesn't mean the client is
actually owning this name; for example if tp_base_client_register()
has not been called yet or failed.</doc>
        <source-position filename="base-client.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="2727">the bus name of the client</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2721">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel_factory"
              c:identifier="tp_base_client_get_channel_factory"
              glib:get-property="channel-factory"
              version="0.13.2"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3139">Return the #TpBaseClient:channel-factory property.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.5. The factory is taken from
 #TpBaseClient:account-manager.</doc-deprecated>
        <source-position filename="base-client.h" line="184"/>
        <return-value>
          <doc xml:space="preserve"
               filename="base-client.c"
               line="3145">the value of #TpBaseClient:channel-factory</doc>
          <type name="ClientChannelFactory" c:type="TpClientChannelFactory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3141">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dbus_daemon"
              c:identifier="tp_base_client_get_dbus_daemon"
              glib:get-property="dbus-daemon"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2792">Return the #TpBaseClient:dbus-daemon construct-only property, which
represents the D-Bus connection used to export this client object.

The returned object's reference count is not incremented, so it is not
necessarily valid after @self is destroyed.</doc>
        <source-position filename="base-client.h" line="243"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="2802">the value of #TpBaseClient:dbus-daemon</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2794">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handled_channels"
              c:identifier="tp_base_client_get_handled_channels"
              version="0.11.6"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1019">Returns the set of channels currently handled by this base client or by any
other #TpBaseClient with which it shares a unique name.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_base_client_dup_handled_channels() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="213"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="1026">the
handled channels</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1021">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_base_client_get_name"
              glib:get-property="name"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2757">Return the #TpBaseClient:name construct-only property, which is used as
part of the bus name and object path.</doc>
        <source-position filename="base-client.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="2764">the value of #TpBaseClient:name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2759">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="tp_base_client_get_object_path"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2738">Return the object path of @self. Note that doesn't mean the client is
actually registered on this path; for example if tp_base_client_register()
has not been called yet or failed.</doc>
        <source-position filename="base-client.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="2746">the object path of the client</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2740">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pending_requests"
              c:identifier="tp_base_client_get_pending_requests"
              version="0.11.6"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="996">Only works if tp_base_client_set_handler_request_notification() has been
called.
Returns the list of requests @self is likely be asked to handle.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_base_client_dup_pending_requests() instead.</doc-deprecated>
        <source-position filename="base-client.h" line="211"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="1004">a
#GList of #TpChannelRequest</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="998">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uniquify_name"
              c:identifier="tp_base_client_get_uniquify_name"
              glib:get-property="uniquify-name"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2774">Return the #TpBaseClient:uniquify-name construct-only property; if this
is true, the bus name and object path will be made unique by appending
a suffix that includes the D-Bus unique name and a per-process counter.</doc>
        <source-position filename="base-client.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="2782">the value of #TpBaseClient:uniquify-name</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2776">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_handling_channel"
              c:identifier="tp_base_client_is_handling_channel"
              version="0.14.5">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3158">Check if @self is currently handling @channel.</doc>
        <source-position filename="base-client.h" line="221"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="3165">%TRUE if @self is handling @channel, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3160">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3161">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register"
              c:identifier="tp_base_client_register"
              version="0.11.5"
              throws="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="922">Publish @self as an available client. After this method is called, as long
as it continues to exist, it will receive and process whatever events were
requested via the various filters.

Methods that set the filters and other immutable state, such as
tp_base_client_add_observer_filter(), cannot be called after this one.</doc>
        <source-position filename="base-client.h" line="204"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="935">%TRUE if the client was registered successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="924">a #TpBaseClient, which must not have been registered with
 tp_base_client_register() yet</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_channel_factory"
              c:identifier="tp_base_client_set_channel_factory"
              version="0.13.2"
              deprecated="1">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3104">Change the value of the #TpBaseClient:channel-factory property.
It can't be changed once @self has been registered.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.5. The factory is taken from
 #TpBaseClient:account-manager.</doc-deprecated>
        <source-position filename="base-client.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3106">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3107">an object implementing the #TpClientChannelFactoryInterface
interface</doc>
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_delegated_channels_callback"
              c:identifier="tp_base_client_set_delegated_channels_callback"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="3447">Turn on support for
the org.freedesktop.Telepathy.ChannelRequest.DelegateToPreferredHandler
hint.

When receiving a request containing this hint, @self will automatically
delegate the channels to the preferred handler of the request and then call
@callback to inform the client that it is no longer handling those
channels.</doc>
        <source-position filename="base-client.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3449">a #TpBaseClient implementing Handler</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3450">function called when channels currently handled by @self are
delegated, may not be %NULL</doc>
            <type name="BaseClientDelegatedChannelsCb"
                  c:type="TpBaseClientDelegatedChannelsCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3452">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="3453">called with the @user_data as argument, when @self is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handler_bypass_approval"
              c:identifier="tp_base_client_set_handler_bypass_approval"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="742">Set whether the channels destined for this handler are automatically
handled, without invoking approvers.
(This is implemented by setting the value of its BypassApproval
D-Bus property.)

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="744">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="bypass_approval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="745">the value of the Handler.BypassApproval property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handler_request_notification"
              c:identifier="tp_base_client_set_handler_request_notification"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="780">Indicate that @self is a Handler willing to be notified about requests for
channels that it is likely to be asked to handle. This means that the
#TpBaseClient::request-added and #TpBaseClient::request-removed signals will
be fired and tp_base_client_get_pending_requests() will return the list of
pending requests.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.handle_channels.</doc>
        <source-position filename="base-client.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="782">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_observer_delay_approvers"
              c:identifier="tp_base_client_set_observer_delay_approvers"
              version="0.13.16">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="494">Set whether the channel dispatcher should wait for
tp_observe_channels_context_accept() or tp_observe_channels_context_fail()
to be called before calling
#TpBaseClientClass.add_dispatch_operation on appropriate Approvers.

This is implemented by setting the value of the DelayApprovers
D-Bus property.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.observe_channels.</doc>
        <source-position filename="base-client.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="496">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="delay" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="497">the value of the Observer.DelayApprovers property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_observer_recover"
              c:identifier="tp_base_client_set_observer_recover"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="449">Set whether the channel dispatcher should attempt to recover
this Observer if it crashes. (This is implemented by setting
the value of its Recover D-Bus property.)

Normally, Observers are only notified when new channels
appear. If an Observer is set to recover, when it registers with
tp_base_client_register(), it will also be told about any channels
that already existed before it started.

For Observers that are activatable as a D-Bus service, if the
Observer exits or crashes while there are any channels that match
its filter, it will automatically be restarted by service-activation.

This method may only be called before tp_base_client_register() is
called, and may only be called on objects whose class implements
#TpBaseClientClass.observe_channels.</doc>
        <source-position filename="base-client.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="451">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="recover" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="452">the value of the Observer.Recover property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_approver_filter"
              c:identifier="tp_base_client_take_approver_filter"
              version="0.11.5"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="560">The same as tp_base_client_add_approver_filter(), but ownership of @filter
is taken by @self. This makes it convenient to call using tp_asv_new():

|[
tp_base_client_take_approver_filter (client,
   tp_asv_new (
       TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING,
           TP_IFACE_CHANNEL_TYPE_TEXT,
       TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT,
           TP_HANDLE_TYPE_CONTACT,
       ...));
]|</doc>
        <source-position filename="base-client.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="562">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="563">
a %TP_HASH_TYPE_CHANNEL_CLASS, ownership of which is taken by @self</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="take_handler_filter"
              c:identifier="tp_base_client_take_handler_filter"
              version="0.11.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="677">The same as tp_base_client_add_handler_filter(), but ownership of @filter
is taken by @self. This makes it convenient to call using tp_asv_new():

|[
tp_base_client_take_handler_filter (client,
   tp_asv_new (
       TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING,
           TP_IFACE_CHANNEL_TYPE_TEXT,
       TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT,
           TP_HANDLE_TYPE_CONTACT,
       ...));
]|</doc>
        <source-position filename="base-client.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="679">a #TpBaseClient</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="680">
a %TP_HASH_TYPE_CHANNEL_CLASS, ownership of which is taken by @self</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="take_observer_filter"
              c:identifier="tp_base_client_take_observer_filter"
              version="0.11.5"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="377">The same as tp_base_client_add_observer_filter(), but ownership of @filter
is taken by @self. This makes it convenient to call using tp_asv_new():

|[
tp_base_client_take_observer_filter (client,
   tp_asv_new (
       TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING,
           TP_IFACE_CHANNEL_TYPE_TEXT,
       TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT,
           TP_HANDLE_TYPE_CONTACT,
       ...));
]|</doc>
        <source-position filename="base-client.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="379">a client</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="380">
a %TP_HASH_TYPE_CHANNEL_CLASS, ownership of which is taken by @self</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="unregister"
              c:identifier="tp_base_client_unregister"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="2879">Remove this client object from D-Bus, if tp_base_client_register()
has already been called.

If the object is not registered, this method may be called, but has
no effect.

Releasing the last reference to the object also has the same effect
as calling this method, but this method should be preferred, as it
has more deterministic behaviour.

If the object still exists, tp_base_client_register() may be used to
attempt to register it again.</doc>
        <source-position filename="base-client.h" line="250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="2881">a client, which may already have been registered with
 tp_base_client_register(), or not</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="account-manager"
                version="0.11.14"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_account_manager">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1534">Account manager for this base client, used to look up or create
#TpAccount objects. This may be specified in the constructor in order
to get existing #TpAccount objects.

It is not guaranteed that any of its features have been prepared, and
it is not necessary to wait for any features before specifying this
property in the constructor.

Clients that interact with the #TpAccount should usually
set this property instead of #TpBaseClient:dbus-daemon. Doing this
will ensure that each account, connection or contact is represented by
a single #TpAccount, #TpConnection or #TpContact object, shared between
all the cooperating modules that have the same #TpAccountManager.

If the #TpBaseClient:dbus-daemon is set to the result of
tp_dbus_daemon_dup(), then this property defaults to
the result of tp_account_manager_dup().

This property may be %NULL initially, but will always be non-%NULL
after the #TpBaseClient has been constructed.

It is an error to specify both a non-%NULL account manager, and a
non-%NULL #TpBaseClient:dbus-daemon that is not the same as the
account manager's #TpProxy:dbus-daemon.</doc>
        <doc-deprecated xml:space="preserve">New code should not use this property, it may be %NULL in
 the case @self was constructed with a #TpSimpleClientFactory.</doc-deprecated>
        <type name="AccountManager"/>
      </property>
      <property name="channel-factory"
                version="0.13.2"
                deprecated="1"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_channel_factory">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1619">The object implementing the #TpClientChannelFactoryInterface interface
that will be used to create channel proxies. While
tp_base_client_register() has not yet been called, this property can be
changed using tp_base_client_set_channel_factory().

If no channel factory is specified then #TpAutomaticProxyFactory is used.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.5. The factory is taken from
 #TpBaseClient:account-manager.</doc-deprecated>
        <type name="GObject.Object"/>
      </property>
      <property name="dbus-daemon"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_dbus_daemon">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1513">#TpDBusDaemon object encapsulating this object's connection to D-Bus.
Read-only except during construction.

This property can't be %NULL after construction.

Since 0.11.14 this property may be %NULL or unspecified in
g_object_new(), but only if #TpBaseClient:account-manager is provided
instead, in which case its #TpProxy:dbus-daemon property will be
used.</doc>
        <type name="DBusDaemon"/>
      </property>
      <property name="factory"
                version="0.15.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1573">Factory for this base client, used to look up or create
#TpAccount objects.</doc>
        <type name="SimpleClientFactory"/>
      </property>
      <property name="name"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1588">The name of the client. This is used to register the D-Bus service name
and object path of the service.

This property can't be %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uniquify-name"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_uniquify_name"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1604">If %TRUE, tp_base_client_register() will append an unique token to the
service bus name and object path to ensure they are unique.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BaseClientPrivate" c:type="TpBaseClientPrivate*"/>
      </field>
      <glib:signal name="request-added"
                   when="last"
                   detailed="1"
                   version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1640">Emitted when a channels have been requested, and that if the
request is successful, they will probably be handled by this Handler.

This signal is only fired if
tp_base_client_set_handler_request_notification() has been called
on @self previously.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1643">the #TpAccount on which the request was made,
 with %TP_ACCOUNT_FEATURE_CORE, and any other features added via
 tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if possible</doc>
            <type name="Account"/>
          </parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1647">a #TpChannelRequest having its object-path defined but
is not guaranteed to be prepared.</doc>
            <type name="ChannelRequest"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="request-removed"
                   when="last"
                   detailed="1"
                   version="0.11.6">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="1667">Emitted when a request has failed and should be disregarded.

This signal is only fired if
tp_base_client_set_handler_request_notification() has been called
on @self previously.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1670">the #TpChannelRequest being removed</doc>
            <type name="ChannelRequest"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1671">the name of the D-Bus error with which the request failed.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-client.c"
                 line="1672">any message supplied with the D-Bus error.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="BaseClientClass"
            c:type="TpBaseClientClass"
            glib:is-gtype-struct-for="BaseClient"
            version="0.11.5">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="43">The class of a #TpBaseClient.

The virtual methods @observe_channels, @add_dispatch_operation and
@handle_channels can be also implemented by calling
tp_base_client_implement_observe_channels(),
tp_base_client_implement_add_dispatch_operation() and
tp_base_client_implement_handle_channels(). This is compatible with
telepathy-glib versions older than 0.11.13.</doc>
      <source-position filename="base-client.h" line="89"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="45">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="observe_channels">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="46">the function called to observe newly-created channels
 matching this client's observer filter (since 0.11.13)</doc>
        <type name="BaseClientClassObserveChannelsImpl"
              c:type="TpBaseClientClassObserveChannelsImpl"/>
      </field>
      <field name="add_dispatch_operation">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="48">the function called to request user approval of
 unrequested (incoming) channels matching this client's approver filter
 (since 0.11.13)</doc>
        <type name="BaseClientClassAddDispatchOperationImpl"
              c:type="TpBaseClientClassAddDispatchOperationImpl"/>
      </field>
      <field name="handle_channels">
        <doc xml:space="preserve"
             filename="base-client.c"
             line="51">the function called to handle channels matching this
 client's handler filter (since 0.11.13)</doc>
        <type name="BaseClientClassHandleChannelsImpl"
              c:type="TpBaseClientClassHandleChannelsImpl"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="dbus_properties_class" readable="0" private="1">
        <type name="DBusPropertiesMixinClass"
              c:type="TpDBusPropertiesMixinClass"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BaseClientClassPrivate"
              c:type="TpBaseClientClassPrivate*"/>
      </field>
    </record>
    <callback name="BaseClientClassAddDispatchOperationImpl"
              c:type="TpBaseClientClassAddDispatchOperationImpl"
              version="0.11.5">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="97">Signature of the implementation of the AddDispatchOperation method.

This function must call either tp_add_dispatch_operation_context_accept(),
tp_add_dispatch_operation_context_delay() or
tp_add_dispatch_operation_context_fail() on @context before it returns.

The implementation can then use
tp_channel_dispatch_operation_handle_with_async() to approve handling of the
channels, or tp_channel_dispatch_operation_claim_async() to take
responsibility for handling or closing them".</doc>
      <source-position filename="base-client.h" line="62"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="99">a #TpBaseClient instance</doc>
          <type name="BaseClient" c:type="TpBaseClient*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="100">a #TpAccount with %TP_ACCOUNT_FEATURE_CORE, and any other
 features added via tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if
 possible</doc>
          <type name="Account" c:type="TpAccount*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="104">a #TpConnection with %TP_CONNECTION_FEATURE_CORE,
 and any other features added via tp_base_client_add_connection_features(),
 or tp_simple_client_factory_add_connection_features(), prepared if possible</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="107">a #GList of #TpChannel,
 each with %TP_CHANNEL_FEATURE_CORE, and any other features added via
 tp_base_client_add_channel_features() or
 tp_simple_client_factory_add_channel_features(), prepared if possible</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </parameter>
        <parameter name="dispatch_operation" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="111">a #TpChannelDispatchOperation having
%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE prepared if possible</doc>
          <type name="ChannelDispatchOperation"
                c:type="TpChannelDispatchOperation*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="113">a #TpObserveChannelsContext representing the context of this
 D-Bus call</doc>
          <type name="AddDispatchOperationContext"
                c:type="TpAddDispatchOperationContext*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseClientClassHandleChannelsImpl"
              c:type="TpBaseClientClassHandleChannelsImpl"
              version="0.11.6">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="130">Signature of the implementation of the HandleChannels method.

This function must call either tp_handle_channels_context_accept(),
tp_handle_channels_context_delay() or tp_handle_channels_context_fail()
on @context before it returns.</doc>
      <source-position filename="base-client.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="132">a #TpBaseClient instance</doc>
          <type name="BaseClient" c:type="TpBaseClient*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="133">a #TpAccount with %TP_ACCOUNT_FEATURE_CORE, and any other
 features added via tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if
 possible</doc>
          <type name="Account" c:type="TpAccount*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="137">a #TpConnection with %TP_CONNECTION_FEATURE_CORE,
 and any other features added via tp_base_client_add_connection_features(),
 or tp_simple_client_factory_add_connection_features(), prepared if possible</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="140">a #GList of #TpChannel,
 each with %TP_CHANNEL_FEATURE_CORE, and any other features added via
 tp_base_client_add_channel_features() or
 tp_simple_client_factory_add_channel_features(), prepared if possible</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </parameter>
        <parameter name="requests_satisfied" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="144">a #GList of
 #TpChannelRequest having their object-path defined but are not guaranteed
 to be prepared.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </parameter>
        <parameter name="user_action_time" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="147">the time at which user action occurred, or one of the
 special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME
 (see #TpAccountChannelRequest:user-action-time for details)</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="151">a #TpHandleChannelsContext representing the context of this
 D-Bus call</doc>
          <type name="HandleChannelsContext"
                c:type="TpHandleChannelsContext*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseClientClassObserveChannelsImpl"
              c:type="TpBaseClientClassObserveChannelsImpl"
              version="0.11.5">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="66">Signature of the implementation of the ObserveChannels method.

This function must call either tp_observe_channels_context_accept(),
tp_observe_channels_context_delay() or tp_observe_channels_context_fail()
on @context before it returns.</doc>
      <source-position filename="base-client.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="68">a #TpBaseClient instance</doc>
          <type name="BaseClient" c:type="TpBaseClient*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="69">a #TpAccount with %TP_ACCOUNT_FEATURE_CORE, and any other
 features added via tp_base_client_add_account_features() or
 tp_simple_client_factory_add_account_features(), prepared if
 possible</doc>
          <type name="Account" c:type="TpAccount*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="73">a #TpConnection with %TP_CONNECTION_FEATURE_CORE,
 and any other features added via tp_base_client_add_connection_features(),
 or tp_simple_client_factory_add_connection_features(), prepared if possible</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="76">a #GList of #TpChannel,
 each with %TP_CHANNEL_FEATURE_CORE, and any other features added via
 tp_base_client_add_channel_features() or
 tp_simple_client_factory_add_channel_features(), prepared if possible</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </parameter>
        <parameter name="dispatch_operation"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="80">a #TpChannelDispatchOperation or %NULL;
 the dispatch_operation is not guaranteed to be prepared</doc>
          <type name="ChannelDispatchOperation"
                c:type="TpChannelDispatchOperation*"/>
        </parameter>
        <parameter name="requests" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="82">a #GList of
 #TpChannelRequest having their object-path defined but are not guaranteed
 to be prepared.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="85">a #TpObserveChannelsContext representing the context of this
 D-Bus call</doc>
          <type name="ObserveChannelsContext"
                c:type="TpObserveChannelsContext*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="BaseClientClassPrivate"
            c:type="TpBaseClientClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="base-client.h" line="51"/>
    </record>
    <callback name="BaseClientDelegatedChannelsCb"
              c:type="TpBaseClientDelegatedChannelsCb"
              version="0.15.3">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="163">Called when a client asked us to delegate @channels to another Handler.
When this function is called @client is not longer handling @channels.</doc>
      <source-position filename="base-client.h" line="188"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="165">a #TpBaseClient instance</doc>
          <type name="BaseClient" c:type="TpBaseClient*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="166">a #GPtrArray of #TpChannel</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Channel"/>
          </array>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="base-client.c"
               line="167">arbitrary user-supplied data passed to
tp_base_client_set_delegated_channels_callback()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="BaseClientPrivate"
            c:type="TpBaseClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="base-client.h" line="50"/>
    </record>
    <class name="BaseConnection"
           c:symbol-prefix="base_connection"
           c:type="TpBaseConnection"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="TpBaseConnection"
           glib:get-type="tp_base_connection_get_type"
           glib:type-struct="BaseConnectionClass">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="212">Data structure representing a generic #TpSvcConnection implementation.

Since 0.19.1, accessing the fields of this structure is deprecated.
Use tp_base_connection_get_bus_name(), tp_base_connection_get_object_path(),
tp_base_connection_get_status(), tp_base_connection_get_self_handle()
instead.</doc>
      <source-position filename="base-connection.h" line="121"/>
      <function name="channel_manager_iter_init"
                c:identifier="tp_base_connection_channel_manager_iter_init"
                version="0.7.15"
                introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="3926">Initializes an iterator over the #TpChannelManager objects known to
@self.  It is intended to be used as followed:

&lt;informalexample&gt;&lt;programlisting&gt;
TpChannelManagerIter iter;
TpChannelManager *manager;

tp_base_connection_channel_manager_iter_init (&amp;amp;iter, base_conn);
while (tp_base_connection_channel_manager_iter_next (&amp;amp;iter, &amp;amp;manager))
  {
    ...do something with manager...
  }
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="base-connection.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3928">an uninitialized #TpChannelManagerIter</doc>
            <type name="ChannelManagerIter" c:type="TpChannelManagerIter*"/>
          </parameter>
          <parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3929">a connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </parameter>
        </parameters>
      </function>
      <function name="channel_manager_iter_next"
                c:identifier="tp_base_connection_channel_manager_iter_next"
                version="0.7.15"
                introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="3958">Advances @iter, and retrieves the #TpChannelManager it now points to.  If
there are no more channel managers, @manager_out is not set and %FALSE is
returned.</doc>
        <source-position filename="base-connection.h" line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="3967">%FALSE if there are no more channel managers; else %TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3960">an initialized #TpChannelManagerIter</doc>
            <type name="ChannelManagerIter" c:type="TpChannelManagerIter*"/>
          </parameter>
          <parameter name="manager_out" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3961">a location to store the channel manager, or %NULL.</doc>
            <type c:type="TpChannelManager**"/>
          </parameter>
        </parameters>
      </function>
      <function name="dbus_request_handles"
                c:identifier="tp_base_connection_dbus_request_handles"
                introspectable="0"
                deprecated="1"
                deprecated-version="0.19.0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2725">Implements D-Bus method RequestHandles on interface
org.freedesktop.Telepathy.Connection.

This was exported so subclasses could use it as a basis for their
reimplementations, but reimplementing the method is now deprecated.</doc>
        <source-position filename="base-connection.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2727">A pointer to #TpBaseConnection, cast to a pointer to
 #TpSvcConnection</doc>
            <type c:type="TpSvcConnection*"/>
          </parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2729">The handle type (#TpHandleType) as a guint</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2730">A strv of handle names</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2731">The dbus-glib method invocation context</doc>
            <type c:type="DBusGMethodInvocation*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="connected">
        <source-position filename="base-connection.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="40">The connection object</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connecting">
        <source-position filename="base-connection.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="40">The connection object</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_channel_factories" introspectable="0">
        <source-position filename="base-connection.h" line="54"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="95">a GPtrArray of objects implementing
 #TpChannelFactoryIface which, between them, implement all channel types
 this Connection supports.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="90">The implementation, a subclass of TpBaseConnection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_channel_managers" introspectable="0">
        <source-position filename="base-connection.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="107">a GPtrArray of objects implementing
 #TpChannelManager which, between them, implement all channel types this
 Connection supports.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="102">The implementation, a subclass of TpBaseConnection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnected">
        <source-position filename="base-connection.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="40">The connection object</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_interfaces_always_present" introspectable="0">
        <source-position filename="base-connection.h" line="63"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="150">a #GPtrArray of static strings for D-Bus
  interfaces implemented by this client.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="126">a #TpBaseConnection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_unique_connection_name">
        <source-position filename="base-connection.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="119">a name for this connection which will be unique
 within this connection manager process, as a string which the caller must
 free with #g_free.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="114">The implementation, a subclass of TpBaseConnection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="shut_down">
        <source-position filename="base-connection.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="40">The connection object</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start_connecting" throws="1">
        <source-position filename="base-connection.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="75">%FALSE if failure has already occurred, else %TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="48">The connection object</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="add_client_interest"
              c:identifier="tp_base_connection_add_client_interest">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="3405">Add a "client interest" for @token on behalf of the given client.

This emits #TpBaseConnection::clients-interested if this was the first
time a client expressed an interest in this token.</doc>
        <source-position filename="base-connection.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3407">a #TpBaseConnection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="unique_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3408">the unique bus name of a D-Bus client</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3409">a D-Bus interface or a token representing part of an interface,
 added with tp_base_connection_add_possible_client_interest()</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="only_if_uninterested" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3411">only add to the interest count if the client is not
 already interested (appropriate for APIs that implicitly subscribe on first
 use if this has not been done already, like Location)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_interfaces"
              c:identifier="tp_base_connection_add_interfaces"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="3239">Add some interfaces to the list supported by this Connection. If you're
going to call this function at all, you must do so before moving to state
CONNECTED (or DISCONNECTED); if you don't call it, only the set of
interfaces always present (@get_interfaces_always_present in
#TpBaseConnectionClass) will be supported.</doc>
        <source-position filename="base-connection.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3241">A TpBaseConnection in state #TP_INTERNAL_CONNECTION_STATUS_NEW
 or #TP_CONNECTION_STATUS_CONNECTING</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="interfaces" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3243">A %NULL-terminated array of D-Bus interface names, which
 must remain valid at least until the connection enters state
 #TP_CONNECTION_STATUS_DISCONNECTED (in practice, you should either
 use static strings, or use strdup'd strings and free them in the dispose
 callback).</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_possible_client_interest"
              c:identifier="tp_base_connection_add_possible_client_interest">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1379">Add @token to the set of tokens for which this connection will emit
#TpBaseConnection::clients-interested and
#TpBaseConnection::clients-uninterested.

This method must be called from the #GObjectClass&lt;!--
--&gt;.constructed or #GObjectClass&lt;!-- --&gt;.constructor callback
(otherwise, it will run too late to be useful).</doc>
        <source-position filename="base-connection.h" line="241"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1381">a connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1382">a quark corresponding to a D-Bus interface, or a token
 representing part of a D-Bus interface, for which this connection wishes
 to be notified when clients register an interest</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="change_status"
              c:identifier="tp_base_connection_change_status">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="3042">Change the status of the connection. The allowed state transitions are:

&lt;itemizedlist&gt;
&lt;listitem&gt;#TP_INTERNAL_CONNECTION_STATUS_NEW →
   #TP_CONNECTION_STATUS_CONNECTING&lt;/listitem&gt;
&lt;listitem&gt;#TP_CONNECTION_STATUS_CONNECTING →
   #TP_CONNECTION_STATUS_CONNECTED&lt;/listitem&gt;
&lt;listitem&gt;#TP_INTERNAL_CONNECTION_STATUS_NEW →
   #TP_CONNECTION_STATUS_CONNECTED (exactly equivalent to both of the above
   one after the other; see below)&lt;/listitem&gt;
&lt;listitem&gt;anything except #TP_CONNECTION_STATUS_DISCONNECTED →
   #TP_CONNECTION_STATUS_DISCONNECTED&lt;/listitem&gt;
&lt;/itemizedlist&gt;

Before the transition to #TP_CONNECTION_STATUS_CONNECTED, the implementation
must have discovered the handle for the local user and passed it to
tp_base_connection_set_self_handle().

Changing from NEW to CONNECTED is implemented by doing the transition from
NEW to CONNECTING, followed by the transition from CONNECTING to CONNECTED;
it's exactly equivalent to calling tp_base_connection_change_status for
those two transitions one after the other.

Any other valid transition does the following, in this order:

&lt;itemizedlist&gt;
&lt;listitem&gt;Update #TpBaseConnection&lt;!-- --&gt;.status;&lt;/listitem&gt;
&lt;listitem&gt;If the new state is #TP_CONNECTION_STATUS_DISCONNECTED, call
   tp_channel_factory_iface_close_all() on all channel factories&lt;/listitem&gt;
&lt;listitem&gt;Emit the D-Bus StatusChanged signal;&lt;/listitem&gt;
&lt;listitem&gt;Call #TpBaseConnectionClass.connecting,
   #TpBaseConnectionClass.connected or #TpBaseConnectionClass.disconnected
   as appropriate;&lt;/listitem&gt;
&lt;listitem&gt;Call the channel factories' status change callbacks;&lt;/listitem&gt;
&lt;listitem&gt;If the new state is #TP_CONNECTION_STATUS_DISCONNECTED, call the
   subclass' #TpBaseConnectionClass.shut_down callback.&lt;/listitem&gt;
&lt;/itemizedlist&gt;

To provide more details about what happened when moving to @status
#TP_CONNECTION_STATUS_DISCONNECTED due to an error, consider calling
tp_base_connection_disconnect_with_dbus_error() instead of this function.

Changed in 0.7.35: the @self_handle member of #TpBaseConnection was
previously set to 0 at this stage. It now remains non-zero until the object
is disposed.</doc>
        <source-position filename="base-connection.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3044">The connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3045">The new status</doc>
            <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="3046">The reason for the status change</doc>
            <type name="ConnectionStatusReason"
                  c:type="TpConnectionStatusReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_connected"
              c:identifier="tp_base_connection_check_connected"
              version="0.19.1"
              throws="1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2193">Return whether this connection is fully active and connected.
If it is not, raise %TP_ERROR_DISCONNECTED.

This is equivalent to checking whether tp_base_connection_get_status()
returns %TP_CONNECTION_STATUS_CONNECTED; it is provided because methods
on the connection often need to make this check, and return a
#GError if it fails.</doc>
        <source-position filename="base-connection.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="2206">%TRUE if this connection is connected</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2195">the connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="disconnect_with_dbus_error"
              c:identifier="tp_base_connection_disconnect_with_dbus_error"
              version="0.7.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2921">Changes the #TpBaseConnection&lt;!-- --&gt;.status of @self to
%TP_CONNECTION_STATUS_DISCONNECTED, as if by a call to
tp_base_connection_change_status(), but additionally emits the
&lt;code&gt;ConnectionError&lt;/code&gt; D-Bus signal to provide more details about the
error.

Well-known keys for @details are documented in the Telepathy specification's
&lt;ulink url='http://telepathy.freedesktop.org/spec/Connection.html#Signal:ConnectionError'&gt;definition
of the ConnectionError signal&lt;/ulink&gt;, and include:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;code&gt;"debug-message"&lt;/code&gt;, whose value should have type
   #G_TYPE_STRING, for debugging information about the
   disconnection which should not be shown to the user&lt;/listitem&gt;
&lt;listitem&gt;&lt;code&gt;"server-message"&lt;/code&gt;, whose value should also have type
   #G_TYPE_STRING, for a human-readable error message from the server (in an
   unspecified language) explaining why the user was
   disconnected.&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <source-position filename="base-connection.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2923">The connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="error_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2924">The D-Bus error with which the connection changed status to
             Disconnected</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2926">Further details of the error, as a hash table where the keys
          are strings as defined in the Telepathy specification, and the
          values are #GValue&lt;!-- --&gt;s. %NULL is allowed, and treated as
          an empty hash table.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2930">The reason code to use in the StatusChanged signal
         (a less specific, non-extensible version of @error_name)</doc>
            <type name="ConnectionStatusReason"
                  c:type="TpConnectionStatusReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_with_dbus_error_vardict"
              c:identifier="tp_base_connection_disconnect_with_dbus_error_vardict"
              version="0.7.24"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2980">Changes the #TpBaseConnection&lt;!-- --&gt;.status of @self to
%TP_CONNECTION_STATUS_DISCONNECTED, as if by a call to
tp_base_connection_change_status(), but additionally emits the
&lt;code&gt;ConnectionError&lt;/code&gt; D-Bus signal to provide more details about the
error.

Well-known keys for @details are documented in the Telepathy specification's
&lt;ulink url='http://telepathy.freedesktop.org/spec/Connection.html#Signal:ConnectionError'&gt;definition
of the ConnectionError signal&lt;/ulink&gt;, and include:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;code&gt;"debug-message"&lt;/code&gt;, whose value should have type
   #G_TYPE_STRING, for debugging information about the
   disconnection which should not be shown to the user&lt;/listitem&gt;
&lt;listitem&gt;&lt;code&gt;"server-message"&lt;/code&gt;, whose value should also have type
   #G_TYPE_STRING, for a human-readable error message from the server (in an
   unspecified language) explaining why the user was
   disconnected.&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
        <source-position filename="base-connection.h" line="159"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2982">The connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="error_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2983">The D-Bus error with which the connection changed status to
             Disconnected</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2985">Further details of the error, as a variant of
          type %G_VARIANT_TYPE_VARDICT. The keys
          are strings as defined in the Telepathy specification, and the
          values are of type %G_VARIANT_TYPE_VARIANT.
          %NULL is allowed, and treated as an empty dictionary.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2990">The reason code to use in the StatusChanged signal
         (a less specific, non-extensible version of @error_name)</doc>
            <type name="ConnectionStatusReason"
                  c:type="TpConnectionStatusReason"/>
          </parameter>
        </parameters>
      </method>
      <method name="finish_shutdown"
              c:identifier="tp_base_connection_finish_shutdown"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2891">Tell the connection manager that this Connection has been disconnected,
has emitted StatusChanged and is ready to be removed from D-Bus.</doc>
        <source-position filename="base-connection.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2893">The connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_account_path_suffix"
              c:identifier="tp_base_connection_get_account_path_suffix"
              glib:get-property="account-path-suffix"
              version="0.23.2">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="4132">&lt;!-- --&gt;</doc>
        <source-position filename="base-connection.h" line="245"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="4138">the same value has the #TpBaseConnection:account-path-suffix
 property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="4134">the connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bus_name"
              c:identifier="tp_base_connection_get_bus_name"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="4080">Return the bus name starting with %TP_CONN_BUS_NAME_BASE that represents
this connection on D-Bus.

The returned string belongs to the #TpBaseConnection and must be copied
by the caller if it will be kept.

If this connection has never been present on D-Bus
(tp_base_connection_register() has never been called), return %NULL
instead.</doc>
        <source-position filename="base-connection.h" line="128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="4094">the bus name of this connection,
 or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="4082">the connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dbus_daemon"
              c:identifier="tp_base_connection_get_dbus_daemon"
              glib:get-property="dbus-daemon"
              version="0.11.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="4039">&lt;!-- --&gt;</doc>
        <source-position filename="base-connection.h" line="235"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="4045">the value of the
 #TpBaseConnectionManager:dbus-daemon property. The caller must reference
 the returned object with g_object_ref() if it will be kept.</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="4041">the connection manager</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handles" c:identifier="tp_base_connection_get_handles">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2810">&lt;!----&gt;</doc>
        <source-position filename="base-connection.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="2817">the handle repository corresponding to the given
handle type, or #NULL if it's unsupported or invalid.</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2812">A connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2813">The handle type</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="tp_base_connection_get_object_path"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="4106">Return the object path starting with %TP_CONN_OBJECT_PATH_BASE that
represents this connection on D-Bus.

The returned string belongs to the #TpBaseConnection and must be copied
by the caller if it will be kept.

If this connection has never been present on D-Bus
(tp_base_connection_register() has never been called), return %NULL
instead.</doc>
        <source-position filename="base-connection.h" line="131"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="4120">the object path of this connection,
 or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="4108">the connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_self_handle"
              c:identifier="tp_base_connection_get_self_handle"
              glib:get-property="self-handle"
              version="0.7.15"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2833">Returns the #TpBaseConnection:self-handle property, which is guaranteed not
to be 0 once the connection has moved to the CONNECTED state.</doc>
        <source-position filename="base-connection.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="2840">the current self handle of the connection.</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2835">A connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="tp_base_connection_get_status"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2132">Return the status of this connection, as set by
tp_base_connection_change_status() or similar functions like
tp_base_connection_disconnect_with_dbus_error().

Like the corresponding D-Bus property, this method returns
%TP_CONNECTION_STATUS_DISCONNECTED in two situations:
either the connection is newly-created (and has never emitted
#TpSvcConnection::status-changed), or D-Bus clients have already been
told that it has been destroyed (by the Disconnect D-Bus method,
a failed attempt to connect, or loss of an established connection).
Use tp_base_connection_is_destroyed() to distinguish between the two.</doc>
        <source-position filename="base-connection.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="2148">the value of #TpBaseConnection:dbus-status</doc>
          <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2134">the connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_destroyed"
              c:identifier="tp_base_connection_is_destroyed"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2167">Return whether this connection has already emitted the D-Bus signal
indicating that it has been destroyed.

In particular, this can be used to distinguish between the two reasons
why tp_base_connection_get_status() would return
%TP_CONNECTION_STATUS_DISCONNECTED: it will return %FALSE if the
connection is newly-created, and %TRUE if the Disconnect D-Bus method
has been called, an attempt to connect has failed, or an established
connection has encountered an error.</doc>
        <source-position filename="base-connection.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="2181">%TRUE if this connection is disappearing from D-Bus</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2169">the connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="register"
              c:identifier="tp_base_connection_register"
              throws="1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1819">Make the connection object appear on the bus, returning the bus
name and object path used. If %TRUE is returned, the connection owns the
bus name, and will release it when destroyed.

Since 0.11.11, @bus_name and @object_path may be %NULL if the
strings are not needed.</doc>
        <source-position filename="base-connection.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="1836">%TRUE on success, %FALSE on error.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1821">A connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="cm_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1822">The name of the connection manager in the Telepathy protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="bus_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1823">Used to return the bus name corresponding to the connection
 if %TRUE is returned. To be freed by the caller.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="object_path"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1825">Used to return the object path of the connection if
 %TRUE is returned. To be freed by the caller.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_with_contacts_mixin"
              c:identifier="tp_base_connection_register_with_contacts_mixin"
              introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="4020">Register the Connection interface with the Contacts interface to make it
inspectable. The Contacts mixin should be initialized before this function
is called</doc>
        <source-position filename="base-connection.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="4022">An instance of the #TpBaseConnections that uses the Contacts
mixin</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_self_handle"
              c:identifier="tp_base_connection_set_self_handle"
              glib:set-property="self-handle"
              version="0.7.15">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="2852">Sets the #TpBaseConnection:self-handle property.  self_handle may not be 0
once the connection has moved to the CONNECTED state.</doc>
        <source-position filename="base-connection.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2854">A connection</doc>
            <type name="BaseConnection" c:type="TpBaseConnection*"/>
          </instance-parameter>
          <parameter name="self_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="2855">The new self handle for the connection.</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <property name="account-path-suffix"
                version="0.23.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_account_path_suffix"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1684">The suffix of the account object path such as
"gabble/jabber/chris_40example_2ecom0" for the account whose object path is
%TP_ACCOUNT_OBJECT_PATH_BASE + "gabble/jabber/chris_40example_2ecom0".
The same as returned by tp_account_get_path_suffix().

It is given by the AccountManager in the connection parameters. Or %NULL if
the ConnectionManager or the AccountManager are too old.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dbus-daemon"
                version="0.11.3"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_dbus_daemon">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1651">#TpDBusDaemon object encapsulating this object's connection to D-Bus.
Read-only except during construction.

If this property is %NULL or omitted during construction, the object will
automatically attempt to connect to the starter or session bus with
tp_dbus_daemon_dup() just after it is constructed; if this fails, this
property will remain %NULL, and tp_base_connection_register() will fail.</doc>
        <type name="DBusDaemon"/>
      </property>
      <property name="dbus-status"
                version="0.11.3"
                introspectable="0"
                transfer-ownership="none"
                default-value="2">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1631">The Connection.Status as visible on D-Bus, which is the same as
#TpBaseConnection&lt;!-- --&gt;.status except that
%TP_INTERNAL_CONNECTION_STATUS_NEW is replaced by
%TP_CONNECTION_STATUS_DISCONNECTED.

The #GObject::notify signal is not currently emitted for this property.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="has-immortal-handles"
                version="0.13.8"
                transfer-ownership="none"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1669">This property is not useful to use directly. Its value is %TRUE, to
indicate that this version of telepathy-glib never unreferences handles
until the connection becomes disconnected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interfaces"
                version="0.11.3"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1615">The set of D-Bus interfaces available on this Connection, other than
Connection itself.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="protocol"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1572">Identifier used in the Telepathy protocol when this connection's protocol
name is required.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="self-handle"
                version="0.7.15"
                introspectable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_self_handle"
                getter="get_self_handle"
                default-value="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1585">The handle of type %TP_HANDLE_TYPE_CONTACT representing the local user.
Must be set nonzero by the subclass before moving to state CONNECTED.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="self-id"
                version="0.21.2"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1600">The identifier representing the local user. This is the result of
inspecting #TpBaseConnection:self-handle.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="bus_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="object_path" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="status" readable="0" private="1">
        <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
      </field>
      <field name="self_handle" readable="0" private="1">
        <type name="Handle" c:type="TpHandle"/>
      </field>
      <field name="_future1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="BaseConnectionPrivate" c:type="TpBaseConnectionPrivate*"/>
      </field>
      <glib:signal name="clients-interested" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1724">Emitted when a client becomes interested in any token that was added with
tp_base_connection_add_possible_client_interest().

The "signal detail" is a GQuark representing @token. Modules implementing
an interface (Location, say) should typically connect to a detailed signal
like
"clients-interested::org.freedesktop.Telepathy.Connection.Interface.Location"
rather than receiving all emissions of this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1727">the interface or part of an interface in which clients are newly
 interested</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="clients-uninterested" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1747">Emitted when no more clients are interested in an interface added with
tp_base_connection_add_possible_client_interest(), for which
#TpBaseConnection::clients-interested was previously emitted.

As with #TpBaseConnection::clients-interested, the "signal detail" is a
GQuark representing @token. Modules implementing an interface (Location,
say) should typically connect to a detailed signal like
"clients-uninterested::org.freedesktop.Telepathy.Connection.Interface.Location"
rather than receiving all emissions of this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="base-connection.c"
                 line="1750">the interface or part of an interface in which clients are no
 longer interested</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="shutdown-finished"
                   when="last"
                   detailed="1"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="1707">Emitted by tp_base_connection_finish_shutdown() when the underlying
network connection has been closed; #TpBaseConnectionManager listens
for this signal and removes connections from its table of active
connections when it is received.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="BaseConnectionClass"
            c:type="TpBaseConnectionClass"
            glib:is-gtype-struct-for="BaseConnection">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="156">The class of a #TpBaseConnection. Many members are virtual methods etc.
to be filled in in the subclass' class_init function.</doc>
      <source-position filename="base-connection.h" line="121"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="158">The superclass' structure</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_internal_create_handle_repos" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="create_channel_factories" introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="163">Create an array of channel factories for this
 Connection. At least one of this or @create_channel_managers must be set by
 subclasses to a non-%NULL value; in new code, setting this to %NULL and
 using channel managers exclusively is recommended.</doc>
        <type name="BaseConnectionCreateChannelFactoriesImpl"
              c:type="TpBaseConnectionCreateChannelFactoriesImpl"/>
      </field>
      <field name="get_unique_connection_name">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="167">Construct a unique name for this connection
 (for example using the protocol's format for usernames). If %NULL (the
 default), a unique name will be generated. Subclasses should usually
 override this to get more obvious names, to aid debugging and prevent
 multiple connections to the same account.</doc>
        <type name="BaseConnectionGetUniqueConnectionNameImpl"
              c:type="TpBaseConnectionGetUniqueConnectionNameImpl"/>
      </field>
      <field name="connecting">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="172">If set by subclasses, will be called just after the state
 changes to CONNECTING. May be %NULL if nothing special needs to happen.</doc>
        <type name="BaseConnectionProc" c:type="TpBaseConnectionProc"/>
      </field>
      <field name="connected">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="174">If set by subclasses, will be called just after the state
 changes to CONNECTED. May be %NULL if nothing special needs to happen.</doc>
        <type name="BaseConnectionProc" c:type="TpBaseConnectionProc"/>
      </field>
      <field name="disconnected">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="176">If set by subclasses, will be called just after the state
 changes to DISCONNECTED. May be %NULL if nothing special needs to happen.</doc>
        <type name="BaseConnectionProc" c:type="TpBaseConnectionProc"/>
      </field>
      <field name="shut_down">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="178">Called after disconnected() is called, to clean up the
 connection. Must start the shutdown process for the underlying
 network connection, and arrange for tp_base_connection_finish_shutdown()
 to be called after the underlying connection has been closed. May not
 be left as %NULL.</doc>
        <type name="BaseConnectionProc" c:type="TpBaseConnectionProc"/>
      </field>
      <field name="start_connecting">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="183">Asynchronously start connecting - called to implement
 the Connect D-Bus method. See #TpBaseConnectionStartConnectingImpl for
 details. May not be left as %NULL.</doc>
        <type name="BaseConnectionStartConnectingImpl"
              c:type="TpBaseConnectionStartConnectingImpl"/>
      </field>
      <field name="interfaces_always_present" readable="0" private="1">
        <type name="utf8" c:type="const gchar**"/>
      </field>
      <field name="create_channel_managers" introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="192">Create an array of channel managers for this
 Connection. At least one of this or @create_channel_factories must be set
 by subclasses to a non-%NULL value. Since: 0.7.15</doc>
        <type name="BaseConnectionCreateChannelManagersImpl"
              c:type="TpBaseConnectionCreateChannelManagersImpl"/>
      </field>
      <field name="get_interfaces_always_present" introspectable="0">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="186">Returns a #GPtrArray of extra D-Bus
 interfaces which are always implemented by instances of this class,
 which may be filled in by subclasses. The default is to list no
 additional interfaces. Individual instances may detect which
 additional interfaces they support and signal them before going
 to state CONNECTED by calling tp_base_connection_add_interfaces().</doc>
        <type name="BaseConnectionGetInterfacesImpl"
              c:type="TpBaseConnectionGetInterfacesImpl"/>
      </field>
      <field name="_future3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <callback name="BaseConnectionCreateChannelFactoriesImpl"
              c:type="TpBaseConnectionCreateChannelFactoriesImpl"
              introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="88">Signature of an implementation of the create_channel_factories method
of #TpBaseConnection.</doc>
      <source-position filename="base-connection.h" line="54"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="95">a GPtrArray of objects implementing
 #TpChannelFactoryIface which, between them, implement all channel types
 this Connection supports.</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="90">The implementation, a subclass of TpBaseConnection</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseConnectionCreateChannelManagersImpl"
              c:type="TpBaseConnectionCreateChannelManagersImpl"
              introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="100">Signature of an implementation of the create_channel_managers method
of #TpBaseConnection.</doc>
      <source-position filename="base-connection.h" line="57"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="107">a GPtrArray of objects implementing
 #TpChannelManager which, between them, implement all channel types this
 Connection supports.</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="102">The implementation, a subclass of TpBaseConnection</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseConnectionCreateHandleReposImpl"
              c:type="TpBaseConnectionCreateHandleReposImpl"
              introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="78">Signature of an implementation of the create_handle_repos method
of #TpBaseConnection.</doc>
      <source-position filename="base-connection.h" line="50"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="80">The connection object</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
        <parameter name="repos" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="81">An array of pointers to be filled in; the implementation
        may assume all are initially NULL.</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface**"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseConnectionGetInterfacesImpl"
              c:type="TpBaseConnectionGetInterfacesImpl"
              version="0.19.4"
              introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="124">Signature of an implementation of
#TpBaseConnectionClass.get_interfaces_always_present virtual
function.

Implementation must first chainup on parent class implementation and then
add extra interfaces into the #GPtrArray.

|[
static GPtrArray *
my_connection_get_interfaces_always_present (TpBaseConnection *self)
{
  GPtrArray *interfaces;

  interfaces = TP_BASE_CONNECTION_CLASS (
      my_connection_parent_class)-&gt;get_interfaces_always_present (self);

  g_ptr_array_add (interfaces, TP_IFACE_BADGERS);

  return interfaces;
}
]|</doc>
      <source-position filename="base-connection.h" line="63"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="150">a #GPtrArray of static strings for D-Bus
  interfaces implemented by this client.</doc>
        <array name="GLib.PtrArray" c:type="GPtrArray*">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="126">a #TpBaseConnection</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseConnectionGetUniqueConnectionNameImpl"
              c:type="TpBaseConnectionGetUniqueConnectionNameImpl">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="112">Signature of the @get_unique_connection_name virtual method
on #TpBaseConnection.</doc>
      <source-position filename="base-connection.h" line="60"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="119">a name for this connection which will be unique
 within this connection manager process, as a string which the caller must
 free with #g_free.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="114">The implementation, a subclass of TpBaseConnection</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="BaseConnectionPrivate"
            c:type="TpBaseConnectionPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="base-connection.h" line="43"/>
    </record>
    <callback name="BaseConnectionProc" c:type="TpBaseConnectionProc">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="38">Signature of a virtual method on #TpBaseConnection that takes no
additional parameters and returns nothing.</doc>
      <source-position filename="base-connection.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="40">The connection object</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="BaseConnectionStartConnectingImpl"
              c:type="TpBaseConnectionStartConnectingImpl"
              throws="1">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="46">Signature of an implementation of the start_connecting method
of #TpBaseConnection.

On entry, the implementation may assume that it is in state NEW.

If %TRUE is returned, the Connect D-Bus method succeeds; the
implementation must either have already set the status to CONNECTED by
calling tp_base_connection_change_status(), or have arranged for a
status change to either state DISCONNECTED or CONNECTED to be signalled by
calling tp_base_connection_change_status() at some later time.
If the status is still NEW after returning %TRUE, #TpBaseConnection will
automatically change it to CONNECTING for reason REQUESTED.

If %FALSE is returned, the error will be raised from Connect as an
exception. If the status is not DISCONNECTED after %FALSE is returned,
#TpBaseConnection will automatically change it to DISCONNECTED
with a reason appropriate to the error; NetworkError results in
NETWORK_ERROR, PermissionDenied results in AUTHENTICATION_FAILED, and all
other errors currently result in NONE_SPECIFIED.

All except the simplest connection managers are expected to implement this
asynchronously, returning %TRUE in most cases and changing the status
to CONNECTED or DISCONNECTED later.</doc>
      <source-position filename="base-connection.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="base-connection.c"
             line="75">%FALSE if failure has already occurred, else %TRUE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="base-connection.c"
               line="48">The connection object</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="BasicProxyFactory"
           c:symbol-prefix="basic_proxy_factory"
           c:type="TpBasicProxyFactory"
           version="0.13.2"
           parent="GObject.Object"
           glib:type-name="TpBasicProxyFactory"
           glib:get-type="tp_basic_proxy_factory_get_type"
           glib:type-struct="BasicProxyFactoryClass">
      <doc xml:space="preserve"
           filename="basic-proxy-factory.c"
           line="37">Data structure representing a #TpBasicProxyFactory</doc>
      <source-position filename="basic-proxy-factory.h" line="40"/>
      <implements name="ClientChannelFactory"/>
      <constructor name="new"
                   c:identifier="tp_basic_proxy_factory_new"
                   version="0.13.2"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="basic-proxy-factory.c"
             line="77">Convenient function to create a new #TpBasicProxyFactory instance.</doc>
        <doc-deprecated xml:space="preserve">New code should use #TpSimpleClientFactory instead</doc-deprecated>
        <source-position filename="basic-proxy-factory.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="basic-proxy-factory.c"
               line="82">a new #TpBasicProxyFactory</doc>
          <type name="BasicProxyFactory" c:type="TpBasicProxyFactory*"/>
        </return-value>
      </constructor>
      <function name="dup"
                c:identifier="tp_basic_proxy_factory_dup"
                version="0.13.2"
                deprecated="1">
        <doc xml:space="preserve"
             filename="basic-proxy-factory.c"
             line="100">Returns a cached #TpBasicProxyFactory; the same #TpBasicProxyFactory object
will be returned by this function repeatedly, as long as at least one
reference exists.</doc>
        <doc-deprecated xml:space="preserve">New code should use #TpSimpleClientFactory instead</doc-deprecated>
        <source-position filename="basic-proxy-factory.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="basic-proxy-factory.c"
               line="107">a #TpBasicProxyFactory</doc>
          <type name="BasicProxyFactory" c:type="TpBasicProxyFactory*"/>
        </return-value>
      </function>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="BasicProxyFactoryClass"
            c:type="TpBasicProxyFactoryClass"
            glib:is-gtype-struct-for="BasicProxyFactory"
            version="0.13.2">
      <doc xml:space="preserve"
           filename="basic-proxy-factory.c"
           line="45">The class of a #TpBasicProxyFactory.</doc>
      <source-position filename="basic-proxy-factory.h" line="40"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="basic-proxy-factory.c"
             line="47">the parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <function-macro name="CALL_CHANNEL"
                    c:identifier="TP_CALL_CHANNEL"
                    introspectable="0">
      <source-position filename="call-channel.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_CHANNEL_CLASS"
                    c:identifier="TP_CALL_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="call-channel.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_CHANNEL_GET_CLASS"
                    c:identifier="TP_CALL_CHANNEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="call-channel.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_CONTENT"
                    c:identifier="TP_CALL_CONTENT"
                    introspectable="0">
      <source-position filename="call-content.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_CONTENT_CLASS"
                    c:identifier="TP_CALL_CONTENT_CLASS"
                    introspectable="0">
      <source-position filename="call-content.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_CONTENT_GET_CLASS"
                    c:identifier="TP_CALL_CONTENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="call-content.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_STREAM"
                    c:identifier="TP_CALL_STREAM"
                    introspectable="0">
      <source-position filename="call-stream.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_STREAM_CLASS"
                    c:identifier="TP_CALL_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="call-stream.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CALL_STREAM_GET_CLASS"
                    c:identifier="TP_CALL_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="call-stream.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAPABILITIES"
                    c:identifier="TP_CAPABILITIES"
                    introspectable="0">
      <source-position filename="capabilities.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAPABILITIES_CLASS"
                    c:identifier="TP_CAPABILITIES_CLASS"
                    introspectable="0">
      <source-position filename="capabilities.h" line="45"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CAPABILITIES_GET_CLASS"
                    c:identifier="TP_CAPABILITIES_GET_CLASS"
                    introspectable="0">
      <source-position filename="capabilities.h" line="52"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL"
                    c:identifier="TP_CHANNEL"
                    introspectable="0">
      <source-position filename="channel.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_CLASS"
                    c:identifier="TP_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="channel.h" line="68"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_DISPATCHER"
                    c:identifier="TP_CHANNEL_DISPATCHER"
                    introspectable="0">
      <source-position filename="channel-dispatcher.h" line="58"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CHANNEL_DISPATCHER_BUS_NAME"
              value="org.freedesktop.Telepathy.ChannelDispatcher"
              c:type="TP_CHANNEL_DISPATCHER_BUS_NAME">
      <doc xml:space="preserve"
           filename="defs.h"
           line="89">The channel dispatcher's well-known bus name</doc>
      <source-position filename="defs.h" line="94"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CHANNEL_DISPATCHER_CLASS"
                    c:identifier="TP_CHANNEL_DISPATCHER_CLASS"
                    introspectable="0">
      <source-position filename="channel-dispatcher.h" line="61"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_DISPATCHER_GET_CLASS"
                    c:identifier="TP_CHANNEL_DISPATCHER_GET_CLASS"
                    introspectable="0">
      <source-position filename="channel-dispatcher.h" line="68"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CHANNEL_DISPATCHER_OBJECT_PATH"
              value="/org/freedesktop/Telepathy/ChannelDispatcher"
              c:type="TP_CHANNEL_DISPATCHER_OBJECT_PATH">
      <doc xml:space="preserve"
           filename="defs.h"
           line="96">The channel dispatcher's standard object path</doc>
      <source-position filename="defs.h" line="101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CHANNEL_DISPATCH_OPERATION"
                    c:identifier="TP_CHANNEL_DISPATCH_OPERATION"
                    introspectable="0">
      <source-position filename="channel-dispatch-operation.h" line="63"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_DISPATCH_OPERATION_CLASS"
                    c:identifier="TP_CHANNEL_DISPATCH_OPERATION_CLASS"
                    introspectable="0">
      <source-position filename="channel-dispatch-operation.h" line="66"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_DISPATCH_OPERATION_GET_CLASS"
                    c:identifier="TP_CHANNEL_DISPATCH_OPERATION_GET_CLASS"
                    introspectable="0">
      <source-position filename="channel-dispatch-operation.h" line="73"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_GET_CLASS"
                    c:identifier="TP_CHANNEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="channel.h" line="75"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_REQUEST"
                    c:identifier="TP_CHANNEL_REQUEST"
                    introspectable="0">
      <source-position filename="channel-request.h" line="58"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_REQUEST_CLASS"
                    c:identifier="TP_CHANNEL_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="channel-request.h" line="61"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CHANNEL_REQUEST_GET_CLASS"
                    c:identifier="TP_CHANNEL_REQUEST_GET_CLASS"
                    introspectable="0">
      <source-position filename="channel-request.h" line="68"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CLIENT_BUS_NAME_BASE"
              value="org.freedesktop.Telepathy.Client."
              c:type="TP_CLIENT_BUS_NAME_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="103">The common prefix of the well-known bus name for any Telepathy Client.</doc>
      <source-position filename="defs.h" line="108"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CLIENT_CHANNEL_FACTORY"
                    c:identifier="TP_CLIENT_CHANNEL_FACTORY"
                    introspectable="0">
      <source-position filename="client-channel-factory.h" line="62"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_CHANNEL_FACTORY_GET_IFACE"
                    c:identifier="TP_CLIENT_CHANNEL_FACTORY_GET_IFACE"
                    introspectable="0">
      <source-position filename="client-channel-factory.h" line="67"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_MESSAGE"
                    c:identifier="TP_CLIENT_MESSAGE"
                    introspectable="0">
      <source-position filename="client-message.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_MESSAGE_CLASS"
                    c:identifier="TP_CLIENT_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="client-message.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_MESSAGE_GET_CLASS"
                    c:identifier="TP_CLIENT_MESSAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="client-message.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CLIENT_OBJECT_PATH_BASE"
              value="/org/freedesktop/Telepathy/Client/"
              c:type="TP_CLIENT_OBJECT_PATH_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="110">The common prefix of the well-known object path for any Telepathy Client.</doc>
      <source-position filename="defs.h" line="115"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="CMInfoSource" version="0.7.1" c:type="TpCMInfoSource">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="110">Describes possible sources of information on connection managers'
supported protocols.

Since 0.11.5, there is a corresponding #GEnumClass type,
%TP_TYPE_CM_INFO_SOURCE.</doc>
      <source-position filename="connection-manager.h" line="84"/>
      <member name="none" value="0" c:identifier="TP_CM_INFO_SOURCE_NONE">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="112">no information available</doc>
      </member>
      <member name="file" value="1" c:identifier="TP_CM_INFO_SOURCE_FILE">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="113">information came from a .manager file</doc>
      </member>
      <member name="live" value="2" c:identifier="TP_CM_INFO_SOURCE_LIVE">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="114">information came from the connection manager</doc>
      </member>
    </enumeration>
    <constant name="CM_BUS_NAME_BASE"
              value="org.freedesktop.Telepathy.ConnectionManager."
              c:type="TP_CM_BUS_NAME_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="34">The prefix for a connection manager's bus name, to which the CM's name
(e.g. "gabble") should be appended.</doc>
      <source-position filename="defs.h" line="40"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CM_OBJECT_PATH_BASE"
              value="/org/freedesktop/Telepathy/ConnectionManager/"
              c:type="TP_CM_OBJECT_PATH_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="42">The prefix for a connection manager's object path, to which the CM's name
(e.g. "gabble") should be appended.</doc>
      <source-position filename="defs.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CONNECTION"
                    c:identifier="TP_CONNECTION"
                    introspectable="0">
      <source-position filename="connection.h" line="128"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_CLASS"
                    c:identifier="TP_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="connection.h" line="131"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_GET_CLASS"
                    c:identifier="TP_CONNECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="connection.h" line="138"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_MANAGER"
                    c:identifier="TP_CONNECTION_MANAGER"
                    introspectable="0">
      <source-position filename="connection-manager.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_MANAGER_CLASS"
                    c:identifier="TP_CONNECTION_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="connection-manager.h" line="51"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_MANAGER_GET_CLASS"
                    c:identifier="TP_CONNECTION_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="connection-manager.h" line="58"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CONN_BUS_NAME_BASE"
              value="org.freedesktop.Telepathy.Connection."
              c:type="TP_CONN_BUS_NAME_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="50">The prefix for a connection's bus name, to which the CM's name
(e.g. "gabble"), the protocol (e.g. "jabber") and an element or sequence
of elements representing the account should be appended.</doc>
      <source-position filename="defs.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CONN_OBJECT_PATH_BASE"
              value="/org/freedesktop/Telepathy/Connection/"
              c:type="TP_CONN_OBJECT_PATH_BASE">
      <doc xml:space="preserve"
           filename="defs.h"
           line="59">The prefix for a connection's object path, to which the CM's name
(e.g. "gabble"), the protocol (e.g. "jabber") and an element or sequence
of elements representing the account should be appended.</doc>
      <source-position filename="defs.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CONTACT"
                    c:identifier="TP_CONTACT"
                    introspectable="0">
      <source-position filename="contact.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACTS_MIXIN"
                    c:identifier="TP_CONTACTS_MIXIN"
                    introspectable="0">
      <source-position filename="contacts-mixin.h" line="92"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACTS_MIXIN_CLASS"
                    c:identifier="TP_CONTACTS_MIXIN_CLASS"
                    introspectable="0">
      <source-position filename="contacts-mixin.h" line="85"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACTS_MIXIN_CLASS_OFFSET"
                    c:identifier="TP_CONTACTS_MIXIN_CLASS_OFFSET"
                    introspectable="0">
      <source-position filename="contacts-mixin.h" line="83"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACTS_MIXIN_OFFSET"
                    c:identifier="TP_CONTACTS_MIXIN_OFFSET"
                    introspectable="0">
      <source-position filename="contacts-mixin.h" line="90"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_CLASS"
                    c:identifier="TP_CONTACT_CLASS"
                    introspectable="0">
      <source-position filename="contact.h" line="50"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CONTACT_FEATURE_INVALID"
              value="-1"
              c:type="TP_CONTACT_FEATURE_INVALID"
              version="0.15.5"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contact.c"
           line="158">An invalid TpContactFeature. Used as list termination. See for example
tp_simple_client_factory_add_contact_features_varargs().</doc>
      <source-position filename="contact.h" line="76"/>
      <type name="ContactFeature" c:type="TpContactFeature"/>
    </constant>
    <function-macro name="CONTACT_GET_CLASS"
                    c:identifier="TP_CONTACT_GET_CLASS"
                    introspectable="0">
      <source-position filename="contact.h" line="57"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_SEARCH"
                    c:identifier="TP_CONTACT_SEARCH"
                    introspectable="0">
      <source-position filename="contact-search.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_SEARCH_CLASS"
                    c:identifier="TP_CONTACT_SEARCH_CLASS"
                    introspectable="0">
      <source-position filename="contact-search.h" line="40"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_SEARCH_GET_CLASS"
                    c:identifier="TP_CONTACT_SEARCH_GET_CLASS"
                    introspectable="0">
      <source-position filename="contact-search.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_SEARCH_RESULT"
                    c:identifier="TP_CONTACT_SEARCH_RESULT"
                    introspectable="0">
      <source-position filename="contact-search-result.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_SEARCH_RESULT_CLASS"
                    c:identifier="TP_CONTACT_SEARCH_RESULT_CLASS"
                    introspectable="0">
      <source-position filename="contact-search-result.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTACT_SEARCH_RESULT_GET_CLASS"
                    c:identifier="TP_CONTACT_SEARCH_RESULT_GET_CLASS"
                    introspectable="0">
      <source-position filename="contact-search-result.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="CallChannel"
           c:symbol-prefix="call_channel"
           c:type="TpCallChannel"
           version="0.17.5"
           parent="Channel"
           glib:type-name="TpCallChannel"
           glib:get-type="tp_call_channel_get_type"
           glib:type-struct="CallChannelClass">
      <doc xml:space="preserve"
           filename="call-channel.c"
           line="30">Data structure representing a #TpCallChannel.</doc>
      <source-position filename="call-channel.h" line="59"/>
      <function name="get_feature_quark_core"
                c:identifier="tp_call_channel_get_feature_quark_core">
        <source-position filename="call-channel.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="accept_async"
              c:identifier="tp_call_channel_accept_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1506">For incoming calls with #TpCallChannel:state set to
%TP_CALL_STATE_INITIALISED, accept the incoming call. This changes
#TpCallChannel:state to %TP_CALL_STATE_ACCEPTED.

For outgoing calls with #TpCallChannel:state set to
%TP_CALL_STATE_PENDING_INITIATOR, actually call the remote contact; this
changes #TpCallChannel:state to
%TP_CALL_STATE_INITIALISING.</doc>
        <source-position filename="call-channel.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1508">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1509">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1510">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_finish"
              c:identifier="tp_call_channel_accept_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1539">Finishes tp_call_channel_accept_async().</doc>
        <source-position filename="call-channel.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1541">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1542">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_content_async"
              c:identifier="tp_call_channel_add_content_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1635">Request that a new Content of type @type is added to @self. Callers should
check the value of the #TpCallChannel:mutable-contents property before trying
to add another content as it might not be allowed.</doc>
        <source-position filename="call-channel.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1637">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1638">the suggested name of the content to add</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1639">the media stream type of the content to be added to the call, from
 #TpMediaStreamType</doc>
            <type name="MediaStreamType" c:type="TpMediaStreamType"/>
          </parameter>
          <parameter name="initial_direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1641">The initial direction of the content</doc>
            <type name="MediaStreamDirection" c:type="TpMediaStreamDirection"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1642">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1643">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_content_finish"
              c:identifier="tp_call_channel_add_content_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1671">Finishes tp_call_channel_add_content_async().

The returned #TpCallContent is NOT guaranteed to have
%TP_CALL_CONTENT_FEATURE_CORE prepared.</doc>
        <source-position filename="call-channel.h" line="157"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1682">reference to the new #TpCallContent.</doc>
          <type name="CallContent" c:type="TpCallContent*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1673">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1674">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_contents"
              c:identifier="tp_call_channel_get_contents"
              glib:get-property="contents"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1194">&lt;!-- --&gt;</doc>
        <source-position filename="call-channel.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1200">
 the value of #TpCallChannel:contents</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CallContent"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1196">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_members"
              c:identifier="tp_call_channel_get_members"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1325">Get the members of this call.

The #TpContact objects are guaranteed to have all of the features
previously passed to tp_simple_client_factory_add_contact_features()
prepared.</doc>
        <source-position filename="call-channel.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1335">
 #GHashTable mapping #TpContact to its new #TpCallMemberFlags</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="Contact"/>
            <type name="guint"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1327">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="tp_call_channel_get_state"
              glib:get-property="state"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1212">&lt;!-- --&gt;</doc>
        <source-position filename="call-channel.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1224">the value of #TpCallChannel:state</doc>
          <type name="CallState" c:type="TpCallState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1214">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="flags"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1215">a place to set the value of
 #TpCallChannel:flags</doc>
            <type name="CallFlags" c:type="TpCallFlags*"/>
          </parameter>
          <parameter name="details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1217">a place to set the value of
 #TpCallChannel:state-details</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1219">a place to set the value of
 #TpCallChannel:state-reason</doc>
            <type name="CallStateReason" c:type="TpCallStateReason**"/>
          </parameter>
        </parameters>
      </method>
      <method name="hangup_async"
              c:identifier="tp_call_channel_hangup_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1557">Request that the call is ended. All contents will be removed from @self so
that the #TpCallChannel:contents property will be the empty list.</doc>
        <source-position filename="call-channel.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1559">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1560">a TpCallStateChangeReason</doc>
            <type name="CallStateChangeReason"
                  c:type="TpCallStateChangeReason"/>
          </parameter>
          <parameter name="detailed_reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1561">a more specific reason for the call hangup, if one is
 available, or an empty or %NULL string otherwise</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1563">a human-readable message to be sent to the remote contact(s)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1564">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1565">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="hangup_finish"
              c:identifier="tp_call_channel_hangup_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1592">Finishes tp_call_channel_hangup_async().</doc>
        <source-position filename="call-channel.h" line="145"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1594">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1595">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_dtmf"
              c:identifier="tp_call_channel_has_dtmf"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1347">Whether or not @self can send DTMF tones using
tp_call_channel_send_tones_async(). To be able to send DTMF tones, at least
one of @self's #TpCallChannel:contents must implement
%TP_IFACE_CALL_CONTENT_INTERFACE_DTMF interface.</doc>
        <source-position filename="call-channel.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1356">whether or not @self can send DTMF tones.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1349">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_hardware_streaming"
              c:identifier="tp_call_channel_has_hardware_streaming"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1245">&lt;!-- --&gt;</doc>
        <source-position filename="call-channel.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1251">the value of #TpCallChannel:hardware-streaming</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1247">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_hold"
              c:identifier="tp_call_channel_has_hold"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1379">Whether or not @self has the %TP_IFACE_CHANNEL_INTERFACE_HOLD
interfaces</doc>
        <source-position filename="call-channel.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1386">whether or not @self supports Hold</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1381">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_initial_audio"
              c:identifier="tp_call_channel_has_initial_audio"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1262">&lt;!-- --&gt;</doc>
        <source-position filename="call-channel.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1270">the value of #TpCallChannel:initial-audio</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1264">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="initial_audio_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1265">a place to set the
 value of #TpCallChannel:initial-audio-name</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_initial_video"
              c:identifier="tp_call_channel_has_initial_video"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1285">&lt;!-- --&gt;</doc>
        <source-position filename="call-channel.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1293">the value of #TpCallChannel:initial-video</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1287">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="initial_video_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1288">a place to set the
 value of #TpCallChannel:initial-video-name</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_mutable_contents"
              c:identifier="tp_call_channel_has_mutable_contents"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1308">&lt;!-- --&gt;</doc>
        <source-position filename="call-channel.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1314">the value of #TpCallChannel:mutable-contents</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1310">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_hold_async"
              c:identifier="tp_call_channel_request_hold_async"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1789">Requests that the connection manager holds or unholds the call. Watch
#TpCallChannel:hold-state property to know when the channel goes on
hold or is unheld. Unholding may fail if the streaming implementation
can not obtain all the resources needed to restart the call.</doc>
        <source-position filename="call-channel.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1791">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="hold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1792">Whether to request a hold or a unhold</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1793">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1794">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_hold_finish"
              c:identifier="tp_call_channel_request_hold_finish"
              version="0.17.6"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1835">Finishes tp_call_channel_request_hold_async</doc>
        <source-position filename="call-channel.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1837">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1838">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_tones_async"
              c:identifier="tp_call_channel_send_tones_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1718">Send @tones on every of @self's contents which have the
%TP_IFACE_CALL_CONTENT_INTERFACE_DTMF interface.

For more details, see tp_call_content_send_tones_async().</doc>
        <source-position filename="call-channel.h" line="162"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1720">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="tones" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1721">a string representation of one or more DTMF events.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1722">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1723">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1724">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_tones_finish"
              c:identifier="tp_call_channel_send_tones_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1770">Finishes tp_call_channel_send_tones_async().</doc>
        <source-position filename="call-channel.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-channel.c"
               line="1778">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1772">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1773">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queued_async"
              c:identifier="tp_call_channel_set_queued_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1461">Notifies the CM that the local user is already in a call, so this call has
been put in a call-waiting style queue.</doc>
        <source-position filename="call-channel.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1463">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1464">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1465">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queued_finish"
              c:identifier="tp_call_channel_set_queued_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1488">Finishes tp_call_channel_set_queued_async().</doc>
        <source-position filename="call-channel.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1490">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1491">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ringing_async"
              c:identifier="tp_call_channel_set_ringing_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1417">Indicate that the local user has been alerted about the incoming call.</doc>
        <source-position filename="call-channel.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1419">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1420">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1421">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ringing_finish"
              c:identifier="tp_call_channel_set_ringing_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1443">Finishes tp_call_channel_set_ringing_async().</doc>
        <source-position filename="call-channel.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1445">a #TpCallChannel</doc>
            <type name="CallChannel" c:type="TpCallChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1446">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="contents"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_contents">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="864">#GPtrArray of #TpCallContent objects. The list of content objects that are
part of this call.

It is NOT guaranteed that %TP_CALL_CONTENT_FEATURE_CORE is prepared on
those objects.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="flags"
                version="0.17.5"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="894">A #TpCallFlags specifying the flags of the call state.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hardware-streaming"
                version="0.17.5"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="936">Whether or not the streaming is done by dedicated hardware.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hold-state"
                version="0.17.6"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1023">A #TpLocalHoldState specifying if the Call is currently held</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="hold-state-reason"
                version="0.17.6"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1037">A #TpLocalHoldStateReason specifying why the Call is currently held.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="initial-audio"
                version="0.17.5"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="950">Whether or not the Call was started with audio.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="initial-audio-name"
                version="0.17.5"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="978">If #TpCallChannel:initial-audio is set to %TRUE, then this property will
is the name of the intial audio content, %NULL otherwise.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="initial-video"
                version="0.17.5"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="964">Whether or not the Call was started with video.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="initial-video-name"
                version="0.17.5"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="993">If #TpCallChannel:initial-video is set to %TRUE, then this property will
is the name of the intial video content, %NULL otherwise.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mutable-contents"
                version="0.17.5"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1008">Whether or not call contents can be added or removed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="state"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="881">A #TpCallState specifying the state of the call.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="state-details"
                version="0.17.5"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="907">Detailed infoermation about #TpCallChannel:state. It is a #GHashTable
mapping gchar*-&gt;GValue, it can be accessed using the tp_asv_* functions.</doc>
        <type name="GLib.HashTable">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </property>
      <property name="state-reason" version="0.17.5" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="922">Reason why #TpCallChannel:state last changed.</doc>
        <type name="CallStateReason"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Channel" c:type="TpChannel"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallChannelPrivate" c:type="TpCallChannelPrivate*"/>
      </field>
      <glib:signal name="content-added" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1052">The ::content-added signal is emitted whenever a
#TpCallContent is added to @self.

It is NOT guaranteed that %TP_CALL_CONTENT_FEATURE_CORE is prepared on
@content.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1055">the newly added #TpCallContent</doc>
            <type name="GObject.Object"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="content-removed" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1072">The ::content-removed signal is emitted whenever a
#TpCallContent is removed from @self.

It is NOT guaranteed that %TP_CALL_CONTENT_FEATURE_CORE is prepared on
@content.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1075">the newly removed #TpCallContent</doc>
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1076">a #TpCallStateReason</doc>
            <type name="CallStateReason"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="members-changed" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1115">The ::members-changed signal is emitted whenever the call's members
changes.

The #TpContact objects are guaranteed to have all of the features
previously passed to tp_simple_client_factory_add_contact_features()
prepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="updates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1118">
  #GHashTable mapping #TpContact to its new #TpCallMemberFlags</doc>
            <type name="GLib.HashTable">
              <type name="Contact"/>
              <type name="guint"/>
            </type>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1120">
 #GPtrArray of #TpContact removed from the call members</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1122">the #TpCallStateReason for the change</doc>
            <type name="CallStateReason"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="state-changed" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="1093">The ::state-changed signal is emitted whenever the
call state changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1096">the new #TpCallState</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1097">the new #TpCallFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1098">the #TpCallStateReason for the change</doc>
            <type name="CallStateReason"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-channel.c"
                 line="1099">additional details as a
  #GHashTable readable using the tp_asv_* functions.</doc>
            <type name="GLib.HashTable">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CallChannelClass"
            c:type="TpCallChannelClass"
            glib:is-gtype-struct-for="CallChannel"
            version="0.17.5">
      <doc xml:space="preserve"
           filename="call-channel.c"
           line="38">The class of a #TpCallChannel.</doc>
      <source-position filename="call-channel.h" line="59"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ChannelClass" c:type="TpChannelClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="CallChannelPrivate"
            c:type="TpCallChannelPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="call-channel.h" line="45"/>
    </record>
    <class name="CallContent"
           c:symbol-prefix="call_content"
           c:type="TpCallContent"
           version="0.17.5"
           parent="Proxy"
           glib:type-name="TpCallContent"
           glib:get-type="tp_call_content_get_type"
           glib:type-struct="CallContentClass">
      <doc xml:space="preserve"
           filename="call-content.c"
           line="30">Data structure representing a #TpCallContent.</doc>
      <source-position filename="call-content.h" line="57"/>
      <function name="get_feature_quark_core"
                c:identifier="tp_call_content_get_feature_quark_core">
        <source-position filename="call-content.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_call_content_init_known_interfaces"
                version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="727">Ensure that the known interfaces for #TpCallContent have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CALL_CONTENT.</doc>
        <source-position filename="call-content.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="get_disposition"
              c:identifier="tp_call_content_get_disposition"
              glib:get-property="disposition"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="807">&lt;!-- --&gt;</doc>
        <source-position filename="call-content.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-content.c"
               line="813">the value of #TpCallContent:disposition</doc>
          <type name="CallContentDisposition"
                c:type="TpCallContentDisposition"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="809">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_media_type"
              c:identifier="tp_call_content_get_media_type"
              glib:get-property="media-type"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="790">&lt;!-- --&gt;</doc>
        <source-position filename="call-content.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-content.c"
               line="796">the value of #TpCallContent:name</doc>
          <type name="MediaStreamType" c:type="TpMediaStreamType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="792">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_call_content_get_name"
              glib:get-property="name"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="773">&lt;!-- --&gt;</doc>
        <source-position filename="call-content.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-content.c"
               line="779">the value of #TpCallContent:name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="775">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_streams"
              c:identifier="tp_call_content_get_streams"
              glib:get-property="streams"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="824">&lt;!-- --&gt;</doc>
        <source-position filename="call-content.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-content.c"
               line="830">
 the value of #TpCallContent:streams</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="CallStream"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="826">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_async"
              c:identifier="tp_call_content_remove_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="859">Remove the content from the call. This will cause #TpCallContent::removed
to be emitted.</doc>
        <source-position filename="call-content.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="861">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="862">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="863">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="tp_call_content_remove_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="886">Finishes tp_call_content_remove_async().</doc>
        <source-position filename="call-content.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="888">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="889">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_tones_async"
              c:identifier="tp_call_content_send_tones_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="904">Send @tones DTMF code on @self content. @self must have the
%TP_IFACE_CALL_CONTENT_INTERFACE_DTMF interface.

If DTMF tones are already being played, this request is queued.</doc>
        <source-position filename="call-content.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="906">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
          <parameter name="tones" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="907">a string representation of one or more DTMF events.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="908">optional #GCancellable object, %NULL to ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="909">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="910">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_tones_finish"
              c:identifier="tp_call_content_send_tones_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="951">Finishes tp_call_content_send_tones_async().</doc>
        <source-position filename="call-content.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-content.c"
               line="959">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="953">a #TpCallContent</doc>
            <type name="CallContent" c:type="TpCallContent*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="954">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="channel"
                version="0.17.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="641">The parent #TpCallChannel of the content.</doc>
        <type name="CallChannel"/>
      </property>
      <property name="connection"
                version="0.17.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="562">The #TpConnection of the call.</doc>
        <type name="Connection"/>
      </property>
      <property name="disposition"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_disposition"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="602">The disposition of this content, from #TpCallContentDisposition.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="media-type"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_media_type"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="589">The media type of this content, from #TpMediaStreamType.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="name"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_name">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="576">The name of this content.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="streams"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_streams">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="623">#GPtrArray of #TpCallStream objects. The list of stream objects that are
part of this content.

It is NOT guaranteed that %TP_CALL_STREAM_FEATURE_CORE is prepared on
those objects.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallContentPrivate" c:type="TpCallContentPrivate*"/>
      </field>
      <glib:signal name="removed" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="656">The ::removed signal is emitted when @self is removed from
a #TpCallChannel.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="streams-added" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="672">The ::streams-added signal is emitted whenever
#TpCallStream are added to @self.

It is NOT guaranteed that %TP_CALL_STREAM_FEATURE_CORE is prepared on
stream objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="streams" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="675">
 a #GPtrArray of newly added #TpCallStream</doc>
            <array name="GLib.PtrArray">
              <type name="CallStream"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="streams-removed" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-content.c"
             line="693">The ::streams-removed signal is emitted whenever
#TpCallStreams are removed from @self.

It is NOT guaranteed that %TP_CALL_STREAM_FEATURE_CORE is prepared on
stream objects.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="streams" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="696">
 a #GPtrArray of newly removed #TpCallStream</doc>
            <array name="GLib.PtrArray">
              <type name="CallStream"/>
            </array>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-content.c"
                 line="698">a #TpCallStateReason</doc>
            <type name="CallStateReason"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="CallContentClass"
            c:type="TpCallContentClass"
            glib:is-gtype-struct-for="CallContent"
            version="0.17.5">
      <doc xml:space="preserve"
           filename="call-content.c"
           line="38">The class of a #TpCallContent.</doc>
      <source-position filename="call-content.h" line="57"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <enumeration name="CallContentDisposition"
                 c:type="TpCallContentDisposition">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1254">&lt;![CDATA[         The disposition of this content, which defines whether to         automatically start sending data on the streams when         Accept is         called on the channel.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="625"/>
      <member name="none"
              value="0"
              c:identifier="TP_CALL_CONTENT_DISPOSITION_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1256">&lt;![CDATA[           The content has no specific disposition.         ]]&gt;</doc>
      </member>
      <member name="initial"
              value="1"
              c:identifier="TP_CALL_CONTENT_DISPOSITION_INITIAL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1257">&lt;![CDATA[           The content was initially part of the call. When           Accept           is called on the channel, all streams of this content with           LocalSendingState           set to Pending_Send will be           moved to Sending as if           SetSending           (True) had been called.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="CallContentPacketizationType"
                 c:type="TpCallContentPacketizationType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1232">&lt;![CDATA[         A packetization method that can be used for a content.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="618"/>
      <member name="rtp"
              value="0"
              c:identifier="TP_CALL_CONTENT_PACKETIZATION_TYPE_RTP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1234">&lt;![CDATA[           Real-time Transport Protocol, as documented by RFC 3550.         ]]&gt;</doc>
      </member>
      <member name="raw"
              value="1"
              c:identifier="TP_CALL_CONTENT_PACKETIZATION_TYPE_RAW">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1235">&lt;![CDATA[           Raw media.         ]]&gt;</doc>
      </member>
      <member name="msn_webcam"
              value="2"
              c:identifier="TP_CALL_CONTENT_PACKETIZATION_TYPE_MSN_WEBCAM">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1236">&lt;![CDATA[           MSN webcam. This is the video-only one-way type which was           used in earlier versions of WLM. Although no longer used,           modern WLM clients still support the MSN webcam protocol.         ]]&gt;</doc>
      </member>
    </enumeration>
    <record name="CallContentPrivate"
            c:type="TpCallContentPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="call-content.h" line="43"/>
    </record>
    <bitfield name="CallFlags" c:type="TpCallFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="371">&lt;![CDATA[         A set of flags representing additional information than is available         in CallState. Many of these flags only make         sense in a particular (or may explain why a call is in a specific         state).       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="197"/>
      <member name="locally_held"
              value="1"
              c:identifier="TP_CALL_FLAG_LOCALLY_HELD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="373">&lt;![CDATA[           The call has been put on hold by the local user, e.g. using           the Hold interface. This flag SHOULD only be set           if there is at least one Content, and all Contents are           locally held.                         Otherwise, in transient situations where some but not all contents             are on hold, UIs would falsely indicate that the call as a whole             is on hold, which could lead to the user saying something they'll             regret, while under the impression that the other contacts can't             hear them!              This flag exists as a simplified proxy for HoldStateChanged,             to reduce the number of signals that need to be             listened to by a simple UI.                    ]]&gt;</doc>
      </member>
      <member name="locally_ringing"
              value="2"
              c:identifier="TP_CALL_FLAG_LOCALLY_RINGING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="374">&lt;![CDATA[           This flag exists for observability of the           SetRinging method (e.g. so that           loggers can tell whether the call got as far as alerting the user,           or whether something went wrong before then). It should be set when           the SetRinging is called, and unset when the call leaves           Initialised.         ]]&gt;</doc>
      </member>
      <member name="locally_queued"
              value="4"
              c:identifier="TP_CALL_FLAG_LOCALLY_QUEUED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="375">&lt;![CDATA[           This flag exists for observability of the           SetQueued method. It should be set           when the SetQueued is called, and unset when the call leaves           Initialising or           Initialised.         ]]&gt;</doc>
      </member>
      <member name="forwarded" value="8" c:identifier="TP_CALL_FLAG_FORWARDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="376">&lt;![CDATA[           The initiator of the call originally called a contact other than the           current recipient of the call, but the call was then forwarded or           diverted. This flag only makes sense on outgoing calls. It SHOULD be           set or unset according to informational messages from other           contacts.         ]]&gt;</doc>
      </member>
      <member name="clearing" value="16" c:identifier="TP_CALL_FLAG_CLEARING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="377">&lt;![CDATA[           This flag only occurs when the CallState is Ended. The call with           this flag set has ended, but not all resources corresponding to the           call have been freed yet.            Depending on the protocol there might be some audible feedback while           the clearing flag is set.                         In calls following the ITU-T Q.931 standard there is a period of             time between the call ending and the underlying channel being             completely free for re-use.                    ]]&gt;</doc>
      </member>
    </bitfield>
    <bitfield name="CallMemberFlags" c:type="TpCallMemberFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="416">&lt;![CDATA[         A set of flags representing the status of a remote contact in a           call.          It is protocol- and client-specific whether a particular contact           will ever have a particular flag set on them, and Telepathy clients           SHOULD NOT assume that a flag will ever be set.                     180 Ringing in SIP, and its equivalent in XMPP, are optional             informational messages, and implementations are not required             to send them. The same applies to the messages used to indicate             hold state.                ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="222"/>
      <member name="ringing"
              value="1"
              c:identifier="TP_CALL_MEMBER_FLAG_RINGING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="418">&lt;![CDATA[           The remote contact's client has told us that the contact has been             alerted about the call but has not responded.                         This is a flag per member, not a flag for the call as a whole,               because in Muji conference calls, you could invite someone and               have their state be "ringing" for a while.                    ]]&gt;</doc>
      </member>
      <member name="held" value="2" c:identifier="TP_CALL_MEMBER_FLAG_HELD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="419">&lt;![CDATA[           The call member has put this call on hold.                         This is a flag per member, not a flag for the call as a whole,               because in conference calls, any member could put the conference               on hold.                    ]]&gt;</doc>
      </member>
      <member name="conference_host"
              value="4"
              c:identifier="TP_CALL_MEMBER_FLAG_CONFERENCE_HOST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="420">&lt;![CDATA[           This contact has merged this call into a conference. Note that GSM           provides a notification when the remote party merges a call into a           conference, but not when it is split out again; thus, this flag can           only indicate that the call has been part of a conference at some           point. If a GSM connection manager receives a notification that a           call has been merged into a conference a second time, it SHOULD           represent this by clearing and immediately re-setting this flag on           the remote contact.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="CallState" c:type="TpCallState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="345">&lt;![CDATA[         The state of a call, as a whole.          The allowed transitions are:                     Pending_Initiator → Initialising (for outgoing calls,             when Accept is called)           Initialising → Initialised (for outgoing calls, when             the remote client indicates that the user has been notified about             the call. If the network is known not to provide feedback about whether             the remote side is ringing, then the call should immediately be             set to Initialised.           Initialising → Initialised (for incoming calls, when e.g. the             implementation has been initialised far enough that it is sensible             to notify the user about the call (to reduce the probability that             the user will pick up the call and have it immediately fail).             The UI should then alert the user about the call, and call             SetRinging)           Initialised → Accepted (for outgoing calls to a contact,             when the remote contact accepts the call; for incoming calls, when             Accept is called.)           Accepted → Active (when the local user successfully             joins the call/conference, and media is known to be flowing             successfully; also, when temporary connection problems are             resolved (See below)). If the network is known not to provide             feedback about when the call is properly connected, the call             should immediately be set to Active.           Active → Accepted (when there are temporary connection problems             that the CM is aware of and able to recover from)           any state → Ended (when the call is terminated             normally, or when an error occurs that the CM is unable to recover             from)                   Clients MAY consider unknown values from this enum to be an           error - additional values will not be defined after the Call           specification is declared to be stable.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="187"/>
      <member name="unknown" value="0" c:identifier="TP_CALL_STATE_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="347">&lt;![CDATA[           The call state is not known. This call state MUST NOT appear as a           value of the CallState property, but           MAY be used by client code to represent calls whose state is as yet           unknown.         ]]&gt;</doc>
      </member>
      <member name="pending_initiator"
              value="1"
              c:identifier="TP_CALL_STATE_PENDING_INITIATOR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="348">&lt;![CDATA[           The initiator of the call hasn't accepted the call yet. This state           only makes sense for outgoing calls, where it means that the local           user has not yet sent any signalling messages to the remote user(s),           and will not do so until Accept is           called.         ]]&gt;</doc>
      </member>
      <member name="initialising"
              value="2"
              c:identifier="TP_CALL_STATE_INITIALISING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="349">&lt;![CDATA[           Progress has been made in placing the call, but the           contact has not been made aware of the call yet. This corresponds to SIP's           status code 183 Session Progress, and should be used for the period           where the CM is waiting for the streaming implementation to           initialise (before sending the initial INVITE or equivalent) and when the           outgoing call has reached a gateway or ICE negotiation is pending.           UIs should not produce a dialtone or start ringing if the call is in           this state.         ]]&gt;</doc>
      </member>
      <member name="initialised"
              value="3"
              c:identifier="TP_CALL_STATE_INITIALISED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="350">&lt;![CDATA[           In the outgoing case: at least one called user has been alerted           about the call (a SIP 180 (Ringing) packet or equivalent has been           received) but none have answered, so the call cannot go to Accepted           (use Ringing to determine which           members have been informed and which haven't, if you care). UIs           SHOULD produce a dialtone for outgoing calls in this state.            In the incoming case, the local user should be informed of the call           as soon as the call reaches this state (and           SetRinging should be called           to inform the CM that this has happened, so that it can relay this           fact to the caller using a SIP 180 (Ringing) packet or equivalent).         ]]&gt;</doc>
      </member>
      <member name="accepted" value="4" c:identifier="TP_CALL_STATE_ACCEPTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="351">&lt;![CDATA[           The contact being called has accepted the call, but the call is not           in the Active state (The most common reason for this is that the           streaming implementation hasn't connected yet).         ]]&gt;</doc>
      </member>
      <member name="active" value="5" c:identifier="TP_CALL_STATE_ACTIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="352">&lt;![CDATA[           The contact being called has accepted the call, and discourse between           at least two parties should now be possible.         ]]&gt;</doc>
      </member>
      <member name="ended" value="6" c:identifier="TP_CALL_STATE_ENDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="353">&lt;![CDATA[           The call has ended, either via normal termination or an error.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="CallStateChangeReason" c:type="TpCallStateChangeReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="383">&lt;![CDATA[         A simple representation of the reason for a change in the call's         state, which may be used by simple clients, or used as a fallback         when the DBus_Reason member of a Call_State_Reason         struct is not understood.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="214"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="385">&lt;![CDATA[           We just don't know. Unknown values of this enum SHOULD also be           treated like this.         ]]&gt;</doc>
      </member>
      <member name="progress_made"
              value="1"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_PROGRESS_MADE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="386">&lt;![CDATA[           Situation normal. Progress has been made in the setup/teardown of           the call (and it didn't require any user interaction).         ]]&gt;</doc>
      </member>
      <member name="user_requested"
              value="2"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_USER_REQUESTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="387">&lt;![CDATA[           The change was requested by the contact indicated by the Actor             member of a Call_State_Reason struct.            The DBus_Reason SHOULD be the empty string if the call             was terminated normally, but MAY be a non-empty error name             to indicate error-like call termination reasons (kicked from             a conference by a moderator, etc.).         ]]&gt;</doc>
      </member>
      <member name="forwarded"
              value="3"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_FORWARDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="388">&lt;![CDATA[           The call was forwarded. If known, the handle of the           contact the call was forwarded to will be indicated by the           "forwarded-to" member of a           CallStateDetails dictionnary           in the CallStateChanged           signal.         ]]&gt;</doc>
      </member>
      <member name="rejected"
              value="4"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_REJECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="389">&lt;![CDATA[           The CallState changed from             Initialised or             Ended (or a content's direction             changed) because it was rejected by the remote user.           Corresponds to Rejected         ]]&gt;</doc>
      </member>
      <member name="no_answer"
              value="5"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_NO_ANSWER">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="390">&lt;![CDATA[           The CallState changed from             Initialised or             Ended because the initiator             ended the call before the receiver accepted it. With an             incoming call this state change reason signifies a missed             call, or one that was picked up elsewhere before it was             picked up here.           Corresponds to NoAnswer or             PickedUpElsewhere         ]]&gt;</doc>
      </member>
      <member name="invalid_contact"
              value="6"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_INVALID_CONTACT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="391">&lt;![CDATA[           The CallState changed because one             of the addresses does not exist on the network.           Corresponds to DoesNotExist         ]]&gt;</doc>
      </member>
      <member name="permission_denied"
              value="7"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_PERMISSION_DENIED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="392">&lt;![CDATA[           The CallState changed because the           local user is not authorised.           Corresponds to PermissionDenied or             InsufficientBalance                      ]]&gt;</doc>
      </member>
      <member name="busy"
              value="8"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_BUSY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="393">&lt;![CDATA[           The CallState changed from             Initialised             Ended because the receiver is busy             (e.g. is already engaged in another call, and has not placed the             initiator in a call-waiting queue).           Corresponds to Busy         ]]&gt;</doc>
      </member>
      <member name="internal_error"
              value="9"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_INTERNAL_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="394">&lt;![CDATA[           There has been an unexpected error in either the CM or some other             local component.           Corresponds to Confused or           Media.StreamingError                    ]]&gt;</doc>
      </member>
      <member name="service_error"
              value="10"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_SERVICE_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="395">&lt;![CDATA[           There has been an unexpected error in the server or some other             remote component.           Corresponds to             ServiceConfused                    ]]&gt;</doc>
      </member>
      <member name="network_error"
              value="11"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_NETWORK_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="396">&lt;![CDATA[           There has been a network error related to the CM or the             signalling part of the call (compare and contrast:             Streaming_Error).           Corresponds to             NetworkError         ]]&gt;</doc>
      </member>
      <member name="media_error"
              value="12"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_MEDIA_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="397">&lt;![CDATA[           Some aspect of the content is unsupported so has to be             removed from the call.           Corresponds to Media.UnsupportedType             or Media.CodecsIncompatible                    ]]&gt;</doc>
      </member>
      <member name="connectivity_error"
              value="13"
              c:identifier="TP_CALL_STATE_CHANGE_REASON_CONNECTIVITY_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="398">&lt;![CDATA[           It was not possible for the streaming implementation to connect             to any of the users participating in this call or content.           Corresponds to ConnectionFailed or             ConnectionLost         ]]&gt;</doc>
      </member>
    </enumeration>
    <record name="CallStateReason"
            c:type="TpCallStateReason"
            version="0.17.5"
            glib:type-name="TpCallStateReason"
            glib:get-type="tp_call_state_reason_get_type"
            c:symbol-prefix="call_state_reason">
      <doc xml:space="preserve"
           filename="call-channel.c"
           line="139">Data structure representing the reason for a call state change.</doc>
      <source-position filename="call-channel.h" line="74"/>
      <field name="actor" writable="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="141">the contact responsible for the change, or 0 if no contact was
 responsible</doc>
        <type name="Handle" c:type="TpHandle"/>
      </field>
      <field name="reason" writable="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="143">the reason for the change. If
 #TP_CALL_STATE_CHANGE_REASON_USER_REQUESTED then the @actor member will
 dictate whether it was the local user or a remote contact responsible</doc>
        <type name="CallStateChangeReason" c:type="TpCallStateChangeReason"/>
      </field>
      <field name="dbus_reason" writable="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="146">A specific reason for the change, which may be a D-Bus error in
 the Telepathy namespace, a D-Bus error in any other namespace
 (for implementation-specific errors), or the empty string to indicate that
 the state change was not an error</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="message" writable="1">
        <doc xml:space="preserve"
             filename="call-channel.c"
             line="150">A developer readable debug message giving the reason for the state
 change.</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="ref_count" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <class name="CallStream"
           c:symbol-prefix="call_stream"
           c:type="TpCallStream"
           version="0.17.5"
           parent="Proxy"
           glib:type-name="TpCallStream"
           glib:get-type="tp_call_stream_get_type"
           glib:type-struct="CallStreamClass">
      <doc xml:space="preserve"
           filename="call-stream.c"
           line="30">Data structure representing a #TpCallStream.</doc>
      <source-position filename="call-stream.h" line="57"/>
      <function name="get_feature_quark_core"
                c:identifier="tp_call_stream_get_feature_quark_core">
        <source-position filename="call-stream.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_call_stream_init_known_interfaces"
                version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="460">Ensure that the known interfaces for #TpCallStream have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CALL_STREAM.</doc>
        <source-position filename="call-stream.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="can_request_receiving"
              c:identifier="tp_call_stream_can_request_receiving"
              glib:get-property="can-request-receiving"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="523">&lt;!-- --&gt;</doc>
        <source-position filename="call-stream.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-stream.c"
               line="529">the value of #TpCallStream:can-request-receiving</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="525">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_local_sending_state"
              c:identifier="tp_call_stream_get_local_sending_state"
              glib:get-property="local-sending-state"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="506">&lt;!-- --&gt;</doc>
        <source-position filename="call-stream.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-stream.c"
               line="512">the value of #TpCallStream:local-sending-state</doc>
          <type name="SendingState" c:type="TpSendingState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="508">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_members"
              c:identifier="tp_call_stream_get_remote_members"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="540">Get the remote contacts to who this stream is connected, mapped to their
sending state.

It is NOT guaranteed that #TpContact objects have any feature prepared.</doc>
        <source-position filename="call-stream.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="call-stream.c"
               line="549">
 #GHashTable mapping #TpContact to its new #TpSendingState</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="Contact"/>
            <type name="guint"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="542">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="request_receiving_async"
              c:identifier="tp_call_stream_request_receiving_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="630">Request that a remote contact stops or starts sending on this stream.

The #TpCallStream:can-request-receiving property defines whether the protocol
allows the local user to request the other side start sending on this stream.

If @receive is %TRUE, request that the given contact starts to send media.
If @receive is %FALSE, request that the given contact stops sending media.</doc>
        <source-position filename="call-stream.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="632">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="633">contact from which sending is requested</doc>
            <type name="Contact" c:type="TpContact*"/>
          </parameter>
          <parameter name="receive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="634">the requested receiving state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="635">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="636">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_receiving_finish"
              c:identifier="tp_call_stream_request_receiving_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="670">Finishes tp_call_stream_request_receiving_async().</doc>
        <source-position filename="call-stream.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="672">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="673">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sending_async"
              c:identifier="tp_call_stream_set_sending_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="578">Set the stream to start or stop sending media from the local user to other
contacts.

If @send is %TRUE, #TpCallStream:local-sending-state should change to
%TP_SENDING_STATE_SENDING, if it isn't already.
If @send is %FALSE, #TpCallStream:local-sending-state should change to
%TP_SENDING_STATE_NONE, if it isn't already.</doc>
        <source-position filename="call-stream.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="580">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
          <parameter name="send" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="581">the requested sending state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="582">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="583">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sending_finish"
              c:identifier="tp_call_stream_set_sending_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="612">Finishes tp_call_stream_set_sending_async().</doc>
        <source-position filename="call-stream.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="614">a #TpCallStream</doc>
            <type name="CallStream" c:type="TpCallStream*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="615">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-request-receiving"
                version="0.17.5"
                transfer-ownership="none"
                getter="can_request_receiving"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="376">If %TRUE, the user can request that a remote contact starts sending on this
stream.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="connection"
                version="0.17.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="348">The #TpConnection of the call.</doc>
        <type name="Connection"/>
      </property>
      <property name="content"
                version="0.17.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="393">The Content that this streams belongs to</doc>
        <type name="CallContent"/>
      </property>
      <property name="local-sending-state"
                version="0.17.5"
                transfer-ownership="none"
                getter="get_local_sending_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="362">The local user's sending state, from #TpSendingState.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="CallStreamPrivate" c:type="TpCallStreamPrivate*"/>
      </field>
      <glib:signal name="local-sending-state-changed"
                   when="last"
                   version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="408">The ::local-sending-state-changed signal is emitted whenever the
stream sending state changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="411">the new #TpSendingState</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="412">the #TpCallStateReason for the change</doc>
            <type name="CallStateReason"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remote-members-changed" when="last" version="0.17.5">
        <doc xml:space="preserve"
             filename="call-stream.c"
             line="426">The ::remote-members-changed signal is emitted whenever the
stream's remote members changes.

It is NOT guaranteed that #TpContact objects have any feature prepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="updates" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="429">
  #GHashTable mapping #TpContact to its new #TpSendingState</doc>
            <type name="GLib.HashTable">
              <type name="Contact"/>
              <type name="guint"/>
            </type>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="431">
 #GPtrArray of #TpContact removed from remote contacts</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="call-stream.c"
                 line="433">the #TpCallStateReason for the change</doc>
            <type name="CallStateReason"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <enumeration name="CallStreamCandidateType"
                 c:type="TpCallStreamCandidateType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1327">&lt;![CDATA[         The network topology that an IP candidate represents. This can         sometimes be used to infer what kind of performance characteristics         (latency, bandwith, etc) can be expected of connections made to this         candidate.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="660"/>
      <member name="none"
              value="0"
              c:identifier="TP_CALL_STREAM_CANDIDATE_TYPE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1329">&lt;![CDATA[           This is not an IP candidate. This is a reserved value, and should           not be seen on the bus.         ]]&gt;</doc>
      </member>
      <member name="host"
              value="1"
              c:identifier="TP_CALL_STREAM_CANDIDATE_TYPE_HOST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1330">&lt;![CDATA[           This candidate represents a direct connection to the host, as its           address is taken directly the host's IP stack.         ]]&gt;</doc>
      </member>
      <member name="server_reflexive"
              value="2"
              c:identifier="TP_CALL_STREAM_CANDIDATE_TYPE_SERVER_REFLEXIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1331">&lt;![CDATA[           This candidate probably represents a connection to the host through           a NAT device, as its address was discovered by sending a binding           request to a STUN server or similar.         ]]&gt;</doc>
      </member>
      <member name="peer_reflexive"
              value="3"
              c:identifier="TP_CALL_STREAM_CANDIDATE_TYPE_PEER_REFLEXIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1332">&lt;![CDATA[           This candidate probably represents a good route between the host and           its peer, as its address was discovered by sending a STUN binding           request to one of the candidates advertised by the peer.         ]]&gt;</doc>
      </member>
      <member name="relay"
              value="4"
              c:identifier="TP_CALL_STREAM_CANDIDATE_TYPE_RELAY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1333">&lt;![CDATA[           This candidate represents the address of a relay server (usually           somewhere on the public internet). This candidate is the most likely           to work, but all media will go via a relay server, so latency is           likely to be higher than other types of candidate.         ]]&gt;</doc>
      </member>
      <member name="multicast"
              value="5"
              c:identifier="TP_CALL_STREAM_CANDIDATE_TYPE_MULTICAST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1334">&lt;![CDATA[           This candidate represents a Multicast group. This value should only           appear if the Stream's Transport is           set to Multicast.         ]]&gt;</doc>
      </member>
    </enumeration>
    <record name="CallStreamClass"
            c:type="TpCallStreamClass"
            glib:is-gtype-struct-for="CallStream"
            version="0.17.5">
      <doc xml:space="preserve"
           filename="call-stream.c"
           line="38">The class of a #TpCallStream.</doc>
      <source-position filename="call-stream.h" line="57"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="CallStreamPrivate"
            c:type="TpCallStreamPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="call-stream.h" line="43"/>
    </record>
    <class name="Capabilities"
           c:symbol-prefix="capabilities"
           c:type="TpCapabilities"
           version="0.11.3"
           parent="GObject.Object"
           glib:type-name="TpCapabilities"
           glib:get-type="tp_capabilities_get_type"
           glib:type-struct="CapabilitiesClass">
      <doc xml:space="preserve"
           filename="capabilities.c"
           line="47">An object representing capabilities a #TpConnection or #TpContact supports.</doc>
      <source-position filename="capabilities.h" line="35"/>
      <method name="dup_channel_classes_variant"
              c:identifier="tp_capabilities_dup_channel_classes_variant"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="1087">Return the #TpCapabilities:channel-classes-variant property</doc>
        <source-position filename="capabilities.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="1093">the value of the
#TpCapabilities:channel-classes-variant property</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="1089">a #TpCapabilities</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel_classes"
              c:identifier="tp_capabilities_get_channel_classes"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="81">&lt;!-- --&gt;</doc>
        <source-position filename="capabilities.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="87">the same #GPtrArray as
the #TpCapabilities:channel-classes property</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GLib.HashTable">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="83">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_specific_to_contact"
              c:identifier="tp_capabilities_is_specific_to_contact"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="100">&lt;!-- --&gt;</doc>
        <source-position filename="capabilities.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="106">the same #gboolean as the #TpCapabilities:contact-specific property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="102">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_audio_call"
              c:identifier="tp_capabilities_supports_audio_call"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="559">Return whether audio calls can be established, for instance by calling
tp_account_channel_request_new_audio_call(), followed by
tp_account_channel_request_set_target_id() with @handle_type.

To check whether requests using
tp_account_channel_request_set_target_contact() would work, set
@handle_type to %TP_HANDLE_TYPE_CONTACT.</doc>
        <source-position filename="capabilities.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="574">%TRUE if a channel request containing Call as ChannelType,
@handle_type as TargetHandleType, a True value for InitialAudio and an
identifier of the appropriate type can be expected to work, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="561">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="562">the handle type of the call; #TP_HANDLE_TYPE_CONTACT for
 private, #TP_HANDLE_TYPE_ROOM or #TP_HANDLE_TYPE_NONE for conference
 (depending on the protocol)</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_audio_video_call"
              c:identifier="tp_capabilities_supports_audio_video_call"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="587">Return whether audio/video calls can be established, for instance by calling
tp_account_channel_request_new_audio_video_call(), followed by
tp_account_channel_request_set_target_id() with @handle_type.

To check whether requests using
tp_account_channel_request_set_target_contact() would work, set
@handle_type to %TP_HANDLE_TYPE_CONTACT.</doc>
        <source-position filename="capabilities.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="602">%TRUE if a channel request containing Call as ChannelType,
@handle_type as TargetHandleType, a True value for
InitialAudio/InitialVideo and an identifier of the appropriate type can be
expected to work,
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="589">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="590">the handle type of the call; #TP_HANDLE_TYPE_CONTACT for
 private, #TP_HANDLE_TYPE_ROOM or #TP_HANDLE_TYPE_NONE for conference
 (depending on the protocol)</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_contact_search"
              c:identifier="tp_capabilities_supports_contact_search"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="917">Return whether this protocol or connection can perform contact
searches. Optionally, also return whether a limited number of
results can be specified, and whether alternative servers can be
searched.</doc>
        <source-position filename="capabilities.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="932">%TRUE if #TpContactSearch can be used.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="919">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
          <parameter name="with_limit"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="920">if not %NULL, used to return %TRUE if the limit
parameter to tp_contact_search_new_async() and
tp_contact_search_reset_async() can be nonzero</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
          <parameter name="with_server"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="923">if not %NULL, used to return %TRUE if the server
parameter to tp_contact_search_new_async() and
tp_contact_search_reset_async() can be non-%NULL</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_dbus_tubes"
              c:identifier="tp_capabilities_supports_dbus_tubes"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="884">If the #TpCapabilities:contact-specific property is %TRUE, this function
checks if the contact associated with this #TpCapabilities supports
D-Bus tubes with @handle_type as TargetHandleType.
If @service_name is not %NULL, it also checks if it supports stream tubes
with @service as #TP_PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME.

If the #TpCapabilities:contact-specific property is %FALSE, this function
checks if the connection supports requesting D-Bus tube channels with
@handle_type as ChannelType. The @service_name argument is unused in
this case.</doc>
        <source-position filename="capabilities.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="902">%TRUE if the contact or connection supports this type of D-Bus
tubes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="886">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="887">the handle type of the tube (either #TP_HANDLE_TYPE_CONTACT
or #TP_HANDLE_TYPE_ROOM)</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="service_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="889">the service name of the tube, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_file_transfer"
              c:identifier="tp_capabilities_supports_file_transfer"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="706">Return whether private file transfer can be established by providing
a contact identifier.</doc>
        <source-position filename="capabilities.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="713">%TRUE if a channel request containing FileTransfer as ChannelType,
HandleTypeContact as TargetHandleType and a contact identifier can be
expected to work, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="708">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_file_transfer_description"
              c:identifier="tp_capabilities_supports_file_transfer_description"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="743">&lt;!-- --&gt;</doc>
        <source-position filename="capabilities.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="749">%TRUE if requests as described for
 tp_capabilities_supports_file_transfer() can also specify the outgoing
 file's description</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="745">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_file_transfer_initial_offset"
              c:identifier="tp_capabilities_supports_file_transfer_initial_offset"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="761">Return whether an initial offset other than 0 can be specified on
outgoing file transfers. This can be used to resume partial transfers,
by omitting the part that has already been sent.</doc>
        <source-position filename="capabilities.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="769">%TRUE if requests as described for
 tp_capabilities_supports_file_transfer() can also specify an
 initial offset greater than 0</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="763">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_file_transfer_timestamp"
              c:identifier="tp_capabilities_supports_file_transfer_timestamp"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="781">&lt;!-- --&gt;</doc>
        <source-position filename="capabilities.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="787">%TRUE if requests as described for
 tp_capabilities_supports_file_transfer() can also specify the outgoing
 file's timestamp</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="783">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_file_transfer_uri"
              c:identifier="tp_capabilities_supports_file_transfer_uri"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="725">&lt;!-- --&gt;</doc>
        <source-position filename="capabilities.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="731">%TRUE if requests as described for
 tp_capabilities_supports_file_transfer() can also specify the outgoing
 file's URI</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="727">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_room_list"
              c:identifier="tp_capabilities_supports_room_list"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="994">Discovers whether this protocol or connection supports listing rooms.
Specifically, if this function returns %TRUE, a room list channel can be
requested as follows:
|[
GHashTable *request;
TpAccountChannelRequest *req;

request = tp_asv_new (
    TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING,
      TP_IFACE_CHANNEL_TYPE_ROOM_LIST,
    TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_NONE,
    NULL);

req = tp_account_channel_request_new (account, request,
   TP_USER_ACTION_TIME_CURRENT_TIME);

tp_account_channel_request_create_and_handle_channel_async (req, NULL,
    create_channel_cb, NULL);

g_object_unref (req);
g_hash_table_unref (request);
]|

If @with_server is set to %TRUE, a list of rooms on a particular server can
be requested as follows:
|[
/\* Same code as above but with request defined using: *\/
request = tp_asv_new (
    TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING,
      TP_IFACE_CHANNEL_TYPE_ROOM_LIST,
    TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_NONE,
    TP_PROP_CHANNEL_TYPE_ROOM_LIST_SERVER, G_TYPE_STRING,
      "characters.shakespeare.lit",
    NULL);
]|</doc>
        <source-position filename="capabilities.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="1037">%TRUE if a channel request containing RoomList as ChannelType,
HandleTypeNone as TargetHandleType can be expected to work,
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="996">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
          <parameter name="with_server"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="997">if not %NULL, used to return %TRUE if the
#TP_PROP_CHANNEL_TYPE_ROOM_LIST_SERVER property can be defined when
requesting a RoomList channel.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_sms"
              c:identifier="tp_capabilities_supports_sms"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="409">If the #TpCapabilities:contact-specific property is %FALSE, this function
checks if SMS text channels can be requested with the connection associated
with this #TpCapabilities.

If the #TpCapabilities:contact-specific property is %TRUE, this function
checks if the contact associated with this #TpCapabilities supports
SMS text channels.</doc>
        <source-position filename="capabilities.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="421">%TRUE if a channel request containing Text as ChannelType,
HandleTypeContact as TargetHandleType, a channel identifier and
#TP_PROP_CHANNEL_INTERFACE_SMS_SMS_CHANNEL set to %TRUE can be
expected to work, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="411">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_stream_tubes"
              c:identifier="tp_capabilities_supports_stream_tubes"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="852">If the #TpCapabilities:contact-specific property is %TRUE, this function
checks if the contact associated with this #TpCapabilities supports
stream tubes with @handle_type as TargetHandleType.
If @service is not %NULL, it also checks if it supports stream tubes
with @service as #TP_PROP_CHANNEL_TYPE_STREAM_TUBE_SERVICE.

If the #TpCapabilities:contact-specific property is %FALSE, this function
checks if the connection supports requesting stream tube channels with
@handle_type as ChannelType. The @service argument is unused in this case.</doc>
        <source-position filename="capabilities.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="869">%TRUE if the contact or connection supports this type of stream
tubes.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="854">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="855">the handle type of the tube (either #TP_HANDLE_TYPE_CONTACT
or #TP_HANDLE_TYPE_ROOM)</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="857">the service of the tube, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_text_chatrooms"
              c:identifier="tp_capabilities_supports_text_chatrooms"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="378">If the #TpCapabilities:contact-specific property is %FALSE, this function
checks if named text chatrooms can be joined by providing a chatroom
identifier, for instance by calling
tp_account_channel_request_new_text() followed by
tp_account_channel_request_set_target_id() with %TP_HANDLE_TYPE_ROOM.

If the #TpCapabilities:contact-specific property is %TRUE, this function
checks if the contact associated with this #TpCapabilities can be invited
to named text chatrooms.

If the protocol is such that chatrooms can be joined or contacts can be
invited, but only via a more elaborate D-Bus API than normal
(because more information is needed), then this method will return %FALSE.</doc>
        <source-position filename="capabilities.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="396">%TRUE if a channel request containing Text as ChannelType,
HandleTypeRoom as TargetHandleType and a channel identifier can be
expected to work, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="380">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="supports_text_chats"
              c:identifier="tp_capabilities_supports_text_chats"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="352">Return whether private text channels can be established by providing
a contact identifier, for instance by calling
tp_account_channel_request_new_text() followed by
tp_account_channel_request_set_target_contact().

If the protocol is such that text chats can be established, but only via a
more elaborate D-Bus API than normal (because more information is needed),
then this method will return %FALSE.</doc>
        <source-position filename="capabilities.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="capabilities.c"
               line="365">%TRUE if a channel request containing Text as ChannelType,
HandleTypeContact as TargetHandleType and a contact identifier can be
expected to work, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="capabilities.c"
                 line="354">a #TpCapabilities object</doc>
            <type name="Capabilities" c:type="TpCapabilities*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="channel-classes"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="215">The underlying data structure used by Telepathy to represent the
requests that can succeed.

This can be used by advanced clients to determine whether an unusually
complex request would succeed. See the Telepathy D-Bus API Specification
for details of how to interpret the returned #GPtrArray of
#TP_STRUCT_TYPE_REQUESTABLE_CHANNEL_CLASS.

The higher-level methods like
tp_capabilities_supports_text_chats() are likely to be more useful to
the majority of clients.</doc>
        <type/>
      </property>
      <property name="channel-classes-variant"
                version="0.19.0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="253">The underlying data structure used by Telepathy to represent the
requests that can succeed.

This can be used by advanced clients to determine whether an unusually
complex request would succeed. See the Telepathy D-Bus API Specification
for details of how to interpret the returned #GVariant of type
a(a{sv}as).

The higher-level methods like
tp_capabilities_supports_text_chats() are likely to be more useful to
the majority of clients.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="contact-specific"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="capabilities.c"
             line="238">Whether this object accurately describes the capabilities of a particular
contact, or if it's only a guess based on the capabilities of the
underlying connection.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="CapabilitiesClass"
            c:type="TpCapabilitiesClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Capabilities">
      <source-position filename="capabilities.h" line="35"/>
    </record>
    <record name="CapabilitiesPrivate"
            c:type="TpCapabilitiesPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="capabilities.h" line="36"/>
    </record>
    <enumeration name="CaptchaCancelReason" c:type="TpCaptchaCancelReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="711">&lt;![CDATA[         A reason why captcha authentication was aborted by the client.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="363"/>
      <member name="user_cancelled"
              value="0"
              c:identifier="TP_CAPTCHA_CANCEL_REASON_USER_CANCELLED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="713">&lt;![CDATA[           The user aborted the authentication. If this is used, the           CaptchaError SHOULD be set to           Cancelled         ]]&gt;</doc>
      </member>
      <member name="not_supported"
              value="1"
              c:identifier="TP_CAPTCHA_CANCEL_REASON_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="714">&lt;![CDATA[           The Handler doesn't support the given/required captcha types.           If this is used, the CaptchaError           SHOULD be set to CaptchaNotSupported.           This SHOULD also be used if           Close is called           before CancelCaptcha.                        If no Handler supports captcha channels,             the ChannelDispatcher will just call             Close,             because it has no knowledge of specific channel types.                    ]]&gt;</doc>
      </member>
      <member name="service_confused"
              value="2"
              c:identifier="TP_CAPTCHA_CANCEL_REASON_SERVICE_CONFUSED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="715">&lt;![CDATA[           The Handler doesn't understand the captcha data received. The           challenger may be sending gibberish.           If this is used, the CaptchaError           SHOULD be set to ServiceConfused.         ]]&gt;</doc>
      </member>
    </enumeration>
    <bitfield name="CaptchaFlags" c:type="TpCaptchaFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="703">&lt;![CDATA[         Extra flags to include with Captcha information       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="357"/>
      <member name="captcha_flags_required"
              value="1"
              c:identifier="TP_CAPTCHA_FLAGS_REQUIRED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="705">&lt;![CDATA[           This captcha mechanism is required to be successfully           answered in order to pass this captcha challenge.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="CaptchaStatus" c:type="TpCaptchaStatus">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="733">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="373"/>
      <member name="local_pending"
              value="0"
              c:identifier="TP_CAPTCHA_STATUS_LOCAL_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="735">&lt;![CDATA[           The challenge/response exchange is in progress and waiting for           a local action. Call AnswerCaptchas           to go to the Remote_Pending state, or call           CancelCaptcha followed by            Close           to give up.         ]]&gt;</doc>
      </member>
      <member name="remote_pending"
              value="1"
              c:identifier="TP_CAPTCHA_STATUS_REMOTE_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="736">&lt;![CDATA[           The challenge/response exchange is in progress and waiting for           a response from the server. Wait for a reply from the server,           which will result in the Succeeded, Try_Again, or Failed state,           or call CancelCaptcha followed by           Close           to give up.         ]]&gt;</doc>
      </member>
      <member name="succeeded"
              value="2"
              c:identifier="TP_CAPTCHA_STATUS_SUCCEEDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="737">&lt;![CDATA[           Everyone is happy. Connection to the server will proceed as soon as           this state is reached. There is nothing useful to do in this state           except to call Close           to close the channel.         ]]&gt;</doc>
      </member>
      <member name="try_again"
              value="3"
              c:identifier="TP_CAPTCHA_STATUS_TRY_AGAIN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="738">&lt;![CDATA[           The server has indicated an authentication failure.           Call GetCaptchas again to get           a new captcha, or           CancelCaptcha followed by           Close           to give up.         ]]&gt;</doc>
      </member>
      <member name="failed" value="4" c:identifier="TP_CAPTCHA_STATUS_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="739">&lt;![CDATA[           Authentication has failed in some way. There is nothing           useful to do in this state except to close the channel with           Close.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="Channel"
           c:symbol-prefix="channel"
           c:type="TpChannel"
           version="0.7.1"
           parent="Proxy"
           glib:type-name="TpChannel"
           glib:get-type="tp_channel_get_type"
           glib:type-struct="ChannelClass">
      <doc xml:space="preserve"
           filename="channel.c"
           line="79">A proxy object for a Telepathy channel.
A proxy object for a Telepathy channel. There are no interesting
public struct fields.

(Changed in 0.7.12: the layout of the structure is visible, allowing
subclassing.)</doc>
      <source-position filename="channel.h" line="49"/>
      <constructor name="new"
                   c:identifier="tp_channel_new"
                   version="0.7.1"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2112">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_channel() instead.</doc-deprecated>
        <source-position filename="channel.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2126">a new channel proxy, or %NULL on invalid arguments.</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2114">a connection; may not be %NULL</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2115">the object path of the channel; may not be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="optional_channel_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2116">the channel type if already known, or %NULL if not</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="optional_handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2117">the handle type if already known, or
 %TP_UNKNOWN_HANDLE_TYPE if not</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="optional_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2119">the handle if already known, or 0 if not
 (if @optional_handle_type is %TP_UNKNOWN_HANDLE_TYPE or
 %TP_HANDLE_TYPE_NONE, this must be 0)</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_properties"
                   c:identifier="tp_channel_new_from_properties"
                   version="0.7.19"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2048">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_channel() instead.</doc-deprecated>
        <source-position filename="channel.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2061">a new channel proxy, or %NULL on invalid arguments</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2050">a connection; may not be %NULL</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2051">the object path of the channel; may not be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2052">
 the immutable properties of the channel,
 as signalled by the NewChannel D-Bus signal or returned by the
 CreateChannel and EnsureChannel D-Bus methods: a mapping from
 strings (D-Bus interface name + "." + property name) to #GValue instances</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_chat_states"
                c:identifier="tp_channel_get_feature_quark_chat_states">
        <source-position filename="channel.h" line="237"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_contacts"
                c:identifier="tp_channel_get_feature_quark_contacts">
        <source-position filename="channel.h" line="212"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_core"
                c:identifier="tp_channel_get_feature_quark_core">
        <source-position filename="channel.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_group"
                c:identifier="tp_channel_get_feature_quark_group">
        <source-position filename="channel.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_password"
                c:identifier="tp_channel_get_feature_quark_password">
        <source-position filename="channel.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_channel_init_known_interfaces"
                version="0.7.6">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2391">Ensure that the known interfaces for TpChannel have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CHANNEL.</doc>
        <source-position filename="channel.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="borrow_connection"
              c:identifier="tp_channel_borrow_connection"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="390">Returns the connection for this channel. The returned pointer is only valid
while this channel is valid - reference it with g_object_ref() if needed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_channel_get_connection() instead.</doc-deprecated>
        <source-position filename="channel.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="397">the value of #TpChannel:connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="392">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="borrow_immutable_properties"
              c:identifier="tp_channel_borrow_immutable_properties"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="428">Returns the immutable D-Bus properties of this channel, the same as
#TpChannel:channel-properties.

The returned hash table should not be altered, and is not necessarily
valid after the main loop is next re-entered. Copy it with
g_boxed_copy() (its type is %TP_HASH_TYPE_QUALIFIED_PROPERTY_VALUE_MAP)
if a copy that remains valid must be kept.

If the #TpChannel:channel-properties property was not set during
construction (e.g. by calling tp_channel_new_from_properties()), a
reasonable but possibly incomplete version will be made up from the values
of individual properties; reading this property repeatedly may yield
progressively more complete values until the %TP_CHANNEL_FEATURE_CORE
feature is prepared.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_channel_dup_immutable_properties() instead.</doc-deprecated>
        <source-position filename="channel.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="447">a #GHashTable
 where the keys are strings,
 D-Bus interface name + "." + property name, and the values are #GValue
 instances</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="430">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="call_when_ready"
              c:identifier="tp_channel_call_when_ready"
              version="0.7.7"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.17.6">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2326">If @self is ready for use or has been invalidated, call @callback
immediately, then return. Otherwise, arrange
for @callback to be called when @self either becomes ready for use
or becomes invalid.

This is a less general form of tp_proxy_prepare_async(), which should be
used in new code. (One important difference is that this function can call
@callback before it has returned, whereas tp_proxy_prepare_async() always
calls @callback from the main loop.)</doc>
        <doc-deprecated xml:space="preserve">Use tp_proxy_prepare_async()</doc-deprecated>
        <source-position filename="channel.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2328">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="callback" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2329">called when the channel becomes ready or invalidated, whichever
 happens first</doc>
            <type name="ChannelWhenReadyCb" c:type="TpChannelWhenReadyCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2331">arbitrary user-supplied data passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_async"
              c:identifier="tp_channel_close_async"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2755">Close channel @self. In most cases, it's generally cleaner to use
tp_channel_leave_async() instead to properly leave and close the channel.

When the channel has been closed, @callback will be called.
You can then call tp_channel_close_finish() to get the result of
the operation.</doc>
        <source-position filename="channel.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2757">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2758">a callback to call when we closed the channel, or %NULL
 to ignore any reply</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2760">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_finish"
              c:identifier="tp_channel_close_finish"
              version="0.13.10"
              throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2792">Finishes a call to tp_channel_leave_async().</doc>
        <source-position filename="channel.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2800">%TRUE if the channel has been closed; %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2794">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2795">a #GAsyncResult passed to the callback for tp_channel_close_async().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_async"
              c:identifier="tp_channel_destroy_async"
              version="0.15.2">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2834">Destroy channel @self.
If @self doesn't implement #TP_IFACE_QUARK_CHANNEL_INTERFACE_DESTROYABLE
or if for any reason we can't destroy the channel, we close it.

When the channel has been destroyed or closed, @callback will be called.
You can then call tp_channel_destroy_finish() to get the result of
the operation.</doc>
        <source-position filename="channel.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2836">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2837">a callback to call when we left the channel</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2838">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_finish"
              c:identifier="tp_channel_destroy_finish"
              version="0.15.2"
              throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2877">Completes a call to tp_channel_destroy_async().</doc>
        <source-position filename="channel.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2885">%TRUE if the channel has been destroyed or closed; %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2879">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2880">a #GAsyncResult passed to the callback for tp_channel_destroy_async().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_immutable_properties"
              c:identifier="tp_channel_dup_immutable_properties"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="channel.c"
             line="470">Returns the immutable D-Bus properties of this channel, in a variant of type
%G_VARIANT_TYPE_VARDICT where the keys are strings,
D-Bus interface name + "." + property name. Use g_variant_lookup() or
g_variant_lookup_value() for convenient access to the values.

If the #TpChannel:channel-properties property was not set during
construction (e.g. by calling tp_channel_new_from_properties()), a
reasonable but possibly incomplete version will be made up from the values
of individual properties; reading this property repeatedly may yield
progressively more complete values until the %TP_CHANNEL_FEATURE_CORE
feature is prepared.

This function should be used only by #TpChannel subclasses, otherwise it is
recommended to use individual property getters instead.</doc>
        <source-position filename="channel.h" line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel.c"
               line="489">a dictionary where the keys are strings,
 D-Bus interface name + "." + property name.</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="472">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel_type"
              c:identifier="tp_channel_get_channel_type"
              version="0.7.12">
        <doc xml:space="preserve"
             filename="channel.c"
             line="245">Get the D-Bus interface name representing this channel's type,
if it has been discovered.

This is the same as the #TpChannelIface:channel-type property; it isn't
guaranteed to be non-%NULL until the %TP_CHANNEL_FEATURE_CORE feature has
been prepared.</doc>
        <source-position filename="channel.h" line="157"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="256">the channel type, if the channel is ready; either the channel
 type or %NULL, if the channel is not yet ready.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="247">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channel_type_id"
              c:identifier="tp_channel_get_channel_type_id"
              version="0.7.12">
        <doc xml:space="preserve"
             filename="channel.c"
             line="269">Get the D-Bus interface name representing this channel's type, as a GQuark,
if it has been discovered.

This is the same as the #TpChannelIface:channel-type property, except that it
is a GQuark rather than a string. It isn't guaranteed to be nonzero until
the %TP_CHANNEL_FEATURE_CORE property is ready.</doc>
        <source-position filename="channel.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="280">the channel type, if the channel is ready; either the channel
 type or 0, if the channel is not yet ready.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="271">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chat_state"
              c:identifier="tp_channel_get_chat_state"
              version="0.11.3"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="569">Return the chat state for the given contact. If tp_proxy_is_prepared()
would return %FALSE for the feature %TP_CHANNEL_FEATURE_CHAT_STATES,
the result will always be %TP_CHANNEL_CHAT_STATE_INACTIVE.</doc>
        <doc-deprecated xml:space="preserve">Use tp_text_channel_get_chat_state() instead.</doc-deprecated>
        <source-position filename="channel.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="578">the chat state for @contact, or %TP_CHANNEL_CHAT_STATE_INACTIVE
 if their chat state is not known</doc>
          <type name="ChannelChatState" c:type="TpChannelChatState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="571">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="572">a contact handle</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="tp_channel_get_connection"
              glib:get-property="connection"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="channel.c"
             line="410">Returns the connection for this channel. The returned pointer is only valid
while this channel is valid - reference it with g_object_ref() if needed.</doc>
        <source-position filename="channel.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="417">the value of #TpChannel:connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="412">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle"
              c:identifier="tp_channel_get_handle"
              version="0.7.12">
        <doc xml:space="preserve"
             filename="channel.c"
             line="293">Get the handle representing the contact, chatroom, etc. with which this
channel communicates for its whole lifetime, or 0 if there is no such
handle or it has not yet been discovered.

This is the same as the #TpChannelIface:handle property. It isn't
guaranteed to have its final value until the %TP_CHANNEL_FEATURE_CORE
feature is ready.

If @handle_type is not %NULL, the type of handle is written into it.
This will be %TP_UNKNOWN_HANDLE_TYPE if the handle has not yet been
discovered, or %TP_HANDLE_TYPE_NONE if there is no handle with which this
channel will always communicate. This is the same as the
#TpChannelIface:handle-type property.</doc>
        <source-position filename="channel.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="312">the handle</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="295">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="handle_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="296">if not %NULL, used to return the type of this handle</doc>
            <type name="HandleType" c:type="TpHandleType*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_identifier"
              c:identifier="tp_channel_get_identifier"
              glib:get-property="identifier"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="channel.c"
             line="329">This channel's associated identifier, or the empty string if no identifier
or unknown.

This is the same as the #TpChannel:identifier property, and isn't guaranteed
to be set until the %TP_CHANNEL_FEATURE_CORE property is ready.

Changed in 0.11.4: as with #TpChannel:identifier, this could
previously either be %NULL or the empty string if there was no suitable
value. It is now non-%NULL in all cases.</doc>
        <source-position filename="channel.h" line="160"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="343">the identifier</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="331">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initiator_contact"
              c:identifier="tp_channel_get_initiator_contact"
              glib:get-property="initiator-contact"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="806">&lt;!-- --&gt;</doc>
        <source-position filename="channel.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="812">the value of #TpChannel:initiator-contact</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="808">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initiator_handle"
              c:identifier="tp_channel_get_initiator_handle"
              glib:get-property="initiator-handle"
              version="0.11.15"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2428">Return the #TpChannel:initiator-handle property</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_channel_get_initiator_contact() instead.</doc-deprecated>
        <source-position filename="channel.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2434">the value of #TpChannel:initiator-handle</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2430">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_initiator_identifier"
              c:identifier="tp_channel_get_initiator_identifier"
              glib:get-property="initiator-identifier"
              version="0.11.15"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2446">Return the #TpChannel:initiator-identifier property</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_channel_get_initiator_contact() instead.</doc-deprecated>
        <source-position filename="channel.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2452">the value of #TpChannel:initiator-identifier</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2448">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requested"
              c:identifier="tp_channel_get_requested"
              glib:get-property="requested"
              version="0.11.15">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2411">Return the #TpChannel:requested property</doc>
        <source-position filename="channel.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2417">the value of #TpChannel:requested</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2413">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target_contact"
              c:identifier="tp_channel_get_target_contact"
              glib:get-property="target-contact"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="789">&lt;!-- --&gt;</doc>
        <source-position filename="channel.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="795">the value of #TpChannel:target-contact</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="791">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_dup_local_pending_contacts"
              c:identifier="tp_channel_group_dup_local_pending_contacts"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="865">If @self is a group and the %TP_CHANNEL_FEATURE_CONTACTS feature has been
prepared, return a #GPtrArray containing its local-pending members.

If @self is a group but %TP_CHANNEL_FEATURE_CONTACTS has not been prepared,
the result may either be a set of local-pending members, or %NULL.

If @self is not a group, return %NULL.</doc>
        <source-position filename="channel.h" line="223"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="877">
 a new #GPtrArray of #TpContact, free it with g_ptr_array_unref(), or %NULL.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Contact"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="867">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_dup_members_contacts"
              c:identifier="tp_channel_group_dup_members_contacts"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="840">If @self is a group and the %TP_CHANNEL_FEATURE_CONTACTS feature has been
prepared, return a #GPtrArray containing its members.

If @self is a group but %TP_CHANNEL_FEATURE_CONTACTS has not been prepared,
the result may either be a set of members, or %NULL.

If @self is not a group, return %NULL.</doc>
        <source-position filename="channel.h" line="221"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="852">
 a new #GPtrArray of #TpContact, free it with g_ptr_array_unref(), or %NULL.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Contact"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="842">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_dup_remote_pending_contacts"
              c:identifier="tp_channel_group_dup_remote_pending_contacts"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="890">If @self is a group and the %TP_CHANNEL_FEATURE_CONTACTS feature has been
prepared, return a #GPtrArray containing its remote-pending members.

If @self is a group but %TP_CHANNEL_FEATURE_CONTACTS has not been prepared,
the result may either be a set of remote-pending members, or %NULL.

If @self is not a group, return %NULL.</doc>
        <source-position filename="channel.h" line="225"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="902">
 a new #GPtrArray of #TpContact, free it with g_ptr_array_unref(), or %NULL.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Contact"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="892">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_get_contact_owner"
              c:identifier="tp_channel_group_get_contact_owner"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="996">Synopsis (see below for further explanation):

- if @self is not a group or @contact is not a member of this channel,
  result is undefined;
- if %TP_CHANNEL_FEATURE_CONTACTS has not yet been prepared, result is
  undefined;
- if @self does not have flags that include
  %TP_CHANNEL_GROUP_FLAG_PROPERTIES,
  result is undefined;
- if @contact is channel-specific and its globally valid "owner" is known,
  return that owner;
- if @contact is channel-specific and its globally valid "owner" is unknown,
  return %NULL;
- if @contact is globally valid, return @contact itself

Some channels (those with flags that include
%TP_CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES) have a concept of
"channel-specific contacts". These are contacts that only have meaning within
the context of the channel - for instance, in XMPP Multi-User Chat,
participants in a chatroom are identified by an in-room JID consisting
of the JID of the chatroom plus a local nickname.

Depending on the protocol and configuration, it might be possible to find
out what globally valid contact (i.e. a contact that you could add to
your contact list) "owns" a channel-specific contact. For instance, in
most XMPP MUC chatrooms, normal users cannot see what global JID
corresponds to an in-room JID, but moderators can.

This is further complicated by the fact that channels with channel-specific
contacts can sometimes have members with globally valid contacts (for
instance, if you invite someone to an XMPP MUC using their globally valid
JID, you would expect to see the contact representing that JID in the
Group's remote-pending set).</doc>
        <source-position filename="channel.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="1035">the global contact that owns the given contact,
 or %NULL.</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="998">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="999">a contact which is a member of this channel</doc>
            <type name="Contact" c:type="TpContact*"/>
          </parameter>
        </parameters>
      </method>
      <method name="group_get_flags"
              c:identifier="tp_channel_group_get_flags"
              version="0.7.12">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="96">Return the #TpChannel:group-flags property (see the description
of that property for notes on validity).</doc>
        <source-position filename="channel.h" line="174"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="103">the group flags, or 0</doc>
          <type name="ChannelGroupFlags" c:type="TpChannelGroupFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="98">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_get_handle_owner"
              c:identifier="tp_channel_group_get_handle_owner"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="272">Synopsis (see below for further explanation):

- if @self is not a group or @handle is not a member of this channel,
  result is undefined;
- if %TP_CHANNEL_FEATURE_GROUP has not yet been prepared, result is
  undefined;
- if @self does not have flags that include
  %TP_CHANNEL_GROUP_FLAG_PROPERTIES,
  result is undefined;
- if @handle is channel-specific and its globally valid "owner" is known,
  return that owner;
- if @handle is channel-specific and its globally valid "owner" is unknown,
  return zero;
- if @handle is globally valid, return @handle itself

Some channels (those with flags that include
%TP_CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES) have a concept of
"channel-specific handles". These are handles that only have meaning within
the context of the channel - for instance, in XMPP Multi-User Chat,
participants in a chatroom are identified by an in-room JID consisting
of the JID of the chatroom plus a local nickname.

Depending on the protocol and configuration, it might be possible to find
out what globally valid handle (i.e. an identifier that you could add to
your contact list) "owns" a channel-specific handle. For instance, in
most XMPP MUC chatrooms, normal users cannot see what global JID
corresponds to an in-room JID, but moderators can.

This is further complicated by the fact that channels with channel-specific
handles can sometimes have members with globally valid handles (for
instance, if you invite someone to an XMPP MUC using their globally valid
JID, you would expect to see the handle representing that JID in the
Group's remote-pending set).

This function's result is undefined unless the channel is ready
and its flags include %TP_CHANNEL_GROUP_FLAG_PROPERTIES (an implementation
without extra D-Bus round trips is not possible using the older API).</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_channel_group_get_contact_owner() instead.</doc-deprecated>
        <source-position filename="channel.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="315">the global handle that owns the given handle, or 0</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="274">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="275">a handle which is a member of this channel</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="group_get_local_pending"
              c:identifier="tp_channel_group_get_local_pending"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="141">If @self is a group and the %TP_CHANNEL_FEATURE_GROUP feature has been
prepared, return a #TpIntset containing its local-pending members.

If @self is a group but %TP_CHANNEL_FEATURE_GROUP has not been prepared,
the result may either be a set of local-pending members, or %NULL.

If @self is not a group, return %NULL.</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_channel_group_dup_local_pending_contacts()
 instead.</doc-deprecated>
        <source-position filename="channel.h" line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="153">the local-pending members, or %NULL</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="143">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_get_local_pending_contact_info"
              c:identifier="tp_channel_group_get_local_pending_contact_info"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="915">If @local_pending is actually a local-pending contact,
write additional information into @actor, @reason and @message and return
%TRUE. The contact and message are not referenced or copied, and can only be
assumed to remain valid until the main loop is re-entered.

If @local_pending is not the handle of a local-pending contact,
write %NULL into @actor, %TP_CHANNEL_GROUP_CHANGE_REASON_NONE into @reason
and "" into @message, and return %FALSE.</doc>
        <source-position filename="channel.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="937">%TRUE if the contact is in fact local-pending</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="917">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="918">the #TpContact of a local-pending contact about whom more
 information is needed</doc>
            <type name="Contact" c:type="TpContact*"/>
          </parameter>
          <parameter name="actor"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="920">either %NULL or a location to
 return the contact who requested the change</doc>
            <type name="Contact" c:type="TpContact**"/>
          </parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="922">either %NULL or a location to return the reason
 for the change</doc>
            <type name="ChannelGroupChangeReason"
                  c:type="TpChannelGroupChangeReason*"/>
          </parameter>
          <parameter name="message"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="924">either %NULL or a location to
 return the
 user-supplied message</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="group_get_local_pending_info"
              c:identifier="tp_channel_group_get_local_pending_info"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="193">If @local_pending is actually the handle of a local-pending contact,
write additional information into @actor, @reason and @message and return
%TRUE. The handle and message are not referenced or copied, and can only be
assumed to remain valid until the main loop is re-entered.

If @local_pending is not the handle of a local-pending contact,
write 0 into @actor, %TP_CHANNEL_GROUP_CHANGE_REASON_NONE into @reason
and "" into @message, and return %FALSE.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_channel_group_get_local_pending_contact_info() instead.</doc-deprecated>
        <source-position filename="channel.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="214">%TRUE if the contact is in fact local-pending</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="195">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="196">the handle of a local-pending contact about whom more
 information is needed</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="actor"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="198">either %NULL or a location to return the contact
who requested the change</doc>
            <type name="Handle" c:type="TpHandle*"/>
          </parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="200">either %NULL or a location to return the reason
for the change</doc>
            <type name="ChannelGroupChangeReason"
                  c:type="TpChannelGroupChangeReason*"/>
          </parameter>
          <parameter name="message"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="202">either %NULL or a location to
return the user-supplied message</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="group_get_members"
              c:identifier="tp_channel_group_get_members"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="115">If @self is a group and the %TP_CHANNEL_FEATURE_GROUP feature has been
prepared, return a #TpIntset containing its members.

If @self is a group but %TP_CHANNEL_FEATURE_GROUP has not been prepared,
the result may either be a set of members, or %NULL.

If @self is not a group, return %NULL.</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_channel_group_dup_members_contacts()
 instead.</doc-deprecated>
        <source-position filename="channel.h" line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="127">the members, or %NULL</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="117">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_get_remote_pending"
              c:identifier="tp_channel_group_get_remote_pending"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="167">If @self is a group and the %TP_CHANNEL_FEATURE_GROUP feature has been
prepared, return a #TpIntset containing its remote-pending members.

If @self is a group but %TP_CHANNEL_FEATURE_GROUP has not been prepared,
the result may either be a set of remote-pending members, or %NULL.

If @self is not a group, return %NULL.</doc>
        <doc-deprecated xml:space="preserve">New code should use
 tp_channel_group_dup_remote_pending_contacts() instead.</doc-deprecated>
        <source-position filename="channel.h" line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="179">the remote-pending members, or %NULL</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="169">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_get_self_contact"
              c:identifier="tp_channel_group_get_self_contact"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="channel-contacts.c"
             line="823">&lt;!-- --&gt;</doc>
        <source-position filename="channel.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-contacts.c"
               line="829">the value of #TpChannel:group-self-contact</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-contacts.c"
                 line="825">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="group_get_self_handle"
              c:identifier="tp_channel_group_get_self_handle"
              version="0.7.12"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-group.c"
             line="76">Return the #TpChannel:group-self-handle property (see the description
of that property for notes on validity).</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_channel_group_get_self_contact() instead.</doc-deprecated>
        <source-position filename="channel.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-group.c"
               line="83">the handle representing the user, or 0</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-group.c"
                 line="78">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_ready"
              c:identifier="tp_channel_is_ready"
              version="0.7.12"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.17.6">
        <doc xml:space="preserve"
             filename="channel.c"
             line="357">Returns the same thing as the #TpChannel:channel-ready property.

New code should use tp_proxy_is_prepared(), which is a more general form of
this method.

For group channels, this method is equivalent to checking for the
combination of %TP_CHANNEL_FEATURE_CORE and %TP_CHANNEL_FEATURE_GROUP; for
non-group channels, it's equivalent to checking for
%TP_CHANNEL_FEATURE_CORE.

One important difference is that after #TpProxy::invalidated is
signalled, #TpChannel:channel-ready keeps its current value - which might
be %TRUE, if the channel was successfully prepared before it became
invalidated - but tp_proxy_is_prepared() returns %FALSE for all features.</doc>
        <doc-deprecated xml:space="preserve">use tp_proxy_is_prepared() with
 %TP_CHANNEL_FEATURE_CORE</doc-deprecated>
        <source-position filename="channel.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="376">%TRUE if introspection has completed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="359">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="join_async"
              c:identifier="tp_channel_join_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2487">Join channel @self with @message as join message.

When we joined the channel, @callback will be called.
You can then call tp_channel_join_finish() to get the result of
the operation.

Note that unlike tp_channel_leave_async(), %TP_CHANNEL_FEATURE_GROUP feature
must be prepared before calling this function.</doc>
        <source-position filename="channel.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2489">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2490">the join message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2491">a callback to call when we joined the channel</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2492">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="join_finish"
              c:identifier="tp_channel_join_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2529">Completes a call to tp_channel_join_async().</doc>
        <source-position filename="channel.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2537">%TRUE if the channel was successfully joined; %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2531">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2532">a #GAsyncResult passed to the callback for tp_channel_join_async().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leave_async"
              c:identifier="tp_channel_leave_async"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2679">Leave channel @self with @reason as reason and @message as leave message.
If @self doesn't implement #TP_IFACE_QUARK_CHANNEL_INTERFACE_GROUP or if
for any reason we can't properly leave the channel, we close it.

When we left the channel, @callback will be called.
You can then call tp_channel_leave_finish() to get the result of
the operation.

Note that unlike tp_channel_join_async(), %TP_CHANNEL_FEATURE_GROUP feature
does not have to be prepared and will be prepared for you. But this is a
deprecated behaviour.</doc>
        <source-position filename="channel.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2681">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2682">the leave reason</doc>
            <type name="ChannelGroupChangeReason"
                  c:type="TpChannelGroupChangeReason"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2683">the leave message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2684">a callback to call when we left the channel</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2685">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="leave_finish"
              c:identifier="tp_channel_leave_finish"
              version="0.13.10"
              throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2735">Completes a call to tp_channel_leave_async().</doc>
        <source-position filename="channel.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2743">%TRUE if the channel has been left; %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2737">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2738">a #GAsyncResult passed to the callback for tp_channel_leave_async().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="password_needed"
              c:identifier="tp_channel_password_needed"
              glib:get-property="password-needed"
              version="0.15.2">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2918">Return the #TpChannel:password-needed property</doc>
        <source-position filename="channel.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2924">the value of #TpChannel:password-needed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2920">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="provide_password_async"
              c:identifier="tp_channel_provide_password_async"
              version="0.15.2">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2958">Provide @password so that @self can be joined.
This function must be called with the correct password in order for
channel joining to proceed if the TpChannel:password-needed property
is set.

Once the password has been provided, @callback will be
called. You can then call tp_channel_provide_password_finish()
to get the result of the operation.</doc>
        <source-position filename="channel.h" line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2960">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2961">the password</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2962">a callback to call when @password has been provided</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2963">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="provide_password_finish"
              c:identifier="tp_channel_provide_password_finish"
              version="0.15.2"
              throws="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2993">Completes a call to tp_channel_provide_password_async().
If the password was rejected, the operation
fails with #TP_ERROR_AUTHENTICATION_FAILED.</doc>
        <source-position filename="channel.h" line="259"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="3004">%TRUE if the password has been provided and accepted,
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2995">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2996">a #GAsyncResult passed to the callback for
 tp_channel_provide_password_async().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_until_ready"
              c:identifier="tp_channel_run_until_ready"
              version="0.7.1"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.11.0">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2188">If @self is ready for use (introspection has finished, etc.), return
immediately. Otherwise, re-enter the main loop until the channel either
becomes invalid or becomes ready for use, or until the main loop stored
via @loop is cancelled.</doc>
        <doc-deprecated xml:space="preserve">Use tp_proxy_prepare_async() and re-enter the main
 loop yourself, or restructure your program in such a way as to avoid
 re-entering the main loop.</doc-deprecated>
        <source-position filename="channel.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2201">%TRUE if the channel has been introspected and is ready for use,
 %FALSE if the channel has become invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2190">a channel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2191">if not %NULL and %FALSE is returned, used to raise an error</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="loop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2192">if not %NULL, a #GMainLoop is placed here while it is being run
 (so calling code can call g_main_loop_quit() to abort), and %NULL is
 placed here after the loop has been run</doc>
            <type name="GLib.MainLoop" c:type="GMainLoop**"/>
          </parameter>
        </parameters>
      </method>
      <property name="channel-properties"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1643">The immutable D-Bus properties of this channel, represented by a
#GHashTable where the keys are D-Bus interface name + "." + property
name, and the values are #GValue instances.

Read-only except during construction. If this is not provided
during construction, a reasonable (but possibly incomplete) version
will be made up from the values of individual properties; reading this
property repeatedly may yield progressively more complete values until
tp_proxy_prepare_async() has finished preparing %TP_CHANNEL_FEATURE_CORE.</doc>
        <type/>
      </property>
      <property name="channel-ready"
                deprecated="1"
                deprecated-version="0.17.6"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1664">Initially %FALSE; changes to %TRUE when tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CORE, and if the channel is a
group, %TP_CHANNEL_FEATURE_GROUP.

This is a less general form of tp_proxy_is_prepared(), which should be
used in new code.

One important difference is that after #TpProxy::invalidated is
signalled, #TpChannel:channel-ready keeps its current value - which might
be %TRUE, if the channel was successfully prepared before it became
invalidated - but tp_proxy_is_prepared() returns %FALSE for all features.

Change notification is via notify::channel-ready.</doc>
        <doc-deprecated xml:space="preserve">use tp_proxy_is_prepared() with
 %TP_CHANNEL_FEATURE_CORE for checks, or tp_proxy_prepare_async() for
 notification</doc-deprecated>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_connection">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1691">The #TpConnection to which this #TpChannel belongs. Used for e.g.
handle manipulation.</doc>
        <type name="Connection"/>
      </property>
      <property name="group-flags"
                version="0.7.12"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1723">If the %TP_CHANNEL_FEATURE_GROUP feature has been prepared successfully,
#TpChannelGroupFlags indicating the capabilities and behaviour of that
group.

Otherwise, this may be 0.

Change notification is via notify::group-flags or
TpChannel::group-flags-changed.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="group-self-contact"
                version="0.15.6"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1992">If this channel is a group and %TP_CHANNEL_FEATURE_CONTACTS has been
prepared, and the user is a member of the group, the #TpContact
representing them in this group.

Otherwise, the result may be either a contact representing the user,
or %NULL.

Change notification is via notify::group-self-contact.</doc>
        <type name="Contact"/>
      </property>
      <property name="group-self-handle"
                version="0.7.12"
                deprecated="1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1703">If this channel is a group and %TP_CHANNEL_FEATURE_GROUP has been
prepared, and the user is a member of the group, the #TpHandle
representing them in this group.

Otherwise, the result may be either a handle representing the user, or 0.

Change notification is via notify::group-self-handle.</doc>
        <doc-deprecated xml:space="preserve">Use #TpChannel:group-self-contact instead.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="identifier"
                transfer-ownership="none"
                getter="get_identifier">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1618">This channel's associated identifier, or the empty string if it has
handle type %TP_HANDLE_TYPE_NONE.

For channels where #TpChannelIface:handle is non-zero, this is the result
of inspecting #TpChannelIface:handle.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CORE; until then, it may be
the empty string.

Changed in 0.11.4: this property is never %NULL. Previously,
it was %NULL before an identifier was known, or when a channel
with no TargetID D-Bus property had TargetHandleType %TP_HANDLE_TYPE_NONE.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="initiator-contact"
                version="0.15.6"
                transfer-ownership="none"
                getter="get_initiator_contact">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1962">The #TpContact of the initiator of this channel, or %NULL if there is no
particular initiator.

If the channel was initiated by a remote contact, this represents
that contact, and #TpChannel:requested will be %FALSE. For instance,
for an incoming call this property indicates the caller, and for a
chatroom invitation this property indicates who sent the invitation.

If the channel was requested by the local user, #TpChannel:requested
will be %TRUE, and this property may be the #TpChannel:group-self-contact
or #TpConnection:self-contact.

If the channel appeared for some other reason (for instance as a
side-effect of connecting to the server), this property may be %NULL.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CONTACTS; until then, it may be
%NULL.</doc>
        <type name="Contact"/>
      </property>
      <property name="initiator-handle"
                version="0.11.15"
                deprecated="1"
                transfer-ownership="none"
                getter="get_initiator_handle"
                default-value="0">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1770">The %TP_HANDLE_TYPE_CONTACT #TpHandle of the initiator of this
channel, or 0 if there is no particular initiator.

If the channel was initiated by a remote contact, this handle represents
that contact, and #TpChannel:requested will be %FALSE. For instance,
for an incoming call this property indicates the caller, and for a
chatroom invitation this property indicates who sent the invitation.

If the channel was requested by the local user, #TpChannel:requested
will be %TRUE, and this property may be the #TpChannel:group-self-handle
or #TpConnection:self-handle.

If the channel appeared for some other reason (for instance as a
side-effect of connecting to the server), this property may be 0.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CORE; until then, it may be 0.</doc>
        <doc-deprecated xml:space="preserve">Use #TpChannel:initiator-contact instead.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="initiator-identifier"
                version="0.11.15"
                deprecated="1"
                transfer-ownership="none"
                getter="get_initiator_identifier">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1801">If #TpChannel:initiator-handle is 0, this will always be "".
Otherwise, this will be the #TpContact:identifier of the contact
with that handle.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CORE; until then, it may be
the empty string.</doc>
        <doc-deprecated xml:space="preserve">Use #TpChannel:initiator-contact instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="password-needed"
                version="0.15.2"
                transfer-ownership="none"
                getter="password_needed"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1823">If %TRUE, tp_channel_provide_password_async() has to be called
to be able to join the channel.

This is not guaranteed to be meaningful until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_PASSWORD; until then, it may return
%FALSE even if the channel is actually protected by a password.
Preparing %TP_CHANNEL_FEATURE_PASSWORD also ensures that the
notify::password-needed signal will be fired when this property changes.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="requested"
                version="0.11.15"
                transfer-ownership="none"
                getter="get_requested"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1743">%TRUE if this channel was created in response to a local request, such
as a call to tp_account_channel_request_create_channel_async(). %FALSE
if this channel was initiated by a remote contact
(the #TpChannel:initiator-handle), or if it appeared as a side-effect
of some other action.

For instance, this is %FALSE on incoming calls and file transfers,
remotely-initiated 1-1 text conversations, and invitations to chatrooms,
and %TRUE on outgoing calls and file transfers, locally-initiated 1-1
text conversations, and chatrooms joined by local user action.

This is not guaranteed to be meaningful until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CORE; until then, it may return
%FALSE even if the channel was actually requested.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="target-contact"
                version="0.15.6"
                transfer-ownership="none"
                getter="get_target_contact">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1942">If this channel is for communication with a single contact (that is,
#TpChannelIface:handle-type is %TP_HANDLE_TYPE_CONTACT), then a #TpContact
representing the remote contact. For chat rooms, contact search channels and
other channels without a single remote contact, %NULL.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CONTACTS; until then, it may be
%NULL.</doc>
        <type name="Contact"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelPrivate" c:type="TpChannelPrivate*"/>
      </field>
      <glib:signal name="chat-state-changed"
                   when="last"
                   detailed="1"
                   version="0.11.3"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1923">Emitted when a contact's chat state changes after tp_proxy_prepare_async()
has finished preparing the feature %TP_CHANNEL_FEATURE_CHAT_STATES.</doc>
        <doc-deprecated xml:space="preserve">Use #TpTextChannel::contact-chat-state-changed instead</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1926">a contact handle for the local user or another contact</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1927">the new #TpChannelChatState for the contact</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="group-contacts-changed"
                   when="last"
                   detailed="1"
                   version="0.15.6">
        <doc xml:space="preserve"
             filename="channel.c"
             line="2012">Emitted when the group members change in a Group channel.

This is not guaranteed to be emitted until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_FEATURE_CONTACTS; until then, it may be
omitted.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2015">
 a #GPtrArray of #TpContact containing the full members added</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2017">
 a #GPtrArray of #TpContact containing the members (full, local-pending or
 remote-pending) removed</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2020">
 a #GPtrArray of #TpContact containing the local-pending members added</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="remote_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2022">
 a #GPtrArray of #TpContact containing the remote-pending members added</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2024">a #TpContact for the "actor" handle in @details</doc>
            <type name="Contact"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="2025">
 a #GHashTable mapping (gchar *) to #GValue containing details
 about the change, as described in the specification of the
 MembersChangedDetailed signal.</doc>
            <type name="GLib.HashTable">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="group-flags-changed"
                   when="last"
                   detailed="1"
                   version="0.7.12">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1845">Emitted when the #TpChannel:group-flags property changes while the
channel is ready.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1848">#TpChannelGroupFlags which are newly set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1849">#TpChannelGroupFlags which are no longer set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="group-members-changed"
                   when="last"
                   detailed="1"
                   version="0.7.12"
                   introspectable="0"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1863">Emitted when the group members change in a Group channel that is ready.</doc>
        <doc-deprecated xml:space="preserve">Use #TpChannel::group-contacts-changed instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1866">an optional textual message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1867">a #GArray of #guint containing the full members added</doc>
            <type/>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1868">a #GArray of #guint containing the members (full,
 local-pending or remote-pending) removed</doc>
            <type/>
          </parameter>
          <parameter name="local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1870">a #GArray of #guint containing the local-pending
 members added</doc>
            <type/>
          </parameter>
          <parameter name="remote_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1872">a #GArray of #guint containing the remote-pending
 members added</doc>
            <type/>
          </parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1874">the #TpHandle of the contact causing the change, or 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1875">the reason for the change as a #TpChannelGroupChangeReason</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="group-members-changed-detailed"
                   when="last"
                   detailed="1"
                   version="0.7.21"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="channel.c"
             line="1891">Emitted when the group members change in a Group channel that is ready.
Contains a superset of the information in the
TpChannel::group-members-changed signal, and is emitted at the same time;
applications can connect to this signal and ignore the other.</doc>
        <doc-deprecated xml:space="preserve">Use #TpChannel::group-contacts-changed instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1894">a #GArray of #guint
 containing the full members added</doc>
            <array name="GLib.Array">
              <type name="guint"/>
            </array>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1896">a #GArray of #guint
 containing the members (full, local-pending or remote-pending) removed</doc>
            <array name="GLib.Array">
              <type name="guint"/>
            </array>
          </parameter>
          <parameter name="local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1898">a #GArray of
 #guint containing the local-pending members added</doc>
            <array name="GLib.Array">
              <type name="guint"/>
            </array>
          </parameter>
          <parameter name="remote_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1900">a #GArray of
 #guint containing the remote-pending members added</doc>
            <array name="GLib.Array">
              <type name="guint"/>
            </array>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel.c"
                 line="1902">
 a #GHashTable mapping (gchar *) to #GValue containing details
 about the change, as described in the specification of the
 MembersChangedDetailed signal.</doc>
            <type name="GLib.HashTable">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="ChannelCallStateFlags" c:type="TpChannelCallStateFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="690">&lt;![CDATA[         A set of flags representing call states.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="353"/>
      <member name="ringing"
              value="1"
              c:identifier="TP_CHANNEL_CALL_STATE_RINGING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="692">&lt;![CDATA[           The contact has been alerted about the call but has not responded           (e.g. 180 Ringing in SIP).         ]]&gt;</doc>
      </member>
      <member name="queued"
              value="2"
              c:identifier="TP_CHANNEL_CALL_STATE_QUEUED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="693">&lt;![CDATA[           The contact is temporarily unavailable, and the call has been placed           in a queue (e.g. 182 Queued in SIP, or call-waiting in telephony).         ]]&gt;</doc>
      </member>
      <member name="held" value="4" c:identifier="TP_CHANNEL_CALL_STATE_HELD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="694">&lt;![CDATA[           The contact has placed the call on hold, and will not receive           media from the local user or any other participants until they           unhold the call again.         ]]&gt;</doc>
      </member>
      <member name="forwarded"
              value="8"
              c:identifier="TP_CHANNEL_CALL_STATE_FORWARDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="695">&lt;![CDATA[           The initiator of the call originally called a contact other than the           current recipient of the call, but the call was then forwarded or           diverted.         ]]&gt;</doc>
      </member>
      <member name="in_progress"
              value="16"
              c:identifier="TP_CHANNEL_CALL_STATE_IN_PROGRESS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="696">&lt;![CDATA[           Progress has been made in placing the outgoing call, but the           destination contact may not have been made aware of the call yet           (so the Ringing state is not appropriate). This corresponds to SIP's           status code 183 Session Progress, and could be used when the           outgoing call has reached a gateway, for instance.         ]]&gt;</doc>
      </member>
      <member name="conference_host"
              value="32"
              c:identifier="TP_CHANNEL_CALL_STATE_CONFERENCE_HOST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="697">&lt;![CDATA[           This contact has merged this call into a conference. Note that GSM           provides a notification when the remote party merges a call into a           conference, but not when it is split out again; thus, this flag can           only indicate that the call has been part of a conference at some           point. If a GSM connection manager receives a notification that a           call has been merged into a conference a second time, it SHOULD           represent this by clearing and immediately re-setting this flag on           the remote contact.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="ChannelChatState" c:type="TpChannelChatState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="755">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="383"/>
      <member name="gone" value="0" c:identifier="TP_CHANNEL_CHAT_STATE_GONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="757">&lt;![CDATA[         The contact has effectively ceased participating in the chat.         ]]&gt;</doc>
      </member>
      <member name="inactive"
              value="1"
              c:identifier="TP_CHANNEL_CHAT_STATE_INACTIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="758">&lt;![CDATA[         The contact has not been active for some time.         ]]&gt;</doc>
      </member>
      <member name="active"
              value="2"
              c:identifier="TP_CHANNEL_CHAT_STATE_ACTIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="759">&lt;![CDATA[         The contact is actively participating in the chat.         ]]&gt;</doc>
      </member>
      <member name="paused"
              value="3"
              c:identifier="TP_CHANNEL_CHAT_STATE_PAUSED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="760">&lt;![CDATA[         The contact has paused composing a message.         ]]&gt;</doc>
      </member>
      <member name="composing"
              value="4"
              c:identifier="TP_CHANNEL_CHAT_STATE_COMPOSING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="761">&lt;![CDATA[         The contact is composing a message to be sent to the chat.         ]]&gt;</doc>
      </member>
    </enumeration>
    <record name="ChannelClass"
            c:type="TpChannelClass"
            glib:is-gtype-struct-for="Channel"
            version="0.7.1">
      <doc xml:space="preserve"
           filename="channel.c"
           line="65">The class of a #TpChannel. In addition to @parent_class there are four
pointers reserved for possible future use.

(Changed in 0.7.12: the layout of the structure is visible, allowing
subclassing.)</doc>
      <source-position filename="channel.h" line="49"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="channel.c"
             line="67">parent class</doc>
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_3" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_4" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
    </record>
    <enumeration name="ChannelContactSearchState"
                 c:type="TpChannelContactSearchState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="426">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="230"/>
      <member name="not_started"
              value="0"
              c:identifier="TP_CHANNEL_CONTACT_SEARCH_STATE_NOT_STARTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="428">&lt;![CDATA[The search has not started]]&gt;</doc>
      </member>
      <member name="in_progress"
              value="1"
              c:identifier="TP_CHANNEL_CONTACT_SEARCH_STATE_IN_PROGRESS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="429">&lt;![CDATA[The search is in progress]]&gt;</doc>
      </member>
      <member name="more_available"
              value="2"
              c:identifier="TP_CHANNEL_CONTACT_SEARCH_STATE_MORE_AVAILABLE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="430">&lt;![CDATA[The search has paused, but more results can be retrieved           by calling More.]]&gt;</doc>
      </member>
      <member name="completed"
              value="3"
              c:identifier="TP_CHANNEL_CONTACT_SEARCH_STATE_COMPLETED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="431">&lt;![CDATA[The search has been completed]]&gt;</doc>
      </member>
      <member name="failed"
              value="4"
              c:identifier="TP_CHANNEL_CONTACT_SEARCH_STATE_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="432">&lt;![CDATA[The search has failed]]&gt;</doc>
      </member>
    </enumeration>
    <class name="ChannelDispatchOperation"
           c:symbol-prefix="channel_dispatch_operation"
           c:type="TpChannelDispatchOperation"
           version="0.7.32"
           parent="Proxy"
           glib:type-name="TpChannelDispatchOperation"
           glib:get-type="tp_channel_dispatch_operation_get_type"
           glib:type-struct="ChannelDispatchOperationClass">
      <doc xml:space="preserve"
           filename="channel-dispatch-operation.c"
           line="57">One of the channel dispatcher's functions is to offer incoming channels to
Approver clients for approval. An approver should generally ask the user
whether they want to participate in the requested communication channels
(join the chat or chatroom, answer the call, accept the file transfer, or
whatever is appropriate). A collection of channels offered in this way
is represented by a ChannelDispatchOperation object.

If the user wishes to accept the communication channels, the approver
should call tp_cli_channel_dispatch_operation_call_handle_with() to
indicate the user's or approver's preferred handler for the channels (the
empty string indicates no particular preference, and will cause any
suitable handler to be used).

If the user wishes to reject the communication channels, or if the user
accepts the channels and the approver will handle them itself, the approver
should call tp_cli_channel_dispatch_operation_call_claim(). If this method
succeeds, the approver immediately has control over the channels as their
primary handler, and may do anything with them (in particular, it may close
them in whatever way seems most appropriate).

There are various situations in which the channel dispatch operation will
be closed, causing the #TpProxy::invalidated signal to be emitted. If this
happens, the approver should stop prompting the user.

Because all approvers are launched simultaneously, the user might respond
to another approver; if this happens, the #TpProxy::invalidated signal
will be emitted with the domain %TP_DBUS_ERRORS and the error code
%TP_DBUS_ERROR_OBJECT_REMOVED.

If a channel closes, the #TpChannelDispatchOperation::channel-lost signal
is emitted. If all channels
close, there is nothing more to dispatch, so the #TpProxy::invalidated
signal will be emitted with the domain %TP_DBUS_ERRORS and the error code
%TP_DBUS_ERROR_OBJECT_REMOVED.

If the channel dispatcher crashes or exits, the #TpProxy::invalidated
signal will be emitted with the domain %TP_DBUS_ERRORS and the error code
%TP_DBUS_ERROR_NAME_OWNER_LOST. In a high-quality implementation, the
dispatcher should be restarted, at which point it will create new
channel dispatch operations for any undispatched channels, and the approver
will be notified again.

Creating a #TpChannelDispatchOperation directly is deprecated: it
should only be created via a #TpBaseClient.

Since 0.16, #TpChannelDispatchOperation always has a non-%NULL
#TpProxy:factory, which will be propagated to the #TpAccount,
#TpConnection and #TpChannel.</doc>
      <source-position filename="channel-dispatch-operation.h" line="58"/>
      <constructor name="new"
                   c:identifier="tp_channel_dispatch_operation_new"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="877">Convenience function to create a new channel dispatch operation proxy.

The @immutable_properties argument is not yet used.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should get
 #TpChannelDispatchOperation objects from a #TpBaseClient</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="889">a new reference to an channel dispatch operation proxy, or %NULL if
   @object_path is not syntactically valid or the channel dispatcher is not
   running</doc>
          <type name="ChannelDispatchOperation"
                c:type="TpChannelDispatchOperation*"/>
        </return-value>
        <parameters>
          <parameter name="bus_daemon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="879">Proxy for the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="880">The non-NULL object path of this channel dispatch operation</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="881">As many as are known of the immutable D-Bus
 properties of this channel dispatch operation, or %NULL if none are known</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_core"
                c:identifier="tp_channel_dispatch_operation_get_feature_quark_core">
        <source-position filename="channel-dispatch-operation.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_channel_dispatch_operation_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="846">Ensure that the known interfaces for TpChannelDispatchOperation have been
set up. This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CHANNEL_DISPATCH_OPERATION.</doc>
        <source-position filename="channel-dispatch-operation.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="borrow_account"
              c:identifier="tp_channel_dispatch_operation_borrow_account"
              version="0.11.5"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="995">Returns the #TpAccount of this ChannelDispatchOperation.
The returned pointer is only valid while @self is valid - reference
it with g_object_ref() if needed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_channel_dispatch_operation_get_account() instead.</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1003">the value of #TpChannelDispatchOperation:account</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="997">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="borrow_channels"
              c:identifier="tp_channel_dispatch_operation_borrow_channels"
              version="0.11.5"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1016">Returns a #GPtrArray containing the #TpChannel of this
ChannelDispatchOperation.
The returned array and its #TpChannel are only valid while @self is
valid - copy array and reference channels with g_object_ref() if needed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_channel_dispatch_operation_get_channels() instead.</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1025">the value of #TpChannelDispatchOperation:channels</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1018">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="borrow_connection"
              c:identifier="tp_channel_dispatch_operation_borrow_connection"
              version="0.11.5"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="974">Returns the #TpConnection of this ChannelDispatchOperation.
The returned pointer is only valid while @self is valid - reference
it with g_object_ref() if needed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_channel_dispatch_operation_get_connection() instead.</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="982">the value of #TpChannelDispatchOperation:connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="976">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="borrow_immutable_properties"
              c:identifier="tp_channel_dispatch_operation_borrow_immutable_properties"
              version="0.11.5"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1061">Returns the immutable D-Bus properties of this channel.
The returned hash table is only valid while @self is valid - reference
it with g_hash_table_ref() if needed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use individual property
 getters like tp_channel_dispatch_operation_get_connection(),
 tp_channel_dispatch_operation_get_account(),
 tp_channel_dispatch_operation_get_channels(), or
 tp_channel_dispatch_operation_get_possible_handlers() instead.</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1069">the value of
#TpChannelDispatchOperation:cdo-properties</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1063">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="borrow_possible_handlers"
              c:identifier="tp_channel_dispatch_operation_borrow_possible_handlers"
              version="0.11.5"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1038">Returns a #GStrv containing the possible handlers of this
ChannelDispatchOperation.
The returned array and its strings are only valid while @self is
valid - copy it with g_strdupv if needed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_channel_dispatch_operation_get_possible_handlers() instead.</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1047">the value of
#TpChannelDispatchOperation:possible-handlers</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1040">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="claim_async"
              c:identifier="tp_channel_dispatch_operation_claim_async"
              version="0.11.5"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1272">Called by an approver to claim channels for handling internally.
If this method is called successfully, the process calling this
method becomes the handler for the channel.

If successful, this method will cause the #TpProxy::invalidated signal
to be emitted, in the same way as for
tp_channel_dispatch_operation_handle_with_async().

This method may fail because the dispatch operation has already
been completed. Again, see tp_channel_dispatch_operation_handle_with_async()
for more details. The approver MUST NOT attempt to interact with
the channels further in this case.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.0. Use
tp_channel_dispatch_operation_claim_with_async()</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1274">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1275">a callback to call when the call returns</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1276">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="claim_finish"
              c:identifier="tp_channel_dispatch_operation_claim_finish"
              version="0.11.5"
              deprecated="1"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1312">Finishes an async call to Claim().</doc>
        <doc-deprecated xml:space="preserve">since 0.15.0. Use
tp_channel_dispatch_operation_claim_with_finish()</doc-deprecated>
        <source-position filename="channel-dispatch-operation.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1320">%TRUE if the Claim() call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1314">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1315">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="claim_with_async"
              c:identifier="tp_channel_dispatch_operation_claim_with_async"
              version="0.15.0">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1444">Called by an approver to claim channels for handling internally.
If this method is called successfully, the process calling this
method becomes the handler for the channel.

If successful, this method will cause the #TpProxy::invalidated signal
to be emitted, in the same way as for
tp_channel_dispatch_operation_handle_with_async().

This method may fail because the dispatch operation has already
been completed. Again, see tp_channel_dispatch_operation_handle_with_async()
for more details. The approver MUST NOT attempt to interact with
the channels further in this case.

This is an improved version of tp_channel_dispatch_operation_claim_async()
as it tells @client about the new channels being handled.

%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE feature must be prepared before
calling this function.</doc>
        <source-position filename="channel-dispatch-operation.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1446">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1447">the #TpBaseClient claiming @self</doc>
            <type name="BaseClient" c:type="TpBaseClient*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1448">a callback to call when the call returns</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1449">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="claim_with_finish"
              c:identifier="tp_channel_dispatch_operation_claim_with_finish"
              version="0.15.0"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1496">Finishes an async call to Claim() initiated using
tp_channel_dispatch_operation_claim_with_async().</doc>
        <source-position filename="channel-dispatch-operation.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1505">%TRUE if the Claim() call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1498">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1499">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_channels_async"
              c:identifier="tp_channel_dispatch_operation_close_channels_async"
              version="0.15.1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1555">Called by an approver to claim channels and close them all right away.
If this method is called successfully, @self has been claimed and
tp_channel_close_async() has been called on all of its channels.

If successful, this method will cause the #TpProxy::invalidated signal
to be emitted, in the same way as for
tp_channel_dispatch_operation_handle_with_async().

This method may fail because the dispatch operation has already
been completed. Again, see tp_channel_dispatch_operation_handle_with_async()
for more details.

%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE feature must be prepared before
calling this function.</doc>
        <source-position filename="channel-dispatch-operation.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1557">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1558">a callback to call when the request has been satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1559">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="close_channels_finish"
              c:identifier="tp_channel_dispatch_operation_close_channels_finish"
              version="0.15.1"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1597">Finishes an async operation initiated using
tp_channel_dispatch_operation_close_channels_async().</doc>
        <source-position filename="channel-dispatch-operation.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1606">%TRUE if the Claim() call was successful and
Close() has at least been attempted on all the channels, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1599">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1600">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_channels_async"
              c:identifier="tp_channel_dispatch_operation_destroy_channels_async"
              version="0.15.2">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1796">Called by an approver to claim channels and destroy them all right away.
If this method is called successfully, @self has been claimed and
tp_channel_destroy_async() has been called on all of its channels.

If successful, this method will cause the #TpProxy::invalidated signal
to be emitted, in the same way as for
tp_channel_dispatch_operation_handle_with_async().

This method may fail because the dispatch operation has already
been completed. Again, see tp_channel_dispatch_operation_handle_with_async()
for more details.

%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE feature must be prepared before
calling this function.</doc>
        <source-position filename="channel-dispatch-operation.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1798">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1799">a callback to call when the request has been satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1800">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy_channels_finish"
              c:identifier="tp_channel_dispatch_operation_destroy_channels_finish"
              version="0.15.2"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1838">Finishes an async operation initiated using
tp_channel_dispatch_operation_destroy_channels_async().</doc>
        <source-position filename="channel-dispatch-operation.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1847">%TRUE if the Claim() call was successful and
tp_channel_destroy_async() has at least been attempted on all the
channels, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1840">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1841">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="tp_channel_dispatch_operation_get_account"
              glib:get-property="account"
              version="0.19.9"
              introspectable="0">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1105">Returns the #TpAccount of this ChannelDispatchOperation.
The returned pointer is only valid while @self is valid - reference
it with g_object_ref() if needed.</doc>
        <source-position filename="channel-dispatch-operation.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1113">the value of #TpChannelDispatchOperation:account</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1107">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channels"
              c:identifier="tp_channel_dispatch_operation_get_channels"
              glib:get-property="channels"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1124">Returns a #GPtrArray containing the #TpChannel of this
ChannelDispatchOperation.
The returned array and its #TpChannel are only valid while @self is
valid - copy array and reference channels with g_object_ref() if needed.</doc>
        <source-position filename="channel-dispatch-operation.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1133">the value
 of #TpChannelDispatchOperation:channels</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Channel"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1126">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="tp_channel_dispatch_operation_get_connection"
              glib:get-property="connection"
              version="0.19.9"
              introspectable="0">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1086">Returns the #TpConnection of this ChannelDispatchOperation.
The returned pointer is only valid while @self is valid - reference
it with g_object_ref() if needed.</doc>
        <source-position filename="channel-dispatch-operation.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1094">the value of #TpChannelDispatchOperation:connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1088">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_possible_handlers"
              c:identifier="tp_channel_dispatch_operation_get_possible_handlers"
              glib:get-property="possible-handlers"
              version="0.19.9"
              introspectable="0">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1145">Returns a #GStrv containing the possible handlers of this
ChannelDispatchOperation.
The returned array and its strings are only valid while @self is
valid - copy it with g_strdupv if needed.</doc>
        <source-position filename="channel-dispatch-operation.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1154">the value of
#TpChannelDispatchOperation:possible-handlers</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1147">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_with_async"
              c:identifier="tp_channel_dispatch_operation_handle_with_async"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1184">Called by an approver to accept a channel bundle and request that the
given handler be used to handle it.

If successful, this method will cause the #TpProxy::invalidated signal
to be emitted with the TP_DBUS_ERROR_OBJECT_REMOVED error code.

However, this method may fail because the dispatch has already been
completed and the object has already gone. If this occurs, it indicates
that another approver has asked for the bundle to be handled by a
particular handler. The approver MUST NOT attempt to interact with
the channels further in this case, unless it is separately
invoked as the handler.

Approvers which are also channel handlers SHOULD use
tp_channel_dispatch_operation_claim_async() instead
of tp_channel_dispatch_operation_handle_with_async() to request
that they can handle a channel bundle themselves.</doc>
        <source-position filename="channel-dispatch-operation.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1186">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1187">The well-known bus name (starting with
#TP_CLIENT_BUS_NAME_BASE) of the channel handler that should handle the
channel, or %NULL if the client has no preferred channel handler</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1190">a callback to call when the call returns</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1191">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="handle_with_finish"
              c:identifier="tp_channel_dispatch_operation_handle_with_finish"
              version="0.11.5"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1232">Finishes an async call to HandleWith().</doc>
        <source-position filename="channel-dispatch-operation.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1240">%TRUE if the HandleWith() call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1234">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1235">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="handle_with_time_async"
              c:identifier="tp_channel_dispatch_operation_handle_with_time_async"
              version="0.11.7">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1355">A variant of tp_channel_dispatch_operation_handle_with_async()
allowing the approver to pass an user action time.
This timestamp will be passed to the Handler when HandleChannels is called.

If an X server timestamp for the user action causing this method call is
available, @user_action_time should be this timestamp (for instance, the
result of gdk_event_get_time() if it is not %GDK_CURRENT_TIME). Otherwise, it
may be %TP_USER_ACTION_TIME_NOT_USER_ACTION to behave as if there was no
user action or it happened a long time ago, or
%TP_USER_ACTION_TIME_CURRENT_TIME to have the Handler behave as though the
user action had just happened (resembling, but not numerically equal to,
%GDK_CURRENT_TIME).

This method has been introduced in telepathy-mission-control 5.5.0.</doc>
        <source-position filename="channel-dispatch-operation.h" line="152"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1357">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="handler"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1358">The well-known bus name (starting with
#TP_CLIENT_BUS_NAME_BASE) of the channel handler that should handle the
channel, or %NULL if the client has no preferred channel handler</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1361">the time at which user action occurred, or one of the
 special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1364">a callback to call when the call returns</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1365">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="handle_with_time_finish"
              c:identifier="tp_channel_dispatch_operation_handle_with_time_finish"
              version="0.11.7"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1405">Finishes an async call to HandleWithTime().</doc>
        <source-position filename="channel-dispatch-operation.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1413">%TRUE if the HandleWithTime() call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1407">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1408">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="leave_channels_async"
              c:identifier="tp_channel_dispatch_operation_leave_channels_async"
              version="0.15.2">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1685">Called by an approver to claim channels and leave them all right away.
If this method is called successfully, @self has been claimed and
tp_channel_leave_async() has been called on all of its channels.

If successful, this method will cause the #TpProxy::invalidated signal
to be emitted, in the same way as for
tp_channel_dispatch_operation_handle_with_async().

This method may fail because the dispatch operation has already
been completed. Again, see tp_channel_dispatch_operation_handle_with_async()
for more details.

%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE feature must be prepared before
calling this function.</doc>
        <source-position filename="channel-dispatch-operation.h" line="192"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1687">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1688">the leave reason</doc>
            <type name="ChannelGroupChangeReason"
                  c:type="TpChannelGroupChangeReason"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1689">the leave message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1690">a callback to call when the request has been satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1691">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="leave_channels_finish"
              c:identifier="tp_channel_dispatch_operation_leave_channels_finish"
              version="0.15.2"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="1735">Finishes an async operation initiated using
tp_channel_dispatch_operation_leave_channels_async().</doc>
        <source-position filename="channel-dispatch-operation.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatch-operation.c"
               line="1744">%TRUE if the Claim() call was successful and
tp_channel_leave_async() has at least been attempted on all the
channels, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1737">a #TpChannelDispatchOperation</doc>
            <type name="ChannelDispatchOperation"
                  c:type="TpChannelDispatchOperation*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="1738">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_account">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="738">The #TpAccount with which the connection and channels are associated.

Read-only except during construction.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE.</doc>
        <type name="Account"/>
      </property>
      <property name="cdo-properties"
                version="0.11.5"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="797">The immutable D-Bus properties of this ChannelDispatchOperation,
represented by a #GHashTable where the keys are D-Bus
interface name + "." + property name, and the values are #GValue instances.

Read-only except during construction. If this is not provided
during construction, it is not guaranteed to be set until
tp_proxy_prepare_async() has finished preparing
%TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE.</doc>
        <type/>
      </property>
      <property name="channels"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_channels">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="757">A #GPtrArray containing the #TpChannel to be dispatched.

Read-only.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="connection"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_connection">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="719">The #TpConnection with which the channels are associated.

Read-only except during construction.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE.</doc>
        <type name="Connection"/>
      </property>
      <property name="possible-handlers"
                version="0.11.5"
                transfer-ownership="none"
                getter="get_possible_handlers">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="776">A #GStrv containing the well known bus names (starting
with TP_CLIENT_BUS_NAME_BASE) of the possible Handlers for
the channels

Read-only except during construction.

This is not guaranteed to be set until tp_proxy_prepare_async() has
finished preparing %TP_CHANNEL_DISPATCH_OPERATION_FEATURE_CORE.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelDispatchOperationPrivate"
              c:type="TpChannelDispatchOperationPrivate*"/>
      </field>
      <glib:signal name="channel-lost"
                   when="last"
                   detailed="1"
                   version="0.11.5">
        <doc xml:space="preserve"
             filename="channel-dispatch-operation.c"
             line="819">Emitted when a channel has closed before it could be claimed or handled.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="822">the #TpChannel that closed</doc>
            <type name="Channel"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="823">domain of a #GError indicating why the channel has been closed</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="824">error code of a #GError indicating why the channel has been closed</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatch-operation.c"
                 line="825">a message associated with the error</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ChannelDispatchOperationClass"
            c:type="TpChannelDispatchOperationClass"
            glib:is-gtype-struct-for="ChannelDispatchOperation">
      <doc xml:space="preserve"
           filename="channel-dispatch-operation.c"
           line="112">The class of a #TpChannelDispatchOperation.</doc>
      <source-position filename="channel-dispatch-operation.h" line="58"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelDispatchOperationClassPrivate"
              c:type="TpChannelDispatchOperationClassPrivate*"/>
      </field>
    </record>
    <record name="ChannelDispatchOperationClassPrivate"
            c:type="TpChannelDispatchOperationClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel-dispatch-operation.h" line="45"/>
    </record>
    <record name="ChannelDispatchOperationPrivate"
            c:type="TpChannelDispatchOperationPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel-dispatch-operation.h" line="43"/>
    </record>
    <class name="ChannelDispatcher"
           c:symbol-prefix="channel_dispatcher"
           c:type="TpChannelDispatcher"
           version="0.7.32"
           parent="Proxy"
           glib:type-name="TpChannelDispatcher"
           glib:get-type="tp_channel_dispatcher_get_type"
           glib:type-struct="ChannelDispatcherClass">
      <doc xml:space="preserve"
           filename="channel-dispatcher.c"
           line="49">The Channel Dispatcher's main D-Bus API is used to request channels,
which is done by calling tp_cli_channel_dispatcher_call_create_channel() or
tp_cli_channel_dispatcher_call_ensure_channel() as appropriate.

The Telepathy Channel Dispatcher is also responsible for responding to new
channels and launching client processes to handle them. However, clients
that can work with incoming channels do not have to call methods
on the channel dispatcher: instead, they must register with the channel
dispatcher passively, by taking a bus name starting with
%TP_CLIENT_BUS_NAME_BASE and implementing the #TpSvcClient interface.
See the Telepathy D-Bus Interface Specification for details.

This proxy is usable but incomplete: convenience methods will be added in
a later version of telepathy-glib, along with a mechanism similar to
tp_connection_call_when_ready().</doc>
      <source-position filename="channel-dispatcher.h" line="53"/>
      <constructor name="new" c:identifier="tp_channel_dispatcher_new">
        <doc xml:space="preserve"
             filename="channel-dispatcher.c"
             line="148">Convenience function to create a new channel dispatcher proxy.</doc>
        <source-position filename="channel-dispatcher.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel-dispatcher.c"
               line="154">a new reference to a channel dispatcher proxy</doc>
          <type name="ChannelDispatcher" c:type="TpChannelDispatcher*"/>
        </return-value>
        <parameters>
          <parameter name="bus_daemon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="150">Proxy for the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="init_known_interfaces"
                c:identifier="tp_channel_dispatcher_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="channel-dispatcher.c"
             line="117">Ensure that the known interfaces for TpChannelDispatcher have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CHANNEL_DISPATCHER.</doc>
        <source-position filename="channel-dispatcher.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="present_channel_async"
              c:identifier="tp_channel_dispatcher_present_channel_async"
              version="0.15.0">
        <doc xml:space="preserve"
             filename="channel-dispatcher.c"
             line="189">Asynchronously calls PresentChannel on the ChannelDispatcher to ask
to the handler of @channel to re-present it to the user.
You can then call tp_channel_dispatcher_present_channel_finish() to
get the result of the operation.</doc>
        <source-position filename="channel-dispatcher.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="191">a #TpChannelDispatcher</doc>
            <type name="ChannelDispatcher" c:type="TpChannelDispatcher*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="192">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </parameter>
          <parameter name="user_action_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="193">the time at which user action occurred,
or #TP_USER_ACTION_TIME_NOT_USER_ACTION if this presentation request is
for some reason not involving user action.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="196">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="197">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="present_channel_finish"
              c:identifier="tp_channel_dispatcher_present_channel_finish"
              version="0.15.0"
              throws="1">
        <doc xml:space="preserve"
             filename="channel-dispatcher.c"
             line="226">Finishes an async channel presentation request started using
tp_channel_dispatcher_present_channel_async().</doc>
        <source-position filename="channel-dispatcher.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-dispatcher.c"
               line="235">%TRUE if the call succeeded, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="228">a #TpBaseClient</doc>
            <type name="ChannelDispatcher" c:type="TpChannelDispatcher*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-dispatcher.c"
                 line="229">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelDispatcherPrivate"
              c:type="TpChannelDispatcherPrivate*"/>
      </field>
    </class>
    <record name="ChannelDispatcherClass"
            c:type="TpChannelDispatcherClass"
            glib:is-gtype-struct-for="ChannelDispatcher">
      <doc xml:space="preserve"
           filename="channel-dispatcher.c"
           line="71">The class of a #TpChannelDispatcher.</doc>
      <source-position filename="channel-dispatcher.h" line="53"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelDispatcherClassPrivate"
              c:type="TpChannelDispatcherClassPrivate*"/>
      </field>
    </record>
    <record name="ChannelDispatcherClassPrivate"
            c:type="TpChannelDispatcherClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel-dispatcher.h" line="40"/>
    </record>
    <record name="ChannelDispatcherPrivate"
            c:type="TpChannelDispatcherPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel-dispatcher.h" line="39"/>
    </record>
    <enumeration name="ChannelGroupChangeReason"
                 c:type="TpChannelGroupChangeReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="829">&lt;![CDATA[         The reason for a set of handles to move to one of           Members,           LocalPendingMembers or           RemotePendingMembers, or to be removed           from the group. A client may supply a reason when attempting to           remove members from a group with           RemoveMembersWithReason, and reasons           are supplied by the CM when emitting           MembersChanged and           MembersChangedDetailed. Some reason           codes have different meanings depending on the Actor in a           MembersChanged signal.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="438"/>
      <member name="none"
              value="0"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="831">&lt;![CDATA[           No reason was provided for this change.            In particular, this reason SHOULD be used when representing             users joining a named chatroom in the usual way, users leaving             a chatroom by their own request, and normal termination of a             StreamedMedia call by the remote user.            If the SelfHandle is removed from             a group for this reason and the actor is not the SelfHandle, the             equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Terminated.            If the SelfHandle is removed from a group for this reason and             the actor is also the SelfHandle, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cancelled.         ]]&gt;</doc>
      </member>
      <member name="offline"
              value="1"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_OFFLINE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="832">&lt;![CDATA[           The change is due to a user going offline. Also used when             user is already offline, but this wasn't known previously.            If a one-to-one StreamedMedia             call fails because the contact being called is offline, the             connection manager SHOULD indicate this by removing both the             SelfHandle and the other contact's             handle from the Group interface with reason Offline.                         For 1-1 calls, the call terminates as a result of removing the             remote contact, so the SelfHandle should be removed at the same             time as the remote contact and for the same reason.                       If a handle is removed from a group for this reason, the             equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Offline.         ]]&gt;</doc>
      </member>
      <member name="kicked"
              value="2"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_KICKED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="833">&lt;![CDATA[           The change is due to a kick operation.            If the SelfHandle is removed             from a group for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Channel.Kicked.                    ]]&gt;</doc>
      </member>
      <member name="busy"
              value="3"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_BUSY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="834">&lt;![CDATA[           The change is due to a busy indication.            If a one-to-one StreamedMedia             call fails because the contact being called is busy, the             connection manager SHOULD indicate this by removing both the             SelfHandle and the other contact's             handle from the Group interface with reason Busy.                         For 1-1 calls, the call terminates as a result of removing the             remote contact, so the SelfHandle should be removed at the same             time as the remote contact and for the same reason.                       If the SelfHandle is removed             from a group for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Busy.                    ]]&gt;</doc>
      </member>
      <member name="invited"
              value="4"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_INVITED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="835">&lt;![CDATA[           The change is due to an invitation. This reason SHOULD only be used           when contacts are added to the remote-pending set (to indicate that           the contact has been invited) or to the members (to indicate that           the contact has accepted the invitation).                         Otherwise, what would it mean?                    ]]&gt;</doc>
      </member>
      <member name="banned"
              value="5"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_BANNED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="836">&lt;![CDATA[           The change is due to a kick+ban operation.            If the SelfHandle is removed             from a group for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Channel.Banned.                    ]]&gt;</doc>
      </member>
      <member name="error"
              value="6"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="837">&lt;![CDATA[             The change is due to an error occurring.         ]]&gt;</doc>
      </member>
      <member name="invalid_contact"
              value="7"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_INVALID_CONTACT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="838">&lt;![CDATA[           The change is because the requested contact does not exist.            For instance, if the user invites a nonexistent contact to a             chatroom or attempts to call a nonexistent contact, this could             be indicated by the CM adding that contact's handle to             remote-pending for reason None or Invited, then removing it for             reason Invalid_Contact. In the case of a 1-1 StreamedMedia             call, the CM SHOULD remove the self handle from the Group             in the same signal.                         For 1-1 calls, the call terminates as a result of removing the             remote contact, so the SelfHandle should be removed at the same             time as the remote contact and for the same reason.                       If a contact is removed from a group for this reason, the             equivalent D-Bus error is             org.freedesktop.Telepathy.Error.DoesNotExist.                    ]]&gt;</doc>
      </member>
      <member name="no_answer"
              value="8"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_NO_ANSWER">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="839">&lt;![CDATA[           The change is because the requested contact did not respond.            If a one-to-one StreamedMedia             call fails because the contact being called did not respond, or the             local user did not respond to an incoming call, the             connection manager SHOULD indicate this by removing both the             SelfHandle and the other contact's             handle from the Group interface with reason No_Answer.                         Documenting existing practice.                       If a contact is removed from a group for this reason, the             equivalent D-Bus error is             org.freedesktop.Telepathy.Error.NoAnswer.                    ]]&gt;</doc>
      </member>
      <member name="renamed"
              value="9"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_RENAMED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="840">&lt;![CDATA[           The change is because a contact's unique identifier changed.           There must be exactly one handle in the removed set and exactly           one handle in one of the added sets. The Renamed           signal on the           Renaming           interface will have been emitted for the same handles,           shortly before this MembersChanged signal is emitted.         ]]&gt;</doc>
      </member>
      <member name="permission_denied"
              value="10"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_PERMISSION_DENIED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="841">&lt;![CDATA[           The change is because there was no permission to contact the             requested handle.            If a contact is removed from a group for this reason, the             equivalent D-Bus error is             org.freedesktop.Telepathy.Error.PermissionDenied.                    ]]&gt;</doc>
      </member>
      <member name="separated"
              value="11"
              c:identifier="TP_CHANNEL_GROUP_CHANGE_REASON_SEPARATED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="842">&lt;![CDATA[           If members are removed with this reason code, the change is             because the group has split into unconnected parts which can only             communicate within themselves (e.g. netsplits on IRC use this             reason code).                                   If members are added with this reason code, the change is because             unconnected parts of the group have rejoined. If this channel             carries messages (e.g. Text             or Tubes             channels) applications must             assume that the contacts being added are likely to have missed some             messages as a result of the separation, and that the contacts             in the group are likely to have missed some messages from the             contacts being added.                      Note that from the added contacts' perspective, they have been             in the group all along, and the contacts we indicate to be in             the group (including the local user) have just rejoined             the group with reason Separated. Application protocols in Tubes             should be prepared to cope with this situation.                       The SelfHandle SHOULD NOT be             removed from channels with this reason.         ]]&gt;</doc>
      </member>
    </enumeration>
    <bitfield name="ChannelGroupFlags" c:type="TpChannelGroupFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="810">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="423"/>
      <member name="can_add"
              value="1"
              c:identifier="TP_CHANNEL_GROUP_FLAG_CAN_ADD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="812">&lt;![CDATA[             The AddMembers method can be used to             add or invite members who are             not already in the local pending list (which is always valid).         ]]&gt;</doc>
      </member>
      <member name="can_remove"
              value="2"
              c:identifier="TP_CHANNEL_GROUP_FLAG_CAN_REMOVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="813">&lt;![CDATA[             The RemoveMembers method can be used             to remove channel members             (removing those on the pending local list is always valid).         ]]&gt;</doc>
      </member>
      <member name="can_rescind"
              value="4"
              c:identifier="TP_CHANNEL_GROUP_FLAG_CAN_RESCIND">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="814">&lt;![CDATA[             The RemoveMembers method can be used             on people on the remote             pending list.         ]]&gt;</doc>
      </member>
      <member name="message_add"
              value="8"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MESSAGE_ADD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="815">&lt;![CDATA[             A message may be sent to the server when calling             AddMembers on             contacts who are not currently pending members.         ]]&gt;</doc>
      </member>
      <member name="message_remove"
              value="16"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MESSAGE_REMOVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="816">&lt;![CDATA[             A message may be sent to the server when calling             RemoveMembers on             contacts who are currently channel members.         ]]&gt;</doc>
      </member>
      <member name="message_accept"
              value="32"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MESSAGE_ACCEPT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="817">&lt;![CDATA[             A message may be sent to the server when calling             AddMembers on             contacts who are locally pending.         ]]&gt;</doc>
      </member>
      <member name="message_reject"
              value="64"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MESSAGE_REJECT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="818">&lt;![CDATA[             A message may be sent to the server when calling             RemoveMembers on             contacts who are locally pending.         ]]&gt;</doc>
      </member>
      <member name="message_rescind"
              value="128"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MESSAGE_RESCIND">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="819">&lt;![CDATA[             A message may be sent to the server when calling             RemoveMembers on             contacts who are remote pending.         ]]&gt;</doc>
      </member>
      <member name="channel_specific_handles"
              value="256"
              c:identifier="TP_CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="820">&lt;![CDATA[                        The members of this group have handles which are specific to             this channel, and are not valid as general-purpose handles on             the connection. Depending on the channel, it may be possible to             check the HandleOwners property or             call GetHandleOwners to find the             owners of these handles, which should be done if you wish to (e.g.)             subscribe to the contact's presence.                                    Connection managers must ensure that any given handle is not             simultaneously a general-purpose handle and a channel-specific             handle.                    ]]&gt;</doc>
      </member>
      <member name="only_one_group"
              value="512"
              c:identifier="TP_CHANNEL_GROUP_FLAG_ONLY_ONE_GROUP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="821">&lt;![CDATA[             Placing a contact in multiple groups of this type is not allowed             and will raise NotAvailable (on services where contacts may only             be in one user-defined group, user-defined groups will have             this flag).         ]]&gt;</doc>
      </member>
      <member name="handle_owners_not_available"
              value="1024"
              c:identifier="TP_CHANNEL_GROUP_FLAG_HANDLE_OWNERS_NOT_AVAILABLE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="822">&lt;![CDATA[           In rooms with channel specific handles (ie Channel_Specific_Handles           flag is set), this flag indicates that no handle owners are           available, apart from the owner of the           SelfHandle.                         This used to be an important optimization to avoid repeated             GetHandleOwners calls, before we introduced the             HandleOwners property and             HandleOwnersChanged signal.                    ]]&gt;</doc>
      </member>
      <member name="properties"
              value="2048"
              c:identifier="TP_CHANNEL_GROUP_FLAG_PROPERTIES">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="823">&lt;![CDATA[           This flag indicates that all the properties introduced in           specification 0.17.6 are fully supported.         ]]&gt;</doc>
      </member>
      <member name="members_changed_detailed"
              value="4096"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MEMBERS_CHANGED_DETAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="824">&lt;![CDATA[           Indicates that MembersChangedDetailed           will be emitted for changes to this group's members in addition to           MembersChanged.           Clients can then connect to the former and ignore emission of the           latter. This flag's state MUST NOT change over the lifetime of a           channel.                         If it were allowed to change, client bindings would have to always             connect to MembersChanged just in case the flag ever went away (and             generally be unnecessarily complicated), which would mostly negate             the point of having this flag in the first place.                    ]]&gt;</doc>
      </member>
      <member name="message_depart"
              value="8192"
              c:identifier="TP_CHANNEL_GROUP_FLAG_MESSAGE_DEPART">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="825">&lt;![CDATA[           A message may be sent to the server when calling           RemoveMembers on           the SelfHandle.                         This would be set for XMPP Multi-User Chat or IRC channels,             but not for a typical implementation of streamed media calls.                    ]]&gt;</doc>
      </member>
    </bitfield>
    <record name="ChannelManagerIter"
            c:type="TpChannelManagerIter"
            version="0.7.15"
            introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="223">An iterator over the #TpChannelManager objects known to a #TpBaseConnection.
It has no public fields.

Use tp_base_connection_channel_manager_iter_init() to start iteration and
tp_base_connection_channel_manager_iter_next() to continue.</doc>
      <source-position filename="base-connection.h" line="194"/>
      <field name="self" readable="0" private="1">
        <type name="BaseConnection" c:type="TpBaseConnection*"/>
      </field>
      <field name="index" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="_future" readable="0" private="1">
        <array zero-terminated="0" fixed-size="2">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <bitfield name="ChannelMediaCapabilities"
              c:type="TpChannelMediaCapabilities">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="582">&lt;![CDATA[         The channel-type-specific capability flags used for         Channel.Type.StreamedMedia in the Connection.Interface.Capabilities         interface. See the InitialAudio         property for details of the mechanisms that will replace this.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="301"/>
      <member name="audio"
              value="1"
              c:identifier="TP_CHANNEL_MEDIA_CAPABILITY_AUDIO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="584">&lt;![CDATA[           The handle is capable of using audio streams within a media channel.         ]]&gt;</doc>
      </member>
      <member name="video"
              value="2"
              c:identifier="TP_CHANNEL_MEDIA_CAPABILITY_VIDEO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="585">&lt;![CDATA[           The handle is capable of using video streams within a media channel.         ]]&gt;</doc>
      </member>
      <member name="nat_traversal_stun"
              value="4"
              c:identifier="TP_CHANNEL_MEDIA_CAPABILITY_NAT_TRAVERSAL_STUN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="586">&lt;![CDATA[           The handle is capable of performing STUN to traverse NATs.         ]]&gt;</doc>
      </member>
      <member name="nat_traversal_gtalk_p2p"
              value="8"
              c:identifier="TP_CHANNEL_MEDIA_CAPABILITY_NAT_TRAVERSAL_GTALK_P2P">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="587">&lt;![CDATA[           The handle is capable of establishing Google Talk peer-to-peer           connections (as implemented in libjingle 0.3) to traverse NATs.         ]]&gt;</doc>
      </member>
      <member name="nat_traversal_ice_udp"
              value="16"
              c:identifier="TP_CHANNEL_MEDIA_CAPABILITY_NAT_TRAVERSAL_ICE_UDP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="588">&lt;![CDATA[           The handle is capable of establishing ICE UDP peer-to-peer           connections (as defined by the IETF MMUSIC working group) to traverse           NATs.         ]]&gt;</doc>
      </member>
      <member name="immutable_streams"
              value="32"
              c:identifier="TP_CHANNEL_MEDIA_CAPABILITY_IMMUTABLE_STREAMS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="589">&lt;![CDATA[           Channels whose target handle is this contact will have           ImmutableStreams = True.         ]]&gt;</doc>
      </member>
    </bitfield>
    <bitfield name="ChannelPasswordFlags" c:type="TpChannelPasswordFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="961">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="492"/>
      <member name="provide"
              value="8"
              c:identifier="TP_CHANNEL_PASSWORD_FLAG_PROVIDE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="963">&lt;![CDATA[           The ProvidePassword method must be           called now for the user to join the channel         ]]&gt;</doc>
      </member>
      <member name="hint"
              value="4"
              c:identifier="TP_CHANNEL_PASSWORD_FLAG_HINT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="964">&lt;![CDATA[           The RoomConfig1.PasswordHint           contains a hint for the password.         ]]&gt;</doc>
      </member>
    </bitfield>
    <record name="ChannelPrivate"
            c:type="TpChannelPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel.h" line="39"/>
    </record>
    <class name="ChannelRequest"
           c:symbol-prefix="channel_request"
           c:type="TpChannelRequest"
           version="0.7.32"
           parent="Proxy"
           glib:type-name="TpChannelRequest"
           glib:get-type="tp_channel_request_get_type"
           glib:type-struct="ChannelRequestClass">
      <doc xml:space="preserve"
           filename="channel-request.c"
           line="59">Requesting a channel from the channel dispatcher can take some time, so an
object is created in the channel dispatcher to represent each request. This
proxy represents one of those objects.

Any client can call tp_cli_channel_request_call_cancel() at any time to
attempt to cancel the request.

On success, the #TpChannelRequest::succeeded signal will be emitted.
Immediately after that, the #TpProxy::invalidated signal will be emitted,
with the domain %TP_DBUS_ERRORS and the error code
%TP_DBUS_ERROR_OBJECT_REMOVED (this is not an error condition, it merely
indicates that the channel request no longer exists).

On failure, the #TpProxy::invalidated signal will be emitted with some
other suitable error, usually from the %TP_ERROR domain.

If the channel dispatcher crashes or exits, the #TpProxy::invalidated
signal will be emitted with the domain %TP_DBUS_ERRORS and the error code
%TP_DBUS_ERROR_NAME_OWNER_LOST.

Creating a #TpChannelRequest directly is deprecated: it
should only be created via a #TpAccountChannelRequest
or a #TpBaseClient.

Since 0.16, #TpChannelRequest always has a non-%NULL #TpProxy:factory,
and its #TpProxy:factory will be propagated to the #TpAccount,
#TpConnection and #TpChannel.</doc>
      <source-position filename="channel-request.h" line="53"/>
      <constructor name="new"
                   c:identifier="tp_channel_request_new"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="603">Convenience function to create a new channel request proxy.

If the channel request was newly created, the client making the request
is responsible for calling tp_cli_channel_request_call_proceed() when it
is ready for the channel request to proceed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should get #TpChannelRequest objects
 from a #TpBaseClient</doc-deprecated>
        <source-position filename="channel-request.h" line="75"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="617">a new reference to an channel request proxy, or %NULL if
   @object_path is not syntactically valid or the channel dispatcher is
   not running</doc>
          <type name="ChannelRequest" c:type="TpChannelRequest*"/>
        </return-value>
        <parameters>
          <parameter name="bus_daemon" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="605">Proxy for the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="606">The non-NULL object path of this channel request</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="607">As many as are known of the immutable D-Bus
 properties of this channel request, or %NULL if none are known</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <function name="init_known_interfaces"
                c:identifier="tp_channel_request_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="572">Ensure that the known interfaces for TpChannelRequest have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CHANNEL_REQUEST.</doc>
        <source-position filename="channel-request.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="dup_hints"
              c:identifier="tp_channel_request_dup_hints"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="851">Return the #TpChannelRequest:hints-vardict property</doc>
        <source-position filename="channel-request.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="857">the value of #TpChannelRequest:hints-vardict</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="853">a #TpChannelRequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_immutable_properties"
              c:identifier="tp_channel_request_dup_immutable_properties"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="716">Return the #TpChannelRequest:immutable-properties-vardict property.</doc>
        <source-position filename="channel-request.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="722">the value of
#TpChannelRequest:immutable-properties-vardict</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="718">a #TpChannelRequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="tp_channel_request_get_account"
              glib:get-property="account"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="749">Return the value of the #TpChannelRequest:account construct-only property</doc>
        <source-position filename="channel-request.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="755">the value of #TpChannelRequest:account</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="751">a #tpchannelrequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hints"
              c:identifier="tp_channel_request_get_hints"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="828">Return the #TpChannelRequest:hints property</doc>
        <source-position filename="channel-request.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="834">the value of
#TpChannelRequest:hints</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="830">a #TpChannelRequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_immutable_properties"
              c:identifier="tp_channel_request_get_immutable_properties"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="697">Return the #TpChannelRequest:immutable-properties construct-only property</doc>
        <source-position filename="channel-request.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="703">the value of
#TpChannelRequest:immutable-properties</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="699">a #TpChannelRequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_preferred_handler"
              c:identifier="tp_channel_request_get_preferred_handler"
              glib:get-property="preferred-handler"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="806">return the #TpChannelRequest:preferred-handler construct-only property</doc>
        <source-position filename="channel-request.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="812">the value of #TpChannelRequest:preferred-handler</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="808">a #tpchannelrequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_action_time"
              c:identifier="tp_channel_request_get_user_action_time"
              glib:get-property="user-action-time"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="784">return the #TpChannelRequest:user-action-time construct-only property</doc>
        <source-position filename="channel-request.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel-request.c"
               line="790">the value of #TpChannelRequest:user-action-time</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="786">a #tpchannelrequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_channel_factory"
              c:identifier="tp_channel_request_set_channel_factory"
              glib:set-property="channel-factory"
              version="0.13.14"
              deprecated="1">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="668">Change the value of the #TpChannelRequest:channel-factory property.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.5. Use #TpProxy:factory instead.</doc-deprecated>
        <source-position filename="channel-request.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="670">a #TpChannelRequest</doc>
            <type name="ChannelRequest" c:type="TpChannelRequest*"/>
          </instance-parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="671">an object implementing the #TpClientChannelFactoryInterface
interface</doc>
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.15.3"
                transfer-ownership="none"
                getter="get_account">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="443">The #TpAccount on which this request was made, not guaranteed
to be prepared.

Read-only.</doc>
        <type name="Account"/>
      </property>
      <property name="channel-factory"
                version="0.13.14"
                deprecated="1"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_channel_factory">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="378">The object implementing the #TpClientChannelFactoryInterface interface
that will be used to create channel proxies when the
#TpChannelRequest::succeeded-with-channel signal is fired.
This property can be changed using
tp_channel_request_set_channel_factory().

If no channel factory is specified then #TpAutomaticProxyFactory is used.</doc>
        <doc-deprecated xml:space="preserve">since 0.15.5. Use #TpProxy:factory instead.</doc-deprecated>
        <type name="GObject.Object"/>
      </property>
      <property name="hints"
                version="0.13.14"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="494">A #TP_HASH_TYPE_STRING_VARIANT_MAP of metadata provided by
the channel requester; or %NULL if #TpChannelRequest:immutable-properties
is not defined or if no hints has been defined.

Read-only.</doc>
        <type/>
      </property>
      <property name="hints-vardict"
                version="0.19.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="510">A %G_VARIANT_TYPE_VARDICT of metadata provided by
the channel requester; or %NULL if #TpChannelRequest:immutable-properties
is not defined or if no hints have been defined.

Read-only.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="immutable-properties"
                version="0.13.14"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="399">The immutable D-Bus properties of this channel request, represented by a
#GHashTable where the keys are D-Bus interface name + "." + property
name, and the values are #GValue instances.

Note that this property is set only if the immutable properties have been
set during the construction of the #TpChannelRequest.

Read-only except during construction.</doc>
        <type/>
      </property>
      <property name="immutable-properties-vardict"
                version="0.19.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="421">The immutable D-Bus properties of this channel request, represented by a
%G_VARIANT_TYPE_VARDICT where the keys are
D-Bus interface name + "." + property name.

Note that this property is set only if the immutable properties have been
set during the construction of the #TpChannelRequest.

Read-only except during construction.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="preferred-handler"
                version="0.15.3"
                transfer-ownership="none"
                getter="get_preferred_handler"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="476">Either the well-known bus name (starting with #TP_CLIENT_BUS_NAME_BASE)
of the preferred handler for this channel request,
or %NULL to indicate that any handler would be acceptable.

Read-only.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="user-action-time"
                version="0.15.3"
                transfer-ownership="none"
                getter="get_user_action_time"
                default-value="0">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="458">The time at which user action occurred, or
#TP_USER_ACTION_TIME_NOT_USER_ACTION if this channel request is
for some reason not involving user action.

Read-only.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelRequestPrivate" c:type="TpChannelRequestPrivate*"/>
      </field>
      <glib:signal name="succeeded" when="last" detailed="1" deprecated="1">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="527">Emitted when the channel request succeeds.</doc>
        <doc-deprecated xml:space="preserve">since 0.13.14. Use
#TpChannelRequest::succeeded-with-channel, which provides the resulting
channel, instead.</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="succeeded-with-channel"
                   when="last"
                   detailed="1"
                   version="0.13.14">
        <doc xml:space="preserve"
             filename="channel-request.c"
             line="544">Emitted when the channel request succeeds.

With telepathy-mission-control version 5.7.1 and earlier, @connection and
@channel will be %NULL. When using newer versions, they will be correctly
set to the newly-created channel, and the connection which owns it.

The #TpChannel is created using #TpChannelRequest:channel-factory or
#TpProxy:factory but the features of the factory are NOT prepared.
It's up to the user to prepare the features returned by
tp_simple_client_factory_dup_channel_features() himself.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="547">the #TpConnection of @channel, or %NULL</doc>
            <type name="Connection"/>
          </parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="channel-request.c"
                 line="548">the #TpChannel created, or %NULL</doc>
            <type name="Channel"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ChannelRequestClass"
            c:type="TpChannelRequestClass"
            glib:is-gtype-struct-for="ChannelRequest">
      <doc xml:space="preserve"
           filename="channel-request.c"
           line="93">The class of a #TpChannelRequest.</doc>
      <source-position filename="channel-request.h" line="53"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ChannelRequestClassPrivate"
              c:type="TpChannelRequestClassPrivate*"/>
      </field>
    </record>
    <record name="ChannelRequestClassPrivate"
            c:type="TpChannelRequestClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel-request.h" line="40"/>
    </record>
    <record name="ChannelRequestPrivate"
            c:type="TpChannelRequestPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="channel-request.h" line="39"/>
    </record>
    <bitfield name="ChannelTextMessageFlags"
              c:type="TpChannelTextMessageFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="642">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="329"/>
      <member name="truncated"
              value="1"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_FLAG_TRUNCATED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="644">&lt;![CDATA[         The incoming message was truncated to a shorter length by the         server or the connection manager.         ]]&gt;</doc>
      </member>
      <member name="non_text_content"
              value="2"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_FLAG_NON_TEXT_CONTENT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="645">&lt;![CDATA[           The incoming message contained non-text content which cannot be             represented by this interface, but has been signalled             in the Messages             interface.            Connection managers SHOULD only set this flag if the non-text             content appears to be relatively significant (exactly how             significant is up to the implementor). The intention is that             if this flag is set, clients using this interface SHOULD inform             the user that part of the message was not understood.         ]]&gt;</doc>
      </member>
      <member name="scrollback"
              value="4"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_FLAG_SCROLLBACK">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="646">&lt;![CDATA[           The incoming message was part of a replay of message history.                         In XMPP multi-user chat, a few past messages are replayed               when you join a chatroom. A sufficiently capable IRC connection               manager could also set this flag on historical messages when               connected to a proxy like bip or irssi-proxy. The existence               of this flag allows loggers and UIs to use better heuristics               when eliminating duplicates (a simple implementation made               possible by this flag would be to avoid logging scrollback               at all).                    ]]&gt;</doc>
      </member>
      <member name="rescued"
              value="8"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_FLAG_RESCUED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="647">&lt;![CDATA[           The incoming message has been seen in a previous channel during             the lifetime of the Connection, but             had not been acknowledged             when that channel closed, causing an identical channel (the             channel in which the message now appears) to open.                         This means that a logger (which should already have seen the               message in the previous channel) is able to recognise and ignore               these replayed messages.                    ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="ChannelTextMessageType"
                 c:type="TpChannelTextMessageType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="618">&lt;![CDATA[         The type of message.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="320"/>
      <member name="normal"
              value="0"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_TYPE_NORMAL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="620">&lt;![CDATA[         An ordinary chat message. Unknown types SHOULD be treated like this.         ]]&gt;</doc>
      </member>
      <member name="action"
              value="1"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_TYPE_ACTION">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="621">&lt;![CDATA[         An action which might be presented to the user as         "* &lt;sender&gt; &lt;action&gt;", such as an IRC CTCP         ACTION (typically selected by the "/me" command). For example, the         text of the message might be "drinks more coffee".         ]]&gt;</doc>
      </member>
      <member name="notice"
              value="2"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_TYPE_NOTICE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="622">&lt;![CDATA[         A one-off or automated message not necessarily expecting a reply         ]]&gt;</doc>
      </member>
      <member name="auto_reply"
              value="3"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_TYPE_AUTO_REPLY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="623">&lt;![CDATA[         An automatically-generated reply message.         ]]&gt;</doc>
      </member>
      <member name="delivery_report"
              value="4"
              c:identifier="TP_CHANNEL_TEXT_MESSAGE_TYPE_DELIVERY_REPORT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="624">&lt;![CDATA[           A delivery report. This message type MUST NOT appear unless the           channel supports the Messages           interface; see Message_Part for the format that           delivery reports must take.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="ChannelTextSendError" c:type="TpChannelTextSendError">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="595">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="310"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_CHANNEL_TEXT_SEND_ERROR_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="597">&lt;![CDATA[         An unknown error occurred         ]]&gt;</doc>
      </member>
      <member name="offline"
              value="1"
              c:identifier="TP_CHANNEL_TEXT_SEND_ERROR_OFFLINE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="598">&lt;![CDATA[         The requested contact was offline         ]]&gt;</doc>
      </member>
      <member name="invalid_contact"
              value="2"
              c:identifier="TP_CHANNEL_TEXT_SEND_ERROR_INVALID_CONTACT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="599">&lt;![CDATA[         The requested contact is not valid         ]]&gt;</doc>
      </member>
      <member name="permission_denied"
              value="3"
              c:identifier="TP_CHANNEL_TEXT_SEND_ERROR_PERMISSION_DENIED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="600">&lt;![CDATA[         The user does not have permission to speak on this channel         ]]&gt;</doc>
      </member>
      <member name="too_long"
              value="4"
              c:identifier="TP_CHANNEL_TEXT_SEND_ERROR_TOO_LONG">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="601">&lt;![CDATA[         The outgoing message was too long and was rejected by the server         ]]&gt;</doc>
      </member>
      <member name="not_implemented"
              value="5"
              c:identifier="TP_CHANNEL_TEXT_SEND_ERROR_NOT_IMPLEMENTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="602">&lt;![CDATA[         The channel doesn't support sending text messages to the requested         contact         ]]&gt;</doc>
      </member>
    </enumeration>
    <callback name="ChannelWhenReadyCb"
              c:type="TpChannelWhenReadyCb"
              deprecated="1"
              deprecated-version="0.17.6">
      <doc xml:space="preserve"
           filename="channel.c"
           line="2310">Signature of a callback passed to tp_channel_call_when_ready(), which
will be called exactly once, when the channel becomes ready or
invalid (whichever happens first)</doc>
      <source-position filename="channel.h" line="96"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="channel" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2312">the channel (which may be in the middle of being disposed,
 if error is non-%NULL, error-&gt;domain is TP_DBUS_ERRORS and error-&gt;code is
 TP_DBUS_ERROR_PROXY_UNREFERENCED)</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2315">%NULL if the channel is ready for use, or the error with which
 it was invalidated if it is now invalid</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="channel.c"
               line="2317">whatever was passed to tp_channel_call_when_ready()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <interface name="ClientChannelFactory"
               c:symbol-prefix="client_channel_factory"
               c:type="TpClientChannelFactory"
               version="0.13.6"
               glib:type-name="TpClientChannelFactory"
               glib:get-type="tp_client_channel_factory_get_type"
               glib:type-struct="ClientChannelFactoryInterface">
      <doc xml:space="preserve"
           filename="client-channel-factory.c"
           line="39">Opaque typedef representing a #GObject that implements
the %TP_TYPE_CLIENT_CHANNEL_FACTORY interface.</doc>
      <source-position filename="client-channel-factory.h" line="57"/>
      <virtual-method name="obj_create_channel" introspectable="0" throws="1">
        <source-position filename="client-channel-factory.h" line="49"/>
        <return-value>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="obj_dup_channel_features" introspectable="0">
        <source-position filename="client-channel-factory.h" line="55"/>
        <return-value>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <type name="Channel" c:type="TpChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="create_channel"
              c:identifier="tp_client_channel_factory_create_channel"
              version="0.13.2"
              throws="1">
        <doc xml:space="preserve"
             filename="client-channel-factory.c"
             line="86">Function called when a channel need to be created.
Implementation can return a subclass of #TpChannel if they need to.

Changed in 0.13.6: the function's signature was previously wrong;
it expected an object instance as its first parameter, but the type of the
parameter was the type of the interface vtable.</doc>
        <source-position filename="client-channel-factory.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="client-channel-factory.c"
               line="102">a new channel proxy, or %NULL on invalid arguments</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-channel-factory.c"
                 line="88">a client channel factory</doc>
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-channel-factory.c"
                 line="89">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-channel-factory.c"
                 line="90">the object path of the channel</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-channel-factory.c"
                 line="91">
the immutable properties of the channel</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="dup_channel_features"
              c:identifier="tp_client_channel_factory_dup_channel_features"
              version="0.13.3">
        <doc xml:space="preserve"
             filename="client-channel-factory.c"
             line="130">Return a zero terminated #GArray containing the #TpChannel features that
should be prepared on @channel.

Changed in 0.13.6: the function's signature was previously wrong;
it expected an object instance as its first parameter, but the type of the
parameter was the type of the interface vtable.</doc>
        <source-position filename="client-channel-factory.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="client-channel-factory.c"
               line="142">a newly allocated #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-channel-factory.c"
                 line="132">a client channel factory</doc>
            <type name="ClientChannelFactory"
                  c:type="TpClientChannelFactory*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-channel-factory.c"
                 line="133">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="ClientChannelFactoryInterface"
            c:type="TpClientChannelFactoryInterface"
            glib:is-gtype-struct-for="ClientChannelFactory"
            version="0.13.2">
      <doc xml:space="preserve"
           filename="client-channel-factory.c"
           line="48">Interface for a channel factory</doc>
      <source-position filename="client-channel-factory.h" line="57"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="client-channel-factory.c"
             line="50">the parent</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="create_channel" introspectable="0">
        <callback name="create_channel" introspectable="0" throws="1">
          <source-position filename="client-channel-factory.h" line="40"/>
          <return-value>
            <type name="Channel" c:type="TpChannel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ClientChannelFactoryInterface"
                    c:type="TpClientChannelFactoryInterface*"/>
            </parameter>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="TpConnection*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="properties" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_channel_features" introspectable="0">
        <callback name="dup_channel_features" introspectable="0">
          <source-position filename="client-channel-factory.h" line="46"/>
          <return-value>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ClientChannelFactoryInterface"
                    c:type="TpClientChannelFactoryInterface*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <type name="Channel" c:type="TpChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obj_create_channel" introspectable="0">
        <callback name="obj_create_channel" introspectable="0" throws="1">
          <source-position filename="client-channel-factory.h" line="49"/>
          <return-value>
            <type name="Channel" c:type="TpChannel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ClientChannelFactory"
                    c:type="TpClientChannelFactory*"/>
            </parameter>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="TpConnection*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="properties" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="obj_dup_channel_features" introspectable="0">
        <callback name="obj_dup_channel_features" introspectable="0">
          <source-position filename="client-channel-factory.h" line="55"/>
          <return-value>
            <array name="GLib.Array" c:type="GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ClientChannelFactory"
                    c:type="TpClientChannelFactory*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <type name="Channel" c:type="TpChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ClientMessage"
           c:symbol-prefix="client_message"
           c:type="TpClientMessage"
           version="0.13.9"
           parent="Message"
           glib:type-name="TpClientMessage"
           glib:get-type="tp_client_message_get_type"
           glib:type-struct="ClientMessageClass">
      <doc xml:space="preserve"
           filename="client-message.c"
           line="45">Opaque structure representing a message in the Telepathy messages interface
(client side).</doc>
      <source-position filename="client-message.h" line="42"/>
      <constructor name="new"
                   c:identifier="tp_client_message_new"
                   version="0.13.9">
        <doc xml:space="preserve"
             filename="client-message.c"
             line="73">A convenient function to create a new #TpClientMessage</doc>
        <source-position filename="client-message.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="client-message.c"
               line="78">a newly allocated #TpClientMessage having only
the header part.</doc>
          <type name="Message" c:type="TpMessage*"/>
        </return-value>
      </constructor>
      <constructor name="new_text"
                   c:identifier="tp_client_message_new_text"
                   version="0.13.9">
        <doc xml:space="preserve"
             filename="client-message.c"
             line="90">A convenient function to create a new #TpClientMessage having
'text/plain' as 'content-type', @type as 'message-type' and
@text as 'content'.</doc>
        <source-position filename="client-message.h" line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="client-message.c"
               line="99">a newly allocated #TpClientMessage</doc>
          <type name="Message" c:type="TpMessage*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-message.c"
                 line="92">the type of message</doc>
            <type name="ChannelTextMessageType"
                  c:type="TpChannelTextMessageType"/>
          </parameter>
          <parameter name="text" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="client-message.c"
                 line="93">content of the messsage</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
    </class>
    <record name="ClientMessageClass"
            c:type="TpClientMessageClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="ClientMessage">
      <source-position filename="client-message.h" line="42"/>
    </record>
    <bitfield name="ConnMgrParamFlags" c:type="TpConnMgrParamFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="17"/>
      <member name="required"
              value="1"
              c:identifier="TP_CONN_MGR_PARAM_FLAG_REQUIRED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="3">&lt;![CDATA[           This parameter is required for connecting to the server.         ]]&gt;</doc>
      </member>
      <member name="register"
              value="2"
              c:identifier="TP_CONN_MGR_PARAM_FLAG_REGISTER">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="4">&lt;![CDATA[           This parameter is required for registering an account on the           server.         ]]&gt;</doc>
      </member>
      <member name="has_default"
              value="4"
              c:identifier="TP_CONN_MGR_PARAM_FLAG_HAS_DEFAULT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="5">&lt;![CDATA[           This parameter has a default value, which is returned in           GetParameters; not providing this parameter is equivalent to           providing the default.         ]]&gt;</doc>
      </member>
      <member name="secret"
              value="8"
              c:identifier="TP_CONN_MGR_PARAM_FLAG_SECRET">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="6">&lt;![CDATA[           This parameter should be considered private or secret; for             instance, clients should store it in a "password safe" like             gnome-keyring or kwallet, omit it from debug logs, and use a             text input widget that hides the value of the parameter.            (Clients that support older connection managers may also treat             any parameter whose name contains "password" as though it had this             flag.)         ]]&gt;</doc>
      </member>
      <member name="dbus_property"
              value="16"
              c:identifier="TP_CONN_MGR_PARAM_FLAG_DBUS_PROPERTY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="7">&lt;![CDATA[           This parameter is also a D-Bus property on the resulting             Connection; a             parameter named com.example.Duck.Macaroni with this             flag corresponds to the Macaroni property on the             com.example.Duck interface.  Its value can be queried             and possibly changed on an existing Connection using methods on the             org.freedesktop.DBus.Properties interface.            When a new value for a parameter with this flag is passed to             Account.UpdateParameters,             the account manager will attempt to update its value on any running             connections. Similarly, if the parameter also has the             Has_Default flag, and is passed in the second argument             to UpdateParameters, the default value will be applied             to any running             connections. Thus, clients generally do not need to directly access             or update the connection property; instead, they SHOULD manipulate             Account.Parameters.                         This allows runtime-configurable options to be stored and               maintained by the AccountManager, without needing to               invent a separate account preference for “properties that should               be set on the connection as soon as it is created”. It was               originally invented to manage Cellular               preferences.                    ]]&gt;</doc>
      </member>
    </bitfield>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="TpConnection"
           version="0.7.1"
           parent="Proxy"
           glib:type-name="TpConnection"
           glib:get-type="tp_connection_get_type"
           glib:type-struct="ConnectionClass">
      <doc xml:space="preserve"
           filename="connection.c"
           line="261">A proxy object for a Telepathy connection. There are no interesting
public struct fields.

(Changed in 0.7.12: the layout of the structure is visible, allowing
subclassing.)</doc>
      <source-position filename="connection.h" line="111"/>
      <constructor name="new"
                   c:identifier="tp_connection_new"
                   version="0.7.1"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2370">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_connection() instead.</doc-deprecated>
        <source-position filename="connection.h" line="144"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2384">a new connection proxy, or %NULL if unique-name resolution
 fails or on invalid arguments</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2372">a D-Bus daemon; may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="bus_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2373">the well-known or unique name of the connection
 process; if well-known, this function will make a blocking call to the bus
 daemon to resolve the unique name. May be %NULL if @object_path is not, in
 which case a well-known name will be derived from @object_path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2377">the object path of the connection process.
 May be %NULL if @bus_name is a well-known name, in which case the object
 path will be derived from @bus_name.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_aliasing"
                c:identifier="tp_connection_get_feature_quark_aliasing">
        <source-position filename="connection.h" line="335"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_avatar_requirements"
                c:identifier="tp_connection_get_feature_quark_avatar_requirements">
        <source-position filename="connection.h" line="327"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_balance"
                c:identifier="tp_connection_get_feature_quark_balance">
        <source-position filename="connection.h" line="343"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_capabilities"
                c:identifier="tp_connection_get_feature_quark_capabilities">
        <source-position filename="connection.h" line="254"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_connected"
                c:identifier="tp_connection_get_feature_quark_connected">
        <source-position filename="connection.h" line="250"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_contact_blocking"
                c:identifier="tp_connection_get_feature_quark_contact_blocking">
        <source-position filename="connection-contact-list.h" line="209"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_contact_groups"
                c:identifier="tp_connection_get_feature_quark_contact_groups">
        <source-position filename="connection-contact-list.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_contact_info"
                c:identifier="tp_connection_get_feature_quark_contact_info">
        <source-position filename="connection.h" line="258"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_contact_list"
                c:identifier="tp_connection_get_feature_quark_contact_list">
        <source-position filename="connection-contact-list.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_contact_list_properties"
                c:identifier="tp_connection_get_feature_quark_contact_list_properties">
        <source-position filename="connection-contact-list.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_core"
                c:identifier="tp_connection_get_feature_quark_core">
        <source-position filename="connection.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_connection_init_known_interfaces"
                version="0.7.6">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2992">Ensure that the known interfaces for TpConnection have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CONNECTION.</doc>
        <source-position filename="connection.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <function name="presence_type_cmp_availability"
                c:identifier="tp_connection_presence_type_cmp_availability"
                version="0.7.16">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3158">Compares @p1 and @p2 like strcmp(). @p1 &gt; @p2 means @p1 is more available
than @p2.

The order used is: available &gt; busy &gt; away &gt; xa &gt; hidden &gt; offline &gt; error &gt;
unknown &gt; unset</doc>
        <source-position filename="connection.h" line="219"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3169">-1, 0 or 1, if @p1 is &lt;, == or &gt; than @p2.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <parameter name="p1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3160">a #TpConnectionPresenceType</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="p2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3161">a #TpConnectionPresenceType</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
        </parameters>
      </function>
      <method name="add_client_interest"
              c:identifier="tp_connection_add_client_interest"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3432">Subscribe to any opt-in change notifications for @interested_in.

For contact information, use #TpContact instead, which will call this
automatically.</doc>
        <source-position filename="connection.h" line="236"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3434">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="interested_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3435">a string identifying an interface or part of an interface
 to which this connection will subscribe</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_client_interest_by_id"
              c:identifier="tp_connection_add_client_interest_by_id"
              version="0.11.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3453">Subscribe to any opt-in change notifications for @interested_in.

Equivalent to, but a little more efficient than, calling
tp_connection_add_client_interest() for the string value of @interested_in.</doc>
        <source-position filename="connection.h" line="239"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3455">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="interested_in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3456">a quark identifying an interface or part of an interface
 to which this connection will subscribe</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_to_group_async"
              c:identifier="tp_connection_add_to_group_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1217">Add the given @contacts to the given @group, creating it if necessary.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS.</doc>
        <source-position filename="connection-contact-list.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1219">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1220">the group to alter.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1221">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1222">An array of #TpContact objects to
 include in the group.</doc>
            <array length="1" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1224">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1225">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_to_group_finish"
              c:identifier="tp_connection_add_to_group_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1245">Finishes tp_connection_add_to_group_async()</doc>
        <source-position filename="connection-contact-list.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1253">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1247">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1248">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="authorize_publication_async"
              c:identifier="tp_connection_authorize_publication_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="877">For each of the given @contacts, request that the local user's presence is
sent to that contact, i.e. that their #TpContact:publish-state property
becomes %TP_SUBSCRIPTION_STATE_YES.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST.</doc>
        <source-position filename="connection-contact-list.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="879">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="880">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="881">An array of #TpContact objects to
 authorize</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="883">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="884">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="authorize_publication_finish"
              c:identifier="tp_connection_authorize_publication_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="905">Finishes tp_connection_authorize_publication_async()</doc>
        <source-position filename="connection-contact-list.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="913">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="907">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="908">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_connection_status_to_property"
              c:identifier="tp_connection_bind_connection_status_to_property"
              version="0.13.16">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3530">Binds the :status of @self to the boolean property of another
object using a #GBinding such that the @target_property will be set to
%TRUE when @self is connected (and @invert is %FALSE).

@target_property will be synchronised immediately (%G_BINDING_SYNC_CREATE).
@invert can be interpreted as analogous to %G_BINDING_INVERT_BOOLEAN.

For instance, this function can be used to bind the GtkWidget:sensitive
property to only make a widget sensitive when the account is connected.

See g_object_bind_property() for more information.</doc>
        <source-position filename="connection.h" line="384"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3550">the #GBinding instance representing the binding
  between the @self and the @target. The binding is released whenever the
  #GBinding reference count reaches zero.</doc>
          <type name="GObject.Binding" c:type="GBinding*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3532">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="target"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3533">the target #GObject</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="target_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3534">the property on @target to bind (must be %G_TYPE_BOOLEAN)</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="invert" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3535">%TRUE if you wish to invert the value of @target_property
  (i.e. %FALSE if connected)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="block_contacts_async"
              c:identifier="tp_connection_block_contacts_async"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1427">Direct the server to block @contacts.</doc>
        <source-position filename="connection-contact-list.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1429">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1430">the number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1431">An array of #TpContact objects to
 block</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="report_abusive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1433">If %TRUE, report these contacts as abusive to the
server administrators as well as blocking them. See
#TpConnection:can-report-abusive to discover whether reporting abuse is
supported. If #TpConnection:can-report-abusive is %FALSE, this parameter will
be ignored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1438">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1439">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="block_contacts_finish"
              c:identifier="tp_connection_block_contacts_finish"
              version="0.17.0"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1472">Finishes tp_connection_block_contacts_async()</doc>
        <source-position filename="connection-contact-list.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1480">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1474">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1475">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_when_ready"
              c:identifier="tp_connection_call_when_ready"
              version="0.7.7"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.17.6">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3078">If @self is ready for use or has been invalidated, call @callback
immediately, then return. Otherwise, arrange
for @callback to be called when @self either becomes ready for use
or becomes invalid.

Note that if the connection is not in state CONNECTED, the callback will
not be called until the connection either goes to state CONNECTED
or is invalidated (e.g. by going to state DISCONNECTED or by becoming
unreferenced). In particular, this method does not call Connect().
Call tp_cli_connection_call_connect() too, if you want to do that.</doc>
        <doc-deprecated xml:space="preserve">Use tp_proxy_prepare_async()</doc-deprecated>
        <source-position filename="connection.h" line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3080">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="callback" transfer-ownership="none" closure="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3081">called when the connection becomes ready or invalidated,
 whichever happens first</doc>
            <type name="ConnectionWhenReadyCb"
                  c:type="TpConnectionWhenReadyCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3083">arbitrary user-supplied data passed to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_report_abusive"
              c:identifier="tp_connection_can_report_abusive"
              glib:get-property="can-report-abusive"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1912">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="212"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1918">the value of #TpConnection:can-report-abusive</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1914">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_set_contact_alias"
              c:identifier="tp_connection_can_set_contact_alias">
        <source-position filename="connection.h" line="338"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="disconnect_async"
              c:identifier="tp_connection_disconnect_async"
              version="0.17.5">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3655">Disconnect the connection.

This method is intended for use by AccountManager implementations,
such as Mission Control. To disconnect a connection managed by an
AccountManager, either use tp_account_request_presence_async()
or tp_account_set_enabled_async(), depending whether the intention is
to put the account offline temporarily, or disable it longer-term.</doc>
        <source-position filename="connection.h" line="352"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3657">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3658">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3659">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="disconnect_finish"
              c:identifier="tp_connection_disconnect_finish"
              version="0.17.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3687">Interpret the result of tp_connection_disconnect_async().</doc>
        <source-position filename="connection.h" line="356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3695">%TRUE if the call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3689">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3690">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_contact_by_id_async"
              c:identifier="tp_connection_dup_contact_by_id_async"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="4985">Create a #TpContact object and make any asynchronous method calls necessary
to ensure that all the features specified in @features are ready for use
(if they are supported at all).

It is not an error to put features in @features even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</doc>
        <source-position filename="contact.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4987">A connection, which must have the %TP_CONNECTION_FEATURE_CONNECTED
 feature prepared</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4989">A strings representing the desired contact by its
 identifier in the IM protocol (an XMPP JID, SIP URI, MSN Passport,
 AOL screen-name etc.)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4992">The number of features in @features (may be 0)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4993">An array of features
 that must be ready for use (if supported)
 before the callback is called (may be %NULL if @n_features is 0)</doc>
            <array length="1"
                   zero-terminated="0"
                   c:type="const TpContactFeature*">
              <type name="ContactFeature" c:type="TpContactFeature"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4996">A user callback to call when the contact is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4997">Data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_contact_by_id_finish"
              c:identifier="tp_connection_dup_contact_by_id_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="5032">Finishes tp_connection_dup_contact_by_id_async().</doc>
        <source-position filename="contact.h" line="197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="contact.c"
               line="5040">a #TpContact or %NULL on error.</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5034">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5035">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_contact_if_possible"
              c:identifier="tp_connection_dup_contact_if_possible"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1541">Try to return an existing contact object or create a new contact object
immediately.

If tp_connection_has_immortal_handles() would return %TRUE and
@identifier is non-%NULL, this function always succeeds.

On connections without immortal handles, it is not possible to guarantee
that @handle remains valid without making asynchronous D-Bus calls, so
it might be necessary to delay processing of messages or other events
until a #TpContact can be constructed asynchronously, for instance by using
tp_connection_get_contacts_by_id().

Similarly, if @identifier is %NULL, it might not be possible to find the
identifier for @handle without making asynchronous D-Bus calls, so
it might be necessary to delay processing of messages or other events
until a #TpContact can be constructed asynchronously, for instance by using
tp_connection_get_contacts_by_handle().</doc>
        <source-position filename="contact.h" line="186"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1566">a contact or %NULL</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1543">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1544">a handle of type %TP_HANDLE_TYPE_CONTACT</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1545">the normalized identifier (XMPP JID, etc.)
 corresponding to @handle, or %NULL if not known</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_contact_info_supported_fields"
              c:identifier="tp_connection_dup_contact_info_supported_fields"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="491">Returns a newly allocated #GList of supported contact info fields for this
connection. The list must be freed with tp_contact_info_spec_list_free().

To wait for valid supported fields, call tp_proxy_prepare_async() with the
feature %TP_CONNECTION_FEATURE_CONTACT_INFO.

This property cannot change after @self goes to the Connected state.</doc>
        <source-position filename="connection.h" line="180"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="503">
 a #GList of #TpContactInfoFieldSpec struct, or %NULL if the feature is not
 yet prepared or the connection doesn't have the necessary properties.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ContactInfoFieldSpec"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="493">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_contact_list"
              c:identifier="tp_connection_dup_contact_list"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="757">Retrieves the user's contact list. In general, blocked contacts are not
included in this list. The #TpContact objects returned are guaranteed to
have all of the features previously passed to
tp_simple_client_factory_add_contact_features() prepared.

Before calling this method, you must first call tp_proxy_prepare_async() with
the %TP_CONNECTION_FEATURE_CONTACT_LIST feature, and verify that
#TpConnection:contact-list-state is set to %TP_CONTACT_LIST_STATE_SUCCESS.</doc>
        <source-position filename="connection-contact-list.h" line="54"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="770">
 a new #GPtrArray of #TpContact. Use g_ptr_array_unref() when done.</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Contact"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="759">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_detailed_error_vardict"
              c:identifier="tp_connection_dup_detailed_error_vardict"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3399">If the connection has disconnected, return the D-Bus error name with which
it disconnected (in particular, this is %TP_ERROR_STR_CANCELLED if it was
disconnected by a user request).

Otherwise, return %NULL, without altering @details.</doc>
        <source-position filename="connection.h" line="232"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3412">a D-Bus error name, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3401">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3402">
 optionally used to return a %G_VARIANT_TYPE_VARDICT with details
 of the error</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="tp_connection_get_account"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2470">Return the the #TpAccount associated with this connection. Will return %NULL
if @self was not acquired from a #TpAccount via tp_account_get_connection(),
or if the account object got finalized in the meantime (#TpConnection does
not keep a strong ref on its #TpAccount).</doc>
        <source-position filename="connection.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2479">the account associated with this connection, or
%NULL.</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2472">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_avatar_requirements"
              c:identifier="tp_connection_get_avatar_requirements"
              version="0.11.4">
        <doc xml:space="preserve"
             filename="connection-avatars.c"
             line="110">To wait for valid avatar requirements, call tp_proxy_prepare_async()
with the feature %TP_CONNECTION_FEATURE_AVATAR_REQUIREMENTS.

This property cannot change after @self goes to the Connected state.</doc>
        <source-position filename="connection.h" line="329"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-avatars.c"
               line="119">a #TpAvatarRequirements struct, or %NULL if the
 feature is not yet prepared or the connection doesn't have the necessary
 properties.</doc>
          <type name="AvatarRequirements" c:type="TpAvatarRequirements*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-avatars.c"
                 line="112">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_balance"
              c:identifier="tp_connection_get_balance"
              glib:get-property="balance"
              version="0.15.1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3570">If @self has a valid account balance, returns %TRUE and sets the variables
pointed to by @balance, @scale and @currency to the appropriate fields
of the Balance.AccountBalance property.

The monetary value of the balance is expressed as a fixed-point number,
@balance, with a decimal scale defined by @scale; for instance a @balance
of 1234 with @scale of 2 represents a value of "12.34" in the currency
represented by @currency.

Requires %TP_CONNECTION_FEATURE_BALANCE to be prepared.</doc>
        <source-position filename="connection.h" line="346"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3589">%TRUE if the balance is valid (and the values set), %FALSE if the
  balance is invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3572">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="balance"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3573">a pointer to store the account balance (or %NULL)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="scale"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3574">a pointer to store the balance scale (or %NULL)</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="currency"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3575">a pointer to store the balance
  currency (or %NULL)</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_balance_uri"
              c:identifier="tp_connection_get_balance_uri"
              glib:get-property="balance-uri"
              version="0.15.1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3621">The value of Balance.ManageCreditURI.

Requires %TP_CONNECTION_FEATURE_BALANCE to be prepared.</doc>
        <source-position filename="connection.h" line="349"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3629">the #TpConnection:balance-uri property.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3623">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_blocked_contacts"
              c:identifier="tp_connection_get_blocked_contacts"
              glib:get-property="blocked-contacts"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1929">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1935">the value of
#TpConnection:blocked-contacts</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Contact"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1931">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_change_contact_list"
              c:identifier="tp_connection_get_can_change_contact_list"
              glib:get-property="can-change-contact-list"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="721">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="727">the value of #TpConnection:can-change-contact-list property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="723">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="tp_connection_get_capabilities"
              glib:get-property="capabilities"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3298">&lt;!-- --&gt;</doc>
        <source-position filename="connection.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3304">the same #TpCapabilities as the
#TpConnection:capabilities property</doc>
          <type name="Capabilities" c:type="TpCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3300">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cm_name"
              c:identifier="tp_connection_get_cm_name"
              glib:get-property="cm-name"
              version="0.19.3">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2582">&lt;!-- --&gt;</doc>
        <source-position filename="connection.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2588">the same as the #TpConnection:cm-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2584">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection_manager_name"
              c:identifier="tp_connection_get_connection_manager_name"
              glib:get-property="connection-manager-name"
              version="0.13.16"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2562">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Use tp_connection_get_cm_name() instead.</doc-deprecated>
        <source-position filename="connection.h" line="155"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2568">the same as the #TpConnection:connection-manager-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2564">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_attributes"
              c:identifier="tp_connection_get_contact_attributes"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-handles.c"
             line="377">Return (via a callback) any number of attributes of the given handles.

Since telepathy-glib version 0.13.8,
the handles will remain valid until @connection becomes invalid
(signalled by #TpProxy::invalidated). In earlier versions, if @hold
was %TRUE, the callback would hold a reference to them which could be
released with tp_connection_unref_handles().

This is a thin wrapper around the GetContactAttributes D-Bus method, and
should be used in preference to
tp_cli_connection_interface_contacts_call_get_contact_attributes(); mixing this
function, tp_connection_hold_handles(), tp_connection_unref_handles(), and
#TpContact with direct use of the RequestHandles, HoldHandles and
GetContactAttributes D-Bus methods is unwise, as #TpConnection and
#TpContact perform client-side reference counting of handles.
The #TpContact API provides a higher-level abstraction which should
usually be used instead.

@callback will later be called with the attributes of those of the given
handles that were valid. Invalid handles are simply omitted from the
parameter to the callback.

If @hold is %TRUE, the @callback is given one reference to each handle
that appears as a key in the callback's @attributes parameter.</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_contact() instead.</doc-deprecated>
        <source-position filename="connection.h" line="371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="379">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="380">the timeout in milliseconds, or -1 to use the default</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="n_handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="381">the number of handles in @handles (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="382">an array of handles</doc>
            <array length="1" zero-terminated="0" c:type="const TpHandle*">
              <type name="Handle" c:type="TpHandle"/>
            </array>
          </parameter>
          <parameter name="interfaces" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="383">a #GStrv of interfaces</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="hold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="384">if %TRUE, the callback will hold one reference to each valid handle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="385">called on success or
 failure (unless @weak_object has become unreferenced)</doc>
            <type name="GObject.Callback"
                  c:type="tp_cli_connection_interface_contacts_callback_for_get_contact_attributes"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="387">arbitrary user-supplied data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="388">called to destroy @user_data after calling @callback, or when
 @weak_object becomes unreferenced (whichever occurs sooner)</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="390">if not %NULL, an object to be weakly referenced: if it is
 destroyed, @callback will not be called</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_contact_groups"
              c:identifier="tp_connection_get_contact_groups"
              glib:get-property="contact-groups"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1127">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1133">the value of
 #TpConnection:contact-groups</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1129">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_info_flags"
              c:identifier="tp_connection_get_contact_info_flags"
              version="0.11.7">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="437">Returns the flags describing how contact info (vCards) behaves on this
connection

To wait for valid contact info flags, call tp_proxy_prepare_async()
with the feature %TP_CONNECTION_FEATURE_CONTACT_INFO.

This property cannot change after @self goes to the Connected state.</doc>
        <source-position filename="connection.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="449">a set of #TpContactInfoFlags</doc>
          <type name="ContactInfoFlags" c:type="TpContactInfoFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="439">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_info_supported_fields"
              c:identifier="tp_connection_get_contact_info_supported_fields"
              version="0.11.7"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="460">Returns a newly allocated #GList of supported contact info fields for this
connection. The list must be freed with g_list_free() after used.

Note that the #TpContactInfoFieldSpec&lt;!-- --&gt;s in the returned #GList are not
dupped before returning from this function. One could copy every item in the
list using tp_contact_info_field_spec_copy().

To wait for valid supported fields, call tp_proxy_prepare_async() with the
feature %TP_CONNECTION_FEATURE_CONTACT_INFO.

This property cannot change after @self goes to the Connected state.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_connection_dup_contact_info_supported_fields() instead.</doc-deprecated>
        <source-position filename="connection.h" line="176"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="476">
 a #GList of #TpContactInfoFieldSpec struct, or %NULL if the feature is not
 yet prepared or the connection doesn't have the necessary properties.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ContactInfoFieldSpec"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="462">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_list_attributes"
              c:identifier="tp_connection_get_contact_list_attributes"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-handles.c"
             line="456">Return (via a callback) the contacts on the contact list and any number of
their attributes.

Since telepathy-glib version 0.13.8,
the handles will remain valid until @connection becomes invalid
(signalled by #TpProxy::invalidated). In earlier versions, if @hold
was %TRUE, the callback would hold a reference to them which could be
released with tp_connection_unref_handles().

This is a thin wrapper around the RequestContactList D-Bus method,
and should be used in preference to lower-level functions; it is similar
to tp_connection_get_contact_attributes().

The #TpContact API provides a higher-level abstraction which should
usually be used instead.

If @hold is %TRUE, the @callback is given a reference to each handle
that appears as a key in the callback's @attributes parameter.</doc>
        <doc-deprecated xml:space="preserve">Use tp_connection_dup_contact_list() instead.</doc-deprecated>
        <source-position filename="connection.h" line="378"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="458">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="459">the timeout in milliseconds (using a large timeout is
 recommended)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="interfaces" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="461">a #GStrv of interfaces</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="hold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="462">if %TRUE, the callback will hold one reference to each handle it
 receives</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="464">called on success or
 failure (unless @weak_object has become unreferenced)</doc>
            <type name="GObject.Callback"
                  c:type="tp_cli_connection_interface_contacts_callback_for_get_contact_attributes"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="466">arbitrary user-supplied data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="467">called to destroy @user_data after calling @callback, or when
 @weak_object becomes unreferenced (whichever occurs sooner)</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="469">if not %NULL, an object to be weakly referenced: if it is
 destroyed, @callback will not be called</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_contact_list_persists"
              c:identifier="tp_connection_get_contact_list_persists"
              glib:get-property="contact-list-persists"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="703">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="709">the value of #TpConnection:contact-list-persists property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="705">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_list_state"
              c:identifier="tp_connection_get_contact_list_state"
              glib:get-property="contact-list-state"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="685">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="691">the value of #TpConnection:contact-list-state property</doc>
          <type name="ContactListState" c:type="TpContactListState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="687">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contacts_by_handle"
              c:identifier="tp_connection_get_contacts_by_handle"
              version="0.7.18"
              deprecated="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="4493">Create a number of #TpContact objects and make asynchronous method calls
to hold their handles and ensure that all the features specified in
@features are ready for use (if they are supported at all).

It is not an error to put features in @features even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_contact() instead.</doc-deprecated>
        <source-position filename="contact.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4495">A connection, which must have the %TP_CONNECTION_FEATURE_CONNECTED
 feature prepared</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4497">The number of handles in @handles (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4498">An array of handles
 of type %TP_HANDLE_TYPE_CONTACT representing the desired contacts</doc>
            <array length="0" zero-terminated="0" c:type="const TpHandle*">
              <type name="guint"/>
            </array>
          </parameter>
          <parameter name="n_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4500">The number of features in @features (may be 0)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4501">An array of features that
 must be ready for use (if supported) before the callback is called (may
 be %NULL if @n_features is 0)</doc>
            <array length="2"
                   zero-terminated="0"
                   c:type="const TpContactFeature*">
              <type name="guint"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4504">A user callback to call when the contacts are ready</doc>
            <type name="ConnectionContactsByHandleCb"
                  c:type="TpConnectionContactsByHandleCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4505">Data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4506">Called to destroy @user_data either after @callback has been
 called, or if the operation is cancelled</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4508">An object to pass to the callback, which will be
 weakly referenced; if this object is destroyed, the operation will be
 cancelled</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_contacts_by_id"
              c:identifier="tp_connection_get_contacts_by_id"
              version="0.7.18"
              deprecated="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="4837">Create a number of #TpContact objects and make asynchronous method calls
to obtain their handles and ensure that all the features specified in
@features are ready for use (if they are supported at all).

It is not an error to put features in @features even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</doc>
        <doc-deprecated xml:space="preserve">Use tp_connection_dup_contact_by_id_async() instead.</doc-deprecated>
        <source-position filename="contact.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4839">A connection, which must have the %TP_CONNECTION_FEATURE_CONNECTED
 feature prepared</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4841">The number of IDs in @ids (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4842">An array of strings representing
 the desired contacts by their
 identifiers in the IM protocol (XMPP JIDs, SIP URIs, MSN Passports,
 AOL screen-names etc.)</doc>
            <array length="0" zero-terminated="0" c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="n_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4846">The number of features in @features (may be 0)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4847">An array of features
 that must be ready for use (if supported)
 before the callback is called (may be %NULL if @n_features is 0)</doc>
            <array length="2"
                   zero-terminated="0"
                   c:type="const TpContactFeature*">
              <type name="ContactFeature" c:type="TpContactFeature"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4850">A user callback to call when the contacts are ready</doc>
            <type name="ConnectionContactsByIdCb"
                  c:type="TpConnectionContactsByIdCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4851">Data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4852">Called to destroy @user_data either after @callback has been
 called, or if the operation is cancelled</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4854">An object to pass to the callback, which will
 be weakly referenced; if this object is destroyed, the operation will be
 cancelled</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_detailed_error"
              c:identifier="tp_connection_get_detailed_error"
              version="0.11.4">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3316">If the connection has disconnected, return the D-Bus error name with which
it disconnected (in particular, this is %TP_ERROR_STR_CANCELLED if it was
disconnected by a user request).

Otherwise, return %NULL, without altering @details.</doc>
        <source-position filename="connection.h" line="229"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3329">a D-Bus error name, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3318">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="details"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="none"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3319">
 optionally used to return a map from string to #GValue, which must not be
 modified or destroyed by the caller</doc>
            <type name="GLib.HashTable" c:type="const GHashTable**">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_disjoint_groups"
              c:identifier="tp_connection_get_disjoint_groups"
              glib:get-property="disjoint-groups"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1090">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1096">the value of #TpConnection:disjoint-groups</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1092">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_group_storage"
              c:identifier="tp_connection_get_group_storage"
              glib:get-property="group-storage"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1108">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1114">the value of #TpConnection:group-storage</doc>
          <type name="ContactMetadataStorageType"
                c:type="TpContactMetadataStorageType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1110">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol_name"
              c:identifier="tp_connection_get_protocol_name"
              glib:get-property="protocol-name"
              version="0.13.16">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2601">&lt;!-- --&gt;</doc>
        <source-position filename="connection.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2607">the same as the #TpConnection:protocol-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2603">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_request_uses_message"
              c:identifier="tp_connection_get_request_uses_message"
              glib:get-property="request-uses-message"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="739">&lt;!-- --&gt;</doc>
        <source-position filename="connection-contact-list.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="745">the value of #TpConnection:request-uses-message property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="741">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_self_contact"
              c:identifier="tp_connection_get_self_contact"
              glib:get-property="self-contact"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3509">Return a #TpContact representing the local user on this connection.

The returned object is not necessarily valid after the main loop is
re-entered; ref it with g_object_ref() if you want to keep it.</doc>
        <source-position filename="connection.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3518">the value of the TpConnection:self-contact
 property, which may be %NULL</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3511">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_self_handle"
              c:identifier="tp_connection_get_self_handle"
              glib:get-property="self-handle"
              version="0.7.26"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2507">Return the %TP_HANDLE_TYPE_CONTACT handle of the local user on this
connection, or 0 if the self-handle is not known yet or the connection
has become invalid (the TpProxy::invalidated signal).

The returned handle is not necessarily valid forever (the
notify::self-handle signal will be emitted if it changes, which can happen
on protocols such as IRC). Construct a #TpContact object if you want to
track the local user's identifier in the protocol, or other information
like their presence status, over time.</doc>
        <doc-deprecated xml:space="preserve">Use tp_connection_get_self_contact() instead.</doc-deprecated>
        <source-position filename="connection.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2521">the value of the TpConnection:self-handle property</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2509">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_status"
              c:identifier="tp_connection_get_status"
              glib:get-property="status"
              version="0.7.14">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2537">If @reason is not %NULL it is set to the reason why "status" changed to its
current value, or %TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED if unknown.</doc>
        <source-position filename="connection.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2545">This connection's status, or %TP_UNKNOWN_CONNECTION_STATUS if we
don't know yet.</doc>
          <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2539">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2540">a TpConnectionStatusReason, or %NULL</doc>
            <type name="ConnectionStatusReason"
                  c:type="TpConnectionStatusReason*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_immortal_handles"
              c:identifier="tp_connection_has_immortal_handles">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3488">Return %TRUE if this connection is known to not destroy handles
(#TpHandle) until it disconnects.

On such connections, if you know that a handle maps to a particular
identifier now, then you can rely on that handle mapping to that
identifier for the whole lifetime of the connection.</doc>
        <source-position filename="connection.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3499">%TRUE if handles last as long as the connection itself</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3490">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="hold_handles"
              c:identifier="tp_connection_hold_handles"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-handles.c"
             line="140">Hold (ensure a reference to) the given handles, if they are valid.

If they are valid, the callback will later be called with the given
handles; if not all of them are valid, the callback will be called with
an error.

This function, along with tp_connection_unref_handles(),
tp_connection_get_contact_attributes() and #TpContact, keeps a client-side
reference count of handles; you should not use the RequestHandles,
HoldHandles and GetContactAttributes D-Bus methods directly as well as these
functions.</doc>
        <doc-deprecated xml:space="preserve">Holding handles is not needed with Connection Managers having
 immortal handles (any Connection Manager using telepathy-glib &gt;= 0.13.8).
 Other Connection Managers are considered deprecated, clients wanting to
 still support them should continue using this deprecated function.</doc-deprecated>
        <source-position filename="connection.h" line="268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="142">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="143">the timeout in milliseconds, or -1 to use the default</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="144">the handle type</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="n_handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="145">the number of handles in @handles (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="146">an array of handles</doc>
            <array length="2" zero-terminated="0" c:type="const TpHandle*">
              <type name="Handle" c:type="TpHandle"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="147">called on success or failure (unless @weak_object has become
 unreferenced)</doc>
            <type name="ConnectionHoldHandlesCb"
                  c:type="TpConnectionHoldHandlesCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="149">arbitrary user-supplied data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="150">called to destroy @user_data after calling @callback, or when
 @weak_object becomes unreferenced (whichever occurs sooner)</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="152">if not %NULL, an object to be weakly referenced: if it is
 destroyed, @callback will not be called</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ready"
              c:identifier="tp_connection_is_ready"
              version="0.7.17"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.17.6">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3279">Returns the same thing as the #TpConnection:connection-ready property.</doc>
        <doc-deprecated xml:space="preserve">use tp_proxy_is_prepared() with
 %TP_CONNECTION_FEATURE_CONNECTED</doc-deprecated>
        <source-position filename="connection.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3285">%TRUE if introspection has completed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3281">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="parse_object_path"
              c:identifier="tp_connection_parse_object_path"
              version="0.7.27"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="3193">If the object path of @connection is in the correct form, set
@protocol and @cm_name, return TRUE. Otherwise leave them unchanged and
return FALSE.</doc>
        <doc-deprecated xml:space="preserve">Use tp_connection_get_protocol_name() and
 tp_connection_get_connection_manager_name() instead.</doc-deprecated>
        <source-position filename="connection.h" line="224"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3205">TRUE if the object path was correctly parsed, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3195">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="protocol"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3196">If not NULL, used to return the protocol
 of the connection</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cm_name"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="3198">If not NULL, used to return the connection
 manager name of the connection</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_contact_info"
              c:identifier="tp_connection_refresh_contact_info"
              version="0.11.7">
        <doc xml:space="preserve"
             filename="contact.c"
             line="3546">Requests to refresh the #TpContact:contact-info property on each contact from
@contacts, requesting it from the network if an up-to-date version is not
cached locally. "notify::contact-info" will be emitted when the contact's
information are updated.

If %TP_CONTACT_FEATURE_CONTACT_INFO is not yet set on a contact, it will be
set before its property gets updated.</doc>
        <source-position filename="contact.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3548">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3549">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3550">An array of #TpContact objects
 associated with @self</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="remove_contacts_async"
              c:identifier="tp_connection_remove_contacts_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="925">Remove the given @contacts from the contact list entirely. It is
protocol-dependent whether this works, and under which circumstances.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST.</doc>
        <source-position filename="connection-contact-list.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="927">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="928">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="929">An array of #TpContact objects to
 remove</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="931">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="932">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_contacts_finish"
              c:identifier="tp_connection_remove_contacts_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="952">Finishes tp_connection_remove_contacts_async()</doc>
        <source-position filename="connection-contact-list.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="960">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="954">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="955">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_from_group_async"
              c:identifier="tp_connection_remove_from_group_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1265">Remove the given @contacts from the given @group. If there are no members
left in the group afterwards, the group MAY itself be removed.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS.</doc>
        <source-position filename="connection-contact-list.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1267">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1268">the group to alter.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1269">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1270">An array of #TpContact objects to
 remove from the group.</doc>
            <array length="1" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1272">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1273">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_from_group_finish"
              c:identifier="tp_connection_remove_from_group_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1294">Finishes tp_connection_remove_from_group_async()</doc>
        <source-position filename="connection-contact-list.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1302">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1296">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1297">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_group_async"
              c:identifier="tp_connection_remove_group_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1314">Remove all members from the given group, then remove the group itself.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS.</doc>
        <source-position filename="connection-contact-list.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1316">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1317">the group to remove.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1318">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1319">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_group_finish"
              c:identifier="tp_connection_remove_group_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1346">Finishes tp_connection_remove_group_async()</doc>
        <source-position filename="connection-contact-list.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1354">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1348">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1349">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_group_async"
              c:identifier="tp_connection_rename_group_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1366">Rename the given @old_name.

On protocols where groups behave like tags, this is an API short-cut for
adding all of the group's members to a group with the new name, then removing
the old group.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS.</doc>
        <source-position filename="connection-contact-list.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1368">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1369">the group to rename</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1370">the new name for the group</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1371">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1372">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="rename_group_finish"
              c:identifier="tp_connection_rename_group_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1405">Finishes tp_connection_rename_group_async()</doc>
        <source-position filename="connection-contact-list.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1413">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1407">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1408">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_handles"
              c:identifier="tp_connection_request_handles"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-handles.c"
             line="320">Request the handles corresponding to the given identifiers, and if they
are valid, hold (ensure a reference to) the corresponding handles.

If they are valid, the callback will later be called with the given
handles; if not all of them are valid, the callback will be called with
an error.</doc>
        <doc-deprecated xml:space="preserve">If @handle_type is TP_HANDLE_TYPE_CONTACT, use
 tp_connection_dup_contact_by_id_async() instead. For channel requests,
 use tp_account_channel_request_set_target_id() instead.</doc-deprecated>
        <source-position filename="connection.h" line="279"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="322">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="323">the timeout in milliseconds, or -1 to use the default</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="324">the handle type</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="ids" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="325">an array of string identifiers for which
 handles are required, terminated by %NULL (must not be %NULL or empty)</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="327">called on success or failure (unless @weak_object has become
 unreferenced)</doc>
            <type name="ConnectionRequestHandlesCb"
                  c:type="TpConnectionRequestHandlesCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="329">arbitrary user-supplied data</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="330">called to destroy @user_data after calling @callback, or when
 @weak_object becomes unreferenced (whichever occurs sooner)</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="332">if not %NULL, an object to be weakly referenced: if it is
 destroyed, @callback will not be called</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_subscription_async"
              c:identifier="tp_connection_request_subscription_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="826">Request that the given @contacts allow the local user to subscribe to their
presence, i.e. that their #TpContact:subscribe-state property becomes
%TP_SUBSCRIPTION_STATE_YES.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST.</doc>
        <source-position filename="connection-contact-list.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="828">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="829">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="830">An array of #TpContact objects to whom
 requests are to be sent.</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="832">an optional plain-text message from the user, to send to those
 @contacts with the subscription request.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="834">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="835">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_subscription_finish"
              c:identifier="tp_connection_request_subscription_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="857">Finishes tp_connection_request_subscription_async()</doc>
        <source-position filename="connection-contact-list.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="865">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="859">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="860">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="run_until_ready"
              c:identifier="tp_connection_run_until_ready"
              version="0.7.1"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.11.0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2620">If @self is connected and ready for use, return immediately. Otherwise,
call Connect() (unless @connect is %FALSE) and re-enter the main loop
until the connection becomes invalid, the connection connects successfully
and is introspected, or the main loop stored via @loop is cancelled.</doc>
        <doc-deprecated xml:space="preserve">Use tp_proxy_prepare_async() and re-enter the main
 loop yourself, or restructure your program in such a way as to avoid
 re-entering the main loop.</doc-deprecated>
        <source-position filename="connection.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2635">%TRUE if the connection is now connected and ready for use,
 %FALSE if the connection has become invalid.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2622">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="connect" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2623">if %TRUE, call Connect() if it appears to be necessary;
 if %FALSE, rely on Connect() to be called by another client</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2625">if not %NULL and %FALSE is returned, used to raise an error</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="loop" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2626">if not %NULL, a #GMainLoop is placed here while it is being run
 (so calling code can call g_main_loop_quit() to abort), and %NULL is
 placed here after the loop has been run</doc>
            <type name="GLib.MainLoop" c:type="GMainLoop**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contact_info_async"
              c:identifier="tp_connection_set_contact_info_async"
              version="0.11.7">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="534">Requests an asynchronous set of the contact info of @self. When
the operation is finished, @callback will be called. You can then call
tp_connection_set_contact_info_finish() to get the result of the operation.

This method should not be expected to succeed if the result of
tp_connection_get_contact_info_flags() does not include
%TP_CONTACT_INFO_FLAG_CAN_SET.</doc>
        <source-position filename="connection.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="536">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="537">a #GList of
 #TpContactInfoField</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="ContactInfoField"/>
            </type>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="539">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="540">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contact_info_finish"
              c:identifier="tp_connection_set_contact_info_finish"
              version="0.11.7"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="588">Finishes an async set of @self info.</doc>
        <source-position filename="connection.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="596">%TRUE if the request call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="590">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="591">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group_members_async"
              c:identifier="tp_connection_set_group_members_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1168">Add the given @contacts to the given @group (creating it if necessary), and
remove all other members.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS.</doc>
        <source-position filename="connection-contact-list.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1170">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1171">the group to alter.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1172">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1173">An array of #TpContact objects members
 for the group. If this set is empty, this method MAY remove the group.</doc>
            <array length="1" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1175">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1176">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_group_members_finish"
              c:identifier="tp_connection_set_group_members_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1197">Finishes tp_connection_set_group_members_async()</doc>
        <source-position filename="connection-contact-list.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1205">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1199">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1200">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock_contacts_async"
              c:identifier="tp_connection_unblock_contacts_async"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1492">Direct the server to unblock @contacts.</doc>
        <source-position filename="connection-contact-list.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1494">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1495">the number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1496">An array of #TpContact objects to
 block</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1498">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1499">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock_contacts_finish"
              c:identifier="tp_connection_unblock_contacts_finish"
              version="0.17.0"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1531">Finishes tp_connection_unblock_contacts_async()</doc>
        <source-position filename="connection-contact-list.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1539">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1533">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1534">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpublish_async"
              c:identifier="tp_connection_unpublish_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1019">Attempt to set the given @contacts' #TpContact:publish-state property to
%TP_SUBSCRIPTION_STATE_NO, i.e. stop sending presence to them.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST.</doc>
        <source-position filename="connection-contact-list.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1021">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1022">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1023">An array of #TpContact objects to
 remove</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1025">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1026">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpublish_finish"
              c:identifier="tp_connection_unpublish_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="1046">Finishes tp_connection_unpublish_async()</doc>
        <source-position filename="connection-contact-list.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1054">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1048">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1049">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unref_handles"
              c:identifier="tp_connection_unref_handles"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-handles.c"
             line="31">Do nothing. In versions of telepathy-glib prior to 0.13.8,
this released a reference to the handles in @handles.</doc>
        <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
        <source-position filename="connection.h" line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="33">a connection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="34">a handle type</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="n_handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="35">the number of handles in @handles</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-handles.c"
                 line="36">an array of @n_handles handles</doc>
            <array length="1" zero-terminated="0" c:type="const TpHandle*">
              <type name="Handle" c:type="TpHandle"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_async"
              c:identifier="tp_connection_unsubscribe_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="972">Attempt to set the given @contacts' #TpContact:subscribe-state property to
%TP_SUBSCRIPTION_STATE_NO, i.e. stop receiving their presence.

For this to work properly @self must have interface
%TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST.</doc>
        <source-position filename="connection-contact-list.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="974">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="975">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="976">An array of #TpContact objects to
 remove</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="978">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="979">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_finish"
              c:identifier="tp_connection_unsubscribe_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="connection-contact-list.c"
             line="999">Finishes tp_connection_unsubscribe_async()</doc>
        <source-position filename="connection-contact-list.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-list.c"
               line="1007">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1001">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-list.c"
                 line="1002">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_contacts"
              c:identifier="tp_connection_upgrade_contacts"
              version="0.7.18"
              deprecated="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="4619">Given several #TpContact objects, make asynchronous method calls
ensure that all the features specified in @features are ready for use
(if they are supported at all).

It is not an error to put features in @features even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</doc>
        <doc-deprecated xml:space="preserve">Use tp_connection_upgrade_contacts_async() instead.</doc-deprecated>
        <source-position filename="contact.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4621">A connection, which must have the %TP_CONNECTION_FEATURE_CONNECTED
 feature prepared</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4623">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4624">An array of #TpContact objects
 associated with @self</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="n_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4626">The number of features in @features (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4627">An array of features that must be
 ready for use (if supported) before the callback is called</doc>
            <array length="2"
                   zero-terminated="0"
                   c:type="const TpContactFeature*">
              <type name="ContactFeature" c:type="TpContactFeature"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4629">A user callback to call when the contacts are ready</doc>
            <type name="ConnectionUpgradeContactsCb"
                  c:type="TpConnectionUpgradeContactsCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4630">Data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4631">Called to destroy @user_data either after @callback has been
 called, or if the operation is cancelled</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="4633">An object to pass to the callback, which will be
 weakly referenced; if this object is destroyed, the operation will be
 cancelled</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_contacts_async"
              c:identifier="tp_connection_upgrade_contacts_async"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="5077">Given several #TpContact objects, make asynchronous method calls
ensure that all the features specified in @features are ready for use
(if they are supported at all).

It is not an error to put features in @features even if the connection
manager doesn't support them - users of this method should have a static
list of features they would like to use if possible, and use it for all
connection managers.</doc>
        <source-position filename="contact.h" line="202"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5079">A connection, which must have the %TP_CONNECTION_FEATURE_CONNECTED
 feature prepared</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5081">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5082">An array of #TpContact objects
 associated with @self</doc>
            <array length="0" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="n_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5084">The number of features in @features (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5085">An array of features that must be
 ready for use (if supported) before the callback is called</doc>
            <array length="2"
                   zero-terminated="0"
                   c:type="const TpContactFeature*">
              <type name="ContactFeature" c:type="TpContactFeature"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5087">A user callback to call when the contacts are ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5088">Data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_contacts_finish"
              c:identifier="tp_connection_upgrade_contacts_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="5124">Finishes tp_connection_upgrade_contacts_async().</doc>
        <source-position filename="contact.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="5134">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5126">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5127">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="contacts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5128">
 a location to set a #GPtrArray of upgraded #TpContact, or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Contact"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="balance"
                transfer-ownership="none"
                getter="get_balance"
                default-value="0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1935">The Amount field of the Balance.AccountBalance property.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_BALANCE.

See Also: tp_connection_get_balance()</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="balance-currency"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1969">The Currency field of the Balance.AccountBalance property.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_BALANCE.

See Also: tp_connection_get_balance()</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="balance-scale"
                transfer-ownership="none"
                default-value="4294967295">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1952">The Scale field of the Balance.AccountBalance property.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_BALANCE.

See Also: tp_connection_get_balance()</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="balance-uri"
                transfer-ownership="none"
                getter="get_balance_uri"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1986">The Balance.ManageCreditURI property.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_BALANCE.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="blocked-contacts"
                version="0.17.0"
                transfer-ownership="none"
                getter="get_blocked_contacts">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2202">A #GPtrArray of blocked #TpContact. Changes are notified using the
#TpConnection::blocked-contacts-changed signal.

These TpContact objects have been prepared with the desired features.
See tp_simple_client_factory_add_contact_features() to define which
features needs to be prepared on them.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_BLOCKING.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="can-change-contact-list"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_can_change_contact_list"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2065">If true, presence subscription and publication can be changed using the
RequestSubscription, AuthorizePublication and RemoveContacts methods.

Rational: link-local XMPP, presence is implicitly published to everyone in
the local subnet, so the user cannot control their presence publication.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_LIST_PROPERTIES or
%TP_CONNECTION_FEATURE_CONTACT_LIST.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-report-abusive"
                version="0.17.0"
                transfer-ownership="none"
                getter="can_report_abusive"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2181">If this property is %TRUE, contacts may be reported as abusive to the
server administrators by setting report_abusive to %TRUE when calling
tp_connection_block_contacts_async().

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_BLOCKING.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="capabilities"
                transfer-ownership="none"
                getter="get_capabilities">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1919">The %TpCapabilities object representing the capabilities of this
connection, or NULL if we don't know yet.

To wait for valid capability information, call tp_proxy_prepare_async()
with the feature %TP_CONNECTION_FEATURE_CAPABILITIES.</doc>
        <type name="Capabilities"/>
      </property>
      <property name="cm-name"
                version="0.19.3"
                transfer-ownership="none"
                getter="get_cm_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1799">This connection's connection manager name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connection-manager-name"
                version="0.13.16"
                deprecated="1"
                transfer-ownership="none"
                getter="get_connection_manager_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1784">This connection's connection manager name.</doc>
        <doc-deprecated xml:space="preserve">Use #TpConnection:cm-name instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connection-ready"
                deprecated="1"
                deprecated-version="0.17.6"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1895">Initially %FALSE; changes to %TRUE when the connection has gone to
CONNECTED status, introspection has finished and it's ready for use.

By the time this property becomes %TRUE, any extra interfaces will
have been set up and the #TpProxy:interfaces property will have been
populated.

This is similar to %TP_CONNECTION_FEATURE_CONNECTED, except that once
it has changed to %TRUE, it remains %TRUE even if the connection has
been invalidated.</doc>
        <doc-deprecated xml:space="preserve">use tp_proxy_is_prepared() with
 %TP_CHANNEL_FEATURE_CONNECTED for checks, or tp_proxy_prepare_async() for
 notification</doc-deprecated>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="contact-groups"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_contact_groups">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2156">The names of all groups that currently exist. This may be a larger set than
the union of all #TpContact:contact-groups properties, if the connection
allows groups to be empty.

This property's value is not meaningful until the
#TpConnection:contact-list-state property has become
%TP_CONTACT_LIST_STATE_SUCCESS.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_GROUPS.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="contact-list-persists"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_contact_list_persists"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2043">If true, presence subscriptions (in both directions) on this connection are
stored by the server or other infrastructure.

If false, presence subscriptions on this connection are not stored.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_LIST_PROPERTIES or
%TP_CONNECTION_FEATURE_CONTACT_LIST.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="contact-list-state"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_contact_list_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2024">The progress made in retrieving the contact list.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_LIST_PROPERTIES or
%TP_CONNECTION_FEATURE_CONTACT_LIST.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="disjoint-groups"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_disjoint_groups"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2111">True if each contact can be in at most one group; false if each contact
can be in many groups.

This property cannot change after the connection has moved to the
%TP_CONNECTION_STATUS_CONNECTED state. Until then, its value is undefined,
and it may change at any time, without notification.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_GROUPS.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="group-storage"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_group_storage"
                default-value="0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2134">Indicates the extent to which contacts' groups can be set and stored.

This property cannot change after the connection has moved to the
%TP_CONNECTION_STATUS_CONNECTED state. Until then, its value is undefined,
and it may change at any time, without notification.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_GROUPS.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="protocol-name"
                version="0.13.16"
                transfer-ownership="none"
                getter="get_protocol_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1813">The connection's machine-readable protocol name, such as "jabber",
"msn" or "local-xmpp". Recommended names for most protocols can be
found in the Telepathy D-Bus Interface Specification.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="request-uses-message"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_request_uses_message"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2088">If true, the Message parameter to RequestSubscription is likely to be
significant, and user interfaces SHOULD prompt the user for a message to
send with the request; a message such as "I would like to add you to my
contact list", translated into the local user's language, might make a
suitable default.

For this property to be valid, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_LIST_PROPERTIES or
%TP_CONNECTION_FEATURE_CONTACT_LIST.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="self-contact"
                version="0.13.9"
                transfer-ownership="none"
                getter="get_self_contact">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1853">A #TpContact representing the local user on this connection,
or %NULL if not yet available.

If the local user's unique identifier changes (for instance by using
/nick on IRC), this property will change to a different #TpContact object
representing the new identifier, and #GObject::notify will be emitted.

The #TpContact object is guaranteed to have all of the features previously
passed to tp_simple_client_factory_add_contact_features() prepared.

To wait for a non-%NULL self-contact (and other properties), call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONNECTED.</doc>
        <type name="Contact"/>
      </property>
      <property name="self-handle"
                deprecated="1"
                transfer-ownership="none"
                getter="get_self_handle"
                default-value="0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1830">The %TP_HANDLE_TYPE_CONTACT handle of the local user on this connection,
or 0 if we don't know yet or if the connection has become invalid.

This may change if the local user's unique identifier changes (for
instance by using /nick on IRC), in which case #GObject::notify will be
emitted.

To wait for a valid self-handle (and other properties), call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONNECTED.</doc>
        <doc-deprecated xml:space="preserve">Use #TpConnection:self-contact instead.</doc-deprecated>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="status"
                transfer-ownership="none"
                getter="get_status"
                default-value="4294967295">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1764">This connection's status, or %TP_UNKNOWN_CONNECTION_STATUS if we don't
know yet.

To wait for a valid status (and other properties), call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_CORE.

Since version 0.11.3, the change to status
%TP_CONNECTION_STATUS_CONNECTED is delayed slightly, until introspection
of the connection has finished.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="status-reason"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="1878">To wait for a valid status (and other properties), call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_CORE.

The reason why #TpConnection:status changed to its current value,
or TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED if unknown.
know yet.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ConnectionPrivate" c:type="TpConnectionPrivate*"/>
      </field>
      <glib:signal name="balance-changed"
                   when="last"
                   detailed="1"
                   version="0.15.1">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2001">Emitted when at least one of the #TpConnection:balance,
#TpConnection:balance-scale or #TpConnection:balance-currency
property is changed.

For this signal to be emitted, you must first call
tp_proxy_prepare_async() with the feature %TP_CONNECTION_FEATURE_BALANCE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="balance" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2004">the value of the #TpConnection:balance property</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="balance_scale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2005">the value of the #TpConnection:balance-scale property</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="balance_currency" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2006">the value of the #TpConnection:balance-currency property</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="blocked-contacts-changed"
                   when="last"
                   version="0.17.0">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2338">Notify of changes in #TpConnection:blocked-contacts.
 It is guaranteed that all contacts have desired features prepared. See
tp_simple_client_factory_add_contact_features() to define which features
needs to be prepared.

This signal is also emitted for the initial set of blocked contacts once
retrieved.

For this signal to be emitted, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_BLOCKING.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2341">
 a #GPtrArray of #TpContact which have been blocked</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2343">
 a #GPtrArray of #TpContact which are no longer blocked</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="contact-list-changed" when="last" version="0.15.5">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2308">Notify of changes in the list of contacts as returned by
tp_connection_dup_contact_list(). It is guaranteed that all contacts have
desired features prepared. See
tp_simple_client_factory_add_contact_features() to define which features
needs to be prepared.

This signal is also emitted for the initial set of contacts once retrieved.

For this signal to be emitted, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_LIST.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2311">
 a #GPtrArray of #TpContact added to contacts list</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2313">
 a #GPtrArray of #TpContact removed from contacts list</doc>
            <array name="GLib.PtrArray">
              <type name="Contact"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="group-renamed" when="last" version="0.15.5">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2275">Emitted when a group is renamed, in protocols where this can be
distinguished from group creation, removal and membership changes.

Immediately after this signal is emitted, #TpConnection::groups-created
signal the creation of a group with the new name, and
#TpConnection::groups-removed signal the removal of a group with the old
name.
If the group was not empty, immediately after those signals are emitted,
#TpContact::contact-groups-changed signal that the members of that group
were removed from the old name and added to the new name.

When this signal is emitted, #TpConnection:contact-groups property is
already updated.

For this signal to be emited, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_GROUPS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="old_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2278">the old name of the group.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="new_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2279">the new name of the group.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="groups-created" when="last" version="0.15.5">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2226">Emitted when new, empty groups are created. This will often be followed by
#TpContact::contact-groups-changed signals that add some members. When this
signal is emitted, #TpConnection:contact-groups property is already
updated.

For this signal to be emited, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_GROUPS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2229">a #GStrv with the names of the new groups.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="groups-removed" when="last" version="0.15.5">
        <doc xml:space="preserve"
             filename="connection.c"
             line="2250">Emitted when one or more groups are removed. If they had members at the
time that they were removed, then immediately after this signal is emitted,
#TpContact::contact-groups-changed signals that their members were removed.
When this signal is emitted, #TpConnection:contact-groups property is
already updated.

For this signal to be emited, you must first call
tp_proxy_prepare_async() with the feature
%TP_CONNECTION_FEATURE_CONTACT_GROUPS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection.c"
                 line="2253">A #GStrv with the names of the groups.</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="ConnectionAliasFlags" c:type="TpConnectionAliasFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="89">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="61"/>
      <member name="connection_alias_flag_user_set"
              value="1"
              c:identifier="TP_CONNECTION_ALIAS_FLAG_USER_SET">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="91">&lt;![CDATA[           The aliases of contacts on this connection may be changed by the             user of the service, not just by the contacts themselves. This is             the case on Jabber, for instance.           It is possible that aliases can be changed by the contacts too -             which alias takes precedence is not defined by this             specification, and depends on the server and/or connection manager             implementation.           This flag only applies to the aliases of "globally valid" contact             handles. At this time, clients should not expect to be able to             change the aliases corresponding to any channel-specific             handles. If this becomes possible in future, a new flag will             be defined.         ]]&gt;</doc>
      </member>
    </bitfield>
    <bitfield name="ConnectionCapabilityFlags"
              c:type="TpConnectionCapabilityFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="105">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="72"/>
      <member name="create"
              value="1"
              c:identifier="TP_CONNECTION_CAPABILITY_FLAG_CREATE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="107">&lt;![CDATA[           The given channel type and handle can be given to RequestChannel           to create a new channel of this type.         ]]&gt;</doc>
      </member>
      <member name="invite"
              value="2"
              c:identifier="TP_CONNECTION_CAPABILITY_FLAG_INVITE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="108">&lt;![CDATA[           The given contact can be invited to an existing channel of this type.         ]]&gt;</doc>
      </member>
    </bitfield>
    <record name="ConnectionClass"
            c:type="TpConnectionClass"
            glib:is-gtype-struct-for="Connection"
            version="0.7.1">
      <doc xml:space="preserve"
           filename="connection.c"
           line="248">The class of a #TpConnection. In addition to @parent_class there are four
pointers reserved for possible future use.

(Changed in 0.7.12: the layout of the structure is visible, allowing
subclassing.)</doc>
      <source-position filename="connection.h" line="111"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="connection.c"
             line="250">the parent class</doc>
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_3" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_4" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
    </record>
    <callback name="ConnectionContactsByHandleCb"
              c:type="TpConnectionContactsByHandleCb"
              version="0.7.18">
      <doc xml:space="preserve"
           filename="contact.c"
           line="1872">Signature of a callback used to receive the result of
tp_connection_get_contacts_by_handle().

If an unrecoverable error occurs (for instance, if @connection
becomes disconnected) the whole operation fails, and no contacts or
invalid handles are returned.

If some or even all of the @handles passed to
tp_connection_get_contacts_by_handle() were not valid, this is not
considered to be a failure. @error will be %NULL in this situation,
@contacts will contain contact objects for those handles that were
valid (possibly none of them), and @invalid will contain the handles
that were not valid.</doc>
      <source-position filename="contact.h" line="150"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1874">The connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="n_contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1875">The number of TpContact objects successfully created
 (one per valid handle), or 0 on unrecoverable errors</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1877">An array of @n_contacts TpContact
 objects (this callback is not given a reference to any of these objects,
 and must call g_object_ref() on any that it will keep), or %NULL on
 unrecoverable errors</doc>
          <array length="1" zero-terminated="0" c:type="TpContact* const*">
            <type name="Contact" c:type="TpContact*"/>
          </array>
        </parameter>
        <parameter name="n_failed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1881">The number of invalid handles that were passed to
 tp_connection_get_contacts_by_handle() (or on unrecoverable errors,
 the total number of handles that were given)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="failed" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1884">An array of @n_failed handles that were
 passed to tp_connection_get_contacts_by_handle() but turned out to be
 invalid (or on unrecoverable errors, all the handles that were given)</doc>
          <array length="3" zero-terminated="0" c:type="const TpHandle*">
            <type name="Handle" c:type="TpHandle"/>
          </array>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1887">%NULL on success, or an unrecoverable error that caused everything
 to fail</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1889">the @user_data that was passed to
 tp_connection_get_contacts_by_handle()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1891">the @weak_object that was passed to
 tp_connection_get_contacts_by_handle()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ConnectionContactsByIdCb"
              c:type="TpConnectionContactsByIdCb"
              version="0.7.18">
      <doc xml:space="preserve"
           filename="contact.c"
           line="1911">Signature of a callback used to receive the result of
tp_connection_get_contacts_by_id().

@requested_ids contains the IDs that were converted to handles successfully.
The normalized form of requested_ids[i] is
tp_contact_get_identifier (contacts[i]).

If some or even all of the @ids passed to
tp_connection_get_contacts_by_id() were not valid, this is not
considered to be a fatal error. @error will be %NULL in this situation,
@contacts will contain contact objects for those IDs that were
valid (it may be empty), and @failed_id_errors will map the IDs
that were not valid to a corresponding #GError (if the connection manager
complies with the Telepathy spec, it will have domain %TP_ERROR and code
%TP_ERROR_INVALID_HANDLE).

If an unrecoverable error occurs (for instance, if @connection
becomes disconnected) the whole operation fails, and no contacts
or requested IDs are returned. @failed_id_errors will contain all the IDs
that were requested, mapped to a corresponding #GError (either one
indicating that the ID was invalid, if that was determined before the
fatal error occurred, or a copy of @error).</doc>
      <source-position filename="contact.h" line="173"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1913">The connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="n_contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1914">The number of TpContact objects successfully created
 (one per valid ID), or 0 on unrecoverable errors</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1916">An array of @n_contacts TpContact
 objects (this callback is
 not given a reference to any of these objects, and must call
 g_object_ref() on any that it will keep), or %NULL on unrecoverable errors</doc>
          <array length="1" zero-terminated="0" c:type="TpContact* const*">
            <type name="Contact" c:type="TpContact*"/>
          </array>
        </parameter>
        <parameter name="requested_ids" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1920">An array of @n_contacts valid IDs
 (JIDs, SIP URIs etc.)
 that were passed to tp_connection_get_contacts_by_id(), in an order
 corresponding to @contacts, or %NULL on unrecoverable errors</doc>
          <array length="1" zero-terminated="0" c:type="const gchar* const*">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="failed_id_errors" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1924">A hash table in which
 the keys are IDs and the values are errors (#GError)</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GLib.Error"/>
          </type>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1926">%NULL on success, or an unrecoverable error that caused everything
 to fail</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1928">the @user_data that was passed to
 tp_connection_get_contacts_by_id()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1930">the @weak_object that was passed to
 tp_connection_get_contacts_by_id()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ConnectionHoldHandlesCb"
              c:type="TpConnectionHoldHandlesCb"
              deprecated="1">
      <doc xml:space="preserve"
           filename="connection-handles.c"
           line="74">Signature of the callback called when tp_connection_hold_handles() succeeds
or fails.

On success, the caller has a reference to each handle in @handles.

Since telepathy-glib version 0.13.8,
the handles will remain valid until @connection becomes invalid
(signalled by #TpProxy::invalidated). In earlier versions, they could be
released with tp_connection_unref_handles().

For convenience, the handle type and handles requested by the caller are
passed through to this callback on success, so the caller does not have to
include them in @user_data.</doc>
      <doc-deprecated xml:space="preserve">See tp_connection_hold_handles().</doc-deprecated>
      <source-position filename="connection.h" line="263"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="76">the connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="handle_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="77">the handle type that was passed to
 tp_connection_hold_handles()</doc>
          <type name="HandleType" c:type="TpHandleType"/>
        </parameter>
        <parameter name="n_handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="79">the number of handles that were passed to
 tp_connection_hold_handles() on success, or 0 on failure</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="81">a copy of the array of @n_handles handles that was passed to
 tp_connection_hold_handles() on success, or %NULL on failure</doc>
          <type name="Handle" c:type="const TpHandle*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="83">%NULL on success, or an error on failure</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="84">the same arbitrary pointer that was passed to
 tp_connection_hold_handles()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="86">the same object that was passed to
 tp_connection_hold_handles()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="ConnectionManager"
           c:symbol-prefix="connection_manager"
           c:type="TpConnectionManager"
           version="0.7.1"
           parent="Proxy"
           glib:type-name="TpConnectionManager"
           glib:get-type="tp_connection_manager_get_type"
           glib:type-struct="ConnectionManagerClass">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="161">A proxy object for a Telepathy connection manager.

This might represent a connection manager which is currently running
(in which case it can be introspected) or not (in which case its
capabilities can be read from .manager files in the filesystem).
Accordingly, this object never emits #TpProxy::invalidated unless all
references to it are discarded.

Various fields and methods on this object do not work until
%TP_CONNECTION_MANAGER_FEATURE_CORE is prepared. Use
tp_proxy_prepare_async() to wait for this to happen.

Since 0.19.1, accessing the fields of this struct is deprecated,
and they are no longer documented here.
Use the accessors tp_connection_manager_get_name(),
tp_connection_manager_is_running(),
tp_connection_manager_dup_protocols(),
tp_connection_manager_get_info_source()
and the #TpConnectionManager:always-introspect property instead.</doc>
      <source-position filename="connection-manager.h" line="107"/>
      <constructor name="new"
                   c:identifier="tp_connection_manager_new"
                   throws="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1626">Convenience function to create a new connection manager proxy. If
its protocol and parameter information are required, you should call
tp_proxy_prepare_async() on the result.</doc>
        <source-position filename="connection-manager.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1638">a new reference to a connection manager proxy, or %NULL if @error
         is set.</doc>
          <type name="ConnectionManager" c:type="TpConnectionManager*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="1628">Proxy for the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="1629">The connection manager name (such as "gabble")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="manager_filename"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="1630">The #TpConnectionManager:manager-file
 property, which may (and generally should) be %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="check_valid_name"
                c:identifier="tp_connection_manager_check_valid_name"
                version="0.7.1"
                throws="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2105">Check that the given string is a valid connection manager name, i.e. that
it consists entirely of ASCII letters, digits and underscores, and starts
with a letter.</doc>
        <source-position filename="connection-manager.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2114">%TRUE if @name is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2107">a possible connection manager name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="check_valid_protocol_name"
                c:identifier="tp_connection_manager_check_valid_protocol_name"
                version="0.7.1"
                throws="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2154">Check that the given string is a valid protocol name, i.e. that
it consists entirely of ASCII letters, digits and hyphen/minus, and starts
with a letter.</doc>
        <source-position filename="connection-manager.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2163">%TRUE if @name is valid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2156">a possible protocol name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_feature_quark_core"
                c:identifier="tp_connection_manager_get_feature_quark_core">
        <source-position filename="connection-manager.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_connection_manager_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1433">Ensure that the known interfaces for TpConnectionManager have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_CONNECTION_MANAGER.</doc>
        <source-position filename="connection-manager.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="activate"
              c:identifier="tp_connection_manager_activate"
              version="0.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1673">Attempt to run and introspect the connection manager, asynchronously.
Since 0.7.26 this function is not generally very useful, since
the connection manager will now be activated automatically if necessary.

If the CM was already running, do nothing and return %FALSE.

On success, emit #TpConnectionManager::activated when the CM appears
on the bus, and #TpConnectionManager::got-info when its capabilities
have been (re-)discovered.

On failure, emit #TpConnectionManager::exited without first emitting
activated.</doc>
        <source-position filename="connection-manager.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1690">%TRUE if activation was needed and is now in progress, %FALSE
 if the connection manager was already running and no additional signals
 will be emitted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="1675">a connection manager proxy</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="call_when_ready"
              c:identifier="tp_connection_manager_call_when_ready"
              version="0.7.26"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="540">Call the @callback from the main loop when information about @cm's
supported protocols and parameters has been retrieved.</doc>
        <doc-deprecated xml:space="preserve">since 0.17.6, use tp_proxy_prepare_async() instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="542">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="543">callback to call when information has been retrieved or on
           error</doc>
            <type name="ConnectionManagerWhenReadyCb"
                  c:type="TpConnectionManagerWhenReadyCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="545">arbitrary data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="546">called to destroy @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="547">object to reference weakly; if it is destroyed, @callback
              will not be called, but @destroy will still be called</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_protocol_names"
              c:identifier="tp_connection_manager_dup_protocol_names"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2292">Returns a list of protocol names supported by this connection manager.
These are the internal protocol names used by the Telepathy specification
(e.g. "jabber" and "msn"), rather than user-visible names in any particular
locale.

If this function is called before the connection manager information has
been obtained, the result is always %NULL. Use
tp_proxy_prepare_async() to wait for this.

The result is copied and must be freed by the caller, but it is not
necessarily still true after the main loop is re-entered.</doc>
        <source-position filename="connection-manager.h" line="159"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2308">a #GStrv of protocol names</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2294">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_protocols"
              c:identifier="tp_connection_manager_dup_protocols"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2412">Return objects representing all protocols supported by this connection
manager.

If this function is called before the connection manager information has
been obtained, the result is always %NULL. Use tp_proxy_prepare_async()
to wait for this.

The caller must free the list, for instance with
&lt;literal&gt;g_list_free_full (l, g_object_unref)&lt;/literal&gt;.</doc>
        <source-position filename="connection-manager.h" line="166"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2426">a list
 of #TpProtocol objects representing the protocols supported by @self,
 owned by the caller</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Protocol"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2414">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info_source"
              c:identifier="tp_connection_manager_get_info_source"
              glib:get-property="info-source"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2268">If protocol and parameter information has been obtained from the connection
manager, return %TP_CM_INFO_SOURCE_LIVE; if it has been obtained from the
cache in the .manager file, return %TP_CM_INFO_SOURCE_FILE. If this
information has not yet been obtained, or obtaining it failed, return
%TP_CM_INFO_SOURCE_NONE.

This may increase at any time that the main loop is running; the
#GObject::notify signal is emitted.</doc>
        <source-position filename="connection-manager.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2281">the value of the #TpConnectionManager:info-source property</doc>
          <type name="CMInfoSource" c:type="TpCMInfoSource"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2270">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_connection_manager_get_name"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2203">Return the internal name of this connection manager in the Telepathy
D-Bus API, e.g. "gabble" or "haze". This is often the name of the binary
without the "telepathy-" prefix.

The returned string is valid as long as @self is. Copy it with g_strdup()
if a longer lifetime is required.</doc>
        <source-position filename="connection-manager.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2214">the #TpConnectionManager:cm-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2205">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_protocol"
              c:identifier="tp_connection_manager_get_protocol"
              version="0.7.26"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2340">Returns a structure representing a protocol, or %NULL if this connection
manager does not support the specified protocol.

Since 0.11.11, you can get a #GObject version with more
functionality by calling tp_connection_manager_get_protocol_object().

If this function is called before the connection manager information has
been obtained, the result is always %NULL. Use
tp_proxy_prepare_async() to wait for this.

The result is not necessarily valid after the main loop is re-entered.
Since 0.11.3, it can be copied with tp_connection_manager_protocol_copy()
if a permanently-valid copy is needed.</doc>
        <doc-deprecated xml:space="preserve">, use tp_connection_manager_get_protocol_object()</doc-deprecated>
        <source-position filename="connection-manager.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2360">a structure representing the protocol</doc>
          <type name="ConnectionManagerProtocol"
                c:type="const TpConnectionManagerProtocol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2342">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2343">the name of a protocol as defined in the Telepathy D-Bus API,
           e.g. "jabber" or "msn"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_protocol_object"
              c:identifier="tp_connection_manager_get_protocol_object"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2379">Returns an object representing a protocol, or %NULL if this connection
manager does not support the specified protocol.

If this function is called before the connection manager information has
been obtained, the result is always %NULL. Use tp_proxy_prepare_async()
to wait for this.

The result should be referenced with g_object_ref() if it will be kept.</doc>
        <source-position filename="connection-manager.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2394">an object representing the protocol, or %NULL</doc>
          <type name="Protocol" c:type="TpProtocol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2381">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2382">the name of a protocol as defined in the Telepathy D-Bus API,
           e.g. "jabber" or "msn"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_protocol"
              c:identifier="tp_connection_manager_has_protocol"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2448">Return whether @protocol is supported by this connection manager.

If this function is called before the connection manager information has
been obtained, the result is always %FALSE. Use tp_proxy_prepare_async()
to wait for this.</doc>
        <source-position filename="connection-manager.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2460">%TRUE if this connection manager supports @protocol</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2450">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2451">the name of a protocol as defined in the Telepathy D-Bus API,
           e.g. "jabber" or "msn"</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_ready"
              c:identifier="tp_connection_manager_is_ready"
              version="0.7.26"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2224">If protocol and parameter information has been obtained from the connection
manager or the cache in the .manager file, return %TRUE. Otherwise,
return %FALSE.

This may change from %FALSE to %TRUE at any time that the main loop is
running; the #GObject::notify signal is emitted for the
#TpConnectionManager:info-source property.</doc>
        <doc-deprecated xml:space="preserve">since 0.17.6, use tp_proxy_is_prepared()
 with %TP_CONNECTION_MANAGER_FEATURE_CORE instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2236">%TRUE, unless the #TpConnectionManager:info-source property is
         %TP_CM_INFO_SOURCE_NONE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2226">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_running"
              c:identifier="tp_connection_manager_is_running"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2249">Return %TRUE if this connection manager currently appears to be running.
This may change at any time that the main loop is running; the
#TpConnectionManager::activated and #TpConnectionManager::exited signals
are emitted.</doc>
        <source-position filename="connection-manager.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2258">whether the connection manager is currently running</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2251">a connection manager</doc>
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="always-introspect"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1569">If %TRUE, always introspect the connection manager as it comes online,
even if we already have its info from a .manager file. Default %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="cm-name"
                version="0.19.3"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1539">The name of the connection manager, e.g. "gabble" (read-only).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="connection-manager"
                deprecated="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1525">The name of the connection manager, e.g. "gabble" (read-only).</doc>
        <doc-deprecated xml:space="preserve">Use #TpConnectionManager:cm-name instead.</doc-deprecated>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="info-source"
                transfer-ownership="none"
                getter="get_info_source"
                default-value="0">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1506">Where we got the current information on supported protocols
(a #TpCMInfoSource).

Since 0.7.26, the #GObject::notify signal is emitted for this
property.

(Note that this is of type %G_TYPE_UINT, not %TP_TYPE_CM_INFO_SOURCE,
for historical reasons.)</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="manager-file"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1553">The absolute path of the .manager file. If set to %NULL (the default),
the XDG data directories will be searched for a .manager file of the
correct name.

If set to the empty string, no .manager file will be read.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="protocols" readable="0" private="1">
        <type name="ConnectionManagerProtocol"
              c:type="const TpConnectionManagerProtocol* const*"/>
      </field>
      <field name="running" readable="0" bits="1" private="1">
        <type name="guint" c:type="unsigned int"/>
      </field>
      <field name="always_introspect" readable="0" bits="1" private="1">
        <type name="guint" c:type="unsigned int"/>
      </field>
      <field name="info_source" readable="0" bits="2" private="1">
        <type name="guint" c:type="unsigned int"/>
      </field>
      <field name="reserved_flags" readable="0" bits="28" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ConnectionManagerPrivate"
              c:type="TpConnectionManagerPrivate*"/>
      </field>
      <glib:signal name="activated" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1581">Emitted when the connection manager's well-known name appears on the bus.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="exited" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1594">Emitted when the connection manager's well-known name disappears from
the bus or when activation fails.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="got-info" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="1608">Emitted when the connection manager's capabilities have been discovered.

This signal is not very helpful. Using
tp_proxy_prepare_async() instead is recommended.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="1611">a #TpCMInfoSource</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ConnectionManagerClass"
            c:type="TpConnectionManagerClass"
            glib:is-gtype-struct-for="ConnectionManager"
            version="0.7.1">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="133">The class of a #TpConnectionManager.</doc>
      <source-position filename="connection-manager.h" line="107"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer*"/>
      </field>
    </record>
    <callback name="ConnectionManagerListCb"
              c:type="TpConnectionManagerListCb"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="56">Signature of the callback supplied to tp_list_connection_managers().

Since 0.11.3, tp_list_connection_managers() will
wait for %TP_CONNECTION_MANAGER_FEATURE_CORE to be prepared on each
connection manager passed to @callback, unless an error occurred while
launching that connection manager.</doc>
      <source-position filename="connection-manager.h" line="115"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cms" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="58">%NULL-terminated array of
  #TpConnectionManager (the objects will
  be unreferenced and the array will be freed after the callback returns,
  so the callback must reference any CMs it stores a pointer to),
  or %NULL on error</doc>
          <array c:type="TpConnectionManager* const*">
            <type name="ConnectionManager" c:type="TpConnectionManager*"/>
          </array>
        </parameter>
        <parameter name="n_cms" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="63">number of connection managers in @cms (not including the final
 %NULL)</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="65">%NULL on success, or an error that occurred</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="66">user-supplied data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="67">user-supplied weakly referenced object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ConnectionManagerParam"
            c:type="TpConnectionManagerParam"
            version="0.7.1"
            glib:type-name="TpConnectionManagerParam"
            glib:get-type="tp_connection_manager_param_get_type"
            c:symbol-prefix="connection_manager_param">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="187">Structure representing a connection manager parameter.

Since 0.19.1, accessing the fields of this struct is deprecated,
and they are no longer documented here.
Use the accessors tp_connection_manager_param_get_name(),
tp_connection_manager_param_get_dbus_signature(),
tp_connection_manager_param_is_required(),
tp_connection_manager_param_is_required_for_registration(),
tp_connection_manager_param_is_secret(),
tp_connection_manager_param_is_dbus_property(),
tp_connection_manager_param_get_default(),
tp_connection_manager_param_dup_default_variant() instead.</doc>
      <source-position filename="protocol.h" line="46"/>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="dbus_signature" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="default_value" readable="0" private="1">
        <type name="GObject.Value" c:type="GValue"/>
      </field>
      <field name="flags" readable="0" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="copy"
              c:identifier="tp_connection_manager_param_copy"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="308">&lt;!-- Returns: says it all --&gt;</doc>
        <source-position filename="connection-manager.h" line="218"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="314">a newly (slice) allocated #TpConnectionManagerParam, free with
 tp_connection_manager_param_free()</doc>
          <type name="ConnectionManagerParam"
                c:type="TpConnectionManagerParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="310">the #TpConnectionManagerParam to copy</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_default_variant"
              c:identifier="tp_connection_manager_param_dup_default_variant"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2741">Get the default value for this parameter.

Use g_variant_get_type() to check that the type is what you expect.
For instance, a string parameter should have type
%G_VARIANT_TYPE_STRING.</doc>
        <source-position filename="connection-manager.h" line="205"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2751">the default value, or %NULL if there is no default</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2743">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_variant_type"
              c:identifier="tp_connection_manager_param_dup_variant_type"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2615">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2621">the #GVariantType of the parameter</doc>
          <type name="GLib.VariantType" c:type="GVariantType*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2617">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="tp_connection_manager_param_free"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="330">Frees @param, which was copied with tp_connection_manager_param_copy().</doc>
        <source-position filename="connection-manager.h" line="220"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="332">the #TpConnectionManagerParam to free</doc>
            <type name="ConnectionManagerParam"
                  c:type="TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dbus_signature"
              c:identifier="tp_connection_manager_param_get_dbus_signature"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2597">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2603">the D-Bus signature of the parameter</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2599">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default"
              c:identifier="tp_connection_manager_param_get_default"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2710">Get the default value for this parameter, if there is one. If %FALSE is
returned, @value is left uninitialized.</doc>
        <source-position filename="connection-manager.h" line="202"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2719">%TRUE if there is a default value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2712">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2713">pointer to an unset (all zeroes) #GValue into which the default's
        type and value are written</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_connection_manager_param_get_name"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2580">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="190"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2586">the name of the parameter</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2582">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_dbus_property"
              c:identifier="tp_connection_manager_param_is_dbus_property"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2692">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2698">%TRUE if the parameter represents a D-Bus property of the same name</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2694">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_required"
              c:identifier="tp_connection_manager_param_is_required"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2637">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2643">%TRUE if the parameter is normally required</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2639">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_required_for_registration"
              c:identifier="tp_connection_manager_param_is_required_for_registration"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2655">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="196"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2661">%TRUE if the parameter is required when registering a new account
         (by setting the special "register" parameter to %TRUE)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2657">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_secret"
              c:identifier="tp_connection_manager_param_is_secret"
              version="0.7.26">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2674">&lt;!-- --&gt;</doc>
        <source-position filename="connection-manager.h" line="198"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2680">%TRUE if the parameter's value is a password or other secret</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2676">a parameter supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerParam"
                  c:type="const TpConnectionManagerParam*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="ConnectionManagerPrivate"
            c:type="TpConnectionManagerPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="connection-manager.h" line="40"/>
    </record>
    <record name="ConnectionManagerProtocol"
            c:type="TpConnectionManagerProtocol"
            version="0.7.1"
            deprecated="1"
            deprecated-version="0.19.1"
            glib:type-name="TpConnectionManagerProtocol"
            glib:get-type="tp_connection_manager_protocol_get_type"
            c:symbol-prefix="connection_manager_protocol">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="206">Structure representing a protocol supported by a connection manager.
Note that the size of this structure may change, so its size must not be
relied on.</doc>
      <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
      <source-position filename="connection-manager.h" line="77"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="208">The name of this connection manager</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="params" writable="1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="209">Array of #TpConnectionManagerParam structures, terminated by
 a structure whose @name is %NULL</doc>
        <type name="ConnectionManagerParam"
              c:type="TpConnectionManagerParam*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="can_register"
              c:identifier="tp_connection_manager_protocol_can_register"
              version="0.7.26"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2527">Return whether a new account can be registered on this protocol, by setting
the special "register" parameter to %TRUE.</doc>
        <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="186"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2534">%TRUE if @protocol supports the parameter "register"</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2529">structure representing a supported protocol</doc>
            <type name="ConnectionManagerProtocol"
                  c:type="const TpConnectionManagerProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="tp_connection_manager_protocol_copy"
              version="0.11.3"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="347">&lt;!-- Returns: says it all --&gt;</doc>
        <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="224"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="353">a newly (slice) allocated #TpConnectionManagerProtocol, free with
 tp_connection_manager_protocol_free()</doc>
          <type name="ConnectionManagerProtocol"
                c:type="TpConnectionManagerProtocol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="in" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="349">the #TpConnectionManagerProtocol to copy</doc>
            <type name="ConnectionManagerProtocol"
                  c:type="const TpConnectionManagerProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_param_names"
              c:identifier="tp_connection_manager_protocol_dup_param_names"
              version="0.7.26"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2548">Returns a list of parameter names supported by this connection manager
for this protocol.

The result is copied and must be freed by the caller with g_strfreev().</doc>
        <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2557">a #GStrv of protocol names</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2550">a protocol supported by a #TpConnectionManager</doc>
            <type name="ConnectionManagerProtocol"
                  c:type="const TpConnectionManagerProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="tp_connection_manager_protocol_free"
              version="0.11.3"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="384">Frees @proto, which was copied with tp_connection_manager_protocol_copy().</doc>
        <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proto" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="386">the #TpConnectionManagerProtocol to free</doc>
            <type name="ConnectionManagerProtocol"
                  c:type="TpConnectionManagerProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param"
              c:identifier="tp_connection_manager_protocol_get_param"
              version="0.7.26"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2492">&lt;!-- no more to say --&gt;</doc>
        <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="183"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2499">a structure representing the parameter @param, or %NULL if not
         supported</doc>
          <type name="ConnectionManagerParam"
                c:type="const TpConnectionManagerParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2494">structure representing a supported protocol</doc>
            <type name="ConnectionManagerProtocol"
                  c:type="const TpConnectionManagerProtocol*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2495">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_param"
              c:identifier="tp_connection_manager_protocol_has_param"
              version="0.7.26"
              deprecated="1"
              deprecated-version="0.19.1">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2470">&lt;!-- no more to say --&gt;</doc>
        <doc-deprecated xml:space="preserve">, use #TpProtocol objects instead</doc-deprecated>
        <source-position filename="connection-manager.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2477">%TRUE if @protocol supports the parameter @param.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2472">structure representing a supported protocol</doc>
            <type name="ConnectionManagerProtocol"
                  c:type="const TpConnectionManagerProtocol*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-manager.c"
                 line="2473">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <callback name="ConnectionManagerWhenReadyCb"
              c:type="TpConnectionManagerWhenReadyCb"
              deprecated="1">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="523">Called as the result of tp_connection_manager_call_when_ready(). If the
connection manager's protocol and parameter information could be retrieved,
@error is %NULL and @cm is considered to be ready. Otherwise, @error is
non-%NULL and @cm is not ready.</doc>
      <doc-deprecated xml:space="preserve">since 0.17.6, use tp_proxy_prepare_async() instead</doc-deprecated>
      <source-position filename="connection-manager.h" line="136"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cm" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="525">a connection manager</doc>
          <type name="ConnectionManager" c:type="TpConnectionManager*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="526">%NULL on success, or the reason why tp_connection_manager_is_ready()
        would return %FALSE</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="528">the @user_data passed to tp_connection_manager_call_when_ready()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="529">the @weak_object passed to
              tp_connection_manager_call_when_ready()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ConnectionNameListCb"
              c:type="TpConnectionNameListCb"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="connection.c"
           line="2750">Signature of the callback supplied to tp_list_connection_names().</doc>
      <source-position filename="connection.h" line="207"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="names" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2752">%NULL-terminated array of @n
 connection bus names, or %NULL on error</doc>
          <array c:type="const gchar* const*">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="n" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2754">number of names (not including the final %NULL), or 0 on error</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="cms" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2755">%NULL-terminated array of @n
 connection manager names (e.g. "gabble") in the same order as @names, or
 %NULL on error</doc>
          <array c:type="const gchar* const*">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="protocols" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2758">%NULL-terminated array of
 @n protocol names as defined in the Telepathy spec (e.g. "jabber") in the
 same order as @names, or %NULL on error</doc>
          <array c:type="const gchar* const*">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2761">%NULL on success, or an error that occurred</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2762">user-supplied data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2763">user-supplied weakly referenced object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="ConnectionPresenceType"
                 c:type="TpConnectionPresenceType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="206">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="126"/>
      <member name="unset"
              value="0"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_UNSET">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="208">&lt;![CDATA[           An invalid presence type used as a null value. This value MUST NOT           appear in the Statuses property,           or in the result of GetStatuses           on the deprecated Presence           interface.         ]]&gt;</doc>
      </member>
      <member name="offline"
              value="1"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_OFFLINE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="209">&lt;![CDATA[           Offline         ]]&gt;</doc>
      </member>
      <member name="available"
              value="2"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_AVAILABLE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="210">&lt;![CDATA[           Available         ]]&gt;</doc>
      </member>
      <member name="away"
              value="3"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_AWAY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="211">&lt;![CDATA[           Away         ]]&gt;</doc>
      </member>
      <member name="extended_away"
              value="4"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_EXTENDED_AWAY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="212">&lt;![CDATA[           Away for an extended time         ]]&gt;</doc>
      </member>
      <member name="hidden"
              value="5"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_HIDDEN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="213">&lt;![CDATA[           Hidden (invisible)         ]]&gt;</doc>
      </member>
      <member name="busy"
              value="6"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_BUSY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="214">&lt;![CDATA[           Busy, Do Not Disturb.         ]]&gt;</doc>
      </member>
      <member name="unknown"
              value="7"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="215">&lt;![CDATA[           Unknown, unable to determine presence for this contact, for example           if the protocol only allows presence of subscribed contacts.         ]]&gt;</doc>
      </member>
      <member name="error"
              value="8"
              c:identifier="TP_CONNECTION_PRESENCE_TYPE_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="216">&lt;![CDATA[           Error, an error occurred while trying to determine presence.  The           message, if set, is an error from the server.         ]]&gt;</doc>
      </member>
    </enumeration>
    <record name="ConnectionPrivate"
            c:type="TpConnectionPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="connection.h" line="101"/>
    </record>
    <callback name="ConnectionRequestHandlesCb"
              c:type="TpConnectionRequestHandlesCb"
              deprecated="1">
      <doc xml:space="preserve"
           filename="connection-handles.c"
           line="230">Signature of the callback called when tp_connection_request_handles()
succeeds or fails.

On success, the caller has a reference to each handle in @handles.

Since telepathy-glib version 0.13.8,
the handles will remain valid until @connection becomes invalid
(signalled by #TpProxy::invalidated). In earlier versions, they could be
released with tp_connection_unref_handles().

For convenience, the handle type and IDs requested by the caller are
passed through to this callback, so the caller does not have to include
them in @user_data.</doc>
      <doc-deprecated xml:space="preserve">See tp_connection_request_handles().</doc-deprecated>
      <source-position filename="connection.h" line="273"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="232">the connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="handle_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="233">the handle type that was passed to
 tp_connection_request_handles()</doc>
          <type name="HandleType" c:type="TpHandleType"/>
        </parameter>
        <parameter name="n_handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="235">the number of IDs that were passed to
 tp_connection_request_handles() on success, or 0 on failure</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="237">the @n_handles
 handles corresponding to @ids, in the same order, or %NULL on failure</doc>
          <array length="2" zero-terminated="0" c:type="const TpHandle*">
            <type name="guint"/>
          </array>
        </parameter>
        <parameter name="ids" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="239">a copy of the array of
 @n_handles IDs that was passed to tp_connection_request_handles() on
 success, or %NULL on failure</doc>
          <array length="2" zero-terminated="0" c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="242">%NULL on success, or an error on failure</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="243">the same arbitrary pointer that was passed to
 tp_connection_request_handles()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-handles.c"
               line="245">the same object that was passed to
 tp_connection_request_handles()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="ConnectionStatus" c:type="TpConnectionStatus">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="33">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="33"/>
      <member name="connected"
              value="0"
              c:identifier="TP_CONNECTION_STATUS_CONNECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="35">&lt;![CDATA[           The connection is fully connected and all methods are available.         ]]&gt;</doc>
      </member>
      <member name="connecting"
              value="1"
              c:identifier="TP_CONNECTION_STATUS_CONNECTING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="36">&lt;![CDATA[           Connect has been called but the           connection has not yet been established. Some methods may fail           until the connection has been established.         ]]&gt;</doc>
      </member>
      <member name="disconnected"
              value="2"
              c:identifier="TP_CONNECTION_STATUS_DISCONNECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="37">&lt;![CDATA[           If this is retrieved from GetStatus or           Status, it indicates that connection           has not yet been attempted. If seen in a           StatusChanged signal, it indicates           that the connection has failed; the Connection object SHOULD be           removed from D-Bus immediately, and all subsequent method calls           SHOULD fail.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="ConnectionStatusReason"
                 c:type="TpConnectionStatusReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="53">&lt;![CDATA[         A reason why the status of the connection changed. Apart from           Requested, the values of this enumeration only make sense as           reasons why the status changed to Disconnected.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="55"/>
      <member name="none_specified"
              value="0"
              c:identifier="TP_CONNECTION_STATUS_REASON_NONE_SPECIFIED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="55">&lt;![CDATA[           There is no reason set for this state change. Unknown status             reasons SHOULD be treated like this reason.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Disconnected.         ]]&gt;</doc>
      </member>
      <member name="requested"
              value="1"
              c:identifier="TP_CONNECTION_STATUS_REASON_REQUESTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="56">&lt;![CDATA[           The change is in response to a user request. Changes to the             Connecting or Connected status SHOULD always indicate this reason;             changes to the Disconnected status SHOULD indicate this reason             if and only if the disconnection was requested by the user.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cancelled.         ]]&gt;</doc>
      </member>
      <member name="network_error"
              value="2"
              c:identifier="TP_CONNECTION_STATUS_REASON_NETWORK_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="57">&lt;![CDATA[           There was an error sending or receiving on the network socket.            When the status changes from Connecting to Disconnected for this             reason, the equivalent D-Bus error is either             org.freedesktop.Telepathy.Error.NetworkError,             org.freedesktop.Telepathy.Error.ConnectionRefused,             org.freedesktop.Telepathy.Error.ConnectionFailed             or some more specific error.            When the status changes from Connected to Disconnected for this             reason, the equivalent D-Bus error is either             org.freedesktop.Telepathy.Error.NetworkError,             org.freedesktop.Telepathy.Error.ConnectionLost             or some more specific error.         ]]&gt;</doc>
      </member>
      <member name="authentication_failed"
              value="3"
              c:identifier="TP_CONNECTION_STATUS_REASON_AUTHENTICATION_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="58">&lt;![CDATA[           The username or password was invalid.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.AuthenticationFailed.                    ]]&gt;</doc>
      </member>
      <member name="encryption_error"
              value="4"
              c:identifier="TP_CONNECTION_STATUS_REASON_ENCRYPTION_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="59">&lt;![CDATA[           There was an error negotiating SSL on this connection, or             encryption was unavailable and require-encryption was set when the             connection was created.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.EncryptionNotAvailable             if encryption was not available at all, or             org.freedesktop.Telepathy.Error.EncryptionError             if encryption failed.         ]]&gt;</doc>
      </member>
      <member name="name_in_use"
              value="5"
              c:identifier="TP_CONNECTION_STATUS_REASON_NAME_IN_USE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="60">&lt;![CDATA[           In general, this reason indicates that the requested account             name or other identification could not be used due to conflict             with another connection. It can be divided into three cases:                         If the status change is from Connecting to Disconnected               and the 'register' parameter to RequestConnection was present               and true, the requested account could not be created on the               server because it already exists.               The equivalent D-Bus error is               org.freedesktop.Telepathy.Error.RegistrationExists.                           If the status change is from Connecting to Disconnected               but the 'register' parameter is absent or false, the connection               manager could not connect to the specified account because               a connection to that account already exists.               The equivalent D-Bus error is               org.freedesktop.Telepathy.Error.AlreadyConnected.                                 In some protocols, like XMPP (when connecting with the same                 JID and resource as an existing connection), the existing                 connection "wins" and the new one fails to connect.                                          If the status change is from Connected to Disconnected,               the existing connection was automatically disconnected because               a new connection to the same account (perhaps from a different               client or location) was established.               The equivalent D-Bus error is               org.freedesktop.Telepathy.Error.ConnectionReplaced.                                 In some protocols, like MSNP (when connecting twice with the                 same Passport), the new connection "wins" and the                 existing one is automatically disconnected.                                                ]]&gt;</doc>
      </member>
      <member name="cert_not_provided"
              value="6"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_NOT_PROVIDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="61">&lt;![CDATA[           The server did not provide a SSL certificate.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.NotProvided.                    ]]&gt;</doc>
      </member>
      <member name="cert_untrusted"
              value="7"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_UNTRUSTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="62">&lt;![CDATA[           The server's SSL certificate is signed by an untrusted certifying             authority. This error SHOULD NOT be used to represent a self-signed             certificate: use the more specific Cert_Self_Signed reason for             that.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.Untrusted.                    ]]&gt;</doc>
      </member>
      <member name="cert_expired"
              value="8"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_EXPIRED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="63">&lt;![CDATA[           The server's SSL certificate has expired.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.Expired.                    ]]&gt;</doc>
      </member>
      <member name="cert_not_activated"
              value="9"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_NOT_ACTIVATED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="64">&lt;![CDATA[           The server's SSL certificate is not yet valid.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.NotActivated.                    ]]&gt;</doc>
      </member>
      <member name="cert_hostname_mismatch"
              value="10"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_HOSTNAME_MISMATCH">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="65">&lt;![CDATA[           The server's SSL certificate did not match its hostname.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.HostnameMismatch.                    ]]&gt;</doc>
      </member>
      <member name="cert_fingerprint_mismatch"
              value="11"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_FINGERPRINT_MISMATCH">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="66">&lt;![CDATA[           The server's SSL certificate does not have the expected             fingerprint.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.FingerprintMismatch.                    ]]&gt;</doc>
      </member>
      <member name="cert_self_signed"
              value="12"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_SELF_SIGNED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="67">&lt;![CDATA[           The server's SSL certificate is self-signed.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.SelfSigned.                    ]]&gt;</doc>
      </member>
      <member name="cert_other_error"
              value="13"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_OTHER_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="68">&lt;![CDATA[           There was some other error validating the server's SSL             certificate.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.Invalid.                    ]]&gt;</doc>
      </member>
      <member name="cert_revoked"
              value="14"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_REVOKED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="69">&lt;![CDATA[           The server's SSL certificate has been revoked.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.Revoked.                    ]]&gt;</doc>
      </member>
      <member name="cert_insecure"
              value="15"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_INSECURE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="70">&lt;![CDATA[           The server's SSL certificate uses an insecure algorithm, 	  or is cryptographically weak.            When disconnected for this reason, the equivalent D-Bus error is             org.freedesktop.Telepathy.Error.Cert.Insecure.                    ]]&gt;</doc>
      </member>
      <member name="cert_limit_exceeded"
              value="16"
              c:identifier="TP_CONNECTION_STATUS_REASON_CERT_LIMIT_EXCEEDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="71">&lt;![CDATA[ 	  The length in bytes of the server certificate, or the depth of the 	  sever certificate chain exceed the limits imposed by the crypto 	  library.  	  When disconnected for this reason, the equivalent D-Bus error is 	    org.freedesktop.Telepathy.Error.Cert.LimitExceeded 	   	]]&gt;</doc>
      </member>
    </enumeration>
    <callback name="ConnectionUpgradeContactsCb"
              c:type="TpConnectionUpgradeContactsCb"
              version="0.7.18">
      <doc xml:space="preserve"
           filename="contact.c"
           line="1959">Signature of a callback used to receive the result of
tp_connection_upgrade_contacts().

If an unrecoverable error occurs (for instance, if @connection becomes
disconnected) it is indicated by @error, but the contacts in @contacts
are still provided.</doc>
      <source-position filename="contact.h" line="162"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1961">The connection</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="n_contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1962">The number of TpContact objects for which an upgrade was
 requested</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1964">An array of @n_contacts TpContact
 objects (this callback is
 not given an extra reference to any of these objects, and must call
 g_object_ref() on any that it will keep)</doc>
          <array length="1" zero-terminated="0" c:type="TpContact* const*">
            <type name="Contact" c:type="TpContact*"/>
          </array>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1968">An unrecoverable error, or %NULL if the connection remains valid</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="4">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1969">the @user_data that was passed to
 tp_connection_upgrade_contacts()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="1971">the @weak_object that was passed to
 tp_connection_upgrade_contacts()</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ConnectionWhenReadyCb"
              c:type="TpConnectionWhenReadyCb"
              deprecated="1"
              deprecated-version="0.17.6">
      <doc xml:space="preserve"
           filename="connection.c"
           line="3062">Signature of a callback passed to tp_connection_call_when_ready(), which
will be called exactly once, when the connection becomes ready or
invalid (whichever happens first)</doc>
      <source-position filename="connection.h" line="198"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3064">the connection (which may be in the middle of being disposed,
 if error is non-%NULL, error-&gt;domain is TP_DBUS_ERRORS and error-&gt;code is
 TP_DBUS_ERROR_PROXY_UNREFERENCED)</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3067">%NULL if the connection is ready for use, or the error with which
 it was invalidated if it is now invalid</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="connection.c"
               line="3069">whatever was passed to tp_connection_call_when_ready()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Contact"
           c:symbol-prefix="contact"
           c:type="TpContact"
           version="0.7.18"
           parent="GObject.Object"
           glib:type-name="TpContact"
           glib:get-type="tp_contact_get_type"
           glib:type-struct="ContactClass">
      <doc xml:space="preserve"
           filename="contact.c"
           line="63">An object representing a contact on a #TpConnection.

Contact objects support tracking a number of attributes of contacts, as
described by the #TpContactFeature flags. Features can be specified when
instantiating contact objects (with tp_connection_get_contacts_by_id() or
tp_connection_get_contacts_by_handle()), or added to an existing contact
object with tp_connection_upgrade_contacts(). For example, a client wishing
to keep track of a contact's alias would set #TP_CONTACT_FEATURE_ALIAS, and
then listen for the "notify::alias" signal, emitted whenever the
#TpContact:alias property changes.

Note that releasing a #TpContact object might release handle references
held by calling tp_cli_connection_call_request_handles(),
tp_cli_connection_run_request_handles(),
tp_cli_connection_call_hold_handles(),
tp_cli_connection_run_hold_handles(),
tp_cli_connection_interface_contacts_call_get_contact_attributes() or
tp_cli_connection_interface_contacts_run_get_contact_attributes() directly.
Those functions should be avoided in favour of using #TpContact,
tp_connection_hold_handles(), tp_connection_request_handles() and
tp_connection_get_contact_attributes().</doc>
      <source-position filename="contact.h" line="41"/>
      <method name="add_to_group_async"
              c:identifier="tp_contact_add_to_group_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="295">Convenience wrapper for tp_connection_add_to_group_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="297">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="298">the group to alter.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="299">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="300">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_to_group_finish"
              c:identifier="tp_contact_add_to_group_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="316">Finishes tp_contact_add_to_group_async()</doc>
        <source-position filename="contact-operations.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="324">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="318">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="319">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="authorize_publication_async"
              c:identifier="tp_contact_authorize_publication_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="118">Convenience wrapper for tp_connection_authorize_publication_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="120">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="121">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="122">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="authorize_publication_finish"
              c:identifier="tp_contact_authorize_publication_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="137">Finishes tp_contact_authorize_publication_async()</doc>
        <source-position filename="contact-operations.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="145">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="139">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="140">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="block_async"
              c:identifier="tp_contact_block_async"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="379">Block communications with a contact, optionally reporting the contact as
abusive to the server administrators. To block more than one contact at once,
see tp_connection_block_contacts_async().</doc>
        <source-position filename="contact-operations.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="381">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="report_abusive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="382">If %TRUE, report this contact as abusive to the
server administrators as well as blocking him. See
#TpConnection:can-report-abusive to discover whether reporting abuse is
supported. If #TpConnection:can-report-abusive is %FALSE, this parameter will
be ignored.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="387">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="388">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="block_finish"
              c:identifier="tp_contact_block_finish"
              version="0.17.0"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="422">Finishes tp_contact_block_async()</doc>
        <source-position filename="contact-operations.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="430">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="424">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="425">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_contact_info"
              c:identifier="tp_contact_dup_contact_info"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="contact.c"
             line="661">Returns a newly allocated #GList of contact's vCard fields. The list must be
freed with tp_contact_info_list_free() after used.

Same as the #TpContact:contact-info property.</doc>
        <source-position filename="contact.h" line="117"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="contact.c"
               line="670">
 a #GList of #TpContactInfoField, or %NULL if the feature is not yet
 prepared.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ContactInfoField"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="663">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_location"
              c:identifier="tp_contact_dup_location"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="contact.c"
             line="568">Return the contact's user-defined location, or %NULL if the location is
unspecified.

This function returns the same information as tp_contact_get_location(),
but in a different format.</doc>
        <source-position filename="contact.h" line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="contact.c"
               line="578">a variant of type %G_VARIANT_TYPE_VARDICT, the same as
 the #TpContact:location-vardict property</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="570">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_account"
              c:identifier="tp_contact_get_account"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="273">Return the #TpAccount of @self's #TpContact:connection.
See tp_connection_get_account() for details.</doc>
        <source-position filename="contact.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="280">a borrowed reference to @self's account
 (it must be referenced with g_object_ref if it must remain valid
 longer than the contact)</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="275">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_alias"
              c:identifier="tp_contact_get_alias"
              glib:get-property="alias"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="385">Return the contact's alias. This remains valid until the main loop
is re-entered; if the caller requires a string that will persist for
longer than that, it must be copied with g_strdup().</doc>
        <source-position filename="contact.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="393">the same non-%NULL alias as the #TpContact:alias</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="387">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_avatar_file"
              c:identifier="tp_contact_get_avatar_file"
              glib:get-property="avatar-file"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="contact.c"
             line="433">Return the contact's avatar file. This remains valid until the main loop
is re-entered; if the caller requires a #GFile that will persist for
longer than that, it must be reffed with g_object_ref().</doc>
        <source-position filename="contact.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="441">the same #GFile as the #TpContact:avatar-file property
 (possibly %NULL)</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="435">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_avatar_mime_type"
              c:identifier="tp_contact_get_avatar_mime_type"
              glib:get-property="avatar-mime-type"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="contact.c"
             line="454">Return the contact's avatar MIME type. This remains valid until the main loop
is re-entered; if the caller requires a string that will persist for
longer than that, it must be copied with g_strdup().</doc>
        <source-position filename="contact.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="462">the same MIME type as the #TpContact:avatar-mime-type property
 (possibly %NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="456">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_avatar_token"
              c:identifier="tp_contact_get_avatar_token"
              glib:get-property="avatar-token"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="412">Return the contact's avatar token. This remains valid until the main loop
is re-entered; if the caller requires a string that will persist for
longer than that, it must be copied with g_strdup().</doc>
        <source-position filename="contact.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="420">the same token as the #TpContact:avatar-token property
 (possibly %NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="414">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="tp_contact_get_capabilities"
              glib:get-property="capabilities"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="contact.c"
             line="614">&lt;!-- --&gt;</doc>
        <source-position filename="contact.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="620">the same #TpCapabilities (or %NULL) as the
#TpContact:capabilities property</doc>
          <type name="Capabilities" c:type="TpCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="616">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_client_types"
              c:identifier="tp_contact_get_client_types"
              glib:get-property="client-types"
              version="0.13.1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="594">Return the contact's client types or %NULL if the client types are
unspecified.</doc>
        <source-position filename="contact.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="601">the same
 #GStrv as the #TpContact:client-types property</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="596">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="tp_contact_get_connection"
              glib:get-property="connection"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="294">&lt;!-- nothing more to say --&gt;</doc>
        <source-position filename="contact.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="300">a borrowed reference to the #TpContact:connection
 (it must be referenced with g_object_ref if it must remain valid
 longer than the contact)</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="296">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_groups"
              c:identifier="tp_contact_get_contact_groups"
              glib:get-property="contact-groups"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="contact.c"
             line="753">Return names of groups of which a contact is a member. It is incorrect to
call this method before %TP_CONTACT_FEATURE_CONTACT_GROUPS has been
prepared. This remains valid until the main loop is re-entered; if the caller
requires a #GStrv that will persist for longer than that, it must be copied
with g_strdupv().</doc>
        <source-position filename="contact.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="763">the same
 #GStrv as the #TpContact:contact-groups property</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="755">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact_info"
              c:identifier="tp_contact_get_contact_info"
              glib:get-property="contact-info"
              version="0.11.7"
              deprecated="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="633">Returns a newly allocated #GList of contact's vCard fields. The list must be
freed with g_list_free() after used.

Note that the #TpContactInfoField&lt;!-- --&gt;s in the returned #GList are not
dupped before returning from this function. One could copy every item in the
list using tp_contact_info_field_copy().

Same as the #TpContact:contact-info property.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_contact_dup_contact_info() instead.</doc-deprecated>
        <source-position filename="contact.h" line="113"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="contact.c"
               line="646">
 a #GList of #TpContactInfoField, or %NULL if the feature is not yet
 prepared.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ContactInfoField"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="635">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle"
              c:identifier="tp_contact_get_handle"
              glib:get-property="handle"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="314">Return the contact's handle, which is of type %TP_HANDLE_TYPE_CONTACT,
or 0 if the #TpContact:connection has become invalid.

This handle is referenced using the Telepathy D-Bus API and remains
referenced for as long as @self exists and the
#TpContact:connection remains valid.

However, the caller of this function does not gain an additional reference
to the handle.</doc>
        <source-position filename="contact.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="328">the same handle as the #TpContact:handle property</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="316">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identifier"
              c:identifier="tp_contact_get_identifier"
              glib:get-property="identifier"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="340">Return the contact's identifier. This remains valid for as long as @self
exists; if the caller requires a string that will persist for longer than
that, it must be copied with g_strdup().</doc>
        <source-position filename="contact.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="348">the same non-%NULL identifier as the #TpContact:identifier property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="342">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="tp_contact_get_location"
              version="0.11.1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="545">Return the contact's user-defined location or %NULL if the location is
unspecified.
This remains valid until the main loop is re-entered; if the caller
requires a hash table that will persist for longer than that, it must be
reffed with g_hash_table_ref().</doc>
        <source-position filename="contact.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="555">the same
 #GHashTable (or %NULL) as the #TpContact:location property</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="547">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presence_message"
              c:identifier="tp_contact_get_presence_message"
              glib:get-property="presence-message"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="522">Return the contact's user-defined status message, or an empty string.
This remains valid until the main loop is re-entered; if the caller
requires a string that will persist for longer than that, it must be
copied with g_strdup().</doc>
        <source-position filename="contact.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="531">the same non-%NULL message as the #TpContact:presence-message
 property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="524">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presence_status"
              c:identifier="tp_contact_get_presence_status"
              glib:get-property="presence-status"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="498">Return the name of the contact's presence status, or an empty string.
This remains valid until the main loop is re-entered; if the caller
requires a string that will persist for longer than that, it must be
copied with g_strdup().</doc>
        <source-position filename="contact.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="507">the same non-%NULL status name as the #TpContact:presence-status
 property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="500">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presence_type"
              c:identifier="tp_contact_get_presence_type"
              glib:get-property="presence-type"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="475">If this object has been set up to track %TP_CONTACT_FEATURE_PRESENCE
and the underlying connection supports either the Presence or
SimplePresence interfaces, return the type of the contact's presence.

Otherwise, return %TP_CONNECTION_PRESENCE_TYPE_UNSET.</doc>
        <source-position filename="contact.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="485">the same presence type as the #TpContact:presence-type property</doc>
          <type name="ConnectionPresenceType"
                c:type="TpConnectionPresenceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="477">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publish_request"
              c:identifier="tp_contact_get_publish_request"
              glib:get-property="publish-request"
              version="0.13.12">
        <doc xml:space="preserve"
             filename="contact.c"
             line="728">If #TpContact:publish-state is set to %TP_SUBSCRIPTION_STATE_ASK, return the
message that this remote contact sent when they requested permission to see
the local user's presence, an empty string ("") otherwise. This remains valid
until the main loop is re-entered; if the caller requires a string that will
persist for longer than that, it must be copied with g_strdup().

This is set to %NULL until %TP_CONTACT_FEATURE_SUBSCRIPTION_STATES has been
prepared, and it is guaranteed to be non-%NULL afterward.</doc>
        <source-position filename="contact.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="741">the value of #TpContact:publish-request.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="730">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_publish_state"
              c:identifier="tp_contact_get_publish_state"
              glib:get-property="publish-state"
              version="0.13.12">
        <doc xml:space="preserve"
             filename="contact.c"
             line="706">Return the state of this remote contact's subscription to the local user's
presence.

This is set to %TP_SUBSCRIPTION_STATE_UNKNOWN until
%TP_CONTACT_FEATURE_SUBSCRIPTION_STATES has been prepared</doc>
        <source-position filename="contact.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="716">the value of #TpContact:publish-state.</doc>
          <type name="SubscriptionState" c:type="TpSubscriptionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="708">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subscribe_state"
              c:identifier="tp_contact_get_subscribe_state"
              glib:get-property="subscribe-state"
              version="0.13.12">
        <doc xml:space="preserve"
             filename="contact.c"
             line="684">Return the state of the local user's subscription to this remote contact's
presence.

This is set to %TP_SUBSCRIPTION_STATE_UNKNOWN until
%TP_CONTACT_FEATURE_SUBSCRIPTION_STATES has been prepared</doc>
        <source-position filename="contact.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="694">the value of #TpContact:subscribe-state.</doc>
          <type name="SubscriptionState" c:type="TpSubscriptionState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="686">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_feature"
              c:identifier="tp_contact_has_feature"
              version="0.7.18">
        <doc xml:space="preserve"
             filename="contact.c"
             line="363">&lt;!-- --&gt;</doc>
        <source-position filename="contact.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="370">%TRUE if @self has been set up to track the feature @feature</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="365">a contact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="366">a desired feature</doc>
            <type name="ContactFeature" c:type="TpContactFeature"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_blocked"
              c:identifier="tp_contact_is_blocked"
              glib:get-property="is-blocked"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="5164">&lt;!-- --&gt;</doc>
        <source-position filename="contact.h" line="218"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="5170">the value of #TpContact:is-blocked.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="5166">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_async"
              c:identifier="tp_contact_remove_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="157">Convenience wrapper for tp_connection_remove_contacts_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="159">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="160">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="161">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="tp_contact_remove_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="176">Finishes tp_contact_remove_async()</doc>
        <source-position filename="contact-operations.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="184">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="178">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="179">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_from_group_async"
              c:identifier="tp_contact_remove_from_group_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="336">Convenience wrapper for tp_connection_remove_from_group_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="338">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="group" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="339">the group to alter.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="340">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="341">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_from_group_finish"
              c:identifier="tp_contact_remove_from_group_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="357">Finishes tp_contact_remove_from_group_async()</doc>
        <source-position filename="contact-operations.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="365">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="359">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="360">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_contact_info_async"
              c:identifier="tp_contact_request_contact_info_async"
              version="0.11.7">
        <doc xml:space="preserve"
             filename="contact.c"
             line="3463">Requests an asynchronous request of the contact info of @self. When
the operation is finished, @callback will be called. You can then call
tp_contact_request_contact_info_finish() to get the result of the operation.

If the operation is successful, the #TpContact:contact-info property will be
updated (emitting "notify::contact-info" signal) before @callback is called.
That means you can call tp_contact_get_contact_info() to get the new vCard
inside @callback.

Note that requesting the vCard from the network can take significant time, so
a bigger timeout is set on the underlying D-Bus call. @cancellable can be
cancelled to free resources used in the D-Bus call if the caller is no longer
interested in the vCard.

If %TP_CONTACT_FEATURE_CONTACT_INFO is not yet set on @self, it will be
set before its property gets updated and @callback is called.</doc>
        <source-position filename="contact.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3465">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3466">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3467">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3468">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_contact_info_finish"
              c:identifier="tp_contact_request_contact_info_finish"
              version="0.11.7"
              throws="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="3525">Finishes an async request of @self info. If the operation was successful,
the contact's vCard can be accessed using tp_contact_get_contact_info().</doc>
        <source-position filename="contact.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="3534">%TRUE if the request call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3527">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="3528">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_subscription_async"
              c:identifier="tp_contact_request_subscription_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="77">Convenience wrapper for tp_connection_request_subscription_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="79">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="80">an optional message</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="81">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="82">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_subscription_finish"
              c:identifier="tp_contact_request_subscription_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="98">Finishes tp_contact_request_subscription_async()</doc>
        <source-position filename="contact-operations.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="106">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="100">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="101">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contact_groups_async"
              c:identifier="tp_contact_set_contact_groups_async"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="contact.c"
             line="797">Add @self to the given groups (creating new groups if necessary), and remove
it from all other groups. If the user is removed from a group of which they
were the only member, the group MAY be removed automatically. You can then
call tp_contact_set_contact_groups_finish() to get the result of the
operation.

If the operation is successful and %TP_CONTACT_FEATURE_CONTACT_GROUPS is
prepared, the #TpContact:contact-groups property will be
updated (emitting "notify::contact-groups" signal) and
#TpContact::contact-groups-changed signal will be emitted before @callback
is called. That means you can call tp_contact_get_contact_groups() to get the
new contact groups inside @callback.</doc>
        <source-position filename="contact.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="799">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="n_groups" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="800">the number of groups, or -1 if @groups is %NULL-terminated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="groups"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="801">the set of
 groups which the contact should be in (may be %NULL if @n_groups is 0)</doc>
            <array length="0" zero-terminated="0" c:type="const gchar* const*">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="803">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="804">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contact_groups_finish"
              c:identifier="tp_contact_set_contact_groups_finish"
              version="0.13.14"
              throws="1">
        <doc xml:space="preserve"
             filename="contact.c"
             line="858">Finishes an async set of @self contact groups.</doc>
        <source-position filename="contact.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact.c"
               line="866">%TRUE if the request call was successful, otherwise %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="860">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="861">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock_async"
              c:identifier="tp_contact_unblock_async"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="442">Unblock communications with a contact. To unblock more than one contact
at once, see tp_connection_unblock_contacts_async().</doc>
        <source-position filename="contact-operations.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="444">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="445">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="446">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unblock_finish"
              c:identifier="tp_contact_unblock_finish"
              version="0.17.0"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="478">Finishes tp_contact_unblock_async()</doc>
        <source-position filename="contact-operations.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="486">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="480">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="481">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpublish_async"
              c:identifier="tp_contact_unpublish_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="235">Convenience wrapper for tp_connection_unpublish_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="237">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="238">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="239">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unpublish_finish"
              c:identifier="tp_contact_unpublish_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="254">Finishes tp_contact_unpublish_async()</doc>
        <source-position filename="contact-operations.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="262">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="256">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="257">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_async"
              c:identifier="tp_contact_unsubscribe_async"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="196">Convenience wrapper for tp_connection_unsubscribe_async()
on a single contact.</doc>
        <source-position filename="contact-operations.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="198">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="199">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="200">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unsubscribe_finish"
              c:identifier="tp_contact_unsubscribe_finish"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-operations.c"
             line="215">Finishes tp_contact_unsubscribe_async()</doc>
        <source-position filename="contact-operations.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-operations.c"
               line="223">%TRUE if the operation was successful, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="217">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-operations.c"
                 line="218">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="alias"
                transfer-ownership="none"
                getter="get_alias"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1096">The contact's alias if available, falling back to their
#TpContact:identifier if no alias is available or if the #TpContact has
not been set up to track %TP_CONTACT_FEATURE_ALIAS.

This alias may have been supplied by the contact themselves, or by the
local user, so it does not necessarily unambiguously identify the contact.
However, it is suitable for use as a main "display name" for the contact.

This is never %NULL for contact objects that are visible to library-user
code.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="avatar-file"
                version="0.11.6"
                transfer-ownership="none"
                getter="get_avatar_file">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1136">#GFile to the latest cached avatar image, or %NULL if this contact has
no avatar, or if the avatar data is not yet retrieved.

When #TpContact:avatar-token changes, this property is not updated
immediately, but will be updated when the new avatar data is retrieved and
stored in cache. Until then, the file will keep its old value of the latest
cached avatar image.

This is set to %NULL if %TP_CONTACT_FEATURE_AVATAR_DATA is not set on this
contact. Note that setting %TP_CONTACT_FEATURE_AVATAR_DATA will also
implicitly set %TP_CONTACT_FEATURE_AVATAR_TOKEN.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="avatar-mime-type"
                version="0.11.6"
                transfer-ownership="none"
                getter="get_avatar_mime_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1161">MIME type of the latest cached avatar image, or %NULL if this contact has
no avatar, or if the avatar data is not yet retrieved.

This is always the MIME type of the image given by #TpContact:avatar-file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="avatar-token"
                transfer-ownership="none"
                getter="get_avatar_token"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1117">An opaque string representing state of the contact's avatar (depending on
the protocol, this might be a hash, a timestamp or something else), or
an empty string if there is no avatar.

This may be %NULL if it is not known whether this contact has an avatar
or not (either for network protocol reasons, or because this #TpContact
has not been set up to track %TP_CONTACT_FEATURE_AVATAR_TOKEN).</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="capabilities"
                version="0.11.3"
                transfer-ownership="none"
                getter="get_capabilities">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1285">The capabilities supported by this contact. If the underlying Connection
doesn't support the ContactCapabilities interface, this property will
contain the capabilities supported by the connection.
Use tp_capabilities_is_specific_to_contact() to check if the capabilities
are specific to this #TpContact or not.

This may be %NULL if this #TpContact object has not been set up to track
%TP_CONTACT_FEATURE_CAPABILITIES.</doc>
        <type name="Capabilities"/>
      </property>
      <property name="client-types"
                version="0.13.1"
                transfer-ownership="none"
                getter="get_client_types">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1325">A #GStrv containing the client types of this contact.

This is set to %NULL if %TP_CONTACT_FEATURE_CLIENT_TYPES is not
set on this contact; it may also be %NULL if that feature is prepared, but
the contact's client types are unknown.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="connection"
                transfer-ownership="none"
                getter="get_connection">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1043">The #TpConnection to which this contact belongs.</doc>
        <type name="Connection"/>
      </property>
      <property name="contact-groups"
                version="0.13.14"
                transfer-ownership="none"
                getter="get_contact_groups">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1406">a #GStrv with names of groups of which a contact is a member.

This is set to %NULL if %TP_CONTACT_FEATURE_CONTACT_GROUPS is not prepared
on this contact, or if the connection does not implement ContactGroups
interface.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="contact-info"
                version="0.11.7"
                transfer-ownership="none"
                getter="get_contact_info">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1307">A #GList of #TpContactInfoField representing the vCard of this contact.

This is set to %NULL if %TP_CONTACT_FEATURE_CONTACT_INFO is not set on this
contact.</doc>
        <type name="ContactInfoList"/>
      </property>
      <property name="handle"
                transfer-ownership="none"
                getter="get_handle"
                default-value="0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1054">The contact's handle in the Telepathy D-Bus API, a handle of type
%TP_HANDLE_TYPE_CONTACT representing the string
given by #TpContact:identifier.

This handle is referenced using the Telepathy D-Bus API and remains
referenced for as long as the #TpContact exists and the
#TpContact:connection remains valid.

However, getting this property does not cause an additional reference
to the handle to be held.

If the #TpContact:connection becomes invalid, this property is no longer
meaningful and will be set to 0.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="identifier"
                transfer-ownership="none"
                getter="get_identifier"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1078">The contact's identifier in the instant messaging protocol (e.g.
XMPP JID, SIP URI, AOL screenname or IRC nick - whatever the underlying
protocol uses to identify a user).

This is never %NULL for contact objects that are visible to library-user
code.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-blocked"
                version="0.17.0"
                transfer-ownership="none"
                getter="is_blocked"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1425">%TRUE if the contact has been blocked.

This is set to %FALSE if %TP_CONTACT_FEATURE_CONTACT_BLOCKING is not
prepared on this contact, or if the connection does not implement
ContactBlocking interface.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="location"
                version="0.11.1"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1238">If this contact has set a user-defined location, a string to
#GValue * hash table containing his location. If not, %NULL.
tp_asv_get_string() and similar functions can be used to access
the contents.

This may be %NULL even if the contact has set a location,
if this #TpContact object has not been set up to track
%TP_CONTACT_FEATURE_LOCATION.</doc>
        <type/>
      </property>
      <property name="location-vardict"
                version="0.19.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1260">If this contact has set a user-defined location, a string to
variant map containing his location. If not, %NULL.
tp_vardict_get_string() and similar functions can be used to access
the contents.

This may be %NULL even if the contact has set a location,
if this #TpContact object has not been set up to track
%TP_CONTACT_FEATURE_LOCATION.

This property contains the same information as #TpContact:location,
in a different format.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="presence-message"
                transfer-ownership="none"
                getter="get_presence_message">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1218">If this contact has set a user-defined status message, that message;
if not, an empty string (which user interfaces may replace with a
localized form of the #TpContact:presence-status or
#TpContact:presence-type).

This may be an empty string even if the contact has set a message,
if this #TpContact object has not been set up to track
%TP_CONTACT_FEATURE_PRESENCE. It is never %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="presence-status"
                transfer-ownership="none"
                getter="get_presence_status">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1199">A string representing the presence status of this contact. This may be
a well-known string from the Telepathy specification, like "available",
or a connection-manager-specific string, like "out-to-lunch".

This may be an empty string if this #TpContact object has not been set up
to track %TP_CONTACT_FEATURE_PRESENCE. It is never %NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="presence-type"
                transfer-ownership="none"
                getter="get_presence_type"
                default-value="0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1179">The #TpConnectionPresenceType representing the type of presence status
for this contact.

This is provided so even unknown values for #TpContact:presence-status
can be classified into their fundamental types.

This may be %TP_CONNECTION_PRESENCE_TYPE_UNSET if this #TpContact
has not been set up to track %TP_CONTACT_FEATURE_PRESENCE.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="publish-request"
                version="0.13.12"
                transfer-ownership="none"
                getter="get_publish_request"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1386">The message that contact sent when they requested permission to see the
local user's presence, if #TpContact:publish-state is
%TP_SUBSCRIPTION_STATE_ASK, an empty string ("") otherwise.

This is set to %NULL until %TP_CONTACT_FEATURE_SUBSCRIPTION_STATES has been
prepared, and it is guaranteed to be non-%NULL afterward.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="publish-state"
                version="0.13.12"
                transfer-ownership="none"
                getter="get_publish_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1365">A #TpSubscriptionState indicating the state of this contact's subscription
to the local user's presence.

This is set to %TP_SUBSCRIPTION_STATE_UNKNOWN until
%TP_CONTACT_FEATURE_SUBSCRIPTION_STATES has been prepared</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="subscribe-state"
                version="0.13.12"
                transfer-ownership="none"
                getter="get_subscribe_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1344">A #TpSubscriptionState indicating the state of the local user's
subscription to this contact's presence.

This is set to %TP_SUBSCRIPTION_STATE_UNKNOWN until
%TP_CONTACT_FEATURE_SUBSCRIPTION_STATES has been prepared</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="contact-groups-changed" when="last" version="0.13.14">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1443">Emitted when this contact's groups changes. When this signal is emitted,
#TpContact:contact-groups property is already updated.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="added" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1446">A #GStrv with added contact groups</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="removed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1447">A #GStrv with removed contact groups</doc>
            <array>
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="presence-changed" when="last" version="0.11.7">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1481">Emitted when this contact's presence changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1484">The new value of #TpContact:presence-type</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1485">The new value of #TpContact:presence-status</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1486">The new value of #TpContact:presence-message</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="subscription-states-changed"
                   when="last"
                   version="0.13.12">
        <doc xml:space="preserve"
             filename="contact.c"
             line="1462">Emitted when this contact's subscription states changes.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="subscribe" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1465">the new value of #TpContact:subscribe-state</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="publish" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1466">the new value of #TpContact:publish-state</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="publish_request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact.c"
                 line="1467">the new value of #TpContact:publish-request</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <bitfield name="ContactBlockingCapabilities"
              c:type="TpContactBlockingCapabilities">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="112">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="76"/>
      <member name="contact_blocking_capability_can_report_abusive"
              value="1"
              c:identifier="TP_CONTACT_BLOCKING_CAPABILITY_CAN_REPORT_ABUSIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="114">&lt;![CDATA[           When calling BlockContacts, the           contacts may be reporting as abusive to the server administrators by           setting Report_Abusive to True.         ]]&gt;</doc>
      </member>
    </bitfield>
    <record name="ContactClass"
            c:type="TpContactClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Contact">
      <source-position filename="contact.h" line="41"/>
    </record>
    <enumeration name="ContactFeature"
                 version="0.7.18"
                 c:type="TpContactFeature">
      <doc xml:space="preserve"
           filename="contact.c"
           line="102">Enumeration representing the features a #TpContact can optionally support.
When requesting a #TpContact, library users specify the desired features;
the #TpContact code will only initialize state for those features, to
avoid unwanted D-Bus round-trips and signal connections.

Since 0.11.5, there is a corresponding #GEnumClass type,
%TP_TYPE_CONTACT_FEATURE.</doc>
      <source-position filename="contact.h" line="74"/>
      <member name="alias" value="0" c:identifier="TP_CONTACT_FEATURE_ALIAS">
        <doc xml:space="preserve"
             filename="contact.c"
             line="104">#TpContact:alias</doc>
      </member>
      <member name="avatar_token"
              value="1"
              c:identifier="TP_CONTACT_FEATURE_AVATAR_TOKEN">
        <doc xml:space="preserve"
             filename="contact.c"
             line="105">#TpContact:avatar-token</doc>
      </member>
      <member name="presence"
              value="2"
              c:identifier="TP_CONTACT_FEATURE_PRESENCE">
        <doc xml:space="preserve"
             filename="contact.c"
             line="106">#TpContact:presence-type,
 #TpContact:presence-status and #TpContact:presence-message</doc>
      </member>
      <member name="location"
              value="3"
              c:identifier="TP_CONTACT_FEATURE_LOCATION">
        <doc xml:space="preserve"
             filename="contact.c"
             line="108">#TpContact:location (available since 0.11.1)
 and #TpContact:location-vardict (since 0.19.10)</doc>
      </member>
      <member name="capabilities"
              value="4"
              c:identifier="TP_CONTACT_FEATURE_CAPABILITIES">
        <doc xml:space="preserve"
             filename="contact.c"
             line="110">#TpContact:capabilities
 (available since 0.11.3)</doc>
      </member>
      <member name="avatar_data"
              value="5"
              c:identifier="TP_CONTACT_FEATURE_AVATAR_DATA">
        <doc xml:space="preserve"
             filename="contact.c"
             line="112">#TpContact:avatar-file and
 #TpContact:avatar-mime-type. Implies %TP_CONTACT_FEATURE_AVATAR_TOKEN
 (available since 0.11.6)</doc>
      </member>
      <member name="contact_info"
              value="6"
              c:identifier="TP_CONTACT_FEATURE_CONTACT_INFO">
        <doc xml:space="preserve"
             filename="contact.c"
             line="115">#TpContact:contact-info
 (available since 0.11.7)</doc>
      </member>
      <member name="client_types"
              value="7"
              c:identifier="TP_CONTACT_FEATURE_CLIENT_TYPES">
        <doc xml:space="preserve"
             filename="contact.c"
             line="117">#TpContact:client-types
 (available since 0.13.1)</doc>
      </member>
      <member name="subscription_states"
              value="8"
              c:identifier="TP_CONTACT_FEATURE_SUBSCRIPTION_STATES">
        <doc xml:space="preserve"
             filename="contact.c"
             line="119">#TpContact:subscribe-state,
 #TpContact:publish-state and #TpContact:publish-request. Require a
 Connection implementing the %TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST
 interface. (available since 0.13.12)</doc>
      </member>
      <member name="contact_groups"
              value="9"
              c:identifier="TP_CONTACT_FEATURE_CONTACT_GROUPS">
        <doc xml:space="preserve"
             filename="contact.c"
             line="123">#TpContact:contact-groups
 (available since 0.13.14)</doc>
      </member>
      <member name="contact_blocking"
              value="10"
              c:identifier="TP_CONTACT_FEATURE_CONTACT_BLOCKING">
        <doc xml:space="preserve"
             filename="contact.c"
             line="125">#TpContact:is-blocked. Require
 Connection implementing the %TP_IFACE_CONNECTION_INTERFACE_CONTACT_BLOCKING
 interface. (available since 0.17.0)</doc>
      </member>
    </enumeration>
    <record name="ContactInfoField"
            c:type="TpContactInfoField"
            version="0.11.7"
            glib:type-name="TpContactInfoField"
            glib:get-type="tp_contact_info_field_get_type"
            c:symbol-prefix="contact_info_field">
      <doc xml:space="preserve"
           filename="connection-contact-info.c"
           line="190">A structure representing an information about a contact. Similar to a vCard
field.</doc>
      <source-position filename="connection.h" line="75"/>
      <field name="field_name" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="192">The name of the field; this is the lowercased name of a vCard
 field. For example, a field representing a contact's address would be named
 "adr".</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="parameters" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="195">A list of vCard type parameters applicable to this field,
 with their values. The type parameter names, and any values that are
 case-insensitive in vCard, MUST be in lower case. For example, a contact's
 preferred home address would have parameters 'type=home' and 'type=pref'.</doc>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </field>
      <field name="field_value" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="199">For unstructured vCard fields (such as 'fn', a formatted name
 field), a single-element array containing the field's value. For structured
 fields (such as 'adr', an address field), an array corresponding to the
 semicolon-separated elements of the field (with empty strings for empty
 elements).</doc>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <constructor name="new"
                   c:identifier="tp_contact_info_field_new"
                   version="0.11.7">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="211">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="228">a newly allocated #TpContactInfoField, free it with
tp_contact_info_field_free()</doc>
          <type name="ContactInfoField" c:type="TpContactInfoField*"/>
        </return-value>
        <parameters>
          <parameter name="field_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="213">The name of the field; this is the lowercased name of a vCard
 field. For example, a field representing a contact's address would be named
 "adr".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="216">A list of vCard type parameters applicable to this field,
 with their values. The type parameter names, and any values that are
 case-insensitive in vCard, MUST be in lower case. For example, a contact's
 preferred home address would have parameters 'type=home' and 'type=pref'.</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
          <parameter name="field_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="220">For unstructured vCard fields (such as 'fn', a formatted name
 field), a single-element array containing the field's value. For structured
 fields (such as 'adr', an address field), an array corresponding to the
 semicolon-separated elements of the field (with empty strings for empty
 elements).</doc>
            <array c:type="GStrv">
              <type name="utf8"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="tp_contact_info_field_copy"
              version="0.11.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="248">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="254">a newly allocated #TpContactInfoField, free it with
 tp_contact_info_field_free()</doc>
          <type name="ContactInfoField" c:type="TpContactInfoField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="250">a #TpContactInfoField</doc>
            <type name="ContactInfoField" c:type="const TpContactInfoField*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="tp_contact_info_field_free"
              version="0.11.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="267">Free all memory used by the #TpContactInfoField.</doc>
        <source-position filename="connection.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="269">a #TpContactInfoField</doc>
            <type name="ContactInfoField" c:type="TpContactInfoField*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="ContactInfoFieldFlags" c:type="TpContactInfoFieldFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="127">&lt;![CDATA[         Flags describing the behaviour of a vCard field.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="86"/>
      <member name="parameters_exact"
              value="1"
              c:identifier="TP_CONTACT_INFO_FIELD_FLAG_PARAMETERS_EXACT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="129">&lt;![CDATA[           If present, exactly the parameters indicated must be set on this             field; in the case of an empty list of parameters, this implies that             parameters may not be used.            If absent, and the list of allowed parameters is non-empty,             any (possibly empty) subset of that list may be             used.            If absent, and the list of allowed parameters is empty,             any parameters may be used.         ]]&gt;</doc>
      </member>
      <member name="overwritten_by_nickname"
              value="2"
              c:identifier="TP_CONTACT_INFO_FIELD_FLAG_OVERWRITTEN_BY_NICKNAME">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="130">&lt;![CDATA[           Indicates that this field will be overwritten when the user's alias             is changed with SetAliases             or when the Account's Nickname             is updated.  Clients that allow the editing of the Alias and the             ContactInfo in the same location should hide fields with this flag.                        If a client allowed the user to edit both the nickname and the               ContactInfo field at the same time, the user could set them to two               different values even though they map to the same property.  This               would result in surprising behavior where the second value would               win over the first.                      In addition to hiding this field when editing ContactInfo together             with the user's nickname, it is recommended that clients call             SetContactInfo before setting the             user's nickname.                        This ensures that if the user changes the nickname, the correct               value will get set even if the stale nickname is mistakenly sent               along with SetContactInfo.                      If used, this flag typically appears on either the 'nickname' or             'fn' field.         ]]&gt;</doc>
      </member>
    </bitfield>
    <record name="ContactInfoFieldSpec"
            c:type="TpContactInfoFieldSpec"
            version="0.11.7"
            glib:type-name="TpContactInfoFieldSpec"
            glib:get-type="tp_contact_info_field_spec_get_type"
            c:symbol-prefix="contact_info_field_spec">
      <doc xml:space="preserve"
           filename="connection-contact-info.c"
           line="40">A struct describing a vCard field.</doc>
      <source-position filename="connection.h" line="47"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="42">The name of the field; this is the lowercased name of a vCard
 field. For example, a field representing a contact's address would be named
 "adr".</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="parameters" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="45">The set of vCard type parameters which may be set on this field.
 If this list is empty and the #TP_CONTACT_INFO_FIELD_FLAG_PARAMETERS_EXACT
 flag is not set, any vCard type parameters may be used. The type parameter
 names, and any values that are case-insensitive in vCard, MUST be in lower
 case. For example, a contact's preferred home address would have parameters
 'type=home' and 'type=pref'.</doc>
        <array c:type="GStrv">
          <type name="utf8"/>
        </array>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="51">Flags describing the behaviour of this field.</doc>
        <type name="ContactInfoFieldFlags" c:type="TpContactInfoFieldFlags"/>
      </field>
      <field name="max" writable="1">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="52">Maximum number of instances of this field which may be set.
 #G_MAXUINT32 is used to indicate that there is no limit.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="copy"
              c:identifier="tp_contact_info_field_spec_copy"
              version="0.11.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="99">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="51"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="105">a newly allocated #TpContactInfoFieldSpec, free it with
 tp_contact_info_field_spec_free()</doc>
          <type name="ContactInfoFieldSpec" c:type="TpContactInfoFieldSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="101">a #TpContactInfoFieldSpec</doc>
            <type name="ContactInfoFieldSpec"
                  c:type="const TpContactInfoFieldSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="tp_contact_info_field_spec_free"
              version="0.11.7"
              introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="118">Free all memory used by the #TpContactInfoFieldSpec.</doc>
        <source-position filename="connection.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="120">a #TpContactInfoFieldSpec</doc>
            <type name="ContactInfoFieldSpec"
                  c:type="TpContactInfoFieldSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="ContactInfoFlags" c:type="TpContactInfoFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="118">&lt;![CDATA[         Flags defining the behaviour of contact information on this protocol.         Some protocols provide no information on contacts without an explicit         request; others always push information to the connection manager as         and when it changes.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="81"/>
      <member name="can_set"
              value="1"
              c:identifier="TP_CONTACT_INFO_FLAG_CAN_SET">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="120">&lt;![CDATA[           Indicates that SetContactInfo is           supported on this connection.         ]]&gt;</doc>
      </member>
      <member name="push" value="2" c:identifier="TP_CONTACT_INFO_FLAG_PUSH">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="121">&lt;![CDATA[           Indicates that the protocol pushes all contacts' information to the           connection manager without prompting. If set,           ContactInfoChanged will be emitted           whenever contacts' information changes.         ]]&gt;</doc>
      </member>
    </bitfield>
    <glib:boxed glib:name="ContactInfoList"
                c:symbol-prefix="contact_info_list"
                glib:type-name="TpContactInfoList"
                glib:get-type="tp_contact_info_list_get_type">
      <function name="copy"
                c:identifier="tp_contact_info_list_copy"
                version="0.11.7"
                introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="298">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="92"/>
        <return-value>
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="304">a new #GList of newly allocated #TpContactInfoField, free it with
 tp_contact_info_list_free()</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="300">a #GList of #TpContactInfoField</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="free"
                c:identifier="tp_contact_info_list_free"
                version="0.11.7"
                introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="315">Free all memory used by the #GList and its elements.</doc>
        <source-position filename="connection.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="317">a #GList of #TpContactInfoField</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
    </glib:boxed>
    <glib:boxed glib:name="ContactInfoSpecList"
                c:symbol-prefix="contact_info_spec_list"
                glib:type-name="TpContactInfoSpecList"
                glib:get-type="tp_contact_info_spec_list_get_type">
      <function name="copy"
                c:identifier="tp_contact_info_spec_list_copy"
                version="0.11.7"
                introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="148">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="connection.h" line="63"/>
        <return-value>
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="154">a new #GList of newly allocated #TpContactInfoFieldSpec,
 free it with tp_contact_info_spec_list_free()</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="150">a #GList of #TpContactInfoFieldSpec</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="free"
                c:identifier="tp_contact_info_spec_list_free"
                version="0.11.7"
                introspectable="0">
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="165">Free all memory used by the #GList and its elements.</doc>
        <source-position filename="connection.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="connection-contact-info.c"
                 line="167">a #GList of #TpContactInfoFieldSpec</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
    </glib:boxed>
    <enumeration name="ContactListState" c:type="TpContactListState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="136">&lt;![CDATA[         The progress made in retrieving the contact list.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="93"/>
      <member name="none" value="0" c:identifier="TP_CONTACT_LIST_STATE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="138">&lt;![CDATA[The connection has not started to retrieve the contact           list. If GetContactListAttributes is           called in this state, it will raise NotYet.]]&gt;</doc>
      </member>
      <member name="waiting"
              value="1"
              c:identifier="TP_CONTACT_LIST_STATE_WAITING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="139">&lt;![CDATA[The connection has started to retrieve the contact           list, but has not yet succeeded or failed.           If GetContactListAttributes is called           in this state, it will raise NotYet.]]&gt;</doc>
      </member>
      <member name="failure"
              value="2"
              c:identifier="TP_CONTACT_LIST_STATE_FAILURE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="140">&lt;![CDATA[           The connection has tried and failed to retrieve the contact             list. If GetContactListAttributes             is called in this state, it will immediately raise an error             indicating the reason for failure.            The connection manager SHOULD try again to obtain the contact             list, if appropriate for the protocol. If it succeeds later,             the ContactListState MUST advance             to Success.         ]]&gt;</doc>
      </member>
      <member name="success"
              value="3"
              c:identifier="TP_CONTACT_LIST_STATE_SUCCESS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="141">&lt;![CDATA[The connection has successfully retrieved the contact           list. If GetContactListAttributes           is called in this state, it will return successfully.]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="ContactMetadataStorageType"
                 c:type="TpContactMetadataStorageType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="183">&lt;![CDATA[         Values of this enumeration indicate the extent to which metadata           such as aliases and group memberships can be stored for the contacts           on a particular connection.          On some protocols, certain metadata (for instance, contact aliases)           can only be stored for contacts on the contact list, or contacts           with a particular contact list state.          To make it easier to deal with such protocols, if clients set           metadata on a contact who is not in the required state, the           Connection MUST cache the metadata for the duration of the session.           If clients request the attributes of that contact after the           appropriate "set" method has returned successfully, the Connection           MUST return the new (cached) value.          If the contact is later placed in the required state to store           metadata (for instance, if subscription to the contact's presence           is requested, on a protocol like MSN where the alias has storage type           Subscribed_Or_Pending), the connection MUST store the cached           metadata at that time.                     If the Connection didn't cache changes in this way, a client             intending to change the alias on MSN would have to wait until             the server acknowledged the subscription request; in the meantime,             other clients would still display the old alias.                   The only exception to that general rule is that if the Connection           cannot store particular metadata at all (i.e. the           storage type is None), it MUST reject attempts to set it.                     If the implementation knows that metadata can't be stored at             all, it's useful to report that, which can be done             synchronously. In general, user interfaces should detect             storage type None and not display editing controls at all.                ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="112"/>
      <member name="none"
              value="0"
              c:identifier="TP_CONTACT_METADATA_STORAGE_TYPE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="185">&lt;![CDATA[           This connection cannot store this type of metadata at all, and             attempting to do so will fail with NotImplemented.                         Link-local XMPP can't store aliases or group memberships at               all, and subscription and presence states are implicit (all               contacts on the local network have subscribe = publish = Yes               and no other contacts exist).              As of April 2010, the XMPP server for Facebook Chat provides a               read-only view of the user's Facebook contacts, so it could also               usefully have this storage type.                    ]]&gt;</doc>
      </member>
      <member name="subscribed_or_pending"
              value="1"
              c:identifier="TP_CONTACT_METADATA_STORAGE_TYPE_SUBSCRIBED_OR_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="186">&lt;![CDATA[           This type of metadata can only be stored permanently for contacts             whose subscribe attribute is Ask or Yes.                         Contact aliases and groups on MSN have this behaviour.                    ]]&gt;</doc>
      </member>
      <member name="subscribed"
              value="2"
              c:identifier="TP_CONTACT_METADATA_STORAGE_TYPE_SUBSCRIBED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="187">&lt;![CDATA[           This type of metadata can only be stored permanently for contacts             whose subscribe attribute is Yes.                         No service with this behaviour is currently known, but it's a               stricter form of Subscribed_Or_Pending.                    ]]&gt;</doc>
      </member>
      <member name="anyone"
              value="3"
              c:identifier="TP_CONTACT_METADATA_STORAGE_TYPE_ANYONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="188">&lt;![CDATA[           The user can set this metadata for any valid contact identifier,             whether or not they have any presence subscription relationship             to it, and it will be stored on their contact list.                         Contact aliases and groups on XMPP have this behaviour; it               is possible to put a contact in a group, or assign an alias               to them, without requesting that presence be shared.                    ]]&gt;</doc>
      </member>
    </enumeration>
    <record name="ContactPrivate"
            c:type="TpContactPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="contact.h" line="42"/>
    </record>
    <class name="ContactSearch"
           c:symbol-prefix="contact_search"
           c:type="TpContactSearch"
           version="0.13.11"
           parent="GObject.Object"
           glib:type-name="TpContactSearch"
           glib:get-type="tp_contact_search_get_type"
           glib:type-struct="ContactSearchClass">
      <doc xml:space="preserve"
           filename="contact-search.c"
           line="73">An object for Telepathy contact searches.
There are no interesting public struct fields.</doc>
      <source-position filename="contact-search.h" line="68"/>
      <implements name="Gio.AsyncInitable"/>
      <constructor name="new_finish"
                   c:identifier="tp_contact_search_new_finish"
                   version="0.13.11"
                   throws="1">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="529">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="contact-search.c"
               line="536">a new contact search object, or %NULL
in case of error.</doc>
          <type name="ContactSearch" c:type="TpContactSearch*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="531">the #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async"
                c:identifier="tp_contact_search_new_async"
                version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="495">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="497">an account for the contact search</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="498">the server on which to search for contacts, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="499">The maximum number of results the server should return,
or 0 for the server default.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="501">a #GAsyncReadyCallback to call when the initialization
is finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="503">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_account"
              c:identifier="tp_contact_search_get_account"
              glib:get-property="account"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="693">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search.c"
               line="699">The TpContactSearch:account property</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="695">a contact search object</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit"
              c:identifier="tp_contact_search_get_limit"
              glib:get-property="limit"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="729">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search.c"
               line="735">The TpContactSearch:limit property</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="731">a contact search object</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_search_keys"
              c:identifier="tp_contact_search_get_search_keys"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="669">Get the search keys for a contact search.
The keys are vCard field names in lower case, except when
they're one of the special cases from telepathy-spec like
"tel;cell" or "x-n-given". See the
&lt;ulink url="http://telepathy.freedesktop.org/spec/Channel_Type_Contact_Search.html"&gt;
Channel.Type.ContactSearch interface&lt;/ulink&gt;
for a list of the special cases.</doc>
        <source-position filename="contact-search.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search.c"
               line="681">the new search keys, or %NULL.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="671">the contact search object to get the keys from</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server"
              c:identifier="tp_contact_search_get_server"
              glib:get-property="server"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="711">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search.c"
               line="717">The TpContactSearch:server property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="713">a contact search object</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset_async"
              c:identifier="tp_contact_search_reset_async"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="559">Resets the contact search object so a new search can be performed.
If another tp_contact_search_reset_async() call is in progress,
it will be cancelled and tp_contact_search_reset_finish() will
return an appropriate error.</doc>
        <source-position filename="contact-search.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="561">the #TpContactSearch to reset</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
          <parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="562">the server on which to search for contacts, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="limit" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="563">The maximum number of results the server should return,
or 0 for the server default.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="565">a #GAsyncReadyCallback to call when the initialization
is finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="567">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset_finish"
              c:identifier="tp_contact_search_reset_finish"
              version="0.13.11"
              throws="1">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="607">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search.c"
               line="615">the new search keys, or %NULL
in case of error.</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="609">the #TpContactSearch that is being reset</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="610">the #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="tp_contact_search_start"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="640">Starts a search for the keys specified in @criteria. Connect
to the #TpContactSearch::search-results-received signal
before calling this function.

Before searching again on the same #TpContactSearch, you must
call tp_contact_search_reset_async().</doc>
        <source-position filename="contact-search.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="642">a #TpContactSearch</doc>
            <type name="ContactSearch" c:type="TpContactSearch*"/>
          </instance-parameter>
          <parameter name="criteria" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="643">a map
from keys returned by tp_contact_search_get_search_keys()
to values to search for</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.13.11"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_account">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="387">This search's account.</doc>
        <type name="Account"/>
      </property>
      <property name="limit"
                version="0.13.11"
                writable="1"
                transfer-ownership="none"
                getter="get_limit"
                default-value="0">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="422">The maximum number of results that the server should return.
This is only supported by some protocols; use
tp_capabilities_supports_contact_search() to check if it's
supported.

To change the limit after the object has been constructed,
use tp_contact_search_reset_async().</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="server"
                version="0.13.11"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_server"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="402">The search server. This is only supported by some protocols;
use tp_capabilities_supports_contact_search() to check if it's
supported.

To change the server after the object has been constructed,
use tp_contact_search_reset_async().</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                version="0.13.11"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="445">This search's state, as a %TpChannelContactSearchState.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ContactSearchPrivate" c:type="TpContactSearchPrivate*"/>
      </field>
      <glib:signal name="search-results-received"
                   when="last"
                   version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search.c"
             line="462">Emitted when search results are received. Note that this signal may
be emitted multiple times for the same search.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="results" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search.c"
                 line="465">
a #GList with the search results</doc>
            <type name="GLib.List" c:type="gpointer">
              <type name="ContactSearchResult"/>
            </type>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ContactSearchClass"
            c:type="TpContactSearchClass"
            glib:is-gtype-struct-for="ContactSearch"
            version="0.13.11">
      <doc xml:space="preserve"
           filename="contact-search.c"
           line="65">The class of a #TpContactSearch.</doc>
      <source-position filename="contact-search.h" line="68"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="ContactSearchPrivate"
            c:type="TpContactSearchPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="contact-search.h" line="53"/>
    </record>
    <class name="ContactSearchResult"
           c:symbol-prefix="contact_search_result"
           c:type="TpContactSearchResult"
           version="0.13.11"
           parent="GObject.Object"
           glib:type-name="TpContactSearchResult"
           glib:get-type="tp_contact_search_result_get_type"
           glib:type-struct="ContactSearchResultClass">
      <doc xml:space="preserve"
           filename="contact-search-result.c"
           line="56">An object representing the results of a Telepathy contact
search channel.
There are no interesting public struct fields.</doc>
      <source-position filename="contact-search-result.h" line="66"/>
      <method name="dup_fields"
              c:identifier="tp_contact_search_result_dup_fields"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="contact-search-result.c"
             line="265">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search-result.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="contact-search-result.c"
               line="271">
 a #GList of #TpContactInfoField for the specified contact. You should free
 it when you're done with tp_contact_info_list_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ContactInfoField"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search-result.c"
                 line="267">a search result</doc>
            <type name="ContactSearchResult" c:type="TpContactSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_field"
              c:identifier="tp_contact_search_result_get_field"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search-result.c"
             line="218">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search-result.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search-result.c"
               line="225">the specified field, or %NULL if the
result doesn't have it.</doc>
          <type name="ContactInfoField" c:type="TpContactInfoField*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search-result.c"
                 line="220">a #TpContactSearchResult</doc>
            <type name="ContactSearchResult" c:type="TpContactSearchResult*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search-result.c"
                 line="221">the name of the field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_fields"
              c:identifier="tp_contact_search_result_get_fields"
              deprecated="1">
        <doc xml:space="preserve"
             filename="contact-search-result.c"
             line="245">&lt;!-- --&gt;</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_contact_search_result_dup_fields() instead.</doc-deprecated>
        <source-position filename="contact-search-result.h" line="76"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="contact-search-result.c"
               line="251">
 a #GList of #TpContactInfoField for the specified contact. You should free
 it when you're done with g_list_free().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ContactInfoField"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search-result.c"
                 line="247">a search result</doc>
            <type name="ContactSearchResult" c:type="TpContactSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identifier"
              c:identifier="tp_contact_search_result_get_identifier"
              glib:get-property="identifier"
              version="0.13.11">
        <doc xml:space="preserve"
             filename="contact-search-result.c"
             line="200">&lt;!-- --&gt;</doc>
        <source-position filename="contact-search-result.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contact-search-result.c"
               line="206">the contact identifier.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contact-search-result.c"
                 line="202">a #TpContactSearchResult</doc>
            <type name="ContactSearchResult" c:type="TpContactSearchResult*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="identifier"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_identifier"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ContactSearchResultPrivate"
              c:type="TpContactSearchResultPrivate*"/>
      </field>
    </class>
    <record name="ContactSearchResultClass"
            c:type="TpContactSearchResultClass"
            glib:is-gtype-struct-for="ContactSearchResult"
            version="0.13.11">
      <doc xml:space="preserve"
           filename="contact-search-result.c"
           line="48">The class of a #TpContactSearchResult.</doc>
      <source-position filename="contact-search-result.h" line="66"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="ContactSearchResultPrivate"
            c:type="TpContactSearchResultPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="contact-search-result.h" line="51"/>
    </record>
    <record name="ContactsMixin" c:type="TpContactsMixin">
      <doc xml:space="preserve"
           filename="contacts-mixin.h"
           line="68">Structure to be included in the instance structure of objects that
use this mixin. Initialize it with tp_contacts_mixin_init().

There are no public fields.</doc>
      <source-position filename="contacts-mixin.h" line="79"/>
      <field name="priv" readable="0" private="1">
        <type name="ContactsMixinPrivate" c:type="TpContactsMixinPrivate*"/>
      </field>
      <function name="add_contact_attributes_iface"
                c:identifier="tp_contacts_mixin_add_contact_attributes_iface"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="481">Declare that the given interface has contact attributes which can be added
to the attributes hash using the filler function. All the handles in the
handle array passed to the filler function are guaranteed to be valid and
referenced.</doc>
        <source-position filename="contacts-mixin.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="483">An instance of the implementation that uses this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="484">Name of the interface that has ContactAttributes</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fill_contact_attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="485">Contact attribute filler function</doc>
            <type name="ContactsMixinFillContactAttributesFunc"
                  c:type="TpContactsMixinFillContactAttributesFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="finalize"
                c:identifier="tp_contacts_mixin_finalize"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="251">Free resources held by the contacts mixin.</doc>
        <source-position filename="contacts-mixin.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="253">An object with this mixin.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_contact_attributes"
                c:identifier="tp_contacts_mixin_get_contact_attributes"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="272">Get contact attributes for the given contacts. Provide attributes for all requested
interfaces. If contact attributes are not immediately known, the behaviour is defined
by the interface; the attribute should either be omitted from the result or replaced
with a default value.</doc>
        <source-position filename="contacts-mixin.h" line="113"/>
        <return-value>
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="291">A dictionary mapping the contact handles to contact attributes.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="274">A connection instance that uses this mixin. The connection must be connected.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="275">List of handles to retrieve contacts for. Any invalid handles will be
dropped from the returned mapping.</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="interfaces" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="277">A list of interfaces to retrieve attributes from.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="assumed_interfaces" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="278">A list of additional interfaces to retrieve attributes
 from. This can be used for interfaces documented as automatically included,
 like %TP_IFACE_CONNECTION for GetContactAttributes,
 or %TP_IFACE_CONNECTION and %TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST for
 GetContactListAttributes.</doc>
            <type name="utf8" c:type="const gchar**"/>
          </parameter>
          <parameter name="sender" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="283">The DBus client's unique name. If this is not NULL, the requested handles
will be held on behalf of this client.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_offset_quark"
                c:identifier="tp_contacts_mixin_get_offset_quark"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="161">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
        <source-position filename="contacts-mixin.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="166">the quark used for storing mixin offset on a GObject</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="iface_init"
                c:identifier="tp_contacts_mixin_iface_init"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="455">Fill in the vtable entries needed to implement the contacts interface
using this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</doc>
        <source-position filename="contacts-mixin.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_iface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="457">A pointer to the #TpSvcConnectionInterfaceContacts in an object
class</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="iface_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="459">Ignored</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="init"
                c:identifier="tp_contacts_mixin_init"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="217">Initialize the contacts mixin. Should be called from the implementation's
instance init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_contacts_mixin_init ((GObject *) self,
                    G_STRUCT_OFFSET (SomeObject, contacts_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="contacts-mixin.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="219">An instance of the implementation that uses this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="220">The byte offset of the TpContactsMixin within the object structure</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_contact_attribute"
                c:identifier="tp_contacts_mixin_set_contact_attribute"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="510">Utility function to set attribute for handle to value in the attributes hash
as passed to a TpContactsMixinFillContactAttributesFunc.</doc>
        <source-position filename="contacts-mixin.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="contact_attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="512">contacts attribute hash as passed to
  TpContactsMixinFillContactAttributesFunc</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="514">Handle to set the attribute on</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="attribute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="515">attribute name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="516">slice allocated GValue containing the value of the attribute, for
instance with tp_g_value_slice_new. Ownership of the GValue is taken over by
the mixin</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ContactsMixinClass" c:type="TpContactsMixinClass">
      <doc xml:space="preserve"
           filename="contacts-mixin.h"
           line="55">Structure to be included in the class structure of objects that
use this mixin. Initialize it with tp_contacts_mixin_class_init().

There are no public fields.</doc>
      <source-position filename="contacts-mixin.h" line="66"/>
      <field name="priv" readable="0" private="1">
        <type name="ContactsMixinClassPrivate"
              c:type="TpContactsMixinClassPrivate*"/>
      </field>
      <function name="get_offset_quark"
                c:identifier="tp_contacts_mixin_class_get_offset_quark"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="139">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
        <source-position filename="contacts-mixin.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="144">the quark used for storing mixin offset on a GObjectClass</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init"
                c:identifier="tp_contacts_mixin_class_init"
                version="0.7.14"
                introspectable="0">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="183">Initialize the contacts mixin. Should be called from the implementation's
class_init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_contacts_mixin_class_init ((GObjectClass *) klass,
                         G_STRUCT_OFFSET (SomeObjectClass, contacts_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="contacts-mixin.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj_cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="185">The class of the implementation that uses this mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="contacts-mixin.c"
                 line="186">The byte offset of the TpContactsMixinClass within the class
         structure</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="ContactsMixinClassPrivate"
            c:type="TpContactsMixinClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="contacts-mixin.h" line="36"/>
    </record>
    <callback name="ContactsMixinFillContactAttributesFunc"
              c:type="TpContactsMixinFillContactAttributesFunc"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.h"
           line="40">This function is called to supply contact attributes pertaining to
a particular interface, for a list of contacts.
All the handles in @contacts are guaranteed to be valid and
referenced.</doc>
      <source-position filename="contacts-mixin.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.h"
               line="42">An object implementing the Contacts interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.h"
               line="43">The contact handles for which attributes are requested</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="attributes_hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.h"
               line="44">hash of handle =&gt; hash of attributes, containing all the
contacts in the contacts array</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </callback>
    <record name="ContactsMixinPrivate"
            c:type="TpContactsMixinPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="contacts-mixin.h" line="38"/>
    </record>
    <function-macro name="DBUS_DAEMON"
                    c:identifier="TP_DBUS_DAEMON"
                    introspectable="0">
      <source-position filename="dbus-daemon.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DAEMON_CLASS"
                    c:identifier="TP_DBUS_DAEMON_CLASS"
                    introspectable="0">
      <source-position filename="dbus-daemon.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_DAEMON_GET_CLASS"
                    c:identifier="TP_DBUS_DAEMON_GET_CLASS"
                    introspectable="0">
      <source-position filename="dbus-daemon.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_TUBE_CHANNEL"
                    c:identifier="TP_DBUS_TUBE_CHANNEL"
                    introspectable="0">
      <source-position filename="dbus-tube-channel.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_TUBE_CHANNEL_CLASS"
                    c:identifier="TP_DBUS_TUBE_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="dbus-tube-channel.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DBUS_TUBE_CHANNEL_GET_CLASS"
                    c:identifier="TP_DBUS_TUBE_CHANNEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="dbus-tube-channel.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="DBusDaemon"
           c:symbol-prefix="dbus_daemon"
           c:type="TpDBusDaemon"
           version="0.7.1"
           parent="Proxy"
           glib:type-name="TpDBusDaemon"
           glib:get-type="tp_dbus_daemon_get_type"
           glib:type-struct="DBusDaemonClass">
      <doc xml:space="preserve"
           filename="dbus-daemon.c"
           line="54">A subclass of #TpProxy that represents the D-Bus daemon. It mainly provides
functionality to manage well-known names on the bus.</doc>
      <source-position filename="dbus-daemon.h" line="36"/>
      <constructor name="new"
                   c:identifier="tp_dbus_daemon_new"
                   version="0.7.1"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="122">Returns a proxy for signals and method calls on a particular bus
connection.

Use tp_dbus_daemon_dup() instead if you just want a connection to the
starter or session bus (which is almost always the right thing for
Telepathy).</doc>
        <source-position filename="dbus-daemon.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="133">a new proxy for signals and method calls on the bus daemon
 to which @connection is connected</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="124">a connection to D-Bus</doc>
            <type c:type="DBusGConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="dup"
                c:identifier="tp_dbus_daemon_dup"
                version="0.7.26"
                throws="1">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="82">Returns a proxy for signals and method calls on the D-Bus daemon on which
this process was activated (if it was launched by D-Bus service
activation), or the session bus (otherwise).

If it is not possible to connect to the appropriate bus, raise an error
and return %NULL.

The returned #TpDBusDaemon is cached; the same #TpDBusDaemon object will
be returned by this function repeatedly, as long as at least one reference
exists.</doc>
        <source-position filename="dbus-daemon.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="97">a reference to a proxy for signals and method
 calls on the bus daemon, or %NULL</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_dbus_daemon_init_known_interfaces"
                version="0.7.32">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="1381">Ensure that the known interfaces for TpDBusDaemon have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_DBUS_DAEMON.</doc>
        <source-position filename="dbus-daemon.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="cancel_name_owner_watch"
              c:identifier="tp_dbus_daemon_cancel_name_owner_watch"
              version="0.7.1"
              introspectable="0">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="605">If there was a previous call to tp_dbus_daemon_watch_name_owner()
with exactly the given @name, @callback and @user_data, remove it.

If more than one watch matching the details provided was active, remove
only the most recently added one.</doc>
        <source-position filename="dbus-daemon.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="618">%TRUE if there was such a watch, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="607">the D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="608">the name that was being watched</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback" transfer-ownership="none" closure="2">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="609">the callback that was called</doc>
            <type name="DBusDaemonNameOwnerChangedCb"
                  c:type="TpDBusDaemonNameOwnerChangedCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="610">the user data that was provided</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_unique_name"
              c:identifier="tp_dbus_daemon_get_unique_name"
              version="0.7.35">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="958">&lt;!-- Returns: is enough --&gt;</doc>
        <source-position filename="dbus-daemon.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="964">the unique name of this connection to the bus, which is valid for
 as long as this #TpDBusDaemon is</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="960">object representing a connection to a bus</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_activatable_names"
              c:identifier="tp_dbus_daemon_list_activatable_names"
              version="0.7.35">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="1216">Call the ListActivatableNames method on the bus daemon, asynchronously.
The @callback will be called from the main loop with a list of all the
well-known names that are available for service-activation on the bus.

In versions of telepathy-glib that have it, this should be preferred
instead of calling tp_cli_dbus_daemon_call_list_activatable_names(), since
that function will result in wakeups for every NameOwnerChanged signal.</doc>
        <source-position filename="dbus-daemon.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1218">object representing a connection to a bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1219">timeout for the call</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1220">callback to be called on success or failure; must not be %NULL</doc>
            <type name="DBusDaemonListNamesCb"
                  c:type="TpDBusDaemonListNamesCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1221">opaque user-supplied data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1222">if not %NULL, called with @user_data as argument after the call
 has succeeded or failed, or after @weak_object has been destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1224">if not %NULL, a GObject which will be weakly referenced; if
 it is destroyed, @callback will not be called at all</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_names"
              c:identifier="tp_dbus_daemon_list_names"
              version="0.7.35">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="1183">Call the ListNames method on the bus daemon, asynchronously. The @callback
will be called from the main loop with a list of all the names (either
unique or well-known) that exist on the bus.

In versions of telepathy-glib that have it, this should be preferred
instead of calling tp_cli_dbus_daemon_call_list_names(), since that
function will result in wakeups for every NameOwnerChanged signal.</doc>
        <source-position filename="dbus-daemon.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1185">object representing a connection to a bus</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="timeout_ms" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1186">timeout for the call</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1187">callback to be called on success or failure; must not be %NULL</doc>
            <type name="DBusDaemonListNamesCb"
                  c:type="TpDBusDaemonListNamesCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1188">opaque user-supplied data to pass to the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1189">if not %NULL, called with @user_data as argument after the call
 has succeeded or failed, or after @weak_object has been destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
          <parameter name="weak_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="1191">if not %NULL, a GObject which will be weakly referenced; if
 it is destroyed, @callback will not be called at all</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_object"
              c:identifier="tp_dbus_daemon_register_object"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="909">Export @object at @object_path. This is a convenience wrapper around
dbus_g_connection_register_g_object(), and behaves similarly.</doc>
        <source-position filename="dbus-daemon.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="911">object representing a connection to a bus</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="912">an object path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="913">an object to export</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_name"
              c:identifier="tp_dbus_daemon_release_name"
              version="0.7.30"
              throws="1">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="834">Release the given well-known name. This makes a synchronous call to the bus
daemon.</doc>
        <source-position filename="dbus-daemon.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="843">%TRUE if @well_known_name was released, or %FALSE and sets @error
         if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="836">a TpDBusDaemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="well_known_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="837">a well-known name owned by this process to release</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="request_name"
              c:identifier="tp_dbus_daemon_request_name"
              version="0.7.30"
              throws="1">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="744">Claim the given well-known name without queueing, allowing replacement
or replacing an existing name-owner. This makes a synchronous call to the
bus daemon.</doc>
        <source-position filename="dbus-daemon.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="756">%TRUE if @well_known_name was claimed, or %FALSE and sets @error if
         an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="746">a TpDBusDaemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="well_known_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="747">a well-known name to acquire</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="idempotent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="748">whether to consider it to be a success if this process
             already owns the name</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_object"
              c:identifier="tp_dbus_daemon_unregister_object"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="935">Stop exporting @object on D-Bus. This is a convenience wrapper around
dbus_g_connection_unregister_g_object(), and behaves similarly.</doc>
        <source-position filename="dbus-daemon.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="937">object representing a connection to a bus</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="938">an object previously exported
with tp_dbus_daemon_register_object()</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="watch_name_owner"
              c:identifier="tp_dbus_daemon_watch_name_owner"
              version="0.7.1">
        <doc xml:space="preserve"
             filename="dbus-daemon.c"
             line="472">Arrange for @callback to be called with the owner of @name as soon as
possible (which might even be before this function returns!), then
again every time the ownership of @name changes.

If multiple watches are registered for the same @name, they will be called
in the order they were registered.</doc>
        <source-position filename="dbus-daemon.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="474">The D-Bus daemon</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="475">The name whose ownership is to be watched</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="476">Callback to call when the ownership is discovered or changes</doc>
            <type name="DBusDaemonNameOwnerChangedCb"
                  c:type="TpDBusDaemonNameOwnerChangedCb"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="477">Arbitrary data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="dbus-daemon.c"
                 line="478">Called to destroy @user_data when the name owner watch is
 cancelled due to tp_dbus_daemon_cancel_name_owner_watch()</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="DBusDaemonClass"
            c:type="TpDBusDaemonClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="DBusDaemon"
            version="0.7.1">
      <doc xml:space="preserve"
           filename="dbus-daemon.c"
           line="40">The class of #TpDBusDaemon.</doc>
      <source-position filename="dbus-daemon.h" line="36"/>
    </record>
    <callback name="DBusDaemonListNamesCb"
              c:type="TpDBusDaemonListNamesCb"
              version="0.7.35">
      <doc xml:space="preserve"
           filename="dbus-daemon.c"
           line="1121">Signature of a callback for functions that list bus names.</doc>
      <source-position filename="dbus-daemon.h" line="80"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bus_daemon" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="1123">object representing a connection to a bus</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </parameter>
        <parameter name="names" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="1124">constant %NULL-terminated array of constant strings representing
 bus names, or %NULL on error</doc>
          <type name="utf8" c:type="const gchar* const*"/>
        </parameter>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="1126">the error that occurred, or %NULL on success</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="1127">the same user data that was passed to
 tp_dbus_daemon_list_names or tp_dbus_daemon_list_activatable_names</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="weak_object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="1129">the same object that was passed to
 tp_dbus_daemon_list_names or tp_dbus_daemon_list_activatable_names</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="DBusDaemonNameOwnerChangedCb"
              c:type="TpDBusDaemonNameOwnerChangedCb"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="dbus-daemon.c"
           line="427">The signature of the callback called by tp_dbus_daemon_watch_name_owner().</doc>
      <source-position filename="dbus-daemon.h" line="62"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bus_daemon" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="429">The D-Bus daemon</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="430">The name whose ownership has changed or been discovered</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="new_owner" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="431">The unique name that now owns @name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="dbus-daemon.c"
               line="432">Arbitrary user-supplied data as passed to
 tp_dbus_daemon_watch_name_owner()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="DBusDaemonPrivate"
            c:type="TpDBusDaemonPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="dbus-daemon.h" line="35"/>
    </record>
    <enumeration name="DBusError" version="0.7.1" c:type="TpDBusError">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="69">#GError codes for use with the %TP_DBUS_ERRORS domain.

Since 0.11.5, there is a corresponding #GEnumClass type,
%TP_TYPE_DBUS_ERROR.</doc>
      <source-position filename="_gen/proxy-introspectable.h" line="61"/>
      <member name="unknown_remote_error"
              value="0"
              c:identifier="TP_DBUS_ERROR_UNKNOWN_REMOTE_ERROR">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="71">Raised if the error raised by
 a remote D-Bus object is not recognised</doc>
      </member>
      <member name="proxy_unreferenced"
              value="1"
              c:identifier="TP_DBUS_ERROR_PROXY_UNREFERENCED">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="73">Emitted in #TpProxy::invalidated
 when the #TpProxy has lost its last reference</doc>
      </member>
      <member name="no_interface"
              value="2"
              c:identifier="TP_DBUS_ERROR_NO_INTERFACE">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="75">Raised by #TpProxy methods if the remote
 object does not appear to have the required interface</doc>
      </member>
      <member name="name_owner_lost"
              value="3"
              c:identifier="TP_DBUS_ERROR_NAME_OWNER_LOST">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="77">Emitted in #TpProxy::invalidated if the
 remote process loses ownership of its bus name, and raised by
 any #TpProxy methods that have not had a reply at that time or are called
 after the proxy becomes invalid in this way (usually meaning it crashed)</doc>
      </member>
      <member name="invalid_bus_name"
              value="4"
              c:identifier="TP_DBUS_ERROR_INVALID_BUS_NAME">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="81">Raised if a D-Bus bus name given is not
 valid, or is of an unacceptable type (e.g. well-known vs. unique)</doc>
      </member>
      <member name="invalid_interface_name"
              value="5"
              c:identifier="TP_DBUS_ERROR_INVALID_INTERFACE_NAME">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="83">Raised if a D-Bus interface or
 error name given is not valid</doc>
      </member>
      <member name="invalid_object_path"
              value="6"
              c:identifier="TP_DBUS_ERROR_INVALID_OBJECT_PATH">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="85">Raised if a D-Bus object path
 given is not valid</doc>
      </member>
      <member name="invalid_member_name"
              value="7"
              c:identifier="TP_DBUS_ERROR_INVALID_MEMBER_NAME">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="87">Raised if a D-Bus method or signal
 name given is not valid</doc>
      </member>
      <member name="object_removed"
              value="8"
              c:identifier="TP_DBUS_ERROR_OBJECT_REMOVED">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="89">A generic error which can be used with
 #TpProxy::invalidated to indicate an application-specific indication
 that the remote object no longer exists, if no more specific error
 is available.</doc>
      </member>
      <member name="cancelled"
              value="9"
              c:identifier="TP_DBUS_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="93">Raised from calls that re-enter the main
 loop (*_run_*) if they are cancelled</doc>
      </member>
      <member name="inconsistent"
              value="10"
              c:identifier="TP_DBUS_ERROR_INCONSISTENT">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="95">Raised if information received from a remote
 object is inconsistent or otherwise obviously wrong (added in 0.7.17).
 See also %TP_ERROR_CONFUSED.</doc>
      </member>
    </enumeration>
    <bitfield name="DBusNameType" version="0.7.1" c:type="TpDBusNameType">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="184">A set of flags indicating which D-Bus bus names are acceptable.
They can be combined with the bitwise-or operator to accept multiple
types. %TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON and %TP_DBUS_NAME_TYPE_ANY are
the bitwise-or of other appropriate types, for convenience.

Since 0.11.5, there is a corresponding #GFlagsClass type,
%TP_TYPE_DBUS_NAME_TYPE.</doc>
      <source-position filename="dbus.h" line="46"/>
      <member name="unique" value="1" c:identifier="TP_DBUS_NAME_TYPE_UNIQUE">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="186">accept unique names like :1.123
 (not including the name of the bus daemon itself)</doc>
      </member>
      <member name="well_known"
              value="2"
              c:identifier="TP_DBUS_NAME_TYPE_WELL_KNOWN">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="188">accept well-known names like
 com.example.Service (not including the name of the bus daemon itself)</doc>
      </member>
      <member name="bus_daemon"
              value="4"
              c:identifier="TP_DBUS_NAME_TYPE_BUS_DAEMON">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="190">accept the name of the bus daemon
 itself, which has the syntax of a well-known name, but behaves like a
 unique name</doc>
      </member>
      <member name="not_bus_daemon"
              value="3"
              c:identifier="TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="193">accept either unique or well-known
 names, but not the bus daemon</doc>
      </member>
      <member name="any" value="7" c:identifier="TP_DBUS_NAME_TYPE_ANY">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="195">accept any of the above</doc>
      </member>
    </bitfield>
    <record name="DBusPropertiesMixinClass"
            c:type="TpDBusPropertiesMixinClass"
            version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="334">Structure representing all of a class's property implementations. One of
these structures may be placed in the layout of an object class structure.

In addition to the documented fields, there are 7 pointers reserved for
future use, which must be initialized to %NULL.</doc>
      <source-position filename="dbus-properties-mixin.h" line="116"/>
      <field name="interfaces" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="336">An array of interface implementations, terminated by one with
 @name equal to %NULL</doc>
        <type name="DBusPropertiesMixinIfaceImpl"
              c:type="TpDBusPropertiesMixinIfaceImpl*"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_4" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_5" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_6" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_7" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <function name="init"
                c:identifier="tp_dbus_properties_mixin_class_init"
                version="0.7.3">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="574">Initialize the class @cls to use the D-Bus Properties mixin.
The given struct member, of size sizeof(TpDBusPropertiesMixinClass),
will be used to store property implementation information.

Each property and each interface must have been declared as a member of
a GInterface implemented by @cls, using
tp_svc_interface_set_dbus_properties_info().

Before calling this function, the array @interfaces must have been
placed in the #TpDBusPropertiesMixinClass structure; if it would be empty,
it may instead be %NULL.

This function should be called from the class_init callback in such a way
that it will only be called once, even if the class is subclassed.

Changed in 0.7.9: TpDBusPropertiesMixinClass::interfaces may now be %NULL,
which means that only interfaces whose properties are set up using
tp_dbus_properties_mixin_implement_interface() will be used.

Changed in 0.7.15: @offset may now be 0, in which case the
#TpDBusPropertiesMixinClass can be omitted from @cls.  It is treated as if
it were present, but with all fields (including
TpDBusPropertiesMixinClass::interfaces) being %NULL, so only interfaces
whose properties are set using
tp_dbus_properties_mixin_implement_interface() will be used.</doc>
        <source-position filename="dbus-properties-mixin.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-properties-mixin.c"
                 line="576">a subclass of #GObjectClass</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-properties-mixin.c"
                 line="577">the offset within @cls of a TpDBusPropertiesMixinClass structure</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <bitfield name="DBusPropertiesMixinFlags"
              version="0.7.3"
              c:type="TpDBusPropertiesMixinFlags">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="62">Bitfield representing allowed access to a property. At most one of
%TP_DBUS_PROPERTIES_MIXIN_FLAG_EMITS_CHANGED and
%TP_DBUS_PROPERTIES_MIXIN_FLAG_EMITS_INVALIDATED may be specified for a
property.

Since 0.11.5, there is a corresponding #GFlagsClass type,
%TP_TYPE_DBUS_PROPERTIES_MIXIN_FLAGS.</doc>
      <source-position filename="dbus-properties-mixin.h" line="42"/>
      <member name="read"
              value="1"
              c:identifier="TP_DBUS_PROPERTIES_MIXIN_FLAG_READ">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="64">The property can be read using Get and
 GetAll</doc>
      </member>
      <member name="write"
              value="2"
              c:identifier="TP_DBUS_PROPERTIES_MIXIN_FLAG_WRITE">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="66">The property can be written using Set</doc>
      </member>
      <member name="emits_changed"
              value="4"
              c:identifier="TP_DBUS_PROPERTIES_MIXIN_FLAG_EMITS_CHANGED">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="67">The property's new value is
 included in emissions of PropertiesChanged</doc>
      </member>
      <member name="emits_invalidated"
              value="8"
              c:identifier="TP_DBUS_PROPERTIES_MIXIN_FLAG_EMITS_INVALIDATED">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="69">The property is announced
 as invalidated, without its value, in emissions of PropertiesChanged</doc>
      </member>
    </bitfield>
    <callback name="DBusPropertiesMixinGetter"
              c:type="TpDBusPropertiesMixinGetter">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="215">Signature of a callback used to get the value of a property.

For simplicity, in this mixin we don't allow getting a property to fail;
implementations must always be prepared to return *something*.</doc>
      <source-position filename="dbus-properties-mixin.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="217">The exported object with the properties</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="218">A quark representing the D-Bus interface name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="219">A quark representing the D-Bus property name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="220">A GValue pre-initialized to the right type, into which to put
 the value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="getter_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="222">The getter_data from the #TpDBusPropertiesMixinPropImpl</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="DBusPropertiesMixinIfaceImpl"
            c:type="TpDBusPropertiesMixinIfaceImpl"
            version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="313">Structure representing an implementation of an interface's properties.

In addition to the documented fields, there are four pointers which must
be initialized to %NULL.

This structure must either be statically allocated, or duplicated and never
freed, so it always remains valid.</doc>
      <source-position filename="dbus-properties-mixin.h" line="104"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="315">The name of the interface</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="getter" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="316">A callback to get the current value of the property, to which
 the @getter_data from each property implementation will be passed</doc>
        <type name="DBusPropertiesMixinGetter"
              c:type="TpDBusPropertiesMixinGetter"/>
      </field>
      <field name="setter" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="318">A callback to set a new value for the property, to which
 the @setter_data from each property implementation will be passed</doc>
        <type name="DBusPropertiesMixinSetter"
              c:type="TpDBusPropertiesMixinSetter"/>
      </field>
      <field name="props" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="320">An array of property implementations, terminated by one with
 @name equal to %NULL</doc>
        <type name="DBusPropertiesMixinPropImpl"
              c:type="TpDBusPropertiesMixinPropImpl*"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="mixin_next" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="mixin_priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="DBusPropertiesMixinIfaceInfo"
            c:type="TpDBusPropertiesMixinIfaceInfo"
            version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="108">Semi-abstract description of an interface. Each service GInterface that
has properties must have one of these attached to it via
tp_svc_interface_set_dbus_properties_info() in its base_init function;
service GInterfaces that do not have properties may have one of these
with no properties.

This structure must either be statically allocated, or duplicated and never
freed, so it always remains valid.

In addition to the documented members, there are two private pointers
for future expansion, which must always be initialized to %NULL.</doc>
      <source-position filename="dbus-properties-mixin.h" line="60"/>
      <field name="dbus_interface" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="110">Quark representing the interface's name</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="props" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="111">Array of property descriptions, terminated by one with
 @name == %NULL</doc>
        <type name="DBusPropertiesMixinPropInfo"
              c:type="TpDBusPropertiesMixinPropInfo*"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
    </record>
    <record name="DBusPropertiesMixinPropImpl"
            c:type="TpDBusPropertiesMixinPropImpl"
            version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="296">Structure representing an implementation of a property.

In addition to the documented fields, there are three pointers which must
be initialized to %NULL.

This structure must either be statically allocated, or duplicated and never
freed, so it always remains valid.</doc>
      <source-position filename="dbus-properties-mixin.h" line="92"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="298">The name of the property as it appears on D-Bus</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="getter_data" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="299">Arbitrary user-supplied data for the getter function</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="setter_data" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="300">Arbitrary user-supplied data for the setter function</doc>
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="mixin_priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="DBusPropertiesMixinPropInfo"
            c:type="TpDBusPropertiesMixinPropInfo"
            version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="91">Semi-abstract description of a property, as attached to a service
GInterface. This structure must either be statically allocated, or
duplicated and never freed, so it always remains valid.

In addition to the documented members, there are two private pointers
for future expansion, which must always be initialized to %NULL.</doc>
      <source-position filename="dbus-properties-mixin.h" line="52"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="93">Quark representing the property's name</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="flags" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="94">Flags representing read/write access to the property</doc>
        <type name="DBusPropertiesMixinFlags"
              c:type="TpDBusPropertiesMixinFlags"/>
      </field>
      <field name="dbus_signature" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="95">The D-Bus signature of the property</doc>
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="96">The GType used in a GValue to implement the property</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="_1" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_2" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
    </record>
    <callback name="DBusPropertiesMixinSetter"
              c:type="TpDBusPropertiesMixinSetter"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="254">Signature of a callback used to get the value of a property.</doc>
      <source-position filename="dbus-properties-mixin.h" line="76"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="265">%TRUE on success, %FALSE (setting @error) on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="256">The exported object with the properties</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="257">A quark representing the D-Bus interface name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="258">A quark representing the D-Bus property name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="259">The new value for the property</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="setter_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="260">The setter_data from the #TpDBusPropertiesMixinPropImpl</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="DBusTubeChannel"
           c:symbol-prefix="dbus_tube_channel"
           c:type="TpDBusTubeChannel"
           version="0.18.0"
           parent="Channel"
           glib:type-name="TpDBusTubeChannel"
           glib:get-type="tp_dbus_tube_channel_get_type"
           glib:type-struct="DBusTubeChannelClass">
      <doc xml:space="preserve"
           filename="dbus-tube-channel.c"
           line="66">Data structure representing a #TpDBusTubeChannel.</doc>
      <source-position filename="dbus-tube-channel.h" line="56"/>
      <function name="feature_quark_core"
                c:identifier="tp_dbus_tube_channel_feature_quark_core">
        <source-position filename="dbus-tube-channel.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="accept_async"
              c:identifier="tp_dbus_tube_channel_accept_async"
              version="0.18.0">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="771">Accept an incoming D-Bus tube. When the tube has been accepted
@callback will be called. You can then call
tp_dbus_tube_channel_accept_finish() to get the #GDBusConnection that will
be used to communicate through the tube.</doc>
        <source-position filename="dbus-tube-channel.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="773">an incoming #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="774">a callback to call when the tube has been offered</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="775">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_finish"
              c:identifier="tp_dbus_tube_channel_accept_finish"
              version="0.18.0"
              throws="1">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="802">Finishes to accept an incoming D-Bus tube. The returned #GDBusConnection
is ready to be used to exchange data through the tube.</doc>
        <source-position filename="dbus-tube-channel.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus-tube-channel.c"
               line="811">a reference on a #GDBusConnection if the tube
has been successfully accepted and opened; %NULL otherwise.</doc>
          <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="804">a #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="805">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_parameters_vardict"
              c:identifier="tp_dbus_tube_channel_dup_parameters_vardict"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="541">Return the parameters of the dbus-tube channel in a variant of
type %G_VARIANT_TYPE_VARDICT whose keys are strings representing
parameter names and values are variants representing corresponding
parameter values set by the offerer when offering this channel.

The GVariant returned is %NULL if this is an outgoing tube that has not
yet been offered or the parameters property has not been set.

Use g_variant_lookup(), g_variant_lookup_value(), or tp_vardict_get_uint32()
and similar functions for convenient access to the values.</doc>
        <source-position filename="dbus-tube-channel.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus-tube-channel.c"
               line="556">a new reference to a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="543">a #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parameters"
              c:identifier="tp_dbus_tube_channel_get_parameters"
              version="0.18.0"
              introspectable="0">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="524">Return the #TpDBusTubeChannel:parameters property</doc>
        <source-position filename="dbus-tube-channel.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-tube-channel.c"
               line="530">
the value of #TpDBusTubeChannel:parameters</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="526">a #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_name"
              c:identifier="tp_dbus_tube_channel_get_service_name"
              glib:get-property="service-name"
              version="0.18.0">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="504">Return the #TpDBusTubeChannel:service-name property</doc>
        <source-position filename="dbus-tube-channel.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-tube-channel.c"
               line="510">the value of #TpDBusTubeChannel:service-name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="506">a #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="offer_async"
              c:identifier="tp_dbus_tube_channel_offer_async"
              version="0.18.0">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="657">Offer an outgoing D-Bus tube. When the tube has been offered and accepted
@callback will be called. You can then call
tp_dbus_tube_channel_offer_finish() to get the #GDBusConnection that will
be used to communicate through the tube.</doc>
        <source-position filename="dbus-tube-channel.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="659">an outgoing #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="660">parameters of the tube, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="661">a callback to call when the tube has been offered</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="662">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="offer_finish"
              c:identifier="tp_dbus_tube_channel_offer_finish"
              version="0.18.0"
              throws="1">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="692">Finishes offering an outgoing D-Bus tube. The returned #GDBusConnection
is ready to be used to exchange data through the tube.</doc>
        <source-position filename="dbus-tube-channel.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus-tube-channel.c"
               line="701">a reference on a #GDBusConnection if the tube
has been successfully offered and opened; %NULL otherwise.</doc>
          <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="694">a #TpDBusTubeChannel</doc>
            <type name="DBusTubeChannel" c:type="TpDBusTubeChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="dbus-tube-channel.c"
                 line="695">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="parameters"
                version="0.18.0"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="431">A string to #GValue #GHashTable representing the parameters of the tube.

Will be %NULL for outgoing tubes until the tube has been offered.

In high-level language bindings, use
tp_dbus_tube_channel_dup_parameters_vardict() to get the same information
in a more convenient format.</doc>
        <type/>
      </property>
      <property name="parameters-vardict"
                version="0.19.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="450">A %G_VARIANT_TYPE_VARDICT representing the parameters of the tube.

Will be %NULL for outgoing tubes until the tube has been offered.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="service-name"
                version="0.18.0"
                transfer-ownership="none"
                getter="get_service_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="dbus-tube-channel.c"
             line="417">A string representing the service name that will be used over the tube.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Channel" c:type="TpChannel"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DBusTubeChannelPrivate"
              c:type="TpDBusTubeChannelPrivate*"/>
      </field>
    </class>
    <record name="DBusTubeChannelClass"
            c:type="TpDBusTubeChannelClass"
            glib:is-gtype-struct-for="DBusTubeChannel"
            version="0.18.0">
      <doc xml:space="preserve"
           filename="dbus-tube-channel.c"
           line="74">The class of a #TpDBusTubeChannel.</doc>
      <source-position filename="dbus-tube-channel.h" line="56"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ChannelClass" c:type="TpChannelClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="DBusTubeChannelPrivate"
            c:type="TpDBusTubeChannelPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="dbus-tube-channel.h" line="42"/>
    </record>
    <function-macro name="DEBUG_CLIENT"
                    c:identifier="TP_DEBUG_CLIENT"
                    introspectable="0">
      <source-position filename="debug-client.h" line="70"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEBUG_CLIENT_CLASS"
                    c:identifier="TP_DEBUG_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="debug-client.h" line="73"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEBUG_CLIENT_GET_CLASS"
                    c:identifier="TP_DEBUG_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="debug-client.h" line="80"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEBUG_MESSAGE"
                    c:identifier="TP_DEBUG_MESSAGE"
                    introspectable="0">
      <source-position filename="debug-message.h" line="53"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEBUG_MESSAGE_CLASS"
                    c:identifier="TP_DEBUG_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="debug-message.h" line="57"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DEBUG_MESSAGE_GET_CLASS"
                    c:identifier="TP_DEBUG_MESSAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="debug-message.h" line="67"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="DEBUG_OBJECT_PATH"
              value="/org/freedesktop/Telepathy/debug"
              c:type="TP_DEBUG_OBJECT_PATH">
      <doc xml:space="preserve"
           filename="defs.h"
           line="117">The standard path for objects implementing the Telepathy Debug interface
(#TpSvcDebug).</doc>
      <source-position filename="defs.h" line="123"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="DTMFEvent" c:type="TpDTMFEvent">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="777">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="404"/>
      <member name="digit_0" value="0" c:identifier="TP_DTMF_EVENT_DIGIT_0">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="779">&lt;![CDATA[0]]&gt;</doc>
      </member>
      <member name="digit_1" value="1" c:identifier="TP_DTMF_EVENT_DIGIT_1">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="780">&lt;![CDATA[1]]&gt;</doc>
      </member>
      <member name="digit_2" value="2" c:identifier="TP_DTMF_EVENT_DIGIT_2">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="781">&lt;![CDATA[2]]&gt;</doc>
      </member>
      <member name="digit_3" value="3" c:identifier="TP_DTMF_EVENT_DIGIT_3">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="782">&lt;![CDATA[3]]&gt;</doc>
      </member>
      <member name="digit_4" value="4" c:identifier="TP_DTMF_EVENT_DIGIT_4">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="783">&lt;![CDATA[4]]&gt;</doc>
      </member>
      <member name="digit_5" value="5" c:identifier="TP_DTMF_EVENT_DIGIT_5">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="784">&lt;![CDATA[5]]&gt;</doc>
      </member>
      <member name="digit_6" value="6" c:identifier="TP_DTMF_EVENT_DIGIT_6">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="785">&lt;![CDATA[6]]&gt;</doc>
      </member>
      <member name="digit_7" value="7" c:identifier="TP_DTMF_EVENT_DIGIT_7">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="786">&lt;![CDATA[7]]&gt;</doc>
      </member>
      <member name="digit_8" value="8" c:identifier="TP_DTMF_EVENT_DIGIT_8">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="787">&lt;![CDATA[8]]&gt;</doc>
      </member>
      <member name="digit_9" value="9" c:identifier="TP_DTMF_EVENT_DIGIT_9">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="788">&lt;![CDATA[9]]&gt;</doc>
      </member>
      <member name="asterisk" value="10" c:identifier="TP_DTMF_EVENT_ASTERISK">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="789">&lt;![CDATA[*]]&gt;</doc>
      </member>
      <member name="hash" value="11" c:identifier="TP_DTMF_EVENT_HASH">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="790">&lt;![CDATA[#]]&gt;</doc>
      </member>
      <member name="letter_a" value="12" c:identifier="TP_DTMF_EVENT_LETTER_A">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="791">&lt;![CDATA[A]]&gt;</doc>
      </member>
      <member name="letter_b" value="13" c:identifier="TP_DTMF_EVENT_LETTER_B">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="792">&lt;![CDATA[B]]&gt;</doc>
      </member>
      <member name="letter_c" value="14" c:identifier="TP_DTMF_EVENT_LETTER_C">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="793">&lt;![CDATA[C]]&gt;</doc>
      </member>
      <member name="letter_d" value="15" c:identifier="TP_DTMF_EVENT_LETTER_D">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="794">&lt;![CDATA[D]]&gt;</doc>
      </member>
    </enumeration>
    <class name="DebugClient"
           c:symbol-prefix="debug_client"
           c:type="TpDebugClient"
           version="0.19.0"
           parent="Proxy"
           glib:type-name="TpDebugClient"
           glib:get-type="tp_debug_client_get_type"
           glib:type-struct="DebugClientClass">
      <doc xml:space="preserve"
           filename="debug-client.c"
           line="63">A proxy object for the debug interface of a Telepathy component.</doc>
      <source-position filename="debug-client.h" line="36"/>
      <constructor name="new"
                   c:identifier="tp_debug_client_new"
                   version="0.19.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="352">&lt;!-- --&gt;</doc>
        <source-position filename="debug-client.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="debug-client.c"
               line="361">a new debug client proxy, or %NULL on invalid arguments</doc>
          <type name="DebugClient" c:type="TpDebugClient*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="354">a D-Bus daemon; may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="unique_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="355">the unique name of the process to be debugged; may not be
 %NULL or a well-known name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_core"
                c:identifier="tp_debug_client_get_feature_quark_core">
        <source-position filename="debug-client.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_debug_client_init_known_interfaces"
                version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="321">Ensure that the known interfaces for TpDebugClient have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_DEBUG_CLIENT.</doc>
        <source-position filename="debug-client.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="get_messages_async"
              c:identifier="tp_debug_client_get_messages_async"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="506">Retrieve buffered messages from @self. Once @callback is called,
use tp_debug_client_get_messages_finish() to retrieve the #TpDebugMessage
objects.</doc>
        <source-position filename="debug-client.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="508">a #TpDebugClient</doc>
            <type name="DebugClient" c:type="TpDebugClient*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="509">callback to call when the messages have been retrieved</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="510">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_messages_finish"
              c:identifier="tp_debug_client_get_messages_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="531">Finishes tp_debug_client_set_enabled_async().</doc>
        <source-position filename="debug-client.h" line="96"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="debug-client.c"
               line="539">
a #GPtrArray of #TpDebugMessage, free with g_ptr_array_unref()</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="DebugMessage"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="533">a #TpDebugClient</doc>
            <type name="DebugClient" c:type="TpDebugClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="534">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_enabled"
              c:identifier="tp_debug_client_is_enabled"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="448">Return the #TpDebugClient:enabled property</doc>
        <source-position filename="debug-client.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-client.c"
               line="454">the value of #TpDebugClient:enabled property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="450">a #TpDebugClient</doc>
            <type name="DebugClient" c:type="TpDebugClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled_async"
              c:identifier="tp_debug_client_set_enabled_async"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="397">Enable or disable publishing of debug messages on the bus by the component
owning @self's bus name.</doc>
        <source-position filename="debug-client.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="399">a #TpDebugClient</doc>
            <type name="DebugClient" c:type="TpDebugClient*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="400">%TRUE if debug messages should be published on the bus, %FALSE
otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="402">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="403">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled_finish"
              c:identifier="tp_debug_client_set_enabled_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="428">Finishes tp_debug_client_set_enabled_async().</doc>
        <source-position filename="debug-client.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-client.c"
               line="436">%TRUE, if the operation suceeded, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="430">a #TpDebugClient</doc>
            <type name="DebugClient" c:type="TpDebugClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="431">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled"
                version="0.19.0"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="198">%TRUE if debug messages are published on the bus.

This property is meaningless until the
%TP_DEBUG_CLIENT_FEATURE_CORE feature has been prepared.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="new-debug-message" when="last" version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-client.c"
             line="214">Emitted when a #TpDebugMessage is generated if the TpDebugMessage:enabled
property is set to %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-client.c"
                 line="217">a #TpDebugMessage</doc>
            <type name="DebugMessage"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DebugClientClass"
            c:type="TpDebugClientClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="DebugClient"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="debug-client.c"
           line="50">The class of a #TpDebugClient.</doc>
      <source-position filename="debug-client.h" line="36"/>
    </record>
    <record name="DebugClientPrivate"
            c:type="TpDebugClientPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="debug-client.h" line="35"/>
    </record>
    <enumeration name="DebugLevel" c:type="TpDebugLevel">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1158">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="587"/>
      <member name="error" value="0" c:identifier="TP_DEBUG_LEVEL_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1160">&lt;![CDATA[           Log level for errors. Error messages are always fatal, resulting           in the service terminating after something completely           unexpected occurred.         ]]&gt;</doc>
      </member>
      <member name="critical" value="1" c:identifier="TP_DEBUG_LEVEL_CRITICAL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1161">&lt;![CDATA[           Log level for critical messages. Critical messages are messages           that the service might predict and it is up to the service itself           to decide whether to terminate following a critical message.         ]]&gt;</doc>
      </member>
      <member name="warning" value="2" c:identifier="TP_DEBUG_LEVEL_WARNING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1162">&lt;![CDATA[           Log level for warnings.         ]]&gt;</doc>
      </member>
      <member name="message" value="3" c:identifier="TP_DEBUG_LEVEL_MESSAGE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1163">&lt;![CDATA[           Log level for messages.         ]]&gt;</doc>
      </member>
      <member name="info" value="4" c:identifier="TP_DEBUG_LEVEL_INFO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1164">&lt;![CDATA[           Log level for information messages.         ]]&gt;</doc>
      </member>
      <member name="debug" value="5" c:identifier="TP_DEBUG_LEVEL_DEBUG">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1165">&lt;![CDATA[           Log level for debug messages.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="DebugMessage"
           c:symbol-prefix="debug_message"
           c:type="TpDebugMessage"
           version="0.19.0"
           parent="GObject.Object"
           glib:type-name="TpDebugMessage"
           glib:get-type="tp_debug_message_get_type"
           glib:type-struct="DebugMessageClass">
      <doc xml:space="preserve"
           filename="debug-message.c"
           line="40">Data structure representing a #TpDebugMessage.</doc>
      <source-position filename="debug-message.h" line="40"/>
      <method name="get_category"
              c:identifier="tp_debug_message_get_category"
              glib:get-property="category"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="298">Return the #TpDebugMessage:category property</doc>
        <source-position filename="debug-message.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-message.c"
               line="304">the value of #TpDebugMessage:category property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-message.c"
                 line="300">a #TpDebugMessage</doc>
            <type name="DebugMessage" c:type="TpDebugMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain"
              c:identifier="tp_debug_message_get_domain"
              glib:get-property="domain"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="282">Return the #TpDebugMessage:domain property</doc>
        <source-position filename="debug-message.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-message.c"
               line="288">the value of #TpDebugMessage:domain property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-message.c"
                 line="284">a #TpDebugMessage</doc>
            <type name="DebugMessage" c:type="TpDebugMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_level"
              c:identifier="tp_debug_message_get_level"
              glib:get-property="level"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="314">Return the #TpDebugMessage:level property</doc>
        <source-position filename="debug-message.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-message.c"
               line="320">the value of #TpDebugMessage:level property</doc>
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-message.c"
                 line="316">a #TpDebugMessage</doc>
            <type name="DebugMessage" c:type="TpDebugMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="tp_debug_message_get_message"
              glib:get-property="message"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="330">Return the #TpDebugMessage:message property</doc>
        <source-position filename="debug-message.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-message.c"
               line="336">the value of #TpDebugMessage:message property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-message.c"
                 line="332">a #TpDebugMessage</doc>
            <type name="DebugMessage" c:type="TpDebugMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time"
              c:identifier="tp_debug_message_get_time"
              glib:get-property="time"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="266">Return the #TpDebugMessage:time property</doc>
        <source-position filename="debug-message.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug-message.c"
               line="272">the value of #TpDebugMessage:time property</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="debug-message.c"
                 line="268">a #TpDebugMessage</doc>
            <type name="DebugMessage" c:type="TpDebugMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="category"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_category"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="157">Category of the debug message, or %NULL if none was specified.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="domain"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_domain"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="144">Domain of the debug message.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="level"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_level"
                default-value="0">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="170">A #GLogLevelFlags representing the level of the debug message.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="message"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_message"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="183">Text of the debug message, stripped from its trailing whitespaces.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="time"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_time">
        <doc xml:space="preserve"
             filename="debug-message.c"
             line="131">Timestamp of the debug message.</doc>
        <type name="GLib.DateTime"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DebugMessagePriv" c:type="TpDebugMessagePriv*"/>
      </field>
    </class>
    <record name="DebugMessageClass"
            c:type="TpDebugMessageClass"
            glib:is-gtype-struct-for="DebugMessage"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="debug-message.c"
           line="48">The class of a #TpDebugMessage.</doc>
      <source-position filename="debug-message.h" line="40"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="DebugMessagePriv"
            c:type="TpDebugMessagePriv"
            disguised="1"
            opaque="1">
      <source-position filename="debug-message.h" line="35"/>
    </record>
    <bitfield name="DeliveryReportingSupportFlags"
              c:type="TpDeliveryReportingSupportFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="950">&lt;![CDATA[         Flags indicating the level of support for delivery reporting on this         channel, as found on the         DeliveryReportingSupport property. Any         future flags added to this set will conform to the         convention that the presence of an extra flag implies that         more operations will succeed. Note that CMs may always provide more         reports than are requested in the         Message_Sending_Flags passed to         SendMessage.                     If senders want delivery reports, they should ask for them.  If they           don't want delivery reports, they can just ignore them, so there's no           need to have capability discovery for what will happen if a delivery           report isn't requested.                ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="487"/>
      <member name="failures"
              value="1"
              c:identifier="TP_DELIVERY_REPORTING_SUPPORT_FLAG_RECEIVE_FAILURES">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="952">&lt;![CDATA[           Clients MAY expect to receive negative delivery reports if           Message_Sending_Flag_Report_Delivery is specified when sending.         ]]&gt;</doc>
      </member>
      <member name="successes"
              value="2"
              c:identifier="TP_DELIVERY_REPORTING_SUPPORT_FLAG_RECEIVE_SUCCESSES">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="953">&lt;![CDATA[           Clients MAY expect to receive positive delivery reports if           Message_Sending_Flag_Report_Delivery is specified when sending.         ]]&gt;</doc>
      </member>
      <member name="read"
              value="4"
              c:identifier="TP_DELIVERY_REPORTING_SUPPORT_FLAG_RECEIVE_READ">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="954">&lt;![CDATA[           Clients MAY expect to receive Delivery_Status           Read reports if Message_Sending_Flag_Report_Read           is specified when sending.         ]]&gt;</doc>
      </member>
      <member name="deleted"
              value="8"
              c:identifier="TP_DELIVERY_REPORTING_SUPPORT_FLAG_RECEIVE_DELETED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="955">&lt;![CDATA[           Clients MAY expect to receive Delivery_Status           Deleted reports if Message_Sending_Flag_Report_Deleted           is specified when sending.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="DeliveryStatus" c:type="TpDeliveryStatus">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="924">&lt;![CDATA[         The status of a message as indicated by a delivery report.          If this enum is extended in future specifications, this should           only be to add new, non-overlapping conditions (i.e. all failures           should still be signalled as either Temporarily_Failed           or Permanently_Failed). If additional detail is required (e.g.           distinguishing between the various types of permanent failure) this           will be done using additional           Delivery_Report_Header_Keys.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="478"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_DELIVERY_STATUS_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="926">&lt;![CDATA[           The message's disposition is unknown.           Clients SHOULD consider all messages to have status           Delivery_Status_Unknown unless otherwise specified; connection           managers SHOULD NOT signal this delivery status explicitly.         ]]&gt;</doc>
      </member>
      <member name="delivered"
              value="1"
              c:identifier="TP_DELIVERY_STATUS_DELIVERED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="927">&lt;![CDATA[           The message has been delivered to the intended recipient.         ]]&gt;</doc>
      </member>
      <member name="temporarily_failed"
              value="2"
              c:identifier="TP_DELIVERY_STATUS_TEMPORARILY_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="928">&lt;![CDATA[           Delivery of the message has failed. Clients SHOULD notify the user,           but MAY automatically try sending another copy of the message.                         Similar to errors with type="wait" in XMPP; analogous to             4xx errors in SMTP.                    ]]&gt;</doc>
      </member>
      <member name="permanently_failed"
              value="3"
              c:identifier="TP_DELIVERY_STATUS_PERMANENTLY_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="929">&lt;![CDATA[           Delivery of the message has failed. Clients SHOULD NOT try again           unless by specific user action. If the user does not modify the           message or alter configuration before re-sending, this error is           likely to happen again.                         Similar to errors with type="cancel", type="modify"             or type="auth" in XMPP; analogous to 5xx errors in SMTP.                    ]]&gt;</doc>
      </member>
      <member name="accepted"
              value="4"
              c:identifier="TP_DELIVERY_STATUS_ACCEPTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="930">&lt;![CDATA[           An intermediate server has accepted the message but the message           has not been yet delivered to the ultimate recipient. The           connection manager might send a Failed report or Delivered report           later.                         Similar to "202 Accepted" success code in SIP; analogous to             251 and 252 responses in SMTP.                    ]]&gt;</doc>
      </member>
      <member name="read" value="5" c:identifier="TP_DELIVERY_STATUS_READ">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="931">&lt;![CDATA[           The message has been read by the intended recipient.         ]]&gt;</doc>
      </member>
      <member name="deleted"
              value="6"
              c:identifier="TP_DELIVERY_STATUS_DELETED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="932">&lt;![CDATA[           The message has been deleted by the intended recipient. This MAY be           signalled on its own if the message is deleted without being read, or           after Read if the message was read before being deleted.         ]]&gt;</doc>
      </member>
    </enumeration>
    <constant name="ERROR_PREFIX"
              value="org.freedesktop.Telepathy.Error"
              c:type="TP_ERROR_PREFIX"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="errors.c"
           line="30">The common prefix of Telepathy errors, as a string constant, without
the trailing '.' character.</doc>
      <source-position filename="errors.h" line="48"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <enumeration name="Error" c:type="TpError" glib:error-domain="tp_errors">
      <doc xml:space="preserve"
           filename="errors.c"
           line="62">Enumerated type representing the Telepathy D-Bus errors.</doc>
      <source-position filename="errors.h" line="110"/>
      <member name="network_error"
              value="0"
              c:identifier="TP_ERROR_NETWORK_ERROR">
        <doc xml:space="preserve"
             filename="errors.c"
             line="64">org.freedesktop.Telepathy.Error.NetworkError:
    Raised when there is an error reading from or writing to the network.</doc>
      </member>
      <member name="not_implemented"
              value="1"
              c:identifier="TP_ERROR_NOT_IMPLEMENTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="66">org.freedesktop.Telepathy.Error.NotImplemented:
    Raised when the requested method, channel, etc is not available on this
    connection.</doc>
      </member>
      <member name="invalid_argument"
              value="2"
              c:identifier="TP_ERROR_INVALID_ARGUMENT">
        <doc xml:space="preserve"
             filename="errors.c"
             line="69">org.freedesktop.Telepathy.Error.InvalidArgument:
    Raised when one of the provided arguments is invalid.</doc>
      </member>
      <member name="not_available"
              value="3"
              c:identifier="TP_ERROR_NOT_AVAILABLE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="71">org.freedesktop.Telepathy.Error.NotAvailable:
    Raised when the requested functionality is temporarily unavailable.</doc>
      </member>
      <member name="permission_denied"
              value="4"
              c:identifier="TP_ERROR_PERMISSION_DENIED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="73">org.freedesktop.Telepathy.Error.PermissionDenied:
    The user is not permitted to perform the requested operation.</doc>
      </member>
      <member name="disconnected"
              value="5"
              c:identifier="TP_ERROR_DISCONNECTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="75">org.freedesktop.Telepathy.Error.Disconnected:
    The connection is not currently connected and cannot be used.
    This error may also be raised when operations are performed on a
    Connection for which StatusChanged has signalled status Disconnected
    for reason None.</doc>
      </member>
      <member name="invalid_handle"
              value="6"
              c:identifier="TP_ERROR_INVALID_HANDLE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="80">org.freedesktop.Telepathy.Error.InvalidHandle:
    An identifier being converted to a handle was syntactically invalid,
    or an invalid handle was used.</doc>
      </member>
      <member name="channel_banned"
              value="7"
              c:identifier="TP_ERROR_CHANNEL_BANNED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="83">org.freedesktop.Telepathy.Error.Channel.Banned:
    You are banned from the channel.</doc>
      </member>
      <member name="channel_full"
              value="8"
              c:identifier="TP_ERROR_CHANNEL_FULL">
        <doc xml:space="preserve"
             filename="errors.c"
             line="85">org.freedesktop.Telepathy.Error.Channel.Full:
    The channel is full.</doc>
      </member>
      <member name="channel_invite_only"
              value="9"
              c:identifier="TP_ERROR_CHANNEL_INVITE_ONLY">
        <doc xml:space="preserve"
             filename="errors.c"
             line="87">org.freedesktop.Telepathy.Error.Channel.InviteOnly:
    The requested channel is invite-only.</doc>
      </member>
      <member name="not_yours" value="10" c:identifier="TP_ERROR_NOT_YOURS">
        <doc xml:space="preserve"
             filename="errors.c"
             line="89">org.freedesktop.Telepathy.Error.NotYours:
    The requested channel or other resource already exists, and another
    client is responsible for it</doc>
      </member>
      <member name="cancelled" value="11" c:identifier="TP_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="92">org.freedesktop.Telepathy.Error.Cancelled:
    Raised by an ongoing request if it is cancelled by user request before
    it has completed, or when operations are performed on an object which
    the user has asked to close (for instance, a Connection where the user
    has called Disconnect, or a Channel where the user has called Close).</doc>
      </member>
      <member name="authentication_failed"
              value="12"
              c:identifier="TP_ERROR_AUTHENTICATION_FAILED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="97">org.freedesktop.Telepathy.Error.AuthenticationFailed:
    Raised when authentication with a service was unsuccessful.</doc>
      </member>
      <member name="encryption_not_available"
              value="13"
              c:identifier="TP_ERROR_ENCRYPTION_NOT_AVAILABLE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="99">org.freedesktop.Telepathy.Error.EncryptionNotAvailable:
    Raised if a user request insisted that encryption should be used,
    but encryption was not actually available.</doc>
      </member>
      <member name="encryption_error"
              value="14"
              c:identifier="TP_ERROR_ENCRYPTION_ERROR">
        <doc xml:space="preserve"
             filename="errors.c"
             line="102">org.freedesktop.Telepathy.Error.EncryptionError:
    Raised if encryption appears to be available, but could not actually be
    used (for instance if SSL/TLS negotiation fails).</doc>
      </member>
      <member name="cert_not_provided"
              value="15"
              c:identifier="TP_ERROR_CERT_NOT_PROVIDED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="105">org.freedesktop.Telepathy.Error.Cert.NotProvided:
    Raised if the server did not provide a SSL/TLS certificate.</doc>
      </member>
      <member name="cert_untrusted"
              value="16"
              c:identifier="TP_ERROR_CERT_UNTRUSTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="107">org.freedesktop.Telepathy.Error.Cert.Untrusted:
    Raised if the server provided a SSL/TLS certificate signed by an
    untrusted certifying authority.</doc>
      </member>
      <member name="cert_expired"
              value="17"
              c:identifier="TP_ERROR_CERT_EXPIRED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="110">org.freedesktop.Telepathy.Error.Cert.Expired:
    Raised if the server provided an expired SSL/TLS certificate.</doc>
      </member>
      <member name="cert_not_activated"
              value="18"
              c:identifier="TP_ERROR_CERT_NOT_ACTIVATED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="112">org.freedesktop.Telepathy.Error.Cert.NotActivated:
    Raised if the server provided an SSL/TLS certificate that will become
    valid at some point in the future.</doc>
      </member>
      <member name="cert_fingerprint_mismatch"
              value="19"
              c:identifier="TP_ERROR_CERT_FINGERPRINT_MISMATCH">
        <doc xml:space="preserve"
             filename="errors.c"
             line="115">org.freedesktop.Telepathy.Error.Cert.FingerprintMismatch:
    Raised if the server provided an SSL/TLS certificate that did not have
    the expected fingerprint.</doc>
      </member>
      <member name="cert_hostname_mismatch"
              value="20"
              c:identifier="TP_ERROR_CERT_HOSTNAME_MISMATCH">
        <doc xml:space="preserve"
             filename="errors.c"
             line="118">org.freedesktop.Telepathy.Error.Cert.HostnameMismatch:
    Raised if the server provided an SSL/TLS certificate that did not
    match its hostname.</doc>
      </member>
      <member name="cert_self_signed"
              value="21"
              c:identifier="TP_ERROR_CERT_SELF_SIGNED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="121">org.freedesktop.Telepathy.Error.Cert.SelfSigned:
    Raised if the server provided an SSL/TLS certificate that is
    self-signed and untrusted.</doc>
      </member>
      <member name="cert_invalid"
              value="22"
              c:identifier="TP_ERROR_CERT_INVALID">
        <doc xml:space="preserve"
             filename="errors.c"
             line="124">org.freedesktop.Telepathy.Error.Cert.Invalid:
    Raised if the server provided an SSL/TLS certificate that is
    unacceptable in some way that does not have a more specific error.</doc>
      </member>
      <member name="not_capable"
              value="23"
              c:identifier="TP_ERROR_NOT_CAPABLE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="127">org.freedesktop.Telepathy.Error.NotCapable:
    Raised when requested functionality is unavailable due to a contact
    not having the required capabilities.</doc>
      </member>
      <member name="offline" value="24" c:identifier="TP_ERROR_OFFLINE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="130">org.freedesktop.Telepathy.Error.Offline:
    Raised when requested functionality is unavailable because a contact is
    offline.</doc>
      </member>
      <member name="channel_kicked"
              value="25"
              c:identifier="TP_ERROR_CHANNEL_KICKED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="133">org.freedesktop.Telepathy.Error.Channel.Kicked:
    Used to represent a user being ejected from a channel by another user,
    for instance being kicked from a chatroom.</doc>
      </member>
      <member name="busy" value="26" c:identifier="TP_ERROR_BUSY">
        <doc xml:space="preserve"
             filename="errors.c"
             line="136">org.freedesktop.Telepathy.Error.Busy:
    Used to represent a user being removed from a channel because of a
    "busy" indication.</doc>
      </member>
      <member name="no_answer" value="27" c:identifier="TP_ERROR_NO_ANSWER">
        <doc xml:space="preserve"
             filename="errors.c"
             line="139">org.freedesktop.Telepathy.Error.NoAnswer:
    Used to represent a user being removed from a channel because they did
    not respond, e.g. to a StreamedMedia call.</doc>
      </member>
      <member name="does_not_exist"
              value="28"
              c:identifier="TP_ERROR_DOES_NOT_EXIST">
        <doc xml:space="preserve"
             filename="errors.c"
             line="142">org.freedesktop.Telepathy.Error.DoesNotExist:
    Raised when the requested user does not, in fact, exist.</doc>
      </member>
      <member name="terminated" value="29" c:identifier="TP_ERROR_TERMINATED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="144">org.freedesktop.Telepathy.Error.Terminated:
    Raised when a channel is terminated for an unspecified reason. In
    particular, this error SHOULD be used whenever normal termination of a
    1-1 StreamedMedia call by the remote user is represented as a D-Bus
    error name.</doc>
      </member>
      <member name="connection_refused"
              value="30"
              c:identifier="TP_ERROR_CONNECTION_REFUSED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="149">org.freedesktop.Telepathy.Error.ConnectionRefused:
    Raised when a connection is refused.</doc>
      </member>
      <member name="connection_failed"
              value="31"
              c:identifier="TP_ERROR_CONNECTION_FAILED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="151">org.freedesktop.Telepathy.Error.ConnectionFailed:
    Raised when a connection can't be established.</doc>
      </member>
      <member name="connection_lost"
              value="32"
              c:identifier="TP_ERROR_CONNECTION_LOST">
        <doc xml:space="preserve"
             filename="errors.c"
             line="153">org.freedesktop.Telepathy.Error.ConnectionLost:
    Raised when a connection is broken.</doc>
      </member>
      <member name="already_connected"
              value="33"
              c:identifier="TP_ERROR_ALREADY_CONNECTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="155">org.freedesktop.Telepathy.Error.AlreadyConnected:
    Raised on attempts to connect again to an account that is already
    connected, if the protocol or server does not allow this.
    Since 0.7.34</doc>
      </member>
      <member name="connection_replaced"
              value="34"
              c:identifier="TP_ERROR_CONNECTION_REPLACED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="159">org.freedesktop.Telepathy.Error.ConnectionReplaced:
    Used as disconnection reason for an existing connection if it is
    disconnected because a second connection to the same account is made.
    Since 0.7.34</doc>
      </member>
      <member name="registration_exists"
              value="35"
              c:identifier="TP_ERROR_REGISTRATION_EXISTS">
        <doc xml:space="preserve"
             filename="errors.c"
             line="163">org.freedesktop.Telepathy.Error.RegistrationExists:
    Raised on attempts to register an account on a server when the account
    already exists.
    Since 0.7.34</doc>
      </member>
      <member name="service_busy"
              value="36"
              c:identifier="TP_ERROR_SERVICE_BUSY">
        <doc xml:space="preserve"
             filename="errors.c"
             line="167">org.freedesktop.Telepathy.Error.ServiceBusy:
    Raised when a server or other infrastructure rejects a request because
    it is too busy.
    Since 0.7.34</doc>
      </member>
      <member name="resource_unavailable"
              value="37"
              c:identifier="TP_ERROR_RESOURCE_UNAVAILABLE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="171">org.freedesktop.Telepathy.Error.ResourceUnavailable:
    Raised when a local process rejects a request because it does not have
    enough of a resource, such as memory.
    Since 0.7.34</doc>
      </member>
      <member name="would_break_anonymity"
              value="38"
              c:identifier="TP_ERROR_WOULD_BREAK_ANONYMITY">
        <doc xml:space="preserve"
             filename="errors.c"
             line="175">org.freedesktop.Telepathy.Error.WouldBreakAnonymity:
    Raised when a request cannot be satisfied without violating an
    earlier request for anonymity, and the earlier request specified
    that raising an error is preferable to disclosing the user's
    identity
    Since 0.11.7</doc>
      </member>
      <member name="cert_revoked"
              value="39"
              c:identifier="TP_ERROR_CERT_REVOKED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="181">org.freedesktop.Telepathy.Error.Cert.Revoked:
    Raised if the server provided an SSL/TLS certificate that has been
    revoked.
    Since 0.11.12</doc>
      </member>
      <member name="cert_insecure"
              value="40"
              c:identifier="TP_ERROR_CERT_INSECURE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="185">org.freedesktop.Telepathy.Error.Cert.Insecure:
    Raised if the server provided an SSL/TLS certificate that uses an
    insecure cipher algorithm or is cryptographically weak.
    Since 0.11.12</doc>
      </member>
      <member name="cert_limit_exceeded"
              value="41"
              c:identifier="TP_ERROR_CERT_LIMIT_EXCEEDED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="189">org.freedesktop.Telepathy.Error.Cert.LimitExceeded:
    Raised if the length in bytes of the server certificate, or the depth
    of the server certificate chain, exceed the limits imposed by the
    crypto library.
    Since 0.11.12</doc>
      </member>
      <member name="not_yet" value="42" c:identifier="TP_ERROR_NOT_YET">
        <doc xml:space="preserve"
             filename="errors.c"
             line="194">org.freedesktop.Telepathy.Error.NotYet:
    Raised when the requested functionality is not yet available, but is
    likely to become available after some time has passed.
    Since 0.11.15</doc>
      </member>
      <member name="rejected" value="43" c:identifier="TP_ERROR_REJECTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="198">org.freedesktop.Telepathy.Error.Rejected:
    Raised when an incoming or outgoing call is rejected by the receiving
    contact.
    Since 0.13.2</doc>
      </member>
      <member name="picked_up_elsewhere"
              value="44"
              c:identifier="TP_ERROR_PICKED_UP_ELSEWHERE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="202">org.freedesktop.Telepathy.Error.PickedUpElsewhere:
    Raised when a call was terminated as a result of the local user
    picking up the call on a different resource.
    Since 0.13.3</doc>
      </member>
      <member name="confused" value="45" c:identifier="TP_ERROR_CONFUSED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="206">org.freedesktop.Telepathy.Error.Confused:
    Raised if a server rejects protocol messages from a connection manager
    claiming that they do not make sense, two local processes fail to
    understand each other, or an apparently impossible situation is
    reached. This has a similar meaning to %TP_DBUS_ERROR_INCONSISTENT but
    can be passed between processes via D-Bus.
    Since 0.13.7</doc>
      </member>
      <member name="service_confused"
              value="46"
              c:identifier="TP_ERROR_SERVICE_CONFUSED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="213">org.freedesktop.Telepathy.Error.ServiceConfused:
    Raised when a server or other piece of infrastructure indicates an
    internal error, or when a message that makes no sense is received from
    a server or other piece of infrastructure.
    Since 0.13.7</doc>
      </member>
      <member name="emergency_calls_not_supported"
              value="47"
              c:identifier="TP_ERROR_EMERGENCY_CALLS_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="218">org.freedesktop.Telepathy.Error.EmergencyCallsNotSupported:
    Raised when a client attempts to dial a number that is recognized as an
    emergency number (e.g. '911' in the USA), but the Connection
    Manager or provider does not support dialling emergency numbers.</doc>
      </member>
      <member name="software_upgrade_required"
              value="48"
              c:identifier="TP_ERROR_SOFTWARE_UPGRADE_REQUIRED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="223">org.freedesktop.Telepathy.Error.SoftwareUpgradeRequired:
    Raised when a Connection cannot be established because either the
    Connection Manager or its support library (e.g. wocky, papyon, sofiasip)
    requires upgrading to support a newer protocol version.</doc>
      </member>
      <member name="insufficient_balance"
              value="49"
              c:identifier="TP_ERROR_INSUFFICIENT_BALANCE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="228">&lt;code&gt;org.freedesktop.Telepathy.Error.InsufficientBalance&lt;/code&gt;:
    Raised if the user has insufficient balance to place a call.  The key
    'balance-required' MAY be included in CallStateDetails on a Call channel
    (with the same units and scale as AccountBalance) to indicate how much
    credit is required to make this call.</doc>
      </member>
      <member name="media_codecs_incompatible"
              value="50"
              c:identifier="TP_ERROR_MEDIA_CODECS_INCOMPATIBLE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="234">&lt;code&gt;org.freedesktop.Telepathy.Error.Media.CodecsIncompatible&lt;/code&gt;:
    Raised when the local streaming implementation has no codecs in common
    with the remote side.
    Since 0.15.6</doc>
      </member>
      <member name="media_unsupported_type"
              value="51"
              c:identifier="TP_ERROR_MEDIA_UNSUPPORTED_TYPE">
        <doc xml:space="preserve"
             filename="errors.c"
             line="239">&lt;code&gt;org.freedesktop.Telepathy.Error.Media.UnsupportedType&lt;/code&gt;:
    The media stream type requested is not supported by either the local or
    remote side.
    Since 0.15.6</doc>
      </member>
      <member name="media_streaming_error"
              value="52"
              c:identifier="TP_ERROR_MEDIA_STREAMING_ERROR">
        <doc xml:space="preserve"
             filename="errors.c"
             line="244">&lt;code&gt;org.freedesktop.Telepathy.Error.Media.StreamingError&lt;/code&gt;:
    Raised when the call's streaming implementation has some kind of internal
    error.
    Since 0.15.6</doc>
      </member>
      <member name="captcha_not_supported"
              value="53"
              c:identifier="TP_ERROR_CAPTCHA_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="errors.c"
             line="249">&lt;code&gt;org.freedesktop.Telepathy.Error.Media.CaptchaNotSupported&lt;/code&gt;:
    Raised if no UI is available to present captchas, or if one is
    available but it is unable to answer any of the captchas given.</doc>
      </member>
    </enumeration>
    <function-macro name="FILE_TRANSFER_CHANNEL"
                    c:identifier="TP_FILE_TRANSFER_CHANNEL"
                    introspectable="0">
      <source-position filename="file-transfer-channel.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_TRANSFER_CHANNEL_CLASS"
                    c:identifier="TP_FILE_TRANSFER_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="file-transfer-channel.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FILE_TRANSFER_CHANNEL_GET_CLASS"
                    c:identifier="TP_FILE_TRANSFER_CHANNEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="file-transfer-channel.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="FileHashType" c:type="TpFileHashType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="494">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="261"/>
      <member name="none" value="0" c:identifier="TP_FILE_HASH_TYPE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="496">&lt;![CDATA[           No hash.         ]]&gt;</doc>
      </member>
      <member name="md5" value="1" c:identifier="TP_FILE_HASH_TYPE_MD5">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="497">&lt;![CDATA[           MD5 digest as a string of 32 ASCII hex digits.         ]]&gt;</doc>
      </member>
      <member name="sha1" value="2" c:identifier="TP_FILE_HASH_TYPE_SHA1">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="498">&lt;![CDATA[           SHA1 digest as a string of ASCII hex digits.         ]]&gt;</doc>
      </member>
      <member name="sha256" value="3" c:identifier="TP_FILE_HASH_TYPE_SHA256">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="499">&lt;![CDATA[           SHA256 digest as a string of ASCII hex digits.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="FileTransferChannel"
           c:symbol-prefix="file_transfer_channel"
           c:type="TpFileTransferChannel"
           version="0.15.5"
           parent="Channel"
           glib:type-name="TpFileTransferChannel"
           glib:get-type="tp_file_transfer_channel_get_type"
           glib:type-struct="FileTransferChannelClass">
      <doc xml:space="preserve"
           filename="file-transfer-channel.c"
           line="81">Data structure representing a #TpFileTransferChannel.</doc>
      <source-position filename="file-transfer-channel.h" line="58"/>
      <constructor name="new"
                   c:identifier="tp_file_transfer_channel_new"
                   version="0.15.5"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1041">Convenient function to create a new #TpFileTransferChannel</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_channel() instead.</doc-deprecated>
        <source-position filename="file-transfer-channel.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1054">a newly created #TpFileTransferChannel</doc>
          <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
        </return-value>
        <parameters>
          <parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1043">a #TpConnection; may not be %NULL</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1044">the object path of the channel; may not be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1045">
 the immutable properties of the channel,
 as signalled by the NewChannel D-Bus signal or returned by the
 CreateChannel and EnsureChannel D-Bus methods: a mapping from
 strings (D-Bus interface name + "." + property name) to #GValue instances</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_core"
                c:identifier="tp_file_transfer_channel_get_feature_quark_core">
        <source-position filename="file-transfer-channel.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="accept_file_async"
              c:identifier="tp_file_transfer_channel_accept_file_async"
              version="0.17.1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1299">Accept an incoming file transfer in the
%TP_FILE_TRANSFER_STATE_PENDING state. Once the accept has been
processed, @callback will be called. You can then call
tp_file_transfer_channel_accept_file_finish() to get the result of
the operation.</doc>
        <source-position filename="file-transfer-channel.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1301">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1302">a #GFile where the file should be saved</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1303">Offset from the start of @file where transfer begins</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1304">a callback to call when the transfer has been accepted</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1305">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_file_finish"
              c:identifier="tp_file_transfer_channel_accept_file_finish"
              version="0.17.1"
              throws="1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1361">Finishes a call to tp_file_transfer_channel_accept_file_async().</doc>
        <source-position filename="file-transfer-channel.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1369">%TRUE if the accept operation was a success, or %FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1363">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1364">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_date"
              c:identifier="tp_file_transfer_channel_get_date"
              glib:get-property="date"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1529">Return the #TpFileTransferChannel:date property</doc>
        <source-position filename="file-transfer-channel.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1535">the value of the #TpFileTransferChannel:date
  property</doc>
          <type name="GLib.DateTime" c:type="GDateTime*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1531">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="tp_file_transfer_channel_get_description"
              glib:get-property="description"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1548">Return the #TpFileTransferChannel:description property</doc>
        <source-position filename="file-transfer-channel.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1554">the value of the
  #TpFileTransferChannel:description property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1550">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filename"
              c:identifier="tp_file_transfer_channel_get_filename"
              glib:get-property="filename"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1567">Return the #TpFileTransferChannel:filename property</doc>
        <source-position filename="file-transfer-channel.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1573">the value of the
  #TpFileTransferChannel:filename property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1569">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_metadata"
              c:identifier="tp_file_transfer_channel_get_metadata"
              version="0.17.1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1667">Return the #TpFileTransferChannel:metadata property</doc>
        <source-position filename="file-transfer-channel.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1673">the
  value of the #TpFileTransferChannel:metadata property</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <array>
              <type name="utf8"/>
            </array>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1669">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="tp_file_transfer_channel_get_mime_type"
              glib:get-property="mime-type"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1510">Return the #TpFileTransferChannel:mime-type property</doc>
        <source-position filename="file-transfer-channel.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1516">the value of the
  #TpFileTransferChannel:mime-type property</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1512">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_name"
              c:identifier="tp_file_transfer_channel_get_service_name"
              glib:get-property="service-name"
              version="0.17.1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1649">Return the #TpFileTransferChannel:service-name property</doc>
        <source-position filename="file-transfer-channel.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1655">the value of the #TpFileTransferChannel:service-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1651">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_size"
              c:identifier="tp_file_transfer_channel_get_size"
              glib:get-property="size"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1586">Return the #TpFileTransferChannel:size property</doc>
        <source-position filename="file-transfer-channel.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1592">the value of the #TpFileTransferChannel:size property</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1588">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="tp_file_transfer_channel_get_state"
              glib:get-property="state"
              version="0.17.1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1604">Returns the #TpFileTransferChannel:state property.

If @reason is not %NULL it is set to the reason why
#TpFileTransferChannel:state changed to its current value.</doc>
        <source-position filename="file-transfer-channel.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1614">the value of the #TpFileTransferChannel:state property</doc>
          <type name="FileTransferState" c:type="TpFileTransferState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1606">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
          <parameter name="reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1607">a #TpFileTransferStateChangeReason, or %NULL</doc>
            <type name="FileTransferStateChangeReason"
                  c:type="TpFileTransferStateChangeReason*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_transferred_bytes"
              c:identifier="tp_file_transfer_channel_get_transferred_bytes"
              glib:get-property="transferred-bytes"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1631">Return the #TpFileTransferChannel:transferred-bytes property</doc>
        <source-position filename="file-transfer-channel.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1637">the value of the #TpFileTransferChannel:transferred-bytes property</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1633">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="provide_file_async"
              c:identifier="tp_file_transfer_channel_provide_file_async"
              version="0.17.1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1416">Provide a file transfer. This should be called when the file
transfer state changes (tp_file_transfer_channel_get_state() and
the "notify::state" signal) to
%TP_FILE_TRANSFER_STATE_ACCEPTED or
%TP_FILE_TRANSFER_STATE_PENDING. Once the file has been provided,
the channel #TpFileTransferChannel:state will change to
%TP_FILE_TRANSFER_STATE_OPEN.

Once the file has been provided, @callback will be called. You
should then call tp_file_transfer_channel_provide_file_finish() to
get the result of the operation.</doc>
        <source-position filename="file-transfer-channel.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1418">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1419">a #GFile to send to the remote contact</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1420">a callback to call when the transfer has been accepted</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1421">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="provide_file_finish"
              c:identifier="tp_file_transfer_channel_provide_file_finish"
              version="0.17.1"
              throws="1">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="1481">Finishes a call to tp_file_transfer_channel_provide_file_async().


Successful return from this function does not mean that the file
transfer has completed or has even started at all. The state of the
file transfer should be monitored with the "notify::state" signal.</doc>
        <source-position filename="file-transfer-channel.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="file-transfer-channel.c"
               line="1494">%TRUE if the file has been successfully provided, or
%FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1483">a #TpFileTransferChannel</doc>
            <type name="FileTransferChannel" c:type="TpFileTransferChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="file-transfer-channel.c"
                 line="1484">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="date" transfer-ownership="none" getter="get_date">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="775">A #GDateTime representing the last modification time of the file to be
transferred.

Since 0.15.5</doc>
        <type name="GLib.DateTime"/>
      </property>
      <property name="description"
                transfer-ownership="none"
                getter="get_description"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="791">The description of the file transfer, defined by the sender when
sending the file transfer offer.

Since 0.15.5</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="file" version="0.17.1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="807">For incoming file transfers, this property will be set to a
#GFile for the location where the file will be saved (given by
tp_file_transfer_channel_accept_file_async()) when the transfer
starts. The feature %TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE must
already be prepared for this property to have a meaningful
value, and to receive change notification.  Once the initial
value is set, this property will not be changed.

For outgoing file transfers, this property is a #GFile for the
location of the file being sent (given by
tp_file_transfer_channel_provide_file_async()). The feature
%TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE does not have to be
prepared and there is no change notification.</doc>
        <type name="Gio.File"/>
      </property>
      <property name="filename"
                transfer-ownership="none"
                getter="get_filename"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="834">The name of the file on the sender's side. This is therefore given as a
suggested filename for the receiver.

Since 0.15.5</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="initial-offset"
                version="0.17.1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="903">The offset in bytes from where the file should be sent.

The %TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE feature has to be
prepared for this property to be meaningful and kept up to date.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="metadata"
                version="0.17.1"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="959">Additional information about the file transfer set by the channel
initiator, or an empty #GHashTable if the initiator did not
provide any additional information.

To provide metadata along with a file offer, include
%TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA in the
channel request. For example:

|[
GHashTable *request;
GHashTable *metadata = g_hash_table_new (g_str_hash, g_str_equal);
const gchar * const values[] = { "Jason Derulo", "Tinie Tempah", NULL };

g_hash_table_insert (metadata, "best buds", values);

request = tp_asv_new (
    TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER,
    TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
    TP_PROP_CHANNEL_TARGET_ID, G_TYPE_STRING, "foo@bar.com",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE, G_TYPE_STRING, "text/plain",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE, G_TYPE_INT64, 1320925992,
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION, G_TYPE_STRING, "",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME, G_TYPE_STRING, "test.pdf",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET, G_TYPE_UINT64, 0,
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE, G_TYPE_UINT64, 165710,
    TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA, TP_TYPE_METADATA, metadata,
    NULL);

...
]|

The %TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE feature has to be
prepared for this property to be meaningful.</doc>
        <type/>
      </property>
      <property name="mime-type"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_mime_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="760">The MIME type of the file to be transferred.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service-name"
                version="0.17.1"
                transfer-ownership="none"
                getter="get_service_name">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="921">A string representing the name of the service suggested to handle
this file transfer channel, or %NULL if the initiator did not
provide one.

This is a useful way of requesting file transfer channels with a
hint of what handler they should be handled by on the remote
side. If a channel request is made with this property set (to a
contact who also supports the metadata extension; see the
requestable channel classes for said contact), this property will
be set to the same value on the remote incoming channel and
handlers can match on this in their handler filter. For example,
a remote handler could call the following:

|[
tp_base_client_take_handler_filter (handler, tp_asv_new (
              TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER,
              TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
              TP_PROP_CHANNEL_REQUESTED, G_TYPE_BOOLEAN, FALSE,
              TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_SERVICE_NAME, G_TYPE_STRING, "service.name",
              NULL));
]|

The %TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE feature has to be
prepared for this property to be meaningful.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="size"
                transfer-ownership="none"
                getter="get_size"
                default-value="0">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="850">The size of the file to be transferred,
or %G_MAXUINT64 if not known.

Since 0.15.5</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="state"
                transfer-ownership="none"
                getter="get_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="866">A TpFileTransferState holding the state of the file transfer.

The %TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE feature has to be
prepared for this property to be meaningful and kept up to date.

Since 0.17.1</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transferred-bytes"
                version="0.15.5"
                transfer-ownership="none"
                getter="get_transferred_bytes"
                default-value="0">
        <doc xml:space="preserve"
             filename="file-transfer-channel.c"
             line="884">The number of bytes transferred so far in this
file transfer.

The %TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE feature has to be
prepared for this property to be meaningful and kept up to date.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Channel" c:type="TpChannel"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="FileTransferChannelPrivate"
              c:type="TpFileTransferChannelPrivate*"/>
      </field>
    </class>
    <record name="FileTransferChannelClass"
            c:type="TpFileTransferChannelClass"
            glib:is-gtype-struct-for="FileTransferChannel"
            version="0.15.5">
      <doc xml:space="preserve"
           filename="file-transfer-channel.c"
           line="89">The class of a #TpFileTransferChannel.</doc>
      <source-position filename="file-transfer-channel.h" line="58"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ChannelClass" c:type="TpChannelClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="FileTransferChannelPrivate"
            c:type="TpFileTransferChannelPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="file-transfer-channel.h" line="44"/>
    </record>
    <enumeration name="FileTransferState" c:type="TpFileTransferState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="448">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="241"/>
      <member name="none" value="0" c:identifier="TP_FILE_TRANSFER_STATE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="450">&lt;![CDATA[           An invalid state type used as a null value. This value MUST NOT           appear in the State property.         ]]&gt;</doc>
      </member>
      <member name="pending"
              value="1"
              c:identifier="TP_FILE_TRANSFER_STATE_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="451">&lt;![CDATA[           The file transfer is waiting to be accepted/closed by the receiver.           The receiver has to call AcceptFile,           then wait for the state to change to Open and check the offset value.         ]]&gt;</doc>
      </member>
      <member name="accepted"
              value="2"
              c:identifier="TP_FILE_TRANSFER_STATE_ACCEPTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="452">&lt;![CDATA[           The receiver has accepted the transfer. The sender now has to           call ProvideFile to actually start the transfer.           The receiver should now wait for the state to change to Open           and check the offset value.         ]]&gt;</doc>
      </member>
      <member name="open" value="3" c:identifier="TP_FILE_TRANSFER_STATE_OPEN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="453">&lt;![CDATA[           The file transfer is open for traffic.         ]]&gt;</doc>
      </member>
      <member name="completed"
              value="4"
              c:identifier="TP_FILE_TRANSFER_STATE_COMPLETED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="454">&lt;![CDATA[           The file transfer has been completed successfully.         ]]&gt;</doc>
      </member>
      <member name="cancelled"
              value="5"
              c:identifier="TP_FILE_TRANSFER_STATE_CANCELLED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="455">&lt;![CDATA[           The file transfer has been cancelled.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="FileTransferStateChangeReason"
                 c:type="TpFileTransferStateChangeReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="471">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="252"/>
      <member name="none"
              value="0"
              c:identifier="TP_FILE_TRANSFER_STATE_CHANGE_REASON_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="473">&lt;![CDATA[           No reason was specified.         ]]&gt;</doc>
      </member>
      <member name="requested"
              value="1"
              c:identifier="TP_FILE_TRANSFER_STATE_CHANGE_REASON_REQUESTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="474">&lt;![CDATA[           The change in state was requested.         ]]&gt;</doc>
      </member>
      <member name="local_stopped"
              value="2"
              c:identifier="TP_FILE_TRANSFER_STATE_CHANGE_REASON_LOCAL_STOPPED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="475">&lt;![CDATA[           The file transfer was cancelled by the local user.         ]]&gt;</doc>
      </member>
      <member name="remote_stopped"
              value="3"
              c:identifier="TP_FILE_TRANSFER_STATE_CHANGE_REASON_REMOTE_STOPPED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="476">&lt;![CDATA[           The file transfer was cancelled by the remote user.         ]]&gt;</doc>
      </member>
      <member name="local_error"
              value="4"
              c:identifier="TP_FILE_TRANSFER_STATE_CHANGE_REASON_LOCAL_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="477">&lt;![CDATA[           The file transfer was cancelled because of a local error.         ]]&gt;</doc>
      </member>
      <member name="remote_error"
              value="5"
              c:identifier="TP_FILE_TRANSFER_STATE_CHANGE_REASON_REMOTE_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="478">&lt;![CDATA[           The file transfer was cancelled because of a remote error.         ]]&gt;</doc>
      </member>
    </enumeration>
    <function-macro name="GROUP_MIXIN"
                    c:identifier="TP_GROUP_MIXIN"
                    introspectable="0">
      <source-position filename="group-mixin.h" line="163"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GROUP_MIXIN_CLASS"
                    c:identifier="TP_GROUP_MIXIN_CLASS"
                    introspectable="0">
      <source-position filename="group-mixin.h" line="155"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GROUP_MIXIN_CLASS_OFFSET"
                    c:identifier="TP_GROUP_MIXIN_CLASS_OFFSET"
                    introspectable="0">
      <source-position filename="group-mixin.h" line="153"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GROUP_MIXIN_OFFSET"
                    c:identifier="TP_GROUP_MIXIN_OFFSET"
                    introspectable="0">
      <source-position filename="group-mixin.h" line="161"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <record name="GroupMixin" c:type="TpGroupMixin">
      <doc xml:space="preserve"
           filename="group-mixin.h"
           line="97">Structure representing the group mixin as used in a particular class.
To be placed in the implementation's instance structure.

All fields should be considered read-only.</doc>
      <source-position filename="group-mixin.h" line="128"/>
      <field name="handle_repo" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="99">The connection's contact handle repository</doc>
        <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
      </field>
      <field name="self_handle" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="100">The local user's handle within this group, or 0 if none.
 Set using tp_group_mixin_init() and tp_group_mixin_change_self_handle().</doc>
        <type name="Handle" c:type="TpHandle"/>
      </field>
      <field name="group_flags" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="102">This group's flags. Set using tp_group_mixin_change_flags();
 defaults to 0.</doc>
        <type name="ChannelGroupFlags" c:type="TpChannelGroupFlags"/>
      </field>
      <field name="members" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="104">The members of the group. Alter using
 tp_group_mixin_change_members().</doc>
        <type name="HandleSet" c:type="TpHandleSet*"/>
      </field>
      <field name="local_pending" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="106">Members awaiting the local user's approval to join the
 group. Alter using tp_group_mixin_change_members().</doc>
        <type name="HandleSet" c:type="TpHandleSet*"/>
      </field>
      <field name="remote_pending" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="108">Members awaiting remote (e.g. remote user or server)
 approval to join the group. Alter using tp_group_mixin_change_members().</doc>
        <type name="HandleSet" c:type="TpHandleSet*"/>
      </field>
      <field name="priv" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="110">Pointer to opaque private data</doc>
        <type name="GroupMixinPrivate" c:type="TpGroupMixinPrivate*"/>
      </field>
      <function name="add_handle_owner"
                c:identifier="tp_group_mixin_add_handle_owner"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1833">Note that the given local handle is an alias within this group
for the given globally-valid handle. It will be returned from subsequent
GetHandleOwner queries where appropriate.

Changed in 0.7.10: The @owner_handle may be 0. To comply with telepathy-spec
 0.17.6, before adding any channel-specific handle to the members,
 local-pending members or remote-pending members, you must call either
 this function or tp_group_mixin_add_handle_owners().</doc>
        <source-position filename="group-mixin.h" line="221"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1835">A GObject implementing the group interface with this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="local_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1836">A contact handle valid within this group (may not be 0)</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="owner_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1837">A contact handle valid globally, or 0 if the owner of the
 @local_handle is unknown</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </function>
      <function name="add_handle_owners"
                c:identifier="tp_group_mixin_add_handle_owners"
                version="0.7.10"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1920">Note that the given local handles are aliases within this group
for the given globally-valid handles.

To comply with telepathy-spec 0.17.6, before adding any channel-specific
handle to the members, local-pending members or remote-pending members, you
must call either this function or tp_group_mixin_add_handle_owner().</doc>
        <source-position filename="group-mixin.h" line="223"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1922">A GObject implementing the group interface with this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="local_to_owner_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1923">A map from contact handles valid within this group
 (which may not be 0) to either contact handles valid globally, or 0 if the
 owner of the corresponding key is unknown; all handles are stored using
 GUINT_TO_POINTER</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="add_members"
                c:identifier="tp_group_mixin_add_members"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="513">Request that the given contacts be added to the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
Otherwise attempt to add the contacts by calling the callbacks provided
by the channel implementation.</doc>
        <source-position filename="group-mixin.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="526">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="515">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="516">A GArray of guint representing contacts</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="517">A message associated with the addition request, if supported</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="change_flags"
                c:identifier="tp_group_mixin_change_flags"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1204">Request a change to be made to the flags. If any flags were actually
set or cleared, emits the GroupFlagsChanged signal with the changes.

It is an error to set any of the same bits in both @add and @del.

Changed in 0.7.7: the signal is not emitted if adding @add and
 removing @del had no effect on the existing group flags.</doc>
        <source-position filename="group-mixin.h" line="208"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1206">An object implementing the groups interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="add" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1207">Flags to be added</doc>
            <type name="ChannelGroupFlags" c:type="TpChannelGroupFlags"/>
          </parameter>
          <parameter name="del" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1208">Flags to be removed</doc>
            <type name="ChannelGroupFlags" c:type="TpChannelGroupFlags"/>
          </parameter>
        </parameters>
      </function>
      <function name="change_members"
                c:identifier="tp_group_mixin_change_members"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1675">Change the sets of members as given by the arguments, and emit the
MembersChanged and MembersChangedDetailed signals if the changes were not a
no-op.

This function must be called in response to events on the underlying
IM protocol, and must not be called in direct response to user input;
it does not respect the permissions flags, but changes the group directly.

If any two of add, del, add_local_pending and add_remote_pending have
a non-empty intersection, the result is undefined. Don't do that.

Each of the TpIntset arguments may be %NULL, which is treated as
equivalent to an empty set.</doc>
        <source-position filename="group-mixin.h" line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1706">%TRUE if the group was changed and the MembersChanged(Detailed)
 signals were emitted; %FALSE if nothing actually changed and the signals
 were suppressed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1677">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1678">A message to be sent to the affected contacts if possible;
 %NULL is allowed, and is mapped to an empty string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="add" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1680">A set of contact handles to be added to the members (if not
 already present) and removed from local pending and remote pending
 (if present)</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="del" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1683">A set of contact handles to be removed from members,
 local pending or remote pending, wherever they are present</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="add_local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1685">A set of contact handles to be added to local pending,
 and removed from members and remote pending</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="add_remote_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1687">A set of contact handles to be added to remote pending,
 and removed from members and local pending</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="actor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1689">The handle of the contact responsible for this change</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1690">The reason for this change</doc>
            <type name="ChannelGroupChangeReason"
                  c:type="TpChannelGroupChangeReason"/>
          </parameter>
        </parameters>
      </function>
      <function name="change_members_detailed"
                c:identifier="tp_group_mixin_change_members_detailed"
                version="0.7.21"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1749">Change the sets of members as given by the arguments, and emit the
MembersChanged and MembersChangedDetailed signals if the changes were not a
no-op.

This function must be called in response to events on the underlying
IM protocol, and must not be called in direct response to user input;
it does not respect the permissions flags, but changes the group directly.

If any two of add, del, add_local_pending and add_remote_pending have
a non-empty intersection, the result is undefined. Don't do that.

Each of the TpIntset arguments may be %NULL, which is treated as
equivalent to an empty set.

details may contain, among other entries, the well-known
keys (and corresponding type, wrapped in a GValue) defined by the
Group.MembersChangedDetailed signal's specification; these include "actor"
(a handle as G_TYPE_UINT), "change-reason" (an element of
#TpChannelGroupChangeReason as G_TYPE_UINT), "message" (G_TYPE_STRING),
"error" (G_TYPE_STRING), "debug-message" (G_TYPE_STRING).

If all of the information in details could be passed to
tp_group_mixin_change_members() then calling this function instead provides
no benefit. Calling this function without setting
#TP_CHANNEL_GROUP_FLAG_MEMBERS_CHANGED_DETAILED with
tp_group_mixin_change_members() first is not very useful, as clients will
not know to listen for MembersChangedDetailed and thus will miss the
details.</doc>
        <source-position filename="group-mixin.h" line="214"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1792">%TRUE if the group was changed and the MembersChanged(Detailed)
 signals were emitted; %FALSE if nothing actually changed and the signals
 were suppressed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1751">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="add" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1752">A set of contact handles to be added to the members (if not
 already present) and removed from local pending and remote pending
 (if present)</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="del" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1755">A set of contact handles to be removed from members,
 local pending or remote pending, wherever they are present</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="add_local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1757">A set of contact handles to be added to local pending,
 and removed from members and remote pending</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="add_remote_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1759">A set of contact handles to be added to remote pending,
 and removed from members and local pending</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1761">a map from strings to GValues detailing the change</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="change_self_handle"
                c:identifier="tp_group_mixin_change_self_handle"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="426">Change the self-handle for this group to the given value.</doc>
        <source-position filename="group-mixin.h" line="218"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="428">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="new_self_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="429">The new self-handle for this group</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </function>
      <function name="finalize"
                c:identifier="tp_group_mixin_finalize"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="367">Unreference handles and free resources used by this mixin.</doc>
        <source-position filename="group-mixin.h" line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="369">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_all_members"
                c:identifier="tp_group_mixin_get_all_members"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1014">Get the group's current and pending members.</doc>
        <source-position filename="group-mixin.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1027">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1016">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="members" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1017">Used to return a newly-allocated GArray of guint representing
the handles of the group's members</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="local_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1019">Used to return a newly-allocated GArray of guint
representing the handles of the group's local pending members</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="remote_pending" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1021">Used to return a newly-allocated GArray of guint
representing the handles of the group's remote pending members</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_dbus_property"
                c:identifier="tp_group_mixin_get_dbus_property"
                version="0.7.10"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="2060">An implementation of #TpDBusPropertiesMixinGetter which assumes that the
@object has the group mixin. It can only be used for the Group interface.</doc>
        <source-position filename="group-mixin.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2062">An object with this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="interface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2063">Must be %TP_IFACE_QUARK_CHANNEL_INTERFACE_GROUP</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2064">A quark representing the D-Bus property name, either
 "GroupFlags", "HandleOwners", "LocalPendingMembers", "Members",
 "RemotePendingMembers" or "SelfHandle"</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2067">A GValue pre-initialized to the right type, into which to put the
 value</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
          <parameter name="unused"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2069">Ignored</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_group_flags"
                c:identifier="tp_group_mixin_get_group_flags"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="471">Set the guint pointed to by ret to this group's flags, to be
interpreted according to TpChannelGroupFlags.</doc>
        <source-position filename="group-mixin.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="480">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="473">An object implementing the group mixin using this interface</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="474">Used to return the flags</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_handle_owners"
                c:identifier="tp_group_mixin_get_handle_owners"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1068">If the mixin has the flag %TP_CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES,
return the global owners of the given local handles, or 0 where
unavailable.</doc>
        <source-position filename="group-mixin.h" line="205"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1080">%TRUE (setting @ret) on success, %FALSE (setting @error) on
failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1070">An object implementing the group interface with this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="handles" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1071">An array of guint representing locally valid handles</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="1072">Used to return an array of guint representing globally valid
 handles, or 0 where unavailable, if %TRUE is returned</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_local_pending_members"
                c:identifier="tp_group_mixin_get_local_pending_members"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="839">Get the group's local-pending members.</doc>
        <source-position filename="group-mixin.h" line="195"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="847">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="841">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="842">Used to return a newly-allocated GArray of guint contact handles</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_local_pending_members_with_info"
                c:identifier="tp_group_mixin_get_local_pending_members_with_info"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="912">Get the group's local-pending members and information about their
requests to join the channel.</doc>
        <source-position filename="group-mixin.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="924">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="914">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="915">Used to return a newly-allocated GPtrArray of D-Bus structures each
containing the handle of a local-pending contact, the handle of a contact
 responsible for adding them to the group (or 0), the reason code
 and a related message (e.g. their request to join the group)</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_members"
                c:identifier="tp_group_mixin_get_members"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="797">Get the group's current members</doc>
        <source-position filename="group-mixin.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="805">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="799">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="800">Used to return a newly-allocated GArray of guint contact handles</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_offset_quark"
                c:identifier="tp_group_mixin_get_offset_quark"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="192">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="group-mixin.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="197">the quark used for storing mixin offset on a GObject</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_remote_pending_members"
                c:identifier="tp_group_mixin_get_remote_pending_members"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="970">Get the group's remote-pending members.</doc>
        <source-position filename="group-mixin.h" line="199"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="979">%TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="972">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="973">Used to return a newly-allocated GArray of guint representing the
handles of the group's remote pending members</doc>
            <array name="GLib.Array" c:type="GArray**">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
        </parameters>
      </function>
      <function name="get_self_handle"
                c:identifier="tp_group_mixin_get_self_handle"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="393">Set the guint pointed to by ret to the local user's handle in this
group, or to 0 if the local user is not present in this group.</doc>
        <source-position filename="group-mixin.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="402">%TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="395">An object implementing the group mixin using this interface</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="ret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="396">Used to return the local user's handle in this group</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </function>
      <function name="iface_init"
                c:identifier="tp_group_mixin_iface_init"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="2017">Fill in the vtable entries needed to implement the group interface using
this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</doc>
        <source-position filename="group-mixin.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_iface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2019">A #TpSvcChannelInterfaceGroupClass</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="iface_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2020">Unused</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="init"
                c:identifier="tp_group_mixin_init"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="302">Initialize the mixin.</doc>
        <source-position filename="group-mixin.h" line="176"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="304">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="305">The offset of the TpGroupMixin structure within the instance
 structure</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="handle_repo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="307">The connection's handle repository for contacts</doc>
            <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
          </parameter>
          <parameter name="self_handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="308">The handle of the local user in this group, if any</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </function>
      <function name="init_dbus_properties"
                c:identifier="tp_group_mixin_init_dbus_properties"
                version="0.7.10"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="2175">Set up #TpDBusPropertiesMixinClass to use this mixin's implementation of
the Group interface's properties.

This uses tp_group_mixin_get_dbus_property() as the property getter and
sets up a list of the supported properties for it.  Having called this, you
should add #TP_CHANNEL_GROUP_FLAG_PROPERTIES to any channels of this class
with tp_group_mixin_change_flags() to indicate that the DBus properties are
available.</doc>
        <source-position filename="group-mixin.h" line="228"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="2177">The class of an object with this mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_members"
                c:identifier="tp_group_mixin_remove_members"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="609">Request that the given contacts be removed from the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
If any of the handles is absent from the group, raise NotAvailable.
Otherwise attempt to remove the contacts by calling the callbacks provided
by the channel implementation.</doc>
        <source-position filename="group-mixin.h" line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="623">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="611">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="612">A GArray of guint representing contacts</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="613">A message to be sent to those contacts, if supported</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="remove_members_with_reason"
                c:identifier="tp_group_mixin_remove_members_with_reason"
                introspectable="0"
                throws="1">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="635">Request that the given contacts be removed from the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
If any of the handles is absent from the group, raise NotAvailable.
Otherwise attempt to remove the contacts by calling the callbacks provided
by the channel implementation.</doc>
        <source-position filename="group-mixin.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="650">%TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="637">An object implementing the group interface using this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="638">A GArray of guint representing contacts</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="gpointer" c:type="gpointer"/>
            </array>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="639">A message to be sent to those contacts, if supported</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="640">A #TpChannelGroupChangeReason</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="GroupMixinAddMemberFunc"
              c:type="TpGroupMixinAddMemberFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.h"
           line="43">Signature of the callback used to add a member to the group.
This should perform the necessary operations in the underlying IM protocol
to cause the member to be added.</doc>
      <source-position filename="group-mixin.h" line="56"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="54">%TRUE on success, %FALSE with @error set on error</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="45">An object implementing the group interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="46">The handle of the contact to be added</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="47">A message to be sent if the protocol supports it</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="GroupMixinClass" c:type="TpGroupMixinClass">
      <doc xml:space="preserve"
           filename="group-mixin.h"
           line="130">Structure representing the group mixin as used in a particular class.
To be placed in the implementation's class structure.

Initialize this with tp_group_mixin_class_init().

All fields should be considered read-only.</doc>
      <source-position filename="group-mixin.h" line="149"/>
      <field name="add_member" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="132">The add-member function that was passed to
 tp_group_mixin_class_init()</doc>
        <type name="GroupMixinAddMemberFunc"
              c:type="TpGroupMixinAddMemberFunc"/>
      </field>
      <field name="remove_member" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="134">The remove-member function that was passed to
 tp_group_mixin_class_init()</doc>
        <type name="GroupMixinRemMemberFunc"
              c:type="TpGroupMixinRemMemberFunc"/>
      </field>
      <field name="priv" writable="1">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="136">Pointer to opaque private data</doc>
        <type name="GroupMixinClassPrivate"
              c:type="TpGroupMixinClassPrivate*"/>
      </field>
      <function name="allow_self_removal"
                c:identifier="tp_group_mixin_class_allow_self_removal"
                version="0.7.27"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="269">Configure the mixin to allow attempts to remove the SelfHandle from this
Group, even if the group flags would otherwise disallow this. The
channel's #TpGroupMixinRemMemberFunc or
#TpGroupMixinRemMemberWithReasonFunc will be called as usual for such
attempts, and may make them fail with %TP_ERROR_PERMISSION_DENIED if
required.

This function should be called from the GObject @class_init callback,
after calling tp_group_mixin_class_init().

(Recent telepathy-spec changes make it valid to try to remove the
self-handle at all times, regardless of group flags. However, if this was
implemented automatically in TpGroupMixin, this would risk crashing
connection manager implementations that assume that TpGroupMixin will
enforce the group flags strictly. As a result, connection managers should
call this function to indicate to the TpGroupMixin that it may call their
removal callback with the self-handle regardless of flag settings.)</doc>
        <source-position filename="group-mixin.h" line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj_cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="271">The class of an object implementing the group interface using this
 mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_offset_quark"
                c:identifier="tp_group_mixin_class_get_offset_quark"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="176">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="group-mixin.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="181">the quark used for storing mixin offset on a GObjectClass</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init"
                c:identifier="tp_group_mixin_class_init"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="234">Configure the mixin for use with the given class.</doc>
        <source-position filename="group-mixin.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj_cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="236">The class of an object implementing the group interface using this
 mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="238">The offset of the TpGroupMixinClass structure within the class
 structure</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="add_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="240">A callback to be used to add contacts to this group</doc>
            <type name="GroupMixinAddMemberFunc"
                  c:type="TpGroupMixinAddMemberFunc"/>
          </parameter>
          <parameter name="rem_func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="241">A callback to be used to remove contacts from this group.
 This must be %NULL if you will subsequently call
 tp_group_mixin_class_set_remove_with_reason_func().</doc>
            <type name="GroupMixinRemMemberFunc"
                  c:type="TpGroupMixinRemMemberFunc"/>
          </parameter>
        </parameters>
      </function>
      <function name="set_remove_with_reason_func"
                c:identifier="tp_group_mixin_class_set_remove_with_reason_func"
                version="0.5.13"
                introspectable="0">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="208">Set a callback to be used to implement RemoveMembers() and
RemoveMembersWithReason(). If this function is called during class
initialization, the given callback will be used instead of the remove
callback passed to tp_group_mixin_class_init() (which must be %NULL
in this case).</doc>
        <source-position filename="group-mixin.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="210">The class of an object implementing the group interface using this
 mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="func" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="group-mixin.c"
                 line="212">A callback to be used to remove contacts from this group with a
 specified reason.</doc>
            <type name="GroupMixinRemMemberWithReasonFunc"
                  c:type="TpGroupMixinRemMemberWithReasonFunc"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="GroupMixinClassPrivate"
            c:type="TpGroupMixinClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="group-mixin.h" line="38"/>
    </record>
    <record name="GroupMixinPrivate"
            c:type="TpGroupMixinPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="group-mixin.h" line="41"/>
    </record>
    <callback name="GroupMixinRemMemberFunc"
              c:type="TpGroupMixinRemMemberFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.h"
           line="59">Signature of the callback used to remove a member from the group.
This should perform the necessary operations in the underlying IM protocol
to cause the member to be removed.</doc>
      <source-position filename="group-mixin.h" line="72"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="70">%TRUE on success, %FALSE with @error set on error</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="61">An object implementing the group interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="62">The handle of the contact to be removed</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="63">A message to be sent if the protocol supports it</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="GroupMixinRemMemberWithReasonFunc"
              c:type="TpGroupMixinRemMemberWithReasonFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.h"
           line="75">Signature of the callback used to remove a member from the group.
This should perform the necessary operations in the underlying IM protocol
to cause the member to be removed.

Set this with tp_group_mixin_class_set_remove_with_reason_func(), .</doc>
      <source-position filename="group-mixin.h" line="91"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.h"
             line="89">%TRUE on success, %FALSE with @error set on error</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="77">An object implementing the group interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="78">The handle of the contact to be removed</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="79">A message to be sent if the protocol supports it</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="reason" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.h"
               line="80">A #TpChannelGroupChangeReason indicating the reason</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </callback>
    <function-macro name="HANDLE_CHANNELS_CONTEXT"
                    c:identifier="TP_HANDLE_CHANNELS_CONTEXT"
                    introspectable="0">
      <source-position filename="handle-channels-context.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_CHANNELS_CONTEXT_CLASS"
                    c:identifier="TP_HANDLE_CHANNELS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="handle-channels-context.h" line="45"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_CHANNELS_CONTEXT_GET_CLASS"
                    c:identifier="TP_HANDLE_CHANNELS_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="handle-channels-context.h" line="52"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_REPO_IFACE"
                    c:identifier="TP_HANDLE_REPO_IFACE"
                    introspectable="0">
      <source-position filename="handle-repo.h" line="54"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HANDLE_REPO_IFACE_GET_CLASS"
                    c:identifier="TP_HANDLE_REPO_IFACE_GET_CLASS"
                    introspectable="0">
      <source-position filename="handle-repo.h" line="62"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HAS_GROUP_MIXIN"
                    c:identifier="TP_HAS_GROUP_MIXIN"
                    version="0.13.9"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="154">&lt;!-- --&gt;</doc>
      <source-position filename="group-mixin.h" line="165"/>
      <parameters>
        <parameter name="o">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="156">a #GObject instance</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="HAS_GROUP_MIXIN_CLASS"
                    c:identifier="TP_HAS_GROUP_MIXIN_CLASS"
                    version="0.13.9"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="165">&lt;!-- --&gt;</doc>
      <source-position filename="group-mixin.h" line="158"/>
      <parameters>
        <parameter name="cls">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="167">a #GObjectClass structure</doc>
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="HTTPMethod" c:type="TpHTTPMethod">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="324">&lt;![CDATA[         The HTTP Method with which to request a URL.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="175"/>
      <member name="get" value="0" c:identifier="TP_HTTP_METHOD_GET">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="326">&lt;![CDATA[           Use the GET method when opening the URL.         ]]&gt;</doc>
      </member>
      <member name="post" value="1" c:identifier="TP_HTTP_METHOD_POST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="327">&lt;![CDATA[           Use the POST method when opening the URL. Refer to           HTTP_Post_Data for more details.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="HandleChannelsContext"
           c:symbol-prefix="handle_channels_context"
           c:type="TpHandleChannelsContext"
           version="0.11.6"
           parent="GObject.Object"
           glib:type-name="TpHandleChannelsContext"
           glib:get-type="tp_handle_channels_context_get_type"
           glib:type-struct="HandleChannelsContextClass">
      <doc xml:space="preserve"
           filename="handle-channels-context.c"
           line="32">Data structure representing the context of a Handler.HandleChannels()
call.</doc>
      <source-position filename="handle-channels-context.h" line="35"/>
      <method name="accept"
              c:identifier="tp_handle_channels_context_accept"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="460">Called by #TpBaseClientClassAddDispatchOperationImpl when it's done so
the D-Bus method can return.

The caller is responsible for closing channels with
tp_cli_channel_call_close() when it has finished handling them.</doc>
        <source-position filename="handle-channels-context.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-channels-context.c"
                 line="462">a #TpHandleChannelsContext</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delay"
              c:identifier="tp_handle_channels_context_delay"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="512">Called by #TpBaseClientClassAddDispatchOperationImpl to indicate that it
implements the method in an async way. The caller must take a reference
to the #TpHandleChannelsContext before calling this function, and
is responsible for calling either
tp_handle_channels_context_accept() or
tp_handle_channels_context_fail() later.</doc>
        <source-position filename="handle-channels-context.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-channels-context.c"
                 line="514">a #TpHandleChannelsContext</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fail"
              c:identifier="tp_handle_channels_context_fail"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="488">Called by #TpBaseClientClassAddDispatchOperationImpl to raise a D-Bus error.</doc>
        <source-position filename="handle-channels-context.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-channels-context.c"
                 line="490">a #TpHandleChannelsContext</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-channels-context.c"
                 line="491">the error to return from the method</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_handler_info"
              c:identifier="tp_handle_channels_context_get_handler_info"
              version="0.11.14">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="690">Return any extra information that accompanied this request to handle
channels (the Handler_Info argument from the HandleChannels D-Bus method).
Well-known keys for this map will be defined by the Telepathy D-Bus
Interface Specification; at the time of writing, none have been defined.

The returned hash table is only valid for as long as @self is.</doc>
        <source-position filename="handle-channels-context.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-channels-context.c"
               line="701">extensible
 extra handler information, in a form suitable for use with
 tp_asv_get_string() etc.</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-channels-context.c"
                 line="692">a channel-handling context</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requests"
              c:identifier="tp_handle_channels_context_get_requests"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="714">Return a list of the #TpChannelRequest which have been satisfied by the
channels associated with #self.</doc>
        <source-position filename="handle-channels-context.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-channels-context.c"
               line="721">
 a newly allocated #GList of reffed #TpChannelRequest.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-channels-context.c"
                 line="716">a channel-handling context</doc>
            <type name="HandleChannelsContext"
                  c:type="TpHandleChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.11.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="296">A #TpAccount object representing the Account of the DispatchOperation
that has been passed to HandleChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Account"/>
      </property>
      <property name="channels"
                version="0.11.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="332">A #GPtrArray containing #TpChannel objects representing the channels
that have been passed to HandleChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="connection"
                version="0.11.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="314">A #TpConnection object representing the Connection of the DispatchOperation
that has been passed to HandleChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Connection"/>
      </property>
      <property name="dbus-context"
                version="0.11.6"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="408">The #DBusGMethodInvocation representing the D-Bus context of the
HandleChannels call.
Can only be written during construction.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="handler-info"
                version="0.11.6"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="390">A #GHashTable where the keys are string and values are GValue instances.
It represents the Handler_info hash table that has been passed to
HandleChannels.

This property can't be %NULL.</doc>
        <type/>
      </property>
      <property name="requests-satisfied"
                version="0.11.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="350">A #GPtrArray containing #TpChannelRequest objects representing the
requests that have been passed to HandleChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="user-action-time"
                version="0.11.6"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="370">The time at which user action occurred, or one of the
special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
%TP_USER_ACTION_TIME_CURRENT_TIME
(see #TpAccountChannelRequest:user-action-time for details)

Read-only except during construction.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <glib:signal name="done" when="last" detailed="1" version="0.11.6">
        <doc xml:space="preserve"
             filename="handle-channels-context.c"
             line="423">Emitted when tp_handle_channels_context_accept has been called on @self.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="HandleChannelsContextClass"
            c:type="TpHandleChannelsContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="HandleChannelsContext"
            version="0.11.6">
      <doc xml:space="preserve"
           filename="handle-channels-context.c"
           line="41">The class of a #TpHandleChannelsContext.</doc>
      <source-position filename="handle-channels-context.h" line="35"/>
    </record>
    <record name="HandleChannelsContextPrivate"
            c:type="TpHandleChannelsContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="handle-channels-context.h" line="37"/>
    </record>
    <interface name="HandleRepoIface"
               c:symbol-prefix="handle_repo_iface"
               c:type="TpHandleRepoIface"
               glib:type-name="TpHandleRepoIface"
               glib:get-type="tp_handle_repo_iface_get_type">
      <doc xml:space="preserve"
           filename="handle-repo.h"
           line="66">Dummy typedef representing any implementation of this interface.</doc>
      <property name="handle-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
    </interface>
    <record name="HandleRepoIfaceClass"
            c:type="TpHandleRepoIfaceClass"
            disguised="1"
            opaque="1">
      <doc xml:space="preserve"
           filename="handle-repo.h"
           line="73">The class of a handle repository interface. The structure layout is
only available within telepathy-glib, for the handle repository
implementations' benefit.</doc>
      <source-position filename="handle-repo.h" line="80"/>
    </record>
    <record name="HandleSet"
            c:type="TpHandleSet"
            opaque="1"
            glib:type-name="TpHandleSet"
            glib:get-type="tp_handle_set_get_type"
            c:symbol-prefix="handle_set">
      <doc xml:space="preserve"
           filename="handle-set.c"
           line="36">A set of handles. This is similar to a #TpIntset (and implemented using
one), but adding a handle to the set also references it.</doc>
      <source-position filename="handle-repo.h" line="48"/>
      <constructor name="new"
                   c:identifier="tp_handle_set_new"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="59">Creates a new #TpHandleSet</doc>
        <source-position filename="handle-repo.h" line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="65">A new #TpHandleSet</doc>
          <type name="HandleSet" c:type="TpHandleSet*"/>
        </return-value>
        <parameters>
          <parameter name="repo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="61">#TpHandleRepoIface that holds the handles to be reffed by this set</doc>
            <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_containing"
                   c:identifier="tp_handle_set_new_containing"
                   version="0.13.0"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="356">Creates a new #TpHandleSet from a specified handle repository and single
handle.</doc>
        <source-position filename="handle-repo.h" line="155"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="364">A new #TpHandleSet</doc>
          <type name="HandleSet" c:type="TpHandleSet*"/>
        </return-value>
        <parameters>
          <parameter name="repo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="358">#TpHandleRepoIface that holds the handles to be reffed by this set</doc>
            <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="359">a valid handle</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_array"
                   c:identifier="tp_handle_set_new_from_array"
                   version="0.11.7"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="80">Creates a new #TpHandleSet</doc>
        <source-position filename="handle-repo.h" line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="87">A new #TpHandleSet</doc>
          <type name="HandleSet" c:type="TpHandleSet*"/>
        </return-value>
        <parameters>
          <parameter name="repo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="82">#TpHandleRepoIface that holds the handles to be reffed by this set</doc>
            <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
          </parameter>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="83">array of handles to be referenced by this set</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="guint"/>
            </array>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_intset"
                   c:identifier="tp_handle_set_new_from_intset"
                   version="0.13.0"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="378">Creates a new #TpHandleSet from a specified handle repository and
set of handles.</doc>
        <source-position filename="handle-repo.h" line="153"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="386">A new #TpHandleSet</doc>
          <type name="HandleSet" c:type="TpHandleSet*"/>
        </return-value>
        <parameters>
          <parameter name="repo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="380">#TpHandleRepoIface that holds the handles to be reffed by this set</doc>
            <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
          </parameter>
          <parameter name="intset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="381">a set of handles, which must all be valid</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="tp_handle_set_add" introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="169">Add a handle to a #TpHandleSet, and reference it in the attached
#TpHandleRepoIface</doc>
        <source-position filename="handle-repo.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="171">#TpHandleSet to add this handle to</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="172">handle to add</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="tp_handle_set_clear"
              version="0.11.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="123">Remove every handle from @set, releasing the references it holds.</doc>
        <source-position filename="handle-repo.h" line="158"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="125">#TpHandleSet to clear</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="tp_handle_set_copy"
              version="0.11.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="338">Creates a new #TpHandleSet with the same contents as @other.</doc>
        <source-position filename="handle-repo.h" line="151"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="344">a new set</doc>
          <type name="HandleSet" c:type="TpHandleSet*"/>
        </return-value>
        <parameters>
          <instance-parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="340">another handle set</doc>
            <type name="HandleSet" c:type="const TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy"
              c:identifier="tp_handle_set_destroy"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="109">Delete a #TpHandleSet and unreference any handles that it holds</doc>
        <source-position filename="handle-repo.h" line="159"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="111">#TpHandleSet to destroy</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="difference_update"
              c:identifier="tp_handle_set_difference_update"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="434">Remove a set of handles from a handle set, dereferencing those which are
members. The TpIntset returned must be freed with tp_intset_destroy.

If you want to be able to inspect the handles in the set returned,
you must ensure that this function does not cause their refcount to drop
to zero, for instance by temporarily taking a reference to all the
handles in @remove, calling this function, doing something with the
result and discarding the temporary references.</doc>
        <source-position filename="handle-repo.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="448">the handles which were dereferenced and removed (some subset
 of @remove).</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="436">a #TpHandleSet to update</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
          <parameter name="remove" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="437">a #TpIntset of handles to remove</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="tp_handle_set_dump">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="470">Format a #TpHandleSet for debug output.</doc>
        <source-position filename="handle-repo.h" line="184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="476">a string representation of the
 handle set suitable for debug output</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="472">a handle set</doc>
            <type name="HandleSet" c:type="const TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach"
              c:identifier="tp_handle_set_foreach"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="249">Call @func(@set, @handle, @userdata) for each handle in @set.</doc>
        <source-position filename="handle-repo.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="251">A set of handles</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="252">A callback</doc>
            <type name="HandleSetMemberFunc" c:type="TpHandleSetMemberFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="253">Arbitrary data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_empty"
              c:identifier="tp_handle_set_is_empty"
              version="0.11.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="138">Return the same thing as &lt;code&gt;(tp_handle_set_size (set) == 0)&lt;/code&gt;,
but calculated more efficiently.</doc>
        <source-position filename="handle-repo.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="145">%TRUE if the set has no members</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="140">#TpHandleSet to check</doc>
            <type name="HandleSet" c:type="const TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_member"
              c:identifier="tp_handle_set_is_member"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="207">Check if the handle is in this set</doc>
        <source-position filename="handle-repo.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="214">TRUE if the handle is in this set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="209">A #TpHandleSet</doc>
            <type name="HandleSet" c:type="const TpHandleSet*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="210">handle to check</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="tp_handle_set_peek" introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="155">&lt;!--Returns: says it all, this comment is just to keep gtkdoc happy--&gt;</doc>
        <source-position filename="handle-repo.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="161">the underlying #TpIntset used by this #TpHandleSet</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="157">#TpHandleSet to peek at</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="tp_handle_set_remove"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="187">Remove a handle from a #TpHandleSet, and unreference it in the attached
#TpHandleRepoIface</doc>
        <source-position filename="handle-repo.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="195">FALSE if the handle was invalid, or was not in this set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="189">#TpHandleSet to remove this handle from</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="190">handle to remove</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="tp_handle_set_size" introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="265">&lt;!--no further documentation needed--&gt;</doc>
        <source-position filename="handle-repo.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="271">the number of handles in this set</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="267">A set of handles</doc>
            <type name="HandleSet" c:type="const TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_array"
              c:identifier="tp_handle_set_to_array"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="279">&lt;!--Returns: says it all, this comment is just to keep gtkdoc happy--&gt;</doc>
        <source-position filename="handle-repo.h" line="172"/>
        <return-value>
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="285">a newly-allocated GArray of guint representing
the handles in the set</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="guint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="281">A handle set</doc>
            <type name="HandleSet" c:type="const TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_identifier_map"
              c:identifier="tp_handle_set_to_identifier_map">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="296">Returns a dictionary mapping each handle in @self to the corresponding
identifier, as if retrieved by calling tp_handle_inspect() on each handle.
The type of the returned value is described as
&lt;code&gt;Handle_Identifier_Map&lt;/code&gt; in the Telepathy specification.</doc>
        <source-position filename="handle-repo.h" line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="305">a map from the
 handles in @self to the corresponding identifier.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="Handle"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="298">a handle set</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update"
              c:identifier="tp_handle_set_update"
              introspectable="0">
        <doc xml:space="preserve"
             filename="handle-set.c"
             line="405">Add a set of handles to a handle set, referencing those which are not
already members. The TpIntset returned must be freed with tp_intset_destroy.</doc>
        <source-position filename="handle-repo.h" line="179"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="413">the handles which were added (some subset of @add)</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="407">a #TpHandleSet to update</doc>
            <type name="HandleSet" c:type="TpHandleSet*"/>
          </instance-parameter>
          <parameter name="add" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-set.c"
                 line="408">a #TpIntset of handles to add</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <function name="qdata"
                c:identifier="tp_handle_set_qdata"
                introspectable="0"
                deprecated="1">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="381">Associates a blob of data with a given handle and a given key

If @destroy is set, then the data is freed when the handle is freed.

Since version 0.13.8, handles always last as long as the
connection, so @destroy will not be called until the connection
disconnects.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. It is not recommended to use this function
 because the associated data won't be freed until the connection disconnects.</doc-deprecated>
        <source-position filename="handle-repo.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="repo" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-repo.c"
                 line="383">A handle repository implementation</doc>
            <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-repo.c"
                 line="384">A handle to set data on</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="handle-repo.c"
                 line="385">Key id to associate data with</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="handle-repo.c"
                 line="386">data to associate with handle</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="handle-repo.c"
                 line="387">A #GDestroyNotify to call to destroy the data,
          or NULL if not needed.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="HandleSetMemberFunc"
              c:type="TpHandleSetMemberFunc"
              introspectable="0">
      <doc xml:space="preserve"
           filename="handle-set.c"
           line="239">Signature of the callback used to iterate over the handle set in
tp_handle_set_foreach().</doc>
      <source-position filename="handle-repo.h" line="146"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="set" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="241">The set of handles on which tp_handle_set_foreach() was called</doc>
          <type name="HandleSet" c:type="TpHandleSet*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="242">A handle in the set</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="handle-set.c"
               line="243">Arbitrary user data as supplied to tp_handle_set_foreach()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="HandleType" c:type="TpHandleType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="11">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="25"/>
      <member name="none" value="0" c:identifier="TP_HANDLE_TYPE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="13">&lt;![CDATA[           A "null" handle type used to indicate the absence of a handle.           When a handle type and a handle appear as a pair, if the handle           type is zero, the handle must also be zero.         ]]&gt;</doc>
      </member>
      <member name="contact" value="1" c:identifier="TP_HANDLE_TYPE_CONTACT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="14">&lt;![CDATA[           A contact         ]]&gt;</doc>
      </member>
      <member name="room" value="2" c:identifier="TP_HANDLE_TYPE_ROOM">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="15">&lt;![CDATA[           A chat room         ]]&gt;</doc>
      </member>
      <member name="list" value="3" c:identifier="TP_HANDLE_TYPE_LIST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="16">&lt;![CDATA[           A server-generated contact list (see Channel.Interface.Group)         ]]&gt;</doc>
      </member>
      <member name="group" value="4" c:identifier="TP_HANDLE_TYPE_GROUP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="17">&lt;![CDATA[           A user-defined contact list (see Channel.Interface.Group)         ]]&gt;</doc>
      </member>
    </enumeration>
    <constant name="IFACE_ACCOUNT"
              value="org.freedesktop.Telepathy.Account"
              c:type="TP_IFACE_ACCOUNT">
      <source-position filename="_gen/telepathy-interfaces.h" line="964"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_ACCOUNT_INTERFACE_ADDRESSING"
              value="org.freedesktop.Telepathy.Account.Interface.Addressing"
              c:type="TP_IFACE_ACCOUNT_INTERFACE_ADDRESSING">
      <source-position filename="_gen/telepathy-interfaces.h" line="1022"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_ACCOUNT_INTERFACE_AVATAR"
              value="org.freedesktop.Telepathy.Account.Interface.Avatar"
              c:type="TP_IFACE_ACCOUNT_INTERFACE_AVATAR">
      <source-position filename="_gen/telepathy-interfaces.h" line="1013"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_ACCOUNT_INTERFACE_STORAGE"
              value="org.freedesktop.Telepathy.Account.Interface.Storage"
              c:type="TP_IFACE_ACCOUNT_INTERFACE_STORAGE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1031"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_ACCOUNT_MANAGER"
              value="org.freedesktop.Telepathy.AccountManager"
              c:type="TP_IFACE_ACCOUNT_MANAGER">
      <source-position filename="_gen/telepathy-interfaces.h" line="949"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_AUTHENTICATION_TLS_CERTIFICATE"
              value="org.freedesktop.Telepathy.Authentication.TLSCertificate"
              c:type="TP_IFACE_AUTHENTICATION_TLS_CERTIFICATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1171"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT"
              value="org.freedesktop.Telepathy.Call1.Content"
              c:type="TP_IFACE_CALL_CONTENT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1244"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_INTERFACE_AUDIO_CONTROL"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.AudioControl"
              c:type="TP_IFACE_CALL_CONTENT_INTERFACE_AUDIO_CONTROL">
      <source-position filename="_gen/telepathy-interfaces.h" line="1233"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_INTERFACE_DTMF"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.DTMF"
              c:type="TP_IFACE_CALL_CONTENT_INTERFACE_DTMF">
      <source-position filename="_gen/telepathy-interfaces.h" line="1205"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_INTERFACE_MEDIA"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media"
              c:type="TP_IFACE_CALL_CONTENT_INTERFACE_MEDIA">
      <source-position filename="_gen/telepathy-interfaces.h" line="1186"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_INTERFACE_VIDEO_CONTROL"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.VideoControl"
              c:type="TP_IFACE_CALL_CONTENT_INTERFACE_VIDEO_CONTROL">
      <source-position filename="_gen/telepathy-interfaces.h" line="1216"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_MEDIA_DESCRIPTION"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription"
              c:type="TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1302"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports"
              c:type="TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1261"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPFeedback"
              c:type="TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK">
      <source-position filename="_gen/telepathy-interfaces.h" line="1282"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTPHeaderExtensions"
              c:type="TP_IFACE_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1293"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_STREAM"
              value="org.freedesktop.Telepathy.Call1.Stream"
              c:type="TP_IFACE_CALL_STREAM">
      <source-position filename="_gen/telepathy-interfaces.h" line="1348"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_STREAM_ENDPOINT"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint"
              c:type="TP_IFACE_CALL_STREAM_ENDPOINT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1365"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CALL_STREAM_INTERFACE_MEDIA"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media"
              c:type="TP_IFACE_CALL_STREAM_INTERFACE_MEDIA">
      <source-position filename="_gen/telepathy-interfaces.h" line="1321"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL"
              value="org.freedesktop.Telepathy.Channel"
              c:type="TP_IFACE_CHANNEL">
      <source-position filename="_gen/telepathy-interfaces.h" line="384"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_DISPATCHER"
              value="org.freedesktop.Telepathy.ChannelDispatcher"
              c:type="TP_IFACE_CHANNEL_DISPATCHER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1046"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_DISPATCHER_INTERFACE_MESSAGES1"
              value="org.freedesktop.Telepathy.ChannelDispatcher.Interface.Messages1"
              c:type="TP_IFACE_CHANNEL_DISPATCHER_INTERFACE_MESSAGES1">
      <source-position filename="_gen/telepathy-interfaces.h" line="1057"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST"
              value="org.freedesktop.Telepathy.ChannelDispatcher.Interface.OperationList"
              c:type="TP_IFACE_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST">
      <source-position filename="_gen/telepathy-interfaces.h" line="1064"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_DISPATCH_OPERATION"
              value="org.freedesktop.Telepathy.ChannelDispatchOperation"
              c:type="TP_IFACE_CHANNEL_DISPATCH_OPERATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1073"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_ANONYMITY"
              value="org.freedesktop.Telepathy.Channel.Interface.Anonymity"
              c:type="TP_IFACE_CHANNEL_INTERFACE_ANONYMITY">
      <source-position filename="_gen/telepathy-interfaces.h" line="591"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_CALL_STATE"
              value="org.freedesktop.Telepathy.Channel.Interface.CallState"
              c:type="TP_IFACE_CHANNEL_INTERFACE_CALL_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="604"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION"
              value="org.freedesktop.Telepathy.Channel.Interface.CaptchaAuthentication1"
              c:type="TP_IFACE_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="611"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_CHAT_STATE"
              value="org.freedesktop.Telepathy.Channel.Interface.ChatState"
              c:type="TP_IFACE_CHANNEL_INTERFACE_CHAT_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="626"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_CONFERENCE"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference"
              c:type="TP_IFACE_CHANNEL_INTERFACE_CONFERENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="635"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_DESTROYABLE"
              value="org.freedesktop.Telepathy.Channel.Interface.Destroyable"
              c:type="TP_IFACE_CHANNEL_INTERFACE_DESTROYABLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="654"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_DTMF"
              value="org.freedesktop.Telepathy.Channel.Interface.DTMF"
              c:type="TP_IFACE_CHANNEL_INTERFACE_DTMF">
      <source-position filename="_gen/telepathy-interfaces.h" line="661"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA"
              value="org.freedesktop.Telepathy.Channel.Interface.FileTransfer.Metadata"
              c:type="TP_IFACE_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA">
      <source-position filename="_gen/telepathy-interfaces.h" line="674"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_GROUP"
              value="org.freedesktop.Telepathy.Channel.Interface.Group"
              c:type="TP_IFACE_CHANNEL_INTERFACE_GROUP">
      <source-position filename="_gen/telepathy-interfaces.h" line="685"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_HOLD"
              value="org.freedesktop.Telepathy.Channel.Interface.Hold"
              c:type="TP_IFACE_CHANNEL_INTERFACE_HOLD">
      <source-position filename="_gen/telepathy-interfaces.h" line="706"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_MEDIA_SIGNALLING"
              value="org.freedesktop.Telepathy.Channel.Interface.MediaSignalling"
              c:type="TP_IFACE_CHANNEL_INTERFACE_MEDIA_SIGNALLING">
      <source-position filename="_gen/telepathy-interfaces.h" line="713"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_MESSAGES"
              value="org.freedesktop.Telepathy.Channel.Interface.Messages"
              c:type="TP_IFACE_CHANNEL_INTERFACE_MESSAGES">
      <source-position filename="_gen/telepathy-interfaces.h" line="728"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_PASSWORD"
              value="org.freedesktop.Telepathy.Channel.Interface.Password"
              c:type="TP_IFACE_CHANNEL_INTERFACE_PASSWORD">
      <source-position filename="_gen/telepathy-interfaces.h" line="745"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_ROOM"
              value="org.freedesktop.Telepathy.Channel.Interface.Room2"
              c:type="TP_IFACE_CHANNEL_INTERFACE_ROOM">
      <source-position filename="_gen/telepathy-interfaces.h" line="752"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_ROOM_CONFIG"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1"
              c:type="TP_IFACE_CHANNEL_INTERFACE_ROOM_CONFIG">
      <source-position filename="_gen/telepathy-interfaces.h" line="769"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_SASL_AUTHENTICATION"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication"
              c:type="TP_IFACE_CHANNEL_INTERFACE_SASL_AUTHENTICATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="804"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_SECURABLE"
              value="org.freedesktop.Telepathy.Channel.Interface.Securable"
              c:type="TP_IFACE_CHANNEL_INTERFACE_SECURABLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="831"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_SERVICE_POINT"
              value="org.freedesktop.Telepathy.Channel.Interface.ServicePoint"
              c:type="TP_IFACE_CHANNEL_INTERFACE_SERVICE_POINT">
      <source-position filename="_gen/telepathy-interfaces.h" line="842"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_SMS"
              value="org.freedesktop.Telepathy.Channel.Interface.SMS"
              c:type="TP_IFACE_CHANNEL_INTERFACE_SMS">
      <source-position filename="_gen/telepathy-interfaces.h" line="870"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_SUBJECT"
              value="org.freedesktop.Telepathy.Channel.Interface.Subject2"
              c:type="TP_IFACE_CHANNEL_INTERFACE_SUBJECT">
      <source-position filename="_gen/telepathy-interfaces.h" line="853"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_INTERFACE_TUBE"
              value="org.freedesktop.Telepathy.Channel.Interface.Tube"
              c:type="TP_IFACE_CHANNEL_INTERFACE_TUBE">
      <source-position filename="_gen/telepathy-interfaces.h" line="881"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_REQUEST"
              value="org.freedesktop.Telepathy.ChannelRequest"
              c:type="TP_IFACE_CHANNEL_REQUEST">
      <source-position filename="_gen/telepathy-interfaces.h" line="1090"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_CALL"
              value="org.freedesktop.Telepathy.Channel.Type.Call1"
              c:type="TP_IFACE_CHANNEL_TYPE_CALL">
      <source-position filename="_gen/telepathy-interfaces.h" line="407"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_CONTACT_LIST"
              value="org.freedesktop.Telepathy.Channel.Type.ContactList"
              c:type="TP_IFACE_CHANNEL_TYPE_CONTACT_LIST">
      <source-position filename="_gen/telepathy-interfaces.h" line="454"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_CONTACT_SEARCH"
              value="org.freedesktop.Telepathy.Channel.Type.ContactSearch"
              c:type="TP_IFACE_CHANNEL_TYPE_CONTACT_SEARCH">
      <source-position filename="_gen/telepathy-interfaces.h" line="461"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_DBUS_TUBE"
              value="org.freedesktop.Telepathy.Channel.Type.DBusTube"
              c:type="TP_IFACE_CHANNEL_TYPE_DBUS_TUBE">
      <source-position filename="_gen/telepathy-interfaces.h" line="556"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_FILE_TRANSFER"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer"
              c:type="TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER">
      <source-position filename="_gen/telepathy-interfaces.h" line="476"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_ROOM_LIST"
              value="org.freedesktop.Telepathy.Channel.Type.RoomList"
              c:type="TP_IFACE_CHANNEL_TYPE_ROOM_LIST">
      <source-position filename="_gen/telepathy-interfaces.h" line="522"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_SERVER_AUTHENTICATION"
              value="org.freedesktop.Telepathy.Channel.Type.ServerAuthentication"
              c:type="TP_IFACE_CHANNEL_TYPE_SERVER_AUTHENTICATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="569"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_SERVER_TLS_CONNECTION"
              value="org.freedesktop.Telepathy.Channel.Type.ServerTLSConnection"
              c:type="TP_IFACE_CHANNEL_TYPE_SERVER_TLS_CONNECTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="578"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_STREAMED_MEDIA"
              value="org.freedesktop.Telepathy.Channel.Type.StreamedMedia"
              c:type="TP_IFACE_CHANNEL_TYPE_STREAMED_MEDIA">
      <source-position filename="_gen/telepathy-interfaces.h" line="509"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_STREAM_TUBE"
              value="org.freedesktop.Telepathy.Channel.Type.StreamTube"
              c:type="TP_IFACE_CHANNEL_TYPE_STREAM_TUBE">
      <source-position filename="_gen/telepathy-interfaces.h" line="545"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_TEXT"
              value="org.freedesktop.Telepathy.Channel.Type.Text"
              c:type="TP_IFACE_CHANNEL_TYPE_TEXT">
      <source-position filename="_gen/telepathy-interfaces.h" line="531"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CHANNEL_TYPE_TUBES"
              value="org.freedesktop.Telepathy.Channel.Type.Tubes"
              c:type="TP_IFACE_CHANNEL_TYPE_TUBES">
      <source-position filename="_gen/telepathy-interfaces.h" line="538"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CLIENT"
              value="org.freedesktop.Telepathy.Client"
              c:type="TP_IFACE_CLIENT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1109"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CLIENT_APPROVER"
              value="org.freedesktop.Telepathy.Client.Approver"
              c:type="TP_IFACE_CLIENT_APPROVER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1131"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CLIENT_HANDLER"
              value="org.freedesktop.Telepathy.Client.Handler"
              c:type="TP_IFACE_CLIENT_HANDLER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1140"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CLIENT_INTERFACE_REQUESTS"
              value="org.freedesktop.Telepathy.Client.Interface.Requests"
              c:type="TP_IFACE_CLIENT_INTERFACE_REQUESTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1155"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CLIENT_OBSERVER"
              value="org.freedesktop.Telepathy.Client.Observer"
              c:type="TP_IFACE_CLIENT_OBSERVER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1118"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION"
              value="org.freedesktop.Telepathy.Connection"
              c:type="TP_IFACE_CONNECTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="86"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_ADDRESSING"
              value="org.freedesktop.Telepathy.Connection.Interface.Addressing1"
              c:type="TP_IFACE_CONNECTION_INTERFACE_ADDRESSING">
      <source-position filename="_gen/telepathy-interfaces.h" line="105"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_ALIASING"
              value="org.freedesktop.Telepathy.Connection.Interface.Aliasing"
              c:type="TP_IFACE_CONNECTION_INTERFACE_ALIASING">
      <source-position filename="_gen/telepathy-interfaces.h" line="116"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_ANONYMITY"
              value="org.freedesktop.Telepathy.Connection.Interface.Anonymity"
              c:type="TP_IFACE_CONNECTION_INTERFACE_ANONYMITY">
      <source-position filename="_gen/telepathy-interfaces.h" line="125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_AVATARS"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars"
              c:type="TP_IFACE_CONNECTION_INTERFACE_AVATARS">
      <source-position filename="_gen/telepathy-interfaces.h" line="138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_BALANCE"
              value="org.freedesktop.Telepathy.Connection.Interface.Balance"
              c:type="TP_IFACE_CONNECTION_INTERFACE_BALANCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="163"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CAPABILITIES"
              value="org.freedesktop.Telepathy.Connection.Interface.Capabilities"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CAPABILITIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="174"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CELLULAR"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CELLULAR">
      <source-position filename="_gen/telepathy-interfaces.h" line="183"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CLIENT_TYPES"
              value="org.freedesktop.Telepathy.Connection.Interface.ClientTypes"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CLIENT_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="202"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CONTACTS"
              value="org.freedesktop.Telepathy.Connection.Interface.Contacts"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CONTACTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="316"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CONTACT_BLOCKING"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactBlocking"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CONTACT_BLOCKING">
      <source-position filename="_gen/telepathy-interfaces.h" line="211"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CONTACT_CAPABILITIES"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CONTACT_CAPABILITIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="222"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactGroups"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CONTACT_GROUPS">
      <source-position filename="_gen/telepathy-interfaces.h" line="231"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CONTACT_INFO"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactInfo"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CONTACT_INFO">
      <source-position filename="_gen/telepathy-interfaces.h" line="246"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_CONTACT_LIST"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList"
              c:type="TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST">
      <source-position filename="_gen/telepathy-interfaces.h" line="259"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_LOCATION"
              value="org.freedesktop.Telepathy.Connection.Interface.Location"
              c:type="TP_IFACE_CONNECTION_INTERFACE_LOCATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="336"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_MAIL_NOTIFICATION"
              value="org.freedesktop.Telepathy.Connection.Interface.MailNotification"
              c:type="TP_IFACE_CONNECTION_INTERFACE_MAIL_NOTIFICATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="360"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_POWER_SAVING"
              value="org.freedesktop.Telepathy.Connection.Interface.PowerSaving"
              c:type="TP_IFACE_CONNECTION_INTERFACE_POWER_SAVING">
      <source-position filename="_gen/telepathy-interfaces.h" line="375"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_PRESENCE"
              value="org.freedesktop.Telepathy.Connection.Interface.Presence"
              c:type="TP_IFACE_CONNECTION_INTERFACE_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="309"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_RENAMING"
              value="org.freedesktop.Telepathy.Connection.Interface.Renaming"
              c:type="TP_IFACE_CONNECTION_INTERFACE_RENAMING">
      <source-position filename="_gen/telepathy-interfaces.h" line="282"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_REQUESTS"
              value="org.freedesktop.Telepathy.Connection.Interface.Requests"
              c:type="TP_IFACE_CONNECTION_INTERFACE_REQUESTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="325"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_SERVICE_POINT"
              value="org.freedesktop.Telepathy.Connection.Interface.ServicePoint"
              c:type="TP_IFACE_CONNECTION_INTERFACE_SERVICE_POINT">
      <source-position filename="_gen/telepathy-interfaces.h" line="351"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_SIDECARS1"
              value="org.freedesktop.Telepathy.Connection.Interface.Sidecars1"
              c:type="TP_IFACE_CONNECTION_INTERFACE_SIDECARS1">
      <source-position filename="_gen/telepathy-interfaces.h" line="289"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_INTERFACE_SIMPLE_PRESENCE"
              value="org.freedesktop.Telepathy.Connection.Interface.SimplePresence"
              c:type="TP_IFACE_CONNECTION_INTERFACE_SIMPLE_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="296"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_CONNECTION_MANAGER"
              value="org.freedesktop.Telepathy.ConnectionManager"
              c:type="TP_IFACE_CONNECTION_MANAGER">
      <source-position filename="_gen/telepathy-interfaces.h" line="9"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_DBUS_DAEMON"
              value="org.freedesktop.DBus"
              c:type="TP_IFACE_DBUS_DAEMON">
      <source-position filename="_gen/telepathy-interfaces.h" line="942"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_DBUS_INTROSPECTABLE"
              value="org.freedesktop.DBus.Introspectable"
              c:type="TP_IFACE_DBUS_INTROSPECTABLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="921"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_DBUS_PEER"
              value="org.freedesktop.DBus.Peer"
              c:type="TP_IFACE_DBUS_PEER">
      <source-position filename="_gen/telepathy-interfaces.h" line="914"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_DBUS_PROPERTIES"
              value="org.freedesktop.DBus.Properties"
              c:type="TP_IFACE_DBUS_PROPERTIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="928"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_DEBUG"
              value="org.freedesktop.Telepathy.Debug"
              c:type="TP_IFACE_DEBUG">
      <source-position filename="_gen/telepathy-interfaces.h" line="1162"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_MEDIA_SESSION_HANDLER"
              value="org.freedesktop.Telepathy.Media.SessionHandler"
              c:type="TP_IFACE_MEDIA_SESSION_HANDLER">
      <source-position filename="_gen/telepathy-interfaces.h" line="892"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_MEDIA_STREAM_HANDLER"
              value="org.freedesktop.Telepathy.Media.StreamHandler"
              c:type="TP_IFACE_MEDIA_STREAM_HANDLER">
      <source-position filename="_gen/telepathy-interfaces.h" line="899"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_PROPERTIES_INTERFACE"
              value="org.freedesktop.Telepathy.Properties"
              c:type="TP_IFACE_PROPERTIES_INTERFACE">
      <source-position filename="_gen/telepathy-interfaces.h" line="935"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_PROTOCOL"
              value="org.freedesktop.Telepathy.Protocol"
              c:type="TP_IFACE_PROTOCOL">
      <source-position filename="_gen/telepathy-interfaces.h" line="20"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_PROTOCOL_INTERFACE_ADDRESSING"
              value="org.freedesktop.Telepathy.Protocol.Interface.Addressing"
              c:type="TP_IFACE_PROTOCOL_INTERFACE_ADDRESSING">
      <source-position filename="_gen/telepathy-interfaces.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_PROTOCOL_INTERFACE_AVATARS"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars"
              c:type="TP_IFACE_PROTOCOL_INTERFACE_AVATARS">
      <source-position filename="_gen/telepathy-interfaces.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="IFACE_PROTOCOL_INTERFACE_PRESENCE"
              value="org.freedesktop.Telepathy.Protocol.Interface.Presence"
              c:type="TP_IFACE_PROTOCOL_INTERFACE_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="INTERNAL_CONNECTION_STATUS_NEW"
              value="-1"
              c:type="TP_INTERNAL_CONNECTION_STATUS_NEW"
              introspectable="0">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="200">A special value for #TpConnectionStatus, used within GLib connection
managers to indicate that the connection is disconnected because
connection has never been attempted (as distinct from disconnected
after connection has started, either by user request or an error).

Must never be visible on the D-Bus - %TP_CONNECTION_STATUS_DISCONNECTED
is sent instead.</doc>
      <source-position filename="base-connection.h" line="123"/>
      <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
    </constant>
    <function-macro name="INTSET_ITER_INIT"
                    c:identifier="TP_INTSET_ITER_INIT"
                    introspectable="0"
                    deprecated="1">
      <doc xml:space="preserve"
           filename="intset.c"
           line="127">A suitable static initializer for a #TpIntsetIter, to be used as follows:

&lt;informalexample&gt;&lt;programlisting&gt;
void
do_something (const TpIntset *intset)
{
  TpIntsetIter iter = TP_INTSET_ITER_INIT (intset);
  /&lt;!-- --&gt;* ... do something with iter ... *&lt;!-- --&gt;/
}
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <doc-deprecated xml:space="preserve">since 0.19.0. Use #TpIntsetFastIter instead</doc-deprecated>
      <source-position filename="intset.h" line="97"/>
      <parameters>
        <parameter name="set">
          <doc xml:space="preserve"
               filename="intset.c"
               line="129">A set of integers</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT"
                    c:identifier="TP_IS_ACCOUNT"
                    introspectable="0">
      <source-position filename="account.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_CHANNEL_REQUEST"
                    c:identifier="TP_IS_ACCOUNT_CHANNEL_REQUEST"
                    introspectable="0">
      <source-position filename="account-channel-request.h" line="56"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_CHANNEL_REQUEST_CLASS"
                    c:identifier="TP_IS_ACCOUNT_CHANNEL_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="account-channel-request.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_CLASS"
                    c:identifier="TP_IS_ACCOUNT_CLASS"
                    introspectable="0">
      <source-position filename="account.h" line="67"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_MANAGER"
                    c:identifier="TP_IS_ACCOUNT_MANAGER"
                    introspectable="0">
      <source-position filename="account-manager.h" line="63"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_MANAGER_CLASS"
                    c:identifier="TP_IS_ACCOUNT_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="account-manager.h" line="65"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_REQUEST"
                    c:identifier="TP_IS_ACCOUNT_REQUEST"
                    introspectable="0">
      <source-position filename="account-request.h" line="59"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ACCOUNT_REQUEST_CLASS"
                    c:identifier="TP_IS_ACCOUNT_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="account-request.h" line="61"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ADD_DISPATCH_OPERATION_CONTEXT"
                    c:identifier="TP_IS_ADD_DISPATCH_OPERATION_CONTEXT"
                    introspectable="0">
      <source-position filename="add-dispatch-operation-context.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ADD_DISPATCH_OPERATION_CONTEXT_CLASS"
                    c:identifier="TP_IS_ADD_DISPATCH_OPERATION_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="add-dispatch-operation-context.h" line="50"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTOMATIC_CLIENT_FACTORY"
                    c:identifier="TP_IS_AUTOMATIC_CLIENT_FACTORY"
                    introspectable="0">
      <source-position filename="automatic-client-factory.h" line="61"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTOMATIC_CLIENT_FACTORY_CLASS"
                    c:identifier="TP_IS_AUTOMATIC_CLIENT_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="automatic-client-factory.h" line="63"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTOMATIC_PROXY_FACTORY"
                    c:identifier="TP_IS_AUTOMATIC_PROXY_FACTORY"
                    introspectable="0">
      <source-position filename="automatic-proxy-factory.h" line="56"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_AUTOMATIC_PROXY_FACTORY_CLASS"
                    c:identifier="TP_IS_AUTOMATIC_PROXY_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="automatic-proxy-factory.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BASE_CLIENT"
                    c:identifier="TP_IS_BASE_CLIENT"
                    introspectable="0">
      <source-position filename="base-client.h" line="259"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BASE_CLIENT_CLASS"
                    c:identifier="TP_IS_BASE_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="base-client.h" line="261"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BASE_CONNECTION"
                    c:identifier="TP_IS_BASE_CONNECTION"
                    introspectable="0">
      <source-position filename="base-connection.h" line="211"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BASE_CONNECTION_CLASS"
                    c:identifier="TP_IS_BASE_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="base-connection.h" line="213"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BASIC_PROXY_FACTORY"
                    c:identifier="TP_IS_BASIC_PROXY_FACTORY"
                    introspectable="0">
      <source-position filename="basic-proxy-factory.h" line="56"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BASIC_PROXY_FACTORY_CLASS"
                    c:identifier="TP_IS_BASIC_PROXY_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="basic-proxy-factory.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CALL_CHANNEL"
                    c:identifier="TP_IS_CALL_CHANNEL"
                    introspectable="0">
      <source-position filename="call-channel.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CALL_CHANNEL_CLASS"
                    c:identifier="TP_IS_CALL_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="call-channel.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CALL_CONTENT"
                    c:identifier="TP_IS_CALL_CONTENT"
                    introspectable="0">
      <source-position filename="call-content.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CALL_CONTENT_CLASS"
                    c:identifier="TP_IS_CALL_CONTENT_CLASS"
                    introspectable="0">
      <source-position filename="call-content.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CALL_STREAM"
                    c:identifier="TP_IS_CALL_STREAM"
                    introspectable="0">
      <source-position filename="call-stream.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CALL_STREAM_CLASS"
                    c:identifier="TP_IS_CALL_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="call-stream.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CAPABILITIES"
                    c:identifier="TP_IS_CAPABILITIES"
                    introspectable="0">
      <source-position filename="capabilities.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CAPABILITIES_CLASS"
                    c:identifier="TP_IS_CAPABILITIES_CLASS"
                    introspectable="0">
      <source-position filename="capabilities.h" line="50"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL"
                    c:identifier="TP_IS_CHANNEL"
                    introspectable="0">
      <source-position filename="channel.h" line="71"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_CLASS"
                    c:identifier="TP_IS_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="channel.h" line="73"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_DISPATCHER"
                    c:identifier="TP_IS_CHANNEL_DISPATCHER"
                    introspectable="0">
      <source-position filename="channel-dispatcher.h" line="64"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_DISPATCHER_CLASS"
                    c:identifier="TP_IS_CHANNEL_DISPATCHER_CLASS"
                    introspectable="0">
      <source-position filename="channel-dispatcher.h" line="66"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_DISPATCH_OPERATION"
                    c:identifier="TP_IS_CHANNEL_DISPATCH_OPERATION"
                    introspectable="0">
      <source-position filename="channel-dispatch-operation.h" line="69"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_DISPATCH_OPERATION_CLASS"
                    c:identifier="TP_IS_CHANNEL_DISPATCH_OPERATION_CLASS"
                    introspectable="0">
      <source-position filename="channel-dispatch-operation.h" line="71"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_REQUEST"
                    c:identifier="TP_IS_CHANNEL_REQUEST"
                    introspectable="0">
      <source-position filename="channel-request.h" line="64"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CHANNEL_REQUEST_CLASS"
                    c:identifier="TP_IS_CHANNEL_REQUEST_CLASS"
                    introspectable="0">
      <source-position filename="channel-request.h" line="66"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_CHANNEL_FACTORY"
                    c:identifier="TP_IS_CLIENT_CHANNEL_FACTORY"
                    introspectable="0">
      <source-position filename="client-channel-factory.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_MESSAGE"
                    c:identifier="TP_IS_CLIENT_MESSAGE"
                    introspectable="0">
      <source-position filename="client-message.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_MESSAGE_CLASS"
                    c:identifier="TP_IS_CLIENT_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="client-message.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONNECTION"
                    c:identifier="TP_IS_CONNECTION"
                    introspectable="0">
      <source-position filename="connection.h" line="134"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONNECTION_CLASS"
                    c:identifier="TP_IS_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="connection.h" line="136"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONNECTION_MANAGER"
                    c:identifier="TP_IS_CONNECTION_MANAGER"
                    introspectable="0">
      <source-position filename="connection-manager.h" line="54"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONNECTION_MANAGER_CLASS"
                    c:identifier="TP_IS_CONNECTION_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="connection-manager.h" line="56"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTACT"
                    c:identifier="TP_IS_CONTACT"
                    introspectable="0">
      <source-position filename="contact.h" line="53"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTACT_CLASS"
                    c:identifier="TP_IS_CONTACT_CLASS"
                    introspectable="0">
      <source-position filename="contact.h" line="55"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTACT_SEARCH"
                    c:identifier="TP_IS_CONTACT_SEARCH"
                    introspectable="0">
      <source-position filename="contact-search.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTACT_SEARCH_CLASS"
                    c:identifier="TP_IS_CONTACT_SEARCH_CLASS"
                    introspectable="0">
      <source-position filename="contact-search.h" line="45"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTACT_SEARCH_RESULT"
                    c:identifier="TP_IS_CONTACT_SEARCH_RESULT"
                    introspectable="0">
      <source-position filename="contact-search-result.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTACT_SEARCH_RESULT_CLASS"
                    c:identifier="TP_IS_CONTACT_SEARCH_RESULT_CLASS"
                    introspectable="0">
      <source-position filename="contact-search-result.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DBUS_DAEMON"
                    c:identifier="TP_IS_DBUS_DAEMON"
                    introspectable="0">
      <source-position filename="dbus-daemon.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DBUS_DAEMON_CLASS"
                    c:identifier="TP_IS_DBUS_DAEMON_CLASS"
                    introspectable="0">
      <source-position filename="dbus-daemon.h" line="48"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DBUS_TUBE_CHANNEL"
                    c:identifier="TP_IS_DBUS_TUBE_CHANNEL"
                    introspectable="0">
      <source-position filename="dbus-tube-channel.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DBUS_TUBE_CHANNEL_CLASS"
                    c:identifier="TP_IS_DBUS_TUBE_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="dbus-tube-channel.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUG_CLIENT"
                    c:identifier="TP_IS_DEBUG_CLIENT"
                    introspectable="0">
      <source-position filename="debug-client.h" line="76"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUG_CLIENT_CLASS"
                    c:identifier="TP_IS_DEBUG_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="debug-client.h" line="78"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUG_MESSAGE"
                    c:identifier="TP_IS_DEBUG_MESSAGE"
                    introspectable="0">
      <source-position filename="debug-message.h" line="61"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DEBUG_MESSAGE_CLASS"
                    c:identifier="TP_IS_DEBUG_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="debug-message.h" line="64"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_TRANSFER_CHANNEL"
                    c:identifier="TP_IS_FILE_TRANSFER_CHANNEL"
                    introspectable="0">
      <source-position filename="file-transfer-channel.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_FILE_TRANSFER_CHANNEL_CLASS"
                    c:identifier="TP_IS_FILE_TRANSFER_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="file-transfer-channel.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HANDLE_CHANNELS_CONTEXT"
                    c:identifier="TP_IS_HANDLE_CHANNELS_CONTEXT"
                    introspectable="0">
      <source-position filename="handle-channels-context.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HANDLE_CHANNELS_CONTEXT_CLASS"
                    c:identifier="TP_IS_HANDLE_CHANNELS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="handle-channels-context.h" line="50"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_HANDLE_REPO_IFACE"
                    c:identifier="TP_IS_HANDLE_REPO_IFACE"
                    introspectable="0">
      <source-position filename="handle-repo.h" line="58"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE"
                    c:identifier="TP_IS_MESSAGE"
                    introspectable="0">
      <source-position filename="message.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MESSAGE_CLASS"
                    c:identifier="TP_IS_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="message.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBSERVE_CHANNELS_CONTEXT"
                    c:identifier="TP_IS_OBSERVE_CHANNELS_CONTEXT"
                    introspectable="0">
      <source-position filename="observe-channels-context.h" line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OBSERVE_CHANNELS_CONTEXT_CLASS"
                    c:identifier="TP_IS_OBSERVE_CHANNELS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="observe-channels-context.h" line="48"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROTOCOL"
                    c:identifier="TP_IS_PROTOCOL"
                    introspectable="0">
      <source-position filename="protocol.h" line="62"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROTOCOL_CLASS"
                    c:identifier="TP_IS_PROTOCOL_CLASS"
                    introspectable="0">
      <source-position filename="protocol.h" line="64"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY"
                    c:identifier="TP_IS_PROXY"
                    introspectable="0">
      <source-position filename="_gen/proxy-introspectable.h" line="152"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROXY_CLASS"
                    c:identifier="TP_IS_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="_gen/proxy-introspectable.h" line="154"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ROOM_INFO"
                    c:identifier="TP_IS_ROOM_INFO"
                    introspectable="0">
      <source-position filename="room-info.h" line="63"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ROOM_INFO_CLASS"
                    c:identifier="TP_IS_ROOM_INFO_CLASS"
                    introspectable="0">
      <source-position filename="room-info.h" line="66"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ROOM_LIST"
                    c:identifier="TP_IS_ROOM_LIST"
                    introspectable="0">
      <source-position filename="room-list.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_ROOM_LIST_CLASS"
                    c:identifier="TP_IS_ROOM_LIST_CLASS"
                    introspectable="0">
      <source-position filename="room-list.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIGNALLED_MESSAGE"
                    c:identifier="TP_IS_SIGNALLED_MESSAGE"
                    introspectable="0">
      <source-position filename="signalled-message.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIGNALLED_MESSAGE_CLASS"
                    c:identifier="TP_IS_SIGNALLED_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="signalled-message.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_APPROVER"
                    c:identifier="TP_IS_SIMPLE_APPROVER"
                    introspectable="0">
      <source-position filename="simple-approver.h" line="61"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_APPROVER_CLASS"
                    c:identifier="TP_IS_SIMPLE_APPROVER_CLASS"
                    introspectable="0">
      <source-position filename="simple-approver.h" line="63"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_CLIENT_FACTORY"
                    c:identifier="TP_IS_SIMPLE_CLIENT_FACTORY"
                    introspectable="0">
      <source-position filename="simple-client-factory.h" line="100"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_CLIENT_FACTORY_CLASS"
                    c:identifier="TP_IS_SIMPLE_CLIENT_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="simple-client-factory.h" line="102"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_HANDLER"
                    c:identifier="TP_IS_SIMPLE_HANDLER"
                    introspectable="0">
      <source-position filename="simple-handler.h" line="61"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_HANDLER_CLASS"
                    c:identifier="TP_IS_SIMPLE_HANDLER_CLASS"
                    introspectable="0">
      <source-position filename="simple-handler.h" line="63"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_OBSERVER"
                    c:identifier="TP_IS_SIMPLE_OBSERVER"
                    introspectable="0">
      <source-position filename="simple-observer.h" line="61"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SIMPLE_OBSERVER_CLASS"
                    c:identifier="TP_IS_SIMPLE_OBSERVER_CLASS"
                    introspectable="0">
      <source-position filename="simple-observer.h" line="63"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_TUBE_CHANNEL"
                    c:identifier="TP_IS_STREAM_TUBE_CHANNEL"
                    introspectable="0">
      <source-position filename="stream-tube-channel.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_TUBE_CHANNEL_CLASS"
                    c:identifier="TP_IS_STREAM_TUBE_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="stream-tube-channel.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_TUBE_CONNECTION"
                    c:identifier="TP_IS_STREAM_TUBE_CONNECTION"
                    introspectable="0">
      <source-position filename="stream-tube-connection.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_TUBE_CONNECTION_CLASS"
                    c:identifier="TP_IS_STREAM_TUBE_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="stream-tube-connection.h" line="52"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_CHANNEL"
                    c:identifier="TP_IS_TEXT_CHANNEL"
                    introspectable="0">
      <source-position filename="text-channel.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TEXT_CHANNEL_CLASS"
                    c:identifier="TP_IS_TEXT_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="text-channel.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TLS_CERTIFICATE"
                    c:identifier="TP_IS_TLS_CERTIFICATE"
                    introspectable="0">
      <source-position filename="tls-certificate.h" line="68"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TLS_CERTIFICATE_CLASS"
                    c:identifier="TP_IS_TLS_CERTIFICATE_CLASS"
                    introspectable="0">
      <source-position filename="tls-certificate.h" line="70"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TLS_CERTIFICATE_REJECTION"
                    c:identifier="TP_IS_TLS_CERTIFICATE_REJECTION"
                    introspectable="0">
      <source-position filename="tls-certificate-rejection.h" line="60"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_TLS_CERTIFICATE_REJECTION_CLASS"
                    c:identifier="TP_IS_TLS_CERTIFICATE_REJECTION_CLASS"
                    introspectable="0">
      <source-position filename="tls-certificate-rejection.h" line="63"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <callback name="IntFunc" c:type="TpIntFunc">
      <doc xml:space="preserve"
           filename="intset.c"
           line="89">A callback function acting on unsigned integers.</doc>
      <source-position filename="intset.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="i" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="91">The relevant integer</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="userdata"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="intset.c"
               line="92">Opaque user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="Intset"
            c:type="TpIntset"
            opaque="1"
            glib:type-name="TpIntset"
            glib:get-type="tp_intset_get_type"
            c:symbol-prefix="intset">
      <doc xml:space="preserve"
           filename="intset.c"
           line="182">Opaque type representing a set of unsigned integers.

Before 0.11.16, this type was called &lt;type&gt;TpIntSet&lt;/type&gt;, which is
now a backwards compatibility typedef.</doc>
      <source-position filename="intset.h" line="39"/>
      <constructor name="new" c:identifier="tp_intset_new">
        <doc xml:space="preserve"
             filename="intset.c"
             line="236">Allocate a new integer set.</doc>
        <source-position filename="intset.h" line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="241">a new, empty integer set to be destroyed with tp_intset_destroy()</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
      </constructor>
      <constructor name="new_containing"
                   c:identifier="tp_intset_new_containing"
                   version="0.7.26">
        <doc xml:space="preserve"
             filename="intset.c"
             line="253">Allocate a new integer set containing the given integer.</doc>
        <source-position filename="intset.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="259">a new integer set containing @element, to be destroyed with
tp_intset_destroy()</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="255">integer to add to a new set</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="sized_new" c:identifier="tp_intset_sized_new">
        <doc xml:space="preserve"
             filename="intset.c"
             line="221">Allocate a new integer set.</doc>
        <source-position filename="intset.h" line="56"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="228">a new, empty integer set to be destroyed with tp_intset_destroy()</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="223">ignored (it was previously 1 more than the largest integer you
 expect to store)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add" c:identifier="tp_intset_add">
        <doc xml:space="preserve"
             filename="intset.c"
             line="303">Add an integer into a TpIntset.</doc>
        <source-position filename="intset.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve" filename="intset.c" line="305">set</doc>
            <type name="Intset" c:type="TpIntset*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="306">integer to add</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="tp_intset_clear">
        <doc xml:space="preserve"
             filename="intset.c"
             line="289">Unset every integer in the set.</doc>
        <source-position filename="intset.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve" filename="intset.c" line="291">set</doc>
            <type name="Intset" c:type="TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy" c:identifier="tp_intset_copy">
        <doc xml:space="preserve"
             filename="intset.c"
             line="584">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="590">A set containing the same integers as @orig, to be freed with
tp_intset_destroy() by the caller</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="orig" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="586">A set of integers</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="destroy" c:identifier="tp_intset_destroy">
        <doc xml:space="preserve"
             filename="intset.c"
             line="274">Free all memory used by the set.</doc>
        <source-position filename="intset.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve" filename="intset.c" line="276">set</doc>
            <type name="Intset" c:type="TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="difference" c:identifier="tp_intset_difference">
        <doc xml:space="preserve"
             filename="intset.c"
             line="708">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="715">The set of those integers which are in @left and not in @right
(analogous to the bitwise operation left &amp; (~right)), to be freed with
tp_intset_destroy() by the caller</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="710">The left operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="711">The right operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="difference_update"
              c:identifier="tp_intset_difference_update"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="intset.c"
             line="734">Remove each integer in @other from @self, analogous to the bitwise
operation self &amp;= (~other).</doc>
        <source-position filename="intset.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="736">the set to change</doc>
            <type name="Intset" c:type="TpIntset*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="737">members to remove</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dump" c:identifier="tp_intset_dump">
        <doc xml:space="preserve"
             filename="intset.c"
             line="820">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="826">a string which the caller must free with g_free, listing the
numbers in @set in a human-readable format</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="822">An integer set</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="foreach" c:identifier="tp_intset_foreach">
        <doc xml:space="preserve"
             filename="intset.c"
             line="394">Call @func(element, @userdata) for each element of @set, in order.</doc>
        <source-position filename="intset.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve" filename="intset.c" line="396">set</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="397">@TpIntFunc to use to iterate the set</doc>
            <type name="IntFunc" c:type="TpIntFunc"/>
          </parameter>
          <parameter name="userdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="398">user data to pass to each call of @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="intersection" c:identifier="tp_intset_intersection">
        <doc xml:space="preserve"
             filename="intset.c"
             line="617">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="624">The set of those integers which are in both @left and @right
(analogous to the bitwise operation left &amp; right), to be freed with
tp_intset_destroy() by the caller</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="619">The left operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="620">The right operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_empty"
              c:identifier="tp_intset_is_empty"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="intset.c"
             line="529">Return the same thing as &lt;code&gt;(tp_intset_size (set) == 0)&lt;/code&gt;,
but calculated more efficiently.</doc>
        <source-position filename="intset.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="536">%TRUE if @set is empty</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="531">a set of integers</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_equal" c:identifier="tp_intset_is_equal">
        <doc xml:space="preserve"
             filename="intset.c"
             line="547">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="554">%TRUE if @left and @right contain the same bits</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="549">A set of integers</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="550">A set of integers</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_member" c:identifier="tp_intset_is_member">
        <doc xml:space="preserve"
             filename="intset.c"
             line="377">Tests if @element is a member of @set</doc>
        <source-position filename="intset.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="384">%TRUE if @element is in @set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve" filename="intset.c" line="379">set</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="380">integer to test</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="tp_intset_remove">
        <doc xml:space="preserve"
             filename="intset.c"
             line="330">Remove an integer from a TpIntset</doc>
        <source-position filename="intset.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="337">%TRUE if @element was previously in @set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve" filename="intset.c" line="332">set</doc>
            <type name="Intset" c:type="TpIntset*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="333">integer to add</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="size" c:identifier="tp_intset_size">
        <doc xml:space="preserve"
             filename="intset.c"
             line="501">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="507">The number of integers in @set</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="503">A set of integers</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="symmetric_difference"
              c:identifier="tp_intset_symmetric_difference">
        <doc xml:space="preserve"
             filename="intset.c"
             line="767">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="774">The set of those integers which are in either @left or @right
but not both (analogous to the bitwise operation left ^ right), to be freed
with tp_intset_destroy() by the caller</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="769">The left operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="770">The right operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_array" c:identifier="tp_intset_to_array">
        <doc xml:space="preserve"
             filename="intset.c"
             line="440">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="446">a GArray of guint (which must
 be freed by the caller) containing the same integers as @set.</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="guint"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="442">set to convert</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="union" c:identifier="tp_intset_union">
        <doc xml:space="preserve"
             filename="intset.c"
             line="656">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="663">The set of those integers which are in either @left or @right
(analogous to the bitwise operation left | right), to be freed with
tp_intset_destroy() by the caller</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <instance-parameter name="left" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="658">The left operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </instance-parameter>
          <parameter name="right" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="659">The right operand</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="union_update"
              c:identifier="tp_intset_union_update"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="intset.c"
             line="679">Add each integer in @other to @self, analogous to the bitwise operation
self |= other.</doc>
        <source-position filename="intset.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="681">the set to change</doc>
            <type name="Intset" c:type="TpIntset*"/>
          </instance-parameter>
          <parameter name="other" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="682">members to add</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <function name="from_array" c:identifier="tp_intset_from_array">
        <doc xml:space="preserve"
             filename="intset.c"
             line="464">&lt;!--Returns: says it all--&gt;</doc>
        <source-position filename="intset.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="intset.c"
               line="470">A set containing the same integers as @array.</doc>
          <type name="Intset" c:type="TpIntset*"/>
        </return-value>
        <parameters>
          <parameter name="array" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="466">An array of guint</doc>
            <array name="GLib.Array" c:type="const GArray*">
              <type name="guint"/>
            </array>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="IntsetFastIter" c:type="TpIntsetFastIter" version="0.11.6">
      <doc xml:space="preserve"
           filename="intset.c"
           line="897">An opaque structure representing iteration in undefined order over a set of
integers. Must be initialized with tp_intset_fast_iter_init().

Before 0.11.16, this type was called &lt;type&gt;TpIntSetFastIter&lt;/type&gt;,
which is now a backwards compatibility typedef.

Usage is similar to #GHashTableIter:

&lt;informalexample&gt;&lt;programlisting&gt;
TpIntsetFastIter iter;
guint element;

tp_intset_fast_iter_init (&amp;amp;iter, intset);

while (tp_intset_fast_iter_next (&amp;amp;iter, &amp;amp;element))
{
  printf ("%u is in the intset\n", element);
}
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="intset.h" line="112"/>
      <field name="_dummy" readable="0" private="1">
        <array zero-terminated="0" fixed-size="16">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
      <method name="init"
              c:identifier="tp_intset_fast_iter_init"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="intset.c"
             line="932">Initialize @iter to iterate over @set in arbitrary order. @iter will become
invalid if @set is modified.</doc>
        <source-position filename="intset.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="934">an iterator</doc>
            <type name="IntsetFastIter" c:type="TpIntsetFastIter*"/>
          </instance-parameter>
          <parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="935">a set</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next"
              c:identifier="tp_intset_fast_iter_next"
              version="0.11.6">
        <doc xml:space="preserve"
             filename="intset.c"
             line="956">Advances @iter and retrieves the integer it now points to. Iteration
is not necessarily in numerical order.</doc>
        <source-position filename="intset.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="964">%FALSE if the end of the set has been reached</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="958">an iterator</doc>
            <type name="IntsetFastIter" c:type="TpIntsetFastIter*"/>
          </instance-parameter>
          <parameter name="output" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="959">a location to store a new integer, in arbitrary order</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="IntsetIter" c:type="TpIntsetIter" deprecated="1">
      <doc xml:space="preserve"
           filename="intset.c"
           line="107">A structure representing iteration over a set of integers. Must be
initialized with either TP_INTSET_ITER_INIT() or tp_intset_iter_init().

Since 0.11.6, consider using #TpIntsetFastIter if iteration in
numerical order is not required.

Before 0.11.16, this type was called &lt;type&gt;TpIntSetIter&lt;/type&gt;,
which is now a backwards compatibility typedef.</doc>
      <doc-deprecated xml:space="preserve">since 0.19.0. Use #TpIntsetFastIter instead</doc-deprecated>
      <source-position filename="intset.h" line="93"/>
      <field name="set" writable="1">
        <doc xml:space="preserve"
             filename="intset.c"
             line="109">The set iterated over.</doc>
        <type name="Intset" c:type="const TpIntset*"/>
      </field>
      <field name="element" writable="1">
        <doc xml:space="preserve"
             filename="intset.c"
             line="110">Must be (guint)(-1) before iteration starts. Set to the next
 element in the set by tp_intset_iter_next(); undefined after
 tp_intset_iter_next() returns %FALSE.</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <method name="init" c:identifier="tp_intset_iter_init" deprecated="1">
        <doc xml:space="preserve"
             filename="intset.c"
             line="146">Reset the iterator @iter to the beginning and make it iterate over @set.</doc>
        <doc-deprecated xml:space="preserve">since 0.19.0. Use #TpIntsetFastIter instead</doc-deprecated>
        <source-position filename="intset.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="148">An integer set iterator to be initialized.</doc>
            <type name="IntsetIter" c:type="TpIntsetIter*"/>
          </instance-parameter>
          <parameter name="set" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="149">An integer set to be used by that iterator</doc>
            <type name="Intset" c:type="const TpIntset*"/>
          </parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="tp_intset_iter_next">
        <doc xml:space="preserve"
             filename="intset.c"
             line="838">If there are integers in (@iter-&gt;set) higher than (@iter-&gt;element), set
(iter-&gt;element) to the next one and return %TRUE. Otherwise return %FALSE.

Usage:

&lt;informalexample&gt;&lt;programlisting&gt;
TpIntsetIter iter = TP_INTSET_INIT (intset);
while (tp_intset_iter_next (&amp;amp;iter))
{
  printf ("%u is in the intset\n", iter.element);
}
&lt;/programlisting&gt;&lt;/informalexample&gt;

Since 0.11.6, consider using #TpIntsetFastIter if iteration in
numerical order is not required.</doc>
        <source-position filename="intset.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="858">%TRUE if (@iter-&gt;element) has been advanced</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="840">An iterator originally initialized with TP_INTSET_INIT(set)</doc>
            <type name="IntsetIter" c:type="TpIntsetIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reset" c:identifier="tp_intset_iter_reset" deprecated="1">
        <doc xml:space="preserve"
             filename="intset.c"
             line="165">Reset the iterator @iter to the beginning. It must already be associated
with a set.</doc>
        <doc-deprecated xml:space="preserve">since 0.19.0. Use #TpIntsetFastIter instead</doc-deprecated>
        <source-position filename="intset.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="intset.c"
                 line="167">An integer set iterator to be reset.</doc>
            <type name="IntsetIter" c:type="TpIntsetIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="LocalHoldState" c:type="TpLocalHoldState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="860">&lt;![CDATA[         The hold state of a channel.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="447"/>
      <member name="unheld"
              value="0"
              c:identifier="TP_LOCAL_HOLD_STATE_UNHELD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="862">&lt;![CDATA[           All streams are unheld (the call is active). New channels SHOULD           have this hold state.         ]]&gt;</doc>
      </member>
      <member name="held" value="1" c:identifier="TP_LOCAL_HOLD_STATE_HELD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="863">&lt;![CDATA[           All streams are held (the call is on hold)         ]]&gt;</doc>
      </member>
      <member name="pending_hold"
              value="2"
              c:identifier="TP_LOCAL_HOLD_STATE_PENDING_HOLD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="864">&lt;![CDATA[           The connection manager is attempting to move to state Held, but           has not yet completed that operation. It is unspecified whether           any, all or none of the streams making up the channel are on hold.           Examining the Hold state of Call Contents (if applicable) may           provide more useful information.         ]]&gt;</doc>
      </member>
      <member name="pending_unhold"
              value="3"
              c:identifier="TP_LOCAL_HOLD_STATE_PENDING_UNHOLD">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="865">&lt;![CDATA[           The connection manager is attempting to move to state Unheld, but           has not yet completed that operation. It is unspecified whether           any, all or none of the streams making up the channel are on hold.           Examining the Hold state of Call Contents (if applicable) may           provide more useful information.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="LocalHoldStateReason" c:type="TpLocalHoldStateReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="883">&lt;![CDATA[         The reason for a change to the Local_Hold_State. Clients MUST         treat unknown values as equivalent to Local_Hold_State_Reason_None.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="455"/>
      <member name="none"
              value="0"
              c:identifier="TP_LOCAL_HOLD_STATE_REASON_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="885">&lt;![CDATA[           The reason cannot be described by any of the predefined values           (connection managers SHOULD avoid this reason, but clients MUST           handle it gracefully)         ]]&gt;</doc>
      </member>
      <member name="requested"
              value="1"
              c:identifier="TP_LOCAL_HOLD_STATE_REASON_REQUESTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="886">&lt;![CDATA[           The change is in response to a user request         ]]&gt;</doc>
      </member>
      <member name="resource_not_available"
              value="2"
              c:identifier="TP_LOCAL_HOLD_STATE_REASON_RESOURCE_NOT_AVAILABLE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="887">&lt;![CDATA[           The change is because some resource was not available         ]]&gt;</doc>
      </member>
    </enumeration>
    <bitfield name="LocationFeatures" c:type="TpLocationFeatures">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="281">&lt;![CDATA[         Flags describing the Location features which may be supported on any         given connection.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="153"/>
      <member name="location_feature_can_set"
              value="1"
              c:identifier="TP_LOCATION_FEATURE_CAN_SET">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="283">&lt;![CDATA[           Indicates that setting your own location with           SetLocation is supported on this           connection.         ]]&gt;</doc>
      </member>
    </bitfield>
    <function-macro name="MESSAGE"
                    c:identifier="TP_MESSAGE"
                    introspectable="0">
      <source-position filename="message.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_CLASS"
                    c:identifier="TP_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="message.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MESSAGE_GET_CLASS"
                    c:identifier="TP_MESSAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="message.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <bitfield name="MailNotificationFlags" c:type="TpMailNotificationFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="311">&lt;![CDATA[         Flags representing capabilities provided by a connection manager.           Those values can be used as bitfield. Some flags depend on, or           conflict with, each other.          Connections SHOULD implement as many of these features as the           underlying protocol allows, preferring to implement           Supports_Unread_Mails instead of Emits_Mails_Received if both are           possible.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="170"/>
      <member name="supports_unread_mail_count"
              value="1"
              c:identifier="TP_MAIL_NOTIFICATION_FLAG_SUPPORTS_UNREAD_MAIL_COUNT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="313">&lt;![CDATA[           This Connection provides the number of unread e-mails (or e-mail           threads) in the main folder of your e-mail account, as the           UnreadMailCount property. The           connection manager will update this value by emitting the           UnreadMailsChanged signal.         ]]&gt;</doc>
      </member>
      <member name="supports_unread_mails"
              value="2"
              c:identifier="TP_MAIL_NOTIFICATION_FLAG_SUPPORTS_UNREAD_MAILS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="314">&lt;![CDATA[           This Connection provides a detailed list of unread e-mails, as the           UnreadMails property. If this flag           is set, Supports_Unread_Mail_Count MUST be set, and           Emits_Mails_Received MUST NOT be set.           The Connection will update the list by emitting the           UnreadMailsChanged signals.         ]]&gt;</doc>
      </member>
      <member name="emits_mails_received"
              value="4"
              c:identifier="TP_MAIL_NOTIFICATION_FLAG_EMITS_MAILS_RECEIVED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="315">&lt;![CDATA[           This Connection emits the MailsReceived           signal, which provides details about newly arrived e-mails but does           not maintain their read/unread status afterwards. This flag MUST NOT           be combined with Supports_Unread_Mails.         ]]&gt;</doc>
      </member>
      <member name="supports_request_inbox_url"
              value="8"
              c:identifier="TP_MAIL_NOTIFICATION_FLAG_SUPPORTS_REQUEST_INBOX_URL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="316">&lt;![CDATA[           This Connection can provide a URL (with optional POST data) to           open the the inbox of the e-mail account in a web-based client, via           the RequestInboxURL method.         ]]&gt;</doc>
      </member>
      <member name="supports_request_mail_url"
              value="16"
              c:identifier="TP_MAIL_NOTIFICATION_FLAG_SUPPORTS_REQUEST_MAIL_URL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="317">&lt;![CDATA[           This Connection can provide a URL (with optional POST data) to open             a specific mail in a web-based client, via the             RequestMailURL method. This feature             is not useful unless either Emits_Mails_Received or             Supports_Unread_Mails is set.            If this flag is not set, clients SHOULD fall back to using             RequestInboxURL if available.         ]]&gt;</doc>
      </member>
      <member name="thread_based"
              value="32"
              c:identifier="TP_MAIL_NOTIFICATION_FLAG_THREAD_BASED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="318">&lt;![CDATA[           Each Mail represents a thread of e-mails, which             MAY have more than one sender.                         Google Talk notifies users about new mail in terms of unread               threads, rather than unread e-mails.                    ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="MediaStreamBaseProto" c:type="TpMediaStreamBaseProto">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1101">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="556"/>
      <member name="udp"
              value="0"
              c:identifier="TP_MEDIA_STREAM_BASE_PROTO_UDP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1103">&lt;![CDATA[UDP (User Datagram Protocol)]]&gt;</doc>
      </member>
      <member name="tcp"
              value="1"
              c:identifier="TP_MEDIA_STREAM_BASE_PROTO_TCP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1104">&lt;![CDATA[TCP (Transmission Control Protocol)]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="MediaStreamDirection" c:type="TpMediaStreamDirection">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="554">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="285"/>
      <member name="none"
              value="0"
              c:identifier="TP_MEDIA_STREAM_DIRECTION_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="556">&lt;![CDATA[Media are not being sent or received]]&gt;</doc>
      </member>
      <member name="send"
              value="1"
              c:identifier="TP_MEDIA_STREAM_DIRECTION_SEND">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="557">&lt;![CDATA[Media are being sent, but not received]]&gt;</doc>
      </member>
      <member name="receive"
              value="2"
              c:identifier="TP_MEDIA_STREAM_DIRECTION_RECEIVE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="558">&lt;![CDATA[Media are being received, but not sent]]&gt;</doc>
      </member>
      <member name="bidirectional"
              value="3"
              c:identifier="TP_MEDIA_STREAM_DIRECTION_BIDIRECTIONAL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="559">&lt;![CDATA[Media are being sent and received]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="MediaStreamError" c:type="TpMediaStreamError">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1076">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="549"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_MEDIA_STREAM_ERROR_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1078">&lt;![CDATA[           An unknown error occured.         ]]&gt;</doc>
      </member>
      <member name="eos" value="1" c:identifier="TP_MEDIA_STREAM_ERROR_EOS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1079">&lt;![CDATA[           The end of the stream was reached.         ]]&gt;</doc>
      </member>
      <member name="codec_negotiation_failed"
              value="2"
              c:identifier="TP_MEDIA_STREAM_ERROR_CODEC_NEGOTIATION_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1080">&lt;![CDATA[           There are no common codecs between the local side           and the other particpants in the call. The possible codecs are not           signalled here: the streaming implementation is assumed to report           them in an implementation-dependent way, e.g. Farsight should use           GstMissingElement.         ]]&gt;</doc>
      </member>
      <member name="connection_failed"
              value="3"
              c:identifier="TP_MEDIA_STREAM_ERROR_CONNECTION_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1081">&lt;![CDATA[           A network connection for the Media could not be established or was           lost.         ]]&gt;</doc>
      </member>
      <member name="network_error"
              value="4"
              c:identifier="TP_MEDIA_STREAM_ERROR_NETWORK_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1082">&lt;![CDATA[           There was an error in the networking stack           (other than the connection failure).         ]]&gt;</doc>
      </member>
      <member name="no_codecs"
              value="5"
              c:identifier="TP_MEDIA_STREAM_ERROR_NO_CODECS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1083">&lt;![CDATA[           There are no installed codecs for this media type.         ]]&gt;</doc>
      </member>
      <member name="invalid_cm_behavior"
              value="6"
              c:identifier="TP_MEDIA_STREAM_ERROR_INVALID_CM_BEHAVIOR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1084">&lt;![CDATA[           The CM is doing something wrong.         ]]&gt;</doc>
      </member>
      <member name="media_error"
              value="7"
              c:identifier="TP_MEDIA_STREAM_ERROR_MEDIA_ERROR">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1085">&lt;![CDATA[           There was an error in the media processing stack.         ]]&gt;</doc>
      </member>
    </enumeration>
    <bitfield name="MediaStreamPendingSend" c:type="TpMediaStreamPendingSend">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="575">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="292"/>
      <member name="local_send"
              value="1"
              c:identifier="TP_MEDIA_STREAM_PENDING_LOCAL_SEND">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="577">&lt;![CDATA[             The local user has been asked to send media by the remote user.             Call RequestStreamDirection to             indicate whether or not this is acceptable.         ]]&gt;</doc>
      </member>
      <member name="remote_send"
              value="2"
              c:identifier="TP_MEDIA_STREAM_PENDING_REMOTE_SEND">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="578">&lt;![CDATA[             The remote user has been asked to send media by the local user.             The StreamDirectionChanged signal             will be emitted when the remote user accepts or rejects this             change.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="MediaStreamState" c:type="TpMediaStreamState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="534">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="276"/>
      <member name="disconnected"
              value="0"
              c:identifier="TP_MEDIA_STREAM_STATE_DISCONNECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="536">&lt;![CDATA[The stream is disconnected.]]&gt;</doc>
      </member>
      <member name="connecting"
              value="1"
              c:identifier="TP_MEDIA_STREAM_STATE_CONNECTING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="537">&lt;![CDATA[The stream is trying to connect.]]&gt;</doc>
      </member>
      <member name="connected"
              value="2"
              c:identifier="TP_MEDIA_STREAM_STATE_CONNECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="538">&lt;![CDATA[The stream is connected.]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="MediaStreamTransportType"
                 c:type="TpMediaStreamTransportType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1120">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="564"/>
      <member name="local"
              value="0"
              c:identifier="TP_MEDIA_STREAM_TRANSPORT_TYPE_LOCAL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1122">&lt;![CDATA[           A local address         ]]&gt;</doc>
      </member>
      <member name="derived"
              value="1"
              c:identifier="TP_MEDIA_STREAM_TRANSPORT_TYPE_DERIVED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1123">&lt;![CDATA[           An external address derived by a method such as STUN         ]]&gt;</doc>
      </member>
      <member name="relay"
              value="2"
              c:identifier="TP_MEDIA_STREAM_TRANSPORT_TYPE_RELAY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1124">&lt;![CDATA[           An external stream relay         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="MediaStreamType" c:type="TpMediaStreamType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="515">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="268"/>
      <member name="audio" value="0" c:identifier="TP_MEDIA_STREAM_TYPE_AUDIO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="517">&lt;![CDATA[An audio stream]]&gt;</doc>
      </member>
      <member name="video" value="1" c:identifier="TP_MEDIA_STREAM_TYPE_VIDEO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="518">&lt;![CDATA[A video stream]]&gt;</doc>
      </member>
    </enumeration>
    <class name="Message"
           c:symbol-prefix="message"
           c:type="TpMessage"
           parent="GObject.Object"
           glib:type-name="TpMessage"
           glib:get-type="tp_message_get_type"
           glib:type-struct="MessageClass">
      <doc xml:space="preserve"
           filename="message.c"
           line="49">Opaque structure representing a message in the Telepathy messages interface
(an array of at least one mapping from string to variant, where the first
mapping contains message headers and subsequent mappings contain the
message body).

This base class provides convenience API for most of the common keys that
can appear in the header. One notable exception is the sender of the
message. Inside a connection manager, messages are represented by the
#TpCMMessage subclass, and you should use tp_cm_message_get_sender().
When composing a message in a client using #TpClientMessage, messages do
not have an explicit sender (the sender is automatically the local user).
When a client sees a sent or received message signalled by the connection
manager (represented by #TpSignalledMessage), the message's sender (if any)
can be accessed with tp_signalled_message_get_sender().</doc>
      <source-position filename="message.h" line="42"/>
      <method name="append_part"
              c:identifier="tp_message_append_part"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="227">Append a body part to the message.</doc>
        <source-position filename="message.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="233">the part number</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="229">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="count_parts"
              c:identifier="tp_message_count_parts"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="162">&lt;!-- nothing more to say --&gt;</doc>
        <source-position filename="message.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="168">the number of parts in the message, including the headers in
part 0</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="164">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_key"
              c:identifier="tp_message_delete_key"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="294">Remove the given key and its value from the given part.</doc>
        <source-position filename="message.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="303">%TRUE if the key previously existed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="296">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="297">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="299">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_part"
              c:identifier="tp_message_delete_part"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="247">Delete the given body part from the message.</doc>
        <source-position filename="message.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="249">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="250">a part number, which must be strictly greater than 0, and strictly
 less than the number returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="destroy"
              c:identifier="tp_message_destroy"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="147">Since 0.13.9 this function is a simple wrapper around
g_object_unref()</doc>
        <source-position filename="message.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="149">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_part"
              c:identifier="tp_message_dup_part"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="message.c"
             line="203">&lt;!-- nothing more to say --&gt;</doc>
        <source-position filename="message.h" line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="message.c"
               line="210">
 the current contents of the given part, or %NULL if the part number is
 out of range</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="205">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="206">a part number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_message_type"
              c:identifier="tp_message_get_message_type"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="message.c"
             line="942">&lt;!-- --&gt;</doc>
        <source-position filename="message.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="948">the type of this message</doc>
          <type name="ChannelTextMessageType"
                c:type="TpChannelTextMessageType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="944">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pending_message_id"
              c:identifier="tp_message_get_pending_message_id"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="message.c"
             line="1118">Return the incoming message ID of @self. Only incoming messages have such
ID, for outgoing ones this function returns 0 and set @valid to %FALSE.</doc>
        <source-position filename="message.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="1127">the incoming message ID.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1120">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="valid"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1121">either %NULL, or a location in which to store %TRUE if @self
contains a pending message ID.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_received_timestamp"
              c:identifier="tp_message_get_received_timestamp"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="984">Return when this message was received locally, as a number of seconds since
the beginning of 1970 in the UTC timezone (the same representation used by
g_date_time_new_from_unix_utc(), for instance), or 0 if not known.</doc>
        <source-position filename="message.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="992">a Unix timestamp, or 0</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="986">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sent_timestamp"
              c:identifier="tp_message_get_sent_timestamp"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="961">Return when this message was sent, as a number of seconds since the
beginning of 1970 in the UTC timezone (the same representation used by
g_date_time_new_from_unix_utc(), for instance), or 0 if not known.

If this protocol does not track the time at which the message was
initially sent, this timestamp might be approximated by using the
time at which it arrived at a central server.</doc>
        <source-position filename="message.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="973">a Unix timestamp, or 0</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="963">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_specific_to_interface"
              c:identifier="tp_message_get_specific_to_interface"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="1074">If this message is specific to a particular D-Bus interface and should
be ignored by clients without knowledge of that interface, return the
name of the interface.

If this message is an ordinary message or delivery report, return %NULL.</doc>
        <source-position filename="message.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="1084">a D-Bus interface name, or %NULL for ordinary
 messages and delivery reports</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1076">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_supersedes"
              c:identifier="tp_message_get_supersedes"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="1045">If this message replaces a previous message, return the value of
tp_message_get_token() for that previous message. Otherwise, return %NULL.

For instance, a user interface could replace the superseded
message with this message, or grey out the superseded message.</doc>
        <source-position filename="message.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="1055">a non-empty opaque identifier, or %NULL if none</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1047">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_token"
              c:identifier="tp_message_get_token"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="912">Return this message's identifier in the underlying protocol. This is
&lt;emphasis&gt;not&lt;/emphasis&gt; guaranteed to be unique, even within the scope
of a single channel or contact: the only guarantee made is that two
messages with different non-empty tokens are different messages.

If there is no suitable token, return %NULL.</doc>
        <source-position filename="message.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="923">a non-empty opaque identifier, or %NULL if none</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="914">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_delivery_report"
              c:identifier="tp_message_is_delivery_report"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="1096">If this message is a delivery report indicating success or failure of
delivering a message, return %TRUE.</doc>
        <source-position filename="message.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="1103">%TRUE if this is a delivery report</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1098">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_mutable"
              c:identifier="tp_message_is_mutable"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="893">Check if @self is mutable. Only mutable messages can be modified using
functions such as tp_message_set_string().</doc>
        <source-position filename="message.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="900">%TRUE if the message is mutable.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="895">a #TpMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_rescued"
              c:identifier="tp_message_is_rescued"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="1022">Returns %TRUE if this incoming message has been seen in a previous channel
during the lifetime of the Connection, but had not been acknowledged when
that channel closed, causing an identical channel (in which the message now
appears) to open.

Loggers should check this flag to avoid duplicating messages, for instance.</doc>
        <source-position filename="message.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="1033">%TRUE if this message was seen in a previous Channel on this
 Connection</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1024">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_scrollback"
              c:identifier="tp_message_is_scrollback"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="1004">&lt;!-- no more to say --&gt;</doc>
        <source-position filename="message.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="1010">%TRUE if this message is part of a replay of message history, for
 instance in an XMPP chatroom.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="1006">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="peek" c:identifier="tp_message_peek" version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="179">&lt;!-- nothing more to say --&gt;</doc>
        <source-position filename="message.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="message.c"
               line="186">
 the #GHashTable used to implement the given part, or %NULL if the
 part number is out of range. The hash table is only valid as long as the
 message is valid and the part is not deleted.</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="181">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="182">a part number</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_handle"
              c:identifier="tp_message_ref_handle"
              version="0.7.21"
              deprecated="1">
        <doc xml:space="preserve"
             filename="message.c"
             line="268">Reference the given handle until this message is destroyed.</doc>
        <doc-deprecated xml:space="preserve">since 0.13.9. Handles are now immortal so there is
no point to ref them. Furthermore, the only handle that should be stored
in a TpMessage is message-sender which should be set using
tp_cm_message_set_sender().</doc-deprecated>
        <source-position filename="message.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="270">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="271">a handle type, greater than %TP_HANDLE_TYPE_NONE and less than
 %TP_NUM_HANDLE_TYPES</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="273">a handle of the given type</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="tp_message_set" version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="611">Set @key in part @part of @self to have a copy of @source as its value.

If @source represents a data structure containing handles, they should
all be referenced with tp_message_ref_handle() first.

In high-level language bindings, use tp_message_set_variant() instead.</doc>
        <source-position filename="message.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="613">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="614">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="616">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="617">a value, encoded as dbus-glib would</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_boolean"
              c:identifier="tp_message_set_boolean"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="354">Set @key in part @part of @self to have @b as a boolean value.</doc>
        <source-position filename="message.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="356">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="357">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="359">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="b" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="360">a boolean value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bytes"
              c:identifier="tp_message_set_bytes"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="580">Set @key in part @part of @self to have @bytes as a byte-array value.</doc>
        <source-position filename="message.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="582">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="583">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="585">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="586">a number of bytes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="bytes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="587">an array of @len bytes</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_handle"
              c:identifier="tp_message_set_handle"
              version="0.7.21"
              deprecated="1">
        <doc xml:space="preserve"
             filename="message.c"
             line="319">If @handle_or_0 is not zero, reference it with tp_message_ref_handle().

Set @key in part @part of @self to have @handle_or_0 as an unsigned integer
value.

Since 0.13.9 this function has been deprecated in favor or
tp_cm_message_set_sender() as 'message-sender' is the only handle
you can put in a #TpCMMessage.</doc>
        <doc-deprecated xml:space="preserve">since 0.13.9. Use tp_cm_message_set_sender()</doc-deprecated>
        <source-position filename="message.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="321">a #TpCMMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="322">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="324">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="handle_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="325">a handle type</doc>
            <type name="HandleType" c:type="TpHandleType"/>
          </parameter>
          <parameter name="handle_or_0" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="326">a handle of that type, or 0</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int32"
              c:identifier="tp_message_set_int32"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="393">Set @key in part @part of @self to have @i as a signed integer value.</doc>
        <source-position filename="message.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="395">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="396">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="398">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="399">an integer value</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_int64"
              c:identifier="tp_message_set_int64"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="420">Set @key in part @part of @self to have @i as a signed integer value.</doc>
        <source-position filename="message.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="422">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="423">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="425">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="i" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="426">an integer value</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string"
              c:identifier="tp_message_set_string"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="514">Set @key in part @part of @self to have @s as a string value.</doc>
        <source-position filename="message.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="516">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="517">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="519">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="s" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="520">a string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_string_printf"
              c:identifier="tp_message_set_string_printf"
              version="0.7.21"
              introspectable="0">
        <doc xml:space="preserve"
             filename="message.c"
             line="542">Set @key in part @part of @self to have a string value constructed from a
printf-style format string.</doc>
        <source-position filename="message.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="544">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="545">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="547">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="fmt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="548">a printf-style format string for the string value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="549">arguments for the format string</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint32"
              c:identifier="tp_message_set_uint32"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="460">Set @key in part @part of @self to have @u as an unsigned integer value.</doc>
        <source-position filename="message.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="462">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="463">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="465">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="466">an unsigned integer value</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uint64"
              c:identifier="tp_message_set_uint64"
              version="0.7.21">
        <doc xml:space="preserve"
             filename="message.c"
             line="487">Set @key in part @part of @self to have @u as an unsigned integer value.</doc>
        <source-position filename="message.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="489">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="490">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="492">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="u" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="493">an unsigned integer value</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_variant"
              c:identifier="tp_message_set_variant"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="message.c"
             line="643">Set @key in part @part of @self to have @value as its value.

If @value is a floating reference (see g_variant_ref_sink()), then this
function will take ownership of it.</doc>
        <source-position filename="message.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="645">a message</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="646">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="648">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="649">a value</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_message"
              c:identifier="tp_message_take_message"
              version="0.7.21"
              deprecated="1">
        <doc xml:space="preserve"
             filename="message.c"
             line="680">Set @key in part @part of @self to have @message as an aa{sv} value (that
is, an array of Message_Part), and take ownership of @message.  The caller
should not use @message after passing it to this function.  All handle
references owned by @message will subsequently belong to and be released
with @self.</doc>
        <doc-deprecated xml:space="preserve">since 0.13.9. Use tp_cm_message_take_message()</doc-deprecated>
        <source-position filename="message.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="682">a #TpCMMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="part" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="683">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="685">a key in the mapping representing the part</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="686">another (distinct) message created for the same #TpBaseConnection</doc>
            <type name="Message" c:type="TpMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_text"
              c:identifier="tp_message_to_text"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="message.c"
             line="717">Concatene all the text parts contained in @message.</doc>
        <source-position filename="message.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="message.c"
               line="724">a newly allocated string containing the
text content of #message</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="719">a #TpMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </instance-parameter>
          <parameter name="out_flags"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="message.c"
                 line="720">if not %NULL, the #TpChannelTextMessageFlags of @message</doc>
            <type name="ChannelTextMessageFlags"
                  c:type="TpChannelTextMessageFlags*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="MessageClass"
            c:type="TpMessageClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Message">
      <source-position filename="message.h" line="42"/>
    </record>
    <bitfield name="MessagePartSupportFlags"
              c:type="TpMessagePartSupportFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="905">&lt;![CDATA[         Flags indicating the level of support for message parts on this           channel. They are designed such that setting more flags always           implies that the channel has more capabilities.          If no flags are set, this indicates that messages may contain           a single message part whose content-type is any of the types           from SupportedContentTypes, possibly with some alternatives.          There is no flag indicating support for alternatives. This is           because the SendMessage implementation can always accept messages           containing alternatives, even if the underlying protocol does not,           by deleting all alternatives except the first (most preferred)           that is supported.                     Each of the flags so far implies the previous flag, so we could           have used a simple enumeration here; however, we've defined           the message-part support indicator as a flag set for future           expansion.                   See SupportedContentTypes for some           examples.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="462"/>
      <member name="one_attachment"
              value="1"
              c:identifier="TP_MESSAGE_PART_SUPPORT_FLAG_ONE_ATTACHMENT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="907">&lt;![CDATA[           SendMessage will accept messages           containing a textual message body,           plus a single attachment of any type listed in the           SupportedContentTypes property. It does not make sense for this           flag to be set if Message_Part_Support_Flag_Data_Only is not also set           (because the connection manager can trivially provide an empty text           part if necessary).         ]]&gt;</doc>
      </member>
      <member name="multiple_attachments"
              value="2"
              c:identifier="TP_MESSAGE_PART_SUPPORT_FLAG_MULTIPLE_ATTACHMENTS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="908">&lt;![CDATA[           SendMessage will accept messages containing a textual message body,           plus an arbitrary number of attachments of any type listed in the           SupportedContentTypes property. It does not make sense for this           flag to be set if Message_Part_Support_Flag_One_Attachment is not           also set.         ]]&gt;</doc>
      </member>
    </bitfield>
    <bitfield name="MessageSendingFlags" c:type="TpMessageSendingFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="914">&lt;![CDATA[         Flags altering the way a message is sent. The "most usual" action         should always be to have these flags unset. Some indication of which         flags are supported is provided by the         DeliveryReportingSupport property.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="468"/>
      <member name="delivery"
              value="1"
              c:identifier="TP_MESSAGE_SENDING_FLAG_REPORT_DELIVERY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="916">&lt;![CDATA[           Provide a successful delivery report if possible, even if this is             not the default for this protocol. Ignored if delivery reports are             not possible on this protocol.                         In some protocols, like XMPP, it is not conventional to request               or send positive delivery notifications.                       Delivery failure reports SHOULD always be sent, but if this flag             is present, the connection manager MAY also try harder to obtain             failed delivery reports or allow them to be matched to outgoing             messages.         ]]&gt;</doc>
      </member>
      <member name="read"
              value="2"
              c:identifier="TP_MESSAGE_SENDING_FLAG_REPORT_READ">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="917">&lt;![CDATA[           Provide a delivery report when the message is read by the             recipient, even if this is not the default for this protocol.             Ignored if read reports are not possible on this protocol.         ]]&gt;</doc>
      </member>
      <member name="deleted"
              value="4"
              c:identifier="TP_MESSAGE_SENDING_FLAG_REPORT_DELETED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="918">&lt;![CDATA[           Provide a delivery report when the message is deleted by the             recipient, even if this is not the default for this protocol.             Ignored if such reports are not possible on this protocol.         ]]&gt;</doc>
      </member>
    </bitfield>
    <constant name="NUM_ACCESS_CONTROL_TYPES"
              value="7"
              c:type="TP_NUM_ACCESS_CONTROL_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="246">1 higher than the highest valid value of #TpAccessControlType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="139"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CALL_CONTENT_DISPOSITIONS"
              value="2"
              c:type="TP_NUM_CALL_CONTENT_DISPOSITIONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1263">1 higher than the highest valid value of #TpCallContentDisposition.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="626"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CALL_CONTENT_PACKETIZATION_TYPES"
              value="3"
              c:type="TP_NUM_CALL_CONTENT_PACKETIZATION_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1242">1 higher than the highest valid value of #TpCallContentPacketizationType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="619"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CALL_STATES" value="7" c:type="TP_NUM_CALL_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="359">1 higher than the highest valid value of #TpCallState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="188"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CALL_STATE_CHANGE_REASONS"
              value="14"
              c:type="TP_NUM_CALL_STATE_CHANGE_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="404">1 higher than the highest valid value of #TpCallStateChangeReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="215"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CALL_STREAM_CANDIDATE_TYPES"
              value="6"
              c:type="TP_NUM_CALL_STREAM_CANDIDATE_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1340">1 higher than the highest valid value of #TpCallStreamCandidateType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="661"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CAPTCHA_CANCEL_REASONS"
              value="3"
              c:type="TP_NUM_CAPTCHA_CANCEL_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="721">1 higher than the highest valid value of #TpCaptchaCancelReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="364"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CAPTCHA_STATUSES"
              value="5"
              c:type="TP_NUM_CAPTCHA_STATUSES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="743">1 higher than the highest valid value of #TpCaptchaStatus.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="374"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CHANNEL_CHAT_STATES"
              value="5"
              c:type="TP_NUM_CHANNEL_CHAT_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="765">1 higher than the highest valid value of #TpChannelChatState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="384"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CHANNEL_CONTACT_SEARCH_STATES"
              value="5"
              c:type="TP_NUM_CHANNEL_CONTACT_SEARCH_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="436">1 higher than the highest valid value of #TpChannelContactSearchState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="231"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CHANNEL_GROUP_CHANGE_REASONS"
              value="12"
              c:type="TP_NUM_CHANNEL_GROUP_CHANGE_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="848">1 higher than the highest valid value of #TpChannelGroupChangeReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="439"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CHANNEL_TEXT_MESSAGE_TYPES"
              value="5"
              c:type="TP_NUM_CHANNEL_TEXT_MESSAGE_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="630">1 higher than the highest valid value of #TpChannelTextMessageType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="321"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CHANNEL_TEXT_SEND_ERRORS"
              value="6"
              c:type="TP_NUM_CHANNEL_TEXT_SEND_ERRORS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="606">1 higher than the highest valid value of #TpChannelTextSendError.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="311"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CONNECTION_PRESENCE_TYPES"
              value="9"
              c:type="TP_NUM_CONNECTION_PRESENCE_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="220">1 higher than the highest valid value of #TpConnectionPresenceType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="127"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CONNECTION_STATUSES"
              value="3"
              c:type="TP_NUM_CONNECTION_STATUSES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="41">1 higher than the highest valid value of #TpConnectionStatus.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="34"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CONNECTION_STATUS_REASONS"
              value="17"
              c:type="TP_NUM_CONNECTION_STATUS_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="77">1 higher than the highest valid value of #TpConnectionStatusReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="56"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CONTACT_FEATURES"
              value="11"
              c:type="TP_NUM_CONTACT_FEATURES"
              version="0.19.0">
      <doc xml:space="preserve"
           filename="contact.c"
           line="140">1 higher than the highest #TpContactFeature supported by this version of
telepathy-glib.</doc>
      <source-position filename="contact.h" line="74"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CONTACT_LIST_STATES"
              value="4"
              c:type="TP_NUM_CONTACT_LIST_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="147">1 higher than the highest valid value of #TpContactListState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="94"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_CONTACT_METADATA_STORAGE_TYPES"
              value="4"
              c:type="TP_NUM_CONTACT_METADATA_STORAGE_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="194">1 higher than the highest valid value of #TpContactMetadataStorageType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="113"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_DBUS_ERRORS"
              value="11"
              c:type="TP_NUM_DBUS_ERRORS"
              version="0.19.0">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="116">1 more than the highest valid #TpDBusError at the time of compilation</doc>
      <source-position filename="_gen/proxy-introspectable.h" line="62"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_DEBUG_LEVELS" value="6" c:type="TP_NUM_DEBUG_LEVELS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1169">1 higher than the highest valid value of #TpDebugLevel.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="588"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_DELIVERY_STATUSES"
              value="7"
              c:type="TP_NUM_DELIVERY_STATUSES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="938">1 higher than the highest valid value of #TpDeliveryStatus.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="479"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_DTMF_EVENTS" value="16" c:type="TP_NUM_DTMF_EVENTS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="798">1 higher than the highest valid value of #TpDTMFEvent.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="405"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_FILE_HASH_TYPES"
              value="4"
              c:type="TP_NUM_FILE_HASH_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="503">1 higher than the highest valid value of #TpFileHashType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="262"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_FILE_TRANSFER_STATES"
              value="6"
              c:type="TP_NUM_FILE_TRANSFER_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="459">1 higher than the highest valid value of #TpFileTransferState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="242"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_FILE_TRANSFER_STATE_CHANGE_REASONS"
              value="6"
              c:type="TP_NUM_FILE_TRANSFER_STATE_CHANGE_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="482">1 higher than the highest valid value of #TpFileTransferStateChangeReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="253"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_HANDLE_TYPES" value="5" c:type="TP_NUM_HANDLE_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="21">1 higher than the highest valid value of #TpHandleType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="26"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_HTTP_METHODS" value="2" c:type="TP_NUM_HTTP_METHODS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="333">1 higher than the highest valid value of #TpHTTPMethod.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="176"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_LOCAL_HOLD_STATES"
              value="4"
              c:type="TP_NUM_LOCAL_HOLD_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="871">1 higher than the highest valid value of #TpLocalHoldState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="448"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_LOCAL_HOLD_STATE_REASONS"
              value="3"
              c:type="TP_NUM_LOCAL_HOLD_STATE_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="893">1 higher than the highest valid value of #TpLocalHoldStateReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="456"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_MEDIA_STREAM_BASE_PROTOS"
              value="2"
              c:type="TP_NUM_MEDIA_STREAM_BASE_PROTOS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1108">1 higher than the highest valid value of #TpMediaStreamBaseProto.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="557"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_MEDIA_STREAM_DIRECTIONS"
              value="4"
              c:type="TP_NUM_MEDIA_STREAM_DIRECTIONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="563">1 higher than the highest valid value of #TpMediaStreamDirection.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="286"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_MEDIA_STREAM_ERRORS"
              value="8"
              c:type="TP_NUM_MEDIA_STREAM_ERRORS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1089">1 higher than the highest valid value of #TpMediaStreamError.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="550"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_MEDIA_STREAM_STATES"
              value="3"
              c:type="TP_NUM_MEDIA_STREAM_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="542">1 higher than the highest valid value of #TpMediaStreamState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="277"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_MEDIA_STREAM_TRANSPORT_TYPES"
              value="3"
              c:type="TP_NUM_MEDIA_STREAM_TRANSPORT_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1128">1 higher than the highest valid value of #TpMediaStreamTransportType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="565"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_MEDIA_STREAM_TYPES"
              value="2"
              c:type="TP_NUM_MEDIA_STREAM_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="522">1 higher than the highest valid value of #TpMediaStreamType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="269"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_RCPT_XR_RTT_MODES"
              value="2"
              c:type="TP_NUM_RCPT_XR_RTT_MODES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1292">1 higher than the highest valid value of #TpRCPTXRRTTMode.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="641"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_RICH_PRESENCE_ACCESS_CONTROL_TYPES"
              value="4"
              c:type="TP_NUM_RICH_PRESENCE_ACCESS_CONTROL_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="269">1 higher than the highest valid value of #TpRichPresenceAccessControlType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="148"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SASL_ABORT_REASONS"
              value="2"
              c:type="TP_NUM_SASL_ABORT_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="977">1 higher than the highest valid value of #TpSASLAbortReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="498"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SASL_STATUSES" value="7" c:type="TP_NUM_SASL_STATUSES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1001">1 higher than the highest valid value of #TpSASLStatus.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="510"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SENDING_STATES"
              value="4"
              c:type="TP_NUM_SENDING_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1411">1 higher than the highest valid value of #TpSendingState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="690"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SERVICE_POINT_TYPES"
              value="3"
              c:type="TP_NUM_SERVICE_POINT_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="299">1 higher than the highest valid value of #TpServicePointType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="160"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SOCKET_ACCESS_CONTROLS"
              value="4"
              c:type="TP_NUM_SOCKET_ACCESS_CONTROLS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1064">1 higher than the highest valid value of #TpSocketAccessControl.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="537"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SOCKET_ADDRESS_TYPES"
              value="4"
              c:type="TP_NUM_SOCKET_ADDRESS_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1043">1 higher than the highest valid value of #TpSocketAddressType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="528"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_STREAM_COMPONENTS"
              value="3"
              c:type="TP_NUM_STREAM_COMPONENTS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1362">1 higher than the highest valid value of #TpStreamComponent.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="669"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_STREAM_ENDPOINT_STATES"
              value="5"
              c:type="TP_NUM_STREAM_ENDPOINT_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1435">1 higher than the highest valid value of #TpStreamEndpointState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="700"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_STREAM_FLOW_STATES"
              value="4"
              c:type="TP_NUM_STREAM_FLOW_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1315">1 higher than the highest valid value of #TpStreamFlowState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="650"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_STREAM_TRANSPORT_TYPES"
              value="7"
              c:type="TP_NUM_STREAM_TRANSPORT_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1388">1 higher than the highest valid value of #TpStreamTransportType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="681"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_SUBSCRIPTION_STATES"
              value="5"
              c:type="TP_NUM_SUBSCRIPTION_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="171">1 higher than the highest valid value of #TpSubscriptionState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="104"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_TLS_CERTIFICATE_REJECT_REASONS"
              value="10"
              c:type="TP_NUM_TLS_CERTIFICATE_REJECT_REASONS">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1220">1 higher than the highest valid value of #TpTLSCertificateRejectReason.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="611"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_TLS_CERTIFICATE_STATES"
              value="3"
              c:type="TP_NUM_TLS_CERTIFICATE_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1191">1 higher than the highest valid value of #TpTLSCertificateState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="596"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_TUBE_CHANNEL_STATES"
              value="4"
              c:type="TP_NUM_TUBE_CHANNEL_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1022">1 higher than the highest valid value of #TpTubeChannelState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="519"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_TUBE_STATES" value="3" c:type="TP_NUM_TUBE_STATES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="678">1 higher than the highest valid value of #TpTubeState.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="343"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="NUM_TUBE_TYPES" value="2" c:type="TP_NUM_TUBE_TYPES">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="658">1 higher than the highest valid value of #TpTubeType.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="335"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="OBSERVE_CHANNELS_CONTEXT"
                    c:identifier="TP_OBSERVE_CHANNELS_CONTEXT"
                    introspectable="0">
      <source-position filename="observe-channels-context.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBSERVE_CHANNELS_CONTEXT_CLASS"
                    c:identifier="TP_OBSERVE_CHANNELS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="observe-channels-context.h" line="43"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OBSERVE_CHANNELS_CONTEXT_GET_CLASS"
                    c:identifier="TP_OBSERVE_CHANNELS_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="observe-channels-context.h" line="50"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="ObserveChannelsContext"
           c:symbol-prefix="observe_channels_context"
           c:type="TpObserveChannelsContext"
           version="0.11.5"
           parent="GObject.Object"
           glib:type-name="TpObserveChannelsContext"
           glib:get-type="tp_observe_channels_context_get_type"
           glib:type-struct="ObserveChannelsContextClass">
      <doc xml:space="preserve"
           filename="observe-channels-context.c"
           line="30">Data structure representing the context of a Observer.ObserveChannels()
call.</doc>
      <source-position filename="observe-channels-context.h" line="34"/>
      <method name="accept"
              c:identifier="tp_observe_channels_context_accept"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="419">Called by #TpBaseClientClassObserveChannelsImpl when it's done so the D-Bus
method can return.</doc>
        <source-position filename="observe-channels-context.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="observe-channels-context.c"
                 line="421">a #TpObserveChannelsContext</doc>
            <type name="ObserveChannelsContext"
                  c:type="TpObserveChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delay"
              c:identifier="tp_observe_channels_context_delay"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="464">Called by #TpBaseClientClassObserveChannelsImpl to indicate that it
implements the method in an async way. The caller must take a reference
to the #TpObserveChannelsContext before calling this function, and
is responsible for calling either tp_observe_channels_context_accept() or
tp_observe_channels_context_fail() later.</doc>
        <source-position filename="observe-channels-context.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="observe-channels-context.c"
                 line="466">a #TpObserveChannelsContext</doc>
            <type name="ObserveChannelsContext"
                  c:type="TpObserveChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="fail"
              c:identifier="tp_observe_channels_context_fail"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="441">Called by #TpBaseClientClassObserveChannelsImpl to raise a D-Bus error.</doc>
        <source-position filename="observe-channels-context.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="observe-channels-context.c"
                 line="443">a #TpObserveChannelsContext</doc>
            <type name="ObserveChannelsContext"
                  c:type="TpObserveChannelsContext*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="observe-channels-context.c"
                 line="444">the error to return from the method</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_requests"
              c:identifier="tp_observe_channels_context_get_requests"
              glib:get-property="requests"
              version="0.13.14">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="694">Return a list of the #TpChannelRequest which have been satisfied by the
channels associated with #self.</doc>
        <source-position filename="observe-channels-context.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="observe-channels-context.c"
               line="701">
 a newly allocated #GList of reffed #TpChannelRequest.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="observe-channels-context.c"
                 line="696">a #TpObserveChannelsContext</doc>
            <type name="ObserveChannelsContext"
                  c:type="TpObserveChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_recovering"
              c:identifier="tp_observe_channels_context_is_recovering"
              version="0.11.5">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="485">If this call to ObserveChannels is for channels that already
existed before this observer started (because the observer used
tp_base_client_set_observer_recover()), return %TRUE.

In most cases, the result is %FALSE.</doc>
        <source-position filename="observe-channels-context.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="observe-channels-context.c"
               line="495">%TRUE for pre-existing channels, %FALSE for new channels</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="observe-channels-context.c"
                 line="487">a #TpObserveChannelsContext</doc>
            <type name="ObserveChannelsContext"
                  c:type="TpObserveChannelsContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="272">A #TpAccount object representing the Account that has been passed to
ObserveChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Account"/>
      </property>
      <property name="channels"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="308">A #GPtrArray containing #TpChannel objects representing the channels
that have been passed to ObserveChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="connection"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="290">A #TpConnection object representing the Connection that has been passed
to ObserveChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Connection"/>
      </property>
      <property name="dbus-context"
                version="0.11.5"
                introspectable="0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="362">The #DBusGMethodInvocation representing the D-Bus context of the
ObserveChannels call.
Can only be written during construction.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="dispatch-operation"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="326">A #TpChannelDispatchOperation object representing the
ChannelDispatchOperation that has been passed to ObserveChannels,
or %NULL if none has been passed.
Read-only except during construction.</doc>
        <type name="ChannelDispatchOperation"/>
      </property>
      <property name="observer-info"
                version="0.11.5"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="377">A #GHashTable where the keys are string and values are GValue instances.
It represents the Observer_Info hash table that has been passed to
ObserveChannels.
It's recommended to use high-level method such as
tp_observe_channels_context_is_recovering() to access to its content.

This property can't be %NULL.</doc>
        <type/>
      </property>
      <property name="requests"
                version="0.11.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_requests">
        <doc xml:space="preserve"
             filename="observe-channels-context.c"
             line="344">A #GPtrArray containing #TpChannelRequest objects representing the
requests that have been passed to ObserveChannels.
Read-only except during construction.

This property can't be %NULL.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
    </class>
    <record name="ObserveChannelsContextClass"
            c:type="TpObserveChannelsContextClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="ObserveChannelsContext"
            version="0.11.5">
      <doc xml:space="preserve"
           filename="observe-channels-context.c"
           line="39">The class of a #TpObserveChannelsContext.</doc>
      <source-position filename="observe-channels-context.h" line="34"/>
    </record>
    <record name="ObserveChannelsContextPrivate"
            c:type="TpObserveChannelsContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="observe-channels-context.h" line="35"/>
    </record>
    <function-macro name="PRESENCE_MIXIN"
                    c:identifier="TP_PRESENCE_MIXIN"
                    introspectable="0">
      <source-position filename="presence-mixin.h" line="159"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PRESENCE_MIXIN_CLASS"
                    c:identifier="TP_PRESENCE_MIXIN_CLASS"
                    introspectable="0">
      <source-position filename="presence-mixin.h" line="152"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PRESENCE_MIXIN_CLASS_OFFSET"
                    c:identifier="TP_PRESENCE_MIXIN_CLASS_OFFSET"
                    introspectable="0">
      <source-position filename="presence-mixin.h" line="150"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PRESENCE_MIXIN_OFFSET"
                    c:identifier="TP_PRESENCE_MIXIN_OFFSET"
                    introspectable="0">
      <source-position filename="presence-mixin.h" line="157"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="PROP_ACCOUNT_AUTOMATIC_PRESENCE"
              value="org.freedesktop.Telepathy.Account.AutomaticPresence"
              c:type="TP_PROP_ACCOUNT_AUTOMATIC_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="987"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CHANGING_PRESENCE"
              value="org.freedesktop.Telepathy.Account.ChangingPresence"
              c:type="TP_PROP_ACCOUNT_CHANGING_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1005"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CONNECTION"
              value="org.freedesktop.Telepathy.Account.Connection"
              c:type="TP_PROP_ACCOUNT_CONNECTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="991"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CONNECTION_ERROR"
              value="org.freedesktop.Telepathy.Account.ConnectionError"
              c:type="TP_PROP_ACCOUNT_CONNECTION_ERROR">
      <source-position filename="_gen/telepathy-interfaces.h" line="997"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CONNECTION_ERROR_DETAILS"
              value="org.freedesktop.Telepathy.Account.ConnectionErrorDetails"
              c:type="TP_PROP_ACCOUNT_CONNECTION_ERROR_DETAILS">
      <source-position filename="_gen/telepathy-interfaces.h" line="999"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CONNECTION_STATUS"
              value="org.freedesktop.Telepathy.Account.ConnectionStatus"
              c:type="TP_PROP_ACCOUNT_CONNECTION_STATUS">
      <source-position filename="_gen/telepathy-interfaces.h" line="993"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CONNECTION_STATUS_REASON"
              value="org.freedesktop.Telepathy.Account.ConnectionStatusReason"
              c:type="TP_PROP_ACCOUNT_CONNECTION_STATUS_REASON">
      <source-position filename="_gen/telepathy-interfaces.h" line="995"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CONNECT_AUTOMATICALLY"
              value="org.freedesktop.Telepathy.Account.ConnectAutomatically"
              c:type="TP_PROP_ACCOUNT_CONNECT_AUTOMATICALLY">
      <source-position filename="_gen/telepathy-interfaces.h" line="989"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_CURRENT_PRESENCE"
              value="org.freedesktop.Telepathy.Account.CurrentPresence"
              c:type="TP_PROP_ACCOUNT_CURRENT_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1001"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_DISPLAY_NAME"
              value="org.freedesktop.Telepathy.Account.DisplayName"
              c:type="TP_PROP_ACCOUNT_DISPLAY_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="973"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_ENABLED"
              value="org.freedesktop.Telepathy.Account.Enabled"
              c:type="TP_PROP_ACCOUNT_ENABLED">
      <source-position filename="_gen/telepathy-interfaces.h" line="979"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_HAS_BEEN_ONLINE"
              value="org.freedesktop.Telepathy.Account.HasBeenOnline"
              c:type="TP_PROP_ACCOUNT_HAS_BEEN_ONLINE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1009"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_ICON"
              value="org.freedesktop.Telepathy.Account.Icon"
              c:type="TP_PROP_ACCOUNT_ICON">
      <source-position filename="_gen/telepathy-interfaces.h" line="975"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACES"
              value="org.freedesktop.Telepathy.Account.Interfaces"
              c:type="TP_PROP_ACCOUNT_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="971"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACE_ADDRESSING_URI_SCHEMES"
              value="org.freedesktop.Telepathy.Account.Interface.Addressing.URISchemes"
              c:type="TP_PROP_ACCOUNT_INTERFACE_ADDRESSING_URI_SCHEMES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1029"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACE_AVATAR_AVATAR"
              value="org.freedesktop.Telepathy.Account.Interface.Avatar.Avatar"
              c:type="TP_PROP_ACCOUNT_INTERFACE_AVATAR_AVATAR">
      <source-position filename="_gen/telepathy-interfaces.h" line="1020"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_IDENTIFIER"
              value="org.freedesktop.Telepathy.Account.Interface.Storage.StorageIdentifier"
              c:type="TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_IDENTIFIER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1040"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_PROVIDER"
              value="org.freedesktop.Telepathy.Account.Interface.Storage.StorageProvider"
              c:type="TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_PROVIDER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1038"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_RESTRICTIONS"
              value="org.freedesktop.Telepathy.Account.Interface.Storage.StorageRestrictions"
              c:type="TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_RESTRICTIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1044"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_SPECIFIC_INFORMATION"
              value="org.freedesktop.Telepathy.Account.Interface.Storage.StorageSpecificInformation"
              c:type="TP_PROP_ACCOUNT_INTERFACE_STORAGE_STORAGE_SPECIFIC_INFORMATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1042"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_MANAGER_INTERFACES"
              value="org.freedesktop.Telepathy.AccountManager.Interfaces"
              c:type="TP_PROP_ACCOUNT_MANAGER_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="956"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_MANAGER_INVALID_ACCOUNTS"
              value="org.freedesktop.Telepathy.AccountManager.InvalidAccounts"
              c:type="TP_PROP_ACCOUNT_MANAGER_INVALID_ACCOUNTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="960"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_MANAGER_SUPPORTED_ACCOUNT_PROPERTIES"
              value="org.freedesktop.Telepathy.AccountManager.SupportedAccountProperties"
              c:type="TP_PROP_ACCOUNT_MANAGER_SUPPORTED_ACCOUNT_PROPERTIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="962"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_MANAGER_VALID_ACCOUNTS"
              value="org.freedesktop.Telepathy.AccountManager.ValidAccounts"
              c:type="TP_PROP_ACCOUNT_MANAGER_VALID_ACCOUNTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="958"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_NICKNAME"
              value="org.freedesktop.Telepathy.Account.Nickname"
              c:type="TP_PROP_ACCOUNT_NICKNAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="981"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_NORMALIZED_NAME"
              value="org.freedesktop.Telepathy.Account.NormalizedName"
              c:type="TP_PROP_ACCOUNT_NORMALIZED_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="1007"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_PARAMETERS"
              value="org.freedesktop.Telepathy.Account.Parameters"
              c:type="TP_PROP_ACCOUNT_PARAMETERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="985"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_REQUESTED_PRESENCE"
              value="org.freedesktop.Telepathy.Account.RequestedPresence"
              c:type="TP_PROP_ACCOUNT_REQUESTED_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1003"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_SERVICE"
              value="org.freedesktop.Telepathy.Account.Service"
              c:type="TP_PROP_ACCOUNT_SERVICE">
      <source-position filename="_gen/telepathy-interfaces.h" line="983"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_SUPERSEDES"
              value="org.freedesktop.Telepathy.Account.Supersedes"
              c:type="TP_PROP_ACCOUNT_SUPERSEDES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1011"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_ACCOUNT_VALID"
              value="org.freedesktop.Telepathy.Account.Valid"
              c:type="TP_PROP_ACCOUNT_VALID">
      <source-position filename="_gen/telepathy-interfaces.h" line="977"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_CHAIN_DATA"
              value="org.freedesktop.Telepathy.Authentication.TLSCertificate.CertificateChainData"
              c:type="TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_CHAIN_DATA">
      <source-position filename="_gen/telepathy-interfaces.h" line="1184"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_TYPE"
              value="org.freedesktop.Telepathy.Authentication.TLSCertificate.CertificateType"
              c:type="TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_CERTIFICATE_TYPE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1182"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_AUTHENTICATION_TLS_CERTIFICATE_REJECTIONS"
              value="org.freedesktop.Telepathy.Authentication.TLSCertificate.Rejections"
              c:type="TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_REJECTIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1180"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_AUTHENTICATION_TLS_CERTIFICATE_STATE"
              value="org.freedesktop.Telepathy.Authentication.TLSCertificate.State"
              c:type="TP_PROP_AUTHENTICATION_TLS_CERTIFICATE_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1178"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_DISPOSITION"
              value="org.freedesktop.Telepathy.Call1.Content.Disposition"
              c:type="TP_PROP_CALL_CONTENT_DISPOSITION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1257"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACES"
              value="org.freedesktop.Telepathy.Call1.Content.Interfaces"
              c:type="TP_PROP_CALL_CONTENT_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1251"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_INPUT_VOLUME"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.AudioControl.RequestedInputVolume"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_INPUT_VOLUME">
      <source-position filename="_gen/telepathy-interfaces.h" line="1240"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_OUTPUT_VOLUME"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.AudioControl.RequestedOutputVolume"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_AUDIO_CONTROL_REQUESTED_OUTPUT_VOLUME">
      <source-position filename="_gen/telepathy-interfaces.h" line="1242"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_DTMF_CURRENTLY_SENDING_TONES"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.DTMF.CurrentlySendingTones"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_DTMF_CURRENTLY_SENDING_TONES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1212"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_DTMF_DEFERRED_TONES"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.DTMF.DeferredTones"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_DTMF_DEFERRED_TONES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1214"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_EVENT"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media.CurrentDTMFEvent"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_EVENT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1201"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_STATE"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media.CurrentDTMFState"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_CURRENT_DTMF_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1203"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_MEDIA_LOCAL_MEDIA_DESCRIPTIONS"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media.LocalMediaDescriptions"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_LOCAL_MEDIA_DESCRIPTIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1195"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_MEDIA_MEDIA_DESCRIPTION_OFFER"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media.MediaDescriptionOffer"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_MEDIA_DESCRIPTION_OFFER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1197"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_MEDIA_PACKETIZATION"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media.Packetization"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_PACKETIZATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1199"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_MEDIA_REMOTE_MEDIA_DESCRIPTIONS"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.Media.RemoteMediaDescriptions"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_MEDIA_REMOTE_MEDIA_DESCRIPTIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1193"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_BITRATE"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.VideoControl.Bitrate"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_BITRATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1225"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_FRAMERATE"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.VideoControl.Framerate"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_FRAMERATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1227"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MANUAL_KEY_FRAMES"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.VideoControl.ManualKeyFrames"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MANUAL_KEY_FRAMES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1231"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MTU"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.VideoControl.MTU"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_MTU">
      <source-position filename="_gen/telepathy-interfaces.h" line="1229"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_VIDEO_RESOLUTION"
              value="org.freedesktop.Telepathy.Call1.Content.Interface.VideoControl.VideoResolution"
              c:type="TP_PROP_CALL_CONTENT_INTERFACE_VIDEO_CONTROL_VIDEO_RESOLUTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1223"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_CODECS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Codecs"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_CODECS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1315"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_FURTHER_NEGOTIATION_REQUIRED"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.FurtherNegotiationRequired"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_FURTHER_NEGOTIATION_REQUIRED">
      <source-position filename="_gen/telepathy-interfaces.h" line="1311"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_HAS_REMOTE_INFORMATION"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.HasRemoteInformation"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_HAS_REMOTE_INFORMATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1313"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACES"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interfaces"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1309"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DLRR_MAX_SIZE"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.DLRRMaxSize"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DLRR_MAX_SIZE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1274"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DUPLICATE_RLE_MAX_SIZE"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.DuplicateRLEMaxSize"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_DUPLICATE_RLE_MAX_SIZE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1270"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_ENABLE_METRICS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.EnableMetrics"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_ENABLE_METRICS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1280"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_LOSS_RLE_MAX_SIZE"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.LossRLEMaxSize"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_LOSS_RLE_MAX_SIZE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1268"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_PACKET_RECEIPT_TIMES_MAX_SIZE"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.PacketReceiptTimesMaxSize"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_PACKET_RECEIPT_TIMES_MAX_SIZE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1272"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_RTT_MODE"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.RTTMode"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_RTT_MODE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1276"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_STATISTICS_FLAGS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPExtendedReports.StatisticsFlags"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_EXTENDED_REPORTS_STATISTICS_FLAGS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1278"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_DOES_AVPF"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPFeedback.DoesAVPF"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_DOES_AVPF">
      <source-position filename="_gen/telepathy-interfaces.h" line="1291"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_FEEDBACK_MESSAGES"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTCPFeedback.FeedbackMessages"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTCP_FEEDBACK_FEEDBACK_MESSAGES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1289"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS_HEADER_EXTENSIONS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.Interface.RTPHeaderExtensions.HeaderExtensions"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_INTERFACE_RTP_HEADER_EXTENSIONS_HEADER_EXTENSIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1300"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_REMOTE_CONTACT"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.RemoteContact"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_REMOTE_CONTACT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1317"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_MEDIA_DESCRIPTION_SSRCS"
              value="org.freedesktop.Telepathy.Call1.Content.MediaDescription.SSRCs"
              c:type="TP_PROP_CALL_CONTENT_MEDIA_DESCRIPTION_SSRCS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1319"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_NAME"
              value="org.freedesktop.Telepathy.Call1.Content.Name"
              c:type="TP_PROP_CALL_CONTENT_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="1253"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_STREAMS"
              value="org.freedesktop.Telepathy.Call1.Content.Streams"
              c:type="TP_PROP_CALL_CONTENT_STREAMS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1259"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_CONTENT_TYPE"
              value="org.freedesktop.Telepathy.Call1.Content.Type"
              c:type="TP_PROP_CALL_CONTENT_TYPE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1255"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_CAN_REQUEST_RECEIVING"
              value="org.freedesktop.Telepathy.Call1.Stream.CanRequestReceiving"
              c:type="TP_PROP_CALL_STREAM_CAN_REQUEST_RECEIVING">
      <source-position filename="_gen/telepathy-interfaces.h" line="1363"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_CONTROLLING"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.Controlling"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_CONTROLLING">
      <source-position filename="_gen/telepathy-interfaces.h" line="1382"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_ENDPOINT_STATE"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.EndpointState"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_ENDPOINT_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1378"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_IS_ICE_LITE"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.IsICELite"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_IS_ICE_LITE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1384"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_REMOTE_CANDIDATES"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.RemoteCandidates"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_REMOTE_CANDIDATES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1374"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_REMOTE_CREDENTIALS"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.RemoteCredentials"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_REMOTE_CREDENTIALS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1372"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_SELECTED_CANDIDATE_PAIRS"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.SelectedCandidatePairs"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_SELECTED_CANDIDATE_PAIRS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1376"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_ENDPOINT_TRANSPORT"
              value="org.freedesktop.Telepathy.Call1.Stream.Endpoint.Transport"
              c:type="TP_PROP_CALL_STREAM_ENDPOINT_TRANSPORT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1380"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACES"
              value="org.freedesktop.Telepathy.Call1.Stream.Interfaces"
              c:type="TP_PROP_CALL_STREAM_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1355"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_ENDPOINTS"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.Endpoints"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_ENDPOINTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1344"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_HAS_SERVER_INFO"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.HasServerInfo"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_HAS_SERVER_INFO">
      <source-position filename="_gen/telepathy-interfaces.h" line="1342"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_ICE_RESTART_PENDING"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.ICERestartPending"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_ICE_RESTART_PENDING">
      <source-position filename="_gen/telepathy-interfaces.h" line="1346"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CANDIDATES"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.LocalCandidates"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CANDIDATES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1334"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CREDENTIALS"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.LocalCredentials"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_LOCAL_CREDENTIALS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1336"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_RECEIVING_STATE"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.ReceivingState"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_RECEIVING_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1330"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_RELAY_INFO"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.RelayInfo"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_RELAY_INFO">
      <source-position filename="_gen/telepathy-interfaces.h" line="1340"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_SENDING_STATE"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.SendingState"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_SENDING_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1328"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_STUN_SERVERS"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.STUNServers"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_STUN_SERVERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1338"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_INTERFACE_MEDIA_TRANSPORT"
              value="org.freedesktop.Telepathy.Call1.Stream.Interface.Media.Transport"
              c:type="TP_PROP_CALL_STREAM_INTERFACE_MEDIA_TRANSPORT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1332"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_LOCAL_SENDING_STATE"
              value="org.freedesktop.Telepathy.Call1.Stream.LocalSendingState"
              c:type="TP_PROP_CALL_STREAM_LOCAL_SENDING_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="1361"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_REMOTE_MEMBERS"
              value="org.freedesktop.Telepathy.Call1.Stream.RemoteMembers"
              c:type="TP_PROP_CALL_STREAM_REMOTE_MEMBERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1357"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CALL_STREAM_REMOTE_MEMBER_IDENTIFIERS"
              value="org.freedesktop.Telepathy.Call1.Stream.RemoteMemberIdentifiers"
              c:type="TP_PROP_CALL_STREAM_REMOTE_MEMBER_IDENTIFIERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1359"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_CHANNEL_TYPE"
              value="org.freedesktop.Telepathy.Channel.ChannelType"
              c:type="TP_PROP_CHANNEL_CHANNEL_TYPE">
      <source-position filename="_gen/telepathy-interfaces.h" line="391"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCHER_INTERFACES"
              value="org.freedesktop.Telepathy.ChannelDispatcher.Interfaces"
              c:type="TP_PROP_CHANNEL_DISPATCHER_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1053"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST_DISPATCH_OPERATIONS"
              value="org.freedesktop.Telepathy.ChannelDispatcher.Interface.OperationList.DispatchOperations"
              c:type="TP_PROP_CHANNEL_DISPATCHER_INTERFACE_OPERATION_LIST_DISPATCH_OPERATIONS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1071"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCHER_SUPPORTS_REQUEST_HINTS"
              value="org.freedesktop.Telepathy.ChannelDispatcher.SupportsRequestHints"
              c:type="TP_PROP_CHANNEL_DISPATCHER_SUPPORTS_REQUEST_HINTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1055"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCH_OPERATION_ACCOUNT"
              value="org.freedesktop.Telepathy.ChannelDispatchOperation.Account"
              c:type="TP_PROP_CHANNEL_DISPATCH_OPERATION_ACCOUNT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1084"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCH_OPERATION_CHANNELS"
              value="org.freedesktop.Telepathy.ChannelDispatchOperation.Channels"
              c:type="TP_PROP_CHANNEL_DISPATCH_OPERATION_CHANNELS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1086"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCH_OPERATION_CONNECTION"
              value="org.freedesktop.Telepathy.ChannelDispatchOperation.Connection"
              c:type="TP_PROP_CHANNEL_DISPATCH_OPERATION_CONNECTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="1082"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCH_OPERATION_INTERFACES"
              value="org.freedesktop.Telepathy.ChannelDispatchOperation.Interfaces"
              c:type="TP_PROP_CHANNEL_DISPATCH_OPERATION_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1080"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_DISPATCH_OPERATION_POSSIBLE_HANDLERS"
              value="org.freedesktop.Telepathy.ChannelDispatchOperation.PossibleHandlers"
              c:type="TP_PROP_CHANNEL_DISPATCH_OPERATION_POSSIBLE_HANDLERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1088"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INITIATOR_HANDLE"
              value="org.freedesktop.Telepathy.Channel.InitiatorHandle"
              c:type="TP_PROP_CHANNEL_INITIATOR_HANDLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="403"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INITIATOR_ID"
              value="org.freedesktop.Telepathy.Channel.InitiatorID"
              c:type="TP_PROP_CHANNEL_INITIATOR_ID">
      <source-position filename="_gen/telepathy-interfaces.h" line="405"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACES"
              value="org.freedesktop.Telepathy.Channel.Interfaces"
              c:type="TP_PROP_CHANNEL_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="393"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY"
              value="org.freedesktop.Telepathy.Channel.Interface.Anonymity.AnonymityMandatory"
              c:type="TP_PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY">
      <source-position filename="_gen/telepathy-interfaces.h" line="600"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MODES"
              value="org.freedesktop.Telepathy.Channel.Interface.Anonymity.AnonymityModes"
              c:type="TP_PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMITY_MODES">
      <source-position filename="_gen/telepathy-interfaces.h" line="598"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMOUS_ID"
              value="org.freedesktop.Telepathy.Channel.Interface.Anonymity.AnonymousID"
              c:type="TP_PROP_CHANNEL_INTERFACE_ANONYMITY_ANONYMOUS_ID">
      <source-position filename="_gen/telepathy-interfaces.h" line="602"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAN_RETRY_CAPTCHA"
              value="org.freedesktop.Telepathy.Channel.Interface.CaptchaAuthentication1.CanRetryCaptcha"
              c:type="TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAN_RETRY_CAPTCHA">
      <source-position filename="_gen/telepathy-interfaces.h" line="618"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR"
              value="org.freedesktop.Telepathy.Channel.Interface.CaptchaAuthentication1.CaptchaError"
              c:type="TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR">
      <source-position filename="_gen/telepathy-interfaces.h" line="622"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR_DETAILS"
              value="org.freedesktop.Telepathy.Channel.Interface.CaptchaAuthentication1.CaptchaErrorDetails"
              c:type="TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_ERROR_DETAILS">
      <source-position filename="_gen/telepathy-interfaces.h" line="624"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_STATUS"
              value="org.freedesktop.Telepathy.Channel.Interface.CaptchaAuthentication1.CaptchaStatus"
              c:type="TP_PROP_CHANNEL_INTERFACE_CAPTCHA_AUTHENTICATION_CAPTCHA_STATUS">
      <source-position filename="_gen/telepathy-interfaces.h" line="620"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CHAT_STATE_CHAT_STATES"
              value="org.freedesktop.Telepathy.Channel.Interface.ChatState.ChatStates"
              c:type="TP_PROP_CHANNEL_INTERFACE_CHAT_STATE_CHAT_STATES">
      <source-position filename="_gen/telepathy-interfaces.h" line="633"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CONFERENCE_CHANNELS"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference.Channels"
              c:type="TP_PROP_CHANNEL_INTERFACE_CONFERENCE_CHANNELS">
      <source-position filename="_gen/telepathy-interfaces.h" line="642"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_CHANNELS"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference.InitialChannels"
              c:type="TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_CHANNELS">
      <source-position filename="_gen/telepathy-interfaces.h" line="644"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_HANDLES"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference.InitialInviteeHandles"
              c:type="TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_HANDLES">
      <source-position filename="_gen/telepathy-interfaces.h" line="646"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_IDS"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference.InitialInviteeIDs"
              c:type="TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INITIAL_INVITEE_IDS">
      <source-position filename="_gen/telepathy-interfaces.h" line="648"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CONFERENCE_INVITATION_MESSAGE"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference.InvitationMessage"
              c:type="TP_PROP_CHANNEL_INTERFACE_CONFERENCE_INVITATION_MESSAGE">
      <source-position filename="_gen/telepathy-interfaces.h" line="650"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_CONFERENCE_ORIGINAL_CHANNELS"
              value="org.freedesktop.Telepathy.Channel.Interface.Conference.OriginalChannels"
              c:type="TP_PROP_CHANNEL_INTERFACE_CONFERENCE_ORIGINAL_CHANNELS">
      <source-position filename="_gen/telepathy-interfaces.h" line="652"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_DTMF_CURRENTLY_SENDING_TONES"
              value="org.freedesktop.Telepathy.Channel.Interface.DTMF.CurrentlySendingTones"
              c:type="TP_PROP_CHANNEL_INTERFACE_DTMF_CURRENTLY_SENDING_TONES">
      <source-position filename="_gen/telepathy-interfaces.h" line="668"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_DTMF_DEFERRED_TONES"
              value="org.freedesktop.Telepathy.Channel.Interface.DTMF.DeferredTones"
              c:type="TP_PROP_CHANNEL_INTERFACE_DTMF_DEFERRED_TONES">
      <source-position filename="_gen/telepathy-interfaces.h" line="672"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_DTMF_INITIAL_TONES"
              value="org.freedesktop.Telepathy.Channel.Interface.DTMF.InitialTones"
              c:type="TP_PROP_CHANNEL_INTERFACE_DTMF_INITIAL_TONES">
      <source-position filename="_gen/telepathy-interfaces.h" line="670"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA"
              value="org.freedesktop.Telepathy.Channel.Interface.FileTransfer.Metadata.Metadata"
              c:type="TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_METADATA">
      <source-position filename="_gen/telepathy-interfaces.h" line="683"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_SERVICE_NAME"
              value="org.freedesktop.Telepathy.Channel.Interface.FileTransfer.Metadata.ServiceName"
              c:type="TP_PROP_CHANNEL_INTERFACE_FILE_TRANSFER_METADATA_SERVICE_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="681"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_GROUP_FLAGS"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.GroupFlags"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_GROUP_FLAGS">
      <source-position filename="_gen/telepathy-interfaces.h" line="692"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_HANDLE_OWNERS"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.HandleOwners"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_HANDLE_OWNERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="694"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_LOCAL_PENDING_MEMBERS"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.LocalPendingMembers"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_LOCAL_PENDING_MEMBERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="696"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_MEMBERS"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.Members"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_MEMBERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="698"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_MEMBER_IDENTIFIERS"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.MemberIdentifiers"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_MEMBER_IDENTIFIERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="704"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_REMOTE_PENDING_MEMBERS"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.RemotePendingMembers"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_REMOTE_PENDING_MEMBERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="700"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_GROUP_SELF_HANDLE"
              value="org.freedesktop.Telepathy.Channel.Interface.Group.SelfHandle"
              c:type="TP_PROP_CHANNEL_INTERFACE_GROUP_SELF_HANDLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="702"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_MESSAGES_DELIVERY_REPORTING_SUPPORT"
              value="org.freedesktop.Telepathy.Channel.Interface.Messages.DeliveryReportingSupport"
              c:type="TP_PROP_CHANNEL_INTERFACE_MESSAGES_DELIVERY_REPORTING_SUPPORT">
      <source-position filename="_gen/telepathy-interfaces.h" line="743"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_PART_SUPPORT_FLAGS"
              value="org.freedesktop.Telepathy.Channel.Interface.Messages.MessagePartSupportFlags"
              c:type="TP_PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_PART_SUPPORT_FLAGS">
      <source-position filename="_gen/telepathy-interfaces.h" line="739"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_TYPES"
              value="org.freedesktop.Telepathy.Channel.Interface.Messages.MessageTypes"
              c:type="TP_PROP_CHANNEL_INTERFACE_MESSAGES_MESSAGE_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="737"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_MESSAGES_PENDING_MESSAGES"
              value="org.freedesktop.Telepathy.Channel.Interface.Messages.PendingMessages"
              c:type="TP_PROP_CHANNEL_INTERFACE_MESSAGES_PENDING_MESSAGES">
      <source-position filename="_gen/telepathy-interfaces.h" line="741"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_MESSAGES_SUPPORTED_CONTENT_TYPES"
              value="org.freedesktop.Telepathy.Channel.Interface.Messages.SupportedContentTypes"
              c:type="TP_PROP_CHANNEL_INTERFACE_MESSAGES_SUPPORTED_CONTENT_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="735"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_ANONYMOUS"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Anonymous"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_ANONYMOUS">
      <source-position filename="_gen/telepathy-interfaces.h" line="776"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CAN_UPDATE_CONFIGURATION"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.CanUpdateConfiguration"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CAN_UPDATE_CONFIGURATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="798"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CONFIGURATION_RETRIEVED"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.ConfigurationRetrieved"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_CONFIGURATION_RETRIEVED">
      <source-position filename="_gen/telepathy-interfaces.h" line="802"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_DESCRIPTION"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Description"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_DESCRIPTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="786"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_INVITEONLY"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.InviteOnly"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_INVITEONLY">
      <source-position filename="_gen/telepathy-interfaces.h" line="778"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_LIMIT"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Limit"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_LIMIT">
      <source-position filename="_gen/telepathy-interfaces.h" line="780"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MODERATED"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Moderated"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MODERATED">
      <source-position filename="_gen/telepathy-interfaces.h" line="782"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MUTABLE_PROPERTIES"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.MutableProperties"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_MUTABLE_PROPERTIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="800"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Password"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD">
      <source-position filename="_gen/telepathy-interfaces.h" line="794"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_HINT"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.PasswordHint"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_HINT">
      <source-position filename="_gen/telepathy-interfaces.h" line="796"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_PROTECTED"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.PasswordProtected"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PASSWORD_PROTECTED">
      <source-position filename="_gen/telepathy-interfaces.h" line="792"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PERSISTENT"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Persistent"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PERSISTENT">
      <source-position filename="_gen/telepathy-interfaces.h" line="788"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PRIVATE"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Private"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_PRIVATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="790"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CONFIG_TITLE"
              value="org.freedesktop.Telepathy.Channel.Interface.RoomConfig1.Title"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CONFIG_TITLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="784"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CREATION_TIMESTAMP"
              value="org.freedesktop.Telepathy.Channel.Interface.Room2.CreationTimestamp"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CREATION_TIMESTAMP">
      <source-position filename="_gen/telepathy-interfaces.h" line="767"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CREATOR"
              value="org.freedesktop.Telepathy.Channel.Interface.Room2.Creator"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CREATOR">
      <source-position filename="_gen/telepathy-interfaces.h" line="763"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_CREATOR_HANDLE"
              value="org.freedesktop.Telepathy.Channel.Interface.Room2.CreatorHandle"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_CREATOR_HANDLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="765"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_ROOM_NAME"
              value="org.freedesktop.Telepathy.Channel.Interface.Room2.RoomName"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_ROOM_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="759"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_ROOM_SERVER"
              value="org.freedesktop.Telepathy.Channel.Interface.Room2.Server"
              c:type="TP_PROP_CHANNEL_INTERFACE_ROOM_SERVER">
      <source-position filename="_gen/telepathy-interfaces.h" line="761"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AUTHORIZATION_IDENTITY"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.AuthorizationIdentity"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AUTHORIZATION_IDENTITY">
      <source-position filename="_gen/telepathy-interfaces.h" line="823"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AVAILABLE_MECHANISMS"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.AvailableMechanisms"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_AVAILABLE_MECHANISMS">
      <source-position filename="_gen/telepathy-interfaces.h" line="811"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_CAN_TRY_AGAIN"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.CanTryAgain"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_CAN_TRY_AGAIN">
      <source-position filename="_gen/telepathy-interfaces.h" line="815"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_REALM"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.DefaultRealm"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_REALM">
      <source-position filename="_gen/telepathy-interfaces.h" line="827"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_USERNAME"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.DefaultUsername"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_DEFAULT_USERNAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="825"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_HAS_INITIAL_DATA"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.HasInitialData"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_HAS_INITIAL_DATA">
      <source-position filename="_gen/telepathy-interfaces.h" line="813"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_MAY_SAVE_RESPONSE"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.MaySaveResponse"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_MAY_SAVE_RESPONSE">
      <source-position filename="_gen/telepathy-interfaces.h" line="829"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.SASLError"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR">
      <source-position filename="_gen/telepathy-interfaces.h" line="819"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR_DETAILS"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.SASLErrorDetails"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_ERROR_DETAILS">
      <source-position filename="_gen/telepathy-interfaces.h" line="821"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_STATUS"
              value="org.freedesktop.Telepathy.Channel.Interface.SASLAuthentication.SASLStatus"
              c:type="TP_PROP_CHANNEL_INTERFACE_SASL_AUTHENTICATION_SASL_STATUS">
      <source-position filename="_gen/telepathy-interfaces.h" line="817"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SECURABLE_ENCRYPTED"
              value="org.freedesktop.Telepathy.Channel.Interface.Securable.Encrypted"
              c:type="TP_PROP_CHANNEL_INTERFACE_SECURABLE_ENCRYPTED">
      <source-position filename="_gen/telepathy-interfaces.h" line="838"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SECURABLE_VERIFIED"
              value="org.freedesktop.Telepathy.Channel.Interface.Securable.Verified"
              c:type="TP_PROP_CHANNEL_INTERFACE_SECURABLE_VERIFIED">
      <source-position filename="_gen/telepathy-interfaces.h" line="840"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SERVICE_POINT_CURRENT_SERVICE_POINT"
              value="org.freedesktop.Telepathy.Channel.Interface.ServicePoint.CurrentServicePoint"
              c:type="TP_PROP_CHANNEL_INTERFACE_SERVICE_POINT_CURRENT_SERVICE_POINT">
      <source-position filename="_gen/telepathy-interfaces.h" line="851"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SERVICE_POINT_INITIAL_SERVICE_POINT"
              value="org.freedesktop.Telepathy.Channel.Interface.ServicePoint.InitialServicePoint"
              c:type="TP_PROP_CHANNEL_INTERFACE_SERVICE_POINT_INITIAL_SERVICE_POINT">
      <source-position filename="_gen/telepathy-interfaces.h" line="849"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SMS_FLASH"
              value="org.freedesktop.Telepathy.Channel.Interface.SMS.Flash"
              c:type="TP_PROP_CHANNEL_INTERFACE_SMS_FLASH">
      <source-position filename="_gen/telepathy-interfaces.h" line="877"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SMS_SMS_CHANNEL"
              value="org.freedesktop.Telepathy.Channel.Interface.SMS.SMSChannel"
              c:type="TP_PROP_CHANNEL_INTERFACE_SMS_SMS_CHANNEL">
      <source-position filename="_gen/telepathy-interfaces.h" line="879"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR"
              value="org.freedesktop.Telepathy.Channel.Interface.Subject2.Actor"
              c:type="TP_PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR">
      <source-position filename="_gen/telepathy-interfaces.h" line="862"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR_HANDLE"
              value="org.freedesktop.Telepathy.Channel.Interface.Subject2.ActorHandle"
              c:type="TP_PROP_CHANNEL_INTERFACE_SUBJECT_ACTOR_HANDLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="864"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SUBJECT_CAN_SET"
              value="org.freedesktop.Telepathy.Channel.Interface.Subject2.CanSet"
              c:type="TP_PROP_CHANNEL_INTERFACE_SUBJECT_CAN_SET">
      <source-position filename="_gen/telepathy-interfaces.h" line="868"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SUBJECT_SUBJECT"
              value="org.freedesktop.Telepathy.Channel.Interface.Subject2.Subject"
              c:type="TP_PROP_CHANNEL_INTERFACE_SUBJECT_SUBJECT">
      <source-position filename="_gen/telepathy-interfaces.h" line="860"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_SUBJECT_TIMESTAMP"
              value="org.freedesktop.Telepathy.Channel.Interface.Subject2.Timestamp"
              c:type="TP_PROP_CHANNEL_INTERFACE_SUBJECT_TIMESTAMP">
      <source-position filename="_gen/telepathy-interfaces.h" line="866"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_TUBE_PARAMETERS"
              value="org.freedesktop.Telepathy.Channel.Interface.Tube.Parameters"
              c:type="TP_PROP_CHANNEL_INTERFACE_TUBE_PARAMETERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="888"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_INTERFACE_TUBE_STATE"
              value="org.freedesktop.Telepathy.Channel.Interface.Tube.State"
              c:type="TP_PROP_CHANNEL_INTERFACE_TUBE_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="890"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUESTED"
              value="org.freedesktop.Telepathy.Channel.Requested"
              c:type="TP_PROP_CHANNEL_REQUESTED">
      <source-position filename="_gen/telepathy-interfaces.h" line="401"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUEST_ACCOUNT"
              value="org.freedesktop.Telepathy.ChannelRequest.Account"
              c:type="TP_PROP_CHANNEL_REQUEST_ACCOUNT">
      <source-position filename="_gen/telepathy-interfaces.h" line="1097"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUEST_HINTS"
              value="org.freedesktop.Telepathy.ChannelRequest.Hints"
              c:type="TP_PROP_CHANNEL_REQUEST_HINTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1107"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUEST_INTERFACES"
              value="org.freedesktop.Telepathy.ChannelRequest.Interfaces"
              c:type="TP_PROP_CHANNEL_REQUEST_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1105"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUEST_PREFERRED_HANDLER"
              value="org.freedesktop.Telepathy.ChannelRequest.PreferredHandler"
              c:type="TP_PROP_CHANNEL_REQUEST_PREFERRED_HANDLER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUEST_REQUESTS"
              value="org.freedesktop.Telepathy.ChannelRequest.Requests"
              c:type="TP_PROP_CHANNEL_REQUEST_REQUESTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1103"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_REQUEST_USER_ACTION_TIME"
              value="org.freedesktop.Telepathy.ChannelRequest.UserActionTime"
              c:type="TP_PROP_CHANNEL_REQUEST_USER_ACTION_TIME">
      <source-position filename="_gen/telepathy-interfaces.h" line="1099"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TARGET_HANDLE"
              value="org.freedesktop.Telepathy.Channel.TargetHandle"
              c:type="TP_PROP_CHANNEL_TARGET_HANDLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="395"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TARGET_HANDLE_TYPE"
              value="org.freedesktop.Telepathy.Channel.TargetHandleType"
              c:type="TP_PROP_CHANNEL_TARGET_HANDLE_TYPE">
      <source-position filename="_gen/telepathy-interfaces.h" line="399"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TARGET_ID"
              value="org.freedesktop.Telepathy.Channel.TargetID"
              c:type="TP_PROP_CHANNEL_TARGET_ID">
      <source-position filename="_gen/telepathy-interfaces.h" line="397"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_CALL_FLAGS"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.CallFlags"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_CALL_FLAGS">
      <source-position filename="_gen/telepathy-interfaces.h" line="420"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_CALL_MEMBERS"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.CallMembers"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_CALL_MEMBERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="426"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_CALL_STATE"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.CallState"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_CALL_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="418"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_CALL_STATE_DETAILS"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.CallStateDetails"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_CALL_STATE_DETAILS">
      <source-position filename="_gen/telepathy-interfaces.h" line="416"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_CALL_STATE_REASON"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.CallStateReason"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_CALL_STATE_REASON">
      <source-position filename="_gen/telepathy-interfaces.h" line="422"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_CONTENTS"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.Contents"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_CONTENTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="414"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_HARDWARE_STREAMING"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.HardwareStreaming"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_HARDWARE_STREAMING">
      <source-position filename="_gen/telepathy-interfaces.h" line="424"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.InitialAudio"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO">
      <source-position filename="_gen/telepathy-interfaces.h" line="432"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO_NAME"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.InitialAudioName"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_INITIAL_AUDIO_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="436"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_INITIAL_TRANSPORT"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.InitialTransport"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_INITIAL_TRANSPORT">
      <source-position filename="_gen/telepathy-interfaces.h" line="430"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.InitialVideo"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO">
      <source-position filename="_gen/telepathy-interfaces.h" line="434"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO_NAME"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.InitialVideoName"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_INITIAL_VIDEO_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="438"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_MEMBER_IDENTIFIERS"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.MemberIdentifiers"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_MEMBER_IDENTIFIERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="428"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CALL_MUTABLE_CONTENTS"
              value="org.freedesktop.Telepathy.Channel.Type.Call1.MutableContents"
              c:type="TP_PROP_CHANNEL_TYPE_CALL_MUTABLE_CONTENTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="440"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CONTACT_SEARCH_AVAILABLE_SEARCH_KEYS"
              value="org.freedesktop.Telepathy.Channel.Type.ContactSearch.AvailableSearchKeys"
              c:type="TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_AVAILABLE_SEARCH_KEYS">
      <source-position filename="_gen/telepathy-interfaces.h" line="472"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CONTACT_SEARCH_LIMIT"
              value="org.freedesktop.Telepathy.Channel.Type.ContactSearch.Limit"
              c:type="TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_LIMIT">
      <source-position filename="_gen/telepathy-interfaces.h" line="470"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CONTACT_SEARCH_SEARCH_STATE"
              value="org.freedesktop.Telepathy.Channel.Type.ContactSearch.SearchState"
              c:type="TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_SEARCH_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="468"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_CONTACT_SEARCH_SERVER"
              value="org.freedesktop.Telepathy.Channel.Type.ContactSearch.Server"
              c:type="TP_PROP_CHANNEL_TYPE_CONTACT_SEARCH_SERVER">
      <source-position filename="_gen/telepathy-interfaces.h" line="474"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_DBUS_TUBE_DBUS_NAMES"
              value="org.freedesktop.Telepathy.Channel.Type.DBusTube.DBusNames"
              c:type="TP_PROP_CHANNEL_TYPE_DBUS_TUBE_DBUS_NAMES">
      <source-position filename="_gen/telepathy-interfaces.h" line="565"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME"
              value="org.freedesktop.Telepathy.Channel.Type.DBusTube.ServiceName"
              c:type="TP_PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="563"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_DBUS_TUBE_SUPPORTED_ACCESS_CONTROLS"
              value="org.freedesktop.Telepathy.Channel.Type.DBusTube.SupportedAccessControls"
              c:type="TP_PROP_CHANNEL_TYPE_DBUS_TUBE_SUPPORTED_ACCESS_CONTROLS">
      <source-position filename="_gen/telepathy-interfaces.h" line="567"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_AVAILABLE_SOCKET_TYPES"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.AvailableSocketTypes"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_AVAILABLE_SOCKET_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="499"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.ContentHash"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH">
      <source-position filename="_gen/telepathy-interfaces.h" line="493"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH_TYPE"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.ContentHashType"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_HASH_TYPE">
      <source-position filename="_gen/telepathy-interfaces.h" line="491"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.ContentType"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE">
      <source-position filename="_gen/telepathy-interfaces.h" line="485"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.Date"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="497"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.Description"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="495"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.Filename"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="487"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_FILE_COLLECTION"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.FileCollection"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_FILE_COLLECTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="507"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.InitialOffset"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET">
      <source-position filename="_gen/telepathy-interfaces.h" line="503"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.Size"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE">
      <source-position filename="_gen/telepathy-interfaces.h" line="489"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_STATE"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.State"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="483"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_TRANSFERRED_BYTES"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.TransferredBytes"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_TRANSFERRED_BYTES">
      <source-position filename="_gen/telepathy-interfaces.h" line="501"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_FILE_TRANSFER_URI"
              value="org.freedesktop.Telepathy.Channel.Type.FileTransfer.URI"
              c:type="TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_URI">
      <source-position filename="_gen/telepathy-interfaces.h" line="505"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_ROOM_LIST_SERVER"
              value="org.freedesktop.Telepathy.Channel.Type.RoomList.Server"
              c:type="TP_PROP_CHANNEL_TYPE_ROOM_LIST_SERVER">
      <source-position filename="_gen/telepathy-interfaces.h" line="529"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_SERVER_AUTHENTICATION_AUTHENTICATION_METHOD"
              value="org.freedesktop.Telepathy.Channel.Type.ServerAuthentication.AuthenticationMethod"
              c:type="TP_PROP_CHANNEL_TYPE_SERVER_AUTHENTICATION_AUTHENTICATION_METHOD">
      <source-position filename="_gen/telepathy-interfaces.h" line="576"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_HOSTNAME"
              value="org.freedesktop.Telepathy.Channel.Type.ServerTLSConnection.Hostname"
              c:type="TP_PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_HOSTNAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="587"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_REFERENCE_IDENTITIES"
              value="org.freedesktop.Telepathy.Channel.Type.ServerTLSConnection.ReferenceIdentities"
              c:type="TP_PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_REFERENCE_IDENTITIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="589"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_SERVER_CERTIFICATE"
              value="org.freedesktop.Telepathy.Channel.Type.ServerTLSConnection.ServerCertificate"
              c:type="TP_PROP_CHANNEL_TYPE_SERVER_TLS_CONNECTION_SERVER_CERTIFICATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="585"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_STREAMED_MEDIA_IMMUTABLE_STREAMS"
              value="org.freedesktop.Telepathy.Channel.Type.StreamedMedia.ImmutableStreams"
              c:type="TP_PROP_CHANNEL_TYPE_STREAMED_MEDIA_IMMUTABLE_STREAMS">
      <source-position filename="_gen/telepathy-interfaces.h" line="520"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_AUDIO"
              value="org.freedesktop.Telepathy.Channel.Type.StreamedMedia.InitialAudio"
              c:type="TP_PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_AUDIO">
      <source-position filename="_gen/telepathy-interfaces.h" line="516"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_VIDEO"
              value="org.freedesktop.Telepathy.Channel.Type.StreamedMedia.InitialVideo"
              c:type="TP_PROP_CHANNEL_TYPE_STREAMED_MEDIA_INITIAL_VIDEO">
      <source-position filename="_gen/telepathy-interfaces.h" line="518"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_STREAM_TUBE_SERVICE"
              value="org.freedesktop.Telepathy.Channel.Type.StreamTube.Service"
              c:type="TP_PROP_CHANNEL_TYPE_STREAM_TUBE_SERVICE">
      <source-position filename="_gen/telepathy-interfaces.h" line="552"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CHANNEL_TYPE_STREAM_TUBE_SUPPORTED_SOCKET_TYPES"
              value="org.freedesktop.Telepathy.Channel.Type.StreamTube.SupportedSocketTypes"
              c:type="TP_PROP_CHANNEL_TYPE_STREAM_TUBE_SUPPORTED_SOCKET_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="554"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_APPROVER_APPROVER_CHANNEL_FILTER"
              value="org.freedesktop.Telepathy.Client.Approver.ApproverChannelFilter"
              c:type="TP_PROP_CLIENT_APPROVER_APPROVER_CHANNEL_FILTER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1138"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_HANDLER_BYPASS_APPROVAL"
              value="org.freedesktop.Telepathy.Client.Handler.BypassApproval"
              c:type="TP_PROP_CLIENT_HANDLER_BYPASS_APPROVAL">
      <source-position filename="_gen/telepathy-interfaces.h" line="1149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_HANDLER_CAPABILITIES"
              value="org.freedesktop.Telepathy.Client.Handler.Capabilities"
              c:type="TP_PROP_CLIENT_HANDLER_CAPABILITIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1151"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_HANDLER_HANDLED_CHANNELS"
              value="org.freedesktop.Telepathy.Client.Handler.HandledChannels"
              c:type="TP_PROP_CLIENT_HANDLER_HANDLED_CHANNELS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1153"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_HANDLER_HANDLER_CHANNEL_FILTER"
              value="org.freedesktop.Telepathy.Client.Handler.HandlerChannelFilter"
              c:type="TP_PROP_CLIENT_HANDLER_HANDLER_CHANNEL_FILTER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1147"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_INTERFACES"
              value="org.freedesktop.Telepathy.Client.Interfaces"
              c:type="TP_PROP_CLIENT_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="1116"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_OBSERVER_DELAY_APPROVERS"
              value="org.freedesktop.Telepathy.Client.Observer.DelayApprovers"
              c:type="TP_PROP_CLIENT_OBSERVER_DELAY_APPROVERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="1129"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_OBSERVER_OBSERVER_CHANNEL_FILTER"
              value="org.freedesktop.Telepathy.Client.Observer.ObserverChannelFilter"
              c:type="TP_PROP_CLIENT_OBSERVER_OBSERVER_CHANNEL_FILTER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1125"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CLIENT_OBSERVER_RECOVER"
              value="org.freedesktop.Telepathy.Client.Observer.Recover"
              c:type="TP_PROP_CLIENT_OBSERVER_RECOVER">
      <source-position filename="_gen/telepathy-interfaces.h" line="1127"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_HAS_IMMORTAL_HANDLES"
              value="org.freedesktop.Telepathy.Connection.HasImmortalHandles"
              c:type="TP_PROP_CONNECTION_HAS_IMMORTAL_HANDLES">
      <source-position filename="_gen/telepathy-interfaces.h" line="101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACES"
              value="org.freedesktop.Telepathy.Connection.Interfaces"
              c:type="TP_PROP_CONNECTION_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="93"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY"
              value="org.freedesktop.Telepathy.Connection.Interface.Anonymity.AnonymityMandatory"
              c:type="TP_PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MANDATORY">
      <source-position filename="_gen/telepathy-interfaces.h" line="134"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MODES"
              value="org.freedesktop.Telepathy.Connection.Interface.Anonymity.AnonymityModes"
              c:type="TP_PROP_CONNECTION_INTERFACE_ANONYMITY_ANONYMITY_MODES">
      <source-position filename="_gen/telepathy-interfaces.h" line="136"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_ANONYMITY_SUPPORTED_ANONYMITY_MODES"
              value="org.freedesktop.Telepathy.Connection.Interface.Anonymity.SupportedAnonymityModes"
              c:type="TP_PROP_CONNECTION_INTERFACE_ANONYMITY_SUPPORTED_ANONYMITY_MODES">
      <source-position filename="_gen/telepathy-interfaces.h" line="132"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.MaximumAvatarBytes"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES">
      <source-position filename="_gen/telepathy-interfaces.h" line="159"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.MaximumAvatarHeight"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT">
      <source-position filename="_gen/telepathy-interfaces.h" line="155"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.MaximumAvatarWidth"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="157"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.MinimumAvatarHeight"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT">
      <source-position filename="_gen/telepathy-interfaces.h" line="147"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.MinimumAvatarWidth"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="149"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.RecommendedAvatarHeight"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT">
      <source-position filename="_gen/telepathy-interfaces.h" line="151"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.RecommendedAvatarWidth"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="153"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars.SupportedAvatarMIMETypes"
              c:type="TP_PROP_CONNECTION_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="145"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_BALANCE_ACCOUNT_BALANCE"
              value="org.freedesktop.Telepathy.Connection.Interface.Balance.AccountBalance"
              c:type="TP_PROP_CONNECTION_INTERFACE_BALANCE_ACCOUNT_BALANCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="170"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_BALANCE_MANAGE_CREDIT_URI"
              value="org.freedesktop.Telepathy.Connection.Interface.Balance.ManageCreditURI"
              c:type="TP_PROP_CONNECTION_INTERFACE_BALANCE_MANAGE_CREDIT_URI">
      <source-position filename="_gen/telepathy-interfaces.h" line="172"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CELLULAR_IMSI"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular.IMSI"
              c:type="TP_PROP_CONNECTION_INTERFACE_CELLULAR_IMSI">
      <source-position filename="_gen/telepathy-interfaces.h" line="196"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_NATIONAL_CHARACTER_SET"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular.MessageNationalCharacterSet"
              c:type="TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_NATIONAL_CHARACTER_SET">
      <source-position filename="_gen/telepathy-interfaces.h" line="200"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_REDUCED_CHARACTER_SET"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular.MessageReducedCharacterSet"
              c:type="TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_REDUCED_CHARACTER_SET">
      <source-position filename="_gen/telepathy-interfaces.h" line="198"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_SERVICE_CENTRE"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular.MessageServiceCentre"
              c:type="TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_SERVICE_CENTRE">
      <source-position filename="_gen/telepathy-interfaces.h" line="194"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_VALIDITY_PERIOD"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular.MessageValidityPeriod"
              c:type="TP_PROP_CONNECTION_INTERFACE_CELLULAR_MESSAGE_VALIDITY_PERIOD">
      <source-position filename="_gen/telepathy-interfaces.h" line="190"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CELLULAR_OVERRIDE_MESSAGE_SERVICE_CENTRE"
              value="org.freedesktop.Telepathy.Connection.Interface.Cellular.OverrideMessageServiceCentre"
              c:type="TP_PROP_CONNECTION_INTERFACE_CELLULAR_OVERRIDE_MESSAGE_SERVICE_CENTRE">
      <source-position filename="_gen/telepathy-interfaces.h" line="192"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACTS_CONTACT_ATTRIBUTE_INTERFACES"
              value="org.freedesktop.Telepathy.Connection.Interface.Contacts.ContactAttributeInterfaces"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACTS_CONTACT_ATTRIBUTE_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="323"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_BLOCKING_CONTACT_BLOCKING_CAPABILITIES"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactBlocking.ContactBlockingCapabilities"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_BLOCKING_CONTACT_BLOCKING_CAPABILITIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="218"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_DISJOINT_GROUPS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactGroups.DisjointGroups"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_DISJOINT_GROUPS">
      <source-position filename="_gen/telepathy-interfaces.h" line="238"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactGroups.Groups"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS">
      <source-position filename="_gen/telepathy-interfaces.h" line="242"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUP_STORAGE"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactGroups.GroupStorage"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUP_STORAGE">
      <source-position filename="_gen/telepathy-interfaces.h" line="240"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_INFO_CONTACT_INFO_FLAGS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactInfo.ContactInfoFlags"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_INFO_CONTACT_INFO_FLAGS">
      <source-position filename="_gen/telepathy-interfaces.h" line="253"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_INFO_SUPPORTED_FIELDS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactInfo.SupportedFields"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_INFO_SUPPORTED_FIELDS">
      <source-position filename="_gen/telepathy-interfaces.h" line="255"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_LIST_CAN_CHANGE_CONTACT_LIST"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList.CanChangeContactList"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_CAN_CHANGE_CONTACT_LIST">
      <source-position filename="_gen/telepathy-interfaces.h" line="270"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_PERSISTS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList.ContactListPersists"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_PERSISTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="268"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_STATE"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList.ContactListState"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_CONTACT_LIST_STATE">
      <source-position filename="_gen/telepathy-interfaces.h" line="266"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_LIST_DOWNLOAD_AT_CONNECTION"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList.DownloadAtConnection"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_DOWNLOAD_AT_CONNECTION">
      <source-position filename="_gen/telepathy-interfaces.h" line="274"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_CONTACT_LIST_REQUEST_USES_MESSAGE"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList.RequestUsesMessage"
              c:type="TP_PROP_CONNECTION_INTERFACE_CONTACT_LIST_REQUEST_USES_MESSAGE">
      <source-position filename="_gen/telepathy-interfaces.h" line="272"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL"
              value="org.freedesktop.Telepathy.Connection.Interface.Location.LocationAccessControl"
              c:type="TP_PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL">
      <source-position filename="_gen/telepathy-interfaces.h" line="345"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL_TYPES"
              value="org.freedesktop.Telepathy.Connection.Interface.Location.LocationAccessControlTypes"
              c:type="TP_PROP_CONNECTION_INTERFACE_LOCATION_LOCATION_ACCESS_CONTROL_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="343"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_LOCATION_SUPPORTED_LOCATION_FEATURES"
              value="org.freedesktop.Telepathy.Connection.Interface.Location.SupportedLocationFeatures"
              c:type="TP_PROP_CONNECTION_INTERFACE_LOCATION_SUPPORTED_LOCATION_FEATURES">
      <source-position filename="_gen/telepathy-interfaces.h" line="347"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_ADDRESS"
              value="org.freedesktop.Telepathy.Connection.Interface.MailNotification.MailAddress"
              c:type="TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_ADDRESS">
      <source-position filename="_gen/telepathy-interfaces.h" line="373"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_NOTIFICATION_FLAGS"
              value="org.freedesktop.Telepathy.Connection.Interface.MailNotification.MailNotificationFlags"
              c:type="TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_MAIL_NOTIFICATION_FLAGS">
      <source-position filename="_gen/telepathy-interfaces.h" line="367"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAILS"
              value="org.freedesktop.Telepathy.Connection.Interface.MailNotification.UnreadMails"
              c:type="TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAILS">
      <source-position filename="_gen/telepathy-interfaces.h" line="371"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAIL_COUNT"
              value="org.freedesktop.Telepathy.Connection.Interface.MailNotification.UnreadMailCount"
              c:type="TP_PROP_CONNECTION_INTERFACE_MAIL_NOTIFICATION_UNREAD_MAIL_COUNT">
      <source-position filename="_gen/telepathy-interfaces.h" line="369"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_POWER_SAVING_POWER_SAVING_ACTIVE"
              value="org.freedesktop.Telepathy.Connection.Interface.PowerSaving.PowerSavingActive"
              c:type="TP_PROP_CONNECTION_INTERFACE_POWER_SAVING_POWER_SAVING_ACTIVE">
      <source-position filename="_gen/telepathy-interfaces.h" line="382"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_REQUESTS_CHANNELS"
              value="org.freedesktop.Telepathy.Connection.Interface.Requests.Channels"
              c:type="TP_PROP_CONNECTION_INTERFACE_REQUESTS_CHANNELS">
      <source-position filename="_gen/telepathy-interfaces.h" line="332"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_REQUESTS_REQUESTABLE_CHANNEL_CLASSES"
              value="org.freedesktop.Telepathy.Connection.Interface.Requests.RequestableChannelClasses"
              c:type="TP_PROP_CONNECTION_INTERFACE_REQUESTS_REQUESTABLE_CHANNEL_CLASSES">
      <source-position filename="_gen/telepathy-interfaces.h" line="334"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_SERVICE_POINT_KNOWN_SERVICE_POINTS"
              value="org.freedesktop.Telepathy.Connection.Interface.ServicePoint.KnownServicePoints"
              c:type="TP_PROP_CONNECTION_INTERFACE_SERVICE_POINT_KNOWN_SERVICE_POINTS">
      <source-position filename="_gen/telepathy-interfaces.h" line="358"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_MAXIMUM_STATUS_MESSAGE_LENGTH"
              value="org.freedesktop.Telepathy.Connection.Interface.SimplePresence.MaximumStatusMessageLength"
              c:type="TP_PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_MAXIMUM_STATUS_MESSAGE_LENGTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="305"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_STATUSES"
              value="org.freedesktop.Telepathy.Connection.Interface.SimplePresence.Statuses"
              c:type="TP_PROP_CONNECTION_INTERFACE_SIMPLE_PRESENCE_STATUSES">
      <source-position filename="_gen/telepathy-interfaces.h" line="303"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_MANAGER_INTERFACES"
              value="org.freedesktop.Telepathy.ConnectionManager.Interfaces"
              c:type="TP_PROP_CONNECTION_MANAGER_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="18"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_MANAGER_PROTOCOLS"
              value="org.freedesktop.Telepathy.ConnectionManager.Protocols"
              c:type="TP_PROP_CONNECTION_MANAGER_PROTOCOLS">
      <source-position filename="_gen/telepathy-interfaces.h" line="16"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_SELF_HANDLE"
              value="org.freedesktop.Telepathy.Connection.SelfHandle"
              c:type="TP_PROP_CONNECTION_SELF_HANDLE">
      <source-position filename="_gen/telepathy-interfaces.h" line="95"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_SELF_ID"
              value="org.freedesktop.Telepathy.Connection.SelfID"
              c:type="TP_PROP_CONNECTION_SELF_ID">
      <source-position filename="_gen/telepathy-interfaces.h" line="97"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_CONNECTION_STATUS"
              value="org.freedesktop.Telepathy.Connection.Status"
              c:type="TP_PROP_CONNECTION_STATUS">
      <source-position filename="_gen/telepathy-interfaces.h" line="99"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_DEBUG_ENABLED"
              value="org.freedesktop.Telepathy.Debug.Enabled"
              c:type="TP_PROP_DEBUG_ENABLED">
      <source-position filename="_gen/telepathy-interfaces.h" line="1169"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_MEDIA_STREAM_HANDLER_CREATED_LOCALLY"
              value="org.freedesktop.Telepathy.Media.StreamHandler.CreatedLocally"
              c:type="TP_PROP_MEDIA_STREAM_HANDLER_CREATED_LOCALLY">
      <source-position filename="_gen/telepathy-interfaces.h" line="908"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_MEDIA_STREAM_HANDLER_NAT_TRAVERSAL"
              value="org.freedesktop.Telepathy.Media.StreamHandler.NATTraversal"
              c:type="TP_PROP_MEDIA_STREAM_HANDLER_NAT_TRAVERSAL">
      <source-position filename="_gen/telepathy-interfaces.h" line="910"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_MEDIA_STREAM_HANDLER_RELAY_INFO"
              value="org.freedesktop.Telepathy.Media.StreamHandler.RelayInfo"
              c:type="TP_PROP_MEDIA_STREAM_HANDLER_RELAY_INFO">
      <source-position filename="_gen/telepathy-interfaces.h" line="912"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_MEDIA_STREAM_HANDLER_STUN_SERVERS"
              value="org.freedesktop.Telepathy.Media.StreamHandler.STUNServers"
              c:type="TP_PROP_MEDIA_STREAM_HANDLER_STUN_SERVERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="906"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_AUTHENTICATION_TYPES"
              value="org.freedesktop.Telepathy.Protocol.AuthenticationTypes"
              c:type="TP_PROP_PROTOCOL_AUTHENTICATION_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="41"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_CONNECTION_INTERFACES"
              value="org.freedesktop.Telepathy.Protocol.ConnectionInterfaces"
              c:type="TP_PROP_PROTOCOL_CONNECTION_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="31"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_ENGLISH_NAME"
              value="org.freedesktop.Telepathy.Protocol.EnglishName"
              c:type="TP_PROP_PROTOCOL_ENGLISH_NAME">
      <source-position filename="_gen/telepathy-interfaces.h" line="37"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_ICON"
              value="org.freedesktop.Telepathy.Protocol.Icon"
              c:type="TP_PROP_PROTOCOL_ICON">
      <source-position filename="_gen/telepathy-interfaces.h" line="39"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACES"
              value="org.freedesktop.Telepathy.Protocol.Interfaces"
              c:type="TP_PROP_PROTOCOL_INTERFACES">
      <source-position filename="_gen/telepathy-interfaces.h" line="27"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_URI_SCHEMES"
              value="org.freedesktop.Telepathy.Protocol.Interface.Addressing.AddressableURISchemes"
              c:type="TP_PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_URI_SCHEMES">
      <source-position filename="_gen/telepathy-interfaces.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_VCARD_FIELDS"
              value="org.freedesktop.Telepathy.Protocol.Interface.Addressing.AddressableVCardFields"
              c:type="TP_PROP_PROTOCOL_INTERFACE_ADDRESSING_ADDRESSABLE_VCARD_FIELDS">
      <source-position filename="_gen/telepathy-interfaces.h" line="50"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.MaximumAvatarBytes"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_BYTES">
      <source-position filename="_gen/telepathy-interfaces.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.MaximumAvatarHeight"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_HEIGHT">
      <source-position filename="_gen/telepathy-interfaces.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.MaximumAvatarWidth"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_MAXIMUM_AVATAR_WIDTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.MinimumAvatarHeight"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_HEIGHT">
      <source-position filename="_gen/telepathy-interfaces.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.MinimumAvatarWidth"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_MINIMUM_AVATAR_WIDTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.RecommendedAvatarHeight"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_HEIGHT">
      <source-position filename="_gen/telepathy-interfaces.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.RecommendedAvatarWidth"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_RECOMMENDED_AVATAR_WIDTH">
      <source-position filename="_gen/telepathy-interfaces.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES"
              value="org.freedesktop.Telepathy.Protocol.Interface.Avatars.SupportedAvatarMIMETypes"
              c:type="TP_PROP_PROTOCOL_INTERFACE_AVATARS_SUPPORTED_AVATAR_MIME_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_INTERFACE_PRESENCE_STATUSES"
              value="org.freedesktop.Telepathy.Protocol.Interface.Presence.Statuses"
              c:type="TP_PROP_PROTOCOL_INTERFACE_PRESENCE_STATUSES">
      <source-position filename="_gen/telepathy-interfaces.h" line="84"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_PARAMETERS"
              value="org.freedesktop.Telepathy.Protocol.Parameters"
              c:type="TP_PROP_PROTOCOL_PARAMETERS">
      <source-position filename="_gen/telepathy-interfaces.h" line="29"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_REQUESTABLE_CHANNEL_CLASSES"
              value="org.freedesktop.Telepathy.Protocol.RequestableChannelClasses"
              c:type="TP_PROP_PROTOCOL_REQUESTABLE_CHANNEL_CLASSES">
      <source-position filename="_gen/telepathy-interfaces.h" line="33"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="PROP_PROTOCOL_VCARD_FIELD"
              value="org.freedesktop.Telepathy.Protocol.VCardField"
              c:type="TP_PROP_PROTOCOL_VCARD_FIELD">
      <source-position filename="_gen/telepathy-interfaces.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="PROTOCOL"
                    c:identifier="TP_PROTOCOL"
                    introspectable="0">
      <source-position filename="protocol.h" line="56"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROTOCOL_CLASS"
                    c:identifier="TP_PROTOCOL_CLASS"
                    introspectable="0">
      <source-position filename="protocol.h" line="59"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROTOCOL_GET_CLASS"
                    c:identifier="TP_PROTOCOL_GET_CLASS"
                    introspectable="0">
      <source-position filename="protocol.h" line="66"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY" c:identifier="TP_PROXY" introspectable="0">
      <source-position filename="_gen/proxy-introspectable.h" line="146"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_CLASS"
                    c:identifier="TP_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="_gen/proxy-introspectable.h" line="149"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROXY_GET_CLASS"
                    c:identifier="TP_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="_gen/proxy-introspectable.h" line="156"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="PresenceMixin" c:type="TpPresenceMixin">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="281">Structure to be included in the instance structure of objects that
use this mixin. Initialize it with tp_presence_mixin_init().

There are no public fields.</doc>
      <source-position filename="presence-mixin.h" line="146"/>
      <field name="priv" readable="0" private="1">
        <type name="PresenceMixinPrivate" c:type="TpPresenceMixinPrivate*"/>
      </field>
      <function name="emit_one_presence_update"
                c:identifier="tp_presence_mixin_emit_one_presence_update"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="630">Emit the PresenceUpdate signal for a single contact. This method is just a
convenience wrapper around #tp_presence_mixin_emit_presence_update.</doc>
        <source-position filename="presence-mixin.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="632">A connection object with this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="633">The handle of the contact to emit the signal for</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="634">The new status to emit</doc>
            <type name="PresenceStatus" c:type="const TpPresenceStatus*"/>
          </parameter>
        </parameters>
      </function>
      <function name="emit_presence_update"
                c:identifier="tp_presence_mixin_emit_presence_update"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="586">Emit the PresenceUpdate signal for multiple contacts. For emitting
PresenceUpdate for a single contact, there is a convenience wrapper called
#tp_presence_mixin_emit_one_presence_update.</doc>
        <source-position filename="presence-mixin.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="588">A connection object with this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="contact_presences" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="589">A mapping of contact handles to #TpPresenceStatus
 structures with the presence data to emit</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="finalize"
                c:identifier="tp_presence_mixin_finalize"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="520">Free resources held by the presence mixin.</doc>
        <source-position filename="presence-mixin.h" line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="522">An object with this mixin.</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_offset_quark"
                c:identifier="tp_presence_mixin_get_offset_quark"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="398">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
        <source-position filename="presence-mixin.h" line="164"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="403">the quark used for storing mixin offset on a GObject</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="iface_init"
                c:identifier="tp_presence_mixin_iface_init"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1185">Fill in the vtable entries needed to implement the presence interface using
this mixin. This function should usually be called via G_IMPLEMENT_INTERFACE.</doc>
        <source-position filename="presence-mixin.h" line="180"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_iface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1187">A pointer to the #TpSvcConnectionInterfacePresenceClass in an
 object class</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="iface_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1189">Ignored</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="init"
                c:identifier="tp_presence_mixin_init"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="494">Initialize the presence mixin. Should be called from the implementation's
instance init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_presence_mixin_init ((GObject *) self,
                        G_STRUCT_OFFSET (SomeObject, presence_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="presence-mixin.h" line="172"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="496">An instance of the implementation that uses this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="497">The byte offset of the TpPresenceMixin within the object structure</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
        </parameters>
      </function>
      <function name="simple_presence_iface_init"
                c:identifier="tp_presence_mixin_simple_presence_iface_init"
                version="0.7.13"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1501">Fill in the vtable entries needed to implement the simple presence interface
using this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</doc>
        <source-position filename="presence-mixin.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="g_iface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1503">A pointer to the #TpSvcConnectionInterfaceSimplePresenceClass in
an object class</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="iface_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1505">Ignored</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="simple_presence_init_dbus_properties"
                c:identifier="tp_presence_mixin_simple_presence_init_dbus_properties"
                version="0.7.13"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1300">Set up #TpDBusPropertiesMixinClass to use this mixin's implementation of
the SimplePresence interface's properties.

This automatically sets up a list of the supported properties for the
SimplePresence interface.</doc>
        <source-position filename="presence-mixin.h" line="182"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1302">The class of an object with this mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
        </parameters>
      </function>
      <function name="simple_presence_register_with_contacts_mixin"
                c:identifier="tp_presence_mixin_simple_presence_register_with_contacts_mixin"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1567">Register the SimplePresence interface with the Contacts interface to make it
inspectable. The Contacts mixin should be initialized before this function
is called</doc>
        <source-position filename="presence-mixin.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1569">An instance that of the implementation that uses both the Contacts
mixin and this mixin</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="PresenceMixinClass" c:type="TpPresenceMixinClass">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="247">Structure to be included in the class structure of objects that
use this mixin. Initialize it with tp_presence_mixin_class_init().

If the protocol imposes a limit on the length of status messages, one should
implement @get_maximum_status_message_length. If this callback is not
implemented, it is assumed that there is no limit. The callback function
should be set after calling tp_presence_mixin_class_init(), like so:

|[
TpPresenceMixinClass *mixin_class;

tp_presence_mixin_class_init ((GObjectClass *) klass,
    G_STRUCT_OFFSET (SomeObjectClass, presence_mixin));
mixin_class = TP_PRESENCE_MIXIN_CLASS (klass);
mixin_class-&gt;get_maximum_status_message_length =
    some_object_get_maximum_status_message_length;
]|

All other fields should be considered read-only.</doc>
      <source-position filename="presence-mixin.h" line="141"/>
      <field name="status_available" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="249">The status-available function that was passed to
 tp_presence_mixin_class_init()</doc>
        <type name="PresenceMixinStatusAvailableFunc"
              c:type="TpPresenceMixinStatusAvailableFunc"/>
      </field>
      <field name="get_contact_statuses" introspectable="0" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="251">The get-contact-statuses function that was passed to
 tp_presence_mixin_class_init()</doc>
        <type name="PresenceMixinGetContactStatusesFunc"
              c:type="TpPresenceMixinGetContactStatusesFunc"/>
      </field>
      <field name="set_own_status" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="253">The set-own-status function that was passed to
 tp_presence_mixin_class_init()</doc>
        <type name="PresenceMixinSetOwnStatusFunc"
              c:type="TpPresenceMixinSetOwnStatusFunc"/>
      </field>
      <field name="statuses" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="255">The presence statuses array that was passed to
 tp_presence_mixin_class_init()</doc>
        <type name="PresenceStatusSpec" c:type="const TpPresenceStatusSpec*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PresenceMixinClassPrivate"
              c:type="TpPresenceMixinClassPrivate*"/>
      </field>
      <field name="get_maximum_status_message_length" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="257">The callback used to discover the
 the limit for status messages length, if any. Since: 0.14.5</doc>
        <type name="PresenceMixinGetMaximumStatusMessageLengthFunc"
              c:type="TpPresenceMixinGetMaximumStatusMessageLengthFunc"/>
      </field>
      <field name="_future1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future3" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <function name="get_offset_quark"
                c:identifier="tp_presence_mixin_class_get_offset_quark"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="382">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
        <source-position filename="presence-mixin.h" line="163"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="387">the quark used for storing mixin offset on a GObjectClass</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init"
                c:identifier="tp_presence_mixin_class_init"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="414">Initialize the presence mixin. Should be called from the implementation's
class_init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_presence_mixin_class_init ((GObjectClass *) klass,
                              G_STRUCT_OFFSET (SomeObjectClass,
                                               presence_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
        <source-position filename="presence-mixin.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="obj_cls" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="416">The class of the implementation that uses this mixin</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="417">The byte offset of the TpPresenceMixinClass within the class
structure</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="status_available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="419">A callback to be used to determine if a given presence
 status can be set on a particular connection. Should usually be %NULL, to
 consider all statuses with #TpPresenceStatusSpec.self set to %TRUE to be
 settable.</doc>
            <type name="PresenceMixinStatusAvailableFunc"
                  c:type="TpPresenceMixinStatusAvailableFunc"/>
          </parameter>
          <parameter name="get_contact_statuses" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="423">A callback to be used get the current presence status
 for contacts. This is used in implementations of various D-Bus methods and
 hence must be provided.</doc>
            <type name="PresenceMixinGetContactStatusesFunc"
                  c:type="TpPresenceMixinGetContactStatusesFunc"/>
          </parameter>
          <parameter name="set_own_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="426">A callback to be used to commit changes to the user's own
 presence status to the server. This is used in implementations of various
 D-Bus methods and hence must be provided.</doc>
            <type name="PresenceMixinSetOwnStatusFunc"
                  c:type="TpPresenceMixinSetOwnStatusFunc"/>
          </parameter>
          <parameter name="statuses" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="429">An array of #TpPresenceStatusSpec structures representing all
 presence statuses supported by the protocol, terminated by a NULL name.</doc>
            <type name="PresenceStatusSpec"
                  c:type="const TpPresenceStatusSpec*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="PresenceMixinClassPrivate"
            c:type="TpPresenceMixinClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="presence-mixin.h" line="120"/>
    </record>
    <callback name="PresenceMixinGetContactStatusesFunc"
              c:type="TpPresenceMixinGetContactStatusesFunc"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="191">Signature of the callback used to get the stored presence status of
contacts. The returned hash table should have contact handles mapped to
their respective presence statuses in #TpPresenceStatus structs.

The returned hash table will be freed with g_hash_table_unref. The
callback is responsible for ensuring that this does any cleanup that
may be necessary.</doc>
      <source-position filename="presence-mixin.h" line="110"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="205">The contact presence on success, %NULL with
 error set on error</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="193">An object with this mixin.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="194">An array of #TpHandle for the contacts to get presence status for</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </callback>
    <callback name="PresenceMixinGetMaximumStatusMessageLengthFunc"
              c:type="TpPresenceMixinGetMaximumStatusMessageLengthFunc"
              version="0.14.5">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="233">Signature of a callback used to determine the maximum length of status
messages. If this callback is provided and returns non-zero, the
#TpPresenceMixinSetOwnStatusFunc implementation is responsible for
truncating the message to fit this limit, if necessary.</doc>
      <source-position filename="presence-mixin.h" line="116"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="242">the maximum number of UTF-8 characters which may appear in a status
message, or 0 if there is no limit.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="235">An object with this mixin.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PresenceMixinPrivate"
            c:type="TpPresenceMixinPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="presence-mixin.h" line="122"/>
    </record>
    <callback name="PresenceMixinSetOwnStatusFunc"
              c:type="TpPresenceMixinSetOwnStatusFunc"
              throws="1">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="209">Signature of the callback used to commit changes to the user's own presence
status in SetStatuses. It is also used in ClearStatus and RemoveStatus to
reset the user's own status back to the "default" one with a %NULL status
argument.

The optional_arguments hash table in @status, if not NULL, will have been
filtered so it only contains recognised parameters, so the callback
need not (and cannot) check for unrecognised parameters. However, the
types of the parameters are not currently checked, so the callback is
responsible for doing so.

The callback is responsible for emitting PresenceUpdate, if appropriate,
by calling tp_presence_mixin_emit_presence_update().</doc>
      <source-position filename="presence-mixin.h" line="113"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="230">%TRUE if the operation was successful, %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="211">An object with this mixin.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="212">The status to set, or NULL for whatever the protocol defines as a
 "default" status</doc>
          <type name="PresenceStatus" c:type="const TpPresenceStatus*"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="PresenceMixinStatusAvailableFunc"
              c:type="TpPresenceMixinStatusAvailableFunc">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="166">Signature of a callback to be used to determine if a given presence
status can be set on the connection. Most users of this mixin do not need to
supply an implementation of this callback: the value of
#TpPresenceStatusSpec.self is enough to determine whether this is a
user-settable presence, so %NULL should be passed to
tp_presence_mixin_class_init() for this callback.

One place where this callback may be needed is on XMPP: not all server
implementation support the user becoming invisible. So an XMPP
implementation would implement this function, so that—once connected—the
hidden status is only available if the server supports it. Before the
connection is connected, this callback should return %TRUE for every status
that might possibly be supported: this allows the user to at least try to
sign in as invisible.</doc>
      <source-position filename="presence-mixin.h" line="107"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="188">%TRUE if the status can be set on this connection; %FALSE if not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="168">An instance of a #TpBaseConnection subclass implementing the presence
 interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="which" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="170">An index into the array of #TpPresenceStatusSpec provided to
 tp_presence_mixin_class_init()</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </callback>
    <record name="PresenceStatus" c:type="TpPresenceStatus">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="146">Structure representing a presence status.

In addition to the fields documented here, there are two gpointer fields
which must currently be %NULL. A meaning may be defined for these in a
future version of telepathy-glib.

In modern Telepathy connection managers, the only optional
argument should be a %G_TYPE_STRING named "message", on statuses
that have an optional human-readable message. All other optional arguments
are deprecated.</doc>
      <source-position filename="presence-mixin.h" line="101"/>
      <field name="index" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="148">Index of the presence status in the provided supported presence
 statuses array</doc>
        <type name="guint" c:type="guint"/>
      </field>
      <field name="optional_arguments" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="150">A GHashTable mapping of string identifiers to GValues
 of the optional status arguments, if any. If there are no optional
 arguments, this pointer may be NULL.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <field name="_future1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <method name="free"
              c:identifier="tp_presence_status_free"
              introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="363">Deallocate all resources associated with a presence status structure.</doc>
        <source-position filename="presence-mixin.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="365">A pointer to the presence status structure to free.</doc>
            <type name="PresenceStatus" c:type="TpPresenceStatus*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="tp_presence_status_new"
                introspectable="0">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="332">Construct a presence status structure. You should free the returned
structure with #tp_presence_status_free.

In modern Telepathy connection managers, the only optional
argument should be a %G_TYPE_STRING named "message", on statuses
that have an optional human-readable message. All other optional arguments
are deprecated.</doc>
        <source-position filename="presence-mixin.h" line="103"/>
        <return-value>
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="348">A pointer to the newly allocated presence status structure.</doc>
          <type name="PresenceStatus" c:type="TpPresenceStatus*"/>
        </return-value>
        <parameters>
          <parameter name="which" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="334">Index of the presence status in the provided supported presence
 statuses array</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="optional_arguments" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="336">Optional arguments for the presence statuses. Can be
 NULL if there are no optional arguments. The presence status object makes a
 copy of the hashtable, so you should free the original.</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </function>
    </record>
    <record name="PresenceStatusOptionalArgumentSpec"
            c:type="TpPresenceStatusOptionalArgumentSpec">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="114">Structure specifying a supported optional argument for a presence status.

In addition to the fields documented here, there are two gpointer fields
which must currently be %NULL. A meaning may be defined for these in a
future version of telepathy-glib.</doc>
      <source-position filename="presence-mixin.h" line="47"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="116">Name of the argument as passed over D-Bus</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="dtype" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="117">D-Bus type signature of the argument</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="_future1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="_future2" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="PresenceStatusSpec"
            c:type="TpPresenceStatusSpec"
            glib:type-name="TpPresenceStatusSpec"
            glib:get-type="tp_presence_status_spec_get_type"
            c:symbol-prefix="presence_status_spec">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="126">Structure specifying a supported presence status.

In addition to the fields documented here, there are two gpointer fields
which must currently be %NULL. A meaning may be defined for these in a
future version of telepathy-glib.</doc>
      <source-position filename="presence-mixin.h" line="58"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="128">String identifier of the presence status</doc>
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="presence_type" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="129">A type value, as specified by #TpConnectionPresenceType</doc>
        <type name="ConnectionPresenceType" c:type="TpConnectionPresenceType"/>
      </field>
      <field name="self" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="130">Indicates if this status may be set on yourself</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="optional_arguments" writable="1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="131">An array of #TpPresenceStatusOptionalArgumentSpec
 structures representing the optional arguments for this status, terminated
 by a NULL name. If there are no optional arguments for a status, this can
 be NULL. In modern Telepathy connection managers, the only optional
 argument should be a string (type "s") named "message" on statuses
 that have an optional human-readable message. All other optional arguments
 are deprecated.</doc>
        <type name="PresenceStatusOptionalArgumentSpec"
              c:type="const TpPresenceStatusOptionalArgumentSpec*"/>
      </field>
      <field name="_future1" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="PresenceStatusSpecPrivate"
              c:type="TpPresenceStatusSpecPrivate*"/>
      </field>
      <constructor name="new"
                   c:identifier="tp_presence_status_spec_new"
                   version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1677">&lt;!-- --&gt;</doc>
        <source-position filename="presence-mixin.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1688">a new #TpPresenceStatusSpec</doc>
          <type name="PresenceStatusSpec" c:type="TpPresenceStatusSpec*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1679">the name of the new presence status</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1680">the category into which this presence status falls</doc>
            <type name="ConnectionPresenceType"
                  c:type="TpConnectionPresenceType"/>
          </parameter>
          <parameter name="can_set_on_self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1681">%TRUE if the user can set this presence status
 on themselves</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="has_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1683">%TRUE if this presence status is accompanied by an
 optional human-readable message</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="can_set_on_self"
              c:identifier="tp_presence_status_spec_can_set_on_self"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1628">&lt;!-- --&gt;</doc>
        <source-position filename="presence-mixin.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1634">%TRUE if the user can set this presence status on themselves (most
 statuses), or %FALSE if they cannot directly set it on
 themselves (typically used for %TP_CONNECTION_PRESENCE_TYPE_OFFLINE
 and %TP_CONNECTION_PRESENCE_TYPE_ERROR)</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1630">a presence status specification</doc>
            <type name="PresenceStatusSpec"
                  c:type="const TpPresenceStatusSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="tp_presence_status_spec_copy"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1724">Copy a presence status specification.

If @self has optional arguments other than a string named "message",
they are not copied. Optional arguments with other names or types
are deprecated.</doc>
        <source-position filename="presence-mixin.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1734">a new #TpPresenceStatusSpec resembling @self</doc>
          <type name="PresenceStatusSpec" c:type="TpPresenceStatusSpec*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1726">a presence status specification</doc>
            <type name="PresenceStatusSpec"
                  c:type="const TpPresenceStatusSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="tp_presence_status_spec_free"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1746">Free a presence status specification produced by
tp_presence_status_spec_new() or tp_presence_status_spec_copy().</doc>
        <source-position filename="presence-mixin.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1748">a presence status specification</doc>
            <type name="PresenceStatusSpec" c:type="TpPresenceStatusSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_presence_status_spec_get_name"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1610">&lt;!-- --&gt;</doc>
        <source-position filename="presence-mixin.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1616">the name of this presence status,
 such as "available" or "out-to-lunch".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1612">a presence status specification</doc>
            <type name="PresenceStatusSpec"
                  c:type="const TpPresenceStatusSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presence_type"
              c:identifier="tp_presence_status_spec_get_presence_type"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1591">Return the category into which this presence type falls. For instance,
for XMPP's "" (do not disturb) status, this would return
%TP_CONNECTION_PRESENCE_TYPE_BUSY.</doc>
        <source-position filename="presence-mixin.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1599">a #TpConnectionPresenceType</doc>
          <type name="ConnectionPresenceType"
                c:type="TpConnectionPresenceType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1593">a presence status specification</doc>
            <type name="PresenceStatusSpec"
                  c:type="const TpPresenceStatusSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_message"
              c:identifier="tp_presence_status_spec_has_message"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="1648">&lt;!-- --&gt;</doc>
        <source-position filename="presence-mixin.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1654">%TRUE if this presence status is accompanied by an optional
 human-readable message</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="presence-mixin.c"
                 line="1650">a presence status specification</doc>
            <type name="PresenceStatusSpec"
                  c:type="const TpPresenceStatusSpec*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="PresenceStatusSpecPrivate"
            c:type="TpPresenceStatusSpecPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="presence-mixin.h" line="38"/>
    </record>
    <bitfield name="PropertyFlags" c:type="TpPropertyFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1140">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="571"/>
      <member name="read" value="1" c:identifier="TP_PROPERTY_FLAG_READ">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1142">&lt;![CDATA[The property can be read]]&gt;</doc>
      </member>
      <member name="write" value="2" c:identifier="TP_PROPERTY_FLAG_WRITE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1143">&lt;![CDATA[The property can be written]]&gt;</doc>
      </member>
    </bitfield>
    <class name="Protocol"
           c:symbol-prefix="protocol"
           c:type="TpProtocol"
           version="0.11.11"
           parent="Proxy"
           glib:type-name="TpProtocol"
           glib:get-type="tp_protocol_get_type"
           glib:type-struct="ProtocolClass">
      <doc xml:space="preserve"
           filename="protocol.c"
           line="60">A base class for connection managers' protocols.</doc>
      <source-position filename="protocol.h" line="49"/>
      <constructor name="new"
                   c:identifier="tp_protocol_new"
                   version="0.11.11"
                   throws="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="963">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="973">a new protocol proxy, or %NULL on invalid arguments</doc>
          <type name="Protocol" c:type="TpProtocol*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="965">proxy for the D-Bus daemon; may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="cm_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="966">the connection manager name (such as "gabble")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="protocol_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="967">the protocol name (such as "jabber")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="968">the immutable D-Bus properties for this protocol</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_vardict"
                   c:identifier="tp_protocol_new_vardict"
                   version="0.23.3"
                   throws="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1017">Create a new protocol proxy.

If @immutable_properties is a floating reference, this function will
take ownership of it, much like g_variant_ref_sink(). See documentation of
that function for details.</doc>
        <source-position filename="protocol.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1031">a new protocol proxy, or %NULL on invalid arguments</doc>
          <type name="Protocol" c:type="TpProtocol*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1019">proxy for the D-Bus daemon; may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="cm_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1020">the connection manager name (such as "gabble")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="protocol_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1021">the protocol name (such as "jabber")</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1022">the immutable D-Bus properties for this protocol</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_core"
                c:identifier="tp_protocol_get_feature_quark_core">
        <source-position filename="protocol.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_parameters"
                c:identifier="tp_protocol_get_feature_quark_parameters">
        <source-position filename="protocol.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_protocol_init_known_interfaces"
                version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1056">Ensure that the known interfaces for TpProtocol have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_PROTOCOL.</doc>
        <source-position filename="protocol.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="borrow_params"
              c:identifier="tp_protocol_borrow_params"
              version="0.17.6"
              introspectable="0"
              deprecated="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1215">Returns an array of parameters supported by this connection manager,
without additional memory allocations. The returned array is owned by
@self, and must not be used after @self has been freed.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use tp_protocol_dup_params()
 instead.</doc-deprecated>
        <source-position filename="protocol.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1223">an array of #TpConnectionManagerParam structures,
 terminated by one whose @name is %NULL</doc>
          <type name="ConnectionManagerParam"
                c:type="const TpConnectionManagerParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1217">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_register"
              c:identifier="tp_protocol_can_register"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1174">Return whether a new account can be registered on this protocol, by setting
the special "register" parameter to %TRUE.</doc>
        <source-position filename="protocol.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1181">%TRUE if @protocol supports the parameter "register"</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1176">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_immutable_properties"
              c:identifier="tp_protocol_dup_immutable_properties"
              version="0.23.3">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2419">Return the #TpProtocol:protocol-properties-vardict property.</doc>
        <source-position filename="protocol.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2425">the value of
#TpProtocol:protocol-properties-vardict</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2421">a #TpProtocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_param"
              c:identifier="tp_protocol_dup_param"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1153">&lt;!-- no more to say --&gt;</doc>
        <source-position filename="protocol.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1160">a structure representing the parameter @param,
 or %NULL if not supported. Free with tp_connection_manager_param_free()</doc>
          <type name="ConnectionManagerParam"
                c:type="TpConnectionManagerParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1155">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1156">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_param_names"
              c:identifier="tp_protocol_dup_param_names"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1191">Returns a list of parameter names supported by this connection manager
for this protocol.

The result is copied and must be freed by the caller with g_strfreev().</doc>
        <source-position filename="protocol.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1200">a copy of
 #TpProtocol:param-names</doc>
          <array c:type="GStrv">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1193">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_params"
              c:identifier="tp_protocol_dup_params"
              version="0.17.6">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1238">Returns a list of parameters supported by this connection manager.

The returned list must be freed by the caller, for instance with
&lt;literal&gt;g_list_free_full (l,
(GDestroyNotify) tp_connection_manager_param_free)&lt;/literal&gt;.</doc>
        <source-position filename="protocol.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1248">
 a list of #TpConnectionManagerParam structures, owned by the caller</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConnectionManagerParam"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1240">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_presence_statuses"
              c:identifier="tp_protocol_dup_presence_statuses">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2373">Return the presence statuses that might be supported by connections
to this protocol.

It is possible that some of these statuses will not actually be supported
by a connection: for instance, an XMPP connection manager would
include "hidden" in this list, even though not all XMPP servers allow
users to be online-but-hidden.</doc>
        <source-position filename="protocol.h" line="137"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2385">a
 list of statuses, or %NULL if unknown</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="PresenceStatusSpec"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2375">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_addressable_uri_schemes"
              c:identifier="tp_protocol_get_addressable_uri_schemes"
              glib:get-property="addressable-uri-schemes"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2357">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2363">the value of #TpProtocol:addressable-uri-schemes</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2359">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_addressable_vcard_fields"
              c:identifier="tp_protocol_get_addressable_vcard_fields"
              glib:get-property="addressable-vcard-fields"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2341">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2347">the value of #TpProtocol:addressable-vcard-fields</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2343">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_authentication_types"
              c:identifier="tp_protocol_get_authentication_types"
              glib:get-property="authentication-types"
              version="0.13.9">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1322">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1329">the value of #TpProtocol:authentication-types</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1324">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_avatar_requirements"
              c:identifier="tp_protocol_get_avatar_requirements"
              glib:get-property="avatar-requirements"
              version="0.15.6">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2038">Return the #TpProtocol:avatar-requirements property</doc>
        <source-position filename="protocol.h" line="150"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2044">the value of #TpProtocol:avatar-requirements</doc>
          <type name="AvatarRequirements" c:type="TpAvatarRequirements*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2040">a #TpProtocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="tp_protocol_get_capabilities"
              glib:get-property="capabilities"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1340">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1346">#TpProtocol:capabilities, which must be referenced
 (if non-%NULL) if it will be kept</doc>
          <type name="Capabilities" c:type="TpCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1342">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cm_name"
              c:identifier="tp_protocol_get_cm_name"
              glib:get-property="cm-name"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2056">Return the #TpProtocol:cm-name property.</doc>
        <source-position filename="protocol.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2062">the value of #TpProtocol:cm-name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2058">a #TpProtocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_english_name"
              c:identifier="tp_protocol_get_english_name"
              glib:get-property="english-name"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1288">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="145"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1294">the non-%NULL, non-empty value of #TpProtocol:english-name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1290">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="tp_protocol_get_icon_name"
              glib:get-property="icon-name"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1305">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1311">the non-%NULL, non-empty value of #TpProtocol:icon-name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1307">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_protocol_get_name"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1094">Return the same thing as the protocol-name property, for convenient use
in C code. The returned string is valid for as long as @self exists.</doc>
        <source-position filename="protocol.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1101">the value of the #TpProtocol:protocol-name property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1096">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_param"
              c:identifier="tp_protocol_get_param"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1130">&lt;!-- no more to say --&gt;</doc>
        <source-position filename="protocol.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1137">a structure representing the parameter @param, or %NULL if not
         supported</doc>
          <type name="ConnectionManagerParam"
                c:type="const TpConnectionManagerParam*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1132">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1133">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_vcard_field"
              c:identifier="tp_protocol_get_vcard_field"
              glib:get-property="vcard-field"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1271">&lt;!-- --&gt;</doc>
        <source-position filename="protocol.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1277">the value of #TpProtocol:vcard-field</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1273">a protocol object</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_param"
              c:identifier="tp_protocol_has_param"
              version="0.11.11">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="1112">&lt;!-- no more to say --&gt;</doc>
        <source-position filename="protocol.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="1119">%TRUE if @self supports the parameter @param.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1114">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="1115">a parameter name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="identify_account_async"
              c:identifier="tp_protocol_identify_account_async"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2151">Return a string that could identify the account with the given
parameters. In most protocols that string is a normalized 'account'
parameter, but some protocols have more complex requirements;
for instance, on IRC, the 'account' (nickname) is insufficient,
and must be combined with a server or network name.</doc>
        <source-position filename="protocol.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2153">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="vardict" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2154">the account parameters as a #GVariant of
 type %G_VARIANT_TYPE_VARDICT. If it is floating, ownership will
 be taken, as if via g_variant_ref_sink().</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2157">may be used to cancel the async request</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2158">a callback to call when
 the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2160">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="identify_account_finish"
              c:identifier="tp_protocol_identify_account_finish"
              version="0.23.1"
              throws="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2196">Interpret the result of tp_protocol_identify_account_async().</doc>
        <source-position filename="protocol.h" line="172"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2204">a string identifying the account,
 or %NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2198">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2199">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_contact_async"
              c:identifier="tp_protocol_normalize_contact_async"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2091">Perform best-effort offline contact normalization. This does syntactic
normalization (e.g. transforming case-insensitive text to lower-case),
but does not query servers or anything similar.</doc>
        <source-position filename="protocol.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2093">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2094">a contact identifier, possibly invalid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2095">may be used to cancel the async request</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2096">a callback to call when
 the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2098">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_contact_finish"
              c:identifier="tp_protocol_normalize_contact_finish"
              version="0.23.1"
              throws="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2127">Interpret the result of tp_protocol_normalize_contact_async().</doc>
        <source-position filename="protocol.h" line="160"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2135">the normalized form of @contact,
 or %NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2129">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2130">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_contact_uri_async"
              c:identifier="tp_protocol_normalize_contact_uri_async"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2220">Perform best-effort offline contact normalization, for a contact in
the form of a URI. This method will fail if the URI is not in a
scheme supported by this protocol or connection manager.</doc>
        <source-position filename="protocol.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2222">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2223">a contact URI, possibly invalid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2224">may be used to cancel the async request</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2225">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2226">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_contact_uri_finish"
              c:identifier="tp_protocol_normalize_contact_uri_finish"
              version="0.23.1"
              throws="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2255">Interpret the result of tp_protocol_normalize_contact_uri_async().</doc>
        <source-position filename="protocol.h" line="184"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2263">the normalized form of @uri,
 or %NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2257">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2258">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_vcard_address_async"
              c:identifier="tp_protocol_normalize_vcard_address_async"
              version="0.23.1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2279">Perform best-effort offline contact normalization, for a contact in
the form of a vCard field. This method will fail if the vCard field
is not supported by this protocol or connection manager.</doc>
        <source-position filename="protocol.h" line="189"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2281">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="field" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2282">a vCard field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2283">an address that is a value of @field</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2284">may be used to cancel the async request</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2285">a callback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2286">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="normalize_vcard_address_finish"
              c:identifier="tp_protocol_normalize_vcard_address_finish"
              version="0.23.1"
              throws="1">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="2317">Interpret the result of tp_protocol_normalize_vcard_address_async().</doc>
        <source-position filename="protocol.h" line="197"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="protocol.c"
               line="2325">the normalized form of @value,
 or %NULL on error</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2319">a protocol</doc>
            <type name="Protocol" c:type="TpProtocol*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="protocol.c"
                 line="2320">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="addressable-uri-schemes"
                version="0.23.1"
                transfer-ownership="none"
                getter="get_addressable_uri_schemes">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="930">A non-%NULL #GStrv of URI schemes supported by this protocol.
If this protocol does not support addressing contacts by URI,
the list is empty.

For instance, a SIP connection manager that supports calling contacts
by SIP URI (sip:alice&amp;commat;example.com, sips:bob&amp;commat;example.com)
or telephone number (tel:+1-555-0123) might have
{ "sip", "sips", "tel", NULL }.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="addressable-vcard-fields"
                version="0.23.1"
                transfer-ownership="none"
                getter="get_addressable_vcard_fields">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="911">A non-%NULL #GStrv of vCard fields supported by this protocol.
If this protocol does not support addressing contacts by a vCard field,
the list is empty.

For instance, a SIP connection manager that supports calling contacts
by SIP URI (vCard field SIP) or telephone number (vCard field TEL)
might have { "sip", "tel", NULL }.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="authentication-types"
                version="0.13.9"
                transfer-ownership="none"
                getter="get_authentication_types">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="866">A non-%NULL #GStrv of interfaces which provide information as to
what kind of authentication channels can possibly appear before
the connection reaches the CONNECTED state, or %NULL if
%TP_PROTOCOL_FEATURE_CORE has not been prepared.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="avatar-requirements"
                version="0.15.6"
                transfer-ownership="none"
                getter="get_avatar_requirements">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="882">A #TpAvatarRequirements representing the avatar requirements on this
protocol, or %NULL if %TP_PROTOCOL_FEATURE_CORE has not been prepared or
if the protocol doesn't support avatars.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="capabilities"
                version="0.11.11"
                transfer-ownership="none"
                getter="get_capabilities">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="836">The classes of channel that can be requested from connections to this
protocol, or %NULL if this is unknown or the %TP_PROTOCOL_FEATURE_CORE
feature has not been prepared.</doc>
        <type name="Capabilities"/>
      </property>
      <property name="cm-name"
                version="0.19.1"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_cm_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="897">The name of the connection manager this protocol is on.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="english-name"
                version="0.11.11"
                transfer-ownership="none"
                getter="get_english_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="782">The name of the protocol in a form suitable for display to users,
such as "AIM" or "Yahoo!", or a string based on #TpProtocol:protocol-name
(currently constructed by putting the first character in title case,
but this is not guaranteed) if no better name is available or the
%TP_PROTOCOL_FEATURE_CORE feature has not been prepared.

This is effectively in the C locale (international English); user
interfaces requiring a localized protocol name should look one up in their
own message catalog based on either #TpProtocol:protocol-name or
#TpProtocol:english-name, but should use this English version as a
fallback if no translated version can be found.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="icon-name"
                version="0.11.11"
                transfer-ownership="none"
                getter="get_icon_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="820">The name of an icon in the system's icon theme. If none was supplied
by the Protocol, or the %TP_PROTOCOL_FEATURE_CORE feature has not been
prepared, a default is used; currently, this is "im-" plus
#TpProtocol:protocol-name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="param-names" version="0.11.11" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="851">A list of parameter names supported by this connection manager
for this protocol, or %NULL if %TP_PROTOCOL_FEATURE_PARAMETERS has not
been prepared.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="protocol-name"
                version="0.11.11"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="725">The machine-readable name of the protocol, taken from the Telepathy
D-Bus Interface Specification, such as "jabber" or "local-xmpp".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="protocol-properties"
                version="0.11.11"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="740">The immutable properties of this Protocol, as provided at construction
time. This is a map from string to #GValue, which must not be modified.

If the immutable properties were not provided at construction time,
the %TP_PROTOCOL_FEATURE_PARAMETERS and %TP_PROTOCOL_FEATURE_CORE features
will both be unavailable, and this #TpProtocol object will only be useful
as a way to access lower-level D-Bus calls.</doc>
        <type/>
      </property>
      <property name="protocol-properties-vardict"
                version="0.23.3"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="760">The immutable properties of this Protocol, as provided at construction
time. This is a #G_VARIANT_TYPE_VARDICT #GVariant,
which must not be modified.

If the immutable properties were not provided at construction time,
the %TP_PROTOCOL_FEATURE_PARAMETERS and %TP_PROTOCOL_FEATURE_CORE features
will both be unavailable, and this #TpProtocol object will only be useful
as a way to access lower-level D-Bus calls.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="vcard-field"
                version="0.11.11"
                transfer-ownership="none"
                getter="get_vcard_field"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="protocol.c"
             line="805">The most common vCard field used for this protocol's contact
identifiers, normalized to lower case, or %NULL if there is no such field
or the %TP_PROTOCOL_FEATURE_CORE feature has not been prepared.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProtocolPrivate" c:type="TpProtocolPrivate*"/>
      </field>
    </class>
    <record name="ProtocolClass"
            c:type="TpProtocolClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="Protocol"
            version="0.11.11">
      <doc xml:space="preserve"
           filename="protocol.c"
           line="68">The class of a #TpProtocol.</doc>
      <source-position filename="protocol.h" line="49"/>
    </record>
    <record name="ProtocolClassPrivate"
            c:type="TpProtocolClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="protocol.h" line="51"/>
    </record>
    <record name="ProtocolPrivate"
            c:type="TpProtocolPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="protocol.h" line="50"/>
    </record>
    <class name="Proxy"
           c:symbol-prefix="proxy"
           c:type="TpProxy"
           version="0.7.1"
           parent="GObject.Object"
           glib:type-name="TpProxy"
           glib:get-type="tp_proxy_get_type"
           glib:type-struct="ProxyClass">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="189">Structure representing a Telepathy client-side proxy.</doc>
      <source-position filename="_gen/proxy-introspectable.h" line="132"/>
      <method name="dbus_error_to_gerror"
              c:identifier="tp_proxy_dbus_error_to_gerror"
              version="0.7.24"
              throws="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="782">Convert a D-Bus error name into a GError as if it was returned by a method
on this proxy. This method is useful when D-Bus error names are emitted in
signals, such as Connection.ConnectionError and
Group.MembersChangedDetailed.</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="784">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
          <parameter name="dbus_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="785">a D-Bus error name, for instance from the callback for
             tp_cli_connection_connect_to_connection_error()</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="debug_message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="787">a debug message that accompanied the error name, or %NULL</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_bus_name"
              c:identifier="tp_proxy_get_bus_name"
              glib:get-property="bus-name"
              version="0.7.17">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1520">&lt;!-- --&gt;</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1526">the bus name of the application exporting the object. The caller
 must copy the string with g_strdup() if it will be kept.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1522">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dbus_connection"
              c:identifier="tp_proxy_get_dbus_connection"
              version="0.7.17"
              introspectable="0">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1500">&lt;!-- --&gt;</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="169"/>
        <return-value>
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1506">a borrowed reference to the D-Bus connection used by this object.
 The caller must reference the returned pointer with
 dbus_g_connection_ref() if it will be kept.</doc>
          <type c:type="DBusGConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1502">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dbus_daemon"
              c:identifier="tp_proxy_get_dbus_daemon"
              glib:get-property="dbus-daemon"
              version="0.7.17">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1479">&lt;!-- --&gt;</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1485">a borrowed reference to the #TpDBusDaemon for
 this object, if any; always %NULL if this object is itself a
 #TpDBusDaemon. The caller must reference the returned object with
 g_object_ref() if it will be kept.</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1481">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_factory"
              c:identifier="tp_proxy_get_factory"
              glib:get-property="factory"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1437">&lt;!-- --&gt;</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1443">the same value as #TpProxy:factory property</doc>
          <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1439">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_invalidated"
              c:identifier="tp_proxy_get_invalidated"
              version="0.7.17">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1558">&lt;!-- --&gt;</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1564">the reason this proxy was invalidated, or %NULL if has not been
 invalidated. The caller must copy the error, for instance with
 g_error_copy(), if it will be kept.</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1560">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="tp_proxy_get_object_path"
              glib:get-property="object-path"
              version="0.7.17">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1539">&lt;!-- --&gt;</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1545">the object path of the remote object. The caller must copy the
 string with g_strdup() if it will be kept.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1541">a #TpProxy or subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_interface"
              c:identifier="tp_proxy_has_interface"
              version="0.7.1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="554">Return whether this proxy is known to have a particular interface. In
versions older than 0.11.11, this was a macro wrapper around
tp_proxy_has_interface_by_id().

For objects that discover their interfaces at runtime, this method will
indicate that interfaces are missing until they are known to be present.
In subclasses that define features for use with tp_proxy_prepare_async(),
successfully preparing the "core" feature for that subclass (such as
%TP_CHANNEL_FEATURE_CORE or %TP_CONNECTION_FEATURE_CORE) implies that the
interfaces are known.</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="570">%TRUE if this proxy implements the given interface.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="556">the #TpProxy (or subclass)</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
          <parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="557">the D-Bus interface required, as a string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_interface_by_id"
              c:identifier="tp_proxy_has_interface_by_id"
              version="0.7.1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="529">Return whether this proxy is known to have a particular interface, by its
quark ID. This is equivalent to using g_quark_to_string() followed by
tp_proxy_has_interface(), but more efficient.</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="161"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="538">%TRUE if this proxy implements the given interface.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="531">the #TpProxy (or subclass)</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
          <parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="532">quark representing the D-Bus interface required</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_prepared"
              c:identifier="tp_proxy_is_prepared"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1693">Return %TRUE if @feature has been prepared successfully, or %FALSE if
@feature has not been requested, has not been prepared yet, or is not
available on this object at all.

(For instance, if @feature is %TP_CHANNEL_FEATURE_CHAT_STATES and @self
is a #TpChannel in a protocol that doesn't actually implement chat states,
or is not a #TpChannel at all, then this method will return %FALSE.)

To prepare features, call tp_proxy_prepare_async().</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="1708">%TRUE if @feature has been prepared successfully</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1695">an instance of a #TpProxy subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1696">a feature that is supported by @self's class</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_async"
              c:identifier="tp_proxy_prepare_async"
              version="0.11.3">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1885">#TpProxy itself does not support any features, but subclasses like
#TpChannel can support features, which can either be core functionality like
%TP_CHANNEL_FEATURE_CORE, or extended functionality like
%TP_CHANNEL_FEATURE_CHAT_STATES.

Proxy instances start with no features prepared. When features are
requested via tp_proxy_prepare_async(), the proxy starts to do the
necessary setup to use those features.

tp_proxy_prepare_async() always waits for core functionality of the proxy's
class to be prepared, even if it is not specifically requested: for
instance, because %TP_CHANNEL_FEATURE_CORE is core functionality of a
#TpChannel,

|[
TpChannel *channel = ...;

tp_proxy_prepare_async (channel, NULL, callback, user_data);
]|

is equivalent to

|[
TpChannel *channel = ...;
GQuark features[] = { TP_CHANNEL_FEATURE_CORE, 0 };

tp_proxy_prepare_async (channel, features, callback, user_data);
]|

If a feature represents core functionality (like %TP_CHANNEL_FEATURE_CORE),
failure to prepare it will result in tp_proxy_prepare_async() finishing
unsuccessfully: if failure to prepare the feature indicates that the proxy
is no longer useful, it will also emit #TpProxy::invalidated.

If a feature represents non-essential functionality
(like %TP_CHANNEL_FEATURE_CHAT_STATES), or is not supported by the object
at all, then failure to prepare it is not fatal:
tp_proxy_prepare_async() will complete successfully, but
tp_proxy_is_prepared() will still return %FALSE for the feature, and
accessor methods for the feature will typically return a dummy value.

Some #TpProxy subclasses automatically start to prepare their core
features when instantiated, and features will sometimes become prepared as
a side-effect of other actions, but to ensure that a feature is present you
must generally call tp_proxy_prepare_async() and wait for the result.</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="181"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1887">an instance of a #TpProxy subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1888">an array
 of desired features, ending with 0; %NULL is equivalent to an array
 containing only 0</doc>
            <array c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1891">if not %NULL, called exactly once, when the features have all
 been prepared or failed to prepare, or after the proxy is invalidated</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1893">user data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_finish"
              c:identifier="tp_proxy_prepare_finish"
              version="0.11.3"
              throws="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="2021">Check for error in a call to tp_proxy_prepare_async(). An error here
generally indicates that either the asynchronous call was cancelled,
or @self has emitted #TpProxy::invalidated.</doc>
        <source-position filename="_gen/proxy-introspectable.h" line="185"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="2031">%FALSE (setting @error) if tp_proxy_prepare_async() failed
 or was cancelled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="2023">an instance of a #TpProxy subclass</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="2024">the result passed to the callback of tp_proxy_prepare_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="bus-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_bus_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1342">The D-Bus bus name for this object. Read-only except during construction.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="dbus-connection"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1330">The D-Bus connection for this object. Read-only except during
construction.</doc>
        <type/>
      </property>
      <property name="dbus-daemon"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_dbus_daemon">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1317">The D-Bus daemon for this object (this object itself, if it is a
TpDBusDaemon). Read-only except during construction.</doc>
        <type name="DBusDaemon"/>
      </property>
      <property name="factory"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_factory">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1376">The #TpSimpleClientFactory used to create this proxy,
or %NULL if this proxy was not created through a factory.</doc>
        <type name="SimpleClientFactory"/>
      </property>
      <property name="interfaces" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1365">Known D-Bus interface names for this object.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="object-path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_object_path"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1353">The D-Bus object path for this object. Read-only except during
construction.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="dbus_daemon" readable="0" private="1">
        <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
      </field>
      <field name="dbus_connection"
             introspectable="0"
             readable="0"
             private="1">
        <type c:type="DBusGConnection*"/>
      </field>
      <field name="bus_name" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="object_path" readable="0" private="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="invalidated" readable="0" private="1">
        <type name="GLib.Error" c:type="GError*"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProxyPrivate" c:type="TpProxyPrivate*"/>
      </field>
      <glib:signal name="interface-added"
                   when="last"
                   detailed="1"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1389">Emitted when this proxy has gained an interface. It is not guaranteed
to be emitted immediately, but will be emitted before the interface is
first used (at the latest: before it's returned from
tp_proxy_get_interface_by_id(), any signal is connected, or any
method is called).

The intended use is to call dbus_g_proxy_add_signals(). This signal
should only be used by TpProy implementations</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1392">the GQuark representing the interface</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1393">the dbus-glib proxy representing the interface</doc>
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="invalidated" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="1411">Emitted when this proxy has been become invalid for
whatever reason. Any more specific signal should be emitted first.

An invalidated proxy is one which can make no more method calls and will
emit no more D-Bus signals. This is typically because the D-Bus object
represented by the proxy ceased to exist, or there was some error
obtaining the initial state.

Any pending or future method calls made on this proxy will fail gracefully
with the same error as returned by tp_proxy_get_invalidated().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1414">domain of a GError indicating why this proxy was invalidated</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1415">error code of a GError indicating why this proxy was invalidated</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="proxy.c"
                 line="1416">a message associated with the error</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ProxyClass"
            c:type="TpProxyClass"
            glib:is-gtype-struct-for="Proxy"
            version="0.7.1">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="209">The class of a #TpProxy. The struct fields not documented here are reserved.</doc>
      <source-position filename="_gen/proxy-introspectable.h" line="132"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="211">The parent class structure</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="interface">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="212">If set non-zero by a subclass, #TpProxy will
   automatically add this interface in its constructor</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="must_have_unique_name" bits="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="214">If set %TRUE by a subclass, the #TpProxy
   constructor will fail if a well-known bus name is given</doc>
        <type name="guint" c:type="unsigned int"/>
      </field>
      <field name="_reserved_flags" readable="0" bits="31" private="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="_internal_list_features" readable="0" private="1">
        <type name="GObject.Callback" c:type="GCallback"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="3">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </record>
    <record name="ProxyFeature" c:type="TpProxyFeature" version="0.11.3">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="233">Structure representing a feature.</doc>
      <source-position filename="_gen/proxy-introspectable.h" line="106"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="235">a #GQuark representing the name of the feature</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </field>
      <field name="core" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="236">if %TRUE, every non-core feature of the class depends on this one,
and every feature (core or not) in subclasses depends on this one</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="prepare_async" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="238">called when the feature has to be prepared</doc>
        <type name="ProxyPrepareAsync" c:type="TpProxyPrepareAsync"/>
      </field>
      <field name="prepare_before_signalling_connected_async" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="239">only relevant for
TpConnection sub-classes; same as @prepare_async but for
features wanting to have a chance to prepare themself before the
TpConnection object announce its %TP_CONNECTION_STATUS_CONNECTED status</doc>
        <type name="ProxyPrepareAsync" c:type="TpProxyPrepareAsync"/>
      </field>
      <field name="interfaces_needed" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="243">an array of #GQuark representing interfaces which have
to be implemented on the object in order to be able to prepare the feature</doc>
        <type name="GLib.Quark" c:type="const GQuark*"/>
      </field>
      <field name="depends_on" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="245">an array of #GQuark representing other features which have to
be prepared before trying to prepare this feature</doc>
        <type name="GLib.Quark" c:type="const GQuark*"/>
      </field>
      <field name="can_retry" writable="1">
        <doc xml:space="preserve"
             filename="proxy.c"
             line="247">If %TRUE, allow retrying preparation of this feature even if it
failed once already; if %FALSE any attempt of preparing the feature after
the preparation already failed once will immediately fail with re-calling
@prepare_async</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="_reserved" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ProxyFeaturePrivate" c:type="TpProxyFeaturePrivate*"/>
      </field>
    </record>
    <record name="ProxyFeaturePrivate"
            c:type="TpProxyFeaturePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="_gen/proxy-introspectable.h" line="82"/>
    </record>
    <record name="ProxyPendingCall"
            c:type="TpProxyPendingCall"
            disguised="1"
            opaque="1">
      <source-position filename="_gen/proxy-introspectable.h" line="134"/>
      <method name="cancel" c:identifier="tp_proxy_pending_call_cancel">
        <source-position filename="_gen/proxy-introspectable.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pc" transfer-ownership="none">
            <type name="ProxyPendingCall" c:type="TpProxyPendingCall*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="ProxyPrepareAsync" c:type="TpProxyPrepareAsync">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="222">Function called when @feature has to be prepared for @proxy.</doc>
      <source-position filename="_gen/proxy-introspectable.h" line="84"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="224">the object on which @feature has to be prepared</doc>
          <type name="Proxy" c:type="TpProxy*"/>
        </parameter>
        <parameter name="feature" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="225">a #GQuark representing the feature to prepare</doc>
          <type name="ProxyFeature" c:type="const TpProxyFeature*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="3">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="226">called when the feature has been prepared, or the preparation
failed</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="proxy.c"
               line="228">data to pass to @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ProxyPrivate"
            c:type="TpProxyPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="_gen/proxy-introspectable.h" line="42"/>
    </record>
    <record name="ProxySignalConnection"
            c:type="TpProxySignalConnection"
            disguised="1"
            opaque="1">
      <source-position filename="_gen/proxy-introspectable.h" line="138"/>
      <method name="disconnect"
              c:identifier="tp_proxy_signal_connection_disconnect">
        <source-position filename="_gen/proxy-introspectable.h" line="140"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="sc" transfer-ownership="none">
            <type name="ProxySignalConnection"
                  c:type="TpProxySignalConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="RCPTXRRTTMode" c:type="TpRCPTXRRTTMode">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1285">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="640"/>
      <member name="all" value="0" c:identifier="TP_RCPT_XR_RTT_MODE_ALL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1287">&lt;![CDATA[           Both RTP data senders and data receivers MAY send DLRR           blocks.         ]]&gt;</doc>
      </member>
      <member name="sender"
              value="1"
              c:identifier="TP_RCPT_XR_RTT_MODE_SENDER">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1288">&lt;![CDATA[           Only active RTP senders MAY send DLRR blocks, i.e., non RTP           senders SHALL NOT send DLRR blocks.         ]]&gt;</doc>
      </member>
    </enumeration>
    <function-macro name="ROOM_INFO"
                    c:identifier="TP_ROOM_INFO"
                    introspectable="0">
      <source-position filename="room-info.h" line="55"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ROOM_INFO_CLASS"
                    c:identifier="TP_ROOM_INFO_CLASS"
                    introspectable="0">
      <source-position filename="room-info.h" line="59"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ROOM_INFO_GET_CLASS"
                    c:identifier="TP_ROOM_INFO_GET_CLASS"
                    introspectable="0">
      <source-position filename="room-info.h" line="69"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ROOM_LIST"
                    c:identifier="TP_ROOM_LIST"
                    introspectable="0">
      <source-position filename="room-list.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ROOM_LIST_CLASS"
                    c:identifier="TP_ROOM_LIST_CLASS"
                    introspectable="0">
      <source-position filename="room-list.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="ROOM_LIST_GET_CLASS"
                    c:identifier="TP_ROOM_LIST_GET_CLASS"
                    introspectable="0">
      <source-position filename="room-list.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <bitfield name="RTCPXRStatisticsFlags" c:type="TpRTCPXRStatisticsFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1275">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="635"/>
      <member name="loss"
              value="1"
              c:identifier="TP_RTCP_XR_STATISTICS_FLAGS_LOSS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1277">&lt;![CDATA[           Loss report flag, as defined in RFC3611 section 4.6.         ]]&gt;</doc>
      </member>
      <member name="duplicate"
              value="2"
              c:identifier="TP_RTCP_XR_STATISTICS_FLAGS_DUPLICATE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1278">&lt;![CDATA[           Duplicate report flag, as defined in RFC3611 section 4.6.         ]]&gt;</doc>
      </member>
      <member name="jitter"
              value="4"
              c:identifier="TP_RTCP_XR_STATISTICS_FLAGS_JITTER">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1279">&lt;![CDATA[           Jitter flag, as defined in RFC3611 section 4.6.         ]]&gt;</doc>
      </member>
      <member name="ttl"
              value="8"
              c:identifier="TP_RTCP_XR_STATISTICS_FLAGS_TTL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1280">&lt;![CDATA[           First bit of TTL or Hop Limit flag, as defined in RFC3611 section           4.6.         ]]&gt;</doc>
      </member>
      <member name="hl"
              value="16"
              c:identifier="TP_RTCP_XR_STATISTICS_FLAGS_HL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1281">&lt;![CDATA[           Second bit of TTL or Hop Limit flag, as defined in RFC3611 section           4.6.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="RichPresenceAccessControlType"
                 c:type="TpRichPresenceAccessControlType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="258">&lt;![CDATA[         A type of access control for Rich_Presence_Access_Control.           For most types, the exact access control is given by an associated           variant.                     These are the access control types from XMPP publish/subscribe           (XEP-0060).                   Location           uses this for historical reasons, new interfaces will use           Access_Control_Type.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="147"/>
      <member name="whitelist"
              value="0"
              c:identifier="TP_RICH_PRESENCE_ACCESS_CONTROL_TYPE_WHITELIST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="260">&lt;![CDATA[           The associated variant is a list of contacts (signature 'au',           Contact_Handle[]) who can see the extended presence information.         ]]&gt;</doc>
      </member>
      <member name="publish_list"
              value="1"
              c:identifier="TP_RICH_PRESENCE_ACCESS_CONTROL_TYPE_PUBLISH_LIST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="261">&lt;![CDATA[           All contacts in the user's 'publish' contact list can see the           extended presence information. The associated variant is ignored.         ]]&gt;</doc>
      </member>
      <member name="group"
              value="2"
              c:identifier="TP_RICH_PRESENCE_ACCESS_CONTROL_TYPE_GROUP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="262">&lt;![CDATA[           The associated variant is a handle of type Group (signature 'u',           Group_Handle) representing a group of contacts who can see the           extended presence information.         ]]&gt;</doc>
      </member>
      <member name="open"
              value="3"
              c:identifier="TP_RICH_PRESENCE_ACCESS_CONTROL_TYPE_OPEN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="263">&lt;![CDATA[           Anyone with access to the service can see the extended presence           information.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="RoomInfo"
           c:symbol-prefix="room_info"
           c:type="TpRoomInfo"
           version="0.19.0"
           parent="GObject.Object"
           glib:type-name="TpRoomInfo"
           glib:get-type="tp_room_info_get_type"
           glib:type-struct="RoomInfoClass">
      <doc xml:space="preserve"
           filename="room-info.c"
           line="41">Data structure representing a #TpRoomInfo.</doc>
      <source-position filename="room-info.h" line="42"/>
      <method name="get_channel_type"
              c:identifier="tp_room_info_get_channel_type"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="142">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="148">a string representing the D-Bus interface name of
the channel type of the room</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="144">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description"
              c:identifier="tp_room_info_get_description"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="193">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="199">a description of the room's overall purpose</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="195">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle"
              c:identifier="tp_room_info_get_handle"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="126">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="132">the #TpHandle of the room</doc>
          <type name="Handle" c:type="TpHandle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="128">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_handle_name"
              c:identifier="tp_room_info_get_handle_name"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="159">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="165">the identifier of the room (as would be returned
by inspecting the #TpHandle returned by tp_room_info_get_handle())</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="161">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_invite_only"
              c:identifier="tp_room_info_get_invite_only"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="263">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="271">%TRUE if you cannot join the room, but must be invited</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="265">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
          <parameter name="known" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="266">either %NULL, or a location in which to store %TRUE if the
returned value is meaningful</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_members_count"
              c:identifier="tp_room_info_get_members_count"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="225">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="233">the number of members in the room</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="227">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
          <parameter name="known" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="228">either %NULL, or a location in which to store %TRUE if the
returned value is meaningful</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="tp_room_info_get_name"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="176">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="182">the human-readable name of the room if different
from the handle</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="178">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_requires_password"
              c:identifier="tp_room_info_get_requires_password"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="244">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="252">%TRUE if the room requires a password to enter</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="246">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
          <parameter name="known" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="247">either %NULL, or a location in which to store %TRUE if the
returned value is meaningful</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_room_id"
              c:identifier="tp_room_info_get_room_id"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="282">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="288">the human-readable identifier of the room</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="284">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server"
              c:identifier="tp_room_info_get_server"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="298">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="304">the DNS name of the server hosting the room</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="300">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subject"
              c:identifier="tp_room_info_get_subject"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-info.c"
             line="209">&lt;!-- --&gt;</doc>
        <source-position filename="room-info.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-info.c"
               line="215">the current subject of conversation in the room</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-info.c"
                 line="211">a #TpRoomInfo</doc>
            <type name="RoomInfo" c:type="TpRoomInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RoomInfoPriv" c:type="TpRoomInfoPriv*"/>
      </field>
    </class>
    <record name="RoomInfoClass"
            c:type="TpRoomInfoClass"
            glib:is-gtype-struct-for="RoomInfo"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="room-info.c"
           line="49">The class of a #TpRoomInfo.</doc>
      <source-position filename="room-info.h" line="42"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="RoomInfoPriv"
            c:type="TpRoomInfoPriv"
            disguised="1"
            opaque="1">
      <source-position filename="room-info.h" line="37"/>
    </record>
    <class name="RoomList"
           c:symbol-prefix="room_list"
           c:type="TpRoomList"
           version="0.19.0"
           parent="GObject.Object"
           glib:type-name="TpRoomList"
           glib:get-type="tp_room_list_get_type"
           glib:type-struct="RoomListClass">
      <doc xml:space="preserve"
           filename="room-list.c"
           line="29">Data structure representing a #TpRoomList.</doc>
      <source-position filename="room-list.h" line="56"/>
      <implements name="Gio.AsyncInitable"/>
      <constructor name="new_finish"
                   c:identifier="tp_room_list_new_finish"
                   version="0.19.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="577">&lt;!-- --&gt;</doc>
        <source-position filename="room-list.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="room-list.c"
               line="584">a new #TpRoomList object, or %NULL
in case of error.</doc>
          <type name="RoomList" c:type="TpRoomList*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="579">the #GAsyncResult from the callback</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new_async"
                c:identifier="tp_room_list_new_async"
                version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="550">&lt;!-- --&gt;</doc>
        <source-position filename="room-list.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="552">a #TpAccount for the room listing</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
          <parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="553">the DNS name of the server whose rooms should listed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="554">a #GAsyncReadyCallback to call when the initialization
is finished</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="556">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_account"
              c:identifier="tp_room_list_get_account"
              glib:get-property="account"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="323">Return the #TpRoomList:account property</doc>
        <source-position filename="room-list.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-list.c"
               line="329">the value of #TpRoomList:account property</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="325">a #TpRoomList</doc>
            <type name="RoomList" c:type="TpRoomList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server"
              c:identifier="tp_room_list_get_server"
              glib:get-property="server"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="339">Return the #TpRoomList:server property</doc>
        <source-position filename="room-list.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-list.c"
               line="345">the value of #TpRoomList:server property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="341">a #TpRoomList</doc>
            <type name="RoomList" c:type="TpRoomList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_listing"
              c:identifier="tp_room_list_is_listing"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="355">Return the #TpRoomList:listing property</doc>
        <source-position filename="room-list.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="room-list.c"
               line="361">the value of #TpRoomList:listing property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="357">a #TpRoomList</doc>
            <type name="RoomList" c:type="TpRoomList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="tp_room_list_start" version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="385">Start listing rooms using @self. Use the TpRoomList::got-rooms
signal to get the rooms found.
Errors will be reported using the TpRoomList::failed signal.</doc>
        <source-position filename="room-list.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="387">a #TpRoomList</doc>
            <type name="RoomList" c:type="TpRoomList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="account"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_account">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="234">The #TpAccount to use for the room listing.</doc>
        <type name="Account"/>
      </property>
      <property name="listing"
                version="0.19.0"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="261">%TRUE if the channel is currently listing rooms.

This property is meaningless until the
%TP_ROOM_LIST_FEATURE_LISTING feature has been prepared.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="server"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_server"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="247">The DNS name of the server whose rooms are listed by this channel, or
%NULL.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="RoomListPrivate" c:type="TpRoomListPrivate*"/>
      </field>
      <glib:signal name="failed" when="last" version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="296">Fired when something goes wrong while listing the channels; see @error
for details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="299">a #GError indicating the reason of the error</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="got-room" when="last" version="0.19.0">
        <doc xml:space="preserve"
             filename="room-list.c"
             line="278">Fired each time a room is found during the listing process.
User should take his own reference on @room if he plans to
continue using it once the signal callback has returned.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="room" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="room-list.c"
                 line="281">a #TpRoomInfo</doc>
            <type name="RoomInfo"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="RoomListClass"
            c:type="TpRoomListClass"
            glib:is-gtype-struct-for="RoomList"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="room-list.c"
           line="37">The class of a #TpRoomList.</doc>
      <source-position filename="room-list.h" line="56"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="RoomListPrivate"
            c:type="TpRoomListPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="room-list.h" line="42"/>
    </record>
    <enumeration name="SASLAbortReason" c:type="TpSASLAbortReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="968">&lt;![CDATA[         A reason why SASL authentication was aborted by the client.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="497"/>
      <member name="invalid_challenge"
              value="0"
              c:identifier="TP_SASL_ABORT_REASON_INVALID_CHALLENGE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="970">&lt;![CDATA[           The server sent an invalid challenge or data.         ]]&gt;</doc>
      </member>
      <member name="user_abort"
              value="1"
              c:identifier="TP_SASL_ABORT_REASON_USER_ABORT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="971">&lt;![CDATA[           The user aborted the authentication.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="SASLStatus" c:type="TpSASLStatus">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="989">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="509"/>
      <member name="not_started"
              value="0"
              c:identifier="TP_SASL_STATUS_NOT_STARTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="991">&lt;![CDATA[           The initial state. The Handler SHOULD either           call AbortSASL, or connect to the           NewChallenge signal then call           StartMechanism or           StartMechanismWithData.         ]]&gt;</doc>
      </member>
      <member name="in_progress"
              value="1"
              c:identifier="TP_SASL_STATUS_IN_PROGRESS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="992">&lt;![CDATA[           The challenge/response exchange is in progress. The Handler SHOULD           call either Respond or           AcceptSASL exactly once per emission           of NewChallenge, or call           AbortSASL at any time.         ]]&gt;</doc>
      </member>
      <member name="server_succeeded"
              value="2"
              c:identifier="TP_SASL_STATUS_SERVER_SUCCEEDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="993">&lt;![CDATA[           The server has indicated successful authentication, and the           connection manager is waiting for confirmation from the Handler.           The Handler must call either AcceptSASL or           AbortSASL to indicate whether it           considers authentication to have been successful.         ]]&gt;</doc>
      </member>
      <member name="client_accepted"
              value="3"
              c:identifier="TP_SASL_STATUS_CLIENT_ACCEPTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="994">&lt;![CDATA[           The Handler has indicated successful authentication, and the           connection manager is waiting for confirmation from the server.           The state will progress to either Succeeded or Server_Failed when           confirmation is received.         ]]&gt;</doc>
      </member>
      <member name="succeeded"
              value="4"
              c:identifier="TP_SASL_STATUS_SUCCEEDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="995">&lt;![CDATA[           Everyone is happy (the server sent success, and the client has called           AcceptSASL). Connection to the server           will proceed as soon as this state is reached. The Handler SHOULD           call Close           to close the channel.         ]]&gt;</doc>
      </member>
      <member name="server_failed"
              value="5"
              c:identifier="TP_SASL_STATUS_SERVER_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="996">&lt;![CDATA[           The server has indicated an authentication failure.           If CanTryAgain is true,           the client may try to authenticate again, by calling           StartMechanism or           StartMechanismWithData again.           Otherwise, it should give up completely, by calling Close           on the channel.         ]]&gt;</doc>
      </member>
      <member name="client_failed"
              value="6"
              c:identifier="TP_SASL_STATUS_CLIENT_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="997">&lt;![CDATA[           The client has indicated an authentication failure. The           possible actions are the same as for Server_Failed.         ]]&gt;</doc>
      </member>
    </enumeration>
    <function-macro name="SIGNALLED_MESSAGE"
                    c:identifier="TP_SIGNALLED_MESSAGE"
                    introspectable="0">
      <source-position filename="signalled-message.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIGNALLED_MESSAGE_CLASS"
                    c:identifier="TP_SIGNALLED_MESSAGE_CLASS"
                    introspectable="0">
      <source-position filename="signalled-message.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIGNALLED_MESSAGE_GET_CLASS"
                    c:identifier="TP_SIGNALLED_MESSAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="signalled-message.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_APPROVER"
                    c:identifier="TP_SIMPLE_APPROVER"
                    introspectable="0">
      <source-position filename="simple-approver.h" line="55"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_APPROVER_CLASS"
                    c:identifier="TP_SIMPLE_APPROVER_CLASS"
                    introspectable="0">
      <source-position filename="simple-approver.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_APPROVER_GET_CLASS"
                    c:identifier="TP_SIMPLE_APPROVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="simple-approver.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_CLIENT_FACTORY"
                    c:identifier="TP_SIMPLE_CLIENT_FACTORY"
                    introspectable="0">
      <source-position filename="simple-client-factory.h" line="94"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_CLIENT_FACTORY_CLASS"
                    c:identifier="TP_SIMPLE_CLIENT_FACTORY_CLASS"
                    introspectable="0">
      <source-position filename="simple-client-factory.h" line="97"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_CLIENT_FACTORY_GET_CLASS"
                    c:identifier="TP_SIMPLE_CLIENT_FACTORY_GET_CLASS"
                    introspectable="0">
      <source-position filename="simple-client-factory.h" line="104"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_HANDLER"
                    c:identifier="TP_SIMPLE_HANDLER"
                    introspectable="0">
      <source-position filename="simple-handler.h" line="55"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_HANDLER_CLASS"
                    c:identifier="TP_SIMPLE_HANDLER_CLASS"
                    introspectable="0">
      <source-position filename="simple-handler.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_HANDLER_GET_CLASS"
                    c:identifier="TP_SIMPLE_HANDLER_GET_CLASS"
                    introspectable="0">
      <source-position filename="simple-handler.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_OBSERVER"
                    c:identifier="TP_SIMPLE_OBSERVER"
                    introspectable="0">
      <source-position filename="simple-observer.h" line="55"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_OBSERVER_CLASS"
                    c:identifier="TP_SIMPLE_OBSERVER_CLASS"
                    introspectable="0">
      <source-position filename="simple-observer.h" line="58"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SIMPLE_OBSERVER_GET_CLASS"
                    c:identifier="TP_SIMPLE_OBSERVER_GET_CLASS"
                    introspectable="0">
      <source-position filename="simple-observer.h" line="65"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_TUBE_CHANNEL"
                    c:identifier="TP_STREAM_TUBE_CHANNEL"
                    introspectable="0">
      <source-position filename="stream-tube-channel.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_TUBE_CHANNEL_CLASS"
                    c:identifier="TP_STREAM_TUBE_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="stream-tube-channel.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_TUBE_CHANNEL_GET_CLASS"
                    c:identifier="TP_STREAM_TUBE_CHANNEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="stream-tube-channel.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_TUBE_CONNECTION"
                    c:identifier="TP_STREAM_TUBE_CONNECTION"
                    introspectable="0">
      <source-position filename="stream-tube-connection.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_TUBE_CONNECTION_CLASS"
                    c:identifier="TP_STREAM_TUBE_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="stream-tube-connection.h" line="47"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_TUBE_CONNECTION_GET_CLASS"
                    c:identifier="TP_STREAM_TUBE_CONNECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="stream-tube-connection.h" line="54"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="SendingState" c:type="TpSendingState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1400">&lt;![CDATA[         Enum indicating whether a contact is sending media.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="689"/>
      <member name="none" value="0" c:identifier="TP_SENDING_STATE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1402">&lt;![CDATA[           The contact is not sending media and has not been asked to           do so.         ]]&gt;</doc>
      </member>
      <member name="pending_send"
              value="1"
              c:identifier="TP_SENDING_STATE_PENDING_SEND">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1403">&lt;![CDATA[           The contact has been asked to start sending media.         ]]&gt;</doc>
      </member>
      <member name="sending" value="2" c:identifier="TP_SENDING_STATE_SENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1404">&lt;![CDATA[           The contact is sending media.         ]]&gt;</doc>
      </member>
      <member name="pending_stop_sending"
              value="3"
              c:identifier="TP_SENDING_STATE_PENDING_STOP_SENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1405">&lt;![CDATA[           The contact has been asked to stop sending media.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="ServicePointType" c:type="TpServicePointType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="289">&lt;![CDATA[         The various types of service points a channel might connect to.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="159"/>
      <member name="none" value="0" c:identifier="TP_SERVICE_POINT_TYPE_NONE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="291">&lt;![CDATA[           The channel is not communicating with a service point, or it is not           known whether it is communicating with a service point (e.g. an           ordinary call).         ]]&gt;</doc>
      </member>
      <member name="emergency"
              value="1"
              c:identifier="TP_SERVICE_POINT_TYPE_EMERGENCY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="292">&lt;![CDATA[           The service point is a generic emergency point.         ]]&gt;</doc>
      </member>
      <member name="counseling"
              value="2"
              c:identifier="TP_SERVICE_POINT_TYPE_COUNSELING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="293">&lt;![CDATA[           The service point is some kind of counseling service (ie, mental health           or child-services counseling).         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="SignalledMessage"
           c:symbol-prefix="signalled_message"
           c:type="TpSignalledMessage"
           version="0.13.9"
           parent="Message"
           glib:type-name="TpSignalledMessage"
           glib:get-type="tp_signalled_message_get_type"
           glib:type-struct="SignalledMessageClass">
      <doc xml:space="preserve"
           filename="signalled-message.c"
           line="45">Opaque structure representing a received message using the Telepathy
messages interface</doc>
      <source-position filename="signalled-message.h" line="43"/>
      <function name="get_sender"
                c:identifier="tp_signalled_message_get_sender"
                version="0.13.9">
        <doc xml:space="preserve"
             filename="signalled-message.c"
             line="218">Returns a #TpContact representing the sender of @message if known, %NULL
otherwise.</doc>
        <source-position filename="signalled-message.h" line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="signalled-message.c"
               line="225">the sender of the message</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="signalled-message.c"
                 line="220">a #TpSignalledMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </parameter>
        </parameters>
      </function>
      <property name="sender"
                version="0.13.9"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="signalled-message.c"
             line="130">A #TpContact representing the sender of the message, if known, or %NULL
otherwise.</doc>
        <type name="Contact"/>
      </property>
    </class>
    <record name="SignalledMessageClass"
            c:type="TpSignalledMessageClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="SignalledMessage">
      <source-position filename="signalled-message.h" line="43"/>
    </record>
    <class name="SimpleApprover"
           c:symbol-prefix="simple_approver"
           c:type="TpSimpleApprover"
           version="0.11.5"
           parent="BaseClient"
           glib:type-name="TpSimpleApprover"
           glib:get-type="tp_simple_approver_get_type"
           glib:type-struct="SimpleApproverClass">
      <doc xml:space="preserve"
           filename="simple-approver.c"
           line="63">Data structure representing a simple Approver implementation.</doc>
      <source-position filename="simple-approver.h" line="44"/>
      <constructor name="new"
                   c:identifier="tp_simple_approver_new"
                   version="0.11.5"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="simple-approver.c"
             line="265">Convenient function to create a new #TpSimpleApprover instance.

If @dbus is not the result of tp_dbus_daemon_dup(), you should call
tp_simple_approver_new_with_am() instead, so that #TpAccount,
#TpConnection and #TpContact instances can be shared between modules.</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_simple_approver_new_with_am() instead.</doc-deprecated>
        <source-position filename="simple-approver.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="281">a new #TpSimpleApprover</doc>
          <type name="SimpleApprover" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="267">a #TpDBusDaemon object, may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="268">the name of the Approver (see #TpBaseClient:name for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="269">the value of the #TpBaseClient:uniquify-name property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="270">the function called when AddDispatchOperation is called</doc>
            <type name="SimpleApproverAddDispatchOperationImpl"
                  c:type="TpSimpleApproverAddDispatchOperationImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="271">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="272">called with @user_data as its argument when the #TpSimpleApprover
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_am"
                   c:identifier="tp_simple_approver_new_with_am"
                   version="0.11.14">
        <doc xml:space="preserve"
             filename="simple-approver.c"
             line="304">Convenient function to create a new #TpSimpleApprover instance with a
specified #TpAccountManager.

It is not necessary to prepare any features on @account_manager before
calling this function.</doc>
        <source-position filename="simple-approver.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="320">a new #TpSimpleApprover</doc>
          <type name="SimpleApprover" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="account_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="306">an account manager, which may not be %NULL</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="307">the name of the Approver (see #TpBaseClient:name for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="308">the value of the #TpBaseClient:uniquify-name property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="309">the function called when AddDispatchOperation is called</doc>
            <type name="SimpleApproverAddDispatchOperationImpl"
                  c:type="TpSimpleApproverAddDispatchOperationImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="310">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="311">called with @user_data as its argument when the #TpSimpleApprover
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_factory"
                   c:identifier="tp_simple_approver_new_with_factory"
                   version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-approver.c"
             line="342">Convenient function to create a new #TpSimpleApprover instance with a
specified #TpSimpleClientFactory.</doc>
        <source-position filename="simple-approver.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="355">a new #TpSimpleApprover</doc>
          <type name="SimpleApprover" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="344">an #TpSimpleClientFactory, which may not be %NULL</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="345">the name of the Approver (see #TpBaseClient:name for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="346">the value of the #TpBaseClient:uniquify-name property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="4"
                     destroy="5">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="347">the function called when AddDispatchOperation is called</doc>
            <type name="SimpleApproverAddDispatchOperationImpl"
                  c:type="TpSimpleApproverAddDispatchOperationImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="348">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-approver.c"
                 line="349">called with @user_data as its argument when the #TpSimpleApprover
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="callback"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-approver.c"
             line="218">The #TpSimpleApproverAddDispatchOperationImpl callback implementing the
AddDispatchOperation D-Bus method.

This property can't be %NULL.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="destroy"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-approver.c"
             line="248">The #GDestroyNotify function called to free #TpSimpleApprover:user-data
when the #TpSimpleApprover is destroyed.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="user-data"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-approver.c"
             line="235">The user-data pointer passed to #TpSimpleApprover:callback.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="BaseClient" c:type="TpBaseClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleApproverPrivate" c:type="TpSimpleApproverPrivate*"/>
      </field>
    </class>
    <callback name="SimpleApproverAddDispatchOperationImpl"
              c:type="TpSimpleApproverAddDispatchOperationImpl"
              version="0.11.5">
      <doc xml:space="preserve"
           filename="simple-approver.c"
           line="79">Signature of the implementation of the AddDispatchOperation method.

This function must call either tp_add_dispatch_operation_context_accept(),
tp_add_dispatch_operation_context_delay() or
tp_add_dispatch_operation_context_fail() on @context before it returns.</doc>
      <source-position filename="simple-approver.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="approver" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="81">a #TpSimpleApprover instance</doc>
          <type name="SimpleApprover" c:type="TpSimpleApprover*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="82">a #TpAccount having %TP_ACCOUNT_FEATURE_CORE prepared if possible</doc>
          <type name="Account" c:type="TpAccount*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="83">a #TpConnection having %TP_CONNECTION_FEATURE_CORE prepared
if possible</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="85">a #GList of #TpChannel,
 all having %TP_CHANNEL_FEATURE_CORE prepared</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </parameter>
        <parameter name="dispatch_operation"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="87">a #TpChannelDispatchOperation or %NULL;
 the dispatch_operation is not guaranteed to be prepared</doc>
          <type name="ChannelDispatchOperation"
                c:type="TpChannelDispatchOperation*"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="89">a #TpAddDispatchOperationContext representing the context of this
 D-Bus call</doc>
          <type name="AddDispatchOperationContext"
                c:type="TpAddDispatchOperationContext*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="6">
          <doc xml:space="preserve"
               filename="simple-approver.c"
               line="91">arbitrary user-supplied data passed to tp_simple_approver_new()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SimpleApproverClass"
            c:type="TpSimpleApproverClass"
            glib:is-gtype-struct-for="SimpleApprover"
            version="0.11.5">
      <doc xml:space="preserve"
           filename="simple-approver.c"
           line="71">The class of a #TpSimpleApprover.</doc>
      <source-position filename="simple-approver.h" line="44"/>
      <field name="parent_class" readable="0" private="1">
        <type name="BaseClientClass" c:type="TpBaseClientClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="SimpleApproverPrivate"
            c:type="TpSimpleApproverPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="simple-approver.h" line="38"/>
    </record>
    <class name="SimpleClientFactory"
           c:symbol-prefix="simple_client_factory"
           c:type="TpSimpleClientFactory"
           version="0.15.5"
           parent="GObject.Object"
           glib:type-name="TpSimpleClientFactory"
           glib:get-type="tp_simple_client_factory_get_type"
           glib:type-struct="SimpleClientFactoryClass">
      <doc xml:space="preserve"
           filename="simple-client-factory.c"
           line="71">Data structure representing a #TpSimpleClientFactory</doc>
      <source-position filename="simple-client-factory.h" line="82"/>
      <constructor name="new"
                   c:identifier="tp_simple_client_factory_new"
                   version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="399">Creates a new #TpSimpleClientFactory instance. If @dbus is %NULL,
tp_dbus_daemon_dup() will be used.</doc>
        <source-position filename="simple-client-factory.h" line="110"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="406">a new #TpSimpleClientFactory</doc>
          <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
        </return-value>
        <parameters>
          <parameter name="dbus"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="401">a #TpDBusDaemon, or %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="create_account" introspectable="0" throws="1">
        <source-position filename="simple-client-factory.h" line="48"/>
        <return-value>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_channel" introspectable="0" throws="1">
        <source-position filename="simple-client-factory.h" line="64"/>
        <return-value>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_connection" introspectable="0" throws="1">
        <source-position filename="simple-client-factory.h" line="56"/>
        <return-value>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="create_contact" introspectable="0">
        <source-position filename="simple-client-factory.h" line="73"/>
        <return-value>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="identifier" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_account_features"
                      invoker="dup_account_features"
                      version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="484">Return a zero-terminated #GArray containing the #TpAccount features that
should be prepared on @account.</doc>
        <source-position filename="simple-client-factory.h" line="52"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="492">a newly allocated
 #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="486">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="487">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_channel_features"
                      invoker="dup_channel_features"
                      version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="745">Return a zero-terminated #GArray containing the #TpChannel features that
should be prepared on @channel.</doc>
        <source-position filename="simple-client-factory.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="753">a newly allocated
 #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="747">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="748">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_connection_features"
                      invoker="dup_connection_features"
                      version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="612">Return a zero-terminated #GArray containing the #TpConnection features that
should be prepared on @connection.</doc>
        <source-position filename="simple-client-factory.h" line="60"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="620">a newly allocated
 #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="614">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="615">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="dup_contact_features"
                      invoker="dup_contact_features"
                      version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="1051">Return a #GArray containing the #TpContactFeature that should be prepared on
all contacts of @connection.</doc>
        <source-position filename="simple-client-factory.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="1059">a newly
 allocated #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="ContactFeature"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1053">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1054">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_account_features"
              c:identifier="tp_simple_client_factory_add_account_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="509">Add @features to the desired features to be prepared on #TpAccount
objects. Those features will be added to the features already returned be
tp_simple_client_factory_dup_account_features().

It is not necessary to add %TP_ACCOUNT_FEATURE_CORE as it is already
included by default.

Note that these features will not be added to existing #TpAccount
objects; the user must call tp_proxy_prepare_async() themself.</doc>
        <source-position filename="simple-client-factory.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="511">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="512">an array
 of desired features, ending with 0; %NULL is equivalent to an array
 containing only 0</doc>
            <array c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_account_features_varargs"
              c:identifier="tp_simple_client_factory_add_account_features_varargs"
              version="0.15.5"
              introspectable="0">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="538">The same as tp_simple_client_factory_add_account_features(), but with a more
convenient calling convention from C.</doc>
        <source-position filename="simple-client-factory.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="540">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="541">the first feature</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="542">the second and subsequent features, if any, ending with 0</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_features"
              c:identifier="tp_simple_client_factory_add_channel_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="770">Add @features to the desired features to be prepared on #TpChannel
objects. Those features will be added to the features already returned be
tp_simple_client_factory_dup_channel_features().

It is not necessary to add %TP_CHANNEL_FEATURE_CORE as it is already
included by default.

Note that these features will not be added to existing #TpChannel
objects; the user must call tp_proxy_prepare_async() themself.</doc>
        <source-position filename="simple-client-factory.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="772">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="773">an array
 of desired features, ending with 0; %NULL is equivalent to an array
 containing only 0</doc>
            <array c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_channel_features_varargs"
              c:identifier="tp_simple_client_factory_add_channel_features_varargs"
              version="0.15.5"
              introspectable="0">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="799">The same as tp_simple_client_factory_add_channel_features(), but with a
more convenient calling convention from C.</doc>
        <source-position filename="simple-client-factory.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="801">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="802">the first feature</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="803">the second and subsequent features, if any, ending with 0</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_features"
              c:identifier="tp_simple_client_factory_add_connection_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="637">Add @features to the desired features to be prepared on #TpConnection
objects. Those features will be added to the features already returned be
tp_simple_client_factory_dup_connection_features().

It is not necessary to add %TP_CONNECTION_FEATURE_CORE as it is already
included by default.

Note that these features will not be added to existing #TpConnection
objects; the user must call tp_proxy_prepare_async() themself.</doc>
        <source-position filename="simple-client-factory.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="639">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="640">an array
 of desired features, ending with 0; %NULL is equivalent to an array
 containing only 0</doc>
            <array c:type="const GQuark*">
              <type name="GLib.Quark" c:type="GQuark"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_connection_features_varargs"
              c:identifier="tp_simple_client_factory_add_connection_features_varargs"
              version="0.15.5"
              introspectable="0">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="666">The same as tp_simple_client_factory_add_connection_features(), but with a
more convenient calling convention from C.</doc>
        <source-position filename="simple-client-factory.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="668">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="669">the first feature</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="670">the second and subsequent features, if any, ending with 0</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="add_contact_features"
              c:identifier="tp_simple_client_factory_add_contact_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="1076">Add @features to the desired features to be prepared on #TpContact
objects. Those features will be added to the features already returned be
tp_simple_client_factory_dup_contact_features().

Note that these features will not be added to existing #TpContact
objects; the user must call tp_connection_upgrade_contacts() themself.</doc>
        <source-position filename="simple-client-factory.h" line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1078">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="n_features" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1079">The number of features in @features (may be 0)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="features"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1080">an array of desired
 features (may be %NULL if @n_features is 0)</doc>
            <array length="0"
                   zero-terminated="0"
                   c:type="const TpContactFeature*">
              <type name="ContactFeature" c:type="TpContactFeature"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_contact_features_varargs"
              c:identifier="tp_simple_client_factory_add_contact_features_varargs"
              version="0.15.5"
              introspectable="0">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="1121">The same as tp_simple_client_factory_add_contact_features(), but with a
more convenient calling convention from C.</doc>
        <source-position filename="simple-client-factory.h" line="217"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1123">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1124">the first feature</doc>
            <type name="ContactFeature" c:type="TpContactFeature"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1125">the second and subsequent features, if any, ending with
 %TP_CONTACT_FEATURE_INVALID</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_account_features"
              c:identifier="tp_simple_client_factory_dup_account_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="484">Return a zero-terminated #GArray containing the #TpAccount features that
should be prepared on @account.</doc>
        <source-position filename="simple-client-factory.h" line="123"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="492">a newly allocated
 #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="486">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="account" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="487">a #TpAccount</doc>
            <type name="Account" c:type="TpAccount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_channel_features"
              c:identifier="tp_simple_client_factory_dup_channel_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="745">Return a zero-terminated #GArray containing the #TpChannel features that
should be prepared on @channel.</doc>
        <source-position filename="simple-client-factory.h" line="164"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="753">a newly allocated
 #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="747">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="channel" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="748">a #TpChannel</doc>
            <type name="Channel" c:type="TpChannel*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_connection_features"
              c:identifier="tp_simple_client_factory_dup_connection_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="612">Return a zero-terminated #GArray containing the #TpConnection features that
should be prepared on @connection.</doc>
        <source-position filename="simple-client-factory.h" line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="620">a newly allocated
 #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="GLib.Quark"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="614">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="615">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_contact_features"
              c:identifier="tp_simple_client_factory_dup_contact_features"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="1051">Return a #GArray containing the #TpContactFeature that should be prepared on
all contacts of @connection.</doc>
        <source-position filename="simple-client-factory.h" line="209"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="1059">a newly
 allocated #GArray</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="ContactFeature"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1053">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1054">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_account"
              c:identifier="tp_simple_client_factory_ensure_account"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="437">Returns a #TpAccount proxy for the account at @object_path. The returned
#TpAccount is cached; the same #TpAccount object will be returned by this
function repeatedly, as long as at least one reference exists.

Note that the returned #TpAccount is not guaranteed to be ready; the caller
is responsible for calling tp_proxy_prepare_async() with the desired
features (as given by tp_simple_client_factory_dup_account_features()).

This function is rather low-level. tp_account_manager_dup_valid_accounts()
and #TpAccountManager::validity-changed are more appropriate for most
applications.</doc>
        <source-position filename="simple-client-factory.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="457">a reference to a #TpAccount;
 see tp_account_new().</doc>
          <type name="Account" c:type="TpAccount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="439">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="440">the object path of an account</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="441">
 the immutable properties of the account, or %NULL.</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_channel"
              c:identifier="tp_simple_client_factory_ensure_channel"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="693">Returns a #TpChannel proxy for the channel at @object_path on @connection.
The returned #TpChannel is cached; the same #TpChannel object
will be returned by this function repeatedly, as long as at least one
reference exists.

Note that the returned #TpChannel is not guaranteed to be ready; the
caller is responsible for calling tp_proxy_prepare_async() with the desired
features (as given by tp_simple_client_factory_dup_channel_features()).

This function is rather low-level.
#TpAccountChannelRequest and #TpBaseClient are more appropriate ways
to obtain channels for most applications.</doc>
        <source-position filename="simple-client-factory.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="715">a reference to a #TpChannel;
 see tp_channel_new_from_properties().</doc>
          <type name="Channel" c:type="TpChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="695">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="696">a #TpConnection whose #TpProxy:factory is this object</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="697">the object path of a channel on @connection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="698">
 the immutable properties of the channel</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_connection"
              c:identifier="tp_simple_client_factory_ensure_connection"
              version="0.15.5"
              throws="1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="565">Returns a #TpConnection proxy for the connection at @object_path.
The returned #TpConnection is cached; the same #TpConnection object
will be returned by this function repeatedly, as long as at least one
reference exists.

Note that the returned #TpConnection is not guaranteed to be ready; the
caller is responsible for calling tp_proxy_prepare_async() with the desired
features (as given by tp_simple_client_factory_dup_connection_features()).

This function is rather low-level. #TpAccount:connection is more
appropriate for most applications.</doc>
        <source-position filename="simple-client-factory.h" line="137"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="585">a reference to a #TpConnection;
 see tp_connection_new().</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="567">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="568">the object path of a connection</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="569">
 the immutable properties of the connection.</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_contact"
              c:identifier="tp_simple_client_factory_ensure_contact"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="826">Returns a #TpContact representing @identifier (and @handle) on @connection.
The returned #TpContact is cached; the same #TpContact object
will be returned by this function repeatedly, as long as at least one
reference exists.

Note that the returned #TpContact is not guaranteed to be ready; the caller
is responsible for calling tp_connection_upgrade_contacts() with the desired
features (as given by tp_simple_client_factory_dup_contact_features()).

For this function to work properly, tp_connection_has_immortal_handles()
must return %TRUE for @connection.</doc>
        <source-position filename="simple-client-factory.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="845">a reference to a #TpContact.</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="828">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="829">a #TpConnection whose #TpProxy:factory is this object</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="handle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="830">a #TpHandle</doc>
            <type name="Handle" c:type="TpHandle"/>
          </parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="831">a string representing the contact's identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_contact_by_id_async"
              c:identifier="tp_simple_client_factory_ensure_contact_by_id_async"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="995">Same as tp_connection_dup_contact_by_id_async(), but prepare the
contact with all features previously passed to
tp_simple_client_factory_add_contact_features().</doc>
        <source-position filename="simple-client-factory.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="997">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="998">a #TpConnection</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="identifier" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="999">a string representing the contact's identifier</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1000">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1001">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_contact_by_id_finish"
              c:identifier="tp_simple_client_factory_ensure_contact_by_id_finish"
              version="0.19.1"
              throws="1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="1030">Finishes tp_simple_client_factory_ensure_contact_by_id_async()</doc>
        <source-position filename="simple-client-factory.h" line="204"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="1038">a #TpContact or %NULL on error.</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1032">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1033">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dbus_daemon"
              c:identifier="tp_simple_client_factory_get_dbus_daemon"
              glib:get-property="dbus-daemon"
              version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="418">&lt;!-- --&gt;</doc>
        <source-position filename="simple-client-factory.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="424">the value of the #TpSimpleClientFactory:dbus-daemon
 property</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="420">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="upgrade_contacts_async"
              c:identifier="tp_simple_client_factory_upgrade_contacts_async"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="902">Same as tp_connection_upgrade_contacts_async(), but prepare contacts with all
features previously passed to
tp_simple_client_factory_add_contact_features().</doc>
        <source-position filename="simple-client-factory.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="904">a #TpSimpleClientFactory object</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="905">a #TpConnection whose #TpProxy:factory is this object</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="n_contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="906">The number of contacts in @contacts (must be at least 1)</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="contacts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="907">An array of #TpContact objects
 associated with @self</doc>
            <array length="1" zero-terminated="0" c:type="TpContact* const*">
              <type name="Contact" c:type="TpContact*"/>
            </array>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="909">a callback to call when the operation finishes</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="910">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="upgrade_contacts_finish"
              c:identifier="tp_simple_client_factory_upgrade_contacts_finish"
              version="0.19.1"
              throws="1">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="944">Finishes tp_simple_client_factory_upgrade_contacts_async()</doc>
        <source-position filename="simple-client-factory.h" line="191"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-client-factory.c"
               line="954">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="946">a #TpSimpleClientFactory</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="947">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="contacts"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="container"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="948">
 a location to set a #GPtrArray of upgraded #TpContact, or %NULL.</doc>
            <array name="GLib.PtrArray" c:type="GPtrArray**">
              <type name="Contact"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <property name="dbus-daemon"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_dbus_daemon">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="386">The D-Bus daemon for this object.</doc>
        <type name="DBusDaemon"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleClientFactoryPrivate"
              c:type="TpSimpleClientFactoryPrivate*"/>
      </field>
    </class>
    <record name="SimpleClientFactoryClass"
            c:type="TpSimpleClientFactoryClass"
            glib:is-gtype-struct-for="SimpleClientFactory"
            version="0.15.5">
      <doc xml:space="preserve"
           filename="simple-client-factory.c"
           line="79">The class structure for #TpSimpleClientFactory.

#TpSimpleClientFactory maintains a cache of previously-constructed proxy
objects, so the implementations of @create_account,
@create_connection, @create_channel, and @create_contact may assume that a
new object should be created when they are called. The default
implementations create unadorned instances of the relevant classes;
subclasses of the factory may choose to create more interesting proxy
subclasses.

The default implementation of @dup_channel_features returns
#TP_CHANNEL_FEATURE_CORE, plus all features passed to
tp_simple_client_factory_add_channel_features() by the application.
Subclasses may override this method to prepare more interesting features
from subclasses of #TpChannel, for instance. The default implementations of
the other &lt;function&gt;dup_x_features&lt;/function&gt; methods behave similarly.</doc>
      <source-position filename="simple-client-factory.h" line="82"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="simple-client-factory.c"
             line="81">the parent</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="create_account" introspectable="0">
        <callback name="create_account" introspectable="0" throws="1">
          <source-position filename="simple-client-factory.h" line="48"/>
          <return-value>
            <type name="Account" c:type="TpAccount*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="object_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="immutable_properties" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="const GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_account_features">
        <callback name="dup_account_features">
          <source-position filename="simple-client-factory.h" line="52"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="492">a newly allocated
 #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="GLib.Quark"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="486">a #TpSimpleClientFactory object</doc>
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="account" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="487">a #TpAccount</doc>
              <type name="Account" c:type="TpAccount*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_connection" introspectable="0">
        <callback name="create_connection" introspectable="0" throws="1">
          <source-position filename="simple-client-factory.h" line="56"/>
          <return-value>
            <type name="Connection" c:type="TpConnection*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="object_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="immutable_properties" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="const GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_connection_features">
        <callback name="dup_connection_features">
          <source-position filename="simple-client-factory.h" line="60"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="620">a newly allocated
 #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="GLib.Quark"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="614">a #TpSimpleClientFactory object</doc>
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="615">a #TpConnection</doc>
              <type name="Connection" c:type="TpConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_channel" introspectable="0">
        <callback name="create_channel" introspectable="0" throws="1">
          <source-position filename="simple-client-factory.h" line="64"/>
          <return-value>
            <type name="Channel" c:type="TpChannel*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="TpConnection*"/>
            </parameter>
            <parameter name="object_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="immutable_properties" transfer-ownership="none">
              <type name="GLib.HashTable" c:type="const GHashTable*">
                <type name="gpointer" c:type="gpointer"/>
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_channel_features">
        <callback name="dup_channel_features">
          <source-position filename="simple-client-factory.h" line="69"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="753">a newly allocated
 #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="GLib.Quark"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="747">a #TpSimpleClientFactory object</doc>
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="channel" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="748">a #TpChannel</doc>
              <type name="Channel" c:type="TpChannel*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="create_contact" introspectable="0">
        <callback name="create_contact" introspectable="0">
          <source-position filename="simple-client-factory.h" line="73"/>
          <return-value>
            <type name="Contact" c:type="TpContact*"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <type name="Connection" c:type="TpConnection*"/>
            </parameter>
            <parameter name="handle" transfer-ownership="none">
              <type name="Handle" c:type="TpHandle"/>
            </parameter>
            <parameter name="identifier" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="dup_contact_features">
        <callback name="dup_contact_features">
          <source-position filename="simple-client-factory.h" line="77"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="simple-client-factory.c"
                 line="1059">a newly
 allocated #GArray</doc>
            <array name="GLib.Array" c:type="GArray*">
              <type name="ContactFeature"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="1053">a #TpSimpleClientFactory object</doc>
              <type name="SimpleClientFactory"
                    c:type="TpSimpleClientFactory*"/>
            </parameter>
            <parameter name="connection" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="simple-client-factory.c"
                   line="1054">a #TpConnection</doc>
              <type name="Connection" c:type="TpConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="20">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="SimpleClientFactoryPrivate"
            c:type="TpSimpleClientFactoryPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="simple-client-factory.h" line="40"/>
    </record>
    <class name="SimpleHandler"
           c:symbol-prefix="simple_handler"
           c:type="TpSimpleHandler"
           version="0.11.6"
           parent="BaseClient"
           glib:type-name="TpSimpleHandler"
           glib:get-type="tp_simple_handler_get_type"
           glib:type-struct="SimpleHandlerClass">
      <doc xml:space="preserve"
           filename="simple-handler.c"
           line="66">Data structure representing a simple Handler implementation.</doc>
      <source-position filename="simple-handler.h" line="44"/>
      <constructor name="new"
                   c:identifier="tp_simple_handler_new"
                   version="0.11.6"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="315">Convenient function to create a new #TpSimpleHandler instance.

If @dbus is not the result of tp_dbus_daemon_dup(), you should call
tp_simple_handler_new_with_am() instead, so that #TpAccount,
#TpConnection and #TpContact instances can be shared between modules.</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_simple_handler_new_with_am() instead.</doc-deprecated>
        <source-position filename="simple-handler.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="335">a new #TpSimpleHandler</doc>
          <type name="SimpleHandler" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="317">a #TpDBusDaemon object, may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="bypass_approval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="318">the value of the Handler.BypassApproval D-Bus property
(see tp_base_client_set_handler_bypass_approval() for details)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="requests" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="320">whether this handler should implement Requests (see
tp_base_client_set_handler_request_notification() for details)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="322">the name of the Handler (see #TpBaseClient:name for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="323">the value of the #TpBaseClient:uniquify-name property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="324">the function called when HandleChannels is called</doc>
            <type name="SimpleHandlerHandleChannelsImpl"
                  c:type="TpSimpleHandlerHandleChannelsImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="325">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="326">called with @user_data as its argument when the #TpSimpleHandler
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_am"
                   c:identifier="tp_simple_handler_new_with_am"
                   version="0.11.14">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="362">Convenient function to create a new #TpSimpleHandler instance with a
specified #TpAccountManager.

It is not necessary to prepare any features on @account_manager before
calling this function.</doc>
        <source-position filename="simple-handler.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="382">a new #TpSimpleHandler</doc>
          <type name="SimpleHandler" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="account_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="364">an account manager, which may not be %NULL</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </parameter>
          <parameter name="bypass_approval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="365">the value of the Handler.BypassApproval D-Bus property
(see tp_base_client_set_handler_bypass_approval() for details)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="requests" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="367">whether this handler should implement Requests (see
tp_base_client_set_handler_request_notification() for details)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="369">the name of the Handler (see #TpBaseClient:name for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="370">the value of the #TpBaseClient:uniquify-name property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="371">the function called when HandleChannels is called</doc>
            <type name="SimpleHandlerHandleChannelsImpl"
                  c:type="TpSimpleHandlerHandleChannelsImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="372">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="373">called with @user_data as its argument when the #TpSimpleHandler
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_factory"
                   c:identifier="tp_simple_handler_new_with_factory"
                   version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="408">Convenient function to create a new #TpSimpleHandler instance with a
specified #TpSimpleClientFactory.</doc>
        <source-position filename="simple-handler.h" line="102"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="425">a new #TpSimpleHandler</doc>
          <type name="SimpleHandler" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="410">a #TpSimpleClientFactory, which may not be %NULL</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </parameter>
          <parameter name="bypass_approval" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="411">the value of the Handler.BypassApproval D-Bus property
(see tp_base_client_set_handler_bypass_approval() for details)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="requests" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="413">whether this handler should implement Requests (see
tp_base_client_set_handler_request_notification() for details)</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="415">the name of the Handler (see #TpBaseClient:name for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="416">the value of the #TpBaseClient:uniquify-name property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="6"
                     destroy="7">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="417">the function called when HandleChannels is called</doc>
            <type name="SimpleHandlerHandleChannelsImpl"
                  c:type="TpSimpleHandlerHandleChannelsImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="418">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-handler.c"
                 line="419">called with @user_data as its argument when the #TpSimpleHandler
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="bypass-approval"
                version="0.11.6"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="240">The value of the Handler.BypassApproval D-Bus property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="callback"
                version="0.11.6"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="268">The #TpSimpleHandlerHandleChannelsImpl callback implementing the
HandleChannels D-Bus method.

This property can't be %NULL.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="destroy"
                version="0.11.6"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="298">The #GDestroyNotify function called to free #TpSimpleHandler:user-data
when the #TpSimpleHandler is destroyed.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="requests"
                version="0.11.6"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="254">If %TRUE, the Handler will implement the Requests interface</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user-data"
                version="0.11.6"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-handler.c"
             line="285">The user-data pointer passed to #TpSimpleHandler:callback.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="BaseClient" c:type="TpBaseClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleHandlerPrivate" c:type="TpSimpleHandlerPrivate*"/>
      </field>
    </class>
    <record name="SimpleHandlerClass"
            c:type="TpSimpleHandlerClass"
            glib:is-gtype-struct-for="SimpleHandler"
            version="0.11.6">
      <doc xml:space="preserve"
           filename="simple-handler.c"
           line="74">The class of a #TpSimpleHandler.</doc>
      <source-position filename="simple-handler.h" line="44"/>
      <field name="parent_class" readable="0" private="1">
        <type name="BaseClientClass" c:type="TpBaseClientClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <callback name="SimpleHandlerHandleChannelsImpl"
              c:type="TpSimpleHandlerHandleChannelsImpl"
              version="0.11.6">
      <doc xml:space="preserve"
           filename="simple-handler.c"
           line="82">Signature of the implementation of the HandleChannels method.

This function must call either tp_handle_channels_context_accept(),
tp_handle_channels_context_delay() or tp_handle_channels_context_fail()
on @context before it returns.</doc>
      <source-position filename="simple-handler.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="84">a #TpSimpleHandler instance</doc>
          <type name="SimpleHandler" c:type="TpSimpleHandler*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="85">a #TpAccount having %TP_ACCOUNT_FEATURE_CORE prepared if possible</doc>
          <type name="Account" c:type="TpAccount*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="86">a #TpConnection having %TP_CONNECTION_FEATURE_CORE prepared
if possible</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="88">a #GList of #TpChannel,
 all having %TP_CHANNEL_FEATURE_CORE prepared if possible</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </parameter>
        <parameter name="requests_satisfied" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="90">a #GList of
#TpChannelRequest having their object-path defined but are not guaranteed
to be prepared.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </parameter>
        <parameter name="user_action_time" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="93">the time at which user action occurred, or one of the
 special values %TP_USER_ACTION_TIME_NOT_USER_ACTION or
 %TP_USER_ACTION_TIME_CURRENT_TIME
 (see #TpAccountChannelRequest:user-action-time for details)</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="97">a #TpHandleChannelsContext representing the context of this
 D-Bus call</doc>
          <type name="HandleChannelsContext"
                c:type="TpHandleChannelsContext*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="7">
          <doc xml:space="preserve"
               filename="simple-handler.c"
               line="99">arbitrary user-supplied data passed to tp_simple_handler_new()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SimpleHandlerPrivate"
            c:type="TpSimpleHandlerPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="simple-handler.h" line="38"/>
    </record>
    <class name="SimpleObserver"
           c:symbol-prefix="simple_observer"
           c:type="TpSimpleObserver"
           version="0.11.5"
           parent="BaseClient"
           glib:type-name="TpSimpleObserver"
           glib:get-type="tp_simple_observer_get_type"
           glib:type-struct="SimpleObserverClass">
      <doc xml:space="preserve"
           filename="simple-observer.c"
           line="63">Data structure representing a simple Observer implementation.</doc>
      <source-position filename="simple-observer.h" line="44"/>
      <constructor name="new"
                   c:identifier="tp_simple_observer_new"
                   version="0.11.5"
                   deprecated="1">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="290">Convenient function to create a new #TpSimpleObserver instance.

If @dbus is not the result of tp_dbus_daemon_dup(), you should call
tp_simple_observer_new_with_am() instead, so that #TpAccount,
#TpConnection and #TpContact instances can be shared between modules.</doc>
        <doc-deprecated xml:space="preserve">New code should use tp_simple_observer_new_with_am() instead.</doc-deprecated>
        <source-position filename="simple-observer.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="307">a new #TpSimpleObserver</doc>
          <type name="SimpleObserver" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="dbus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="292">a #TpDBusDaemon object, may not be %NULL</doc>
            <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
          </parameter>
          <parameter name="recover" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="293">the value of the Observer.Recover D-Bus property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="294">the name of the Observer (see #TpBaseClient:name: for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="295">the value of the #TpBaseClient:uniquify-name: property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="296">the function called when ObserveChannels is called</doc>
            <type name="SimpleObserverObserveChannelsImpl"
                  c:type="TpSimpleObserverObserveChannelsImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="297">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="298">called with the user_data as argument, when the #TpSimpleObserver
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_am"
                   c:identifier="tp_simple_observer_new_with_am"
                   version="0.11.14">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="332">Convenient function to create a new #TpSimpleObserver instance with a
specified #TpAccountManager.

It is not necessary to prepare any features on @account_manager before
calling this function.</doc>
        <source-position filename="simple-observer.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="349">a new #TpSimpleObserver</doc>
          <type name="SimpleObserver" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="account_manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="334">an account manager, which may not be %NULL</doc>
            <type name="AccountManager" c:type="TpAccountManager*"/>
          </parameter>
          <parameter name="recover" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="335">the value of the Observer.Recover D-Bus property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="336">the name of the Observer (see #TpBaseClient:name: for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="337">the value of the #TpBaseClient:uniquify-name: property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="338">the function called when ObserveChannels is called</doc>
            <type name="SimpleObserverObserveChannelsImpl"
                  c:type="TpSimpleObserverObserveChannelsImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="339">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="340">called with the user_data as argument, when the #TpSimpleObserver
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_factory"
                   c:identifier="tp_simple_observer_new_with_factory"
                   version="0.15.5">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="373">Convenient function to create a new #TpSimpleObserver instance with a
specified #TpSimpleClientFactory.</doc>
        <source-position filename="simple-observer.h" line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="387">a new #TpSimpleObserver</doc>
          <type name="SimpleObserver" c:type="TpBaseClient*"/>
        </return-value>
        <parameters>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="375">a #TpSimpleClientFactory, which may not be %NULL</doc>
            <type name="SimpleClientFactory" c:type="TpSimpleClientFactory*"/>
          </parameter>
          <parameter name="recover" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="376">the value of the Observer.Recover D-Bus property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="377">the name of the Observer (see #TpBaseClient:name: for details)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uniquify" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="378">the value of the #TpBaseClient:uniquify-name: property</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="5"
                     destroy="6">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="379">the function called when ObserveChannels is called</doc>
            <type name="SimpleObserverObserveChannelsImpl"
                  c:type="TpSimpleObserverObserveChannelsImpl"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="380">arbitrary user-supplied data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="simple-observer.c"
                 line="381">called with the user_data as argument, when the #TpSimpleObserver
is destroyed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="callback"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="242">The TpSimpleObserverObserveChannelsImpl callback implementing the
ObserveChannels D-Bus method.

This property can't be %NULL.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="destroy"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="273">The #GDestroyNotify function called to free the user-data pointer when
the #TpSimpleObserver is destroyed.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="recover"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="228">The value of the Observer.Recover D-Bus property.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user-data"
                version="0.11.5"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="simple-observer.c"
             line="259">The user-data pointer passed to the callback implementing the
ObserveChannels D-Bus method.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="BaseClient" c:type="TpBaseClient"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SimpleObserverPrivate" c:type="TpSimpleObserverPrivate*"/>
      </field>
    </class>
    <record name="SimpleObserverClass"
            c:type="TpSimpleObserverClass"
            glib:is-gtype-struct-for="SimpleObserver"
            version="0.11.5">
      <doc xml:space="preserve"
           filename="simple-observer.c"
           line="71">The class of a #TpSimpleObserver.</doc>
      <source-position filename="simple-observer.h" line="44"/>
      <field name="parent_class" readable="0" private="1">
        <type name="BaseClientClass" c:type="TpBaseClientClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <callback name="SimpleObserverObserveChannelsImpl"
              c:type="TpSimpleObserverObserveChannelsImpl"
              version="0.11.5">
      <doc xml:space="preserve"
           filename="simple-observer.c"
           line="79">Signature of the implementation of the ObserveChannels method.

This function must call either tp_observe_channels_context_accept(),
tp_observe_channels_context_delay() or tp_observe_channels_context_fail()
on @context before it returns.</doc>
      <source-position filename="simple-observer.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="observer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="81">a #TpSimpleObserver instance</doc>
          <type name="SimpleObserver" c:type="TpSimpleObserver*"/>
        </parameter>
        <parameter name="account" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="82">a #TpAccount having %TP_ACCOUNT_FEATURE_CORE prepared if possible</doc>
          <type name="Account" c:type="TpAccount*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="83">a #TpConnection having %TP_CONNECTION_FEATURE_CORE prepared
if possible</doc>
          <type name="Connection" c:type="TpConnection*"/>
        </parameter>
        <parameter name="channels" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="85">a #GList of #TpChannel,
 all having %TP_CHANNEL_FEATURE_CORE prepared if possible</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Channel"/>
          </type>
        </parameter>
        <parameter name="dispatch_operation"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="87">a #TpChannelDispatchOperation or %NULL;
 the dispatch_operation is not guaranteed to be prepared</doc>
          <type name="ChannelDispatchOperation"
                c:type="TpChannelDispatchOperation*"/>
        </parameter>
        <parameter name="requests" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="89">a #GList of
 #TpChannelRequest, all having their object-path defined but are not
 guaranteed to be prepared.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ChannelRequest"/>
          </type>
        </parameter>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="92">a #TpObserveChannelsContext representing the context of this
 D-Bus call</doc>
          <type name="ObserveChannelsContext"
                c:type="TpObserveChannelsContext*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="7">
          <doc xml:space="preserve"
               filename="simple-observer.c"
               line="94">arbitrary user-supplied data passed to tp_simple_observer_new()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SimpleObserverPrivate"
            c:type="TpSimpleObserverPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="simple-observer.h" line="38"/>
    </record>
    <enumeration name="SocketAccessControl" c:type="TpSocketAccessControl">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1055">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="536"/>
      <member name="localhost"
              value="0"
              c:identifier="TP_SOCKET_ACCESS_CONTROL_LOCALHOST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1057">&lt;![CDATA[           The IP or Unix socket can be accessed by any local user (e.g.             a Unix socket that accepts all local connections, or an IP socket             listening on 127.0.0.1 (or ::1) or rejecting connections not from             that address). The associated variant must be ignored.            For a D-Bus tube, this means that the "same user" access             control typically provided by default in D-Bus implementations             SHOULD be disabled. If the socket is only available to local users             (e.g. a Unix socket, an IPv4 socket bound to 127.0.0.1, or an             IPv6 socket bound to ::1), the ANONYMOUS             authentication mechanism MAY be enabled.         ]]&gt;</doc>
      </member>
      <member name="port"
              value="1"
              c:identifier="TP_SOCKET_ACCESS_CONTROL_PORT">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1058">&lt;![CDATA[           May only be used on IP sockets, and only for Stream tubes.                      The associated variant must contain           a struct Socket_Address_IPv4 (or Socket_Address_IPv6)           containing the string form of an IP address of the appropriate           version, and a port number. The socket can only be accessed if the           connecting process has that address and port number; all other           connections will be rejected.         ]]&gt;</doc>
      </member>
      <member name="netmask"
              value="2"
              c:identifier="TP_SOCKET_ACCESS_CONTROL_NETMASK">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1059">&lt;![CDATA[           May only be used on IP sockets. The associated variant must contain           a struct Socket_Netmask_IPv4 (or Socket_Netmask_IPv6) with           signature (sy), containing the string form of an           IP address of the appropriate version, and a prefix length "n".           The socket can only be accessed if the first n bits of the           connecting address match the first n bits of the given address.         ]]&gt;</doc>
      </member>
      <member name="credentials"
              value="3"
              c:identifier="TP_SOCKET_ACCESS_CONTROL_CREDENTIALS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1060">&lt;![CDATA[           The high-level meaning of this access control type is that             only the same user (e.g. same numeric Unix uid) is allowed to             interact with the tube. Exactly how this is achieved varies by             channel type.            For StreamTube channels, this access control type             may only be used on UNIX sockets.             The connecting process must send a byte when             it first connects, which is not considered to be part of the data             stream. If the operating system uses sendmsg() with SCM_CREDS or             SCM_CREDENTIALS to pass credentials over sockets, the connecting             process must do so if possible; if not, it must still send the             byte, without any attached credentials. (This mechanism is             very similar to the first byte of a D-Bus connection, except that             in D-Bus the byte is always zero, whereas in Tubes it can be             nonzero.)            For DBusTube channels, this access control type             may be used on any type of socket, and there is no extra byte             added by Telepathy at the beginning of the stream: all bytes in             the stream are part of the D-Bus tube connection. The connecting             process should prove its identity via any of the SASL             authentication mechanisms usually used for D-Bus (in typical             D-Bus implementations this involves either sending and receiving             credentials as above, or demonstrating the ability to write to a             file in the user's home directory).            In either case, the listening process will disconnect the             connection unless it can determine by OS-specific means that             the connecting process has the same user ID as the listening             process.            In either tube type, the associated variant must be ignored.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="SocketAddressType" c:type="TpSocketAddressType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1034">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="527"/>
      <member name="unix" value="0" c:identifier="TP_SOCKET_ADDRESS_TYPE_UNIX">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1036">&lt;![CDATA[           A Unix socket. The address variant contains a byte-array, signature 'ay',           containing the path of the socket.         ]]&gt;</doc>
      </member>
      <member name="abstract_unix"
              value="1"
              c:identifier="TP_SOCKET_ADDRESS_TYPE_ABSTRACT_UNIX">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1037">&lt;![CDATA[           An abstract Unix socket. The address variant contains a byte-array,           signature 'ay', containing the path of the socket including the           leading null byte.         ]]&gt;</doc>
      </member>
      <member name="ipv4" value="2" c:identifier="TP_SOCKET_ADDRESS_TYPE_IPV4">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1038">&lt;![CDATA[           An IPv4 socket. The address variant contains a Socket_Address_IPv4,           i.e. a structure with signature (sq)           in which the string is an IPv4 dotted-quad address literal           (and must not be a DNS name), while the 16-bit unsigned integer is           the port number.         ]]&gt;</doc>
      </member>
      <member name="ipv6" value="3" c:identifier="TP_SOCKET_ADDRESS_TYPE_IPV6">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1039">&lt;![CDATA[           An IPv6 socket. The address variant contains a Socket_Address_IPv6,           i.e. a structure with signature (sq)           in which the string is an IPv6 address literal as specified in           RFC2373 (and must not be a DNS name), while the 16-bit unsigned           integer is the port number.         ]]&gt;</doc>
      </member>
    </enumeration>
    <bitfield name="StorageRestrictionFlags"
              c:type="TpStorageRestrictionFlags">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1147">&lt;![CDATA[         Flags indicating restrictions imposed on an Account by its storage         method.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="578"/>
      <member name="parameters"
              value="1"
              c:identifier="TP_STORAGE_RESTRICTION_FLAG_CANNOT_SET_PARAMETERS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1149">&lt;![CDATA[           The account's Parameters property can't be changed by calling           UpdateParameters.         ]]&gt;</doc>
      </member>
      <member name="enabled"
              value="2"
              c:identifier="TP_STORAGE_RESTRICTION_FLAG_CANNOT_SET_ENABLED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1150">&lt;![CDATA[           The account can't be enabled/disabled by setting the Enabled property.         ]]&gt;</doc>
      </member>
      <member name="presence"
              value="4"
              c:identifier="TP_STORAGE_RESTRICTION_FLAG_CANNOT_SET_PRESENCE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1151">&lt;![CDATA[           The account's presence can't be changed by setting the RequestedPresence and AutomaticPresence properties.         ]]&gt;</doc>
      </member>
      <member name="service"
              value="8"
              c:identifier="TP_STORAGE_RESTRICTION_FLAG_CANNOT_SET_SERVICE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1152">&lt;![CDATA[           The account's Service           property cannot be changed.         ]]&gt;</doc>
      </member>
    </bitfield>
    <enumeration name="StreamComponent" c:type="TpStreamComponent">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1352">&lt;![CDATA[         Media streams can use more than one UDP socket: one for RTP (data)         and one for RTCP (control). Most of the time, they are adjacent         to each other, but some protocols (xmpp) signal each port separately.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="668"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_STREAM_COMPONENT_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1354">&lt;![CDATA[           The stream transport type is unknown or not applicable           (should not appear over dbus).         ]]&gt;</doc>
      </member>
      <member name="data" value="1" c:identifier="TP_STREAM_COMPONENT_DATA">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1355">&lt;![CDATA[           This is the high-traffic data socket, containing the audio/video           data for the stream.         ]]&gt;</doc>
      </member>
      <member name="control"
              value="2"
              c:identifier="TP_STREAM_COMPONENT_CONTROL">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1356">&lt;![CDATA[           This is the low-traffic control socket, usually containing feedback           about packet loss etc.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="StreamEndpointState" c:type="TpStreamEndpointState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1423">&lt;![CDATA[         Represents the state of ICE negotiation for a single component of a         stream to an endpoint.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="699"/>
      <member name="connecting"
              value="0"
              c:identifier="TP_STREAM_ENDPOINT_STATE_CONNECTING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1425">&lt;![CDATA[           Candidate gathering and connectivity checks are in progress.         ]]&gt;</doc>
      </member>
      <member name="provisionally_connected"
              value="1"
              c:identifier="TP_STREAM_ENDPOINT_STATE_PROVISIONALLY_CONNECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1426">&lt;![CDATA[           The streaming implementation has found at least one working           candidate pair. It is possible to send media at this point, but the           controlling side has yet to negotiate the final candidates for use           in this call.         ]]&gt;</doc>
      </member>
      <member name="fully_connected"
              value="2"
              c:identifier="TP_STREAM_ENDPOINT_STATE_FULLY_CONNECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1427">&lt;![CDATA[           This component of the stream is connected, and an updated offer has           been sent and accepted (finalising the candidates to be used for the           call). This should be set by the CM in response to           AcceptSelectedCandidatePair.         ]]&gt;</doc>
      </member>
      <member name="exhausted_candidates"
              value="3"
              c:identifier="TP_STREAM_ENDPOINT_STATE_EXHAUSTED_CANDIDATES">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1428">&lt;![CDATA[           The streaming implementation has tried connecting to all of the           available candidates and none of them have connected. This is           distinct from Failed, because the CM might be able to provide more           candidates later (more likely in XMPP than SIP).         ]]&gt;</doc>
      </member>
      <member name="failed"
              value="4"
              c:identifier="TP_STREAM_ENDPOINT_STATE_FAILED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1429">&lt;![CDATA[           The CM and streaming implementation are in agreement that it is           impossible to connect to this endpoint. This value should only be           set by the CM.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="StreamFlowState" c:type="TpStreamFlowState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1304">&lt;![CDATA[         The type of SendingState         and ReceivingState.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="649"/>
      <member name="stopped"
              value="0"
              c:identifier="TP_STREAM_FLOW_STATE_STOPPED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1306">&lt;![CDATA[           No data is flowing (or expected to be flowing) at this time.         ]]&gt;</doc>
      </member>
      <member name="pending_start"
              value="1"
              c:identifier="TP_STREAM_FLOW_STATE_PENDING_START">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1307">&lt;![CDATA[           The streaming implementation has been told to start or receiving,           but has not yet indicated that it is doing so.         ]]&gt;</doc>
      </member>
      <member name="pending_stop"
              value="2"
              c:identifier="TP_STREAM_FLOW_STATE_PENDING_STOP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1308">&lt;![CDATA[           The streaming implementation has been told to stop sending or           receiving data, but it has not yet indicated that it has done so.         ]]&gt;</doc>
      </member>
      <member name="started"
              value="3"
              c:identifier="TP_STREAM_FLOW_STATE_STARTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1309">&lt;![CDATA[           The streaming implementation is successfully sending or receiving           data, and everything is going swimmingly.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="StreamTransportType" c:type="TpStreamTransportType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1374">&lt;![CDATA[         A transport that can be used for streaming.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="680"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_STREAM_TRANSPORT_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1376">&lt;![CDATA[           The stream transport type is unknown or not applicable           (for streams that do not have a configurable transport).         ]]&gt;</doc>
      </member>
      <member name="raw_udp"
              value="1"
              c:identifier="TP_STREAM_TRANSPORT_TYPE_RAW_UDP">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1377">&lt;![CDATA[           Raw UDP, with or without STUN. All streaming clients are assumed to           support this transport, so there is no handler capability token for           it in the Call1 interface.           [This corresponds to "none" or "stun" in the old Media.StreamHandler           interface.]         ]]&gt;</doc>
      </member>
      <member name="ice" value="2" c:identifier="TP_STREAM_TRANSPORT_TYPE_ICE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1378">&lt;![CDATA[           Interactive Connectivity Establishment, as defined by RFC           5245. Note that this value covers ICE-UDP only.           [This corresponds to "ice-udp" in the old           Media.StreamHandler interface.]         ]]&gt;</doc>
      </member>
      <member name="gtalk_p2p"
              value="3"
              c:identifier="TP_STREAM_TRANSPORT_TYPE_GTALK_P2P">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1379">&lt;![CDATA[           Google Talk peer-to-peer connectivity establishment, as implemented           by libjingle 0.3.           [This corresponds to "gtalk-p2p" in the old Media.StreamHandler           interface.]         ]]&gt;</doc>
      </member>
      <member name="wlm_2009"
              value="4"
              c:identifier="TP_STREAM_TRANSPORT_TYPE_WLM_2009">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1380">&lt;![CDATA[           The transport used by Windows Live Messenger 2009 or later, which           resembles ICE draft 19.           [This corresponds to "wlm-2009" in the old Media.StreamHandler           interface.]         ]]&gt;</doc>
      </member>
      <member name="shm" value="5" c:identifier="TP_STREAM_TRANSPORT_TYPE_SHM">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1381">&lt;![CDATA[           Shared memory transport, as implemented by the GStreamer           shmsrc and shmsink plugins.         ]]&gt;</doc>
      </member>
      <member name="multicast"
              value="6"
              c:identifier="TP_STREAM_TRANSPORT_TYPE_MULTICAST">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1382">&lt;![CDATA[           Multicast transport.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="StreamTubeChannel"
           c:symbol-prefix="stream_tube_channel"
           c:type="TpStreamTubeChannel"
           version="0.13.2"
           parent="Channel"
           glib:type-name="TpStreamTubeChannel"
           glib:get-type="tp_stream_tube_channel_get_type"
           glib:type-struct="StreamTubeChannelClass">
      <doc xml:space="preserve"
           filename="stream-tube-channel.c"
           line="32">Data structure representing a #TpStreamTubeChannel.</doc>
      <source-position filename="stream-tube-channel.h" line="58"/>
      <constructor name="new"
                   c:identifier="tp_stream_tube_channel_new"
                   version="0.13.2"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="509">Creates a new #TpStreamTubeChannel proxy object from the provided path and
properties. Most developers will not need to use this function; use
#TpAutomaticProxyFactory to automatically create #TpStreamTubeChannel proxy
objects.</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_channel() instead.</doc-deprecated>
        <source-position filename="stream-tube-channel.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="stream-tube-channel.c"
               line="525">a newly-created #TpStreamTubeChannel proxy</doc>
          <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
        </return-value>
        <parameters>
          <parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="511">a #TpConnection; may not be %NULL</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="512">the object path of the channel; may not be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="513">
 the immutable properties of the channel,
 as signalled by the NewChannel D-Bus signal or returned by the
 CreateChannel and EnsureChannel D-Bus methods: a mapping from
 strings (D-Bus interface name + "." + property name) to #GValue instances</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <method name="accept_async"
              c:identifier="tp_stream_tube_channel_accept_async"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="847">Accept an incoming stream tube. When the tube has been accepted, @callback
will be called. You can then call tp_stream_tube_channel_accept_finish()
to get a #TpStreamTubeConnection connected to the tube.</doc>
        <source-position filename="stream-tube-channel.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="849">an incoming #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="850">a callback to call when the tube has been accepted</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="851">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_finish"
              c:identifier="tp_stream_tube_channel_accept_finish"
              version="0.13.2"
              throws="1">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="958">Finishes accepting an incoming stream tube. The returned
#TpStreamTubeConnection can then be used to exchange data through the tube.</doc>
        <source-position filename="stream-tube-channel.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="stream-tube-channel.c"
               line="967">a newly created #TpStreamTubeConnection</doc>
          <type name="StreamTubeConnection" c:type="TpStreamTubeConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="960">a #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="961">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_parameters_vardict"
              c:identifier="tp_stream_tube_channel_dup_parameters_vardict"
              version="0.19.10">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="1593">Return the parameters of the dbus-tube channel in a variant of
type %G_VARIANT_TYPE_VARDICT whose keys are strings representing
parameter names and values are variants representing corresponding
parameter values set by the offerer when offering this channel.

The GVariant returned is %NULL if this is an outgoing tube that has not
yet been offered or the parameters property has not been set.

Use g_variant_lookup(), g_variant_lookup_value(), or tp_vardict_get_uint32()
and similar functions for convenient access to the values.</doc>
        <source-position filename="stream-tube-channel.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="stream-tube-channel.c"
               line="1608">a new reference to a #GVariant</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1595">a #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parameters"
              c:identifier="tp_stream_tube_channel_get_parameters"
              version="0.13.2"
              introspectable="0">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="1576">Return the #TpStreamTubeChannel:parameters property</doc>
        <source-position filename="stream-tube-channel.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="stream-tube-channel.c"
               line="1582">
the value of #TpStreamTubeChannel:parameters</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1578">a #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service"
              c:identifier="tp_stream_tube_channel_get_service"
              glib:get-property="service"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="1556">Return the #TpStreamTubeChannel:service property</doc>
        <source-position filename="stream-tube-channel.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="stream-tube-channel.c"
               line="1562">the value of #TpStreamTubeChannel:service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1558">a #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="offer_async"
              c:identifier="tp_stream_tube_channel_offer_async"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="1412">Offer an outgoing stream tube. When the tube has been offered, @callback
will be called. You can then call tp_stream_tube_channel_offer_finish()
to get the result of the operation.

You have to connect to the #TpStreamTubeChannel::incoming signal to get a
#TpStreamTubeConnection each time a contact establishes a connection to
the tube.</doc>
        <source-position filename="stream-tube-channel.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1414">an outgoing #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
          <parameter name="params"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1415">parameters of the tube, or %NULL</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1416">a callback to call when the tube has been offered</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1417">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="offer_finish"
              c:identifier="tp_stream_tube_channel_offer_finish"
              version="0.13.2"
              throws="1">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="1536">Finishes offering an outgoing stream tube.</doc>
        <source-position filename="stream-tube-channel.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="stream-tube-channel.c"
               line="1544">%TRUE when a Tube has been successfully offered; %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1538">a #TpStreamTubeChannel</doc>
            <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="1539">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="parameters"
                version="0.13.2"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="442">A string to #GValue #GHashTable representing the parameters of the tube.

Will be %NULL for outgoing tubes until the tube has been offered.

In high-level language bindings, use
#TpStreamTubeChannel:parameters-vardict or
tp_stream_tube_channel_dup_parameters_vardict() to get the same
information in a more convenient format.</doc>
        <type/>
      </property>
      <property name="parameters-vardict"
                version="0.19.10"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="462">A %G_VARIANT_TYPE_VARDICT representing the parameters of the tube.

Will be %NULL for outgoing tubes until the tube has been offered.</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="service"
                version="0.13.2"
                transfer-ownership="none"
                getter="get_service"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="429">A string representing the service name that will be used over the tube.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Channel" c:type="TpChannel"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="StreamTubeChannelPrivate"
              c:type="TpStreamTubeChannelPrivate*"/>
      </field>
      <glib:signal name="incoming" when="last">
        <doc xml:space="preserve"
             filename="stream-tube-channel.c"
             line="478">The ::incoming signal is emitted on offered Tubes when a new incoming
connection is made from a remote user (one accepting the Tube).

Consumers of this signal must take their own references to
@tube_connection</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="tube_connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-channel.c"
                 line="481">the #TpStreamTubeConnection for the connection</doc>
            <type name="StreamTubeConnection"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StreamTubeChannelClass"
            c:type="TpStreamTubeChannelClass"
            glib:is-gtype-struct-for="StreamTubeChannel"
            version="0.13.2">
      <doc xml:space="preserve"
           filename="stream-tube-channel.c"
           line="40">The class of a #TpStreamTubeChannel.</doc>
      <source-position filename="stream-tube-channel.h" line="58"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ChannelClass" c:type="TpChannelClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="StreamTubeChannelPrivate"
            c:type="TpStreamTubeChannelPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="stream-tube-channel.h" line="44"/>
    </record>
    <class name="StreamTubeConnection"
           c:symbol-prefix="stream_tube_connection"
           c:type="TpStreamTubeConnection"
           version="0.13.2"
           parent="GObject.Object"
           glib:type-name="TpStreamTubeConnection"
           glib:get-type="tp_stream_tube_connection_get_type"
           glib:type-struct="StreamTubeConnectionClass">
      <doc xml:space="preserve"
           filename="stream-tube-connection.c"
           line="31">Data structure representing a connection on a #TpStreamTubeChannel.</doc>
      <source-position filename="stream-tube-connection.h" line="38"/>
      <method name="get_channel"
              c:identifier="tp_stream_tube_connection_get_channel"
              glib:get-property="channel"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="287">Return the #TpStreamTubeConnection:channel property</doc>
        <source-position filename="stream-tube-connection.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="stream-tube-connection.c"
               line="293">the value of #TpStreamTubeConnection:channel</doc>
          <type name="StreamTubeChannel" c:type="TpStreamTubeChannel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-connection.c"
                 line="289">a #TpStreamTubeConnection</doc>
            <type name="StreamTubeConnection"
                  c:type="TpStreamTubeConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contact"
              c:identifier="tp_stream_tube_connection_get_contact"
              glib:get-property="contact"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="304">Return the #TpStreamTubeConnection:contact property</doc>
        <source-position filename="stream-tube-connection.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="stream-tube-connection.c"
               line="310">the value of #TpStreamTubeConnection:contact</doc>
          <type name="Contact" c:type="TpContact*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-connection.c"
                 line="306">a #TpStreamTubeConnection</doc>
            <type name="StreamTubeConnection"
                  c:type="TpStreamTubeConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_socket_connection"
              c:identifier="tp_stream_tube_connection_get_socket_connection"
              glib:get-property="socket-connection"
              version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="271">Return the #TpStreamTubeConnection:socket-connection property</doc>
        <source-position filename="stream-tube-connection.h" line="59"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="stream-tube-connection.c"
               line="277">the value of #TpStreamTubeConnection:socket-connection</doc>
          <type name="Gio.SocketConnection" c:type="GSocketConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-connection.c"
                 line="273">a #TpStreamTubeConnection</doc>
            <type name="StreamTubeConnection"
                  c:type="TpStreamTubeConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="channel"
                version="0.13.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_channel">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="207">The #TpStreamTubeChannel channel associated with this connection

This property can't be %NULL.</doc>
        <type name="StreamTubeChannel"/>
      </property>
      <property name="contact"
                version="0.13.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_contact">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="223">The #TpContact with who we are exchanging data through this tube, or
%NULL if we can't safely identify the contact.

If not %NULL, the #TpContact objects is guaranteed to have all of the
features previously passed to
tp_simple_client_factory_add_contact_features() prepared.</doc>
        <type name="Contact"/>
      </property>
      <property name="socket-connection"
                version="0.13.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_socket_connection">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="190">The #GSocketConnection used to transfer data through this connection.
Read-only except during construction.

This property can't be %NULL.</doc>
        <type name="Gio.SocketConnection"/>
      </property>
      <glib:signal name="closed" when="last" version="0.13.2">
        <doc xml:space="preserve"
             filename="stream-tube-connection.c"
             line="241">The ::closed signal is emitted when the connection manager reports that
a tube connection has been closed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="stream-tube-connection.c"
                 line="244">a #GError representing the error reported by the
connection manager</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="StreamTubeConnectionClass"
            c:type="TpStreamTubeConnectionClass"
            disguised="1"
            opaque="1"
            glib:is-gtype-struct-for="StreamTubeConnection"
            version="0.13.2">
      <doc xml:space="preserve"
           filename="stream-tube-connection.c"
           line="39">The class of a #TpStreamTubeConnection.</doc>
      <source-position filename="stream-tube-connection.h" line="38"/>
    </record>
    <record name="StreamTubeConnectionPrivate"
            c:type="TpStreamTubeConnectionPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="stream-tube-connection.h" line="39"/>
    </record>
    <enumeration name="SubscriptionState" c:type="TpSubscriptionState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="159">&lt;![CDATA[         An enumeration indicating whether presence subscription is denied,           denied but pending permission, or allowed. The exact semantics           vary according to where this type is used: see the           subscribe and           publish contact attributes for           details.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="103"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_SUBSCRIPTION_STATE_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="161">&lt;![CDATA[The presence subscription state is           unknown.]]&gt;</doc>
      </member>
      <member name="no" value="1" c:identifier="TP_SUBSCRIPTION_STATE_NO">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="162">&lt;![CDATA[Presence information cannot be seen, and either the           subscription state Removed_Remotely does not apply, or it is           not known whether that state applies.         ]]&gt;</doc>
      </member>
      <member name="removed_remotely"
              value="2"
              c:identifier="TP_SUBSCRIPTION_STATE_REMOVED_REMOTELY">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="163">&lt;![CDATA[Presence information cannot be seen because the           remote contact took action: either the local user's request to           see the remote contact's presence was denied, or the remote           contact requested to see the local user's presence but then           cancelled their request.]]&gt;</doc>
      </member>
      <member name="ask" value="3" c:identifier="TP_SUBSCRIPTION_STATE_ASK">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="164">&lt;![CDATA[Presence information cannot be seen. Permission           to see presence information has been requested, and the request           has not yet been declined or accepted.]]&gt;</doc>
      </member>
      <member name="yes" value="4" c:identifier="TP_SUBSCRIPTION_STATE_YES">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="165">&lt;![CDATA[Presence information can be seen.]]&gt;</doc>
      </member>
    </enumeration>
    <function-macro name="TEXT_CHANNEL"
                    c:identifier="TP_TEXT_CHANNEL"
                    introspectable="0">
      <source-position filename="text-channel.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_CHANNEL_CLASS"
                    c:identifier="TP_TEXT_CHANNEL_CLASS"
                    introspectable="0">
      <source-position filename="text-channel.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TEXT_CHANNEL_GET_CLASS"
                    c:identifier="TP_TEXT_CHANNEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="text-channel.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="TLSCertificate"
           c:symbol-prefix="tls_certificate"
           c:type="TpTLSCertificate"
           version="0.19.0"
           parent="Proxy"
           glib:type-name="TpTLSCertificate"
           glib:get-type="tp_tls_certificate_get_type"
           glib:type-struct="TLSCertificateClass">
      <doc xml:space="preserve"
           filename="tls-certificate.c"
           line="56">A #TpProxy subclass representing a server or peer's TLS certificate
being presented for acceptance/rejection.</doc>
      <source-position filename="tls-certificate.h" line="50"/>
      <constructor name="new"
                   c:identifier="tp_tls_certificate_new"
                   version="0.19.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="594">&lt;!-- --&gt;</doc>
        <source-position filename="tls-certificate.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="603">a new TLS certificate proxy. Prepare the
 feature %TP_TLS_CERTIFICATE_FEATURE_CORE to make it useful.</doc>
          <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
        </return-value>
        <parameters>
          <parameter name="conn_or_chan" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="596">a #TpConnection or #TpChannel parent for this object, whose
 invalidation will also result in invalidation of the returned object</doc>
            <type name="Proxy" c:type="TpProxy*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="598">the object path of this TLS certificate</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_core"
                c:identifier="tp_tls_certificate_get_feature_quark_core">
        <source-position filename="tls-certificate.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="init_known_interfaces"
                c:identifier="tp_tls_certificate_init_known_interfaces"
                version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="812">Ensure that the known interfaces for TpTLSCertificate have been set up.
This is done automatically when necessary, but for correct
overriding of library interfaces by local extensions, you should
call this function before calling
tp_proxy_or_subclass_hook_on_interface_add() with first argument
%TP_TYPE_TLS_CERTIFICATE.</doc>
        <source-position filename="tls-certificate.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="accept_async"
              c:identifier="tp_tls_certificate_accept_async"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="631">Accept this certificate, asynchronously. In or after @callback,
you may call tp_tls_certificate_accept_finish() to check the result.

#GObject::notify::state will also be emitted when the connection manager
signals that the certificate has been accepted.</doc>
        <source-position filename="tls-certificate.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="633">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="634">called on success or failure</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="635">user data for the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="accept_finish"
              c:identifier="tp_tls_certificate_accept_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="663">Check the result of tp_tls_certificate_accept_async().</doc>
        <source-position filename="tls-certificate.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="672">%TRUE if acceptance was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="665">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="666">the result passed to the callback by
 tp_tls_certificate_accept_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_rejection"
              c:identifier="tp_tls_certificate_add_rejection"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="683">Add a pending reason for rejection. The first call to this method is
considered "most important". After calling this method as many times
as are required, call tp_tls_certificate_reject_async() to reject the
certificate.

If @details is a floating reference (see g_variant_ref_sink()),
ownership of @details is taken by this function. This means
you can pass the result of g_variant_new() or g_variant_new_parsed()
directly to this function without additional reference-count management.</doc>
        <source-position filename="tls-certificate.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="685">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="686">the reason for rejection</doc>
            <type name="TLSCertificateRejectReason"
                  c:type="TpTLSCertificateRejectReason"/>
          </parameter>
          <parameter name="dbus_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="687">a D-Bus error name such as %TP_ERROR_STR_CERT_REVOKED, or
 %NULL to derive one from @reason</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="details"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="689">a variant of type
%G_VARIANT_TYPE_VARDICT containing the details of the rejection, or %NULL</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_cert_data"
              c:identifier="tp_tls_certificate_get_cert_data"
              glib:get-property="cert-data"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="906">Return the #TpTLSCertificate:cert-data property</doc>
        <source-position filename="tls-certificate.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="912">the value of #TpTLSCertificate:cert-data property</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="GLib.Bytes"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="908">a #TpTLSCertificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cert_type"
              c:identifier="tp_tls_certificate_get_cert_type"
              glib:get-property="cert-type"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="890">Return the #TpTLSCertificate:cert-type property</doc>
        <source-position filename="tls-certificate.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="896">the value of #TpTLSCertificate:cert-type property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="892">a #TpTLSCertificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nth_rejection"
              c:identifier="tp_tls_certificate_get_nth_rejection"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="865">If this certificate has been rejected and @n is less than the number of
rejection reasons, return a #TpTLSCertificateRejection representing the
@n&lt;!----&gt;th rejection reason (starting from 0).

With @n == 0 this is equivalent to tp_tls_certificate_get_rejection().</doc>
        <source-position filename="tls-certificate.h" line="92"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="877">a #TpTLSCertificateRejection, or %NULL</doc>
          <type name="TLSCertificateRejection"
                c:type="TpTLSCertificateRejection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="867">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
          <parameter name="n" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="868">the rejection reason to return; if 0, return the same thing as
 tp_tls_certificate_get_detailed_rejection()</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_rejection"
              c:identifier="tp_tls_certificate_get_rejection"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="843">If this certificate has been rejected, return a #TpTLSCertificateRejection
indicating the first rejection reason (by convention,
the most important).

If you want to list all the things that are wrong with the certificate
(for instance, it might be self-signed and also have expired)
you can call tp_tls_certificate_get_nth_rejection(), increasing @n until
it returns %NULL.</doc>
        <source-position filename="tls-certificate.h" line="88"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="856">a #TpTLSCertificateRejection, or %NULL</doc>
          <type name="TLSCertificateRejection"
                c:type="TpTLSCertificateRejection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="845">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="tp_tls_certificate_get_state"
              glib:get-property="state"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="922">Return the #TpTLSCertificate:state property</doc>
        <source-position filename="tls-certificate.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="928">the value of #TpTLSCertificate:state property</doc>
          <type name="TLSCertificateState" c:type="TpTLSCertificateState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="924">a #TpTLSCertificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reject_async"
              c:identifier="tp_tls_certificate_reject_async"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="748">Reject this certificate, asynchronously.

Before calling this method, you must call
tp_tls_certificate_add_rejection() at least once, to set the reason(s)
for rejection (for instance, a certificate might be both self-signed and
expired).

In or after @callback,
you may call tp_tls_certificate_reject_finish() to check the result.

#GObject::notify::state will also be emitted when the connection manager
signals that the certificate has been rejected.</doc>
        <source-position filename="tls-certificate.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="750">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="751">called on success or failure</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="752">user data for the callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="reject_finish"
              c:identifier="tp_tls_certificate_reject_finish"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="790">Check the result of tp_tls_certificate_reject_async().</doc>
        <source-position filename="tls-certificate.h" line="115"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate.c"
               line="799">%TRUE if rejection was successful</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="792">a TLS certificate</doc>
            <type name="TLSCertificate" c:type="TpTLSCertificate*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate.c"
                 line="793">the result passed to the callback by
 tp_tls_certificate_reject_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="cert-data"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_cert_data">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="471">The raw data of the certificate or certificate chain, represented
as a #GPtrArray of #GBytes. It should be interpreted
according to #TpTLSCertificate:cert-type.

The first certificate in this array is the server's certificate,
followed by its issuer, followed by the issuer's issuer and so on.

For "x509" certificates, each certificate is an X.509 certificate in
binary (DER) format.

For "pgp" certificates, each certificate is a binary OpenPGP key.</doc>
        <array name="GLib.PtrArray">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </property>
      <property name="cert-type"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_cert_type"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="458">The type of the certificate, typically either "x509" or "pgp".</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="parent"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="510">A #TpConnection or #TpChannel which owns this TLS certificate. If the
parent object is invalidated, the certificate is also invalidated, and
this property is set to %NULL.</doc>
        <type name="Proxy"/>
      </property>
      <property name="state"
                version="0.19.0"
                transfer-ownership="none"
                getter="get_state"
                default-value="0">
        <doc xml:space="preserve"
             filename="tls-certificate.c"
             line="494">The state of this TLS certificate as a #TpTLSCertificateState,
initially %TP_TLS_CERTIFICATE_STATE_PENDING.

#GObject::notify::state will be emitted when this changes.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Proxy" c:type="TpProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TLSCertificatePrivate" c:type="TpTLSCertificatePrivate*"/>
      </field>
    </class>
    <record name="TLSCertificateClass"
            c:type="TpTLSCertificateClass"
            glib:is-gtype-struct-for="TLSCertificate"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="tls-certificate.c"
           line="65">The class of a #TpTLSCertificate.</doc>
      <source-position filename="tls-certificate.h" line="50"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ProxyClass" c:type="TpProxyClass"/>
      </field>
      <field name="_future" readable="0" private="1">
        <array zero-terminated="0" fixed-size="3">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TLSCertificateClassPrivate"
              c:type="TpTLSCertificateClassPrivate*"/>
      </field>
    </record>
    <record name="TLSCertificateClassPrivate"
            c:type="TpTLSCertificateClassPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="tls-certificate.h" line="43"/>
    </record>
    <record name="TLSCertificatePrivate"
            c:type="TpTLSCertificatePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="tls-certificate.h" line="42"/>
    </record>
    <enumeration name="TLSCertificateRejectReason"
                 c:type="TpTLSCertificateRejectReason">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1203">&lt;![CDATA[         Possible reasons to reject a TLS certificate.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="610"/>
      <member name="unknown"
              value="0"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_UNKNOWN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1205">&lt;![CDATA[           The certificate has been rejected for another reason           not listed in this enumeration.         ]]&gt;</doc>
      </member>
      <member name="untrusted"
              value="1"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_UNTRUSTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1206">&lt;![CDATA[           The certificate is not trusted.         ]]&gt;</doc>
      </member>
      <member name="expired"
              value="2"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_EXPIRED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1207">&lt;![CDATA[           The certificate is expired.         ]]&gt;</doc>
      </member>
      <member name="not_activated"
              value="3"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_NOT_ACTIVATED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1208">&lt;![CDATA[           The certificate is not active yet.         ]]&gt;</doc>
      </member>
      <member name="fingerprint_mismatch"
              value="4"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_FINGERPRINT_MISMATCH">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1209">&lt;![CDATA[           The certificate provided does not have the expected           fingerprint.         ]]&gt;</doc>
      </member>
      <member name="hostname_mismatch"
              value="5"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_HOSTNAME_MISMATCH">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1210">&lt;![CDATA[           The hostname certified does not match the provided one.         ]]&gt;</doc>
      </member>
      <member name="self_signed"
              value="6"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_SELF_SIGNED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1211">&lt;![CDATA[           The certificate is self-signed.         ]]&gt;</doc>
      </member>
      <member name="revoked"
              value="7"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_REVOKED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1212">&lt;![CDATA[           The certificate has been revoked.         ]]&gt;</doc>
      </member>
      <member name="insecure"
              value="8"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_INSECURE">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1213">&lt;![CDATA[           The certificate uses an insecure cipher algorithm, or is           cryptographically weak.         ]]&gt;</doc>
      </member>
      <member name="limit_exceeded"
              value="9"
              c:identifier="TP_TLS_CERTIFICATE_REJECT_REASON_LIMIT_EXCEEDED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1214">&lt;![CDATA[           The length in bytes of the certificate, or the depth of the           certificate chain exceed the limits imposed by the crypto           library.         ]]&gt;</doc>
      </member>
    </enumeration>
    <class name="TLSCertificateRejection"
           c:symbol-prefix="tls_certificate_rejection"
           c:type="TpTLSCertificateRejection"
           version="0.19.0"
           parent="GObject.Object"
           glib:type-name="TpTLSCertificateRejection"
           glib:get-type="tp_tls_certificate_rejection_get_type"
           glib:type-struct="TLSCertificateRejectionClass">
      <doc xml:space="preserve"
           filename="tls-certificate-rejection.c"
           line="37">Data structure representing a #TpTLSCertificateRejection.</doc>
      <source-position filename="tls-certificate-rejection.h" line="39"/>
      <method name="get_dbus_error"
              c:identifier="tp_tls_certificate_rejection_get_dbus_error"
              glib:get-property="dbus-error"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="287">Return the #TpTLSCertificateRejection:dbus-error property</doc>
        <source-position filename="tls-certificate-rejection.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate-rejection.c"
               line="293">the value of #TpTLSCertificateRejection:dbus-error property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate-rejection.c"
                 line="289">a #TpTLSCertificateRejection</doc>
            <type name="TLSCertificateRejection"
                  c:type="TpTLSCertificateRejection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="tp_tls_certificate_rejection_get_details"
              glib:get-property="details"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="303">Return the #TpTLSCertificateRejection:details property</doc>
        <source-position filename="tls-certificate-rejection.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="tls-certificate-rejection.c"
               line="309">the value of #TpTLSCertificateRejection:details property</doc>
          <type name="GLib.Variant" c:type="GVariant*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate-rejection.c"
                 line="305">a #TpTLSCertificateRejection</doc>
            <type name="TLSCertificateRejection"
                  c:type="TpTLSCertificateRejection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_error"
              c:identifier="tp_tls_certificate_rejection_get_error"
              glib:get-property="error"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="255">Return the #TpTLSCertificateRejection:error property</doc>
        <source-position filename="tls-certificate-rejection.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate-rejection.c"
               line="261">the value of #TpTLSCertificateRejection:error property</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate-rejection.c"
                 line="257">a #TpTLSCertificateRejection</doc>
            <type name="TLSCertificateRejection"
                  c:type="TpTLSCertificateRejection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reason"
              c:identifier="tp_tls_certificate_rejection_get_reason"
              glib:get-property="reason"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="271">Return the #TpTLSCertificateRejection:reason property</doc>
        <source-position filename="tls-certificate-rejection.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate-rejection.c"
               line="277">the value of #TpTLSCertificateRejection:reason property</doc>
          <type name="TLSCertificateRejectReason"
                c:type="TpTLSCertificateRejectReason"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate-rejection.c"
                 line="273">a #TpTLSCertificateRejection</doc>
            <type name="TLSCertificateRejection"
                  c:type="TpTLSCertificateRejection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="raise_error"
              c:identifier="tp_tls_certificate_rejection_raise_error"
              version="0.19.0"
              throws="1">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="319">Convenient function to raise the #TpTLSCertificateRejection:error
property in language binding supporting this feature.</doc>
        <source-position filename="tls-certificate-rejection.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="tls-certificate-rejection.c"
               line="327">%FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="tls-certificate-rejection.c"
                 line="321">a #TpTLSCertificateRejection</doc>
            <type name="TLSCertificateRejection"
                  c:type="TpTLSCertificateRejection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="dbus-error"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_dbus_error"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="182">The D-Bus error name of the rejection</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="details"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_details">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="195">A #G_VARIANT_TYPE_VARDICT containing the details of the rejection</doc>
        <type name="GLib.Variant"/>
      </property>
      <property name="error"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_error">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="208">a #GError (likely to be in the %TP_ERROR domain) indicating the reason
of the rejection</doc>
        <type name="GLib.Error"/>
      </property>
      <property name="reason"
                version="0.19.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_reason"
                default-value="0">
        <doc xml:space="preserve"
             filename="tls-certificate-rejection.c"
             line="167">#TpTLSCertificateRejectReason representing the reason of the rejection</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TLSCertificateRejectionPriv"
              c:type="TpTLSCertificateRejectionPriv*"/>
      </field>
    </class>
    <record name="TLSCertificateRejectionClass"
            c:type="TpTLSCertificateRejectionClass"
            glib:is-gtype-struct-for="TLSCertificateRejection"
            version="0.19.0">
      <doc xml:space="preserve"
           filename="tls-certificate-rejection.c"
           line="45">The class of a #TpTLSCertificateRejection.</doc>
      <source-position filename="tls-certificate-rejection.h" line="39"/>
      <field name="parent_class" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TLSCertificateRejectionPriv"
            c:type="TpTLSCertificateRejectionPriv"
            disguised="1"
            opaque="1">
      <source-position filename="tls-certificate-rejection.h" line="34"/>
    </record>
    <enumeration name="TLSCertificateState" c:type="TpTLSCertificateState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1181">&lt;![CDATA[         The possible states for a TLSCertificate         object.       ]]&gt;

Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="595"/>
      <member name="pending"
              value="0"
              c:identifier="TP_TLS_CERTIFICATE_STATE_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1183">&lt;![CDATA[           The certificate is currently waiting to be accepted or rejected.         ]]&gt;</doc>
      </member>
      <member name="accepted"
              value="1"
              c:identifier="TP_TLS_CERTIFICATE_STATE_ACCEPTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1184">&lt;![CDATA[           The certificate has been verified.         ]]&gt;</doc>
      </member>
      <member name="rejected"
              value="2"
              c:identifier="TP_TLS_CERTIFICATE_STATE_REJECTED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1185">&lt;![CDATA[           The certificate has been rejected.         ]]&gt;</doc>
      </member>
    </enumeration>
    <function-macro name="TLS_CERTIFICATE"
                    c:identifier="TP_TLS_CERTIFICATE"
                    introspectable="0">
      <source-position filename="tls-certificate.h" line="62"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TLS_CERTIFICATE_CLASS"
                    c:identifier="TP_TLS_CERTIFICATE_CLASS"
                    introspectable="0">
      <source-position filename="tls-certificate.h" line="65"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TLS_CERTIFICATE_GET_CLASS"
                    c:identifier="TP_TLS_CERTIFICATE_GET_CLASS"
                    introspectable="0">
      <source-position filename="tls-certificate.h" line="72"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TLS_CERTIFICATE_REJECTION"
                    c:identifier="TP_TLS_CERTIFICATE_REJECTION"
                    introspectable="0">
      <source-position filename="tls-certificate-rejection.h" line="52"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TLS_CERTIFICATE_REJECTION_CLASS"
                    c:identifier="TP_TLS_CERTIFICATE_REJECTION_CLASS"
                    introspectable="0">
      <source-position filename="tls-certificate-rejection.h" line="56"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TLS_CERTIFICATE_REJECTION_GET_CLASS"
                    c:identifier="TP_TLS_CERTIFICATE_REJECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="tls-certificate-rejection.h" line="66"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_GTALK_P2P"
              value="org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/gtalk-p2p"
              c:type="TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_GTALK_P2P">
      <source-position filename="_gen/telepathy-interfaces.h" line="720"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_ICE_UDP"
              value="org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/ice-udp"
              c:type="TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_ICE_UDP">
      <source-position filename="_gen/telepathy-interfaces.h" line="722"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_2009"
              value="org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/wlm-2009"
              c:type="TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_2009">
      <source-position filename="_gen/telepathy-interfaces.h" line="726"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_8_5"
              value="org.freedesktop.Telepathy.Channel.Interface.MediaSignalling/wlm-8.5"
              c:type="TP_TOKEN_CHANNEL_INTERFACE_MEDIA_SIGNALLING_WLM_8_5">
      <source-position filename="_gen/telepathy-interfaces.h" line="724"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_TYPE_CALL_AUDIO"
              value="org.freedesktop.Telepathy.Channel.Type.Call1/audio"
              c:type="TP_TOKEN_CHANNEL_TYPE_CALL_AUDIO">
      <source-position filename="_gen/telepathy-interfaces.h" line="442"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_TYPE_CALL_GTALK_P2P"
              value="org.freedesktop.Telepathy.Channel.Type.Call1/gtalk-p2p"
              c:type="TP_TOKEN_CHANNEL_TYPE_CALL_GTALK_P2P">
      <source-position filename="_gen/telepathy-interfaces.h" line="446"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_TYPE_CALL_ICE"
              value="org.freedesktop.Telepathy.Channel.Type.Call1/ice"
              c:type="TP_TOKEN_CHANNEL_TYPE_CALL_ICE">
      <source-position filename="_gen/telepathy-interfaces.h" line="448"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_TYPE_CALL_SHM"
              value="org.freedesktop.Telepathy.Channel.Type.Call1/shm"
              c:type="TP_TOKEN_CHANNEL_TYPE_CALL_SHM">
      <source-position filename="_gen/telepathy-interfaces.h" line="452"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_TYPE_CALL_VIDEO"
              value="org.freedesktop.Telepathy.Channel.Type.Call1/video"
              c:type="TP_TOKEN_CHANNEL_TYPE_CALL_VIDEO">
      <source-position filename="_gen/telepathy-interfaces.h" line="444"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CHANNEL_TYPE_CALL_WLM_2009"
              value="org.freedesktop.Telepathy.Channel.Type.Call1/wlm-2009"
              c:type="TP_TOKEN_CHANNEL_TYPE_CALL_WLM_2009">
      <source-position filename="_gen/telepathy-interfaces.h" line="450"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_CONTACT_ID"
              value="org.freedesktop.Telepathy.Connection/contact-id"
              c:type="TP_TOKEN_CONNECTION_CONTACT_ID">
      <source-position filename="_gen/telepathy-interfaces.h" line="103"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_ADDRESSING_ADDRESSES"
              value="org.freedesktop.Telepathy.Connection.Interface.Addressing1/addresses"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_ADDRESSING_ADDRESSES">
      <source-position filename="_gen/telepathy-interfaces.h" line="112"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_ADDRESSING_URIS"
              value="org.freedesktop.Telepathy.Connection.Interface.Addressing1/uris"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_ADDRESSING_URIS">
      <source-position filename="_gen/telepathy-interfaces.h" line="114"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_ALIASING_ALIAS"
              value="org.freedesktop.Telepathy.Connection.Interface.Aliasing/alias"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_ALIASING_ALIAS">
      <source-position filename="_gen/telepathy-interfaces.h" line="123"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_AVATARS_TOKEN"
              value="org.freedesktop.Telepathy.Connection.Interface.Avatars/token"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_AVATARS_TOKEN">
      <source-position filename="_gen/telepathy-interfaces.h" line="161"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CAPABILITIES_CAPS"
              value="org.freedesktop.Telepathy.Connection.Interface.Capabilities/caps"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CAPABILITIES_CAPS">
      <source-position filename="_gen/telepathy-interfaces.h" line="181"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CLIENT_TYPES_CLIENT_TYPES"
              value="org.freedesktop.Telepathy.Connection.Interface.ClientTypes/client-types"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CLIENT_TYPES_CLIENT_TYPES">
      <source-position filename="_gen/telepathy-interfaces.h" line="209"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_BLOCKING_BLOCKED"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactBlocking/blocked"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_BLOCKING_BLOCKED">
      <source-position filename="_gen/telepathy-interfaces.h" line="220"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_CAPABILITIES_CAPABILITIES"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactCapabilities/capabilities"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_CAPABILITIES_CAPABILITIES">
      <source-position filename="_gen/telepathy-interfaces.h" line="229"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactGroups/groups"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_GROUPS_GROUPS">
      <source-position filename="_gen/telepathy-interfaces.h" line="244"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_INFO_INFO"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactInfo/info"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_INFO_INFO">
      <source-position filename="_gen/telepathy-interfaces.h" line="257"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList/publish"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH">
      <source-position filename="_gen/telepathy-interfaces.h" line="278"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH_REQUEST"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList/publish-request"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_PUBLISH_REQUEST">
      <source-position filename="_gen/telepathy-interfaces.h" line="280"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_SUBSCRIBE"
              value="org.freedesktop.Telepathy.Connection.Interface.ContactList/subscribe"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_CONTACT_LIST_SUBSCRIBE">
      <source-position filename="_gen/telepathy-interfaces.h" line="276"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_LOCATION_LOCATION"
              value="org.freedesktop.Telepathy.Connection.Interface.Location/location"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_LOCATION_LOCATION">
      <source-position filename="_gen/telepathy-interfaces.h" line="349"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="TOKEN_CONNECTION_INTERFACE_SIMPLE_PRESENCE_PRESENCE"
              value="org.freedesktop.Telepathy.Connection.Interface.SimplePresence/presence"
              c:type="TP_TOKEN_CONNECTION_INTERFACE_SIMPLE_PRESENCE_PRESENCE">
      <source-position filename="_gen/telepathy-interfaces.h" line="307"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="TextChannel"
           c:symbol-prefix="text_channel"
           c:type="TpTextChannel"
           version="0.13.10"
           parent="Channel"
           glib:type-name="TpTextChannel"
           glib:get-type="tp_text_channel_get_type"
           glib:type-struct="TextChannelClass">
      <doc xml:space="preserve"
           filename="text-channel.c"
           line="30">Data structure representing a #TpTextChannel.</doc>
      <source-position filename="text-channel.h" line="59"/>
      <constructor name="new"
                   c:identifier="tp_text_channel_new"
                   version="0.13.10"
                   deprecated="1"
                   throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1113">Convenient function to create a new #TpTextChannel</doc>
        <doc-deprecated xml:space="preserve">Use tp_simple_client_factory_ensure_channel() instead.</doc-deprecated>
        <source-position filename="text-channel.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1126">a newly created #TpTextChannel</doc>
          <type name="TextChannel" c:type="TpTextChannel*"/>
        </return-value>
        <parameters>
          <parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1115">a #TpConnection; may not be %NULL</doc>
            <type name="Connection" c:type="TpConnection*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1116">the object path of the channel; may not be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="immutable_properties" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1117">
 the immutable properties of the channel,
 as signalled by the NewChannel D-Bus signal or returned by the
 CreateChannel and EnsureChannel D-Bus methods: a mapping from
 strings (D-Bus interface name + "." + property name) to #GValue instances</doc>
            <type name="GLib.HashTable" c:type="const GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <function name="get_feature_quark_chat_states"
                c:identifier="tp_text_channel_get_feature_quark_chat_states">
        <source-position filename="text-channel.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_incoming_messages"
                c:identifier="tp_text_channel_get_feature_quark_incoming_messages">
        <source-position filename="text-channel.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="get_feature_quark_sms"
                c:identifier="tp_text_channel_get_feature_quark_sms">
        <source-position filename="text-channel.h" line="156"/>
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <method name="ack_all_pending_messages_async"
              c:identifier="tp_text_channel_ack_all_pending_messages_async"
              version="0.15.3">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1967">Acknowledge all the pending messages. This is equivalent of calling
tp_text_channel_ack_messages_async() with the list of #TpSignalledMessage
returned by tp_text_channel_dup_pending_messages().

Once the messages have been acked, @callback will be called.
You can then call tp_text_channel_ack_all_pending_messages_finish() to get
the result of the operation.

See tp_text_channel_ack_message_async() about acknowledging messages.</doc>
        <source-position filename="text-channel.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1969">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1970">a callback to call when the messages have been acked</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1971">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ack_all_pending_messages_finish"
              c:identifier="tp_text_channel_ack_all_pending_messages_finish"
              version="0.15.3"
              throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1998">Finish an asynchronous acknowledgement operation of all messages.</doc>
        <source-position filename="text-channel.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="2006">%TRUE if the messages have been acked, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="2000">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="2001">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ack_message_async"
              c:identifier="tp_text_channel_ack_message_async"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1516">Acknowledge @message. Once the message has been acked, @callback will be
called. You can then call tp_text_channel_ack_message_finish() to get the
result of the operation.

A message should be acknowledged once it has been shown to the user by the
Handler of the channel. So Observers and Approvers should NOT acknowledge
messages themselves.
Once a message has been acknowledged, it is removed from the
pending-message queue and so the #TpTextChannel::pending-message-removed
signal is fired.

You should use the #TpSignalledMessage received from
tp_text_channel_dup_pending_messages() or the
#TpTextChannel::message-received signal.</doc>
        <source-position filename="text-channel.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1518">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1519">a #TpSignalledMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1520">a callback to call when the message have been acked</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1521">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ack_message_finish"
              c:identifier="tp_text_channel_ack_message_finish"
              version="0.13.10"
              throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1577">Finishes acknowledging a message.</doc>
        <source-position filename="text-channel.h" line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1585">%TRUE if the message has been acked, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1579">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1580">a #GAsyncResult passed to the callback for tp_text_channel_ack_message_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ack_messages_async"
              c:identifier="tp_text_channel_ack_messages_async"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1423">Acknowledge all the messages in @messages.
Once the messages have been acked, @callback will be called.
You can then call tp_text_channel_ack_messages_finish() to get the
result of the operation.

You should use the #TpSignalledMessage received from
tp_text_channel_dup_pending_messages() or the
#TpTextChannel::message-received signal.

See tp_text_channel_ack_message_async() about acknowledging messages.</doc>
        <source-position filename="text-channel.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1425">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="messages" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1426">a #GList of
#TpSignalledMessage</doc>
            <type name="GLib.List" c:type="const GList*">
              <type name="SignalledMessage"/>
            </type>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1428">a callback to call when the message have been acked</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1429">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="ack_messages_finish"
              c:identifier="tp_text_channel_ack_messages_finish"
              version="0.13.10"
              throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1496">Finishes acknowledging a list of messages.</doc>
        <source-position filename="text-channel.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1504">%TRUE if the messages have been acked, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1498">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1499">a #GAsyncResult passed to the callback for tp_text_channel_ack_messages_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_pending_messages"
              c:identifier="tp_text_channel_dup_pending_messages"
              version="0.19.9">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1273">Return a newly allocated list of unacknowledged #TpSignalledMessage
objects.

It is guaranteed that the #TpSignalledMessage:sender of each
#TpSignalledMessage has all of the features previously passed to
tp_simple_client_factory_add_contact_features() prepared.</doc>
        <source-position filename="text-channel.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1284">
a #GList of reffed #TpSignalledMessage</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="SignalledMessage"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1275">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_chat_state"
              c:identifier="tp_text_channel_get_chat_state"
              version="0.19.0">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1618">Return the chat state for the given contact. If tp_proxy_is_prepared()
would return %FALSE for the feature %TP_TEXT_CHANNEL_FEATURE_CHAT_STATES,
the result will always be %TP_CHANNEL_CHAT_STATE_INACTIVE.</doc>
        <source-position filename="text-channel.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1627">the chat state for @contact, or %TP_CHANNEL_CHAT_STATE_INACTIVE
 if their chat state is not known</doc>
          <type name="ChannelChatState" c:type="TpChannelChatState"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1620">a channel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1621">a #TpContact</doc>
            <type name="Contact" c:type="TpContact*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_delivery_reporting_support"
              c:identifier="tp_text_channel_get_delivery_reporting_support"
              glib:get-property="delivery-reporting-support"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1207">Return the #TpTextChannel:delivery-reporting-support property</doc>
        <source-position filename="text-channel.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1213">the value of #TpTextChannel:delivery-reporting-support property</doc>
          <type name="DeliveryReportingSupportFlags"
                c:type="TpDeliveryReportingSupportFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1209">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_part_support_flags"
              c:identifier="tp_text_channel_get_message_part_support_flags"
              glib:get-property="message-part-support-flags"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1188">Return the #TpTextChannel:message-part-support-flags property</doc>
        <source-position filename="text-channel.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1194">the value of #TpTextChannel:message-part-support-flags</doc>
          <type name="MessagePartSupportFlags"
                c:type="TpMessagePartSupportFlags"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1190">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message_types"
              c:identifier="tp_text_channel_get_message_types"
              version="0.13.16">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1712">Return the #TpTextChannel:message-types property</doc>
        <source-position filename="text-channel.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1718">
the value of #TpTextChannel:message-types</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="ChannelTextMessageType"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1714">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pending_messages"
              c:identifier="tp_text_channel_get_pending_messages"
              version="0.13.10"
              deprecated="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1249">Return a newly allocated list of unacknowledged #TpSignalledMessage
objects.

It is guaranteed that the #TpSignalledMessage:sender of each
#TpSignalledMessage has all of the features previously passed to
tp_simple_client_factory_add_contact_features() prepared.</doc>
        <doc-deprecated xml:space="preserve">Since 0.19.9. New code should use
 tp_text_channel_dup_pending_messages() instead.</doc-deprecated>
        <source-position filename="text-channel.h" line="90"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1260">
a #GList of borrowed #TpSignalledMessage</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="SignalledMessage"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1251">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sms_flash"
              c:identifier="tp_text_channel_get_sms_flash"
              glib:get-property="sms-flash"
              version="0.15.1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1799">Return the #TpTextChannel:sms-flash property</doc>
        <source-position filename="text-channel.h" line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1805">the value of #TpTextChannel:sms-flash property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1801">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sms_length_async"
              c:identifier="tp_text_channel_get_sms_length_async"
              version="0.15.1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1874">Starts an async call to get the number of 140 octet chunks required to
send a #message via SMS on #self, as well as the number of remaining
characters available in the final chunk and, if possible,
an estimate of the cost.

Once the request has been satisfied, @callback will be called.
You can then call tp_text_channel_get_sms_length_finish() to get the
result of the operation.</doc>
        <source-position filename="text-channel.h" line="165"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1876">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1877">a #TpClientMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1878">a callback to call when the request has been satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1879">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sms_length_finish"
              c:identifier="tp_text_channel_get_sms_length_finish"
              version="0.15.1"
              throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1909">Finishes an async SMS length request.</doc>
        <source-position filename="text-channel.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1931">%TRUE if the number of 140 octet chunks required to send
the message has been retrieved, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1911">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1912">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="chunks_required"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1913">if not %NULL used to return
the number of 140 octet chunks required to send the message.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="remaining_characters"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1915">if not %NULL used to return
the number of further characters that can be fit in the final chunk.
A negative value indicates that the message will be truncated by
abs(@remaining_characters).
The value #G_MININT32 indicates the message will be truncated by
an unknown amount.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="estimated_cost"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1921">if not %NULL used to return
the estimated cost of sending this message.
The currency and scale of this value are the same as the
values of the #TpConnection:balance-scale and
#TpConnection:balance-currency properties.
A value of -1 indicates the cost could not be estimated.</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_supported_content_types"
              c:identifier="tp_text_channel_get_supported_content_types"
              glib:get-property="supported-content-types"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1169">Return the #TpTextChannel:supported-content-types property</doc>
        <source-position filename="text-channel.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1175">
the value of #TpTextChannel:supported-content-types</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1171">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_sms_channel"
              c:identifier="tp_text_channel_is_sms_channel"
              glib:get-property="is-sms-channel"
              version="0.15.1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1781">Return the #TpTextChannel:is-sms-channel property</doc>
        <source-position filename="text-channel.h" line="159"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1787">the value of #TpTextChannel:is-sms-channel property</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1783">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="send_message_async"
              c:identifier="tp_text_channel_send_message_async"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1320">Submit a message to the server for sending. Once the message has been
submitted to the sever, @callback will be called. You can then call
tp_text_channel_send_message_finish() to get the result of the operation.</doc>
        <source-position filename="text-channel.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1322">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1323">a #TpClientMessage</doc>
            <type name="Message" c:type="TpMessage*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1324">flags affecting how the message is sent</doc>
            <type name="MessageSendingFlags" c:type="TpMessageSendingFlags"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1325">a callback to call when the message has been submitted to the
server</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1327">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_message_finish"
              c:identifier="tp_text_channel_send_message_finish"
              version="0.13.10"
              throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1354">Completes a call to tp_text_channel_send_message_async().

@token can be used to match any incoming delivery or failure reports
against the sent message. If this function returns true but the returned
token is %NULL, the message was sent successfully but the protocol does not
provide a way to identify it later.</doc>
        <source-position filename="text-channel.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1369">%TRUE if the message has been submitted to the server, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1356">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1357">a #GAsyncResult passed to the callback for tp_text_channel_send_message_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1358">if not %NULL, used to return the
token of the sent message</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chat_state_async"
              c:identifier="tp_text_channel_set_chat_state_async"
              version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1663">Set the local state on channel @self to @state.
Once the state has been set, @callback will be called.
You can then call tp_text_channel_set_chat_state_finish() to get the
result of the operation.</doc>
        <source-position filename="text-channel.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1665">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1666">a #TpChannelChatState to set</doc>
            <type name="ChannelChatState" c:type="TpChannelChatState"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1667">a callback to call when the chat state has been set</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1668">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_chat_state_finish"
              c:identifier="tp_text_channel_set_chat_state_finish"
              version="0.13.10"
              throws="1">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1692">Completes a call to tp_text_channel_set_chat_state_async().</doc>
        <source-position filename="text-channel.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1700">%TRUE if the chat state has been changed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1694">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1695">a #GAsyncResult passed to the callback for tp_text_channel_set_chat_state_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="supports_message_type"
              c:identifier="tp_text_channel_supports_message_type"
              version="0.13.16">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1731">Check if message of type @message_type can be sent on this channel.</doc>
        <source-position filename="text-channel.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="text-channel.c"
               line="1738">%TRUE if message of type @message_type can be sent on @self, %FALSE
otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1733">a #TpTextChannel</doc>
            <type name="TextChannel" c:type="TpTextChannel*"/>
          </instance-parameter>
          <parameter name="message_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1734">a #TpChannelTextMessageType</doc>
            <type name="ChannelTextMessageType"
                  c:type="TpChannelTextMessageType"/>
          </parameter>
        </parameters>
      </method>
      <property name="delivery-reporting-support"
                version="0.13.10"
                transfer-ownership="none"
                getter="get_delivery_reporting_support"
                default-value="0">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="933">A #TpDeliveryReportingSupportFlags indicating features supported
by this channel.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="is-sms-channel"
                version="0.15.1"
                transfer-ownership="none"
                getter="is_sms_channel"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="965">%TRUE if messages sent and received on this channel are transmitted
via SMS.

This property is not guaranteed to have a meaningful value until
TP_TEXT_CHANNEL_FEATURE_SMS has been prepared.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="message-part-support-flags"
                version="0.13.10"
                transfer-ownership="none"
                getter="get_message_part_support_flags"
                default-value="0">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="917">A #TpMessagePartSupportFlags indicating the level of support for
message parts on this channel.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="message-types"
                version="0.13.16"
                introspectable="0"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="949">A #GArray containing the #TpChannelTextMessageType which may be sent on
this channel.</doc>
        <type/>
      </property>
      <property name="sms-flash"
                version="0.15.1"
                transfer-ownership="none"
                getter="get_sms_flash"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="984">%TRUE if this channel is exclusively for receiving class 0 SMSes
(and no SMSes can be sent using tp_text_channel_send_message_async()
on this channel). If %FALSE, no incoming class 0 SMSes will appear
on this channel.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="supported-content-types"
                version="0.13.10"
                transfer-ownership="none"
                getter="get_supported_content_types">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="901">A #GStrv containing the MIME types supported by this channel, with more
preferred MIME types appearing earlier in the array.</doc>
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Channel" c:type="TpChannel"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="TextChannelPrivate" c:type="TpTextChannelPrivate*"/>
      </field>
      <glib:signal name="contact-chat-state-changed"
                   when="last"
                   detailed="1"
                   version="0.19.0">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1082">Emitted when a contact's chat state changes after tp_proxy_prepare_async()
has finished preparing features %TP_TEXT_CHANNEL_FEATURE_CHAT_STATES,
%TP_CHANNEL_FEATURE_GROUP and %TP_CHANNEL_FEATURE_CONTACTS.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="contact" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1085">a #TpContact for the local user or another contact</doc>
            <type name="Contact"/>
          </parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1086">the new #TpChannelChatState for the contact</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="message-received" when="last" version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1001">The ::message-received signal is emitted when a new message has been
received on @self.

The same @message object will be used by the
#TpTextChannel::pending-message-removed signal once @message has been
acked so you can simply compare pointers to identify the message.

Note that this signal is only fired once the
#TP_TEXT_CHANNEL_FEATURE_INCOMING_MESSAGES has been prepared.

It is guaranteed that @message's #TpSignalledMessage:sender has all of the
features previously passed to
tp_simple_client_factory_add_contact_features() prepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1004">a #TpSignalledMessage</doc>
            <type name="SignalledMessage"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="message-sent" when="last" version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1054">The ::message-sent signal is emitted when @message
has been submitted for sending.

It is guaranteed that @message's #TpSignalledMessage:sender has all of the
features previously passed to
tp_simple_client_factory_add_contact_features() prepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1057">a #TpSignalledMessage</doc>
            <type name="SignalledMessage"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1058">the #TpMessageSendingFlags affecting how the message was sent</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1059">an opaque token used to match any incoming delivery or failure
reports against this message, or %NULL if the message is not
readily identifiable.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="pending-message-removed"
                   when="last"
                   version="0.13.10">
        <doc xml:space="preserve"
             filename="text-channel.c"
             line="1029">The ::pending-message-removed signal is emitted when @message
has been acked and so removed from the pending messages list.

Note that this signal is only fired once the
#TP_TEXT_CHANNEL_FEATURE_INCOMING_MESSAGES has been prepared.

It is guaranteed that @message's #TpSignalledMessage:sender has all of the
features previously passed to
tp_simple_client_factory_add_contact_features() prepared.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="text-channel.c"
                 line="1032">a #TpSignalledMessage</doc>
            <type name="SignalledMessage"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="TextChannelClass"
            c:type="TpTextChannelClass"
            glib:is-gtype-struct-for="TextChannel"
            version="0.13.10">
      <doc xml:space="preserve"
           filename="text-channel.c"
           line="38">The class of a #TpTextChannel.</doc>
      <source-position filename="text-channel.h" line="59"/>
      <field name="parent_class" readable="0" private="1">
        <type name="ChannelClass" c:type="TpChannelClass"/>
      </field>
      <field name="_padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="7">
          <type name="GObject.Callback" c:type="GCallback"/>
        </array>
      </field>
    </record>
    <record name="TextChannelPrivate"
            c:type="TpTextChannelPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="text-channel.h" line="45"/>
    </record>
    <enumeration name="TubeChannelState" c:type="TpTubeChannelState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="1013">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="518"/>
      <member name="local_pending"
              value="0"
              c:identifier="TP_TUBE_CHANNEL_STATE_LOCAL_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1015">&lt;![CDATA[           The initiator offered the tube. The tube is waiting to be           accepted/closed locally. If the client accepts the tube, the tube's           state will be Open.         ]]&gt;</doc>
      </member>
      <member name="remote_pending"
              value="1"
              c:identifier="TP_TUBE_CHANNEL_STATE_REMOTE_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1016">&lt;![CDATA[           The tube is waiting to be accepted/closed remotely. If the           recipient accepts the tube, the tube's state will be Open.         ]]&gt;</doc>
      </member>
      <member name="open" value="2" c:identifier="TP_TUBE_CHANNEL_STATE_OPEN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1017">&lt;![CDATA[           The initiator offered the tube and the recipient accepted it. The           tube is open for traffic. The tube's state stays in this state until           it is closed.         ]]&gt;</doc>
      </member>
      <member name="not_offered"
              value="3"
              c:identifier="TP_TUBE_CHANNEL_STATE_NOT_OFFERED">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="1018">&lt;![CDATA[           The tube channel has been requested but the tube is not yet offered.           The client should offer the tube to the recipient and the tube's           state will be Remote_Pending. The method used to offer the tube           depends on the tube type.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="TubeState" c:type="TpTubeState">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="670">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="342"/>
      <member name="local_pending"
              value="0"
              c:identifier="TP_TUBE_STATE_LOCAL_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="672">&lt;![CDATA[           The tube is waiting to be accepted/closed locally.         ]]&gt;</doc>
      </member>
      <member name="remote_pending"
              value="1"
              c:identifier="TP_TUBE_STATE_REMOTE_PENDING">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="673">&lt;![CDATA[           The tube is waiting to be accepted/closed remotely.         ]]&gt;</doc>
      </member>
      <member name="open" value="2" c:identifier="TP_TUBE_STATE_OPEN">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="674">&lt;![CDATA[           The tube is open for traffic.         ]]&gt;</doc>
      </member>
    </enumeration>
    <enumeration name="TubeType" c:type="TpTubeType">
      <doc xml:space="preserve"
           filename="_gen/telepathy-enums-gtk-doc.h"
           line="651">Bitfield/set of flags generated from the Telepathy specification.</doc>
      <source-position filename="_gen/telepathy-enums.h" line="334"/>
      <member name="dbus" value="0" c:identifier="TP_TUBE_TYPE_DBUS">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="653">&lt;![CDATA[           The tube is D-Bus tube as described by the             org.freedesktop.Telepathy.Channel.Type.DBusTube interface.         ]]&gt;</doc>
      </member>
      <member name="stream" value="1" c:identifier="TP_TUBE_TYPE_STREAM">
        <doc xml:space="preserve"
             filename="_gen/telepathy-enums-gtk-doc.h"
             line="654">&lt;![CDATA[           The tube is stream tube as described by the             org.freedesktop.Telepathy.Channel.Type.StreamTube interface.         ]]&gt;</doc>
      </member>
    </enumeration>
    <constant name="UNKNOWN_CONNECTION_STATUS"
              value="-1"
              c:type="TP_UNKNOWN_CONNECTION_STATUS"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="connection.c"
           line="239">An invalid connection status used in #TpConnection to indicate that the
status has not yet been discovered.</doc>
      <source-position filename="connection.h" line="124"/>
      <type name="ConnectionStatus" c:type="TpConnectionStatus"/>
    </constant>
    <constant name="UNKNOWN_HANDLE_TYPE"
              value="-1"
              c:type="TP_UNKNOWN_HANDLE_TYPE"
              version="0.7.0">
      <doc xml:space="preserve"
           filename="handle.h"
           line="55">An invalid handle type (-1 cast to TpHandleType) used to represent an
unknown handle type.</doc>
      <source-position filename="handle.h" line="63"/>
      <type name="HandleType" c:type="TpHandleType"/>
    </constant>
    <constant name="USER_ACTION_TIME_NOT_USER_ACTION"
              value="0"
              c:type="TP_USER_ACTION_TIME_NOT_USER_ACTION"
              version="0.11.13">
      <doc xml:space="preserve"
           filename="defs.h"
           line="125">The "user action time" used by methods like
tp_account_channel_request_new() to represent channel requests that are
not a result of user action.

See also #TpAccountChannelRequest:user-action-time,
tp_user_action_time_from_x11(), tp_user_action_time_should_present() and
%TP_USER_ACTION_TIME_CURRENT_TIME.</doc>
      <source-position filename="defs.h" line="138"/>
      <type name="gint64" c:type="gint64"/>
    </constant>
    <record name="WeakRef"
            c:type="TpWeakRef"
            disguised="1"
            opaque="1"
            version="0.11.3">
      <doc xml:space="preserve"
           filename="util.c"
           line="1211">A simple wrapper for a weak reference to a #GObject, suitable for use in
asynchronous calls which should only affect the object if it hasn't already
been freed.

As well as wrapping a weak reference to an object, this structure can
contain an extra pointer to arbitrary data. This is useful for asynchronous
calls which act on an object and some second piece of data, which are quite
common in practice.

If more than one piece of auxiliary data is required, the @user_data
argument to the constructor can be a struct or a #GValueArray.</doc>
      <source-position filename="util.h" line="138"/>
      <method name="destroy"
              c:identifier="tp_weak_ref_destroy"
              version="0.11.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="util.c"
             line="1304">Free a weak reference wrapper. This drops the weak reference to the
object (if it still exists), and frees the user data with the user-supplied
destructor function if one was provided.</doc>
        <source-position filename="util.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="util.c"
                 line="1306">a weak reference</doc>
            <type name="WeakRef" c:type="TpWeakRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_object"
              c:identifier="tp_weak_ref_dup_object"
              version="0.11.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="util.c"
             line="1284">If the weakly referenced object still exists, return a new reference to
it. Otherwise, return %NULL.</doc>
        <source-position filename="util.h" line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="util.c"
               line="1291">a new reference, or %NULL</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="util.c"
                 line="1286">a weak reference</doc>
            <type name="WeakRef" c:type="TpWeakRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user_data"
              c:identifier="tp_weak_ref_get_user_data"
              version="0.11.3"
              introspectable="0">
        <doc xml:space="preserve"
             filename="util.c"
             line="1267">Return the additional data that was passed to tp_weak_ref_new().</doc>
        <source-position filename="util.h" line="142"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="1273">the additional data supplied in tp_weak_ref_new(), which may be
 %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="util.c"
                 line="1269">a weak reference</doc>
            <type name="WeakRef" c:type="TpWeakRef*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="tp_weak_ref_new"
                version="0.11.3"
                introspectable="0">
        <doc xml:space="preserve"
             filename="util.c"
             line="1235">Return a new weak reference wrapper for @object.</doc>
        <source-position filename="util.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="util.c"
               line="1244">a new weak-reference wrapper

Free-function: tp_weak_ref_destroy()</doc>
          <type name="WeakRef" c:type="TpWeakRef*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="util.c"
                 line="1237">an object to which to take a weak reference</doc>
            <type name="GObject.Object" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="util.c"
                 line="1238">optional additional data to store alongside the weak ref</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="util.c"
                 line="1239">destructor for @user_data, called when the weak ref
 is freed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <docsection name="account">
      <doc xml:space="preserve"
           filename="account.c"
           line="48">The Telepathy Account Manager stores the user's configured real-time
communication accounts. The #TpAccount object represents a stored account.</doc>
    </docsection>
    <docsection name="account-channel-request">
      <doc xml:space="preserve"
           filename="account-channel-request.c"
           line="21">A #TpAccountChannelRequest object is used to request a channel using the
ChannelDispatcher. Once created, use one of the create or ensure async
method to actually request the channel.

Note that each #TpAccountChannelRequest object can only be used to create
one channel. You can't call a create or ensure method more than once on the
same #TpAccountChannelRequest.

Once the channel has been created you can use the
TpAccountChannelRequest::re-handled: signal to be notified when the channel
has to be re-handled. This can be useful for example to move its window
to the foreground, if applicable.

Using this object is appropriate for most channel types.
For a contact search channel, use tp_contact_search_new_async() instead.</doc>
    </docsection>
    <docsection name="account-manager">
      <doc xml:space="preserve"
           filename="account-manager.c"
           line="44">The #TpAccountManager object is used to communicate with the Telepathy
AccountManager service.

A new #TpAccountManager object can be created with
tp_account_manager_dup().

To list the existing valid accounts, the client should first
prepare the %TP_ACCOUNT_MANAGER_FEATURE_CORE feature using
tp_proxy_prepare_async(), then call
tp_account_manager_dup_valid_accounts().

The #TpAccountManager::account-validity-changed signal is emitted
to notify of the validity of an account changing. New accounts are
also indicated by the emission of this signal on an account that
did not previously exist. (The rationale behind indicating new
accounts by an account validity change signal is that clients
interested in this kind of thing should be connected to this signal
anyway: an account having just become valid is effectively a new
account to a client.)

The #TpAccountManager::account-removed signal is emitted when
existing accounts are removed.</doc>
    </docsection>
    <docsection name="account-request">
      <doc xml:space="preserve"
           filename="account-request.c"
           line="36">This is a convenience object to aid in the creation of accounts on
a #TpAccountManager without having to construct #GHashTables with
well-known keys. For example:

|[
static void created_cb (GObject *object, GAsyncResult *res, gpointer user_data);

static void
create_acount (void)
{
  TpAccountManager *am = tp_account_manager_dup ();
  TpAccountRequest *req;

  req = tp_account_request_new (am, "gabble", "jabber", "Work Jabber account");

  tp_account_request_set_parameter (req, "account", "walter.white@lospollos.lit");

  // ...

  tp_account_request_create_account_async (req, created_cb, NULL);
  g_object_unref (req);
  g_object_unref (am);
}

static void
created_cb (GObject *object,
    GAsyncResult *result,
    gpointer user_data)
{
  TpAccountRequest *req = TP_ACCOUNT_REQUEST (object);
  TpAccount *account;
  GError *error = NULL;

  account = tp_account_request_create_account_finish (req, result, &amp;error);

  if (account == NULL)
    {
      g_error ("Failed to create account: %s\n", error-&gt;message);
      g_clear_error (&amp;error);
      return;
    }

  // ...

  g_object_unref (account);
}
]|</doc>
    </docsection>
    <docsection name="add-dispatch-operation-context">
      <doc xml:space="preserve"
           filename="add-dispatch-operation-context.c"
           line="21">Object used to represent the context of a Approver.AddDispatchOperation()
D-Bus call on a #TpBaseClient.</doc>
    </docsection>
    <docsection name="asv">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="30">Mappings from string to variant (D-Bus signature a{sv}) are commonly used
to provide extensibility, but in dbus-glib they're somewhat awkward to deal
with.

These functions provide convenient access to the values in such
a mapping.

They also work around the fact that none of the #GHashTable public API
takes a const pointer to a #GHashTable, even the read-only methods that
logically ought to.

Parts of telepathy-glib return const pointers to #GHashTable, to encourage
the use of this API.</doc>
    </docsection>
    <function name="asv_dump" c:identifier="tp_asv_dump" introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1926">Dumps the a{sv} map to the debugging console.

The purpose of this function is give the programmer the ability to easily
inspect the contents of an a{sv} map for debugging purposes.</doc>
      <source-position filename="dbus.h" line="135"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1928">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_boolean"
              c:identifier="tp_asv_get_boolean"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="802">If a value for @key in @asv is present and boolean, return it,
and set *@valid to %TRUE if @valid is not %NULL.

Otherwise return %FALSE, and set *@valid to %FALSE if @valid is not %NULL.</doc>
      <source-position filename="dbus.h" line="87"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="815">a boolean value for @key</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="804">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="806">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="valid"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="807">Either %NULL, or a location to store %TRUE if the key actually
 exists and has a boolean value</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_boxed"
              c:identifier="tp_asv_get_boxed"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1717">If a value for @key in @asv is present and is of the desired type,
return it.

Otherwise return %NULL.

The returned value is not copied, and is only valid as long as the value
for @key in @asv is not removed or altered. Copy it, for instance with
g_boxed_copy(), if you need to keep it for longer.</doc>
      <source-position filename="dbus.h" line="90"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1734">the value of @key, or %NULL</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1719">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1721">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1722">The type that the key's value should have, which must be derived
 from %G_TYPE_BOXED</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_bytes"
              c:identifier="tp_asv_get_bytes"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="868">If a value for @key in @asv is present and is an array of bytes
(its GType is %DBUS_TYPE_G_UCHAR_ARRAY), return it.

Otherwise return %NULL.

The returned value is not copied, and is only valid as long as the value
for @key in @asv is not removed or altered. Copy it with
g_boxed_copy (DBUS_TYPE_G_UCHAR_ARRAY, ...) if you need to keep
it for longer.</doc>
      <source-position filename="dbus.h" line="98"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="884">the string value
of @key, or %NULL</doc>
        <array name="GLib.Array" c:type="const GArray*">
          <type name="guint8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="870">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="872">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_double"
              c:identifier="tp_asv_get_double"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1505">If a value for @key in @asv is present and has any numeric type used by
dbus-glib (guchar, gint, guint, gint64, guint64 or gdouble),
return it as a double, and if @valid is not %NULL, set *@valid to %TRUE.

Otherwise, return 0.0, and if @valid is not %NULL, set *@valid to %FALSE.</doc>
      <source-position filename="dbus.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1519">the double precision floating-point value of @key, or 0.0</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1507">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1509">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="valid"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1510">Either %NULL, or a location in which to store %TRUE on success
or %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_int32"
              c:identifier="tp_asv_get_int32"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1071">If a value for @key in @asv is present, has an integer type used by
dbus-glib (guchar, gint, guint, gint64 or guint64) and fits in the
range of a gint32, return it, and if @valid is not %NULL, set *@valid to
%TRUE.

Otherwise, return 0, and if @valid is not %NULL, set *@valid to %FALSE.</doc>
      <source-position filename="dbus.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1086">the 32-bit signed integer value of @key, or 0</doc>
        <type name="gint32" c:type="gint32"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1073">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1075">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="valid"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1076">Either %NULL, or a location in which to store %TRUE on success
or %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_int64"
              c:identifier="tp_asv_get_int64"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1297">If a value for @key in @asv is present, has an integer type used by
dbus-glib (guchar, gint, guint, gint64 or guint64) and fits in the
range of a gint64, return it, and if @valid is not %NULL, set *@valid to
%TRUE.

Otherwise, return 0, and if @valid is not %NULL, set *@valid to %FALSE.</doc>
      <source-position filename="dbus.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1312">the 64-bit signed integer value of @key, or 0</doc>
        <type name="gint64" c:type="gint64"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1299">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1301">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="valid"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1302">Either %NULL, or a location in which to store %TRUE on success
or %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_object_path"
              c:identifier="tp_asv_get_object_path"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1604">If a value for @key in @asv is present and is an object path, return it.

Otherwise return %NULL.

The returned value is not copied, and is only valid as long as the value
for @key in @asv is not removed or altered. Copy it with g_strdup() if you
need to keep it for longer.</doc>
      <source-position filename="dbus.h" line="111"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1618">the object-path value of @key, or
%NULL</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1606">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1608">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_string"
              c:identifier="tp_asv_get_string"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="961">If a value for @key in @asv is present and is a string, return it.

Otherwise return %NULL.

The returned value is not copied, and is only valid as long as the value
for @key in @asv is not removed or altered. Copy it with g_strdup() if you
need to keep it for longer.</doc>
      <source-position filename="dbus.h" line="118"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="975">the string value of @key, or %NULL</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="963">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="965">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_strv"
              c:identifier="tp_asv_get_strv"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1841">If a value for @key in @asv is present and is an array of strings (strv),
return it.

Otherwise return %NULL.

The returned value is not copied, and is only valid as long as the value
for @key in @asv is not removed or altered. Copy it with g_strdupv() if you
need to keep it for longer.</doc>
      <source-position filename="dbus.h" line="133"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1856">the %NULL-terminated string-array
value of @key, or %NULL</doc>
        <array c:type="const gchar* const*">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1843">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1845">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_uint32"
              c:identifier="tp_asv_get_uint32"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1184">If a value for @key in @asv is present, has an integer type used by
dbus-glib (guchar, gint, guint, gint64 or guint64) and fits in the
range of a guint32, return it, and if @valid is not %NULL, set *@valid to
%TRUE.

Otherwise, return 0, and if @valid is not %NULL, set *@valid to %FALSE.</doc>
      <source-position filename="dbus.h" line="123"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1199">the 32-bit unsigned integer value of @key, or 0</doc>
        <type name="guint32" c:type="guint32"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1186">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1188">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="valid"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1189">Either %NULL, or a location in which to store %TRUE on success
or %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_get_uint64"
              c:identifier="tp_asv_get_uint64"
              version="0.7.9">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1399">If a value for @key in @asv is present, has an integer type used by
dbus-glib (guchar, gint, guint, gint64 or guint64) and is non-negative,
return it, and if @valid is not %NULL, set *@valid to %TRUE.

Otherwise, return 0, and if @valid is not %NULL, set *@valid to %FALSE.</doc>
      <source-position filename="dbus.h" line="126"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1413">the 64-bit unsigned integer value of @key, or 0</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1401">A GHashTable where the keys are
strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1403">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="valid"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1404">Either %NULL, or a location in which to store %TRUE on success
or %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_lookup"
              c:identifier="tp_asv_lookup"
              version="0.7.9"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1902">If a value for @key in @asv is present, return it. Otherwise return %NULL.

The returned value is not copied, and is only valid as long as the value
for @key in @asv is not removed or altered. Copy it with (for instance)
g_value_copy() if you need to keep it for longer.</doc>
      <source-position filename="dbus.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="1913">the value of @key, or %NULL</doc>
        <type name="GObject.Value" c:type="const GValue*"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1904">A GHashTable where the keys are strings and the values are GValues</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1905">The key to look up</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_new"
              c:identifier="tp_asv_new"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="721">Creates a new #GHashTable for use with a{sv} maps, containing the values
passed in as parameters.

The #GHashTable is synonymous with:
&lt;informalexample&gt;&lt;programlisting&gt;
GHashTable *asv = g_hash_table_new_full (g_str_hash, g_str_equal,
   NULL, (GDestroyNotify) tp_g_value_slice_free);
&lt;/programlisting&gt;&lt;/informalexample&gt;
Followed by manual insertion of each of the parameters.

Parameters are stored in slice-allocated GValues and should be set using
tp_asv_set_*() and retrieved using tp_asv_get_*().

tp_g_value_slice_new() and tp_g_value_slice_dup() may also be used to insert
into the map if required.
&lt;informalexample&gt;&lt;programlisting&gt;
g_hash_table_insert (parameters, "account",
   tp_g_value_slice_new_string ("bob@mcbadgers.com"));
&lt;/programlisting&gt;&lt;/informalexample&gt;

&lt;example&gt;
 &lt;title&gt;Using tp_asv_new()&lt;/title&gt;
 &lt;programlisting&gt;
GHashTable *parameters = tp_asv_new (
   "answer", G_TYPE_INT, 42,
   "question", G_TYPE_STRING, "We just don't know",
   NULL);&lt;/programlisting&gt;
&lt;/example&gt;

Allocated values will be automatically free'd when overwritten, removed or
the hash table destroyed with g_hash_table_unref().</doc>
      <source-position filename="dbus.h" line="85"/>
      <return-value>
        <doc xml:space="preserve"
             filename="dbus.c"
             line="759">a newly created #GHashTable for storing a{sv} maps, free with
g_hash_table_unref().</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="first_key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="723">the name of the first key (or NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="724">type and value for the first key, followed by a NULL-terminated list
 of (key, type, value) tuples</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_boolean"
              c:identifier="tp_asv_set_boolean"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="844">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_boolean(), tp_g_value_slice_new_boolean()</doc>
      <source-position filename="dbus.h" line="89"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="846">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="847">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="848">value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_boxed"
              c:identifier="tp_asv_set_boxed"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1756">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_boxed(), tp_g_value_slice_new_boxed()</doc>
      <source-position filename="dbus.h" line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1758">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1759">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1760">the type of the key's value, which must be derived from %G_TYPE_BOXED</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve" filename="dbus.c" line="1761">value</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_bytes"
              c:identifier="tp_asv_set_bytes"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="905">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_bytes(), tp_g_value_slice_new_bytes()</doc>
      <source-position filename="dbus.h" line="99"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="907">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="908">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="909">the number of bytes to copy</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="bytes"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="910">location of an array of bytes to be copied (this may be %NULL
if and only if length is 0)</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_double"
              c:identifier="tp_asv_set_double"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1580">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_double(), tp_g_value_slice_new_double()</doc>
      <source-position filename="dbus.h" line="104"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1582">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1583">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1584">value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_int32"
              c:identifier="tp_asv_set_int32"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1160">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_int32(), tp_g_value_slice_new_int()</doc>
      <source-position filename="dbus.h" line="107"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1162">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1163">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1164">value</doc>
          <type name="gint32" c:type="gint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_int64"
              c:identifier="tp_asv_set_int64"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1375">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_int64(), tp_g_value_slice_new_int64()</doc>
      <source-position filename="dbus.h" line="110"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1377">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1378">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1379">value</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_object_path"
              c:identifier="tp_asv_set_object_path"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1639">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_object_path(),
tp_g_value_slice_new_object_path()</doc>
      <source-position filename="dbus.h" line="112"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1641">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1642">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1643">value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_static_boxed"
              c:identifier="tp_asv_set_static_boxed"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1812">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_boxed(),
tp_g_value_slice_new_static_boxed()</doc>
      <source-position filename="dbus.h" line="96"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1814">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1815">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1816">the type of the key's value, which must be derived from %G_TYPE_BOXED</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve" filename="dbus.c" line="1817">value</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_static_object_path"
              c:identifier="tp_asv_set_static_object_path"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1691">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_object_path(),
tp_g_value_slice_new_static_object_path()</doc>
      <source-position filename="dbus.h" line="116"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1693">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1694">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1695">value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_static_string"
              c:identifier="tp_asv_set_static_string"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1045">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_string(),
tp_g_value_slice_new_static_string()</doc>
      <source-position filename="dbus.h" line="121"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1047">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1048">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1049">value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_string"
              c:identifier="tp_asv_set_string"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="995">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_string(), tp_g_value_slice_new_string()</doc>
      <source-position filename="dbus.h" line="119"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="997">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="998">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="999">value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_strv"
              c:identifier="tp_asv_set_strv"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1877">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_strv()</doc>
      <source-position filename="dbus.h" line="134"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1879">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1880">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1881">a %NULL-terminated string array</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_uint32"
              c:identifier="tp_asv_set_uint32"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1273">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_uint32(), tp_g_value_slice_new_uint()</doc>
      <source-position filename="dbus.h" line="125"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1275">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1276">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1277">value</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_set_uint64"
              c:identifier="tp_asv_set_uint64"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1481">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_uint64(), tp_g_value_slice_new_uint64()</doc>
      <source-position filename="dbus.h" line="128"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1483">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1484">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1485">value</doc>
          <type name="guint64" c:type="guint64"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="asv_size"
                    c:identifier="tp_asv_size"
                    version="0.7.12"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="73">Return the size of @asv as if via g_hash_table_size().

The only difference is that this version takes a const #GHashTable and
casts it.</doc>
      <source-position filename="dbus.h" line="75"/>
      <parameters>
        <parameter name="asv">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="75">a GHashTable</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="asv_take_boxed"
              c:identifier="tp_asv_take_boxed"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1784">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_boxed(), tp_g_value_slice_new_take_boxed()</doc>
      <source-position filename="dbus.h" line="94"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1786">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1787">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1788">the type of the key's value, which must be derived from %G_TYPE_BOXED</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve" filename="dbus.c" line="1789">value</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_take_bytes"
              c:identifier="tp_asv_take_bytes"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="934">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_bytes(), tp_g_value_slice_new_take_bytes()</doc>
      <source-position filename="dbus.h" line="101"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="936">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="937">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="938">a non-NULL #GArray of %guchar, ownership of which will be taken by
the #GValue</doc>
          <array name="GLib.Array" c:type="GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="asv_take_object_path"
              c:identifier="tp_asv_take_object_path"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1665">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_object_path(),
tp_g_value_slice_new_take_object_path()</doc>
      <source-position filename="dbus.h" line="114"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1667">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1668">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1669">value</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="asv_take_string"
              c:identifier="tp_asv_take_string"
              version="0.7.29"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="1019">Stores the value in the map.

The value is stored as a slice-allocated GValue.

See Also: tp_asv_new(), tp_asv_get_string(),
tp_g_value_slice_new_take_string()</doc>
      <source-position filename="dbus.h" line="120"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="asv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1021">a #GHashTable created with tp_asv_new()</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="1022">string key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="dbus.c" line="1023">value</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="automatic-client-factory">
      <doc xml:space="preserve"
           filename="automatic-client-factory.c"
           line="21">This factory overrides some #TpSimpleClientFactory virtual methods to
create specialized #TpChannel subclasses.

#TpAutomaticClientFactory will currently create #TpChannel objects
as follows:

&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpStreamTubeChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_STREAM_TUBE;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpDBusTubeChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_DBUS_TUBE;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpTextChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_TEXT and implements
    %TP_IFACE_CHANNEL_INTERFACE_MESSAGES;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpFileTransferChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpCallChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_CALL;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a plain #TpChannel, otherwise&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;

It is guaranteed that the objects returned by future versions
will be either the class that is currently used, or a more specific
subclass of that class.

This factory asks to prepare the following features:

&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_CHANNEL_FEATURE_CORE, %TP_CHANNEL_FEATURE_GROUP
    and %TP_CHANNEL_FEATURE_PASSWORD for all
    type of channels.&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_TEXT_CHANNEL_FEATURE_INCOMING_MESSAGES and
    %TP_TEXT_CHANNEL_FEATURE_SMS for #TpTextChannel&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE
    for #TpFileTransferChannel&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_CALL_CHANNEL_FEATURE_CORE
    for #TpCallChannel&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_DBUS_TUBE_CHANNEL_FEATURE_CORE
    for #TpDBusTubeChannel&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
    </docsection>
    <docsection name="automatic-proxy-factory">
      <doc xml:space="preserve"
           filename="automatic-proxy-factory.c"
           line="21">This factory implements the #TpClientChannelFactoryInterface interface to
create specialized #TpChannel subclasses.

#TpAutomaticProxyFactory will currently create #TpChannel objects
as follows:

&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpStreamTubeChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_STREAM_TUBE;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpTextChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_TEXT and implements
    %TP_IFACE_CHANNEL_INTERFACE_MESSAGES;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a #TpFileTransferChannel, if the channel is of type
    %TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER;&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;a plain #TpChannel, otherwise&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;

It is guaranteed that the objects returned by future versions
will be either the class that is currently used, or a more specific
subclass of that class.

This factory asks to prepare the following properties:

&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_CHANNEL_FEATURE_CORE, %TP_CHANNEL_FEATURE_GROUP
    and %TP_CHANNEL_FEATURE_PASSWORD for all
    type of channels.&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_TEXT_CHANNEL_FEATURE_INCOMING_MESSAGES and
    TP_TEXT_CHANNEL_FEATURE_SMS for #TpTextChannel&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;%TP_FILE_TRANSFER_CHANNEL_FEATURE_CORE
    for #TpFileTransferChannel&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;

TpProxy subclasses other than TpChannel are not currently supported.</doc>
    </docsection>
    <docsection name="base-client">
      <doc xml:space="preserve"
           filename="base-client.c"
           line="21">This base class makes it easier to write #TpSvcClient
implementations. Subclasses should usually pass the filters they
want and override the D-Bus methods they implement.

For many applications, the provided #TpSimpleObserver, #TpSimpleApprover
and #TpSimpleHandler subclasses can be used instead of deriving from this
class.</doc>
    </docsection>
    <docsection name="base-connection">
      <doc xml:space="preserve"
           filename="base-connection.c"
           line="22">This base class makes it easier to write #TpSvcConnection implementations
by managing connection status, channel factories and handle tracking.
A subclass should often not need to implement any of the Connection
methods itself.

However, methods may be reimplemented if needed: for instance, Gabble
overrides RequestHandles so it can validate MUC rooms, which must be done
asynchronously.</doc>
    </docsection>
    <docsection name="basic-proxy-factory">
      <doc xml:space="preserve"
           filename="basic-proxy-factory.c"
           line="21">This factory implements the #TpClientChannelFactory interface to create
plain #TpChannel objects. Unlike #TpAutomaticProxyFactory, it will
not create higher-level subclasses like #TpStreamTubeChannel.
The only feature this factory asks to prepare is #TP_CHANNEL_FEATURE_CORE.

TpProxy subclasses other than TpChannel are not currently supported.</doc>
    </docsection>
    <docsection name="call-channel">
      <doc xml:space="preserve"
           filename="call-channel.c"
           line="21">#TpCallChannel is a sub-class of #TpChannel providing convenient API
to make calls</doc>
    </docsection>
    <docsection name="call-content">
      <doc xml:space="preserve"
           filename="call-content.c"
           line="21">#TpCallContent is a sub-class of #TpProxy providing convenient API
to represent #TpCallChannel's content.</doc>
    </docsection>
    <docsection name="call-stream">
      <doc xml:space="preserve"
           filename="call-stream.c"
           line="21">#TpCallStream is a sub-class of #TpProxy providing convenient API
to represent #TpCallChannel's stream.</doc>
    </docsection>
    <docsection name="capabilities">
      <doc xml:space="preserve"
           filename="capabilities.c"
           line="36">#TpCapabilities objects represent the capabilities a #TpConnection
or a #TpContact supports.</doc>
    </docsection>
    <docsection name="channel">
      <doc xml:space="preserve"
           filename="channel.c"
           line="43">#TpChannel objects provide convenient access to Telepathy channels.

Compared with a simple proxy for method calls, they add the following
features:

* calling GetChannelType(), GetInterfaces(), GetHandles() automatically

This section also documents the auto-generated C wrappers for the
Channel D-Bus interface. Of these, in general, only
tp_cli_channel_call_close() and tp_cli_channel_run_close() are useful (the
#TpChannel object provides a more convenient API for the rest).</doc>
    </docsection>
    <docsection name="channel-dispatch-operation">
      <doc xml:space="preserve"
           filename="channel-dispatch-operation.c"
           line="45">One of the channel dispatcher's functions is to offer incoming channels to
Approver clients for approval. Approvers respond to the channel dispatcher
via a #TpChannelDispatchOperation object.</doc>
    </docsection>
    <docsection name="channel-dispatcher">
      <doc xml:space="preserve"
           filename="channel-dispatcher.c"
           line="38">The #TpChannelDispatcher object can be used to communicate with any
implementation of the Telepathy ChannelDispatcher service to request
new channels.</doc>
    </docsection>
    <docsection name="channel-request">
      <doc xml:space="preserve"
           filename="channel-request.c"
           line="46">Requesting a channel from the channel dispatcher can take some time, so an
object is created in the channel dispatcher to represent each request.
Objects of the #TpChannelRequest class provide access to one of those
objects.</doc>
    </docsection>
    <function-macro name="clear_boxed"
                    c:identifier="tp_clear_boxed"
                    version="0.11.7"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="1377">Set a variable holding a boxed object to %NULL. If it was not already %NULL,
destroy the boxed object it previously pointed to, as appropriate for
@gtype.

More precisely, if *@pp is non-%NULL, set *@pp to %NULL, then
call g_boxed_free() on the object that *@pp previously pointed to.

This is similar to tp_clear_pointer(); see that function's documentation
for typical usage.</doc>
      <source-position filename="util.h" line="161"/>
      <parameters>
        <parameter name="gtype">
          <doc xml:space="preserve"
               filename="util.c"
               line="1379">the #GType of *@pp, e.g. %G_TYPE_HASH_TABLE</doc>
        </parameter>
        <parameter name="pp">
          <doc xml:space="preserve"
               filename="util.c"
               line="1380">a pointer to a variable, struct member etc. holding a boxed object</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="clear_object"
                    c:identifier="tp_clear_object"
                    version="0.11.7"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="1326">Set a variable holding a #GObject to %NULL. If it was not already %NULL,
unref the object it previously pointed to.

This is exactly equivalent to calling tp_clear_pointer() on @op,
with @destroy = g_object_unref(). See tp_clear_pointer() for example usage.</doc>
      <source-position filename="util.h" line="159"/>
      <parameters>
        <parameter name="op">
          <doc xml:space="preserve"
               filename="util.c"
               line="1328">a pointer to a variable, struct member etc. holding a #GObject</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="clear_pointer"
                    c:identifier="tp_clear_pointer"
                    version="0.11.7"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="1339">Set a variable holding a pointer to %NULL. If it was not already %NULL,
unref or destroy the object it previously pointed to with @destroy.

More precisely, if *@pp is non-%NULL, set *@pp to %NULL, then
call @destroy on the object that *@pp previously pointed to.

This is analogous to g_clear_error() for non-error objects, but also
ensures that @pp is already %NULL before the destructor is run.

Typical usage is something like this:

|[
typedef struct {
  TpConnection *conn;
  GError *error;
  GHashTable *table;
  MyStruct *misc;
} Foo;
Foo *foo;

...

tp_clear_object (&amp;amp;foo-&gt;conn);
g_clear_error (&amp;amp;foo-&gt;error);
tp_clear_boxed (G_TYPE_HASH_TABLE, &amp;amp;foo-&gt;table);
tp_clear_pointer (&amp;amp;foo-&gt;misc, my_struct_destroy);
]|</doc>
      <source-position filename="util.h" line="146"/>
      <parameters>
        <parameter name="pp">
          <doc xml:space="preserve"
               filename="util.c"
               line="1341">a pointer to a variable, struct member etc. holding a pointer</doc>
        </parameter>
        <parameter name="destroy">
          <doc xml:space="preserve"
               filename="util.c"
               line="1342">a function to which a gpointer can be passed, to destroy *@pp
 (if calling this macro from C++, explicitly casting the function to
 #GDestroyNotify may be necessary)</doc>
        </parameter>
      </parameters>
    </function-macro>
    <docsection name="client-channel-factory">
      <doc xml:space="preserve"
           filename="client-channel-factory.c"
           line="21">Client channel factories are used to create channel proxies. An application
wanting to use its own #TpChannel subclass has to implement an object
implementing the #TpClientChannelFactoryInterface interface.

Once a channel has been created by a factory using
tp_client_channel_factory_create_channel(), the caller should then prepare
on it the channel features returned by
tp_client_channel_factory_dup_channel_features() using
tp_proxy_prepare_async().</doc>
    </docsection>
    <docsection name="client-message">
      <doc xml:space="preserve"
           filename="client-message.c"
           line="21">#TpClientMessage is used within Telepathy clients to represent a
message composed by a client, which it will send using the
Messages interface.
Its subclass #TpSignalledMessage represents messages as signalled by a
connection manager.</doc>
    </docsection>
    <docsection name="connection">
      <doc xml:space="preserve"
           filename="connection.c"
           line="55">#TpConnection objects represent Telepathy instant messaging connections
accessed via D-Bus.

#TpConnection objects should be obtained from a #TpAccount, unless you
are implementing a lower-level Telepathy component (such as the account
manager service itself).

Since 0.16, #TpConnection always has a non-%NULL #TpProxy:factory, and its
#TpProxy:factory will be propagated to its #TpChannel objects
(if any). Similarly, the #TpProxy:factory&lt;!-- --&gt;'s features
will be used for #TpContact objects.
If a #TpConnection is created without going via the
#TpAccount or specifying a #TpProxy:factory, the default
is to use a new #TpAutomaticClientFactory.</doc>
    </docsection>
    <docsection name="connection-manager">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="44">#TpConnectionManager objects represent Telepathy connection managers. They
can be used to open connections.</doc>
    </docsection>
    <docsection name="contact">
      <doc xml:space="preserve"
           filename="contact.c"
           line="52">#TpContact objects represent the contacts on a particular #TpConnection.</doc>
    </docsection>
    <docsection name="contact-search">
      <doc xml:space="preserve"
           filename="contact-search.c"
           line="38">#TpContactSearch objects represent ongoing searches for contacts. They
implement the #GAsyncInitable interface, so the initialization may fail.

In normal circumstances, after creating a #TpContactSearch object, you
would connect to the #TpContactSearch::search-results-received signal
to get search results when a search happens. You would then call
tp_contact_search_get_search_keys() to get the search keys, and then
do a search using tp_contact_search_start(). When results are found,
the #TpContactSearch::search-results-received callback will be called.

You can check the search state by looking at the
#TpContactSearch:state property. If you want to be notified about
changes, connect to the notify::state signal, see
#GObject::notify for details.

You can search as many times as you want on a #TpContactSearch object,
but you need to call tp_contact_search_reset_async() between searches.</doc>
    </docsection>
    <docsection name="contact-search-result">
      <doc xml:space="preserve"
           filename="contact-search-result.c"
           line="36">#TpContactSearchResult objects represent results for
#TpContactSearch.</doc>
    </docsection>
    <function name="contact_info_list_copy"
              c:identifier="tp_contact_info_list_copy"
              moved-to="ContactInfoList.copy"
              version="0.11.7"
              introspectable="0">
      <doc xml:space="preserve"
           filename="connection-contact-info.c"
           line="298">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="connection.h" line="92"/>
      <return-value>
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="304">a new #GList of newly allocated #TpContactInfoField, free it with
 tp_contact_info_list_free()</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="300">a #GList of #TpContactInfoField</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="contact_info_list_free"
              c:identifier="tp_contact_info_list_free"
              moved-to="ContactInfoList.free"
              version="0.11.7"
              introspectable="0">
      <doc xml:space="preserve"
           filename="connection-contact-info.c"
           line="315">Free all memory used by the #GList and its elements.</doc>
      <source-position filename="connection.h" line="93"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="317">a #GList of #TpContactInfoField</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="contact_info_spec_list_copy"
              c:identifier="tp_contact_info_spec_list_copy"
              moved-to="ContactInfoSpecList.copy"
              version="0.11.7"
              introspectable="0">
      <doc xml:space="preserve"
           filename="connection-contact-info.c"
           line="148">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="connection.h" line="63"/>
      <return-value>
        <doc xml:space="preserve"
             filename="connection-contact-info.c"
             line="154">a new #GList of newly allocated #TpContactInfoFieldSpec,
 free it with tp_contact_info_spec_list_free()</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="150">a #GList of #TpContactInfoFieldSpec</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="contact_info_spec_list_free"
              c:identifier="tp_contact_info_spec_list_free"
              moved-to="ContactInfoSpecList.free"
              version="0.11.7"
              introspectable="0">
      <doc xml:space="preserve"
           filename="connection-contact-info.c"
           line="165">Free all memory used by the #GList and its elements.</doc>
      <source-position filename="connection.h" line="64"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="list" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-contact-info.c"
               line="167">a #GList of #TpContactInfoFieldSpec</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <docsection name="contacts-mixin">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="22">This mixin can be added to a #TpBaseConnection subclass to implement the
Contacts interface in a generic way.

To use the contacts mixin, include a #TpContactsMixinClass somewhere in
your class structure and a #TpContactsMixin somewhere in your instance
structure, and call tp_contacts_mixin_class_init() from your class_init
function, tp_contacts_mixin_init() from your init function or constructor,
and tp_contacts_mixin_finalize() from your dispose or finalize function.

To use the contacts mixin as the implementation of
#TpSvcConnectionInterfaceContacts, in the function you pass to
G_IMPLEMENT_INTERFACE, you should call tp_contacts_mixin_iface_init.
TpContactsMixin implements all of the D-Bus methods and properties in the
Contacts interface.

To add interfaces with contact attributes to this interface use
tp_contacts_mixin_add_contact_attributes_iface:</doc>
    </docsection>
    <function name="contacts_mixin_add_contact_attributes_iface"
              c:identifier="tp_contacts_mixin_add_contact_attributes_iface"
              moved-to="ContactsMixin.add_contact_attributes_iface"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="481">Declare that the given interface has contact attributes which can be added
to the attributes hash using the filler function. All the handles in the
handle array passed to the filler function are guaranteed to be valid and
referenced.</doc>
      <source-position filename="contacts-mixin.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="483">An instance of the implementation that uses this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="484">Name of the interface that has ContactAttributes</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fill_contact_attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="485">Contact attribute filler function</doc>
          <type name="ContactsMixinFillContactAttributesFunc"
                c:type="TpContactsMixinFillContactAttributesFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="contacts_mixin_class_get_offset_quark"
              c:identifier="tp_contacts_mixin_class_get_offset_quark"
              moved-to="ContactsMixinClass.get_offset_quark"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="139">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
      <source-position filename="contacts-mixin.h" line="96"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="144">the quark used for storing mixin offset on a GObjectClass</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="contacts_mixin_class_init"
              c:identifier="tp_contacts_mixin_class_init"
              moved-to="ContactsMixinClass.init"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="183">Initialize the contacts mixin. Should be called from the implementation's
class_init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_contacts_mixin_class_init ((GObjectClass *) klass,
                         G_STRUCT_OFFSET (SomeObjectClass, contacts_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="contacts-mixin.h" line="99"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj_cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="185">The class of the implementation that uses this mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="186">The byte offset of the TpContactsMixinClass within the class
         structure</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="contacts_mixin_finalize"
              c:identifier="tp_contacts_mixin_finalize"
              moved-to="ContactsMixin.finalize"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="251">Free resources held by the contacts mixin.</doc>
      <source-position filename="contacts-mixin.h" line="102"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="253">An object with this mixin.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="contacts_mixin_get_contact_attributes"
              c:identifier="tp_contacts_mixin_get_contact_attributes"
              moved-to="ContactsMixin.get_contact_attributes"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="272">Get contact attributes for the given contacts. Provide attributes for all requested
interfaces. If contact attributes are not immediately known, the behaviour is defined
by the interface; the attribute should either be omitted from the result or replaced
with a default value.</doc>
      <source-position filename="contacts-mixin.h" line="113"/>
      <return-value>
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="291">A dictionary mapping the contact handles to contact attributes.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="274">A connection instance that uses this mixin. The connection must be connected.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="275">List of handles to retrieve contacts for. Any invalid handles will be
dropped from the returned mapping.</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="interfaces" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="277">A list of interfaces to retrieve attributes from.</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="assumed_interfaces" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="278">A list of additional interfaces to retrieve attributes
 from. This can be used for interfaces documented as automatically included,
 like %TP_IFACE_CONNECTION for GetContactAttributes,
 or %TP_IFACE_CONNECTION and %TP_IFACE_CONNECTION_INTERFACE_CONTACT_LIST for
 GetContactListAttributes.</doc>
          <type name="utf8" c:type="const gchar**"/>
        </parameter>
        <parameter name="sender" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="283">The DBus client's unique name. If this is not NULL, the requested handles
will be held on behalf of this client.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="contacts_mixin_get_offset_quark"
              c:identifier="tp_contacts_mixin_get_offset_quark"
              moved-to="ContactsMixin.get_offset_quark"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="161">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
      <source-position filename="contacts-mixin.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="contacts-mixin.c"
             line="166">the quark used for storing mixin offset on a GObject</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="contacts_mixin_iface_init"
              c:identifier="tp_contacts_mixin_iface_init"
              moved-to="ContactsMixin.iface_init"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="455">Fill in the vtable entries needed to implement the contacts interface
using this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</doc>
      <source-position filename="contacts-mixin.h" line="104"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="457">A pointer to the #TpSvcConnectionInterfaceContacts in an object
class</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="459">Ignored</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="contacts_mixin_init"
              c:identifier="tp_contacts_mixin_init"
              moved-to="ContactsMixin.init"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="217">Initialize the contacts mixin. Should be called from the implementation's
instance init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_contacts_mixin_init ((GObject *) self,
                    G_STRUCT_OFFSET (SomeObject, contacts_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="contacts-mixin.h" line="101"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="219">An instance of the implementation that uses this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="220">The byte offset of the TpContactsMixin within the object structure</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="contacts_mixin_set_contact_attribute"
              c:identifier="tp_contacts_mixin_set_contact_attribute"
              moved-to="ContactsMixin.set_contact_attribute"
              version="0.7.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="contacts-mixin.c"
           line="510">Utility function to set attribute for handle to value in the attributes hash
as passed to a TpContactsMixinFillContactAttributesFunc.</doc>
      <source-position filename="contacts-mixin.h" line="110"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="contact_attributes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="512">contacts attribute hash as passed to
  TpContactsMixinFillContactAttributesFunc</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="514">Handle to set the attribute on</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="attribute" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="515">attribute name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="contacts-mixin.c"
               line="516">slice allocated GValue containing the value of the attribute, for
instance with tp_g_value_slice_new. Ownership of the GValue is taken over by
the mixin</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="dbus">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="22">D-Bus utility functions used in telepathy-glib.</doc>
    </docsection>
    <docsection name="dbus-properties-mixin">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="32">This mixin provides an implementation of the org.freedesktop.DBus.Properties
interface. It relies on the auto-generated service-side GInterfaces from
telepathy-glib &gt;= 0.7.3, or something similar, to register the abstract
properties and their GTypes; classes with the mixin can then register
an implementation of the properties.

To register D-Bus properties in a GInterface to be implementable with this
mixin, either use the code-generation tools from telepathy-glib &gt;= 0.7.3,
or call tp_svc_interface_set_dbus_properties_info() from a section of the
base_init function that only runs once.

To use this mixin, include a #TpDBusPropertiesMixinClass somewhere
in your class structure, populate it with pointers to statically allocated
(or duplicated and never freed) data, and call
tp_dbus_properties_mixin_class_init() from your class_init implementation.

To use this mixin as the implementation of #TpSvcDBusProperties,
call &lt;literal&gt;G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_DBUS_PROPERTIES,
tp_dbus_properties_mixin_iface_init)&lt;/literal&gt; in the fourth argument to
&lt;literal&gt;G_DEFINE_TYPE_WITH_CODE&lt;/literal&gt;.</doc>
    </docsection>
    <docsection name="dbus-tube-channel">
      <doc xml:space="preserve"
           filename="dbus-tube-channel.c"
           line="21">#TpDBusTubeChannel provides API for working with D-Bus tube channels, which
allow applications to open D-Bus connections to a contact or chat room.

To create a new outgoing D-Bus tube channel, do something like:

|[
GHashTable *request_properties = tp_asv_new (
    TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_DBUS_TUBE,
    TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
    TP_PROP_CHANNEL_TARGET_ID, G_TYPE_STRING, tp_contact_get_identifier (contact),
    TP_PROP_CHANNEL_TYPE_DBUS_TUBE_SERVICE_NAME, G_TYPE_STRING, "com.example.walrus",
    NULL);
TpAccountChannelRequest *req = tp_account_channel_request_new (account,
    request_properties, TP_USER_ACTION_TIME_NOT_USER_ACTION);
tp_account_channel_request_create_and_handle_channel_async (req, NULL, callback, NULL);

// ...

static void
callback (
    GObject *source,
    GAsyncResult *result,
    gpointer user_data)
{
  TpAccountChannelRequest *req = TP_ACCOUNT_CHANNEL_REQUEST (source);
  TpChannel *channel;
  GError *error = NULL;

  channel = tp_account_channel_request_create_and_handle_channel_finish (req, result, &amp;error);
  tp_dbus_tube_channel_offer_async (TP_DBUS_TUBE_CHANNEL (channel), NULL, offer_callback, NULL);
}
]|

You can find a fuller example in the &lt;ulink
url="http://cgit.freedesktop.org/telepathy/telepathy-glib/tree/examples/client/dbus-tubes/"&gt;examples/client/dbus-tubes&lt;/ulink&gt;
directory.</doc>
    </docsection>
    <function name="dbus_check_valid_bus_name"
              c:identifier="tp_dbus_check_valid_bus_name"
              version="0.7.1"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="216">Check that the given string is a valid D-Bus bus name of an appropriate
type.</doc>
      <source-position filename="dbus.h" line="48"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="228">%TRUE if @name is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="218">a possible bus name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="allow_types" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="219">some combination of %TP_DBUS_NAME_TYPE_UNIQUE,
 %TP_DBUS_NAME_TYPE_WELL_KNOWN or %TP_DBUS_NAME_TYPE_BUS_DAEMON
 (often this will be %TP_DBUS_NAME_TYPE_NOT_BUS_DAEMON or
 %TP_DBUS_NAME_TYPE_ANY)</doc>
          <type name="DBusNameType" c:type="TpDBusNameType"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_check_valid_interface_name"
              c:identifier="tp_dbus_check_valid_interface_name"
              version="0.7.1"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="362">Check that the given string is a valid D-Bus interface name. This is
also appropriate to use to check for valid error names.

Since GIO 2.26, g_dbus_is_interface_name() should always return the same
thing, although the GLib function does not raise an error explaining why
the interface name is incorrect.</doc>
      <source-position filename="dbus.h" line="51"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="375">%TRUE if @name is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="364">a possible interface name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_check_valid_member_name"
              c:identifier="tp_dbus_check_valid_member_name"
              version="0.7.1"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="475">Check that the given string is a valid D-Bus member (method or signal) name.

Since GIO 2.26, g_dbus_is_member_name() should always return the same
thing, although the GLib function does not raise an error explaining why
the interface name is incorrect.</doc>
      <source-position filename="dbus.h" line="54"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="487">%TRUE if @name is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="477">a possible member name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_check_valid_object_path"
              c:identifier="tp_dbus_check_valid_object_path"
              version="0.7.1"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="540">Check that the given string is a valid D-Bus object path. Since GLib 2.24,
g_variant_is_object_path() should always return the same thing as this
function, although it doesn't provide an error explaining why the object
path is invalid.</doc>
      <source-position filename="dbus.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus.c"
             line="551">%TRUE if @path is valid</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="542">a possible object path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_errors_quark" c:identifier="tp_dbus_errors_quark">
      <source-position filename="_gen/proxy-introspectable.h" line="47"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="dbus_g_method_return_not_implemented"
              c:identifier="tp_dbus_g_method_return_not_implemented"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="86">Return the Telepathy error NotImplemented from the method invocation
given by @context.</doc>
      <source-position filename="dbus.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="context" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus.c"
               line="88">The D-Bus method invocation context</doc>
          <type c:type="DBusGMethodInvocation*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_class_init"
              c:identifier="tp_dbus_properties_mixin_class_init"
              moved-to="DBusPropertiesMixinClass.init"
              version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="574">Initialize the class @cls to use the D-Bus Properties mixin.
The given struct member, of size sizeof(TpDBusPropertiesMixinClass),
will be used to store property implementation information.

Each property and each interface must have been declared as a member of
a GInterface implemented by @cls, using
tp_svc_interface_set_dbus_properties_info().

Before calling this function, the array @interfaces must have been
placed in the #TpDBusPropertiesMixinClass structure; if it would be empty,
it may instead be %NULL.

This function should be called from the class_init callback in such a way
that it will only be called once, even if the class is subclassed.

Changed in 0.7.9: TpDBusPropertiesMixinClass::interfaces may now be %NULL,
which means that only interfaces whose properties are set up using
tp_dbus_properties_mixin_implement_interface() will be used.

Changed in 0.7.15: @offset may now be 0, in which case the
#TpDBusPropertiesMixinClass can be omitted from @cls.  It is treated as if
it were present, but with all fields (including
TpDBusPropertiesMixinClass::interfaces) being %NULL, so only interfaces
whose properties are set using
tp_dbus_properties_mixin_implement_interface() will be used.</doc>
      <source-position filename="dbus-properties-mixin.h" line="120"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="576">a subclass of #GObjectClass</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="577">the offset within @cls of a TpDBusPropertiesMixinClass structure</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_dup_all"
              c:identifier="tp_dbus_properties_mixin_dup_all"
              version="0.21.2">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="1150">Get all the properties of a particular interface. This implementation
never returns an error: it will return an empty map if the interface
is unknown.</doc>
      <source-position filename="dbus-properties-mixin.h" line="142"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="1159">a map
 from property name (without the interface name) to value</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="GObject.Value"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1152">an object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1153">a D-Bus interface name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_emit_properties_changed"
              c:identifier="tp_dbus_properties_mixin_emit_properties_changed"
              version="0.15.6">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="982">Emits the PropertiesChanged signal for the provided properties. Depending on
the EmitsChangedSignal annotations in the introspection XML, either the new
value of the property will be included in the signal, or merely the fact
that the property has changed.

For example, the MPRIS specification defines a TrackList interface with two
properties, one of which is annotated with EmitsChangedSignal=true and one
annotated with EmitsChangedSignal=invalidates. The following call would
include the new value of CanEditTracks and list Tracks as invalidated:

|[
   const gchar *properties[] = { "CanEditTracks", "Tracks", NULL };

   tp_dbus_properties_mixin_emit_properties_changed (G_OBJECT (self),
       "org.mpris.MediaPlayer2.TrackList", properties);
]|

It is an error to pass a property to this
function if the property is annotated with EmitsChangedSignal=false, or is
unannotated.</doc>
      <source-position filename="dbus-properties-mixin.h" line="158"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="984">an object which uses the D-Bus properties mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="985">the interface on which properties have changed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="properties"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="986">a %NULL-terminated array of (unqualified)
 property names whose values have changed.</doc>
          <type name="utf8" c:type="const gchar* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_emit_properties_changed_varargs"
              c:identifier="tp_dbus_properties_mixin_emit_properties_changed_varargs"
              version="0.15.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="1092">A shortcut for calling tp_dbus_properties_mixin_emit_properties_changed().</doc>
      <source-position filename="dbus-properties-mixin.h" line="164"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1094">an object which uses the D-Bus properties mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1095">the interface on which properties have changed</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1096">property names (unqualified) whose values have changed, terminated by
 %NULL.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_fill_properties_hash"
              c:identifier="tp_dbus_properties_mixin_fill_properties_hash"
              version="0.11.11"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="897">Retrieves the values of several D-Bus properties from an object, and adds
them to a hash mapping the fully-qualified name of the property to its
value. This is equivalent to calling tp_dbus_properties_mixin_get() for
each property and adding it to the table yourself, with the proviso that
this function will g_assert() if retrieving a property fails (for instance,
because it does not exist).

Note that in particular, @table does not have the same memory-allocation
model as the hash tables required by tp_asv_set_string() and similar
functions.</doc>
      <source-position filename="dbus-properties-mixin.h" line="150"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="899">an object which uses the D-Bus properties mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="table" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="900">a hash table where the keys are
 strings copied with g_strdup() and the values are slice-allocated
 #GValue&lt;!-- --&gt;s</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="GObject.Value"/>
          </type>
        </parameter>
        <parameter name="first_interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="903">the interface of the first property to be retrieved</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="first_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="904">the name of the first property to be retrieved</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="905">more (interface name, property name) pairs, terminated by %NULL.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_get"
              c:identifier="tp_dbus_properties_mixin_get"
              version="0.7.13"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="782">Initialize @value with the type of the property @property_name on
@interface_name, and write the value of that property into it as if
by calling the D-Bus method org.freedesktop.DBus.Properties.Get.

If Get would return a D-Bus error, @value remains unset and @error
is filled in instead.</doc>
      <source-position filename="dbus-properties-mixin.h" line="130"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="797">%TRUE (filling @value) on success, %FALSE (setting @error)
 on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="784">an object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="785">a D-Bus interface name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="786">a D-Bus property name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="787">an unset GValue (initialized to all zeroes)</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_getter_gobject_properties"
              c:identifier="tp_dbus_properties_mixin_getter_gobject_properties">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="230">An implementation of #TpDBusPropertiesMixinGetter which assumes that
the @getter_data is the name of a readable #GObject property of an
appropriate type, and uses it for the value of the D-Bus property.</doc>
      <source-position filename="dbus-properties-mixin.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="232">The exported object with the properties</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="233">A quark representing the D-Bus interface name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="234">A quark representing the D-Bus property name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="235">A GValue pre-initialized to the right type, into which to put
 the value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="getter_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="237">The getter_data from the #TpDBusPropertiesMixinPropImpl,
 which must be a string containing the GObject property's name</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_iface_init"
              c:identifier="tp_dbus_properties_mixin_iface_init">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="1339">Declare that the DBus.Properties interface represented by @g_iface
is implemented using this mixin.</doc>
      <source-position filename="dbus-properties-mixin.h" line="127"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1341">a pointer to a #TpSvcDBusPropertiesClass structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1342">ignored</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_implement_interface"
              c:identifier="tp_dbus_properties_mixin_implement_interface"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="452">Declare that, in addition to any interfaces set in
tp_dbus_properties_mixin_class_init(), the given class (and its subclasses)
will implement the properties of the interface @iface using the callbacks
@getter and @setter and the properties given by @props.

This function should be called from the class_init callback in such a way
that it will only be called once, even if the class is subclassed.

Typically, the static array @interfaces in the #TpDBusPropertiesMixinClass
should be used for interfaces whose properties are implemented directly by
the class @cls, and this function should be used for interfaces whose
properties are implemented by mixins.

It is an error for the same interface to appear in the array @interfaces
in the #TpDBusPropertiesMixinClass, and also be set up by this function.

If a class C and a subclass S both implement the properties of the same
interface, only the implementations from the subclass S will be used,
regardless of whether the implementations in C and/or S were set up by
this function or via the array @interfaces in the
#TpDBusPropertiesMixinClass.</doc>
      <source-position filename="dbus-properties-mixin.h" line="123"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="454">a subclass of #GObjectClass</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="455">a quark representing the the name of the interface to implement</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="getter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="456">a callback to get properties on this interface, or %NULL if they
 are all write-only</doc>
          <type name="DBusPropertiesMixinGetter"
                c:type="TpDBusPropertiesMixinGetter"/>
        </parameter>
        <parameter name="setter" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="458">a callback to set properties on this interface, or %NULL if they
 are all read-only</doc>
          <type name="DBusPropertiesMixinSetter"
                c:type="TpDBusPropertiesMixinSetter"/>
        </parameter>
        <parameter name="props" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="460">an array of #TpDBusPropertiesMixinPropImpl representing individual
 properties, terminated by one with @name == %NULL</doc>
          <type name="DBusPropertiesMixinPropImpl"
                c:type="TpDBusPropertiesMixinPropImpl*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_make_properties_hash"
              c:identifier="tp_dbus_properties_mixin_make_properties_hash"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="936">Retrieves the values of several D-Bus properties from an object, and builds
a hash mapping the fully-qualified name of the property to its value.  This
is equivalent to calling tp_dbus_properties_mixin_get() for each property
and building the table yourself, with the proviso that this function will
g_assert() if retrieving a property fails (for instance, because it does not
exist).

Additional keys and values can be inserted into the returned hash table;
if this is done, the inserted keys and values will be freed when the
hash table is destroyed. The keys must be allocated with g_strdup() or
equivalent, and the values must be slice-allocated (for instance with
tp_g_value_slice_new_string() or a similar function).

Note that in particular, tp_asv_set_string() and similar functions should
not be used with this hash table.</doc>
      <source-position filename="dbus-properties-mixin.h" line="145"/>
      <return-value>
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="959">a hash table mapping (gchar *) fully-qualified property names to
         GValues, which must be freed by the caller (at which point its
         contents will also be freed).</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="gpointer" c:type="gpointer"/>
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="938">an object which uses the D-Bus properties mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="first_interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="939">the interface of the first property to be retrieved</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="first_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="940">the name of the first property to be retrieved</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="941">more (interface name, property name) pairs, terminated by %NULL.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_set"
              c:identifier="tp_dbus_properties_mixin_set"
              version="0.15.8"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="1213">Sets a property to the value specified by @value, as if by
calling the D-Bus method org.freedesktop.DBus.Properties.Set.

If Set would return a D-Bus error, sets @error and returns %FALSE</doc>
      <source-position filename="dbus-properties-mixin.h" line="134"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="1226">%TRUE on success; %FALSE (setting @error) on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1215">an object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1216">a D-Bus interface name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="property_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1217">a D-Bus property name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="1218">a GValue containing the new value for this property.</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="dbus_properties_mixin_setter_gobject_properties"
              c:identifier="tp_dbus_properties_mixin_setter_gobject_properties"
              throws="1">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="268">An implementation of #TpDBusPropertiesMixinSetter which assumes that the
@setter_data is the name of a writable #GObject property of an appropriate
type, and sets that property to the given value.</doc>
      <source-position filename="dbus-properties-mixin.h" line="80"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="282">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="270">The exported object with the properties</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="iface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="271">A quark representing the D-Bus interface name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="272">A quark representing the D-Bus property name</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="273">The new value for the property</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="setter_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="274">The setter_data from the #TpDBusPropertiesMixinPropImpl,
 which must be a string containing the GObject property's name</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="debug">
      <doc xml:space="preserve"
           filename="debug.c"
           line="21">telepathy-glib has an internal mechanism for debug messages and filtering.
Connection managers written with telepathy-glib are expected to connect
this to their own debugging mechanisms: when the CM's debugging mechanism
is activated, it should call tp_debug_set_flags() and/or
tp_debug_set_persistent().

The supported debug-mode keywords and the debug messages that they enable
are subject to change, but currently include:

&lt;itemizedlist&gt;
&lt;listitem&gt;&lt;literal&gt;misc&lt;/literal&gt; - low-level utility code&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;manager&lt;/literal&gt; -
   #TpConnectionManager (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;connection&lt;/literal&gt; - #TpBaseConnection (service)
   and #TpConnection (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;contacts&lt;/literal&gt; - #TpContact objects
   (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;channel&lt;/literal&gt; - #TpChannel (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;im&lt;/literal&gt; - (text) instant messaging
   (service)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;properties&lt;/literal&gt; -
   &lt;link linkend="telepathy-glib-dbus-properties-mixin"&gt;TpDBusPropertiesMixin&lt;/link&gt; and #TpPropertiesMixin (service)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;params&lt;/literal&gt; - connection manager parameters
   (service)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;handles&lt;/literal&gt; - handle reference tracking tracking
   in #TpBaseConnection (service) and #TpConnection (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;accounts&lt;/literal&gt; - the #TpAccountManager and
    #TpAccount objects (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;contact-lists&lt;/literal&gt; - the #TpBaseContactList
   (service)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;debugger&lt;/literal&gt; - #TpDebugClient objects&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;tls&lt;/literal&gt; - #TpTLSCertificate objects
    (client)&lt;/listitem&gt;
&lt;listitem&gt;&lt;literal&gt;all&lt;/literal&gt; - all of the above&lt;/listitem&gt;
&lt;/itemizedlist&gt;</doc>
    </docsection>
    <docsection name="debug-client">
      <doc xml:space="preserve"
           filename="debug-client.c"
           line="38">This module provides access to the auxiliary objects used to
implement #TpSvcDebug.</doc>
    </docsection>
    <docsection name="debug-message">
      <doc xml:space="preserve"
           filename="debug-message.c"
           line="29">#TpDebugMessage is a small object used to represent a debug message receive
from a Telepathy component using #TpDebugClient.

See also: #TpDebugClient</doc>
    </docsection>
    <function name="debug_divert_messages"
              c:identifier="tp_debug_divert_messages"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="debug.c"
           line="338">Open the given file for writing and duplicate its file descriptor to
be used for stdout and stderr. This has the effect of closing the previous
stdout and stderr, and sending all messages that would have gone there
to the given file instead.

By default the file is truncated and hence overwritten each time the
process is executed.
Since version 0.7.14, if the filename is prefixed with '+' then the
file is not truncated and output is added at the end of the file.

Passing %NULL to this function is guaranteed to have no effect. This is
so you can call it with the recommended usage
&lt;literal&gt;tp_debug_divert_messages (g_getenv ("MYAPP_LOGFILE"))&lt;/literal&gt;
and it won't do anything if the environment variable is not set.

This function still works if telepathy-glib was compiled without debug
support.</doc>
      <source-position filename="debug.h" line="17"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="340">A file to which to divert stdout and stderr, or %NULL to
 do nothing</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_all_flags"
              c:identifier="tp_debug_set_all_flags"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="debug.c"
           line="85">Activate all possible debug modes. This also activates persistent mode,
which should have been orthogonal.</doc>
      <doc-deprecated xml:space="preserve">since 0.6.1. Use tp_debug_set_flags ("all") and
tp_debug_set_persistent() instead.</doc-deprecated>
      <source-position filename="debug.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_set_flags"
              c:identifier="tp_debug_set_flags"
              version="0.6.1">
      <doc xml:space="preserve"
           filename="debug.c"
           line="166">Set the debug flags indicated by @flags_string, in addition to any already
set.

The parsing matches that of g_parse_debug_string().

If telepathy-glib was compiled with --disable-debug (not recommended),
this function has no practical effect, since the debug messages it would
enable were removed at compile time.</doc>
      <source-position filename="debug.h" line="13"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="flags_string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="168">The flags to set, comma-separated. If %NULL or empty,
 no additional flags are set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_flags_from_env"
              c:identifier="tp_debug_set_flags_from_env"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="debug.c"
           line="219">Equivalent to
&lt;literal&gt;tp_debug_set_flags_from_string (g_getenv (var))&lt;/literal&gt;,
and has the same problem with persistence being included in "all".</doc>
      <doc-deprecated xml:space="preserve">since 0.6.1. Use tp_debug_set_flags(g_getenv(...)) and
tp_debug_set_persistent() instead</doc-deprecated>
      <source-position filename="debug.h" line="27"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="var" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="221">The name of the environment variable to parse</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_flags_from_string"
              c:identifier="tp_debug_set_flags_from_string"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="debug.c"
           line="193">Set the debug flags indicated by @flags_string, in addition to any already
set. Unlike tp_debug_set_flags(), this enables persistence like
tp_debug_set_persistent() if the "persist" flag is present or the string
is "all" - this turns out to be unhelpful, as persistence should be
orthogonal.

The parsing matches that of g_parse_debug_string().</doc>
      <doc-deprecated xml:space="preserve">since 0.6.1. Use tp_debug_set_flags() and
tp_debug_set_persistent() instead</doc-deprecated>
      <source-position filename="debug.h" line="24"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="flags_string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="195">The flags to set, comma-separated. If %NULL or empty,
 no additional flags are set.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_set_persistent"
              c:identifier="tp_debug_set_persistent">
      <doc xml:space="preserve"
           filename="debug.c"
           line="240">Used to enable persistent operation of the connection manager process for
debugging purposes.</doc>
      <source-position filename="debug.h" line="15"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="persistent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="242">TRUE prevents the connection manager mainloop from exiting,
             FALSE enables exiting if there are no connections
             (the default behavior).</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_timestamped_log_handler"
              c:identifier="tp_debug_timestamped_log_handler"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="debug.c"
           line="409">A #GLogFunc that prepends the UTC time (currently in ISO 8601 format,
with microsecond resolution) to the message, then calls
g_log_default_handler.

Intended usage is:

&lt;informalexample&gt;&lt;programlisting&gt;if (g_getenv ("MYPROG_TIMING") != NULL)
  g_log_set_default_handler (tp_debug_timestamped_log_handler, NULL);
&lt;/programlisting&gt;&lt;/informalexample&gt;

If telepathy-glib was compiled with --disable-debug (not recommended),
this function is equivalent to g_log_default_handler().

Changed in 0.9.0: timestamps are now printed in UTC, in
RFC-3339 format. Previously, they were printed in local time, in a
format similar to RFC-3339.</doc>
      <source-position filename="debug.h" line="19"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="log_domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="411">the message's log domain</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="log_level" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="412">the log level of the message</doc>
          <type name="GLib.LogLevelFlags" c:type="GLogLevelFlags"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="debug.c"
               line="413">the message to process</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="ignored"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="debug.c"
               line="414">not used</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_get_dbus_name"
              c:identifier="tp_error_get_dbus_name"
              version="0.7.31">
      <doc xml:space="preserve"
           filename="errors.c"
           line="293">&lt;!-- --&gt;</doc>
      <source-position filename="errors.h" line="112"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="errors.c"
             line="299">the D-Bus error name corresponding to @error.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="error" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="errors.c"
               line="295">a member of the #TpError enum.</doc>
          <type name="Error" c:type="TpError"/>
        </parameter>
      </parameters>
    </function>
    <function name="error_quark"
              c:identifier="tp_error_quark"
              version="0.11.13">
      <doc xml:space="preserve"
           filename="errors.c"
           line="320">Return the error domain quark for #TpError.</doc>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="errors_disconnected_quark"
              c:identifier="tp_errors_disconnected_quark">
      <source-position filename="connection.h" line="122"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="errors_quark"
              c:identifier="tp_errors_quark"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="errors.c"
           line="307">&lt;!-- --&gt;</doc>
      <doc-deprecated xml:space="preserve">Use tp_error_quark() instead.</doc-deprecated>
      <source-position filename="errors.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="errors_removed_from_group_quark"
              c:identifier="tp_errors_removed_from_group_quark">
      <source-position filename="channel.h" line="61"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="escape_as_identifier"
              c:identifier="tp_escape_as_identifier">
      <doc xml:space="preserve"
           filename="util.c"
           line="708">Escape an arbitrary string so it follows the rules for a C identifier,
and hence an object path component, interface element component,
bus name component or member name in D-Bus.

Unlike g_strcanon this is a reversible encoding, so it preserves
distinctness.

The escaping consists of replacing all non-alphanumerics, and the first
character if it's a digit, with an underscore and two lower-case hex
digits:

   "0123abc_xyz\x01\xff" -&gt; _30123abc_5fxyz_01_ff

i.e. similar to URI encoding, but with _ taking the role of %, and a
smaller allowed set. As a special case, "" is escaped to "_" (just for
completeness, really).</doc>
      <source-position filename="util.h" line="94"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="util.c"
             line="729">the escaped string, which must be freed by
 the caller with #g_free</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="710">The string to be escaped</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="external_group_mixin_finalize"
              c:identifier="tp_external_group_mixin_finalize"
              version="0.5.13"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2235">Remove the external group mixin. This function should usually be called
in the dispose or finalize function.</doc>
      <source-position filename="group-mixin.h" line="233"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2237">An object implementing the groups interface using an external group
   mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="external_group_mixin_get_dbus_property"
              c:identifier="tp_external_group_mixin_get_dbus_property"
              version="0.7.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2280">An implementation of #TpDBusPropertiesMixinGetter which assumes that the
@object has the external group mixin. It can only be used for the Group
interface.</doc>
      <source-position filename="group-mixin.h" line="237"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2282">An object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2283">Must be %TP_IFACE_QUARK_CHANNEL_INTERFACE_GROUP</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2284">A quark representing the D-Bus property name, either
 "GroupFlags", "HandleOwners", "LocalPendingMembers", "Members",
 "RemotePendingMembers" or "SelfHandle"</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2287">A GValue pre-initialized to the right type, into which to put the
 value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="unused"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2289">Ignored</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="external_group_mixin_iface_init"
              c:identifier="tp_external_group_mixin_iface_init"
              version="0.5.13"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2449">Fill in the vtable entries needed to implement the group interface using
the group mixin of another object. This function should usually be called
via G_IMPLEMENT_INTERFACE.</doc>
      <source-position filename="group-mixin.h" line="234"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2451">A #TpSvcChannelInterfaceGroupClass</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2452">Unused</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="external_group_mixin_init"
              c:identifier="tp_external_group_mixin_init"
              version="0.5.13"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2214">Fill in the qdata needed to implement the group interface using
the group mixin of another object. This function should usually be called
in the instance constructor.</doc>
      <source-position filename="group-mixin.h" line="232"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2216">An object implementing the groups interface using an external group
   mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="obj_with_mixin" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2218">A GObject with the group mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="external_group_mixin_init_dbus_properties"
              c:identifier="tp_external_group_mixin_init_dbus_properties"
              version="0.7.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2255">Set up #TpDBusPropertiesMixinClass to use this mixin's implementation of
the Group interface's properties.

This uses tp_group_mixin_get_dbus_property() as the property getter and
sets up a list of the supported properties for it.  Having called this, you
should add #TP_CHANNEL_GROUP_FLAG_PROPERTIES to channels containing the
mixin used by this class with tp_group_mixin_change_flags() to indicate that
the DBus properties are available.</doc>
      <source-position filename="group-mixin.h" line="239"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2257">The class of an object with this mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="file-transfer-channel">
      <doc xml:space="preserve"
           filename="file-transfer-channel.c"
           line="22">#TpFileTransferChannel is a sub-class of #TpChannel providing convenient
API to send and receive files.

The channel properties are available in
#TpFileTransferChannel:date, #TpFileTransferChannel:description,
#TpFileTransferChannel:filename,
#TpFileTransferChannel:initial-offset,
#TpFileTransferChannel:mime-type, #TpFileTransferChannel:size,
#TpFileTransferChannel:state, and
#TpFileTransferChannel:transferred-bytes GObject properties, with
accessor functions too.

To send a file to a contact, one should create a File Transfer
channel with the appropriate D-Bus properties set by specifying
their values in the channel creation method call. The file transfer
invitation will be sent to the remote contact when the channel is
created. For example:

|[
GHashTable *request = tp_asv_new (
    TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_FILE_TRANSFER,
    TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
    TP_PROP_CHANNEL_TARGET_ID, G_TYPE_STRING, "foo@bar.com",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_CONTENT_TYPE, G_TYPE_STRING, "text/plain",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DATE, G_TYPE_INT64, 1320925992,
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_DESCRIPTION, G_TYPE_STRING, "",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_FILENAME, G_TYPE_STRING, "test.pdf",
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_INITIAL_OFFSET, G_TYPE_UINT64, 0,
    TP_PROP_CHANNEL_TYPE_FILE_TRANSFER_SIZE, G_TYPE_UINT64, 165710,
    NULL);

TpAccountChannelRequest *channel_request = tp_account_channel_request_new (
    account, request,
    TP_USER_ACTION_TIME_CURRENT_TIME);

tp_account_channel_request_create_and_handle_channel_async (channel_request, NULL,
    create_and_handle_cb, NULL);

g_hash_table_unref (request);
]|

Once a #TpFileTransferChannel is created as a proxy to the channel
on D-Bus. The "notify::state" GObject signals on the resulting
channel should be monitored; when the channel moves to state
%TP_FILE_TRANSFER_STATE_ACCEPTED,
tp_file_transfer_channel_provide_file_async() should be called.

When an incoming File Transfer channel appears, one should call
tp_file_transfer_channel_accept_file_async().

To cancel or reject a pending or ongoing file transfer, one should
close the channel using tp_channel_close_async().</doc>
    </docsection>
    <function name="g_hash_table_update"
              c:identifier="tp_g_hash_table_update"
              version="0.7.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="541">Add each item in @source to @target, replacing any existing item with the
same key. @key_dup and @value_dup are used to duplicate the items; in
principle they could also be used to convert between types.</doc>
      <source-position filename="util.h" line="77"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="543">The hash table to be updated</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="544">The hash table to update it with (read-only)</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
        <parameter name="key_dup" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="545">function to duplicate a key from @source so it can be be stored
          in @target. If NULL, the key is not copied, but is used as-is</doc>
          <type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
        </parameter>
        <parameter name="value_dup" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="547">function to duplicate a value from @source so it can be stored
            in @target. If NULL, the value is not copied, but is used as-is</doc>
          <type name="GObject.BoxedCopyFunc" c:type="GBoxedCopyFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_key_file_get_int64"
              c:identifier="tp_g_key_file_get_int64"
              version="0.7.31"
              introspectable="0"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="util.c"
           line="819">Returns the value associated with @key under @group_name as a signed
64-bit integer. This is similar to g_key_file_get_integer() but can return
64-bit results without truncation.</doc>
      <doc-deprecated xml:space="preserve">Since 0.21.0. Use g_key_file_get_int64() instead.</doc-deprecated>
      <source-position filename="util.h" line="101"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="830">the value associated with the key as a signed 64-bit integer, or
0 if the key was not found or could not be parsed.</doc>
        <type name="gint64" c:type="gint64"/>
      </return-value>
      <parameters>
        <parameter name="key_file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="821">a non-%NULL #GKeyFile</doc>
          <type name="GLib.KeyFile" c:type="GKeyFile*"/>
        </parameter>
        <parameter name="group_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="822">a non-%NULL group name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="823">a non-%NULL key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_key_file_get_uint64"
              c:identifier="tp_g_key_file_get_uint64"
              version="0.7.31"
              introspectable="0"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="util.c"
           line="868">Returns the value associated with @key under @group_name as an unsigned
64-bit integer. This is similar to g_key_file_get_integer() but can return
large positive results without truncation.</doc>
      <doc-deprecated xml:space="preserve">Since 0.21.0. Use g_key_file_get_uint64() instead.</doc-deprecated>
      <source-position filename="util.h" line="104"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="879">the value associated with the key as an unsigned 64-bit integer,
or 0 if the key was not found or could not be parsed.</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="key_file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="870">a non-%NULL #GKeyFile</doc>
          <type name="GLib.KeyFile" c:type="GKeyFile*"/>
        </parameter>
        <parameter name="group_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="871">a non-%NULL group name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="872">a non-%NULL key</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_ptr_array_contains"
              c:identifier="tp_g_ptr_array_contains"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="115">&lt;!--no further documentation needed--&gt;</doc>
      <source-position filename="util.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="122">%TRUE if @needle is one of the elements of @haystack</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="haystack" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="117">The pointer array to be searched</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="needle"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="118">The pointer to look for</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_ptr_array_extend"
              c:identifier="tp_g_ptr_array_extend"
              version="0.14.3"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="148">Appends all elements of @source to @target. Note that this only copies the
pointers from @source; any duplication or reference-incrementing must be
performed by the caller.

After this function has been called, it is safe to call
g_ptr_array_free() on @source and also free the actual pointer array,
as long as doing so does not free the data pointed to by the new
items in @target.</doc>
      <source-position filename="util.h" line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="150">a #GPtrArray to copy items to</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="151">a #GPtrArray to copy items from</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="g_set_error_invalid_handle_type"
              c:identifier="tp_g_set_error_invalid_handle_type"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="errors.c"
           line="257">Set the error NotImplemented for an invalid handle type,
with an appropriate message.

Changed in version 0.7.23: previously, the error was
InvalidArgument.</doc>
      <source-position filename="errors.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="errors.c"
               line="259">An invalid handle type</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_set_error_unsupported_handle_type"
              c:identifier="tp_g_set_error_unsupported_handle_type"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="errors.c"
           line="275">Set the error NotImplemented for a handle type which is valid but is not
supported by this connection manager, with an appropriate message.

Changed in version 0.7.23: previously, the error was
InvalidArgument.</doc>
      <source-position filename="errors.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="errors.c"
               line="277">An unsupported handle type</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_signal_connect_object"
              c:identifier="tp_g_signal_connect_object"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="988">Connects a #GCallback function to a signal for a particular object, as if
with g_signal_connect(). Additionally, arranges for the signal handler to be
disconnected if @gobject is destroyed.

This is similar to g_signal_connect_data(), but uses a closure which
ensures that the @gobject stays alive during the call to @c_handler
by temporarily adding a reference count to @gobject.

This is similar to g_signal_connect_object(), but doesn't have the
documented bug that everyone is too scared to fix. Also, it does not allow
you to pass in NULL as @gobject

This is intended to be a convenient way for objects to use themselves as
user_data for callbacks without having to explicitly disconnect all the
handlers in their finalizers.

Changed in 0.10.4 and 0.11.3: %G_CONNECT_AFTER is now respected.</doc>
      <source-position filename="util.h" line="110"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="1015">the handler id</doc>
        <type name="gulong" c:type="gulong"/>
      </return-value>
      <parameters>
        <parameter name="instance"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="990">the instance to connect to.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="detailed_signal" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="991">a string of the form "signal-name::detail".</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="c_handler" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="992">the #GCallback to connect.</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="gobject"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="993">the object to pass as data to @c_handler.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="connect_flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="994">a combination of #GConnectFlags. Only
 %G_CONNECT_AFTER and %G_CONNECT_SWAPPED are supported by this function.</doc>
          <type name="GObject.ConnectFlags" c:type="GConnectFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_value_slice_dup"
              c:identifier="tp_g_value_slice_dup"
              version="0.5.14"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="502">&lt;!-- 'Returns' says it all --&gt;</doc>
      <source-position filename="util.h" line="75"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="util.c"
             line="508">a newly allocated copy of @value, to be freed with
tp_g_value_slice_free() or g_slice_free().</doc>
        <type name="GObject.Value" c:type="GValue*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve" filename="util.c" line="504">A GValue</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="g_value_slice_free"
              c:identifier="tp_g_value_slice_free"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="484">Unset and free a slice-allocated GValue.

&lt;literal&gt;(GDestroyNotify) tp_g_value_slice_free&lt;/literal&gt; can be used
as a destructor for values in a #GHashTable, for example.</doc>
      <source-position filename="util.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="486">A GValue which was allocated with the g_slice API</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_bus" c:identifier="tp_get_bus" introspectable="0">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="114">Returns a connection to the D-Bus daemon on which this process was
activated if it was launched by D-Bus service activation, or the session
bus otherwise.

If dbus_g_bus_get() fails, exit with error code 1.

Note that this function is not suitable for use in applications which can
be useful even in the absence of D-Bus - it is designed for use in
connection managers, which are not at all useful without a D-Bus
connection. See &amp;lt;https://bugs.freedesktop.org/show_bug.cgi?id=18832&amp;gt;.
Most processes should use tp_dbus_daemon_dup() instead.</doc>
      <source-position filename="dbus.h" line="139"/>
      <return-value>
        <doc xml:space="preserve"
             filename="dbus.c"
             line="129">a connection to the starter or session D-Bus daemon.</doc>
        <type c:type="DBusGConnection*"/>
      </return-value>
    </function>
    <function name="get_bus_proxy"
              c:identifier="tp_get_bus_proxy"
              introspectable="0"
              deprecated="1"
              deprecated-version="0.7.26">
      <doc xml:space="preserve"
           filename="dbus.c"
           line="146">Return a #DBusGProxy for the bus daemon object. The same caveats as for
tp_get_bus() apply.</doc>
      <doc-deprecated xml:space="preserve">Use tp_dbus_daemon_dup() in new code.</doc-deprecated>
      <source-position filename="dbus.h" line="142"/>
      <return-value>
        <doc xml:space="preserve"
             filename="dbus.c"
             line="152">a proxy for the bus daemon object on the starter or session bus.</doc>
        <type c:type="DBusGProxy*"/>
      </return-value>
    </function>
    <docsection name="group-mixin">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="24">This mixin can be added to a channel GObject class to implement the
groups interface in a general way.

To use the group mixin, include a #TpGroupMixinClass somewhere in your
class structure and a #TpGroupMixin somewhere in your instance structure,
and call tp_group_mixin_class_init() from your class_init function,
tp_group_mixin_init() from your init function or constructor, and
tp_group_mixin_finalize() from your dispose or finalize function.

To use the group mixin as the implementation of
#TpSvcChannelInterfaceGroup, call
&lt;literal&gt;G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CHANNEL_INTERFACE_GROUP,
tp_group_mixin_iface_init)&lt;/literal&gt; in the fourth argument to
&lt;literal&gt;G_DEFINE_TYPE_WITH_CODE&lt;/literal&gt;.

Since 0.5.13 you can also implement the group interface by forwarding all
group operations to the group mixin of an associated object (mainly useful
for Tubes channels). To do this, call tp_external_group_mixin_init()
in the constructor after the associated object has been set,
tp_external_group_mixin_finalize() in the dispose or finalize function, and
&lt;literal&gt;G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CHANNEL_INTERFACE_GROUP,
tp_external_group_mixin_iface_init)&lt;/literal&gt; in the fourth argument to
&lt;literal&gt;G_DEFINE_TYPE_WITH_CODE&lt;/literal&gt;.

Since 0.7.10 you can also implement the properties of Group channels,
by calling tp_group_mixin_init_dbus_properties() or
tp_external_group_mixin_init_dbus_properties() (as appropriate).</doc>
    </docsection>
    <function name="group_mixin_add_handle_owner"
              c:identifier="tp_group_mixin_add_handle_owner"
              moved-to="GroupMixin.add_handle_owner"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1833">Note that the given local handle is an alias within this group
for the given globally-valid handle. It will be returned from subsequent
GetHandleOwner queries where appropriate.

Changed in 0.7.10: The @owner_handle may be 0. To comply with telepathy-spec
 0.17.6, before adding any channel-specific handle to the members,
 local-pending members or remote-pending members, you must call either
 this function or tp_group_mixin_add_handle_owners().</doc>
      <source-position filename="group-mixin.h" line="221"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1835">A GObject implementing the group interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="local_handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1836">A contact handle valid within this group (may not be 0)</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="owner_handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1837">A contact handle valid globally, or 0 if the owner of the
 @local_handle is unknown</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_add_handle_owners"
              c:identifier="tp_group_mixin_add_handle_owners"
              moved-to="GroupMixin.add_handle_owners"
              version="0.7.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1920">Note that the given local handles are aliases within this group
for the given globally-valid handles.

To comply with telepathy-spec 0.17.6, before adding any channel-specific
handle to the members, local-pending members or remote-pending members, you
must call either this function or tp_group_mixin_add_handle_owner().</doc>
      <source-position filename="group-mixin.h" line="223"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1922">A GObject implementing the group interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="local_to_owner_handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1923">A map from contact handles valid within this group
 (which may not be 0) to either contact handles valid globally, or 0 if the
 owner of the corresponding key is unknown; all handles are stored using
 GUINT_TO_POINTER</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_add_members"
              c:identifier="tp_group_mixin_add_members"
              moved-to="GroupMixin.add_members"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="513">Request that the given contacts be added to the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
Otherwise attempt to add the contacts by calling the callbacks provided
by the channel implementation.</doc>
      <source-position filename="group-mixin.h" line="185"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="526">%TRUE on success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="515">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="516">A GArray of guint representing contacts</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="517">A message associated with the addition request, if supported</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_change_flags"
              c:identifier="tp_group_mixin_change_flags"
              moved-to="GroupMixin.change_flags"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1204">Request a change to be made to the flags. If any flags were actually
set or cleared, emits the GroupFlagsChanged signal with the changes.

It is an error to set any of the same bits in both @add and @del.

Changed in 0.7.7: the signal is not emitted if adding @add and
 removing @del had no effect on the existing group flags.</doc>
      <source-position filename="group-mixin.h" line="208"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1206">An object implementing the groups interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="add" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1207">Flags to be added</doc>
          <type name="ChannelGroupFlags" c:type="TpChannelGroupFlags"/>
        </parameter>
        <parameter name="del" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1208">Flags to be removed</doc>
          <type name="ChannelGroupFlags" c:type="TpChannelGroupFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_change_members"
              c:identifier="tp_group_mixin_change_members"
              moved-to="GroupMixin.change_members"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1675">Change the sets of members as given by the arguments, and emit the
MembersChanged and MembersChangedDetailed signals if the changes were not a
no-op.

This function must be called in response to events on the underlying
IM protocol, and must not be called in direct response to user input;
it does not respect the permissions flags, but changes the group directly.

If any two of add, del, add_local_pending and add_remote_pending have
a non-empty intersection, the result is undefined. Don't do that.

Each of the TpIntset arguments may be %NULL, which is treated as
equivalent to an empty set.</doc>
      <source-position filename="group-mixin.h" line="210"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1706">%TRUE if the group was changed and the MembersChanged(Detailed)
 signals were emitted; %FALSE if nothing actually changed and the signals
 were suppressed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1677">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1678">A message to be sent to the affected contacts if possible;
 %NULL is allowed, and is mapped to an empty string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="add" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1680">A set of contact handles to be added to the members (if not
 already present) and removed from local pending and remote pending
 (if present)</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="del" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1683">A set of contact handles to be removed from members,
 local pending or remote pending, wherever they are present</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="add_local_pending" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1685">A set of contact handles to be added to local pending,
 and removed from members and remote pending</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="add_remote_pending" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1687">A set of contact handles to be added to remote pending,
 and removed from members and local pending</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="actor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1689">The handle of the contact responsible for this change</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="reason" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1690">The reason for this change</doc>
          <type name="ChannelGroupChangeReason"
                c:type="TpChannelGroupChangeReason"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_change_members_detailed"
              c:identifier="tp_group_mixin_change_members_detailed"
              moved-to="GroupMixin.change_members_detailed"
              version="0.7.21"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1749">Change the sets of members as given by the arguments, and emit the
MembersChanged and MembersChangedDetailed signals if the changes were not a
no-op.

This function must be called in response to events on the underlying
IM protocol, and must not be called in direct response to user input;
it does not respect the permissions flags, but changes the group directly.

If any two of add, del, add_local_pending and add_remote_pending have
a non-empty intersection, the result is undefined. Don't do that.

Each of the TpIntset arguments may be %NULL, which is treated as
equivalent to an empty set.

details may contain, among other entries, the well-known
keys (and corresponding type, wrapped in a GValue) defined by the
Group.MembersChangedDetailed signal's specification; these include "actor"
(a handle as G_TYPE_UINT), "change-reason" (an element of
#TpChannelGroupChangeReason as G_TYPE_UINT), "message" (G_TYPE_STRING),
"error" (G_TYPE_STRING), "debug-message" (G_TYPE_STRING).

If all of the information in details could be passed to
tp_group_mixin_change_members() then calling this function instead provides
no benefit. Calling this function without setting
#TP_CHANNEL_GROUP_FLAG_MEMBERS_CHANGED_DETAILED with
tp_group_mixin_change_members() first is not very useful, as clients will
not know to listen for MembersChangedDetailed and thus will miss the
details.</doc>
      <source-position filename="group-mixin.h" line="214"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1792">%TRUE if the group was changed and the MembersChanged(Detailed)
 signals were emitted; %FALSE if nothing actually changed and the signals
 were suppressed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1751">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="add" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1752">A set of contact handles to be added to the members (if not
 already present) and removed from local pending and remote pending
 (if present)</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="del" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1755">A set of contact handles to be removed from members,
 local pending or remote pending, wherever they are present</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="add_local_pending" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1757">A set of contact handles to be added to local pending,
 and removed from members and remote pending</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="add_remote_pending" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1759">A set of contact handles to be added to remote pending,
 and removed from members and local pending</doc>
          <type name="Intset" c:type="const TpIntset*"/>
        </parameter>
        <parameter name="details" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1761">a map from strings to GValues detailing the change</doc>
          <type name="GLib.HashTable" c:type="const GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_change_self_handle"
              c:identifier="tp_group_mixin_change_self_handle"
              moved-to="GroupMixin.change_self_handle"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="426">Change the self-handle for this group to the given value.</doc>
      <source-position filename="group-mixin.h" line="218"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="428">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="new_self_handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="429">The new self-handle for this group</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_class_allow_self_removal"
              c:identifier="tp_group_mixin_class_allow_self_removal"
              moved-to="GroupMixinClass.allow_self_removal"
              version="0.7.27"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="269">Configure the mixin to allow attempts to remove the SelfHandle from this
Group, even if the group flags would otherwise disallow this. The
channel's #TpGroupMixinRemMemberFunc or
#TpGroupMixinRemMemberWithReasonFunc will be called as usual for such
attempts, and may make them fail with %TP_ERROR_PERMISSION_DENIED if
required.

This function should be called from the GObject @class_init callback,
after calling tp_group_mixin_class_init().

(Recent telepathy-spec changes make it valid to try to remove the
self-handle at all times, regardless of group flags. However, if this was
implemented automatically in TpGroupMixin, this would risk crashing
connection manager implementations that assume that TpGroupMixin will
enforce the group flags strictly. As a result, connection managers should
call this function to indicate to the TpGroupMixin that it may call their
removal callback with the self-handle regardless of flag settings.)</doc>
      <source-position filename="group-mixin.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj_cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="271">The class of an object implementing the group interface using this
 mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_class_get_offset_quark"
              c:identifier="tp_group_mixin_class_get_offset_quark"
              moved-to="GroupMixinClass.get_offset_quark"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="176">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="group-mixin.h" line="168"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="181">the quark used for storing mixin offset on a GObjectClass</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="group_mixin_class_init"
              c:identifier="tp_group_mixin_class_init"
              moved-to="GroupMixinClass.init"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="234">Configure the mixin for use with the given class.</doc>
      <source-position filename="group-mixin.h" line="171"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj_cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="236">The class of an object implementing the group interface using this
 mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="238">The offset of the TpGroupMixinClass structure within the class
 structure</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="add_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="240">A callback to be used to add contacts to this group</doc>
          <type name="GroupMixinAddMemberFunc"
                c:type="TpGroupMixinAddMemberFunc"/>
        </parameter>
        <parameter name="rem_func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="241">A callback to be used to remove contacts from this group.
 This must be %NULL if you will subsequently call
 tp_group_mixin_class_set_remove_with_reason_func().</doc>
          <type name="GroupMixinRemMemberFunc"
                c:type="TpGroupMixinRemMemberFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_class_set_remove_with_reason_func"
              c:identifier="tp_group_mixin_class_set_remove_with_reason_func"
              moved-to="GroupMixinClass.set_remove_with_reason_func"
              version="0.5.13"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="208">Set a callback to be used to implement RemoveMembers() and
RemoveMembersWithReason(). If this function is called during class
initialization, the given callback will be used instead of the remove
callback passed to tp_group_mixin_class_init() (which must be %NULL
in this case).</doc>
      <source-position filename="group-mixin.h" line="94"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="210">The class of an object implementing the group interface using this
 mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="func" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="212">A callback to be used to remove contacts from this group with a
 specified reason.</doc>
          <type name="GroupMixinRemMemberWithReasonFunc"
                c:type="TpGroupMixinRemMemberWithReasonFunc"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_finalize"
              c:identifier="tp_group_mixin_finalize"
              moved-to="GroupMixin.finalize"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="367">Unreference handles and free resources used by this mixin.</doc>
      <source-position filename="group-mixin.h" line="178"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="369">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_all_members"
              c:identifier="tp_group_mixin_get_all_members"
              moved-to="GroupMixin.get_all_members"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1014">Get the group's current and pending members.</doc>
      <source-position filename="group-mixin.h" line="201"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1027">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1016">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="members" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1017">Used to return a newly-allocated GArray of guint representing
the handles of the group's members</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="local_pending" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1019">Used to return a newly-allocated GArray of guint
representing the handles of the group's local pending members</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="remote_pending" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1021">Used to return a newly-allocated GArray of guint
representing the handles of the group's remote pending members</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_dbus_property"
              c:identifier="tp_group_mixin_get_dbus_property"
              moved-to="GroupMixin.get_dbus_property"
              version="0.7.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2060">An implementation of #TpDBusPropertiesMixinGetter which assumes that the
@object has the group mixin. It can only be used for the Group interface.</doc>
      <source-position filename="group-mixin.h" line="226"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2062">An object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2063">Must be %TP_IFACE_QUARK_CHANNEL_INTERFACE_GROUP</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2064">A quark representing the D-Bus property name, either
 "GroupFlags", "HandleOwners", "LocalPendingMembers", "Members",
 "RemotePendingMembers" or "SelfHandle"</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2067">A GValue pre-initialized to the right type, into which to put the
 value</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="unused"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2069">Ignored</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_group_flags"
              c:identifier="tp_group_mixin_get_group_flags"
              moved-to="GroupMixin.get_group_flags"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="471">Set the guint pointed to by ret to this group's flags, to be
interpreted according to TpChannelGroupFlags.</doc>
      <source-position filename="group-mixin.h" line="182"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="480">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="473">An object implementing the group mixin using this interface</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="474">Used to return the flags</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_handle_owners"
              c:identifier="tp_group_mixin_get_handle_owners"
              moved-to="GroupMixin.get_handle_owners"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="1068">If the mixin has the flag %TP_CHANNEL_GROUP_FLAG_CHANNEL_SPECIFIC_HANDLES,
return the global owners of the given local handles, or 0 where
unavailable.</doc>
      <source-position filename="group-mixin.h" line="205"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="1080">%TRUE (setting @ret) on success, %FALSE (setting @error) on
failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1070">An object implementing the group interface with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1071">An array of guint representing locally valid handles</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="1072">Used to return an array of guint representing globally valid
 handles, or 0 where unavailable, if %TRUE is returned</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_local_pending_members"
              c:identifier="tp_group_mixin_get_local_pending_members"
              moved-to="GroupMixin.get_local_pending_members"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="839">Get the group's local-pending members.</doc>
      <source-position filename="group-mixin.h" line="195"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="847">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="841">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="842">Used to return a newly-allocated GArray of guint contact handles</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_local_pending_members_with_info"
              c:identifier="tp_group_mixin_get_local_pending_members_with_info"
              moved-to="GroupMixin.get_local_pending_members_with_info"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="912">Get the group's local-pending members and information about their
requests to join the channel.</doc>
      <source-position filename="group-mixin.h" line="197"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="924">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="914">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="915">Used to return a newly-allocated GPtrArray of D-Bus structures each
containing the handle of a local-pending contact, the handle of a contact
 responsible for adding them to the group (or 0), the reason code
 and a related message (e.g. their request to join the group)</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_members"
              c:identifier="tp_group_mixin_get_members"
              moved-to="GroupMixin.get_members"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="797">Get the group's current members</doc>
      <source-position filename="group-mixin.h" line="193"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="805">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="799">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="800">Used to return a newly-allocated GArray of guint contact handles</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_offset_quark"
              c:identifier="tp_group_mixin_get_offset_quark"
              moved-to="GroupMixin.get_offset_quark"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="192">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="group-mixin.h" line="169"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="197">the quark used for storing mixin offset on a GObject</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="group_mixin_get_remote_pending_members"
              c:identifier="tp_group_mixin_get_remote_pending_members"
              moved-to="GroupMixin.get_remote_pending_members"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="970">Get the group's remote-pending members.</doc>
      <source-position filename="group-mixin.h" line="199"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="979">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="972">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="973">Used to return a newly-allocated GArray of guint representing the
handles of the group's remote pending members</doc>
          <array name="GLib.Array" c:type="GArray**">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_get_self_handle"
              c:identifier="tp_group_mixin_get_self_handle"
              moved-to="GroupMixin.get_self_handle"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="393">Set the guint pointed to by ret to the local user's handle in this
group, or to 0 if the local user is not present in this group.</doc>
      <source-position filename="group-mixin.h" line="180"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="402">%TRUE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="395">An object implementing the group mixin using this interface</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="ret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="396">Used to return the local user's handle in this group</doc>
          <type name="guint" c:type="guint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_iface_init"
              c:identifier="tp_group_mixin_iface_init"
              moved-to="GroupMixin.iface_init"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2017">Fill in the vtable entries needed to implement the group interface using
this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</doc>
      <source-position filename="group-mixin.h" line="230"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2019">A #TpSvcChannelInterfaceGroupClass</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2020">Unused</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_init"
              c:identifier="tp_group_mixin_init"
              moved-to="GroupMixin.init"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="302">Initialize the mixin.</doc>
      <source-position filename="group-mixin.h" line="176"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="304">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="305">The offset of the TpGroupMixin structure within the instance
 structure</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="handle_repo" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="307">The connection's handle repository for contacts</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="self_handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="308">The handle of the local user in this group, if any</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_init_dbus_properties"
              c:identifier="tp_group_mixin_init_dbus_properties"
              moved-to="GroupMixin.init_dbus_properties"
              version="0.7.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="2175">Set up #TpDBusPropertiesMixinClass to use this mixin's implementation of
the Group interface's properties.

This uses tp_group_mixin_get_dbus_property() as the property getter and
sets up a list of the supported properties for it.  Having called this, you
should add #TP_CHANNEL_GROUP_FLAG_PROPERTIES to any channels of this class
with tp_group_mixin_change_flags() to indicate that the DBus properties are
available.</doc>
      <source-position filename="group-mixin.h" line="228"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="2177">The class of an object with this mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_remove_members"
              c:identifier="tp_group_mixin_remove_members"
              moved-to="GroupMixin.remove_members"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="609">Request that the given contacts be removed from the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
If any of the handles is absent from the group, raise NotAvailable.
Otherwise attempt to remove the contacts by calling the callbacks provided
by the channel implementation.</doc>
      <source-position filename="group-mixin.h" line="187"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="623">%TRUE on success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="611">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="612">A GArray of guint representing contacts</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="613">A message to be sent to those contacts, if supported</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="group_mixin_remove_members_with_reason"
              c:identifier="tp_group_mixin_remove_members_with_reason"
              moved-to="GroupMixin.remove_members_with_reason"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="group-mixin.c"
           line="635">Request that the given contacts be removed from the group as if in response
to user action. If the group's flags prohibit this, raise
PermissionDenied. If any of the handles is invalid, raise InvalidHandle.
If any of the handles is absent from the group, raise NotAvailable.
Otherwise attempt to remove the contacts by calling the callbacks provided
by the channel implementation.</doc>
      <source-position filename="group-mixin.h" line="189"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="group-mixin.c"
             line="650">%TRUE on success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="637">An object implementing the group interface using this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="contacts" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="638">A GArray of guint representing contacts</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="639">A message to be sent to those contacts, if supported</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="reason" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="group-mixin.c"
               line="640">A #TpChannelGroupChangeReason</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="handle-channels-context">
      <doc xml:space="preserve"
           filename="handle-channels-context.c"
           line="21">Object used to represent the context of a Handler.HandleChannels()
D-Bus call on a #TpBaseClient.</doc>
    </docsection>
    <docsection name="handle-repo">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="23">Abstract interface of a repository for handles, supporting operations
which include checking for validity, lookup by
string value and lookup by numeric value. See #TpDynamicHandleRepo
and #TpStaticHandleRepo for concrete implementations.</doc>
    </docsection>
    <function name="handle_client_hold"
              c:identifier="tp_handle_client_hold"
              introspectable="0"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="165">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="175">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="167">not used</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="168">not used</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="169">not used</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_client_release"
              c:identifier="tp_handle_client_release"
              introspectable="0"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="215">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="108"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="225">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="217">ignored</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="218">ignored</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="219">ignored</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_ensure" c:identifier="tp_handle_ensure" throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="282">Return a handle for the given string, creating one if necessary. The string
is normalized, if possible.</doc>
      <source-position filename="handle-repo.h" line="119"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="292">the handle corresponding to the given string, or 0 if it
is invalid.</doc>
        <type name="Handle" c:type="TpHandle"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="284">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="285">A string whose handle is required</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="286">User data to be passed to the normalization callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_ensure_async"
              c:identifier="tp_handle_ensure_async"
              version="0.19.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="306">Asyncronously normalize an identifier and create an handle for it. This could
involve a server round-trip. This should be used instead of
tp_handle_ensure() for user provided contact identifiers, but it is not
necessary for identifiers from the server.</doc>
      <source-position filename="handle-repo.h" line="124"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="308">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="connection" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="309">the #TpBaseConnection using this handle repo</doc>
          <type name="BaseConnection" c:type="TpBaseConnection*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="310">A string whose handle is required</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="311">User data to be passed to the normalization callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="312">a callback to call when the operation finishes</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="313">data to pass to @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_ensure_finish"
              c:identifier="tp_handle_ensure_finish"
              version="0.19.2"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="334">Finishes tp_handle_ensure_async()</doc>
      <source-position filename="handle-repo.h" line="131"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="342">non-0 #TpHandle if the operation was successful, otherwise 0.</doc>
        <type name="Handle" c:type="TpHandle"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="336">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="337">a #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_get_qdata"
              c:identifier="tp_handle_get_qdata"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="413">&lt;!--Returns: says it all--&gt;</doc>
      <doc-deprecated xml:space="preserve">Since 0.19.9. It is not recommended to use this function
 because the associated data won't be freed until the connection disconnects.</doc-deprecated>
      <source-position filename="handle-repo.h" line="140"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="421">the data associated with a given key on a given handle; %NULL
if there is no associated data.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="repo" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="415">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="416">A handle to get data from</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="key_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="417">Key id of data to fetch</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_inspect"
              c:identifier="tp_handle_inspect"
              introspectable="0">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="260">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="handle-repo.h" line="115"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="267">the string represented by the given handle, or NULL if the
handle is absent from the repository. The string is owned by the
handle repository and will remain valid as long as a reference to
the handle exists.</doc>
        <type name="utf8" c:type="const char*"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="262">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="263">A handle of the type stored in the repository</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_is_valid"
              c:identifier="tp_handle_is_valid"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="44">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="handle-repo.h" line="86"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="52">%TRUE if the handle is nonzero and is present in the repository,
else %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="46">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="47">A handle of the type stored in the repository @self</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_lookup"
              c:identifier="tp_handle_lookup"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="355">Return the handle for the given string. The string is normalized if
possible. If no handle already exists for the string, none is created.</doc>
      <source-position filename="handle-repo.h" line="117"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="366">the handle corresponding to the given string, or 0 if it
does not exist or is invalid</doc>
        <type name="Handle" c:type="TpHandle"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="357">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="358">A string whose handle is required</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="context"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="359">User data to be passed to the normalization callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_ref"
              c:identifier="tp_handle_ref"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="90">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.

Changed in 0.13.6: @handle is now returned; previously,
this function didn't return anything.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="93"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="101">the same @handle</doc>
        <type name="Handle" c:type="TpHandle"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="92">not used</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="93">not used</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_set_qdata"
              c:identifier="tp_handle_set_qdata"
              moved-to="HandleSet.qdata"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="381">Associates a blob of data with a given handle and a given key

If @destroy is set, then the data is freed when the handle is freed.

Since version 0.13.8, handles always last as long as the
connection, so @destroy will not be called until the connection
disconnects.</doc>
      <doc-deprecated xml:space="preserve">Since 0.19.9. It is not recommended to use this function
 because the associated data won't be freed until the connection disconnects.</doc-deprecated>
      <source-position filename="handle-repo.h" line="137"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="repo" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="383">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="384">A handle to set data on</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="key_id" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="385">Key id to associate data with</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="386">data to associate with handle</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="387">A #GDestroyNotify to call to destroy the data,
          or NULL if not needed.</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_type_is_valid"
              c:identifier="tp_handle_type_is_valid"
              throws="1">
      <doc xml:space="preserve"
           filename="handle.h"
           line="65">If the given handle type is valid, return %TRUE. If not, set @error
and return %FALSE.</doc>
      <source-position filename="handle.h" line="77"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle.h"
             line="73">%TRUE if the handle type is valid.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle.h"
               line="67">A handle type, valid or not, to be checked</doc>
          <type name="HandleType" c:type="TpHandleType"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_type_to_string"
              c:identifier="tp_handle_type_to_string">
      <doc xml:space="preserve"
           filename="handle.c"
           line="26">&lt;!----&gt;</doc>
      <source-position filename="handle.h" line="95"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle.c"
             line="32">a human-readable string describing the handle type, e.g. "contact".
 For invalid handle types, returns "(no handle)" for 0 or
 "(invalid handle type)" for others.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle.c"
               line="28">A handle type, which need not be valid</doc>
          <type name="HandleType" c:type="TpHandleType"/>
        </parameter>
      </parameters>
    </function>
    <function name="handle_unref"
              c:identifier="tp_handle_unref"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="130">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="97"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="132">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="133">A handle of the type stored in the repository</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
      </parameters>
    </function>
    <function name="handles_are_valid"
              c:identifier="tp_handles_are_valid"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="66">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="handle-repo.h" line="88"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="76">%TRUE if the handle is present in the repository, else %FALSE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="68">A handle repository implementation</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="69">Array of TpHandle representing handles of the type stored in
          the repository @self</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="allow_zero" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="71">If %TRUE, zero is treated like a valid handle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="handles_client_hold"
              c:identifier="tp_handles_client_hold"
              introspectable="0"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="192">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="202">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="194">ignored</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="195">ignored</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="196">ignored</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="handles_client_release"
              c:identifier="tp_handles_client_release"
              introspectable="0"
              deprecated="1"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="237">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.c"
             line="247">%TRUE</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="239">ignored</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="client" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="240">ignored</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="241">ignored</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="handles_ref"
              c:identifier="tp_handles_ref"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="113">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="95"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="115">not used</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="116">not used</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="handles_supported_and_valid"
              c:identifier="tp_handles_supported_and_valid"
              introspectable="0"
              throws="1">
      <doc xml:space="preserve"
           filename="handle-repo.h"
           line="187">Return %TRUE if the given handle type is supported (i.e. repos[handle_type]
is not %NULL) and the given handles are all valid in that repository.
If not, set @error and return %FALSE.</doc>
      <source-position filename="handle-repo.h" line="207"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="handle-repo.h"
             line="201">%TRUE if the handle type is supported and the handles are all
valid.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="repos" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.h"
               line="189">An array of possibly null pointers to handle repositories, indexed
        by handle type, where a null pointer means an unsupported handle
        type</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface**"/>
        </parameter>
        <parameter name="handle_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.h"
               line="192">The handle type</doc>
          <type name="HandleType" c:type="TpHandleType"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.h"
               line="193">A GArray of guint representing handles of the given type</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
        <parameter name="allow_zero" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.h"
               line="194">If %TRUE, zero is treated like a valid handle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="handles_unref"
              c:identifier="tp_handles_unref"
              introspectable="0"
              deprecated="1">
      <doc xml:space="preserve"
           filename="handle-repo.c"
           line="148">Do nothing. Since version 0.13.8, handles always last as long as
the connection; previously, this function provided refcounting for handles.</doc>
      <doc-deprecated xml:space="preserve">This is no-op so can be safely removed.</doc-deprecated>
      <source-position filename="handle-repo.h" line="99"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="self" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="150">not used</doc>
          <type name="HandleRepoIface" c:type="TpHandleRepoIface*"/>
        </parameter>
        <parameter name="handles" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="handle-repo.c"
               line="151">not used</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="gpointer" c:type="gpointer"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="iface_quark_account" c:identifier="tp_iface_quark_account">
      <source-position filename="_gen/telepathy-interfaces.h" line="1341"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_account_interface_addressing"
              c:identifier="tp_iface_quark_account_interface_addressing">
      <source-position filename="_gen/telepathy-interfaces.h" line="1425"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_account_interface_avatar"
              c:identifier="tp_iface_quark_account_interface_avatar">
      <source-position filename="_gen/telepathy-interfaces.h" line="1413"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_account_interface_storage"
              c:identifier="tp_iface_quark_account_interface_storage">
      <source-position filename="_gen/telepathy-interfaces.h" line="1437"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_account_manager"
              c:identifier="tp_iface_quark_account_manager">
      <source-position filename="_gen/telepathy-interfaces.h" line="1320"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_authentication_tls_certificate"
              c:identifier="tp_iface_quark_authentication_tls_certificate">
      <source-position filename="_gen/telepathy-interfaces.h" line="1629"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content"
              c:identifier="tp_iface_quark_call_content">
      <source-position filename="_gen/telepathy-interfaces.h" line="1731"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_interface_audio_control"
              c:identifier="tp_iface_quark_call_content_interface_audio_control">
      <source-position filename="_gen/telepathy-interfaces.h" line="1716"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_interface_dtmf"
              c:identifier="tp_iface_quark_call_content_interface_dtmf">
      <source-position filename="_gen/telepathy-interfaces.h" line="1677"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_interface_media"
              c:identifier="tp_iface_quark_call_content_interface_media">
      <source-position filename="_gen/telepathy-interfaces.h" line="1650"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_interface_video_control"
              c:identifier="tp_iface_quark_call_content_interface_video_control">
      <source-position filename="_gen/telepathy-interfaces.h" line="1692"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_media_description"
              c:identifier="tp_iface_quark_call_content_media_description">
      <source-position filename="_gen/telepathy-interfaces.h" line="1812"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_media_description_interface_rtcp_extended_reports"
              c:identifier="tp_iface_quark_call_content_media_description_interface_rtcp_extended_reports">
      <source-position filename="_gen/telepathy-interfaces.h" line="1755"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_media_description_interface_rtcp_feedback"
              c:identifier="tp_iface_quark_call_content_media_description_interface_rtcp_feedback">
      <source-position filename="_gen/telepathy-interfaces.h" line="1785"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_content_media_description_interface_rtp_header_extensions"
              c:identifier="tp_iface_quark_call_content_media_description_interface_rtp_header_extensions">
      <source-position filename="_gen/telepathy-interfaces.h" line="1800"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_stream"
              c:identifier="tp_iface_quark_call_stream">
      <source-position filename="_gen/telepathy-interfaces.h" line="1878"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_stream_endpoint"
              c:identifier="tp_iface_quark_call_stream_endpoint">
      <source-position filename="_gen/telepathy-interfaces.h" line="1902"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_call_stream_interface_media"
              c:identifier="tp_iface_quark_call_stream_interface_media">
      <source-position filename="_gen/telepathy-interfaces.h" line="1839"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel" c:identifier="tp_iface_quark_channel">
      <source-position filename="_gen/telepathy-interfaces.h" line="534"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_dispatch_operation"
              c:identifier="tp_iface_quark_channel_dispatch_operation">
      <source-position filename="_gen/telepathy-interfaces.h" line="1494"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_dispatcher"
              c:identifier="tp_iface_quark_channel_dispatcher">
      <source-position filename="_gen/telepathy-interfaces.h" line="1458"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_dispatcher_interface_messages1"
              c:identifier="tp_iface_quark_channel_dispatcher_interface_messages1">
      <source-position filename="_gen/telepathy-interfaces.h" line="1473"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_dispatcher_interface_operation_list"
              c:identifier="tp_iface_quark_channel_dispatcher_interface_operation_list">
      <source-position filename="_gen/telepathy-interfaces.h" line="1482"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_anonymity"
              c:identifier="tp_iface_quark_channel_interface_anonymity">
      <source-position filename="_gen/telepathy-interfaces.h" line="825"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_call_state"
              c:identifier="tp_iface_quark_channel_interface_call_state">
      <source-position filename="_gen/telepathy-interfaces.h" line="843"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_captcha_authentication"
              c:identifier="tp_iface_quark_channel_interface_captcha_authentication">
      <source-position filename="_gen/telepathy-interfaces.h" line="852"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_chat_state"
              c:identifier="tp_iface_quark_channel_interface_chat_state">
      <source-position filename="_gen/telepathy-interfaces.h" line="873"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_conference"
              c:identifier="tp_iface_quark_channel_interface_conference">
      <source-position filename="_gen/telepathy-interfaces.h" line="885"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_destroyable"
              c:identifier="tp_iface_quark_channel_interface_destroyable">
      <source-position filename="_gen/telepathy-interfaces.h" line="912"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_dtmf"
              c:identifier="tp_iface_quark_channel_interface_dtmf">
      <source-position filename="_gen/telepathy-interfaces.h" line="921"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_file_transfer_metadata"
              c:identifier="tp_iface_quark_channel_interface_file_transfer_metadata">
      <source-position filename="_gen/telepathy-interfaces.h" line="939"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_group"
              c:identifier="tp_iface_quark_channel_interface_group">
      <source-position filename="_gen/telepathy-interfaces.h" line="954"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_hold"
              c:identifier="tp_iface_quark_channel_interface_hold">
      <source-position filename="_gen/telepathy-interfaces.h" line="984"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_media_signalling"
              c:identifier="tp_iface_quark_channel_interface_media_signalling">
      <source-position filename="_gen/telepathy-interfaces.h" line="993"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_messages"
              c:identifier="tp_iface_quark_channel_interface_messages">
      <source-position filename="_gen/telepathy-interfaces.h" line="1014"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_password"
              c:identifier="tp_iface_quark_channel_interface_password">
      <source-position filename="_gen/telepathy-interfaces.h" line="1038"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_room"
              c:identifier="tp_iface_quark_channel_interface_room">
      <source-position filename="_gen/telepathy-interfaces.h" line="1047"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_room_config"
              c:identifier="tp_iface_quark_channel_interface_room_config">
      <source-position filename="_gen/telepathy-interfaces.h" line="1071"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_sasl_authentication"
              c:identifier="tp_iface_quark_channel_interface_sasl_authentication">
      <source-position filename="_gen/telepathy-interfaces.h" line="1122"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_securable"
              c:identifier="tp_iface_quark_channel_interface_securable">
      <source-position filename="_gen/telepathy-interfaces.h" line="1161"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_service_point"
              c:identifier="tp_iface_quark_channel_interface_service_point">
      <source-position filename="_gen/telepathy-interfaces.h" line="1176"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_sms"
              c:identifier="tp_iface_quark_channel_interface_sms">
      <source-position filename="_gen/telepathy-interfaces.h" line="1215"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_subject"
              c:identifier="tp_iface_quark_channel_interface_subject">
      <source-position filename="_gen/telepathy-interfaces.h" line="1191"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_interface_tube"
              c:identifier="tp_iface_quark_channel_interface_tube">
      <source-position filename="_gen/telepathy-interfaces.h" line="1230"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_request"
              c:identifier="tp_iface_quark_channel_request">
      <source-position filename="_gen/telepathy-interfaces.h" line="1518"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_call"
              c:identifier="tp_iface_quark_channel_type_call">
      <source-position filename="_gen/telepathy-interfaces.h" line="567"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_contact_list"
              c:identifier="tp_iface_quark_channel_type_contact_list">
      <source-position filename="_gen/telepathy-interfaces.h" line="636"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_contact_search"
              c:identifier="tp_iface_quark_channel_type_contact_search">
      <source-position filename="_gen/telepathy-interfaces.h" line="645"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_dbus_tube"
              c:identifier="tp_iface_quark_channel_type_dbus_tube">
      <source-position filename="_gen/telepathy-interfaces.h" line="777"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_file_transfer"
              c:identifier="tp_iface_quark_channel_type_file_transfer">
      <source-position filename="_gen/telepathy-interfaces.h" line="666"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_room_list"
              c:identifier="tp_iface_quark_channel_type_room_list">
      <source-position filename="_gen/telepathy-interfaces.h" line="732"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_server_authentication"
              c:identifier="tp_iface_quark_channel_type_server_authentication">
      <source-position filename="_gen/telepathy-interfaces.h" line="795"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_server_tls_connection"
              c:identifier="tp_iface_quark_channel_type_server_tls_connection">
      <source-position filename="_gen/telepathy-interfaces.h" line="807"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_stream_tube"
              c:identifier="tp_iface_quark_channel_type_stream_tube">
      <source-position filename="_gen/telepathy-interfaces.h" line="762"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_streamed_media"
              c:identifier="tp_iface_quark_channel_type_streamed_media">
      <source-position filename="_gen/telepathy-interfaces.h" line="714"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_text"
              c:identifier="tp_iface_quark_channel_type_text">
      <source-position filename="_gen/telepathy-interfaces.h" line="744"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_channel_type_tubes"
              c:identifier="tp_iface_quark_channel_type_tubes">
      <source-position filename="_gen/telepathy-interfaces.h" line="753"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_client" c:identifier="tp_iface_quark_client">
      <source-position filename="_gen/telepathy-interfaces.h" line="1545"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_client_approver"
              c:identifier="tp_iface_quark_client_approver">
      <source-position filename="_gen/telepathy-interfaces.h" line="1575"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_client_handler"
              c:identifier="tp_iface_quark_client_handler">
      <source-position filename="_gen/telepathy-interfaces.h" line="1587"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_client_interface_requests"
              c:identifier="tp_iface_quark_client_interface_requests">
      <source-position filename="_gen/telepathy-interfaces.h" line="1608"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_client_observer"
              c:identifier="tp_iface_quark_client_observer">
      <source-position filename="_gen/telepathy-interfaces.h" line="1557"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection"
              c:identifier="tp_iface_quark_connection">
      <source-position filename="_gen/telepathy-interfaces.h" line="123"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_addressing"
              c:identifier="tp_iface_quark_connection_interface_addressing">
      <source-position filename="_gen/telepathy-interfaces.h" line="150"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_aliasing"
              c:identifier="tp_iface_quark_connection_interface_aliasing">
      <source-position filename="_gen/telepathy-interfaces.h" line="165"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_anonymity"
              c:identifier="tp_iface_quark_connection_interface_anonymity">
      <source-position filename="_gen/telepathy-interfaces.h" line="177"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_avatars"
              c:identifier="tp_iface_quark_connection_interface_avatars">
      <source-position filename="_gen/telepathy-interfaces.h" line="195"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_balance"
              c:identifier="tp_iface_quark_connection_interface_balance">
      <source-position filename="_gen/telepathy-interfaces.h" line="231"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_capabilities"
              c:identifier="tp_iface_quark_connection_interface_capabilities">
      <source-position filename="_gen/telepathy-interfaces.h" line="246"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_cellular"
              c:identifier="tp_iface_quark_connection_interface_cellular">
      <source-position filename="_gen/telepathy-interfaces.h" line="258"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_client_types"
              c:identifier="tp_iface_quark_connection_interface_client_types">
      <source-position filename="_gen/telepathy-interfaces.h" line="285"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_contact_blocking"
              c:identifier="tp_iface_quark_connection_interface_contact_blocking">
      <source-position filename="_gen/telepathy-interfaces.h" line="297"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_contact_capabilities"
              c:identifier="tp_iface_quark_connection_interface_contact_capabilities">
      <source-position filename="_gen/telepathy-interfaces.h" line="312"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_contact_groups"
              c:identifier="tp_iface_quark_connection_interface_contact_groups">
      <source-position filename="_gen/telepathy-interfaces.h" line="324"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_contact_info"
              c:identifier="tp_iface_quark_connection_interface_contact_info">
      <source-position filename="_gen/telepathy-interfaces.h" line="345"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_contact_list"
              c:identifier="tp_iface_quark_connection_interface_contact_list">
      <source-position filename="_gen/telepathy-interfaces.h" line="363"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_contacts"
              c:identifier="tp_iface_quark_connection_interface_contacts">
      <source-position filename="_gen/telepathy-interfaces.h" line="441"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_location"
              c:identifier="tp_iface_quark_connection_interface_location">
      <source-position filename="_gen/telepathy-interfaces.h" line="468"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_mail_notification"
              c:identifier="tp_iface_quark_connection_interface_mail_notification">
      <source-position filename="_gen/telepathy-interfaces.h" line="501"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_power_saving"
              c:identifier="tp_iface_quark_connection_interface_power_saving">
      <source-position filename="_gen/telepathy-interfaces.h" line="522"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_presence"
              c:identifier="tp_iface_quark_connection_interface_presence">
      <source-position filename="_gen/telepathy-interfaces.h" line="432"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_renaming"
              c:identifier="tp_iface_quark_connection_interface_renaming">
      <source-position filename="_gen/telepathy-interfaces.h" line="396"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_requests"
              c:identifier="tp_iface_quark_connection_interface_requests">
      <source-position filename="_gen/telepathy-interfaces.h" line="453"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_service_point"
              c:identifier="tp_iface_quark_connection_interface_service_point">
      <source-position filename="_gen/telepathy-interfaces.h" line="489"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_sidecars1"
              c:identifier="tp_iface_quark_connection_interface_sidecars1">
      <source-position filename="_gen/telepathy-interfaces.h" line="405"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_interface_simple_presence"
              c:identifier="tp_iface_quark_connection_interface_simple_presence">
      <source-position filename="_gen/telepathy-interfaces.h" line="414"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_connection_manager"
              c:identifier="tp_iface_quark_connection_manager">
      <source-position filename="_gen/telepathy-interfaces.h" line="15"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_dbus_daemon"
              c:identifier="tp_iface_quark_dbus_daemon">
      <source-position filename="_gen/telepathy-interfaces.h" line="1311"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_dbus_introspectable"
              c:identifier="tp_iface_quark_dbus_introspectable">
      <source-position filename="_gen/telepathy-interfaces.h" line="1284"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_dbus_peer"
              c:identifier="tp_iface_quark_dbus_peer">
      <source-position filename="_gen/telepathy-interfaces.h" line="1275"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_dbus_properties"
              c:identifier="tp_iface_quark_dbus_properties">
      <source-position filename="_gen/telepathy-interfaces.h" line="1293"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_debug" c:identifier="tp_iface_quark_debug">
      <source-position filename="_gen/telepathy-interfaces.h" line="1617"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_media_session_handler"
              c:identifier="tp_iface_quark_media_session_handler">
      <source-position filename="_gen/telepathy-interfaces.h" line="1245"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_media_stream_handler"
              c:identifier="tp_iface_quark_media_stream_handler">
      <source-position filename="_gen/telepathy-interfaces.h" line="1254"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_properties_interface"
              c:identifier="tp_iface_quark_properties_interface">
      <source-position filename="_gen/telepathy-interfaces.h" line="1302"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_protocol"
              c:identifier="tp_iface_quark_protocol">
      <source-position filename="_gen/telepathy-interfaces.h" line="30"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_protocol_interface_addressing"
              c:identifier="tp_iface_quark_protocol_interface_addressing">
      <source-position filename="_gen/telepathy-interfaces.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_protocol_interface_avatars"
              c:identifier="tp_iface_quark_protocol_interface_avatars">
      <source-position filename="_gen/telepathy-interfaces.h" line="78"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="iface_quark_protocol_interface_presence"
              c:identifier="tp_iface_quark_protocol_interface_presence">
      <source-position filename="_gen/telepathy-interfaces.h" line="111"/>
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <docsection name="intset">
      <doc xml:space="preserve"
           filename="intset.c"
           line="24">A #TpIntset is a set of unsigned integers, implemented as a
dynamically-allocated sparse bitfield.</doc>
    </docsection>
    <function name="intset_from_array"
              c:identifier="tp_intset_from_array"
              moved-to="Intset.from_array">
      <doc xml:space="preserve"
           filename="intset.c"
           line="464">&lt;!--Returns: says it all--&gt;</doc>
      <source-position filename="intset.h" line="69"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="intset.c"
             line="470">A set containing the same integers as @array.</doc>
        <type name="Intset" c:type="TpIntset*"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="intset.c"
               line="466">An array of guint</doc>
          <array name="GLib.Array" c:type="const GArray*">
            <type name="guint"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="list_connection_managers"
              c:identifier="tp_list_connection_managers"
              version="0.7.1"
              deprecated="1">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="1947">List the available (running or installed) connection managers. Call the
callback when done.

Since 0.7.26, this function will wait for each #TpConnectionManager
to be ready, so all connection managers passed to @callback will have
their %TP_CONNECTION_MANAGER_FEATURE_CORE feature prepared, unless an error
occurred while launching that connection manager.</doc>
      <doc-deprecated xml:space="preserve">since 0.19.1, use tp_list_connection_managers_async()</doc-deprecated>
      <source-position filename="connection-manager.h" line="121"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bus_daemon" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1949">proxy for the D-Bus daemon</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1950">callback to be called when listing the CMs
 succeeds or fails; not called if the @weak_object goes away</doc>
          <type name="ConnectionManagerListCb"
                c:type="TpConnectionManagerListCb"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1952">user-supplied data for the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1953">callback to destroy the user-supplied data, called after
  @callback, but also if the @weak_object goes away</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
        <parameter name="weak_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="1955">if not %NULL, will be weakly
 referenced; the callback will not be called, and the call will be
 cancelled, if the object has vanished</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_connection_managers_async"
              c:identifier="tp_list_connection_managers_async"
              version="0.17.6">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="2037">List the available (running or installed) connection managers,
asynchronously, and wait for their %TP_CONNECTION_MANAGER_FEATURE_CORE
feature to be ready.</doc>
      <source-position filename="connection-manager.h" line="128"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="dbus_daemon"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2039">a #TpDBusDaemon, or %NULL to use
 tp_dbus_daemon_dup()</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2041">a callback to call with a list of CMs</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2042">data to pass to @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_connection_managers_finish"
              c:identifier="tp_list_connection_managers_finish"
              version="0.17.6"
              throws="1">
      <doc xml:space="preserve"
           filename="connection-manager.c"
           line="2082">Finish listing the available connection managers.

Free the list after use, for instance with
&lt;literal&gt;g_list_free_full (list, g_object_unref)&lt;/literal&gt;.</doc>
      <source-position filename="connection-manager.h" line="132"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="connection-manager.c"
             line="2092">a
 newly allocated list of references to #TpConnectionManager objects</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="ConnectionManager"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection-manager.c"
               line="2084">the result of tp_list_connection_managers_async()</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="list_connection_names"
              c:identifier="tp_list_connection_names"
              version="0.7.1">
      <doc xml:space="preserve"
           filename="connection.c"
           line="2935">List the bus names of all the connections that currently exist, together
with the connection manager name and the protocol name for each connection.
Call the callback when done.

The bus names passed to the callback can be used to construct #TpConnection
objects for any connections that are of interest.</doc>
      <source-position filename="connection.h" line="212"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="bus_daemon" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2937">proxy for the D-Bus daemon</doc>
          <type name="DBusDaemon" c:type="TpDBusDaemon*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   scope="notified"
                   closure="2"
                   destroy="3">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2938">callback to be called when listing the connections succeeds or
  fails; not called if the D-Bus connection fails completely or if the
  @weak_object goes away</doc>
          <type name="ConnectionNameListCb" c:type="TpConnectionNameListCb"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2941">user-supplied data for the callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2942">callback to destroy the user-supplied data, called after
  @callback, but also if the D-Bus connection fails or if the @weak_object
  goes away</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
        <parameter name="weak_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="connection.c"
               line="2945">if not %NULL, will be weakly referenced; the callback will
  not be called if the object has vanished</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="message">
      <doc xml:space="preserve"
           filename="message.c"
           line="21">#TpMessage represent a message send or received using the Message
interface.</doc>
    </docsection>
    <function-macro name="message_set_int16"
                    c:identifier="tp_message_set_int16"
                    version="0.7.21"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="message.c"
           line="380">Set @key in part @part of @self to have @i as a signed integer value.</doc>
      <source-position filename="message.h" line="59"/>
      <parameters>
        <parameter name="s">
          <doc xml:space="preserve"
               filename="message.c"
               line="382">a message</doc>
        </parameter>
        <parameter name="p">
          <doc xml:space="preserve"
               filename="message.c"
               line="383">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
        </parameter>
        <parameter name="k">
          <doc xml:space="preserve"
               filename="message.c"
               line="385">a key in the mapping representing the part</doc>
        </parameter>
        <parameter name="i">
          <doc xml:space="preserve"
               filename="message.c"
               line="386">an integer value</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="message_set_uint16"
                    c:identifier="tp_message_set_uint16"
                    version="0.7.21"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="message.c"
           line="447">Set @key in part @part of @self to have @u as an unsigned integer value.</doc>
      <source-position filename="message.h" line="65"/>
      <parameters>
        <parameter name="s">
          <doc xml:space="preserve"
               filename="message.c"
               line="449">a message</doc>
        </parameter>
        <parameter name="p">
          <doc xml:space="preserve"
               filename="message.c"
               line="450">a part number, which must be strictly less than the number
 returned by tp_message_count_parts()</doc>
        </parameter>
        <parameter name="k">
          <doc xml:space="preserve"
               filename="message.c"
               line="452">a key in the mapping representing the part</doc>
        </parameter>
        <parameter name="u">
          <doc xml:space="preserve"
               filename="message.c"
               line="453">an unsigned integer value</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="mixin_class_get_offset"
              c:identifier="tp_mixin_class_get_offset"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="662">If the type of @klass, or any of its ancestor types, has had an offset
attached using qdata with the given @quark, return that offset; if not,
return 0.

In older telepathy-glib versions, calling this function on an instance that
did not have the mixin was considered to be a programming error. Since
version 0.13.9, 0 is returned, without error.

This is used to implement the telepathy-glib mixin classes.</doc>
      <source-position filename="util.h" line="92"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="677">the offset of the mixin class</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="664">A pointer to a GObjectClass-derived class structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="quark" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="665">A quark that was used to store the offset with g_type_set_qdata()</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
      </parameters>
    </function>
    <function name="mixin_instance_get_offset"
              c:identifier="tp_mixin_instance_get_offset"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="625">If the type of @instance, or any of its ancestor types, has had an offset
attached using qdata with the given @quark, return that offset. If not,
return 0.

In older telepathy-glib versions, calling this function on an instance that
did not have the mixin was considered to be a programming error. Since
version 0.13.9, 0 is returned, without error.

This is used to implement the telepathy-glib mixin classes.</doc>
      <source-position filename="util.h" line="91"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="640">the offset of the mixin</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="instance"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="627">A pointer to a GObject-derived instance structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="quark" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="628">A quark that was used to store the offset with g_type_set_qdata()</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </parameter>
      </parameters>
    </function>
    <function name="mixin_offset_cast"
              c:identifier="tp_mixin_offset_cast"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="605">Extend a pointer by an offset, provided the offset is not 0.
This is used to cast from an object instance to one of the telepathy-glib
mixin classes.</doc>
      <source-position filename="util.h" line="90"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="util.c"
             line="614">a pointer @offset bytes beyond @instance</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="instance"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="607">A pointer to a structure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="608">The offset of a structure member in bytes, which must not be 0</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="observe-channels-context">
      <doc xml:space="preserve"
           filename="observe-channels-context.c"
           line="21">Object used to represent the context of a Observer.ObserveChannels()
D-Bus call on a #TpBaseClient.</doc>
    </docsection>
    <docsection name="presence-mixin">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="21">This mixin can be added to a #TpBaseConnection subclass to implement the
SimplePresence and/or Presence interfaces. Implementing both interfaces
(as described below) is recommended. In particular, you must implement the
old-style Presence interface if compatibility with telepathy-glib
versions older than 0.11.13 is required.

To use the presence mixin, include a #TpPresenceMixinClass somewhere in your
class structure and a #TpPresenceMixin somewhere in your instance structure,
and call tp_presence_mixin_class_init() from your class_init function,
tp_presence_mixin_init() from your init function or constructor, and
tp_presence_mixin_finalize() from your dispose or finalize function.

&lt;section&gt;
&lt;title&gt;Implementing SimplePresence&lt;/title&gt;
&lt;para&gt;
  Since 0.7.13 this mixin supports the entire SimplePresence interface.
  You can implement #TpSvcConnectionInterfaceSimplePresence as follows:
  &lt;itemizedlist&gt;
    &lt;listitem&gt;
      &lt;para&gt;use the #TpContactsMixin and
       &lt;link linkend="telepathy-glib-dbus-properties-mixin"&gt;TpDBusPropertiesMixin&lt;/link&gt;;&lt;/para&gt;
    &lt;/listitem&gt;
    &lt;listitem&gt;
      &lt;para&gt;pass tp_presence_mixin_simple_presence_iface_init() as an
        argument to G_IMPLEMENT_INTERFACE(), like so:
      &lt;/para&gt;
      |[
      G_DEFINE_TYPE_WITH_CODE (MyConnection, my_connection,
          TP_TYPE_BASE_CONNECTION,
          // ...
          G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CONNECTION_INTERFACE_SIMPLE_PRESENCE,
              tp_presence_mixin_simple_presence_iface_init);
          // ...
          )
      ]|
    &lt;/listitem&gt;
    &lt;listitem&gt;
      &lt;para&gt;
        call tp_presence_mixin_simple_presence_init_dbus_properties() in the
        #GTypeInfo class_init function;
      &lt;/para&gt;
    &lt;/listitem&gt;
    &lt;listitem&gt;
      &lt;para&gt;
        call tp_presence_mixin_simple_presence_register_with_contacts_mixin()
        in the #GObjectClass constructed function.
      &lt;/para&gt;
    &lt;/listitem&gt;
  &lt;/itemizedlist&gt;
&lt;/para&gt;
&lt;/section&gt; &lt;!-- Simple Presence --&gt;
&lt;section&gt;
&lt;title&gt;Implementing old-style Presence&lt;/title&gt;
&lt;para&gt;
  This mixin also supports a large subset of the deprecated Presence
  interface. It does not support protocols where it is possible to set
  multiple statuses on yourself at once (all presence statuses will have the
  exclusive flag set), or last-activity-time information.
&lt;/para&gt;
&lt;para&gt;
  To use the presence mixin as the implementation of
  #TpSvcConnectionInterfacePresence, use tp_presence_mixin_iface_init() as
  the function you pass to G_IMPLEMENT_INTERFACE(), as in the following
  example.  The presence mixin implements all of the D-Bus methods in the
  Presence interface.
&lt;/para&gt;
|[
G_DEFINE_TYPE_WITH_CODE (MyConnection, my_connection,
    TP_TYPE_BASE_CONNECTION,
    // ...
    G_IMPLEMENT_INTERFACE (TP_TYPE_SVC_CONNECTION_INTERFACE_PRESENCE,
        tp_presence_mixin_iface_init);
    // ...
    )
]|
&lt;para&gt;
  In telepathy-glib versions older than 0.11.13, every connection
  that used the #TpPresenceMixin was required to implement
  #TpSvcConnectionInterfacePresence; failing to do so would lead to an
  assertion failure. Since 0.11.13, this is no longer required.
&lt;/para&gt;
&lt;/section&gt; &lt;!-- complex Presence --&gt;</doc>
    </docsection>
    <function name="presence_mixin_class_get_offset_quark"
              c:identifier="tp_presence_mixin_class_get_offset_quark"
              moved-to="PresenceMixinClass.get_offset_quark"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="382">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
      <source-position filename="presence-mixin.h" line="163"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="387">the quark used for storing mixin offset on a GObjectClass</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="presence_mixin_class_init"
              c:identifier="tp_presence_mixin_class_init"
              moved-to="PresenceMixinClass.init"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="414">Initialize the presence mixin. Should be called from the implementation's
class_init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_presence_mixin_class_init ((GObjectClass *) klass,
                              G_STRUCT_OFFSET (SomeObjectClass,
                                               presence_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="presence-mixin.h" line="166"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj_cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="416">The class of the implementation that uses this mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="417">The byte offset of the TpPresenceMixinClass within the class
structure</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
        <parameter name="status_available" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="419">A callback to be used to determine if a given presence
 status can be set on a particular connection. Should usually be %NULL, to
 consider all statuses with #TpPresenceStatusSpec.self set to %TRUE to be
 settable.</doc>
          <type name="PresenceMixinStatusAvailableFunc"
                c:type="TpPresenceMixinStatusAvailableFunc"/>
        </parameter>
        <parameter name="get_contact_statuses" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="423">A callback to be used get the current presence status
 for contacts. This is used in implementations of various D-Bus methods and
 hence must be provided.</doc>
          <type name="PresenceMixinGetContactStatusesFunc"
                c:type="TpPresenceMixinGetContactStatusesFunc"/>
        </parameter>
        <parameter name="set_own_status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="426">A callback to be used to commit changes to the user's own
 presence status to the server. This is used in implementations of various
 D-Bus methods and hence must be provided.</doc>
          <type name="PresenceMixinSetOwnStatusFunc"
                c:type="TpPresenceMixinSetOwnStatusFunc"/>
        </parameter>
        <parameter name="statuses" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="429">An array of #TpPresenceStatusSpec structures representing all
 presence statuses supported by the protocol, terminated by a NULL name.</doc>
          <type name="PresenceStatusSpec"
                c:type="const TpPresenceStatusSpec*"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_emit_one_presence_update"
              c:identifier="tp_presence_mixin_emit_one_presence_update"
              moved-to="PresenceMixin.emit_one_presence_update"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="630">Emit the PresenceUpdate signal for a single contact. This method is just a
convenience wrapper around #tp_presence_mixin_emit_presence_update.</doc>
      <source-position filename="presence-mixin.h" line="177"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="632">A connection object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="handle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="633">The handle of the contact to emit the signal for</doc>
          <type name="Handle" c:type="TpHandle"/>
        </parameter>
        <parameter name="status" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="634">The new status to emit</doc>
          <type name="PresenceStatus" c:type="const TpPresenceStatus*"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_emit_presence_update"
              c:identifier="tp_presence_mixin_emit_presence_update"
              moved-to="PresenceMixin.emit_presence_update"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="586">Emit the PresenceUpdate signal for multiple contacts. For emitting
PresenceUpdate for a single contact, there is a convenience wrapper called
#tp_presence_mixin_emit_one_presence_update.</doc>
      <source-position filename="presence-mixin.h" line="175"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="588">A connection object with this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="contact_presences" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="589">A mapping of contact handles to #TpPresenceStatus
 structures with the presence data to emit</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_finalize"
              c:identifier="tp_presence_mixin_finalize"
              moved-to="PresenceMixin.finalize"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="520">Free resources held by the presence mixin.</doc>
      <source-position filename="presence-mixin.h" line="173"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="522">An object with this mixin.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_get_offset_quark"
              c:identifier="tp_presence_mixin_get_offset_quark"
              moved-to="PresenceMixin.get_offset_quark"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="398">&lt;!--no documentation beyond Returns: needed--&gt;</doc>
      <source-position filename="presence-mixin.h" line="164"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="403">the quark used for storing mixin offset on a GObject</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="presence_mixin_iface_init"
              c:identifier="tp_presence_mixin_iface_init"
              moved-to="PresenceMixin.iface_init"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="1185">Fill in the vtable entries needed to implement the presence interface using
this mixin. This function should usually be called via G_IMPLEMENT_INTERFACE.</doc>
      <source-position filename="presence-mixin.h" line="180"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1187">A pointer to the #TpSvcConnectionInterfacePresenceClass in an
 object class</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1189">Ignored</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_init"
              c:identifier="tp_presence_mixin_init"
              moved-to="PresenceMixin.init"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="494">Initialize the presence mixin. Should be called from the implementation's
instance init function like so:

&lt;informalexample&gt;&lt;programlisting&gt;
tp_presence_mixin_init ((GObject *) self,
                        G_STRUCT_OFFSET (SomeObject, presence_mixin));
&lt;/programlisting&gt;&lt;/informalexample&gt;</doc>
      <source-position filename="presence-mixin.h" line="172"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="496">An instance of the implementation that uses this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="497">The byte offset of the TpPresenceMixin within the object structure</doc>
          <type name="glong" c:type="glong"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_simple_presence_iface_init"
              c:identifier="tp_presence_mixin_simple_presence_iface_init"
              moved-to="PresenceMixin.simple_presence_iface_init"
              version="0.7.13"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="1501">Fill in the vtable entries needed to implement the simple presence interface
using this mixin. This function should usually be called via
G_IMPLEMENT_INTERFACE.</doc>
      <source-position filename="presence-mixin.h" line="181"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_iface"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1503">A pointer to the #TpSvcConnectionInterfaceSimplePresenceClass in
an object class</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="iface_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1505">Ignored</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_simple_presence_init_dbus_properties"
              c:identifier="tp_presence_mixin_simple_presence_init_dbus_properties"
              moved-to="PresenceMixin.simple_presence_init_dbus_properties"
              version="0.7.13"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="1300">Set up #TpDBusPropertiesMixinClass to use this mixin's implementation of
the SimplePresence interface's properties.

This automatically sets up a list of the supported properties for the
SimplePresence interface.</doc>
      <source-position filename="presence-mixin.h" line="182"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="cls" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1302">The class of an object with this mixin</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_mixin_simple_presence_register_with_contacts_mixin"
              c:identifier="tp_presence_mixin_simple_presence_register_with_contacts_mixin"
              moved-to="PresenceMixin.simple_presence_register_with_contacts_mixin"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="1567">Register the SimplePresence interface with the Contacts interface to make it
inspectable. The Contacts mixin should be initialized before this function
is called</doc>
      <source-position filename="presence-mixin.h" line="184"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="obj" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="1569">An instance that of the implementation that uses both the Contacts
mixin and this mixin</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
      </parameters>
    </function>
    <function name="presence_status_new"
              c:identifier="tp_presence_status_new"
              moved-to="PresenceStatus.new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="presence-mixin.c"
           line="332">Construct a presence status structure. You should free the returned
structure with #tp_presence_status_free.

In modern Telepathy connection managers, the only optional
argument should be a %G_TYPE_STRING named "message", on statuses
that have an optional human-readable message. All other optional arguments
are deprecated.</doc>
      <source-position filename="presence-mixin.h" line="103"/>
      <return-value>
        <doc xml:space="preserve"
             filename="presence-mixin.c"
             line="348">A pointer to the newly allocated presence status structure.</doc>
        <type name="PresenceStatus" c:type="TpPresenceStatus*"/>
      </return-value>
      <parameters>
        <parameter name="which" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="334">Index of the presence status in the provided supported presence
 statuses array</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="optional_arguments" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="presence-mixin.c"
               line="336">Optional arguments for the presence statuses. Can be
 NULL if there are no optional arguments. The presence status object makes a
 copy of the hashtable, so you should free the original.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gpointer" c:type="gpointer"/>
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <docsection name="protocol">
      <doc xml:space="preserve"
           filename="protocol.c"
           line="20">#TpProtocol objects represent the protocols implemented by Telepathy
connection managers. In modern connection managers, each protocol is
represented by a D-Bus object; in older connection managers, the protocols
are represented by data structures, and this object merely emulates a D-Bus
object.</doc>
    </docsection>
    <docsection name="proxy">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="132">#TpProxy is a base class for Telepathy client-side proxies, which represent
an object accessed via D-Bus and provide access to its methods and signals.</doc>
    </docsection>
    <docsection name="proxy-dbus-core">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="144">All D-Bus objects support the Peer interface, and many support the
Introspectable and Properties interfaces.</doc>
    </docsection>
    <docsection name="proxy-subclass">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="172">The implementations of #TpProxy subclasses and "mixin" functions need
access to the underlying dbus-glib objects used to implement the
#TpProxy API.

Mixin functions to implement particular D-Bus interfaces should usually
be auto-generated, by copying tools/glib-client-gen.py from telepathy-glib.</doc>
    </docsection>
    <docsection name="proxy-tp-properties">
      <doc xml:space="preserve"
           filename="proxy.c"
           line="156">As well as #TpProxy, proxy.h includes auto-generated client wrappers for the
Telepathy Properties interface, which can be implemented by any type of
object.

The Telepathy Properties interface should not be confused with the D-Bus
core Properties interface.</doc>
    </docsection>
    <docsection name="room-info">
      <doc xml:space="preserve"
           filename="room-info.c"
           line="30">#TpRoomInfo represents a room found during a room listing using
#TpRoomList.

See also: #TpRoomList</doc>
    </docsection>
    <docsection name="room-list">
      <doc xml:space="preserve"
           filename="room-list.c"
           line="21">#TpRoomList provides convenient API to list rooms.</doc>
    </docsection>
    <docsection name="signalled-message">
      <doc xml:space="preserve"
           filename="signalled-message.c"
           line="21">#TpSignalledMessage is used within Telepathy clients to represent a message
signalled by a connection manager. This can either be a message received from
someone else, confirmation that a message has been sent by the local user,
or a delivery report indicating that delivery of a message has
succeeded or failed.</doc>
    </docsection>
    <docsection name="simple-approver">
      <doc xml:space="preserve"
           filename="simple-approver.c"
           line="21">This class makes it easier to construct a #TpSvcClient implementing the
#TpSvcClientApprover interface.

A typical simple approver would look liks this:
|[
static void
my_add_dispatch_operation (TpSimpleApprover *approver,
   TpAccount *account,
   TpConnection *connection,
   GList *channels,
   TpChannelDispatchOperation *dispatch_operation,
   TpAddDispatchOperationContext *context,
   gpointer user_data)
{
 /&lt;!-- --&gt;* call tp_channel_dispatch_operation_handle_with_async()
 if wanting to approve the channels *&lt;!-- --&gt;/

 tp_add_dispatch_operation_context_accept (context);
}

factory = tp_automatic_client_factory_new (dbus);
client = tp_simple_approver_new_with_factory (factory, "MyApprover", FALSE,
   my_add_dispatch_operation, user_data);
g_object_unref (factory);

tp_base_client_take_approver_filter (client, tp_asv_new (
     TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_TEXT,
     TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
     NULL));

tp_base_client_register (client, NULL);
]|

See examples/client/text-approver.c for a complete example.</doc>
    </docsection>
    <docsection name="simple-client-factory">
      <doc xml:space="preserve"
           filename="simple-client-factory.c"
           line="21">This factory constructs various #TpProxy subclasses as well as #TpContact,
which guarantees that at most one instance of those objects will exist for a
given remote object or contact. It also stores the desired features for
contacts and each type of proxy.

Note that the factory will not prepare the desired features: it is the
caller's responsibility to do so. By default, only core features are
requested.

Currently supported classes are #TpAccount, #TpConnection,
#TpChannel and #TpContact. Those objects should always be acquired through a
factory or a "larger" object (e.g. getting the #TpConnection from
a #TpAccount), rather than being constructed directly.

One can subclass #TpSimpleClientFactory and override some of its virtual
methods to construct more specialized objects. See #TpAutomaticClientFactory
for a subclass which automatically constructs subclasses of #TpChannel for
common channel types.

An application using its own factory subclass would look like this:
|[
int main(int argc, char *argv[])
{
  TpSimpleClientFactory *factory;
  TpAccountManager *manager;

  factory = my_factory_new ();
  manager = tp_account_manager_new_with_factory (factory);
  tp_account_manager_set_default (manager);

  ...
  tp_proxy_prepare_async (manager, am_features, callback, user_data);
  ...
}
]|

The call to tp_account_manager_set_default() near the beginning of main()
will ensure that any libraries or plugins which also use Telepathy (and call
tp_account_manager_dup()) will share your #TpAccountManager.</doc>
    </docsection>
    <docsection name="simple-handler">
      <doc xml:space="preserve"
           filename="simple-handler.c"
           line="21">This class makes it easier to construct a #TpSvcClient implementing the
#TpSvcClientHandler interface.

A typical simple handler would look liks this:
|[
static void
my_handle_channels (TpSimpleHandler *handler,
   TpAccount *account,
   TpConnection *connection,
   GList *channels,
   GList *requests_satisfied,
   gint64 user_action_time,
   GList *requests,
   TpHandleChannelsContext *context,
   gpointer user_data)
{
 /&lt;!-- --&gt;* start handling the channels here *&lt;!-- --&gt;/

 tp_handle_channels_context_accept (context);
}

factory = tp_automatic_client_factory_new (dbus);
client = tp_simple_handler_new_with_factory (factory, FALSE, FALSE,
    "MyHandler", FALSE, my_handle_channels, user_data);
g_object_unref (factory);

tp_base_client_take_handler_filter (client, tp_asv_new (
     TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_TEXT,
     TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
     NULL));

tp_base_client_register (client, NULL);
]|

See examples/client/text-handler.c for a complete example.</doc>
    </docsection>
    <docsection name="simple-observer">
      <doc xml:space="preserve"
           filename="simple-observer.c"
           line="21">This class makes it easier to write #TpSvcClient implementing the
TpSvcClientObserver interface.

A typical simple observer would look liks this:
|[
static void
my_observe_channels (TpSimpleObserver *observer,
   TpAccount *account,
   TpConnection *connection,
   GList *channels,
   TpChannelDispatchOperation *dispatch_operation,
   GList *requests,
   TpObserveChannelsContext *context,
   gpointer user_data)
{
 /&lt;!-- --&gt;* do something useful with the channels here *&lt;!-- --&gt;/

 tp_observe_channels_context_accept (context);
}

factory = tp_automatic_client_factory_new (dbus);
client = tp_simple_observer_new_with_factory (factory, TRUE, "MyObserver",
    FALSE, my_observe_channels, user_data);
g_object_unref (factory);

tp_base_client_take_observer_filter (client, tp_asv_new (
     TP_PROP_CHANNEL_CHANNEL_TYPE, G_TYPE_STRING, TP_IFACE_CHANNEL_TYPE_TEXT,
     TP_PROP_CHANNEL_TARGET_HANDLE_TYPE, G_TYPE_UINT, TP_HANDLE_TYPE_CONTACT,
     NULL));

tp_base_client_register (client, NULL);
]|

See examples/client/media-observer.c for a complete example.</doc>
    </docsection>
    <function name="simple_async_report_success_in_idle"
              c:identifier="tp_simple_async_report_success_in_idle"
              version="0.11.9">
      <doc xml:space="preserve"
           filename="util.c"
           line="1395">Create a new #GSimpleAsyncResult with no operation result, and call
g_simple_async_result_complete_in_idle() on it.

This is like a successful version of g_simple_async_report_error_in_idle(),
suitable for asynchronous functions that (conceptually) either succeed and
return nothing, or raise an error, such as tp_proxy_prepare_async().

The corresponding finish function should not call a function that attempts
to get a result, such as g_simple_async_result_get_op_res_gpointer().</doc>
      <source-position filename="util.h" line="174"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="1397">the source object</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="util.c"
               line="1398">the callback</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="1399">user data for @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="source_tag"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="1400">the source tag for the #GSimpleAsyncResult</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="strdiff" c:identifier="tp_strdiff" introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="584">Return %TRUE if the given strings are different. Unlike #strcmp this
function will handle null pointers, treating them as distinct from any
string.</doc>
      <source-position filename="util.h" line="88"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="593">%FALSE if @left and @right are both %NULL, or if
         neither is %NULL and both have the same contents; %TRUE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="left" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="586">The first string to compare (may be NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="right" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="587">The second string to compare (may be NULL)</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="stream-tube-channel">
      <doc xml:space="preserve"
           filename="stream-tube-channel.c"
           line="21">#TpStreamTubeChannel is a sub-class of #TpChannel providing convenient API
to offer and accept a stream tube.</doc>
    </docsection>
    <docsection name="stream-tube-connection">
      <doc xml:space="preserve"
           filename="stream-tube-connection.c"
           line="21">Object used to represent a connection on a #TpStreamTubeChannel.</doc>
    </docsection>
    <function name="strv_contains"
              c:identifier="tp_strv_contains"
              version="0.7.15"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="789">&lt;!-- --&gt;</doc>
      <source-position filename="util.h" line="97"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="796">TRUE if @str is an element of @strv, according to strcmp().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="strv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="791">a NULL-terminated array of strings, or %NULL (which is treated as an
       empty strv)</doc>
          <type name="utf8" c:type="const gchar* const*"/>
        </parameter>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="793">a non-NULL string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="svc_interface_get_dbus_properties_info"
              c:identifier="tp_svc_interface_get_dbus_properties_info"
              version="0.15.8"
              introspectable="0">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="196">Retrieves the D-Bus property metadata for the given interface, if any.
This function is typically not useful outside telepathy-glib itself, but may
be useful for domain-specific variations on the theme of SetProperty. If in
doubt, you probably don't need this function.</doc>
      <source-position filename="dbus-properties-mixin.h" line="65"/>
      <return-value>
        <doc xml:space="preserve"
             filename="dbus-properties-mixin.c"
             line="205">D-Bus property metadata for @g_interface, or %NULL if it has
 none.</doc>
        <type name="DBusPropertiesMixinIfaceInfo"
              c:type="TpDBusPropertiesMixinIfaceInfo*"/>
      </return-value>
      <parameters>
        <parameter name="g_interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="198">The #GType of a service interface</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
      </parameters>
    </function>
    <function name="svc_interface_set_dbus_properties_info"
              c:identifier="tp_svc_interface_set_dbus_properties_info"
              version="0.7.3">
      <doc xml:space="preserve"
           filename="dbus-properties-mixin.c"
           line="141">Declare that @g_interface implements the given D-Bus interface, with the
given properties. This may only be called once per GInterface, usually from
a section of its base_init function that only runs once.

This is typically only used within generated code; there is normally no
reason to call it manually.</doc>
      <source-position filename="dbus-properties-mixin.h" line="62"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="g_interface" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="143">The #GType of a service interface</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="dbus-properties-mixin.c"
               line="144">an interface description</doc>
          <type name="DBusPropertiesMixinIfaceInfo"
                c:type="TpDBusPropertiesMixinIfaceInfo*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="text-channel">
      <doc xml:space="preserve"
           filename="text-channel.c"
           line="21">#TpTextChannel is a sub-class of #TpChannel providing convenient API
to send and receive #TpMessage.</doc>
    </docsection>
    <docsection name="tls-certificate">
      <doc xml:space="preserve"
           filename="tls-certificate.c"
           line="45">#TpTLSCertificate is a #TpProxy subclass for TLSCertificate objects,
used in Channel.Type.ServerTLSConnection.</doc>
    </docsection>
    <docsection name="tls-certificate-rejection">
      <doc xml:space="preserve"
           filename="tls-certificate-rejection.c"
           line="27">TpTLSCertificateRejection is a small object used by
#TpTLSCertificate to represent the rejection of a
certificate.</doc>
    </docsection>
    <function name="user_action_time_from_x11"
              c:identifier="tp_user_action_time_from_x11"
              version="0.11.13">
      <doc xml:space="preserve"
           filename="util.c"
           line="1427">Convert an X11 timestamp into a user action time as used in Telepathy.

This also works for the timestamps used by GDK 2, GDK 3 and Clutter 1.0;
it may or may not work with other toolkits or versions.</doc>
      <source-position filename="util.h" line="177"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="1436">a nonzero Telepathy user action time, or
 %TP_USER_ACTION_TIME_CURRENT_TIME</doc>
        <type name="gint64" c:type="gint64"/>
      </return-value>
      <parameters>
        <parameter name="x11_time" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1429">an X11 timestamp, or 0 to indicate the current time</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
      </parameters>
    </function>
    <function name="user_action_time_should_present"
              c:identifier="tp_user_action_time_should_present"
              version="0.11.13">
      <doc xml:space="preserve"
           filename="util.c"
           line="1452">Interpret a Telepathy user action time to decide whether a Handler should
attempt to gain focus. If %TRUE is returned, it would be appropriate to
call gtk_window_present_with_time() using @x11_time as input, for instance.

@x11_time is used to return a timestamp in the right format for X11,
GDK 2, GDK 3 and Clutter 1.0; it may or may not work with other
toolkits or versions.</doc>
      <source-position filename="util.h" line="178"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="util.c"
             line="1467">%TRUE if it would be appropriate to present a window</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="user_action_time" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1454">the Telepathy user action time</doc>
          <type name="gint64" c:type="gint64"/>
        </parameter>
        <parameter name="x11_time"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="1455">a pointer to guint32 used to
 return an X11 timestamp, or 0 to indicate the current time; if
 %FALSE is returned, the value placed here is not meaningful</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
      </parameters>
    </function>
    <function name="utf8_make_valid"
              c:identifier="tp_utf8_make_valid"
              version="0.13.15">
      <doc xml:space="preserve"
           filename="util.c"
           line="1649">Validate that the provided string is valid UTF8. If not,
replace all invalid bytes with unicode replacement
character (U+FFFD).

This method is a verbatim copy of glib's internal
_g_utf8_make_valid&lt;!-- --&gt;() function, and will be deprecated as
soon as the glib one becomes public.</doc>
      <source-position filename="util.h" line="182"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="util.c"
             line="1661">a new valid UTF8 string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1651">string to coerce into UTF8</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="util">
      <doc xml:space="preserve"
           filename="util.c"
           line="23">Some utility functions used in telepathy-glib which could have been in
GLib, but aren't.</doc>
    </docsection>
    <function name="value_array_build"
              c:identifier="tp_value_array_build"
              version="0.9.2"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="1079">Creates a new #GValueArray for use with structs, containing the values
passed in as parameters. The values are copied or reffed as appropriate for
their type.

&lt;example&gt;
  &lt;title&gt; using tp_value_array_build&lt;/title&gt;
   &lt;programlisting&gt;
GValueArray *array = tp_value_array_build (2,
   G_TYPE_STRING, host,
   G_TYPE_UINT, port,
   G_TYPE_INVALID);
   &lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <source-position filename="util.h" line="114"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="util.c"
             line="1100">a newly created #GValueArray, free with tp_value_array_free()</doc>
        <type name="GObject.ValueArray" c:type="GValueArray*"/>
      </return-value>
      <parameters>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1081">The number of elements that should be in the array</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1082">The type of the first argument.</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1083">The value of the first item in the struct followed by a list of type,
value pairs terminated by G_TYPE_INVALID.</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_free"
              c:identifier="tp_value_array_free"
              version="0.23.0">
      <doc xml:space="preserve"
           filename="util.c"
           line="2128">Free @va. This is exactly the same as g_value_array_free(), but does not
provoke deprecation warnings from GLib when used in conjunction with
tp_value_array_build() and tp_value_array_unpack().</doc>
      <source-position filename="util.h" line="123"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="va" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="2130">a #GValueArray</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
      </parameters>
    </function>
    <function name="value_array_unpack"
              c:identifier="tp_value_array_unpack"
              version="0.11.0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="1149">Unpacks a #GValueArray into separate variables.

The contents of the values aren't copied into the variables, and so become
invalid when @array is freed.

&lt;example&gt;
  &lt;title&gt;using tp_value_array_unpack&lt;/title&gt;
   &lt;programlisting&gt;
const gchar *host;
guint port;

tp_value_array_unpack (array, 2,
   &amp;host,
   &amp;port);
   &lt;/programlisting&gt;
&lt;/example&gt;</doc>
      <source-position filename="util.h" line="117"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="array" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1151">the array to unpack</doc>
          <type name="GObject.ValueArray" c:type="GValueArray*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1152">The number of elements that should be in the array</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1153">a list of correctly typed pointers to store the values in</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="verify"
                    c:identifier="tp_verify"
                    version="0.7.34"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="55">Make an assertion at compile time, like C++0x's proposed static_assert
keyword. If @R is determined to be true, there is no overhead at runtime;
if @R is determined to be false, compilation will fail.

This macro can be used at file scope (it expands to a dummy extern
declaration).

(This is gnulib's verify macro, written by Paul Eggert, Bruno Haible and
Jim Meyering.)

This macro will be deprecated in a future telepathy-glib release. Please
use GLib 2.20's G_STATIC_ASSERT() macro in new code.</doc>
      <source-position filename="util.h" line="36"/>
      <parameters>
        <parameter name="R">
          <doc xml:space="preserve"
               filename="util.c"
               line="57">a requirement (constant expression) to be checked at compile-time</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="verify_statement"
                    c:identifier="tp_verify_statement"
                    version="0.7.34"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="98">Make an assertion at compile time, like C++0x's proposed static_assert
keyword. If @R is determined to be true, there is no overhead at runtime;
if @R is determined to be false, compilation will fail.

This macro can be used anywhere that a statement would be allowed; it
is equivalent to ((void) tp_verify_true (R)).

This macro will be deprecated in a future telepathy-glib release. Please
use GLib 2.20's G_STATIC_ASSERT() macro in new code.</doc>
      <source-position filename="util.h" line="34"/>
      <parameters>
        <parameter name="R">
          <doc xml:space="preserve"
               filename="util.c"
               line="100">a requirement (constant expression) to be checked at compile-time</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="verify_true"
                    c:identifier="tp_verify_true"
                    version="0.7.34"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="75">Make an assertion at compile time, like C++0x's proposed static_assert
keyword. If @R is determined to be true, there is no overhead at runtime,
and the macro evaluates to 1 as an integer constant expression;
if @R is determined to be false, compilation will fail.

This macro can be used anywhere that an integer constant expression would
be allowed.

(This is gnulib's verify_true macro, written by Paul Eggert, Bruno Haible
and Jim Meyering.)

This macro will be deprecated in a future telepathy-glib release. Please
use GLib 2.20's G_STATIC_ASSERT() macro in new code.</doc>
      <source-position filename="util.h" line="35"/>
      <parameters>
        <parameter name="R">
          <doc xml:space="preserve"
               filename="util.c"
               line="77">a requirement (constant expression) to be checked at compile-time</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="weak_ref_new"
              c:identifier="tp_weak_ref_new"
              moved-to="WeakRef.new"
              version="0.11.3"
              introspectable="0">
      <doc xml:space="preserve"
           filename="util.c"
           line="1235">Return a new weak reference wrapper for @object.</doc>
      <source-position filename="util.h" line="139"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="util.c"
             line="1244">a new weak-reference wrapper

Free-function: tp_weak_ref_destroy()</doc>
        <type name="WeakRef" c:type="TpWeakRef*"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="util.c"
               line="1237">an object to which to take a weak reference</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="util.c"
               line="1238">optional additional data to store alongside the weak ref</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="destroy" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="util.c"
               line="1239">destructor for @user_data, called when the weak ref
 is freed</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
