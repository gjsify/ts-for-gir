<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <package name="libmediaart-2.0"/>
  <c:include name="libmediaart/mediaart.h"/>
  <namespace name="MediaArt"
             version="2.0"
             shared-library="libmediaart-2.0.so.0"
             c:identifier-prefixes="MediaArt"
             c:symbol-prefixes="media_art">
    <enumeration name="Error"
                 version="0.2.0"
                 c:type="MediaArtError"
                 glib:error-domain="media-art-error-quark">
      <doc xml:space="preserve"
           filename="libmediaart/extract.h"
           line="65">Enumeration values used in errors returned by the
#MediaArtError API.</doc>
      <source-position filename="libmediaart/extract.h" line="90"/>
      <member name="no_storage"
              value="0"
              c:identifier="MEDIA_ART_ERROR_NO_STORAGE">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="67">Storage information is unknown, we
have no knowledge about removable media.</doc>
      </member>
      <member name="no_title"
              value="1"
              c:identifier="MEDIA_ART_ERROR_NO_TITLE">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="69">Title is required, but was not provided,
or was empty.</doc>
      </member>
      <member name="symlink_failed"
              value="2"
              c:identifier="MEDIA_ART_ERROR_SYMLINK_FAILED">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="71">A call to symlink() failed
resulting in the incorrect storage of media art.</doc>
      </member>
      <member name="rename_failed"
              value="3"
              c:identifier="MEDIA_ART_ERROR_RENAME_FAILED">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="73">File could not be renamed.</doc>
      </member>
      <member name="no_cache_dir"
              value="4"
              c:identifier="MEDIA_ART_ERROR_NO_CACHE_DIR">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="74">This is given when the
XDG_CACHE_HOME directory could not be used to create the
'media-art' subdirectory used for caching media art. This is
usually an initiation error.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_PROCESS"
                    c:identifier="MEDIA_ART_IS_PROCESS"
                    introspectable="0">
      <source-position filename="libmediaart/extract.h" line="100"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_PROCESS_CLASS"
                    c:identifier="MEDIA_ART_IS_PROCESS_CLASS"
                    introspectable="0">
      <source-position filename="libmediaart/extract.h" line="101"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROCESS"
                    c:identifier="MEDIA_ART_PROCESS"
                    introspectable="0">
      <source-position filename="libmediaart/extract.h" line="98"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROCESS_CLASS"
                    c:identifier="MEDIA_ART_PROCESS_CLASS"
                    introspectable="0">
      <source-position filename="libmediaart/extract.h" line="99"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="PROCESS_GET_CLASS"
                    c:identifier="MEDIA_ART_PROCESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="libmediaart/extract.h" line="102"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Process"
           c:symbol-prefix="process"
           c:type="MediaArtProcess"
           parent="GObject.Object"
           glib:type-name="MediaArtProcess"
           glib:get-type="media_art_process_get_type"
           glib:type-struct="ProcessClass">
      <doc xml:space="preserve"
           filename="libmediaart/extract.h"
           line="107">A class implementation for processing and extracting media art.</doc>
      <source-position filename="libmediaart/extract.h" line="125"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="media_art_process_new"
                   version="0.5.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="196">Initialize a GObject for processing and extracting media art.

This function initializes cache hash tables and backend plugins,</doc>
        <source-position filename="libmediaart/extract.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="204">A new #MediaArtProcess object on success or %NULL if
@error is set. This object must be freed using g_object_unref().</doc>
          <type name="Process" c:type="MediaArtProcess*"/>
        </return-value>
      </constructor>
      <method name="buffer"
              c:identifier="media_art_process_buffer"
              version="0.5.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1459">Processes a memory buffer represented by @buffer and @len. If you
have extracted any embedded media art and passed this in as
@buffer, the image data will be converted to the correct format and
saved in the media art cache.

Either @artist OR @title can be %NULL, but they can not both be %NULL.

If @file is on a removable filesystem, the media art file will be saved in a
cache on the removable file system rather than on the host machine.</doc>
        <source-position filename="libmediaart/extract.h" line="182"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="1485">%TRUE if @file could be processed or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1461">Media art process object</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1462">The type of media</doc>
            <type name="Type" c:type="MediaArtType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1463">The options given for how to process the media art</doc>
            <type name="ProcessFlags" c:type="MediaArtProcessFlags"/>
          </parameter>
          <parameter name="related_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1464">File related to the media art</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="buffer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1465">a buffer containing @file data, or %NULL</doc>
            <array length="4" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1466">length of @buffer, or 0</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="mime"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1467">MIME type of @buffer, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="artist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1468">The artist name @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1469">The title for @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1470">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="buffer_async"
              c:identifier="media_art_process_buffer_async"
              version="0.7.0">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1604">Processes media art. Precisely the same operation as
media_art_process_buffer() is performing, but asynchronously.

When all i/o for the operation is finished the @callback will be
called.

In case of a partial error the callback will be called with any
succeeding items and no error, and on the next request the error
will be reported. If a request is cancelled the callback will be
called with %G_IO_ERROR_CANCELLED.

Dbufferng an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.</doc>
        <source-position filename="libmediaart/extract.h" line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1606">Media art process object</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1607">The type of media</doc>
            <type name="Type" c:type="MediaArtType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1608">The options given for how to process the media art</doc>
            <type name="ProcessFlags" c:type="MediaArtProcessFlags"/>
          </parameter>
          <parameter name="related_file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1609">File related to the media art</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="buffer"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1610">a buffer containing @file
data, or %NULL</doc>
            <array length="4" zero-terminated="0" c:type="const guchar*">
              <type name="guint8" c:type="guchar"/>
            </array>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1612">length of @buffer, or 0</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="mime" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1613">MIME type of @buffer, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="artist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1614">The artist name @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1615">The title for @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1616">the [I/O priority][io-priority] of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1617">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="11">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1619">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1621">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="buffer_finish"
              c:identifier="media_art_process_buffer_finish"
              version="0.7.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1667">Finishes the asynchronous operation started with
media_art_process_file_async().</doc>
        <source-position filename="libmediaart/extract.h" line="208"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="1677">%TRUE on success, otherwise %FALSE when @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1669">the #MediaArtProcess</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1670">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file"
              c:identifier="media_art_process_file"
              version="0.3.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1692">Process @file and check if media art exists and if it is up to date
with @artist and @title provided. Either @artist OR @title can be
%NULL, but they can not both be %NULL.

NOTE: This function MAY retrieve media art for
@artist and @title combinations. It is not guaranteed and depends
on download services available over DBus at the time.

In cases where download is unavailable, media_art_process_file()
will only try to procure a cache for possible media art found in
directories surrounding the location of @file. If a buffer or
memory chunk needs to be saved to disk which has been retrieved
from an MP3 (for example), you should use
media_art_process_buffer().

The modification time (mtime) of @file is checked against the
cached stored for @artist and @title. If the cache is old or
doesn't exist, it will be updated. What this actually does is
update the mtime of the cache (a symlink) on the disk.

If there is no actual media art stored locally (for example, it's
stored in a directory on a removable device), it is copied locally
(usually to an XDG cache directory).

If @file is on a removable filesystem, the media art file will be
saved in a cache on the removable file system rather than on the
host machine.</doc>
        <source-position filename="libmediaart/extract.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="1733">%TRUE if @file could be processed or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1694">Media art process object</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1695">The type of media</doc>
            <type name="Type" c:type="MediaArtType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1696">The options given for how to process the media art</doc>
            <type name="ProcessFlags" c:type="MediaArtProcessFlags"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1697">File to be processed</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="artist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1698">The artist name @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1699">The title for @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1700">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_async"
              c:identifier="media_art_process_file_async"
              version="0.7.0">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1836">Processes media art. Precisely the same operation as
media_art_process_file() is performing, but asynchronously.

When all i/o for the operation is finished the @callback will be
called.

In case of a partial error the callback will be called with any
succeeding items and no error, and on the next request the error
will be reported. If a request is cancelled the callback will be
called with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.</doc>
        <source-position filename="libmediaart/extract.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1838">Media art process object</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1839">The type of media</doc>
            <type name="Type" c:type="MediaArtType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1840">The options given for how to process the media art</doc>
            <type name="ProcessFlags" c:type="MediaArtProcessFlags"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1841">File to be processed</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="artist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1842">The artist name @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1843">The title for @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1844">the [I/O priority][io-priority] of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1845">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1847">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1849">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_finish"
              c:identifier="media_art_process_file_finish"
              version="0.7.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1892">Finishes the asynchronous operation started with
media_art_process_file_async().</doc>
        <source-position filename="libmediaart/extract.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="1902">%TRUE on success, otherwise %FALSE when @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1894">the #MediaArtProcess</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1895">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="uri"
              c:identifier="media_art_process_uri"
              version="0.5.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1917">This function calls media_art_process_file(), but takes the @uri as
a string rather than a #GFile object. Either @artist OR @title can be
%NULL, but they can not both be %NULL.</doc>
        <source-position filename="libmediaart/extract.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="1933">%TRUE if @uri could be processed or %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1919">Media art process object</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1920">The type of media that contained the image data</doc>
            <type name="Type" c:type="MediaArtType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1921">How the media art is processed</doc>
            <type name="ProcessFlags" c:type="MediaArtProcessFlags"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1922">URI of the media file that contained the data</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="artist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1923">The artist name @uri or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1924">The title for @uri or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1925">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="uri_async"
              c:identifier="media_art_process_uri_async"
              version="0.7.0">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1971">Processes media art. Precisely the same operation as
media_art_process_uri() is performing, but asynchronously.

When all i/o for the operation is finished the @callback will be
called.

In case of a partial error the callback will be called with any
succeeding items and no error, and on the next request the error
will be reported. If a request is cancelled the callback will be
called with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.</doc>
        <source-position filename="libmediaart/extract.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1973">Media art process object</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1974">The type of media</doc>
            <type name="Type" c:type="MediaArtType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1975">The options given for how to process the media art</doc>
            <type name="ProcessFlags" c:type="MediaArtProcessFlags"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1976">A string representing a URI to be processed</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="artist"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1977">The artist name @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1978">The title for @file or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1979">the [I/O priority][io-priority] of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1980">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="8">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1982">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="1984">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="uri_finish"
              c:identifier="media_art_process_uri_finish"
              version="0.7.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="2027">Finishes the asynchronous operation started with
media_art_process_file_async().</doc>
        <source-position filename="libmediaart/extract.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extract.c"
               line="2037">%TRUE on success, otherwise %FALSE when @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="process" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="2029">the #MediaArtProcess</doc>
            <type name="Process" c:type="MediaArtProcess*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libmediaart/extract.c"
                 line="2030">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ProcessClass"
            c:type="MediaArtProcessClass"
            glib:is-gtype-struct-for="Process">
      <doc xml:space="preserve"
           filename="libmediaart/extract.h"
           line="117">Prototype for the class.</doc>
      <source-position filename="libmediaart/extract.h" line="125"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <bitfield name="ProcessFlags"
              version="0.3.0"
              c:type="MediaArtProcessFlags">
      <doc xml:space="preserve"
           filename="libmediaart/extract.h"
           line="51">This type categorized the flags used when processing media art.</doc>
      <source-position filename="libmediaart/extract.h" line="63"/>
      <member name="none"
              value="0"
              c:identifier="MEDIA_ART_PROCESS_FLAGS_NONE">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="53">Normal operation.</doc>
      </member>
      <member name="force"
              value="1"
              c:identifier="MEDIA_ART_PROCESS_FLAGS_FORCE">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="54">Force media art to be re-saved to disk even if it already exists and the related file or URI has the same modified time (mtime).</doc>
      </member>
    </bitfield>
    <enumeration name="Type" c:type="MediaArtType">
      <doc xml:space="preserve"
           filename="libmediaart/extract.h"
           line="34">This type categorized the type of media art we're dealing with.</doc>
      <source-position filename="libmediaart/extract.h" line="49"/>
      <member name="none" value="0" c:identifier="MEDIA_ART_NONE">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="36">No media art is available</doc>
      </member>
      <member name="album" value="1" c:identifier="MEDIA_ART_ALBUM">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="37">Media art is an album</doc>
      </member>
      <member name="video" value="2" c:identifier="MEDIA_ART_VIDEO">
        <doc xml:space="preserve"
             filename="libmediaart/extract.h"
             line="38">Media art is a movie or video</doc>
      </member>
    </enumeration>
    <function name="buffer_to_jpeg"
              c:identifier="media_art_buffer_to_jpeg"
              version="0.1.0"
              throws="1">
      <doc xml:space="preserve"
           filename="libmediaart/extractdummy.c"
           line="96">This function performs the same operation as
media_art_file_to_jpeg() with the exception that a raw @buffer can
be used instead providing @len and the @buffer_mime too.</doc>
      <source-position filename="libmediaart/extractgeneric.h" line="46"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/extractdummy.c"
             line="108">%TRUE if conversion was successful, otherwise %FALSE is
returned if @error is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="98">Raw buffer representing content to save</doc>
          <array length="1" zero-terminated="0" c:type="const unsigned char*">
            <type name="guint8" c:type="unsigned char"/>
          </array>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="99">Length of @buffer to use</doc>
          <type name="gsize" c:type="size_t"/>
        </parameter>
        <parameter name="buffer_mime" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="100">MIME type for @buffer</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="101">Output file name (not URI) to save converted content to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="cache">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="31">These functions give you access to the media art that has been
extracted and saved. There are normally two places the media art
will be located in. These locations store symlinks not real copies
of the content:
&lt;itemizedlist&gt;
  &lt;listitem&gt;
    &lt;para&gt;The user's XDG_CACHE_HOME directory (usually
&lt;filename&gt;~/.cache/media-art/&lt;/filename&gt;)&lt;/para&gt;
  &lt;/listitem&gt;
  &lt;listitem&gt;
    &lt;para&gt;The local file system's top level
&lt;filename&gt;.mediaartlocal&lt;/filename&gt; directory (for example
&lt;filename&gt;/media/martyn/pendrive/.mediaartlocal/&lt;/filename&gt;)&lt;/para&gt;
  &lt;/listitem&gt;
&lt;/itemizedlist&gt;

To find the media art for a given media file, use the function
media_art_get_file() (you can also use media_art_get_path(), which
does the same thing but for path strings instead of #GFile
objects).

If media art for the file is not found in the cache, these
functions will return %NULL. You may find some embedded media art
upon loading the file, and you can use media_art_process_buffer()
to convert it to the correct format and save it in the cache for
next time. The media_art_process_file() function also supports
searching for external media art images using a basic heuristic.</doc>
    </docsection>
    <function name="error_quark"
              c:identifier="media_art_error_quark"
              version="0.2.0">
      <doc xml:space="preserve"
           filename="libmediaart/extract.c"
           line="1258">The error domain for #MediaArtError.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/extract.c"
             line="1263">the #GQuark used to identify media art errors in
GError structures.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <docsection name="extract">
      <doc xml:space="preserve"
           filename="libmediaart/extract.c"
           line="35">The libmediaart library supports taking image data that you have extracted
from a media file and saving it into the media art cache, so that future
applications can display the media art without having to extract the image
again. This is done using the media_art_process_file() or
media_art_process_buffer() functions.

Extracting new media art from a file needs to be done by your application.
Usually, when an application loads a media file any embedded images will be
made available as a side effect. For example, if you are using GStreamer any
images will be returned through the #GstTagList interface as %GST_TAG_IMAGE
tags.

The media art cache requires that all images are saved as 'application/jpeg'
files. Embedded images can be in several formats, and
media_art_process_file() and media_art_process_buffer() functions will
convert the supplied image data into the correct format if
necessary. There are multiple backends that can be used for this,
and you can choose which is used at build time using the library's
'configure' script.

If there is no embedded media art in a file,
media_art_process_file() and media_art_process_buffer() functions will
look in the directory that contains the media file for likely media
art using a simple heuristic.</doc>
    </docsection>
    <function name="file_to_jpeg"
              c:identifier="media_art_file_to_jpeg"
              version="0.1.0"
              throws="1">
      <doc xml:space="preserve"
           filename="libmediaart/extractdummy.c"
           line="74">Save @filename to @target as JPEG format. The @filename may not be
a JPEG in the first place.</doc>
      <source-position filename="libmediaart/extractgeneric.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/extractdummy.c"
             line="83">%TRUE if conversion was successful, otherwise %FALSE is
returned if @error is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="76">Original file name (not URI) to convert</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="77">Output file name (not URI) to save converted content to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_file"
              c:identifier="media_art_get_file"
              version="0.2.0">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="245">Gets the files pointing to cache files suitable for storing the media
art provided by the @artist, @title and @file arguments. @cache_file
will point to a location in the XDG user cache directory..

The @cache_file relates to a symlink stored in XDG cache directories
for the user. A @cache_file would be expected to look like
&lt;filename&gt;file:///home/martyn/.cache/media-art/...&lt;/filename&gt;. This
is normally the location that is most useful (assuming the cache
has been extracted in the first place).

When done, both #GFile&lt;!-- --&gt;s must be freed with g_object_unref() if
non-%NULL.

This operation should not use i/o, but it depends on the backend
GFile implementation.

All string inputs must be valid UTF8. Use g_utf8_validate() if the
input has not already been validated.</doc>
      <source-position filename="libmediaart/cache.h" line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/cache.c"
             line="274">%TRUE if @cache_file was returned, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="artist"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="247">the artist</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="title"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="248">the title</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="prefix"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="249">the prefix for cache files, for example "album"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cache_file"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="250">a pointer to a
#GFile which represents the cached file for media art, or %NULL
a #GFile representing the user&amp;apos;s cache path, or %NULL
#GFile representing the location of the local media art</doc>
          <type name="Gio.File" c:type="GFile**"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_path"
              c:identifier="media_art_get_path"
              version="0.2.0">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="369">This function calls media_art_get_file() by creating a #GFile for
@uri and passing the same arguments to media_art_get_file(). For more
details about what this function does, see media_art_get_file().

Get the path to media art for a given resource. Newly allocated
data returned in @cache_path must be freed with g_free().

All string inputs must be valid UTF8. Use g_utf8_validate() if the
input has not already been validated.</doc>
      <source-position filename="libmediaart/cache.h" line="38"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/cache.c"
             line="388">%TRUE if @cache_path was returned, otherwise %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="artist"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="371">the artist</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="title"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="372">the title</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="prefix"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="373">the prefix, for example "album"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cache_path"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="374">a string
representing the path to the cache for this media art
path or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_init"
              c:identifier="media_art_plugin_init"
              version="0.1.0">
      <doc xml:space="preserve"
           filename="libmediaart/extractdummy.c"
           line="40">This function facilitates a plugin&amp;apos;s need to create any
internal caches before anything else is done. This function must
exist in each plugin and is called immediately after the plugin is
loaded. Conversely, media_art_plugin_shutdown() is called before
tear down of the plugin system or plugin itself.</doc>
      <source-position filename="libmediaart/extractgeneric.h" line="37"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="max_width" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/extractdummy.c"
               line="42">The maximum width that an image is allowed to be</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="plugin_shutdown"
              c:identifier="media_art_plugin_shutdown"
              version="0.1.0">
      <doc xml:space="preserve"
           filename="libmediaart/extractdummy.c"
           line="58">This function facilitates a plugin&amp;apos;s need to clean up any
internal caches. This function must exist in each plugin and is
called immediately after the plugin is loaded. Conversely,
media_art_plugin_init() is called after the plugin is loaded.</doc>
      <source-position filename="libmediaart/extractgeneric.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <docsection name="plugins">
      <doc xml:space="preserve"
           filename="libmediaart/extractdummy.c"
           line="27">Plugins are provided to allow different systems to make use of
existing file format conversion APIs. By default, a GdkPixbuf and
Qt implementation are provided. This API allows new implementations
to be provided.</doc>
    </docsection>
    <function name="remove"
              c:identifier="media_art_remove"
              version="0.2.0"
              throws="1">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="419">Removes media art for given album/artist provided.

If @artist and @album are %NULL, ALL media art cache is removed.

All string inputs must be valid UTF8. Use g_utf8_validate() if the
input has not already been validated.</doc>
      <source-position filename="libmediaart/cache.h" line="49"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/cache.c"
             line="433">#TRUE on success, otherwise #FALSE where @error will be set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="artist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="421">artist the media art belongs to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="album"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="422">album the media art belongs or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="423">optional #GCancellable object, %NULL to ignore.</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="remove_async"
              c:identifier="media_art_remove_async"
              version="0.7.0">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="600">Removes media art for given album/artist provided. Precisely the
same operation as media_art_remove() is performing, but
asynchronously.

When all i/o for the operation is finished the @callback will be
called.

In case of a partial error the callback will be called with any
succeeding items and no error, and on the next request the error
will be reported. If a request is cancelled the callback will be
called with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.

All string inputs must be valid UTF8. Use g_utf8_validate() if the
input has not already been validated.</doc>
      <source-position filename="libmediaart/cache.h" line="54"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="artist" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="602">artist the media art belongs to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="album"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="603">album the media art belongs or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="io_priority" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="606">the [I/O priority][io-priority] of the request</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="source_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="604">the #GObject this task belongs to,
can be %NULL.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="607">optional #GCancellable object, %NULL to
ignore</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="6">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="609">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="611">the data to pass to callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="remove_finish"
              c:identifier="media_art_remove_finish"
              version="0.7.0"
              throws="1">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="655">Finishes the asynchronous operation started with
media_art_remove_async().</doc>
      <source-position filename="libmediaart/cache.h" line="63"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libmediaart/cache.c"
             line="666">%TRUE on success, otherwise %FALSE when @error will be set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="source_object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="657">the #GObject this task belongs to,
can be %NULL.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="659">a #GAsyncResult.</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strip_invalid_entities"
              c:identifier="media_art_strip_invalid_entities"
              version="0.2.0">
      <doc xml:space="preserve"
           filename="libmediaart/cache.c"
           line="102">Strip a albumname or artistname string to prepare it for calculating the
media art path with it. Certain characters and charactersets will be stripped
and a newly allocated string returned which you must free with g_free().

This functions is used internally by media_art_get_file() and
media_art_get_path(). You will not normally need to call it yourself.

This function provides the following features:
1. Invalid characters include: ()[]&lt;&gt;{}_!@#$^&amp;*+=|\/"'?~;
2. Text inside brackets of (), {}, [] and &lt;&gt; pairs are removed.
3. Multiples of space characters are removed.

This function expects that the input is valid UTF-8. Use g_utf8_validate()
if the input has not already been validated.</doc>
      <source-position filename="libmediaart/cache.h" line="35"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="libmediaart/cache.c"
             line="121">@original stripped of invalid characters which must be
freed. On error or if @original is NULL, %NULL is returned.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="original"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libmediaart/cache.c"
               line="104">original string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
