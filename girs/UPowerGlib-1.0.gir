<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <namespace name="UPowerGlib"
             version="1.0"
             shared-library="libupower-glib.so.3"
             c:identifier-prefixes="Up"
             c:symbol-prefixes="up_">
    <class name="Client"
           c:symbol-prefix="client"
           c:type="UpClient"
           parent="GObject.Object"
           glib:type-name="UpClient"
           glib:get-type="up_client_get_type"
           glib:type-struct="ClientClass">
      <constructor name="new" c:identifier="up_client_new" version="0.9.0">
        <doc xml:space="preserve">Creates a new #UpClient object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new UpClient object.</doc>
          <type name="Client" c:type="UpClient*"/>
        </return-value>
      </constructor>
      <virtual-method name="device_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="Device" c:type="UpDevice*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_critical_action"
              c:identifier="up_client_get_critical_action"
              version="1.0">
        <doc xml:space="preserve">Gets a string representing the configured critical action,
depending on availability.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the action name, or %NULL on error.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_daemon_version"
              c:identifier="up_client_get_daemon_version"
              version="0.9.0">
        <doc xml:space="preserve">Get UPower daemon version.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">string containing the daemon version, e.g. 008</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="up_client_get_devices"
              version="0.9.0">
        <doc xml:space="preserve">Get a copy of the device objects.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of #UpDevice objects, free with g_ptr_array_unref()</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="Device"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_device"
              c:identifier="up_client_get_display_device"
              version="1.0">
        <doc xml:space="preserve">Get the composite display device.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a #UpClient object, or %NULL on error.</doc>
          <type name="Device" c:type="UpDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lid_is_closed"
              c:identifier="up_client_get_lid_is_closed"
              version="0.9.0">
        <doc xml:space="preserve">Get whether the laptop lid is closed.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if lid is closed or %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lid_is_present"
              c:identifier="up_client_get_lid_is_present"
              version="0.9.2">
        <doc xml:space="preserve">Get whether a laptop lid is present on this machine.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the machine has a laptop lid</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_on_battery"
              c:identifier="up_client_get_on_battery"
              version="0.9.0">
        <doc xml:space="preserve">Get whether the system is running on battery power.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the system is currently running on battery, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve">a #UpClient instance.</doc>
            <type name="Client" c:type="UpClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="daemon-version"
                version="0.9.0"
                transfer-ownership="none">
        <doc xml:space="preserve">The daemon version.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lid-is-closed" version="0.9.0" transfer-ownership="none">
        <doc xml:space="preserve">If the laptop lid is closed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lid-is-present"
                version="0.9.0"
                transfer-ownership="none">
        <doc xml:space="preserve">If a laptop lid is present.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="on-battery" version="0.9.0" transfer-ownership="none">
        <doc xml:space="preserve">If the computer is on battery power.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ClientPrivate" c:type="UpClientPrivate*"/>
      </field>
      <glib:signal name="device-added" when="last" version="0.9.0">
        <doc xml:space="preserve">The ::device-added signal is emitted when a power device is added.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">the #UpDevice that was added.</doc>
            <type name="Device"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last" version="1.0">
        <doc xml:space="preserve">The ::device-removed signal is emitted when a power device is removed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">the object path of the #UpDevice that was removed.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="UpClientClass"
            glib:is-gtype-struct-for="Client">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="UpClient*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="Device" c:type="UpDevice*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="UpClient*"/>
            </parameter>
            <parameter name="object_path" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_up_client_reserved1" introspectable="0">
        <callback name="_up_client_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved2" introspectable="0">
        <callback name="_up_client_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved3" introspectable="0">
        <callback name="_up_client_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved4" introspectable="0">
        <callback name="_up_client_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved5" introspectable="0">
        <callback name="_up_client_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved6" introspectable="0">
        <callback name="_up_client_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved7" introspectable="0">
        <callback name="_up_client_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_client_reserved8" introspectable="0">
        <callback name="_up_client_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="ClientGlue"
               c:symbol-prefix="client_glue"
               c:type="UpClientGlue"
               glib:type-name="UpClientGlue"
               glib:get-type="up_client_glue_get_type"
               glib:type-struct="ClientGlueIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="up_client_glue_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="up_client_glue_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UpClientGlue interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="device_added">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_removed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_daemon_version"
                      invoker="get_daemon_version"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.DaemonVersion"&gt;"DaemonVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_client_glue_dup_daemon_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lid_is_closed"
                      invoker="get_lid_is_closed"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsClosed"&gt;"LidIsClosed"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_lid_is_present"
                      invoker="get_lid_is_present"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsPresent"&gt;"LidIsPresent"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_on_battery"
                      invoker="get_on_battery"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.OnBattery"&gt;"OnBattery"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_enumerate_devices">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_critical_action">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_display_device">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_enumerate_devices"
              c:identifier="up_client_glue_call_enumerate_devices">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower.EnumerateDevices"&gt;EnumerateDevices()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_client_glue_call_enumerate_devices_finish() to get the result of the operation.

See up_client_glue_call_enumerate_devices_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enumerate_devices_finish"
              c:identifier="up_client_glue_call_enumerate_devices_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_client_glue_call_enumerate_devices().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar***"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_client_glue_call_enumerate_devices().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_enumerate_devices_sync"
              c:identifier="up_client_glue_call_enumerate_devices_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower.EnumerateDevices"&gt;EnumerateDevices()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_client_glue_call_enumerate_devices() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="out_devices"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar***"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_critical_action"
              c:identifier="up_client_glue_call_get_critical_action">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetCriticalAction"&gt;GetCriticalAction()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_client_glue_call_get_critical_action_finish() to get the result of the operation.

See up_client_glue_call_get_critical_action_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_critical_action_finish"
              c:identifier="up_client_glue_call_get_critical_action_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_client_glue_call_get_critical_action().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="out_action"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_client_glue_call_get_critical_action().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_critical_action_sync"
              c:identifier="up_client_glue_call_get_critical_action_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetCriticalAction"&gt;GetCriticalAction()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_client_glue_call_get_critical_action() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="out_action"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_display_device"
              c:identifier="up_client_glue_call_get_display_device">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetDisplayDevice"&gt;GetDisplayDevice()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_client_glue_call_get_display_device_finish() to get the result of the operation.

See up_client_glue_call_get_display_device_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_display_device_finish"
              c:identifier="up_client_glue_call_get_display_device_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_client_glue_call_get_display_device().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="out_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_client_glue_call_get_display_device().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_display_device_sync"
              c:identifier="up_client_glue_call_get_display_device_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetDisplayDevice"&gt;GetDisplayDevice()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_client_glue_call_get_display_device() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlueProxy.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="out_device"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_enumerate_devices"
              c:identifier="up_client_glue_complete_enumerate_devices">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower.EnumerateDevices"&gt;EnumerateDevices()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="devices" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_critical_action"
              c:identifier="up_client_glue_complete_get_critical_action">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetCriticalAction"&gt;GetCriticalAction()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_display_device"
              c:identifier="up_client_glue_complete_get_display_device">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetDisplayDevice"&gt;GetDisplayDevice()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_daemon_version"
              c:identifier="up_client_glue_dup_daemon_version"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.DaemonVersion"&gt;"DaemonVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_device_added"
              c:identifier="up_client_glue_emit_device_added">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UPower.DeviceAdded"&gt;"DeviceAdded"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_device_removed"
              c:identifier="up_client_glue_emit_device_removed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UPower.DeviceRemoved"&gt;"DeviceRemoved"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_daemon_version"
              c:identifier="up_client_glue_get_daemon_version"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.DaemonVersion"&gt;"DaemonVersion"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_client_glue_dup_daemon_version() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lid_is_closed"
              c:identifier="up_client_glue_get_lid_is_closed"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsClosed"&gt;"LidIsClosed"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lid_is_present"
              c:identifier="up_client_glue_get_lid_is_present"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsPresent"&gt;"LidIsPresent"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_on_battery"
              c:identifier="up_client_glue_get_on_battery"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower.OnBattery"&gt;"OnBattery"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_daemon_version"
              c:identifier="up_client_glue_set_daemon_version"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower.DaemonVersion"&gt;"DaemonVersion"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lid_is_closed"
              c:identifier="up_client_glue_set_lid_is_closed"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsClosed"&gt;"LidIsClosed"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_lid_is_present"
              c:identifier="up_client_glue_set_lid_is_present"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsPresent"&gt;"LidIsPresent"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_on_battery"
              c:identifier="up_client_glue_set_on_battery"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower.OnBattery"&gt;"OnBattery"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpClientGlue.</doc>
            <type name="ClientGlue" c:type="UpClientGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="daemon-version" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower.DaemonVersion"&gt;"DaemonVersion"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lid-is-closed" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsClosed"&gt;"LidIsClosed"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="lid-is-present" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower.LidIsPresent"&gt;"LidIsPresent"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="on-battery" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower.OnBattery"&gt;"OnBattery"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="device-added" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UPower.DeviceAdded"&gt;"DeviceAdded"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-removed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UPower.DeviceRemoved"&gt;"DeviceRemoved"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_device" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-enumerate-devices" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower.EnumerateDevices"&gt;EnumerateDevices()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_client_glue_complete_enumerate_devices() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-critical-action" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetCriticalAction"&gt;GetCriticalAction()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_client_glue_complete_get_critical_action() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-display-device" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower.GetDisplayDevice"&gt;GetDisplayDevice()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_client_glue_complete_get_display_device() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="ClientGlueIface"
            c:type="UpClientGlueIface"
            glib:is-gtype-struct-for="ClientGlue">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_enumerate_devices">
        <callback name="handle_enumerate_devices">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_critical_action">
        <callback name="handle_get_critical_action">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_display_device">
        <callback name="handle_get_display_device">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_daemon_version">
        <callback name="get_daemon_version">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpClientGlue.</doc>
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lid_is_closed">
        <callback name="get_lid_is_closed">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpClientGlue.</doc>
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_lid_is_present">
        <callback name="get_lid_is_present">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpClientGlue.</doc>
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_on_battery">
        <callback name="get_on_battery">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpClientGlue.</doc>
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_added">
        <callback name="device_added">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_removed">
        <callback name="device_removed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="ClientGlue" c:type="UpClientGlue*"/>
            </parameter>
            <parameter name="arg_device" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="ClientGlueProxy"
           c:symbol-prefix="client_glue_proxy"
           c:type="UpClientGlueProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UpClientGlueProxy"
           glib:get-type="up_client_glue_proxy_get_type"
           glib:type-struct="ClientGlueProxyClass">
      <doc xml:space="preserve">The #UpClientGlueProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="ClientGlue"/>
      <constructor name="new_finish"
                   c:identifier="up_client_glue_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_client_glue_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ClientGlueProxy" c:type="UpClientGlue*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_client_glue_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="up_client_glue_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_client_glue_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ClientGlueProxy" c:type="UpClientGlue*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_client_glue_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="up_client_glue_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like up_client_glue_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See up_client_glue_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ClientGlueProxy" c:type="UpClientGlue*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="up_client_glue_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See up_client_glue_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="ClientGlueProxy" c:type="UpClientGlue*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="up_client_glue_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_client_glue_proxy_new_finish() to get the result of the operation.

See up_client_glue_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="up_client_glue_proxy_new_for_bus">
        <doc xml:space="preserve">Like up_client_glue_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_client_glue_proxy_new_for_bus_finish() to get the result of the operation.

See up_client_glue_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ClientGlueProxyPrivate"
              c:type="UpClientGlueProxyPrivate*"/>
      </field>
    </class>
    <record name="ClientGlueProxyClass"
            c:type="UpClientGlueProxyClass"
            glib:is-gtype-struct-for="ClientGlueProxy">
      <doc xml:space="preserve">Class structure for #UpClientGlueProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="ClientGlueProxyPrivate"
            c:type="UpClientGlueProxyPrivate"
            disguised="1">
    </record>
    <class name="ClientGlueSkeleton"
           c:symbol-prefix="client_glue_skeleton"
           c:type="UpClientGlueSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UpClientGlueSkeleton"
           glib:get-type="up_client_glue_skeleton_get_type"
           glib:type-struct="ClientGlueSkeletonClass">
      <doc xml:space="preserve">The #UpClientGlueSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="ClientGlue"/>
      <constructor name="new" c:identifier="up_client_glue_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="ClientGlueSkeleton" c:type="UpClientGlue*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ClientGlueSkeletonPrivate"
              c:type="UpClientGlueSkeletonPrivate*"/>
      </field>
    </class>
    <record name="ClientGlueSkeletonClass"
            c:type="UpClientGlueSkeletonClass"
            glib:is-gtype-struct-for="ClientGlueSkeleton">
      <doc xml:space="preserve">Class structure for #UpClientGlueSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="ClientGlueSkeletonPrivate"
            c:type="UpClientGlueSkeletonPrivate"
            disguised="1">
    </record>
    <record name="ClientPrivate" c:type="UpClientPrivate" disguised="1">
      <doc xml:space="preserve">Private #UpClient data</doc>
    </record>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="UpDevice"
           parent="GObject.Object"
           glib:type-name="UpDevice"
           glib:get-type="up_device_get_type"
           glib:type-struct="DeviceClass">
      <constructor name="new" c:identifier="up_device_new" version="0.9.0">
        <doc xml:space="preserve">Creates a new #UpDevice object.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new UpDevice object.</doc>
          <type name="Device" c:type="UpDevice*"/>
        </return-value>
      </constructor>
      <function name="kind_from_string"
                c:identifier="up_device_kind_from_string"
                version="0.9.0">
        <doc xml:space="preserve">Converts a string to a #UpDeviceKind.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">enumerated value</doc>
          <type name="DeviceKind" c:type="UpDeviceKind"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="kind_to_string"
                c:identifier="up_device_kind_to_string"
                version="0.9.0">
        <doc xml:space="preserve">Converts a #UpDeviceKind to a string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="type_enum" transfer-ownership="none">
            <type name="DeviceKind" c:type="UpDeviceKind"/>
          </parameter>
        </parameters>
      </function>
      <function name="level_from_string"
                c:identifier="up_device_level_from_string"
                version="1.0">
        <doc xml:space="preserve">Converts a string to a #UpDeviceLevel.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">enumerated value</doc>
          <type name="DeviceLevel" c:type="UpDeviceLevel"/>
        </return-value>
        <parameters>
          <parameter name="level" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="level_to_string"
                c:identifier="up_device_level_to_string"
                version="1.0">
        <doc xml:space="preserve">Converts a #UpDeviceLevel to a string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="level_enum" transfer-ownership="none">
            <type name="DeviceLevel" c:type="UpDeviceLevel"/>
          </parameter>
        </parameters>
      </function>
      <function name="state_from_string"
                c:identifier="up_device_state_from_string"
                version="0.9.0">
        <doc xml:space="preserve">Converts a string to a #UpDeviceState.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">enumerated value</doc>
          <type name="DeviceState" c:type="UpDeviceState"/>
        </return-value>
        <parameters>
          <parameter name="state" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="state_to_string"
                c:identifier="up_device_state_to_string"
                version="0.9.0">
        <doc xml:space="preserve">Converts a #UpDeviceState to a string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="state_enum" transfer-ownership="none">
            <type name="DeviceState" c:type="UpDeviceState"/>
          </parameter>
        </parameters>
      </function>
      <function name="technology_from_string"
                c:identifier="up_device_technology_from_string"
                version="0.9.0">
        <doc xml:space="preserve">Converts a string to a #UpDeviceTechnology.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">enumerated value</doc>
          <type name="DeviceTechnology" c:type="UpDeviceTechnology"/>
        </return-value>
        <parameters>
          <parameter name="technology" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="technology_to_string"
                c:identifier="up_device_technology_to_string"
                version="0.9.0">
        <doc xml:space="preserve">Converts a #UpDeviceTechnology to a string.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">identifier string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="technology_enum" transfer-ownership="none">
            <type name="DeviceTechnology" c:type="UpDeviceTechnology"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_history_sync"
              c:identifier="up_device_get_history_sync"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve">Gets the device history.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of #UpHistoryItem's, with the most
              recent one being first; %NULL if @error is set or @device is
              invalid</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="HistoryItem"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #UpDevice instance.</doc>
            <type name="Device" c:type="UpDevice*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">The type of history, known values are "rate" and "charge".</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="timespec" transfer-ownership="none">
            <doc xml:space="preserve">the amount of time to look back into time.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="resolution" transfer-ownership="none">
            <doc xml:space="preserve">the resolution of data.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_object_path"
              c:identifier="up_device_get_object_path"
              version="0.9.0">
        <doc xml:space="preserve">Gets the object path for the device.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the object path, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #UpDevice instance.</doc>
            <type name="Device" c:type="UpDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_statistics_sync"
              c:identifier="up_device_get_statistics_sync"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve">Gets the device current statistics.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of #UpStatsItem's, else #NULL and @error is used</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="StatsItem"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #UpDevice instance.</doc>
            <type name="Device" c:type="UpDevice*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve">the type of statistics.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_sync"
              c:identifier="up_device_refresh_sync"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve">Refreshes properties on the device.
This function is normally not required.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #UpDevice instance.</doc>
            <type name="Device" c:type="UpDevice*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_object_path_sync"
              c:identifier="up_device_set_object_path_sync"
              version="0.9.0"
              throws="1">
        <doc xml:space="preserve">Sets the object path of the object and fills up initial properties.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">#TRUE for success, else #FALSE and @error is used</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #UpDevice instance.</doc>
            <type name="Device" c:type="UpDevice*"/>
          </instance-parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">The UPower object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_text" c:identifier="up_device_to_text" version="0.9.0">
        <doc xml:space="preserve">Converts the device to a string description.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">text representation of #UpDevice</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">a #UpDevice instance.</doc>
            <type name="Device" c:type="UpDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="capacity"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The percentage capacity of the device where 100% means the device has
the same charge potential as when it was manufactured.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The energy left in the device. Measured in mWh.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-empty"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The energy the device will have when it is empty. This is usually zero.
Measured in mWh.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-full"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The amount of energy when the device is fully charged. Measured in mWh.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-full-design"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The amount of energy when the device was brand new. Measured in mWh.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-rate"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The rate of discharge or charge. Measured in mW.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="has-history"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the device has history data that might be useful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-statistics"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the device has statistics data that might be useful.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name"
                version="1.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The icon name, following the Icon Naming Speficiation</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-present"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the device is present, as some devices like laptop batteries
can be removed, leaving an empty bay that is still technically a
device.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-rechargeable"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the device has a rechargable battery.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="kind"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The device kind, e.g. %UP_DEVICE_KIND_KEYBOARD.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="luminosity"
                version="0.9.19"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The current luminosity of the device.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="model"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The model of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="native-path"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The native path of the device, useful for direct device access.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="online"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the device is online, i.e. connected.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="percentage"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The percentage charge of the device.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="power-supply"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">If the device is powering the system.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="serial"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The serial number of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The state the device is in at this time, e.g. %UP_DEVICE_STATE_EMPTY.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="technology"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The battery technology e.g. %UP_DEVICE_TECHNOLOGY_LITHIUM_ION.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="temperature"
                version="0.9.22"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The temperature of the device in degrees Celsius.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="time-to-empty"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The amount of time until the device is empty.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="time-to-full"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The amount of time until the device is fully charged.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="update-time"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The last time the device was updated.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vendor"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The vendor of the device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="voltage"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The current voltage of the device.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="warning-level"
                version="1.0"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The warning level e.g. %UP_DEVICE_LEVEL_WARNING.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DevicePrivate" c:type="UpDevicePrivate*"/>
      </field>
    </class>
    <record name="DeviceClass"
            c:type="UpDeviceClass"
            glib:is-gtype-struct-for="Device">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_up_device_reserved1" introspectable="0">
        <callback name="_up_device_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved2" introspectable="0">
        <callback name="_up_device_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved3" introspectable="0">
        <callback name="_up_device_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved4" introspectable="0">
        <callback name="_up_device_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved5" introspectable="0">
        <callback name="_up_device_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved6" introspectable="0">
        <callback name="_up_device_reserved6">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved7" introspectable="0">
        <callback name="_up_device_reserved7">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_up_device_reserved8" introspectable="0">
        <callback name="_up_device_reserved8">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <interface name="DeviceGlue"
               c:symbol-prefix="device_glue"
               c:type="UpDeviceGlue"
               glib:type-name="UpDeviceGlue"
               glib:get-type="up_device_glue_get_type"
               glib:type-struct="DeviceGlueIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="up_device_glue_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="up_device_glue_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UpDeviceGlue interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_capacity"
                      invoker="get_capacity"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Capacity"&gt;"Capacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_energy"
                      invoker="get_energy"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Energy"&gt;"Energy"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_energy_empty"
                      invoker="get_energy_empty"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyEmpty"&gt;"EnergyEmpty"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_energy_full"
                      invoker="get_energy_full"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFull"&gt;"EnergyFull"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_energy_full_design"
                      invoker="get_energy_full_design"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFullDesign"&gt;"EnergyFullDesign"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_energy_rate"
                      invoker="get_energy_rate"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyRate"&gt;"EnergyRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_history"
                      invoker="get_has_history"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasHistory"&gt;"HasHistory"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_statistics"
                      invoker="get_has_statistics"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasStatistics"&gt;"HasStatistics"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_icon_name"
                      invoker="get_icon_name"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_icon_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_present"
                      invoker="get_is_present"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsPresent"&gt;"IsPresent"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_is_rechargeable"
                      invoker="get_is_rechargeable"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsRechargeable"&gt;"IsRechargeable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_luminosity"
                      invoker="get_luminosity"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Luminosity"&gt;"Luminosity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_model" invoker="get_model" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_model() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_native_path"
                      invoker="get_native_path"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.NativePath"&gt;"NativePath"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_native_path() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_online"
                      invoker="get_online"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Online"&gt;"Online"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_percentage"
                      invoker="get_percentage"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Percentage"&gt;"Percentage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_power_supply"
                      invoker="get_power_supply"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.PowerSupply"&gt;"PowerSupply"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_serial"
                      invoker="get_serial"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_serial() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_state" invoker="get_state" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_technology"
                      invoker="get_technology"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Technology"&gt;"Technology"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_temperature"
                      invoker="get_temperature"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Temperature"&gt;"Temperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_to_empty"
                      invoker="get_time_to_empty"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToEmpty"&gt;"TimeToEmpty"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_time_to_full"
                      invoker="get_time_to_full"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToFull"&gt;"TimeToFull"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_type_" invoker="get_type_" introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_update_time"
                      invoker="get_update_time"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.UpdateTime"&gt;"UpdateTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_vendor"
                      invoker="get_vendor"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_vendor() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_voltage"
                      invoker="get_voltage"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Voltage"&gt;"Voltage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_warning_level"
                      invoker="get_warning_level"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.WarningLevel"&gt;"WarningLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_history">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_timespan" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_resolution" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_statistics">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_refresh">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_history"
              c:identifier="up_device_glue_call_get_history">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetHistory"&gt;GetHistory()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_device_glue_call_get_history_finish() to get the result of the operation.

See up_device_glue_call_get_history_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_timespan" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_resolution" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_history_finish"
              c:identifier="up_device_glue_call_get_history_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_device_glue_call_get_history().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_device_glue_call_get_history().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_history_sync"
              c:identifier="up_device_glue_call_get_history_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetHistory"&gt;GetHistory()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_device_glue_call_get_history() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_timespan" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_resolution" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics"
              c:identifier="up_device_glue_call_get_statistics">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_device_glue_call_get_statistics_finish() to get the result of the operation.

See up_device_glue_call_get_statistics_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_finish"
              c:identifier="up_device_glue_call_get_statistics_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_device_glue_call_get_statistics().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_device_glue_call_get_statistics().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_statistics_sync"
              c:identifier="up_device_glue_call_get_statistics_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_device_glue_call_get_statistics() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the method invocation.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_refresh" c:identifier="up_device_glue_call_refresh">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.Refresh"&gt;Refresh()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_device_glue_call_refresh_finish() to get the result of the operation.

See up_device_glue_call_refresh_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_refresh_finish"
              c:identifier="up_device_glue_call_refresh_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_device_glue_call_refresh().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_device_glue_call_refresh().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_refresh_sync"
              c:identifier="up_device_glue_call_refresh_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.Refresh"&gt;Refresh()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_device_glue_call_refresh() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlueProxy.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_history"
              c:identifier="up_device_glue_complete_get_history">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetHistory"&gt;GetHistory()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_statistics"
              c:identifier="up_device_glue_complete_get_statistics">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_refresh"
              c:identifier="up_device_glue_complete_refresh">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.Refresh"&gt;Refresh()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_icon_name"
              c:identifier="up_device_glue_dup_icon_name"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_model"
              c:identifier="up_device_glue_dup_model"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_native_path"
              c:identifier="up_device_glue_dup_native_path"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.NativePath"&gt;"NativePath"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_serial"
              c:identifier="up_device_glue_dup_serial"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_vendor"
              c:identifier="up_device_glue_dup_vendor"
              introspectable="0">
        <doc xml:space="preserve">Gets a copy of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. The returned value should be freed with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capacity"
              c:identifier="up_device_glue_get_capacity"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Capacity"&gt;"Capacity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_energy"
              c:identifier="up_device_glue_get_energy"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Energy"&gt;"Energy"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_energy_empty"
              c:identifier="up_device_glue_get_energy_empty"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyEmpty"&gt;"EnergyEmpty"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_energy_full"
              c:identifier="up_device_glue_get_energy_full"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFull"&gt;"EnergyFull"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_energy_full_design"
              c:identifier="up_device_glue_get_energy_full_design"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFullDesign"&gt;"EnergyFullDesign"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_energy_rate"
              c:identifier="up_device_glue_get_energy_rate"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyRate"&gt;"EnergyRate"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_history"
              c:identifier="up_device_glue_get_has_history"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasHistory"&gt;"HasHistory"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_statistics"
              c:identifier="up_device_glue_get_has_statistics"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasStatistics"&gt;"HasStatistics"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="up_device_glue_get_icon_name"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_icon_name() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_present"
              c:identifier="up_device_glue_get_is_present"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsPresent"&gt;"IsPresent"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_rechargeable"
              c:identifier="up_device_glue_get_is_rechargeable"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsRechargeable"&gt;"IsRechargeable"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_luminosity"
              c:identifier="up_device_glue_get_luminosity"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Luminosity"&gt;"Luminosity"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="up_device_glue_get_model"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Model"&gt;"Model"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_model() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_native_path"
              c:identifier="up_device_glue_get_native_path"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.NativePath"&gt;"NativePath"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_native_path() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_online"
              c:identifier="up_device_glue_get_online"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Online"&gt;"Online"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_percentage"
              c:identifier="up_device_glue_get_percentage"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Percentage"&gt;"Percentage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_power_supply"
              c:identifier="up_device_glue_get_power_supply"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.PowerSupply"&gt;"PowerSupply"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial"
              c:identifier="up_device_glue_get_serial"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_serial() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="up_device_glue_get_state"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.State"&gt;"State"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_technology"
              c:identifier="up_device_glue_get_technology"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Technology"&gt;"Technology"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_temperature"
              c:identifier="up_device_glue_get_temperature"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Temperature"&gt;"Temperature"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_to_empty"
              c:identifier="up_device_glue_get_time_to_empty"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToEmpty"&gt;"TimeToEmpty"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time_to_full"
              c:identifier="up_device_glue_get_time_to_full"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToFull"&gt;"TimeToFull"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_type_"
              c:identifier="up_device_glue_get_type_"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Type"&gt;"Type"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_update_time"
              c:identifier="up_device_glue_get_update_time"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.UpdateTime"&gt;"UpdateTime"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_vendor"
              c:identifier="up_device_glue_get_vendor"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.

&lt;warning&gt;The returned value is only valid until the property changes so on the client-side it is only safe to use this function on the thread where @object was constructed. Use up_device_glue_dup_vendor() if on another thread.&lt;/warning&gt;</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_voltage"
              c:identifier="up_device_glue_get_voltage"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Voltage"&gt;"Voltage"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_warning_level"
              c:identifier="up_device_glue_get_warning_level"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.WarningLevel"&gt;"WarningLevel"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_capacity"
              c:identifier="up_device_glue_set_capacity"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Capacity"&gt;"Capacity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_energy"
              c:identifier="up_device_glue_set_energy"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Energy"&gt;"Energy"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_energy_empty"
              c:identifier="up_device_glue_set_energy_empty"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyEmpty"&gt;"EnergyEmpty"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_energy_full"
              c:identifier="up_device_glue_set_energy_full"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFull"&gt;"EnergyFull"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_energy_full_design"
              c:identifier="up_device_glue_set_energy_full_design"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFullDesign"&gt;"EnergyFullDesign"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_energy_rate"
              c:identifier="up_device_glue_set_energy_rate"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyRate"&gt;"EnergyRate"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_history"
              c:identifier="up_device_glue_set_has_history"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasHistory"&gt;"HasHistory"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_statistics"
              c:identifier="up_device_glue_set_has_statistics"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasStatistics"&gt;"HasStatistics"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="up_device_glue_set_icon_name"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IconName"&gt;"IconName"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_present"
              c:identifier="up_device_glue_set_is_present"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsPresent"&gt;"IsPresent"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_rechargeable"
              c:identifier="up_device_glue_set_is_rechargeable"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsRechargeable"&gt;"IsRechargeable"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_luminosity"
              c:identifier="up_device_glue_set_luminosity"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Luminosity"&gt;"Luminosity"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_model"
              c:identifier="up_device_glue_set_model"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Model"&gt;"Model"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_native_path"
              c:identifier="up_device_glue_set_native_path"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.NativePath"&gt;"NativePath"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_online"
              c:identifier="up_device_glue_set_online"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Online"&gt;"Online"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_percentage"
              c:identifier="up_device_glue_set_percentage"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Percentage"&gt;"Percentage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_power_supply"
              c:identifier="up_device_glue_set_power_supply"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.PowerSupply"&gt;"PowerSupply"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial"
              c:identifier="up_device_glue_set_serial"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Serial"&gt;"Serial"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="up_device_glue_set_state"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.State"&gt;"State"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_technology"
              c:identifier="up_device_glue_set_technology"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Technology"&gt;"Technology"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_temperature"
              c:identifier="up_device_glue_set_temperature"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Temperature"&gt;"Temperature"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_to_empty"
              c:identifier="up_device_glue_set_time_to_empty"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToEmpty"&gt;"TimeToEmpty"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_to_full"
              c:identifier="up_device_glue_set_time_to_full"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToFull"&gt;"TimeToFull"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_type_"
              c:identifier="up_device_glue_set_type_"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Type"&gt;"Type"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_update_time"
              c:identifier="up_device_glue_set_update_time"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.UpdateTime"&gt;"UpdateTime"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_vendor"
              c:identifier="up_device_glue_set_vendor"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Vendor"&gt;"Vendor"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_voltage"
              c:identifier="up_device_glue_set_voltage"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Voltage"&gt;"Voltage"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_warning_level"
              c:identifier="up_device_glue_set_warning_level"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.WarningLevel"&gt;"WarningLevel"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpDeviceGlue.</doc>
            <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="capacity" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Capacity"&gt;"Capacity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Energy"&gt;"Energy"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-empty" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyEmpty"&gt;"EnergyEmpty"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-full" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFull"&gt;"EnergyFull"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-full-design"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyFullDesign"&gt;"EnergyFullDesign"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="energy-rate" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.EnergyRate"&gt;"EnergyRate"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="has-history" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasHistory"&gt;"HasHistory"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-statistics" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.HasStatistics"&gt;"HasStatistics"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="icon-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IconName"&gt;"IconName"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-present" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsPresent"&gt;"IsPresent"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="is-rechargeable" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.IsRechargeable"&gt;"IsRechargeable"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="luminosity" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Luminosity"&gt;"Luminosity"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="model" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Model"&gt;"Model"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="native-path" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.NativePath"&gt;"NativePath"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="online" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Online"&gt;"Online"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="percentage" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Percentage"&gt;"Percentage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="power-supply" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.PowerSupply"&gt;"PowerSupply"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="serial" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Serial"&gt;"Serial"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="state" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.State"&gt;"State"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="technology" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Technology"&gt;"Technology"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="temperature" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Temperature"&gt;"Temperature"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="time-to-empty" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToEmpty"&gt;"TimeToEmpty"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="time-to-full" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.TimeToFull"&gt;"TimeToFull"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gint64" c:type="gint64"/>
      </property>
      <property name="type" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Type"&gt;"Type"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="update-time" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.UpdateTime"&gt;"UpdateTime"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint64" c:type="guint64"/>
      </property>
      <property name="vendor" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Vendor"&gt;"Vendor"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="voltage" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.Voltage"&gt;"Voltage"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="warning-level" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Device.WarningLevel"&gt;"WarningLevel"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="handle-get-history" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetHistory"&gt;GetHistory()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_device_glue_complete_get_history() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="arg_timespan" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="arg_resolution" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-statistics" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.GetStatistics"&gt;GetStatistics()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_device_glue_complete_get_statistics() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
          <parameter name="arg_type" transfer-ownership="none">
            <doc xml:space="preserve">Argument passed by remote caller.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-refresh" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Device.Refresh"&gt;Refresh()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_device_glue_complete_refresh() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="DeviceGlueIface"
            c:type="UpDeviceGlueIface"
            glib:is-gtype-struct-for="DeviceGlue">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_history">
        <callback name="handle_get_history">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_timespan" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="arg_resolution" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_statistics">
        <callback name="handle_get_statistics">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
            <parameter name="arg_type" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_refresh">
        <callback name="handle_refresh">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_capacity">
        <callback name="get_capacity">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_energy">
        <callback name="get_energy">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_energy_empty">
        <callback name="get_energy_empty">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_energy_full">
        <callback name="get_energy_full">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_energy_full_design">
        <callback name="get_energy_full_design">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_energy_rate">
        <callback name="get_energy_rate">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_history">
        <callback name="get_has_history">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_statistics">
        <callback name="get_has_statistics">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_icon_name">
        <callback name="get_icon_name">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_present">
        <callback name="get_is_present">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_is_rechargeable">
        <callback name="get_is_rechargeable">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_luminosity">
        <callback name="get_luminosity">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_model">
        <callback name="get_model">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_native_path">
        <callback name="get_native_path">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_online">
        <callback name="get_online">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_percentage">
        <callback name="get_percentage">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_power_supply">
        <callback name="get_power_supply">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_serial">
        <callback name="get_serial">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_state">
        <callback name="get_state">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_technology">
        <callback name="get_technology">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_temperature">
        <callback name="get_temperature">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_to_empty">
        <callback name="get_time_to_empty">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_time_to_full">
        <callback name="get_time_to_full">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gint64" c:type="gint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_type_">
        <callback name="get_type_">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_update_time">
        <callback name="get_update_time">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint64" c:type="guint64"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_vendor">
        <callback name="get_vendor">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value or %NULL if the property is not set. Do not free the returned value, it belongs to @object.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_voltage">
        <callback name="get_voltage">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_warning_level">
        <callback name="get_warning_level">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="guint" c:type="guint"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpDeviceGlue.</doc>
              <type name="DeviceGlue" c:type="UpDeviceGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DeviceGlueProxy"
           c:symbol-prefix="device_glue_proxy"
           c:type="UpDeviceGlueProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UpDeviceGlueProxy"
           glib:get-type="up_device_glue_proxy_get_type"
           glib:type-struct="DeviceGlueProxyClass">
      <doc xml:space="preserve">The #UpDeviceGlueProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="DeviceGlue"/>
      <constructor name="new_finish"
                   c:identifier="up_device_glue_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_device_glue_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DeviceGlueProxy" c:type="UpDeviceGlue*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_device_glue_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="up_device_glue_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_device_glue_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DeviceGlueProxy" c:type="UpDeviceGlue*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_device_glue_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="up_device_glue_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like up_device_glue_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See up_device_glue_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DeviceGlueProxy" c:type="UpDeviceGlue*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="up_device_glue_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See up_device_glue_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="DeviceGlueProxy" c:type="UpDeviceGlue*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="up_device_glue_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_device_glue_proxy_new_finish() to get the result of the operation.

See up_device_glue_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="up_device_glue_proxy_new_for_bus">
        <doc xml:space="preserve">Like up_device_glue_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_device_glue_proxy_new_for_bus_finish() to get the result of the operation.

See up_device_glue_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DeviceGlueProxyPrivate"
              c:type="UpDeviceGlueProxyPrivate*"/>
      </field>
    </class>
    <record name="DeviceGlueProxyClass"
            c:type="UpDeviceGlueProxyClass"
            glib:is-gtype-struct-for="DeviceGlueProxy">
      <doc xml:space="preserve">Class structure for #UpDeviceGlueProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="DeviceGlueProxyPrivate"
            c:type="UpDeviceGlueProxyPrivate"
            disguised="1">
    </record>
    <class name="DeviceGlueSkeleton"
           c:symbol-prefix="device_glue_skeleton"
           c:type="UpDeviceGlueSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UpDeviceGlueSkeleton"
           glib:get-type="up_device_glue_skeleton_get_type"
           glib:type-struct="DeviceGlueSkeletonClass">
      <doc xml:space="preserve">The #UpDeviceGlueSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="DeviceGlue"/>
      <constructor name="new" c:identifier="up_device_glue_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="DeviceGlueSkeleton" c:type="UpDeviceGlue*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="DeviceGlueSkeletonPrivate"
              c:type="UpDeviceGlueSkeletonPrivate*"/>
      </field>
    </class>
    <record name="DeviceGlueSkeletonClass"
            c:type="UpDeviceGlueSkeletonClass"
            glib:is-gtype-struct-for="DeviceGlueSkeleton">
      <doc xml:space="preserve">Class structure for #UpDeviceGlueSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="DeviceGlueSkeletonPrivate"
            c:type="UpDeviceGlueSkeletonPrivate"
            disguised="1">
    </record>
    <enumeration name="DeviceKind" c:type="UpDeviceKind">
      <doc xml:space="preserve">The device type.</doc>
      <member name="unknown" value="0" c:identifier="UP_DEVICE_KIND_UNKNOWN">
      </member>
      <member name="line_power"
              value="1"
              c:identifier="UP_DEVICE_KIND_LINE_POWER">
      </member>
      <member name="battery" value="2" c:identifier="UP_DEVICE_KIND_BATTERY">
      </member>
      <member name="ups" value="3" c:identifier="UP_DEVICE_KIND_UPS">
      </member>
      <member name="monitor" value="4" c:identifier="UP_DEVICE_KIND_MONITOR">
      </member>
      <member name="mouse" value="5" c:identifier="UP_DEVICE_KIND_MOUSE">
      </member>
      <member name="keyboard" value="6" c:identifier="UP_DEVICE_KIND_KEYBOARD">
      </member>
      <member name="pda" value="7" c:identifier="UP_DEVICE_KIND_PDA">
      </member>
      <member name="phone" value="8" c:identifier="UP_DEVICE_KIND_PHONE">
      </member>
      <member name="media_player"
              value="9"
              c:identifier="UP_DEVICE_KIND_MEDIA_PLAYER">
      </member>
      <member name="tablet" value="10" c:identifier="UP_DEVICE_KIND_TABLET">
      </member>
      <member name="computer"
              value="11"
              c:identifier="UP_DEVICE_KIND_COMPUTER">
      </member>
      <member name="last" value="12" c:identifier="UP_DEVICE_KIND_LAST">
      </member>
    </enumeration>
    <enumeration name="DeviceLevel" c:type="UpDeviceLevel">
      <doc xml:space="preserve">The warning level of a battery.</doc>
      <member name="unknown" value="0" c:identifier="UP_DEVICE_LEVEL_UNKNOWN">
      </member>
      <member name="none" value="1" c:identifier="UP_DEVICE_LEVEL_NONE">
      </member>
      <member name="discharging"
              value="2"
              c:identifier="UP_DEVICE_LEVEL_DISCHARGING">
      </member>
      <member name="low" value="3" c:identifier="UP_DEVICE_LEVEL_LOW">
      </member>
      <member name="critical"
              value="4"
              c:identifier="UP_DEVICE_LEVEL_CRITICAL">
      </member>
      <member name="action" value="5" c:identifier="UP_DEVICE_LEVEL_ACTION">
      </member>
      <member name="last" value="6" c:identifier="UP_DEVICE_LEVEL_LAST">
      </member>
    </enumeration>
    <record name="DevicePrivate" c:type="UpDevicePrivate" disguised="1">
      <doc xml:space="preserve">Private #PkDevice data</doc>
    </record>
    <enumeration name="DeviceState" c:type="UpDeviceState">
      <doc xml:space="preserve">The device state.</doc>
      <member name="unknown" value="0" c:identifier="UP_DEVICE_STATE_UNKNOWN">
      </member>
      <member name="charging"
              value="1"
              c:identifier="UP_DEVICE_STATE_CHARGING">
      </member>
      <member name="discharging"
              value="2"
              c:identifier="UP_DEVICE_STATE_DISCHARGING">
      </member>
      <member name="empty" value="3" c:identifier="UP_DEVICE_STATE_EMPTY">
      </member>
      <member name="fully_charged"
              value="4"
              c:identifier="UP_DEVICE_STATE_FULLY_CHARGED">
      </member>
      <member name="pending_charge"
              value="5"
              c:identifier="UP_DEVICE_STATE_PENDING_CHARGE">
      </member>
      <member name="pending_discharge"
              value="6"
              c:identifier="UP_DEVICE_STATE_PENDING_DISCHARGE">
      </member>
      <member name="last" value="7" c:identifier="UP_DEVICE_STATE_LAST">
      </member>
    </enumeration>
    <enumeration name="DeviceTechnology" c:type="UpDeviceTechnology">
      <doc xml:space="preserve">The device technology.</doc>
      <member name="unknown"
              value="0"
              c:identifier="UP_DEVICE_TECHNOLOGY_UNKNOWN">
      </member>
      <member name="lithium_ion"
              value="1"
              c:identifier="UP_DEVICE_TECHNOLOGY_LITHIUM_ION">
      </member>
      <member name="lithium_polymer"
              value="2"
              c:identifier="UP_DEVICE_TECHNOLOGY_LITHIUM_POLYMER">
      </member>
      <member name="lithium_iron_phosphate"
              value="3"
              c:identifier="UP_DEVICE_TECHNOLOGY_LITHIUM_IRON_PHOSPHATE">
      </member>
      <member name="lead_acid"
              value="4"
              c:identifier="UP_DEVICE_TECHNOLOGY_LEAD_ACID">
      </member>
      <member name="nickel_cadmium"
              value="5"
              c:identifier="UP_DEVICE_TECHNOLOGY_NICKEL_CADMIUM">
      </member>
      <member name="nickel_metal_hydride"
              value="6"
              c:identifier="UP_DEVICE_TECHNOLOGY_NICKEL_METAL_HYDRIDE">
      </member>
      <member name="last" value="7" c:identifier="UP_DEVICE_TECHNOLOGY_LAST">
      </member>
    </enumeration>
    <class name="HistoryItem"
           c:symbol-prefix="history_item"
           c:type="UpHistoryItem"
           parent="GObject.Object"
           glib:type-name="UpHistoryItem"
           glib:get-type="up_history_item_get_type"
           glib:type-struct="HistoryItemClass">
      <constructor name="new"
                   c:identifier="up_history_item_new"
                   version="0.9.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new UpHistoryItem object.</doc>
          <type name="HistoryItem" c:type="UpHistoryItem*"/>
        </return-value>
      </constructor>
      <method name="get_state"
              c:identifier="up_history_item_get_state"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item state.</doc>
        <return-value transfer-ownership="none">
          <type name="DeviceState" c:type="UpDeviceState"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_time"
              c:identifier="up_history_item_get_time"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item time.</doc>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="up_history_item_get_value"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item value.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_from_string"
              c:identifier="up_history_item_set_from_string"
              version="0.9.1">
        <doc xml:space="preserve">Converts the history item to a string representation.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
          <parameter name="text" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_state"
              c:identifier="up_history_item_set_state"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item state.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="DeviceState" c:type="UpDeviceState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time"
              c:identifier="up_history_item_set_time"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item time.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
          <parameter name="time" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_to_present"
              c:identifier="up_history_item_set_time_to_present"
              version="0.9.1">
        <doc xml:space="preserve">Sets the item time to the present value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="up_history_item_set_value"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="up_history_item_to_string"
              version="0.9.1">
        <doc xml:space="preserve">Converts the history item to a string representation.</doc>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="history_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpHistoryItem</doc>
            <type name="HistoryItem" c:type="UpHistoryItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="state"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="time"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="value"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="HistoryItemPrivate" c:type="UpHistoryItemPrivate*"/>
      </field>
    </class>
    <record name="HistoryItemClass"
            c:type="UpHistoryItemClass"
            glib:is-gtype-struct-for="HistoryItem">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="HistoryItemPrivate"
            c:type="UpHistoryItemPrivate"
            disguised="1">
    </record>
    <constant name="MAJOR_VERSION" value="0" c:type="UP_MAJOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MICRO_VERSION" value="1" c:type="UP_MICRO_VERSION">
      <doc xml:space="preserve">The compile-time micro version</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="99" c:type="UP_MINOR_VERSION">
      <type name="gint" c:type="gint"/>
    </constant>
    <class name="StatsItem"
           c:symbol-prefix="stats_item"
           c:type="UpStatsItem"
           parent="GObject.Object"
           glib:type-name="UpStatsItem"
           glib:get-type="up_stats_item_get_type"
           glib:type-struct="StatsItemClass">
      <constructor name="new" c:identifier="up_stats_item_new" version="0.9.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new UpStatsItem object.</doc>
          <type name="StatsItem" c:type="UpStatsItem*"/>
        </return-value>
      </constructor>
      <method name="get_accuracy"
              c:identifier="up_stats_item_get_accuracy"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item accuracy.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="stats_item" transfer-ownership="none">
            <type name="StatsItem" c:type="UpStatsItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="up_stats_item_get_value"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item value.</doc>
        <return-value transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="stats_item" transfer-ownership="none">
            <type name="StatsItem" c:type="UpStatsItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_accuracy"
              c:identifier="up_stats_item_set_accuracy"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item accuracy.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stats_item" transfer-ownership="none">
            <type name="StatsItem" c:type="UpStatsItem*"/>
          </instance-parameter>
          <parameter name="accuracy" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="up_stats_item_set_value"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stats_item" transfer-ownership="none">
            <type name="StatsItem" c:type="UpStatsItem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="accuracy"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="value"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StatsItemPrivate" c:type="UpStatsItemPrivate*"/>
      </field>
    </class>
    <record name="StatsItemClass"
            c:type="UpStatsItemClass"
            glib:is-gtype-struct-for="StatsItem">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="StatsItemPrivate" c:type="UpStatsItemPrivate" disguised="1">
    </record>
    <class name="WakeupItem"
           c:symbol-prefix="wakeup_item"
           c:type="UpWakeupItem"
           parent="GObject.Object"
           glib:type-name="UpWakeupItem"
           glib:get-type="up_wakeup_item_get_type"
           glib:type-struct="WakeupItemClass">
      <constructor name="new"
                   c:identifier="up_wakeup_item_new"
                   version="0.9.0">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">a new UpWakeupItem object.</doc>
          <type name="WakeupItem" c:type="UpWakeupItem*"/>
        </return-value>
      </constructor>
      <method name="get_cmdline"
              c:identifier="up_wakeup_item_get_cmdline"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item cmdline.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_details"
              c:identifier="up_wakeup_item_get_details"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item details.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="up_wakeup_item_get_id"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item id.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_userspace"
              c:identifier="up_wakeup_item_get_is_userspace"
              version="0.9.0">
        <doc xml:space="preserve">Gets if the item is userspace.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_old"
              c:identifier="up_wakeup_item_get_old"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item old.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="up_wakeup_item_get_value"
              version="0.9.0">
        <doc xml:space="preserve">Gets the item value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">the value</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cmdline"
              c:identifier="up_wakeup_item_set_cmdline"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item cmdline.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
          <parameter name="cmdline" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_details"
              c:identifier="up_wakeup_item_set_details"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item details.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
          <parameter name="details" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_id"
              c:identifier="up_wakeup_item_set_id"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item id.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_userspace"
              c:identifier="up_wakeup_item_set_is_userspace"
              version="0.9.0">
        <doc xml:space="preserve">Sets if the item is userspace.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
          <parameter name="is_userspace" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_old"
              c:identifier="up_wakeup_item_set_old"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item old.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
          <parameter name="old" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="up_wakeup_item_set_value"
              version="0.9.0">
        <doc xml:space="preserve">Sets the item value.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeup_item" transfer-ownership="none">
            <doc xml:space="preserve">#UpWakeupItem</doc>
            <type name="WakeupItem" c:type="UpWakeupItem*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">the new value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="cmdline"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="details"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="id"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="is-userspace"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="old"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="value"
                version="0.9.0"
                writable="1"
                transfer-ownership="none">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WakeupItemPrivate" c:type="UpWakeupItemPrivate*"/>
      </field>
    </class>
    <record name="WakeupItemClass"
            c:type="UpWakeupItemClass"
            glib:is-gtype-struct-for="WakeupItem">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="WakeupItemPrivate"
            c:type="UpWakeupItemPrivate"
            disguised="1">
    </record>
    <class name="Wakeups"
           c:symbol-prefix="wakeups"
           c:type="UpWakeups"
           parent="GObject.Object"
           glib:type-name="UpWakeups"
           glib:get-type="up_wakeups_get_type"
           glib:type-struct="WakeupsClass">
      <constructor name="new" c:identifier="up_wakeups_new" version="0.9.1">
        <doc xml:space="preserve">Gets a new object to allow querying the wakeups data from the server.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">the a new @UpWakeups object.</doc>
          <type name="Wakeups" c:type="UpWakeups*"/>
        </return-value>
      </constructor>
      <virtual-method name="data_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeups" transfer-ownership="none">
            <type name="Wakeups" c:type="UpWakeups*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="total_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeups" transfer-ownership="none">
            <type name="Wakeups" c:type="UpWakeups*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_data_sync"
              c:identifier="up_wakeups_get_data_sync"
              version="0.9.1"
              throws="1">
        <doc xml:space="preserve">Gets the wakeups data from the daemon.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">an array of %UpWakeupItem's</doc>
          <array name="GLib.PtrArray" c:type="GPtrArray*">
            <type name="WakeupItem"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="wakeups" transfer-ownership="none">
            <doc xml:space="preserve">a #UpWakeups instance.</doc>
            <type name="Wakeups" c:type="UpWakeups*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_capability"
              c:identifier="up_wakeups_get_has_capability"
              version="0.9.1">
        <doc xml:space="preserve">Returns if the daemon supports getting the wakeup data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeups" transfer-ownership="none">
            <doc xml:space="preserve">a #UpWakeups instance.</doc>
            <type name="Wakeups" c:type="UpWakeups*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_properties_sync"
              c:identifier="up_wakeups_get_properties_sync"
              version="0.9.1"
              throws="1">
        <doc xml:space="preserve">Gets properties from the daemon about wakeup data.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if supported</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeups" transfer-ownership="none">
            <doc xml:space="preserve">a #UpWakeups instance.</doc>
            <type name="Wakeups" c:type="UpWakeups*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_total_sync"
              c:identifier="up_wakeups_get_total_sync"
              version="0.9.1"
              throws="1">
        <doc xml:space="preserve">Gets the the total number of wakeups per second from the daemon.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">number of wakeups per second.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="wakeups" transfer-ownership="none">
            <doc xml:space="preserve">a #UpWakeups instance.</doc>
            <type name="Wakeups" c:type="UpWakeups*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">a #GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="WakeupsPrivate" c:type="UpWakeupsPrivate*"/>
      </field>
      <glib:signal name="data-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="total-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="WakeupsClass"
            c:type="UpWakeupsClass"
            glib:is-gtype-struct-for="Wakeups">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="data_changed">
        <callback name="data_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wakeups" transfer-ownership="none">
              <type name="Wakeups" c:type="UpWakeups*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="total_changed">
        <callback name="total_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="wakeups" transfer-ownership="none">
              <type name="Wakeups" c:type="UpWakeups*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <interface name="WakeupsGlue"
               c:symbol-prefix="wakeups_glue"
               c:type="UpWakeupsGlue"
               glib:type-name="UpWakeupsGlue"
               glib:get-type="up_wakeups_glue_get_type"
               glib:type-struct="WakeupsGlueIface">
      <doc xml:space="preserve">Abstract interface type for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt;.</doc>
      <function name="interface_info"
                c:identifier="up_wakeups_glue_interface_info">
        <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt; D-Bus interface.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
          <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
        </return-value>
      </function>
      <function name="override_properties"
                c:identifier="up_wakeups_glue_override_properties">
        <doc xml:space="preserve">Overrides all #GObject properties in the #UpWakeupsGlue interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The last property id.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <parameter name="klass" transfer-ownership="none">
            <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
            <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
          </parameter>
          <parameter name="property_id_begin" transfer-ownership="none">
            <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="data_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_has_capability"
                      invoker="get_has_capability"
                      introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Wakeups.HasCapability"&gt;"HasCapability"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_data">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="handle_get_total">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="none">
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="total_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="call_get_data"
              c:identifier="up_wakeups_glue_call_get_data">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetData"&gt;GetData()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_wakeups_glue_call_get_data_finish() to get the result of the operation.

See up_wakeups_glue_call_get_data_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlueProxy.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_data_finish"
              c:identifier="up_wakeups_glue_call_get_data_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_wakeups_glue_call_get_data().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlueProxy.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_wakeups_glue_call_get_data().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_data_sync"
              c:identifier="up_wakeups_glue_call_get_data_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetData"&gt;GetData()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_wakeups_glue_call_get_data() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlueProxy.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="out_data"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="GLib.Variant" c:type="GVariant**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_total"
              c:identifier="up_wakeups_glue_call_get_total">
        <doc xml:space="preserve">Asynchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetTotal"&gt;GetTotal()&lt;/link&gt; D-Bus method on @proxy.
When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_wakeups_glue_call_get_total_finish() to get the result of the operation.

See up_wakeups_glue_call_get_total_sync() for the synchronous, blocking version of this method.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlueProxy.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied or %NULL.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_total_finish"
              c:identifier="up_wakeups_glue_call_get_total_finish"
              throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_wakeups_glue_call_get_total().</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlueProxy.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_wakeups_glue_call_get_total().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_get_total_sync"
              c:identifier="up_wakeups_glue_call_get_total_sync"
              throws="1">
        <doc xml:space="preserve">Synchronously invokes the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetTotal"&gt;GetTotal()&lt;/link&gt; D-Bus method on @proxy. The calling thread is blocked until a reply is received.

See up_wakeups_glue_call_get_total() for the asynchronous version of this method.</doc>
        <return-value transfer-ownership="none" skip="1">
          <doc xml:space="preserve">%TRUE if the call succeded, %FALSE if @error is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlueProxy.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="out_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve">Return location for return parameter or %NULL to ignore.</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_data"
              c:identifier="up_wakeups_glue_complete_get_data">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetData"&gt;GetData()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="GLib.Variant" c:type="GVariant*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_get_total"
              c:identifier="up_wakeups_glue_complete_get_total">
        <doc xml:space="preserve">Helper function used in service implementations to finish handling invocations of the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetTotal"&gt;GetTotal()&lt;/link&gt; D-Bus method. If you instead want to finish handling an invocation by returning an error, use g_dbus_method_invocation_return_error() or similar.

This method will free @invocation, you cannot use it afterwards.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="invocation" transfer-ownership="full">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"
                  c:type="GDBusMethodInvocation*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Parameter to return.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="emit_data_changed"
              c:identifier="up_wakeups_glue_emit_data_changed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UPower-Wakeups.DataChanged"&gt;"DataChanged"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_total_changed"
              c:identifier="up_wakeups_glue_emit_total_changed">
        <doc xml:space="preserve">Emits the &lt;link linkend="gdbus-signal-org-freedesktop-UPower-Wakeups.TotalChanged"&gt;"TotalChanged"&lt;/link&gt; D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument to pass with the signal.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_has_capability"
              c:identifier="up_wakeups_glue_get_has_capability"
              introspectable="0">
        <doc xml:space="preserve">Gets the value of the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Wakeups.HasCapability"&gt;"HasCapability"&lt;/link&gt; D-Bus property.

Since this D-Bus property is readable, it is meaningful to use this function on both the client- and service-side.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The property value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_has_capability"
              c:identifier="up_wakeups_glue_set_has_capability"
              introspectable="0">
        <doc xml:space="preserve">Sets the &lt;link linkend="gdbus-property-org-freedesktop-UPower-Wakeups.HasCapability"&gt;"HasCapability"&lt;/link&gt; D-Bus property to @value.

Since this D-Bus property is not writable, it is only meaningful to use this function on the service-side.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
            <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The value to set.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="has-capability" writable="1" transfer-ownership="none">
        <doc xml:space="preserve">Represents the D-Bus property &lt;link linkend="gdbus-property-org-freedesktop-UPower-Wakeups.HasCapability"&gt;"HasCapability"&lt;/link&gt;.

Since the D-Bus property for this #GObject property is readable but not writable, it is meaningful to read from it on both the client- and service-side. It is only meaningful, however, to write to it on the service-side.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="data-changed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UPower-Wakeups.DataChanged"&gt;"DataChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="handle-get-data" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetData"&gt;GetData()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_wakeups_glue_complete_get_data() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="handle-get-total" when="last">
        <doc xml:space="preserve">Signal emitted when a remote caller is invoking the &lt;link linkend="gdbus-method-org-freedesktop-UPower-Wakeups.GetTotal"&gt;GetTotal()&lt;/link&gt; D-Bus method.

If a signal handler returns %TRUE, it means the signal handler will handle the invocation (e.g. take a reference to @invocation and eventually call up_wakeups_glue_complete_get_total() or e.g. g_dbus_method_invocation_return_error() on it) and no order signal handlers will run. If no signal handler handles the invocation, the %G_DBUS_ERROR_UNKNOWN_METHOD error is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the invocation was handled, %FALSE to let other signal handlers run.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="invocation" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusMethodInvocation.</doc>
            <type name="Gio.DBusMethodInvocation"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="total-changed" when="last">
        <doc xml:space="preserve">On the client-side, this signal is emitted whenever the D-Bus signal &lt;link linkend="gdbus-signal-org-freedesktop-UPower-Wakeups.TotalChanged"&gt;"TotalChanged"&lt;/link&gt; is received.

On the service-side, this signal can be used with e.g. g_signal_emit_by_name() to make the object emit the D-Bus signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="arg_value" transfer-ownership="none">
            <doc xml:space="preserve">Argument.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="WakeupsGlueIface"
            c:type="UpWakeupsGlueIface"
            glib:is-gtype-struct-for="WakeupsGlue">
      <doc xml:space="preserve">Virtual table for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt;.</doc>
      <field name="parent_iface">
        <doc xml:space="preserve">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="handle_get_data">
        <callback name="handle_get_data">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="handle_get_total">
        <callback name="handle_get_total">
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
            </parameter>
            <parameter name="invocation" transfer-ownership="none">
              <type name="Gio.DBusMethodInvocation"
                    c:type="GDBusMethodInvocation*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_has_capability">
        <callback name="get_has_capability">
          <return-value transfer-ownership="none">
            <doc xml:space="preserve">The property value.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <doc xml:space="preserve">A #UpWakeupsGlue.</doc>
              <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="data_changed">
        <callback name="data_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="total_changed">
        <callback name="total_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="object" transfer-ownership="none">
              <type name="WakeupsGlue" c:type="UpWakeupsGlue*"/>
            </parameter>
            <parameter name="arg_value" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="WakeupsGlueProxy"
           c:symbol-prefix="wakeups_glue_proxy"
           c:type="UpWakeupsGlueProxy"
           parent="Gio.DBusProxy"
           glib:type-name="UpWakeupsGlueProxy"
           glib:get-type="up_wakeups_glue_proxy_get_type"
           glib:type-struct="WakeupsGlueProxyClass">
      <doc xml:space="preserve">The #UpWakeupsGlueProxy structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.DBusInterface"/>
      <implements name="Gio.Initable"/>
      <implements name="WakeupsGlue"/>
      <constructor name="new_finish"
                   c:identifier="up_wakeups_glue_proxy_new_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_wakeups_glue_proxy_new().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WakeupsGlueProxy" c:type="UpWakeupsGlue*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_wakeups_glue_proxy_new().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_finish"
                   c:identifier="up_wakeups_glue_proxy_new_for_bus_finish"
                   throws="1">
        <doc xml:space="preserve">Finishes an operation started with up_wakeups_glue_proxy_new_for_bus().</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WakeupsGlueProxy" c:type="UpWakeupsGlue*"/>
        </return-value>
        <parameters>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">The #GAsyncResult obtained from the #GAsyncReadyCallback passed to up_wakeups_glue_proxy_new_for_bus().</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_bus_sync"
                   c:identifier="up_wakeups_glue_proxy_new_for_bus_sync"
                   throws="1">
        <doc xml:space="preserve">Like up_wakeups_glue_proxy_new_sync() but takes a #GBusType instead of a #GDBusConnection.

The calling thread is blocked until a reply is received.

See up_wakeups_glue_proxy_new_for_bus() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WakeupsGlueProxy" c:type="UpWakeupsGlue*"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="up_wakeups_glue_proxy_new_sync"
                   throws="1">
        <doc xml:space="preserve">Synchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt;. See g_dbus_proxy_new_sync() for more details.

The calling thread is blocked until a reply is received.

See up_wakeups_glue_proxy_new() for the asynchronous version of this constructor.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The constructed proxy object or %NULL if @error is set.</doc>
          <type name="WakeupsGlueProxy" c:type="UpWakeupsGlue*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="new" c:identifier="up_wakeups_glue_proxy_new">
        <doc xml:space="preserve">Asynchronously creates a proxy for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt;. See g_dbus_proxy_new() for more details.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_wakeups_glue_proxy_new_finish() to get the result of the operation.

See up_wakeups_glue_proxy_new_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve">A #GDBusConnection.</doc>
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A bus name (well-known or unique) or %NULL if @connection is not a message bus connection.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new_for_bus"
                c:identifier="up_wakeups_glue_proxy_new_for_bus">
        <doc xml:space="preserve">Like up_wakeups_glue_proxy_new() but takes a #GBusType instead of a #GDBusConnection.

When the operation is finished, @callback will be invoked in the &lt;link linkend="g-main-context-push-thread-default"&gt;thread-default main loop&lt;/link&gt; of the thread you are calling this method from.
You can then call up_wakeups_glue_proxy_new_for_bus_finish() to get the result of the operation.

See up_wakeups_glue_proxy_new_for_bus_sync() for the synchronous, blocking version of this constructor.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="bus_type" transfer-ownership="none">
            <doc xml:space="preserve">A #GBusType.</doc>
            <type name="Gio.BusType" c:type="GBusType"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags from the #GDBusProxyFlags enumeration.</doc>
            <type name="Gio.DBusProxyFlags" c:type="GDBusProxyFlags"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">A bus name (well-known or unique).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="object_path" transfer-ownership="none">
            <doc xml:space="preserve">An object path.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve">A #GAsyncReadyCallback to call when the request is satisfied.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data" transfer-ownership="none">
            <doc xml:space="preserve">User data to pass to @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusProxy" c:type="GDBusProxy"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WakeupsGlueProxyPrivate"
              c:type="UpWakeupsGlueProxyPrivate*"/>
      </field>
    </class>
    <record name="WakeupsGlueProxyClass"
            c:type="UpWakeupsGlueProxyClass"
            glib:is-gtype-struct-for="WakeupsGlueProxy">
      <doc xml:space="preserve">Class structure for #UpWakeupsGlueProxy.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusProxyClass" c:type="GDBusProxyClass"/>
      </field>
    </record>
    <record name="WakeupsGlueProxyPrivate"
            c:type="UpWakeupsGlueProxyPrivate"
            disguised="1">
    </record>
    <class name="WakeupsGlueSkeleton"
           c:symbol-prefix="wakeups_glue_skeleton"
           c:type="UpWakeupsGlueSkeleton"
           parent="Gio.DBusInterfaceSkeleton"
           glib:type-name="UpWakeupsGlueSkeleton"
           glib:get-type="up_wakeups_glue_skeleton_get_type"
           glib:type-struct="WakeupsGlueSkeletonClass">
      <doc xml:space="preserve">The #UpWakeupsGlueSkeleton structure contains only private data and should only be accessed using the provided API.</doc>
      <implements name="Gio.DBusInterface"/>
      <implements name="WakeupsGlue"/>
      <constructor name="new" c:identifier="up_wakeups_glue_skeleton_new">
        <doc xml:space="preserve">Creates a skeleton object for the D-Bus interface &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt;.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The skeleton object.</doc>
          <type name="WakeupsGlueSkeleton" c:type="UpWakeupsGlue*"/>
        </return-value>
      </constructor>
      <field name="parent_instance" readable="0" private="1">
        <type name="Gio.DBusInterfaceSkeleton"
              c:type="GDBusInterfaceSkeleton"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WakeupsGlueSkeletonPrivate"
              c:type="UpWakeupsGlueSkeletonPrivate*"/>
      </field>
    </class>
    <record name="WakeupsGlueSkeletonClass"
            c:type="UpWakeupsGlueSkeletonClass"
            glib:is-gtype-struct-for="WakeupsGlueSkeleton">
      <doc xml:space="preserve">Class structure for #UpWakeupsGlueSkeleton.</doc>
      <field name="parent_class">
        <doc xml:space="preserve">The parent class.</doc>
        <type name="Gio.DBusInterfaceSkeletonClass"
              c:type="GDBusInterfaceSkeletonClass"/>
      </field>
    </record>
    <record name="WakeupsGlueSkeletonPrivate"
            c:type="UpWakeupsGlueSkeletonPrivate"
            disguised="1">
    </record>
    <record name="WakeupsPrivate" c:type="UpWakeupsPrivate" disguised="1">
    </record>
    <function name="client_glue_interface_info"
              c:identifier="up_client_glue_interface_info"
              moved-to="ClientGlue.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UPower.top_of_page"&gt;org.freedesktop.UPower&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="client_glue_override_properties"
              c:identifier="up_client_glue_override_properties"
              moved-to="ClientGlue.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UpClientGlue interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_glue_interface_info"
              c:identifier="up_device_glue_interface_info"
              moved-to="DeviceGlue.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Device.top_of_page"&gt;org.freedesktop.UPower.Device&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="device_glue_override_properties"
              c:identifier="up_device_glue_override_properties"
              moved-to="DeviceGlue.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UpDeviceGlue interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="wakeups_glue_interface_info"
              c:identifier="up_wakeups_glue_interface_info"
              moved-to="WakeupsGlue.interface_info">
      <doc xml:space="preserve">Gets a machine-readable description of the &lt;link linkend="gdbus-interface-org-freedesktop-UPower-Wakeups.top_of_page"&gt;org.freedesktop.UPower.Wakeups&lt;/link&gt; D-Bus interface.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #GDBusInterfaceInfo. Do not free.</doc>
        <type name="Gio.DBusInterfaceInfo" c:type="GDBusInterfaceInfo*"/>
      </return-value>
    </function>
    <function name="wakeups_glue_override_properties"
              c:identifier="up_wakeups_glue_override_properties"
              moved-to="WakeupsGlue.override_properties">
      <doc xml:space="preserve">Overrides all #GObject properties in the #UpWakeupsGlue interface for a concrete class.
The properties are overridden in the order they are defined.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">The last property id.</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="klass" transfer-ownership="none">
          <doc xml:space="preserve">The class structure for a #GObject&lt;!-- --&gt;-derived class.</doc>
          <type name="GObject.ObjectClass" c:type="GObjectClass*"/>
        </parameter>
        <parameter name="property_id_begin" transfer-ownership="none">
          <doc xml:space="preserve">The property id to assign to the first overridden property.</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
