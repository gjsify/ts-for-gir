<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="LibvirtGObject" version="1.0"/>
  <package name="libvirt-sandbox-1.0"/>
  <c:include name="libvirt-sandbox/libvirt-sandbox.h"/>
  <namespace name="LibvirtSandbox"
             version="1.0"
             shared-library="libvirt-sandbox-1.0.so.5"
             c:identifier-prefixes="GVirSandbox"
             c:symbol-prefixes="gvir_sandbox">
    <function-macro name="BUILDER"
                    c:identifier="GVIR_SANDBOX_BUILDER"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_CONTAINER"
                    c:identifier="GVIR_SANDBOX_BUILDER_CONTAINER"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_CONTAINER_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_CONTAINER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_CONTAINER_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_CONTAINER_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_INITRD"
                    c:identifier="GVIR_SANDBOX_BUILDER_INITRD"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_INITRD_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_INITRD_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_INITRD_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_INITRD_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_MACHINE"
                    c:identifier="GVIR_SANDBOX_BUILDER_MACHINE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_MACHINE_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_MACHINE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="BUILDER_MACHINE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_BUILDER_MACHINE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Builder"
           c:symbol-prefix="builder"
           c:type="GVirSandboxBuilder"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GVirSandboxBuilder"
           glib:get-type="gvir_sandbox_builder_get_type"
           glib:type-struct="BuilderClass">
      <source-position filename="libvirt-sandbox-builder.h" line="104"/>
      <function name="for_connection"
                c:identifier="gvir_sandbox_builder_for_connection"
                throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="207">Find and instantiate a suitable builder for sandboxes to be hosted
under the @connection.</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="215">a new builder or NULL</doc>
          <type name="Builder" c:type="GVirSandboxBuilder*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="209">the connection to host the sandbox</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="clean_post_start"
                      invoker="clean_post_start"
                      throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="677">Cleanup temporary files which are not required once the sandbox
has been started.</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="686">TRUE on success, FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="679">the sandbox builder</doc>
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="680">the sandbox configuration</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="clean_post_stop"
                      invoker="clean_post_stop"
                      throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="699">Cleanup temporary files which are not required once the sandbox
has been started.</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="708">TRUE on success, FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="701">the sandbox builder</doc>
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="702">the sandbox configuration</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_basic" throws="1">
        <source-position filename="libvirt-sandbox-builder.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_devices" throws="1">
        <source-position filename="libvirt-sandbox-builder.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_domain" throws="1">
        <source-position filename="libvirt-sandbox-builder.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_features" throws="1">
        <source-position filename="libvirt-sandbox-builder.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_os" throws="1">
        <source-position filename="libvirt-sandbox-builder.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="construct_security" throws="1">
        <source-position filename="libvirt-sandbox-builder.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_disk_prefix">
        <source-position filename="libvirt-sandbox-builder.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="disk" transfer-ownership="none">
            <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_files_to_copy" introspectable="0">
        <source-position filename="libvirt-sandbox-builder.h" line="100"/>
        <return-value>
          <type name="GLib.List" c:type="GList*">
            <type name="gpointer" c:type="gpointer"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clean_post_start"
              c:identifier="gvir_sandbox_builder_clean_post_start"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="677">Cleanup temporary files which are not required once the sandbox
has been started.</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="686">TRUE on success, FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="679">the sandbox builder</doc>
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="680">the sandbox configuration</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clean_post_stop"
              c:identifier="gvir_sandbox_builder_clean_post_stop"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="699">Cleanup temporary files which are not required once the sandbox
has been started.</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="708">TRUE on success, FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="701">the sandbox builder</doc>
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="702">the sandbox configuration</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="construct"
              c:identifier="gvir_sandbox_builder_construct"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="650">Create a domain configuration from the sandbox configuration</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="658">the newly built domain configuration</doc>
          <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="652">the sandbox builder</doc>
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="653">the sandbox configuration</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </parameter>
          <parameter name="statedir" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="gvir_sandbox_builder_get_connection"
              glib:get-property="connection">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder.c"
             line="238">Retrieves the sandbox connection</doc>
        <source-position filename="libvirt-sandbox-builder.h" line="111"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder.c"
               line="244">the current connection</doc>
          <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="240">the sandbox builder</doc>
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_filterref"
              c:identifier="gvir_sandbox_builder_set_filterref">
        <source-position filename="libvirt-sandbox-builder-private.h"
                         line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="Builder" c:type="GVirSandboxBuilder*"/>
          </instance-parameter>
          <parameter name="iface" transfer-ownership="none">
            <type name="LibvirtGConfig.DomainInterface"
                  c:type="GVirConfigDomainInterface*"/>
          </parameter>
          <parameter name="filterref" transfer-ownership="none">
            <type name="ConfigNetworkFilterref"
                  c:type="GVirSandboxConfigNetworkFilterref*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_connection">
        <type name="LibvirtGObject.Connection"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BuilderPrivate" c:type="GVirSandboxBuilderPrivate*"/>
      </field>
    </class>
    <record name="BuilderClass"
            c:type="GVirSandboxBuilderClass"
            glib:is-gtype-struct-for="Builder">
      <source-position filename="libvirt-sandbox-builder.h" line="104"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="construct_basic">
        <callback name="construct_basic" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_os">
        <callback name="construct_os" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_features">
        <callback name="construct_features" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_devices">
        <callback name="construct_devices" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_security">
        <callback name="construct_security" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="78"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="construct_domain">
        <callback name="construct_domain" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="domain" transfer-ownership="none">
              <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clean_post_start">
        <callback name="clean_post_start" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="89"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="686">TRUE on success, FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libvirt-sandbox-builder.c"
                   line="679">the sandbox builder</doc>
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libvirt-sandbox-builder.c"
                   line="680">the sandbox configuration</doc>
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="clean_post_stop">
        <callback name="clean_post_stop" throws="1">
          <source-position filename="libvirt-sandbox-builder.h" line="93"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder.c"
                 line="708">TRUE on success, FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libvirt-sandbox-builder.c"
                   line="701">the sandbox builder</doc>
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libvirt-sandbox-builder.c"
                   line="702">the sandbox configuration</doc>
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="statedir" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_disk_prefix">
        <callback name="get_disk_prefix">
          <source-position filename="libvirt-sandbox-builder.h" line="97"/>
          <return-value transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="disk" transfer-ownership="none">
              <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_files_to_copy" introspectable="0">
        <callback name="get_files_to_copy" introspectable="0">
          <source-position filename="libvirt-sandbox-builder.h" line="100"/>
          <return-value>
            <type name="GLib.List" c:type="GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </return-value>
          <parameters>
            <parameter name="builder" transfer-ownership="none">
              <type name="Builder" c:type="GVirSandboxBuilder*"/>
            </parameter>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="BuilderContainer"
           c:symbol-prefix="builder_container"
           c:type="GVirSandboxBuilderContainer"
           parent="Builder"
           glib:type-name="GVirSandboxBuilderContainer"
           glib:get-type="gvir_sandbox_builder_container_get_type"
           glib:type-struct="BuilderContainerClass">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_builder_container_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder-container.c"
             line="487">Create a new pplication sandbox builder for containers</doc>
        <source-position filename="libvirt-sandbox-builder-container.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder-container.c"
               line="493">a new sandbox builder object</doc>
          <type name="BuilderContainer" c:type="GVirSandboxBuilderContainer*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder-container.c"
                 line="489">the connection</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Builder" c:type="GVirSandboxBuilder"/>
      </field>
      <field name="priv">
        <type name="BuilderContainerPrivate"
              c:type="GVirSandboxBuilderContainerPrivate*"/>
      </field>
    </class>
    <record name="BuilderContainerClass"
            c:type="GVirSandboxBuilderContainerClass"
            glib:is-gtype-struct-for="BuilderContainer">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="57"/>
      <field name="parent_class">
        <type name="BuilderClass" c:type="GVirSandboxBuilderClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="BuilderContainerPrivate"
            c:type="GVirSandboxBuilderContainerPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="40"/>
    </record>
    <class name="BuilderInitrd"
           c:symbol-prefix="builder_initrd"
           c:type="GVirSandboxBuilderInitrd"
           parent="GObject.Object"
           glib:type-name="GVirSandboxBuilderInitrd"
           glib:get-type="gvir_sandbox_builder_initrd_get_type"
           glib:type-struct="BuilderInitrdClass">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="57"/>
      <constructor name="new" c:identifier="gvir_sandbox_builder_initrd_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder-initrd.c"
             line="141">Create a new initrd builder</doc>
        <source-position filename="libvirt-sandbox-builder-initrd.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder-initrd.c"
               line="146">a new sandbox builder object</doc>
          <type name="BuilderInitrd" c:type="GVirSandboxBuilderInitrd*"/>
        </return-value>
      </constructor>
      <method name="construct"
              c:identifier="gvir_sandbox_builder_initrd_construct"
              throws="1">
        <source-position filename="libvirt-sandbox-builder-initrd.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="builder" transfer-ownership="none">
            <type name="BuilderInitrd" c:type="GVirSandboxBuilderInitrd*"/>
          </instance-parameter>
          <parameter name="config" transfer-ownership="none">
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </parameter>
          <parameter name="outputfile" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="BuilderInitrdPrivate"
              c:type="GVirSandboxBuilderInitrdPrivate*"/>
      </field>
    </class>
    <record name="BuilderInitrdClass"
            c:type="GVirSandboxBuilderInitrdClass"
            glib:is-gtype-struct-for="BuilderInitrd">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="57"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="BuilderInitrdPrivate"
            c:type="GVirSandboxBuilderInitrdPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="40"/>
    </record>
    <class name="BuilderMachine"
           c:symbol-prefix="builder_machine"
           c:type="GVirSandboxBuilderMachine"
           parent="Builder"
           glib:type-name="GVirSandboxBuilderMachine"
           glib:get-type="gvir_sandbox_builder_machine_get_type"
           glib:type-struct="BuilderMachineClass">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="57"/>
      <constructor name="new" c:identifier="gvir_sandbox_builder_machine_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-builder-machine.c"
             line="806">Create a new application sandbox builder for virtual machines</doc>
        <source-position filename="libvirt-sandbox-builder-machine.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-builder-machine.c"
               line="812">a new sandbox builder object</doc>
          <type name="BuilderMachine" c:type="GVirSandboxBuilderMachine*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-builder-machine.c"
                 line="808">the connection</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="Builder" c:type="GVirSandboxBuilder"/>
      </field>
      <field name="priv">
        <type name="BuilderMachinePrivate"
              c:type="GVirSandboxBuilderMachinePrivate*"/>
      </field>
    </class>
    <record name="BuilderMachineClass"
            c:type="GVirSandboxBuilderMachineClass"
            glib:is-gtype-struct-for="BuilderMachine">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="57"/>
      <field name="parent_class">
        <type name="BuilderClass" c:type="GVirSandboxBuilderClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="BuilderMachinePrivate"
            c:type="GVirSandboxBuilderMachinePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="40"/>
    </record>
    <record name="BuilderPrivate"
            c:type="GVirSandboxBuilderPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-builder.h" line="42"/>
    </record>
    <function-macro name="CONFIG"
                    c:identifier="GVIR_SANDBOX_CONFIG"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_DISK"
                    c:identifier="GVIR_SANDBOX_CONFIG_DISK"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-disk.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_DISK_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_DISK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-disk.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_DISK_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_DISK_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-disk.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_INITRD"
                    c:identifier="GVIR_SANDBOX_CONFIG_INITRD"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_INITRD_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_INITRD_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_INITRD_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_INITRD_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_INTERACTIVE"
                    c:identifier="GVIR_SANDBOX_CONFIG_INTERACTIVE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_INTERACTIVE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_INTERACTIVE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_INTERACTIVE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_INTERACTIVE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_FILE"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_FILE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_FILE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_FILE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_FILE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_FILE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_GUEST_BIND"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_GUEST_BIND"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_GUEST_BIND_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_GUEST_BIND_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_GUEST_BIND_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_GUEST_BIND_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_HOST_BIND"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_HOST_BIND"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_HOST_BIND_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_HOST_BIND_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_HOST_BIND_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_HOST_BIND_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_HOST_IMAGE"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_HOST_IMAGE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_HOST_IMAGE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_HOST_IMAGE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_HOST_IMAGE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_HOST_IMAGE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_RAM"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_RAM"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_RAM_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_RAM_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_MOUNT_RAM_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_MOUNT_RAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_ADDRESS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_ADDRESS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_ADDRESS_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_ADDRESS_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_ADDRESS_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_FILTERREF"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_FILTERREF"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_FILTERREF_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_FILTERREF_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_FILTERREF_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_FILTERREF_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_FILTERREF_PARAMETER"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_FILTERREF_PARAMETER"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_FILTERREF_PARAMETER_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_FILTERREF_PARAMETER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_FILTERREF_PARAMETER_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_FILTERREF_PARAMETER_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_ROUTE"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_ROUTE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_ROUTE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_ROUTE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_NETWORK_ROUTE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_NETWORK_ROUTE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_GENERIC"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_GENERIC"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_GENERIC_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_GENERIC_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_GENERIC_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_GENERIC_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_SYSTEMD"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_SYSTEMD"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_SYSTEMD_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_SYSTEMD_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONFIG_SERVICE_SYSTEMD_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONFIG_SERVICE_SYSTEMD_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE"
                    c:identifier="GVIR_SANDBOX_CONSOLE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONSOLE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console.h" line="37"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONSOLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_RAW"
                    c:identifier="GVIR_SANDBOX_CONSOLE_RAW"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-raw.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_RAW_CLASS"
                    c:identifier="GVIR_SANDBOX_CONSOLE_RAW_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-raw.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_RAW_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONSOLE_RAW_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-raw.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_RPC"
                    c:identifier="GVIR_SANDBOX_CONSOLE_RPC"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_RPC_CLASS"
                    c:identifier="GVIR_SANDBOX_CONSOLE_RPC_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONSOLE_RPC_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONSOLE_RPC_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT"
                    c:identifier="GVIR_SANDBOX_CONTEXT"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_CLASS"
                    c:identifier="GVIR_SANDBOX_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONTEXT_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_INTERACTIVE"
                    c:identifier="GVIR_SANDBOX_CONTEXT_INTERACTIVE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_INTERACTIVE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONTEXT_INTERACTIVE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_INTERACTIVE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONTEXT_INTERACTIVE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_SERVICE"
                    c:identifier="GVIR_SANDBOX_CONTEXT_SERVICE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-service.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_SERVICE_CLASS"
                    c:identifier="GVIR_SANDBOX_CONTEXT_SERVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-service.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONTEXT_SERVICE_GET_CLASS"
                    c:identifier="GVIR_SANDBOX_CONTEXT_SERVICE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-service.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Config"
           c:symbol-prefix="config"
           c:type="GVirSandboxConfig"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GVirSandboxConfig"
           glib:get-type="gvir_sandbox_config_get_type"
           glib:type-struct="ConfigClass">
      <source-position filename="libvirt-sandbox-config.h" line="65"/>
      <function name="load_from_data"
                c:identifier="gvir_sandbox_config_load_from_data"
                throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="2835">the new config or NULL</doc>
          <type name="Config" c:type="GVirSandboxConfig*"/>
        </return-value>
        <parameters>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="2832">the .ini data string to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_from_path"
                c:identifier="gvir_sandbox_config_load_from_path"
                throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="2811">the new config or NULL</doc>
          <type name="Config" c:type="GVirSandboxConfig*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="2808">the local path to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="get_command" invoker="get_command">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="2927">Retrieve the sandbox command and arguments</doc>
        <source-position filename="libvirt-sandbox-config.h" line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="2933">the command path and arguments</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="2929">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="load_config" throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="save_config">
        <source-position filename="libvirt-sandbox-config.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="GLib.KeyFile" c:type="GKeyFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_disk" c:identifier="gvir_sandbox_config_add_disk">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1251">Adds a new custom disk to the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1253">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="dsk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1254">the disk configuration</doc>
            <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_disk_opts"
              c:identifier="gvir_sandbox_config_add_disk_opts"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1313">Parses @disk in the format TYPE:TAG=SOURCE,format=FORMAT
creating #GVirSandboxConfigDisk instances for each element. For
example

- file:cache=/var/lib/sandbox/demo/tmp.qcow2,format=qcow2</doc>
        <source-position filename="libvirt-sandbox-config.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1315">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="disk" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1316">the disk config</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_disk_strv"
              c:identifier="gvir_sandbox_config_add_disk_strv"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1286">Parses @disks whose elements are in the format TYPE:TAG=SOURCE,format=FORMAT
creating #GVirSandboxConfigMount instances for each element. For
example

- file:cache=/var/lib/sandbox/demo/tmp.qcow2,format=qcow2</doc>
        <source-position filename="libvirt-sandbox-config.h" line="141"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1288">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="disks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1289">the list of disks</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_env" c:identifier="gvir_sandbox_config_add_env">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1154">Adds a new environment variable to the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1156">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="key" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1157">the key for environment variable</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1158">the value for environment variable</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_env_opts"
              c:identifier="gvir_sandbox_config_add_env_opts"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1211">Parses @env in the format KEY=VALUE
creating #GVirSandboxConfigEnv instances for each element. For
example

--env KEY=VALUE</doc>
        <source-position filename="libvirt-sandbox-config.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1213">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="env" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1214">the env config</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_env_strv"
              c:identifier="gvir_sandbox_config_add_env_strv"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1187">Parses @envs whose elements are in the format KEY=VALUE

--env KEY=VALUE</doc>
        <source-position filename="libvirt-sandbox-config.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1189">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="envs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1190">the list of environment variables</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_host_include_file"
              c:identifier="gvir_sandbox_config_add_host_include_file"
              throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="includefile" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_host_include_strv"
              c:identifier="gvir_sandbox_config_add_host_include_strv"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1690">Parses @includes whose elements are in the format
GUEST-TARGET=ROOT-PATH. If ROOT_PATH is omitted,
then it is assumed to be the same as GUEST-TARGET</doc>
        <source-position filename="libvirt-sandbox-config.h" line="168"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1692">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="includes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1693">the list of includes</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_mount" c:identifier="gvir_sandbox_config_add_mount">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1415">Adds a new custom mount to the sandbox, to override part of the
host filesystem</doc>
        <source-position filename="libvirt-sandbox-config.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1417">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="mnt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1418">the mount configuration</doc>
            <type name="ConfigMount" c:type="GVirSandboxConfigMount*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mount_opts"
              c:identifier="gvir_sandbox_config_add_mount_opts"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1530">Parses @mount whose elements are in the format TYPE:TARGET=SOURCE
creating #GVirSandboxConfigMount instances for each element. For
example

- host-bind:/tmp=/var/lib/sandbox/demo/tmp
- host-image:/=/var/lib/sandbox/demo.img
- host-image:/=/var/lib/sandbox/demo.qcow2,format=qcow2
- guest-bind:/home=/tmp/home
- ram:/tmp=500M</doc>
        <source-position filename="libvirt-sandbox-config.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1532">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="mount" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1533">the mount config</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_mount_strv"
              c:identifier="gvir_sandbox_config_add_mount_strv"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1501">Parses @mounts whose elements are in the format TYPE:TARGET=SOURCE
creating #GVirSandboxConfigMount instances for each element. For
example

- host-bind:/tmp=/var/lib/sandbox/demo/tmp
- host-image:/=/var/lib/sandbox/demo.img
- guest-bind:/home=/tmp/home</doc>
        <source-position filename="libvirt-sandbox-config.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1503">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="mounts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1504">the list of mounts</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="add_network"
              c:identifier="gvir_sandbox_config_add_network">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="854">Adds a new network connection to the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="856">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="857">the network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_network_opts"
              c:identifier="gvir_sandbox_config_add_network_opts"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="913">Parses @network whose elements are in the format
KEY=VALUE, creating #GVirSandboxConfigNetwork
instances for each element.

 dhcp,source=default
 source=private,address=192.168.122.1/24%192.168.122.255,
 address=192.168.122.1/24%192.168.122.255,address=2001:212::204:2/64
 route=192.168.122.255/24%192.168.1.1
 filter=clean-traffic
 filter.ip=192.168.122.1</doc>
        <source-position filename="libvirt-sandbox-config.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="915">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="916">the network config</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_network_strv"
              c:identifier="gvir_sandbox_config_add_network_strv"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="887">Parses @networks whose elements are in the format
KEY=VALUE, creating #GVirSandboxConfigNetwork
instances for each element.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="889">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="networks" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="890">the list of networks</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="find_mount" c:identifier="gvir_sandbox_config_find_mount">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1474">Finds the #GVirSandboxConfigMount object corresponding to a guest
path of @target.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="154"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1482">a mount object or NULL</doc>
          <type name="ConfigMount" c:type="GVirSandboxConfigMount*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1476">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1477">the guest target path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_arch"
              c:identifier="gvir_sandbox_config_get_arch"
              glib:get-property="arch">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="592">Retrieves the sandbox binary architecture</doc>
        <source-position filename="libvirt-sandbox-config.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="598">the current architecture</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="594">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_command"
              c:identifier="gvir_sandbox_config_get_command">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="2927">Retrieve the sandbox command and arguments</doc>
        <source-position filename="libvirt-sandbox-config.h" line="189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="2933">the command path and arguments</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="2929">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_debug" c:identifier="gvir_sandbox_config_get_debug">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1945">Retrieves the sandbox debug flag</doc>
        <source-position filename="libvirt-sandbox-config.h" line="184"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1951">the debug flag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1947">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_disks" c:identifier="gvir_sandbox_config_get_disks">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1269">Retrieves the list of custom disks in the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="140"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1275">the list of disks</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigMount"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1271">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_envs" c:identifier="gvir_sandbox_config_get_envs">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1173">Retrieves the hashtable of custom environment variables in the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="128"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1179">the hashtable of environment variables</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="gchar"/>
            <type name="gchar"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1175">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_groupid"
              c:identifier="gvir_sandbox_config_get_groupid">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="776">Get the group ID to invoke the sandbox application under.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="782">the group ID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="778">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homedir"
              c:identifier="gvir_sandbox_config_get_homedir"
              glib:get-property="homedir">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="838">Get the home directory associated with the sandbox user ID</doc>
        <source-position filename="libvirt-sandbox-config.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="844">the home directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="840">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernpath"
              c:identifier="gvir_sandbox_config_get_kernpath"
              glib:get-property="kernpath">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="654">Retrieves the sandbox kernel image path</doc>
        <source-position filename="libvirt-sandbox-config.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="660">the current kernel image path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="656">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kernrelease"
              c:identifier="gvir_sandbox_config_get_kernrelease"
              glib:get-property="kernrelease">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="623">Retrieves the sandbox kernel release version</doc>
        <source-position filename="libvirt-sandbox-config.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="629">the current kernel release version</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="625">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kmodpath"
              c:identifier="gvir_sandbox_config_get_kmodpath"
              glib:get-property="kmodpath">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="687">Retrieves the sandbox kernel modules path</doc>
        <source-position filename="libvirt-sandbox-config.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="693">the current kernel modules path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="689">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mounts" c:identifier="gvir_sandbox_config_get_mounts">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1433">Retrieves the list of custom mounts in the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="151"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1439">the list of mounts</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigMount"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1435">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mounts_with_type"
              c:identifier="gvir_sandbox_config_get_mounts_with_type">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1449">Retrieves the list of custom mounts in the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1455">the list of mounts</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigMount"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1451">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gvir_sandbox_config_get_name"
              glib:get-property="name">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="500">Retrieves the sandbox name</doc>
        <source-position filename="libvirt-sandbox-config.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="506">the current name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="502">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_networks"
              c:identifier="gvir_sandbox_config_get_networks">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="871">Retrieves the list of custom networks in the sandbox</doc>
        <source-position filename="libvirt-sandbox-config.h" line="116"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="877">the list of networks</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigNetwork"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="873">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="gvir_sandbox_config_get_root"
              glib:get-property="root">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="561">Retrieves the sandbox root directory</doc>
        <source-position filename="libvirt-sandbox-config.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="567">the current root</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="563">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_dynamic"
              c:identifier="gvir_sandbox_config_get_security_dynamic"
              glib:get-property="security-dynamic">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1866">Retrieve the sandbox security mode</doc>
        <source-position filename="libvirt-sandbox-config.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1872">the security mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1868">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security_label"
              c:identifier="gvir_sandbox_config_get_security_label"
              glib:get-property="security-label">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1837">Retrieve the sandbox security label</doc>
        <source-position filename="libvirt-sandbox-config.h" line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1843">the security label</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1839">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shell"
              c:identifier="gvir_sandbox_config_get_shell"
              glib:get-property="shell">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="716">Retrieves the sandbox shell flag</doc>
        <source-position filename="libvirt-sandbox-config.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="722">the shell flag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="718">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_userid" c:identifier="gvir_sandbox_config_get_userid">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="746">Get the user ID to invoke the sandbox application under.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="752">the user ID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="748">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_username"
              c:identifier="gvir_sandbox_config_get_username"
              glib:get-property="username">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="807">Get the user name to invoke the sandbox application under.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="813">the user name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="809">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid"
              c:identifier="gvir_sandbox_config_get_uuid"
              glib:get-property="uuid">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="531">Retrieves the sandbox UUID</doc>
        <source-position filename="libvirt-sandbox-config.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="537">the current uuid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="533">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_verbose"
              c:identifier="gvir_sandbox_config_get_verbose">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1972">Retrieves the sandbox verbose flag</doc>
        <source-position filename="libvirt-sandbox-config.h" line="187"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config.c"
               line="1978">the verbose flag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1974">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_disks" c:identifier="gvir_sandbox_config_has_disks">
        <source-position filename="libvirt-sandbox-config.h" line="147"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_envs" c:identifier="gvir_sandbox_config_has_envs">
        <source-position filename="libvirt-sandbox-config.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_mounts" c:identifier="gvir_sandbox_config_has_mounts">
        <source-position filename="libvirt-sandbox-config.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_mounts_with_type"
              c:identifier="gvir_sandbox_config_has_mounts_with_type">
        <source-position filename="libvirt-sandbox-config.h" line="164"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_networks"
              c:identifier="gvir_sandbox_config_has_networks">
        <source-position filename="libvirt-sandbox-config.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_root_mount"
              c:identifier="gvir_sandbox_config_has_root_mount">
        <source-position filename="libvirt-sandbox-config.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_to_data"
              c:identifier="gvir_sandbox_config_save_to_data"
              throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="76"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="save_to_path"
              c:identifier="gvir_sandbox_config_save_to_path"
              throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_arch"
              c:identifier="gvir_sandbox_config_set_arch"
              glib:set-property="arch">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="576">Set the architecture to use in the sandbox. If none is provided,
it will default to matching the host architecture.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="578">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="arch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="579">the host directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_debug" c:identifier="gvir_sandbox_config_set_debug">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1932">Set whether the container init should print debugging messages.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1934">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="debug" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1935">true if the container init should print debugging messages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_groupid"
              c:identifier="gvir_sandbox_config_set_groupid">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="761">Set the group ID to invoke the sandbox application under.
Defaults to the group ID of the current program.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="763">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="gid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="764">the sandbox group ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homedir"
              c:identifier="gvir_sandbox_config_set_homedir"
              glib:set-property="homedir">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="822">Set the home directory associated with the sandbox user ID.
Defaults to the home directory of the current program.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="824">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="homedir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="825">the sandbox home directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kernpath"
              c:identifier="gvir_sandbox_config_set_kernpath"
              glib:set-property="kernpath">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="637">Set the kernel image path to use in the sandbox. If none is provided,
it will default to matching /boot/vmlinuz-[kernel release].</doc>
        <source-position filename="libvirt-sandbox-config.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="639">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="kernpath" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="640">the host directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kernrelease"
              c:identifier="gvir_sandbox_config_set_kernrelease"
              glib:set-property="kernrelease">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="607">Set the kernel release version to use in the sandbox. If none is provided,
it will default to matching the current running kernel.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="609">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="kernrelease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="610">the host directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kmodpath"
              c:identifier="gvir_sandbox_config_set_kmodpath"
              glib:set-property="kmodpath">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="668">Sets the generic path to the kernel modules directory.
It will default to "/lib/modules", modules being searched in
/lib/modules/[kernel release]. If "/path" is given as argument
modules will be searched in /path/[kernel release]</doc>
        <source-position filename="libvirt-sandbox-config.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="670">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="kmodpath" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="671">the kernel modules path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root"
              c:identifier="gvir_sandbox_config_set_root"
              glib:set-property="root">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="546">Set the host directory to use as the root for the sandbox. The
defualt root is "/".</doc>
        <source-position filename="libvirt-sandbox-config.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="548">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="hostdir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="549">the host directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_dynamic"
              c:identifier="gvir_sandbox_config_set_security_dynamic"
              glib:set-property="security-dynamic">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1852">Set the SELinux security dynamic for the sandbox. The default
dynamic is "svirt_sandbox_t"</doc>
        <source-position filename="libvirt-sandbox-config.h" line="177"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1854">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="dynamic" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1855">the security mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_label"
              c:identifier="gvir_sandbox_config_set_security_label"
              glib:set-property="security-label">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1821">Set the sandbox security label. By default a dynamic security label
is chosen. A static security label must be specified if any
custom mounts are added</doc>
        <source-position filename="libvirt-sandbox-config.h" line="175"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1823">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="label" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1824">the host directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security_opts"
              c:identifier="gvir_sandbox_config_set_security_opts"
              throws="1">
        <source-position filename="libvirt-sandbox-config.h" line="179"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="optstr" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_shell"
              c:identifier="gvir_sandbox_config_set_shell"
              glib:set-property="shell">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="702">Set whether the container console should have a interactive shell.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="704">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="shell" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="705">true if the container should have a shell</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_userid" c:identifier="gvir_sandbox_config_set_userid">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="731">Set the user ID to invoke the sandbox application under.
Defaults to the user ID of the current program.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="733">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="734">the sandbox user ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_username"
              c:identifier="gvir_sandbox_config_set_username"
              glib:set-property="username">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="791">Set the user name associated with the sandbox user ID.
Defaults to the user name of the current program.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="793">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="username" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="794">the sandbox user name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_uuid" c:identifier="gvir_sandbox_config_set_uuid">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="515">Set the UUID for the container, to overide the automatically
generated value.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="517">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="518">the uuid in string format</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_verbose"
              c:identifier="gvir_sandbox_config_set_verbose">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config.c"
             line="1959">Set whether the container init should be verbose.</doc>
        <source-position filename="libvirt-sandbox-config.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1961">the sandbox config</doc>
            <type name="Config" c:type="GVirSandboxConfig*"/>
          </instance-parameter>
          <parameter name="verbose" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="1962">true if the container init should be verbose</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="arch"
                writable="1"
                transfer-ownership="none"
                setter="set_arch"
                getter="get_arch"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="gid"
                writable="1"
                transfer-ownership="none"
                default-value="425">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="homedir"
                writable="1"
                transfer-ownership="none"
                setter="set_homedir"
                getter="get_homedir"
                default-value="/builddir">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kernpath"
                writable="1"
                transfer-ownership="none"
                setter="set_kernpath"
                getter="get_kernpath"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kernrelease"
                writable="1"
                transfer-ownership="none"
                setter="set_kernrelease"
                getter="get_kernrelease"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kmodpath"
                writable="1"
                transfer-ownership="none"
                setter="set_kmodpath"
                getter="get_kmodpath"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="root"
                writable="1"
                transfer-ownership="none"
                setter="set_root"
                getter="get_root"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="security-dynamic"
                writable="1"
                transfer-ownership="none"
                setter="set_security_dynamic"
                getter="get_security_dynamic"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="security-label"
                writable="1"
                transfer-ownership="none"
                setter="set_security_label"
                getter="get_security_label"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="shell"
                writable="1"
                transfer-ownership="none"
                setter="set_shell"
                getter="get_shell"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uid"
                writable="1"
                transfer-ownership="none"
                default-value="1000">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="username"
                writable="1"
                transfer-ownership="none"
                setter="set_username"
                getter="get_username"
                default-value="mockbuild">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uuid"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_uuid"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigPrivate" c:type="GVirSandboxConfigPrivate*"/>
      </field>
    </class>
    <record name="ConfigClass"
            c:type="GVirSandboxConfigClass"
            glib:is-gtype-struct-for="Config">
      <source-position filename="libvirt-sandbox-config.h" line="65"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="load_config">
        <callback name="load_config" throws="1">
          <source-position filename="libvirt-sandbox-config.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="GLib.KeyFile" c:type="GKeyFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="save_config">
        <callback name="save_config">
          <source-position filename="libvirt-sandbox-config.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="config" transfer-ownership="none">
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="GLib.KeyFile" c:type="GKeyFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_command">
        <callback name="get_command">
          <source-position filename="libvirt-sandbox-config.h" line="62"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config.c"
                 line="2933">the command path and arguments</doc>
            <array c:type="gchar**">
              <type name="utf8"/>
            </array>
          </return-value>
          <parameters>
            <parameter name="config" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="libvirt-sandbox-config.c"
                   line="2929">the sandbox config</doc>
              <type name="Config" c:type="GVirSandboxConfig*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ConfigDisk"
           c:symbol-prefix="config_disk"
           c:type="GVirSandboxConfigDisk"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigDisk"
           glib:get-type="gvir_sandbox_config_disk_get_type"
           glib:type-struct="ConfigDiskClass">
      <source-position filename="libvirt-sandbox-config-disk.h" line="59"/>
      <method name="get_disk_type"
              c:identifier="gvir_sandbox_config_disk_get_disk_type">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-disk.c"
             line="207">Retrieves the type property for the custom disk</doc>
        <source-position filename="libvirt-sandbox-config-disk.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-disk.c"
               line="213">the type property of disk</doc>
          <type name="LibvirtGConfig.DomainDiskType"
                c:type="GVirConfigDomainDiskType"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-disk.c"
                 line="209">the sandbox disk config</doc>
            <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_format"
              c:identifier="gvir_sandbox_config_disk_get_format"
              glib:get-property="format">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-disk.c"
             line="222">Retrieves the format property for the custom disk</doc>
        <source-position filename="libvirt-sandbox-config-disk.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-disk.c"
               line="228">the format property of disk</doc>
          <type name="LibvirtGConfig.DomainDiskFormat"
                c:type="GVirConfigDomainDiskFormat"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-disk.c"
                 line="224">the sandbox disk config</doc>
            <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="gvir_sandbox_config_disk_get_source"
              glib:get-property="source">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-disk.c"
             line="252">Retrieves the source property for the custom disk</doc>
        <source-position filename="libvirt-sandbox-config-disk.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-disk.c"
               line="258">the source property</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-disk.c"
                 line="254">the sandbox disk config</doc>
            <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tag"
              c:identifier="gvir_sandbox_config_disk_get_tag"
              glib:get-property="tag">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-disk.c"
             line="237">Retrieves the tag property for the custom disk</doc>
        <source-position filename="libvirt-sandbox-config-disk.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-disk.c"
               line="243">the tag property path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-disk.c"
                 line="239">the sandbox disk config</doc>
            <type name="ConfigDisk" c:type="GVirSandboxConfigDisk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="format"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_format"
                default-value="GVIR_CONFIG_DOMAIN_DISK_FORMAT_RAW">
        <type name="LibvirtGConfig.DomainDiskFormat"/>
      </property>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_source"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="tag"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_tag"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="GVIR_CONFIG_DOMAIN_DISK_FILE">
        <type name="LibvirtGConfig.DomainDiskType"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigDiskPrivate" c:type="GVirSandboxConfigDiskPrivate*"/>
      </field>
    </class>
    <record name="ConfigDiskClass"
            c:type="GVirSandboxConfigDiskClass"
            glib:is-gtype-struct-for="ConfigDisk">
      <source-position filename="libvirt-sandbox-config-disk.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigDiskPrivate"
            c:type="GVirSandboxConfigDiskPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-disk.h" line="42"/>
    </record>
    <class name="ConfigInitrd"
           c:symbol-prefix="config_initrd"
           c:type="GVirSandboxConfigInitrd"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigInitrd"
           glib:get-type="gvir_sandbox_config_initrd_get_type"
           glib:type-struct="ConfigInitrdClass">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="59"/>
      <constructor name="new" c:identifier="gvir_sandbox_config_initrd_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="190">Create a new initrd config</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-initrd.c"
               line="195">a new sandbox initrd object</doc>
          <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
        </return-value>
      </constructor>
      <method name="add_module"
              c:identifier="gvir_sandbox_config_initrd_add_module">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="293">Request that the kernel module @modname is included in the initrd,
along with any depedent modules</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="295">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
          <parameter name="modname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="296">the kernel module name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_init"
              c:identifier="gvir_sandbox_config_initrd_get_init"
              glib:get-property="init">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="278">Retrieves the path of the init binary</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-initrd.c"
               line="284">the init binary path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="280">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kmoddir"
              c:identifier="gvir_sandbox_config_initrd_get_kmoddir"
              glib:get-property="kmoddir">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="248">Retrieves the current kernel modules directory</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-initrd.c"
               line="254">the full path to the kernel modules directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="250">the full path to the kernel modules directory</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_kver"
              c:identifier="gvir_sandbox_config_initrd_get_kver"
              glib:get-property="kver">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="220">Retrieves the path of the kver binary</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-initrd.c"
               line="226">the kver binary path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="222">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_modules"
              c:identifier="gvir_sandbox_config_initrd_get_modules">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="309">Retrieves the list of all modules</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="75"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-initrd.c"
               line="315">the module names</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="311">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_init"
              c:identifier="gvir_sandbox_config_initrd_set_init"
              glib:set-property="init">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="263">Sets the host binary to be used as the init program inside
the initrd. This defaults to /usr/bin/libvirt-sandbox-init-qemu</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="265">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
          <parameter name="hostpath" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="266">the init binary path</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kmoddir"
              c:identifier="gvir_sandbox_config_initrd_set_kmoddir"
              glib:set-property="kmoddir">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="234">Sets the full path to where the kernel modules will be looked up</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="236">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
          <parameter name="kmoddir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="237">the full path to the kernel modules directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_kver"
              c:identifier="gvir_sandbox_config_initrd_set_kver"
              glib:set-property="kver">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-initrd.c"
             line="205">Sets the host kernel version to use for populating the initrd with modules.
This defaults to the currently running kernel version</doc>
        <source-position filename="libvirt-sandbox-config-initrd.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="207">the sandbox initrd config</doc>
            <type name="ConfigInitrd" c:type="GVirSandboxConfigInitrd*"/>
          </instance-parameter>
          <parameter name="version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-initrd.c"
                 line="208">the kernel version</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="init"
                writable="1"
                transfer-ownership="none"
                setter="set_init"
                getter="get_init"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kmoddir"
                writable="1"
                transfer-ownership="none"
                setter="set_kmoddir"
                getter="get_kmoddir"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="kver"
                writable="1"
                transfer-ownership="none"
                setter="set_kver"
                getter="get_kver"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigInitrdPrivate"
              c:type="GVirSandboxConfigInitrdPrivate*"/>
      </field>
    </class>
    <record name="ConfigInitrdClass"
            c:type="GVirSandboxConfigInitrdClass"
            glib:is-gtype-struct-for="ConfigInitrd">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigInitrdPrivate"
            c:type="GVirSandboxConfigInitrdPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="42"/>
    </record>
    <class name="ConfigInteractive"
           c:symbol-prefix="config_interactive"
           c:type="GVirSandboxConfigInteractive"
           parent="Config"
           glib:type-name="GVirSandboxConfigInteractive"
           glib:get-type="gvir_sandbox_config_interactive_get_type"
           glib:type-struct="ConfigInteractiveClass">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_interactive_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-interactive.c"
             line="230">Create a new interactive application sandbox configuration</doc>
        <source-position filename="libvirt-sandbox-config-interactive.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-interactive.c"
               line="236">a new interactive sandbox config object</doc>
          <type name="ConfigInteractive"
                c:type="GVirSandboxConfigInteractive*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-interactive.c"
                 line="232">the sandbox name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_tty"
              c:identifier="gvir_sandbox_config_interactive_get_tty"
              glib:get-property="tty">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-interactive.c"
             line="260">Retrieves the sandbox tty flag</doc>
        <source-position filename="libvirt-sandbox-config-interactive.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-interactive.c"
               line="266">the tty flag</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-interactive.c"
                 line="262">the sandbox config</doc>
            <type name="ConfigInteractive"
                  c:type="GVirSandboxConfigInteractive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_command"
              c:identifier="gvir_sandbox_config_interactive_set_command">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-interactive.c"
             line="275">Set the path of the command to be run and its arguments. The @argv should
be a NULL terminated list</doc>
        <source-position filename="libvirt-sandbox-config-interactive.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-interactive.c"
                 line="277">the sandbox config</doc>
            <type name="ConfigInteractive"
                  c:type="GVirSandboxConfigInteractive*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-interactive.c"
                 line="278">the command path and arguments</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_tty"
              c:identifier="gvir_sandbox_config_interactive_set_tty"
              glib:set-property="tty">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-interactive.c"
             line="246">Set whether the container console should have a interactive tty.</doc>
        <source-position filename="libvirt-sandbox-config-interactive.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-interactive.c"
                 line="248">the sandbox config</doc>
            <type name="ConfigInteractive"
                  c:type="GVirSandboxConfigInteractive*"/>
          </instance-parameter>
          <parameter name="tty" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-interactive.c"
                 line="249">true if the container should have a tty</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="tty"
                writable="1"
                transfer-ownership="none"
                setter="set_tty"
                getter="get_tty"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="Config" c:type="GVirSandboxConfig"/>
      </field>
      <field name="priv">
        <type name="ConfigInteractivePrivate"
              c:type="GVirSandboxConfigInteractivePrivate*"/>
      </field>
    </class>
    <record name="ConfigInteractiveClass"
            c:type="GVirSandboxConfigInteractiveClass"
            glib:is-gtype-struct-for="ConfigInteractive">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigClass" c:type="GVirSandboxConfigClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigInteractivePrivate"
            c:type="GVirSandboxConfigInteractivePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="40"/>
    </record>
    <class name="ConfigMount"
           c:symbol-prefix="config_mount"
           c:type="GVirSandboxConfigMount"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GVirSandboxConfigMount"
           glib:get-type="gvir_sandbox_config_mount_get_type"
           glib:type-struct="ConfigMountClass">
      <source-position filename="libvirt-sandbox-config-mount.h" line="59"/>
      <method name="add_include"
              c:identifier="gvir_sandbox_config_mount_add_include">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount.c"
             line="169">Request that the file @srcpath from the host OS is to be copied
to @dstpath, relative to the @target path in the sandbox.</doc>
        <source-position filename="libvirt-sandbox-config-mount.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount.c"
                 line="171">the sandbox mount config</doc>
            <type name="ConfigMount" c:type="GVirSandboxConfigMount*"/>
          </instance-parameter>
          <parameter name="srcpath" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount.c"
                 line="172">a file on the host</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="dstpath" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount.c"
                 line="173">a path within the mount</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_includes"
              c:identifier="gvir_sandbox_config_mount_get_includes">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount.c"
             line="186">Retrieves the list of all include files</doc>
        <source-position filename="libvirt-sandbox-config-mount.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount.c"
               line="192">the include files</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="filename"/>
            <type name="filename"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount.c"
                 line="188">the sandbox mount config</doc>
            <type name="ConfigMount" c:type="GVirSandboxConfigMount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="gvir_sandbox_config_mount_get_target"
              glib:get-property="target">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount.c"
             line="154">Retrieves the target directory for the custom mount</doc>
        <source-position filename="libvirt-sandbox-config-mount.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount.c"
               line="160">the target directory path</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount.c"
                 line="156">the sandbox mount config</doc>
            <type name="ConfigMount" c:type="GVirSandboxConfigMount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="target"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_target"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigMountPrivate"
              c:type="GVirSandboxConfigMountPrivate*"/>
      </field>
    </class>
    <record name="ConfigMountClass"
            c:type="GVirSandboxConfigMountClass"
            glib:is-gtype-struct-for="ConfigMount">
      <source-position filename="libvirt-sandbox-config-mount.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ConfigMountFile"
           c:symbol-prefix="config_mount_file"
           c:type="GVirSandboxConfigMountFile"
           parent="ConfigMount"
           abstract="1"
           glib:type-name="GVirSandboxConfigMountFile"
           glib:get-type="gvir_sandbox_config_mount_file_get_type"
           glib:type-struct="ConfigMountFileClass">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="57"/>
      <method name="get_source"
              c:identifier="gvir_sandbox_config_mount_file_get_source"
              glib:get-property="source">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-file.c"
             line="161">Retrieves the directory mapped to the mount (if any)</doc>
        <source-position filename="libvirt-sandbox-config-mount-file.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-file.c"
               line="167">the source directory</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-file.c"
                 line="163">the sandbox mount config</doc>
            <type name="ConfigMountFile" c:type="GVirSandboxConfigMountFile*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="gvir_sandbox_config_mount_file_set_source"
              glib:set-property="source">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-file.c"
             line="145">Sets the directory to map to the custom mount. If no
directory is specified, an empty temporary directory will
be created</doc>
        <source-position filename="libvirt-sandbox-config-mount-file.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-file.c"
                 line="147">the sandbox mount config</doc>
            <type name="ConfigMountFile" c:type="GVirSandboxConfigMountFile*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-file.c"
                 line="148">the host directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="source"
                writable="1"
                transfer-ownership="none"
                setter="set_source"
                getter="get_source"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="ConfigMount" c:type="GVirSandboxConfigMount"/>
      </field>
      <field name="priv">
        <type name="ConfigMountFilePrivate"
              c:type="GVirSandboxConfigMountFilePrivate*"/>
      </field>
    </class>
    <record name="ConfigMountFileClass"
            c:type="GVirSandboxConfigMountFileClass"
            glib:is-gtype-struct-for="ConfigMountFile">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigMountClass" c:type="GVirSandboxConfigMountClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigMountFilePrivate"
            c:type="GVirSandboxConfigMountFilePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="40"/>
    </record>
    <class name="ConfigMountGuestBind"
           c:symbol-prefix="config_mount_guest_bind"
           c:type="GVirSandboxConfigMountGuestBind"
           parent="ConfigMountFile"
           glib:type-name="GVirSandboxConfigMountGuestBind"
           glib:get-type="gvir_sandbox_config_mount_guest_bind_get_type"
           glib:type-struct="ConfigMountGuestBindClass">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_mount_guest_bind_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-guest-bind.c"
             line="66">Create a new custom mount mapped to the directory @targetdir</doc>
        <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-guest-bind.c"
               line="72">a new sandbox mount object</doc>
          <type name="ConfigMountGuestBind"
                c:type="GVirSandboxConfigMountGuestBind*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="targetdir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-guest-bind.c"
                 line="68">the target directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="ConfigMountFile" c:type="GVirSandboxConfigMountFile"/>
      </field>
      <field name="priv">
        <type name="ConfigMountGuestBindPrivate"
              c:type="GVirSandboxConfigMountGuestBindPrivate*"/>
      </field>
    </class>
    <record name="ConfigMountGuestBindClass"
            c:type="GVirSandboxConfigMountGuestBindClass"
            glib:is-gtype-struct-for="ConfigMountGuestBind">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigMountFileClass"
              c:type="GVirSandboxConfigMountFileClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigMountGuestBindPrivate"
            c:type="GVirSandboxConfigMountGuestBindPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="40"/>
    </record>
    <class name="ConfigMountHostBind"
           c:symbol-prefix="config_mount_host_bind"
           c:type="GVirSandboxConfigMountHostBind"
           parent="ConfigMountFile"
           glib:type-name="GVirSandboxConfigMountHostBind"
           glib:get-type="gvir_sandbox_config_mount_host_bind_get_type"
           glib:type-struct="ConfigMountHostBindClass">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_mount_host_bind_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-host-bind.c"
             line="66">Create a new custom mount mapped to the directory @targetdir</doc>
        <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-host-bind.c"
               line="72">a new sandbox mount object</doc>
          <type name="ConfigMountHostBind"
                c:type="GVirSandboxConfigMountHostBind*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="targetdir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-host-bind.c"
                 line="68">the target directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <field name="parent">
        <type name="ConfigMountFile" c:type="GVirSandboxConfigMountFile"/>
      </field>
      <field name="priv">
        <type name="ConfigMountHostBindPrivate"
              c:type="GVirSandboxConfigMountHostBindPrivate*"/>
      </field>
    </class>
    <record name="ConfigMountHostBindClass"
            c:type="GVirSandboxConfigMountHostBindClass"
            glib:is-gtype-struct-for="ConfigMountHostBind">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigMountFileClass"
              c:type="GVirSandboxConfigMountFileClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigMountHostBindPrivate"
            c:type="GVirSandboxConfigMountHostBindPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="40"/>
    </record>
    <class name="ConfigMountHostImage"
           c:symbol-prefix="config_mount_host_image"
           c:type="GVirSandboxConfigMountHostImage"
           parent="ConfigMountFile"
           glib:type-name="GVirSandboxConfigMountHostImage"
           glib:get-type="gvir_sandbox_config_mount_host_image_get_type"
           glib:type-struct="ConfigMountHostImageClass">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_mount_host_image_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-host-image.c"
             line="135">Create a new custom mount mapped to the directory @targetdir</doc>
        <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-host-image.c"
               line="141">a new sandbox mount object</doc>
          <type name="ConfigMountHostImage"
                c:type="GVirSandboxConfigMountHostImage*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="targetdir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-host-image.c"
                 line="137">the target directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="format" transfer-ownership="none">
            <type name="LibvirtGConfig.DomainDiskFormat"
                  c:type="GVirConfigDomainDiskFormat"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_format"
              c:identifier="gvir_sandbox_config_mount_host_image_get_format"
              glib:get-property="format">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-host-image.c"
             line="154">Retrieves the image format of the host-image filesystem.</doc>
        <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-host-image.c"
               line="160">the imave format</doc>
          <type name="LibvirtGConfig.DomainDiskFormat"
                c:type="GVirConfigDomainDiskFormat"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-host-image.c"
                 line="156">the sandbox mount config</doc>
            <type name="ConfigMountHostImage"
                  c:type="GVirSandboxConfigMountHostImage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="format"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_format"
                default-value="GVIR_CONFIG_DOMAIN_DISK_FORMAT_RAW">
        <type name="LibvirtGConfig.DomainDiskFormat"/>
      </property>
      <field name="parent">
        <type name="ConfigMountFile" c:type="GVirSandboxConfigMountFile"/>
      </field>
      <field name="priv">
        <type name="ConfigMountHostImagePrivate"
              c:type="GVirSandboxConfigMountHostImagePrivate*"/>
      </field>
    </class>
    <record name="ConfigMountHostImageClass"
            c:type="GVirSandboxConfigMountHostImageClass"
            glib:is-gtype-struct-for="ConfigMountHostImage">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigMountFileClass"
              c:type="GVirSandboxConfigMountFileClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigMountHostImagePrivate"
            c:type="GVirSandboxConfigMountHostImagePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="40"/>
    </record>
    <record name="ConfigMountPrivate"
            c:type="GVirSandboxConfigMountPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-mount.h" line="42"/>
    </record>
    <class name="ConfigMountRam"
           c:symbol-prefix="config_mount_ram"
           c:type="GVirSandboxConfigMountRam"
           parent="ConfigMount"
           glib:type-name="GVirSandboxConfigMountRam"
           glib:get-type="gvir_sandbox_config_mount_ram_get_type"
           glib:type-struct="ConfigMountRamClass">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="57"/>
      <constructor name="new" c:identifier="gvir_sandbox_config_mount_ram_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-ram.c"
             line="138">Create a new custom mount mapped to the directory @targetdir</doc>
        <source-position filename="libvirt-sandbox-config-mount-ram.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-ram.c"
               line="144">a new sandbox mount object</doc>
          <type name="ConfigMountRam" c:type="GVirSandboxConfigMountRam*"/>
        </return-value>
        <parameters>
          <parameter name="targetdir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-ram.c"
                 line="140">the target directory</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="usage" transfer-ownership="none">
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_usage"
              c:identifier="gvir_sandbox_config_mount_ram_get_usage"
              glib:get-property="usage">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-ram.c"
             line="169">Retrieves the memory usage limit for the RAM filesystem in Kibibytes</doc>
        <source-position filename="libvirt-sandbox-config-mount-ram.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-mount-ram.c"
               line="175">the usage limit</doc>
          <type name="guint64" c:type="guint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-ram.c"
                 line="171">the sandbox mount config</doc>
            <type name="ConfigMountRam" c:type="GVirSandboxConfigMountRam*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_usage"
              c:identifier="gvir_sandbox_config_mount_ram_set_usage">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-mount-ram.c"
             line="156">Sets the memory usage limit for the RAM filesystem in Kibibytes</doc>
        <source-position filename="libvirt-sandbox-config-mount-ram.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-ram.c"
                 line="158">the sandbox mount config</doc>
            <type name="ConfigMountRam" c:type="GVirSandboxConfigMountRam*"/>
          </instance-parameter>
          <parameter name="usage" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-mount-ram.c"
                 line="159">the memory usage limit in KiB</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
        </parameters>
      </method>
      <property name="usage"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_usage"
                default-value="10240">
        <type name="guint64" c:type="guint64"/>
      </property>
      <field name="parent">
        <type name="ConfigMount" c:type="GVirSandboxConfigMount"/>
      </field>
      <field name="priv">
        <type name="ConfigMountRamPrivate"
              c:type="GVirSandboxConfigMountRamPrivate*"/>
      </field>
    </class>
    <record name="ConfigMountRamClass"
            c:type="GVirSandboxConfigMountRamClass"
            glib:is-gtype-struct-for="ConfigMountRam">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigMountClass" c:type="GVirSandboxConfigMountClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigMountRamPrivate"
            c:type="GVirSandboxConfigMountRamPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="40"/>
    </record>
    <class name="ConfigNetwork"
           c:symbol-prefix="config_network"
           c:type="GVirSandboxConfigNetwork"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigNetwork"
           glib:get-type="gvir_sandbox_config_network_get_type"
           glib:type-struct="ConfigNetworkClass">
      <source-position filename="libvirt-sandbox-config-network.h" line="59"/>
      <constructor name="new" c:identifier="gvir_sandbox_config_network_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="200">Create a new network config with DHCP enabled</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network.c"
               line="205">a new sandbox network object</doc>
          <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
        </return-value>
      </constructor>
      <method name="add_address"
              c:identifier="gvir_sandbox_config_network_add_address">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="261">Add a network interface address. This will be ignored unless
DHCP has been disabled</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="263">the sandbox network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="264">the network address</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_route"
              c:identifier="gvir_sandbox_config_network_add_route">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="331">Add a network interface route. This will be ignored unless
DHCP has been disabled</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="333">the sandbox network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="334">the network route</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_addresses"
              c:identifier="gvir_sandbox_config_network_get_addresses">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="277">Retrieve the list of network interface addresses</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network.c"
               line="283">the address list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigNetworkAddress"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="279">the sandbox network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_dhcp"
              c:identifier="gvir_sandbox_config_network_get_dhcp"
              glib:get-property="dhcp">
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filterref"
              c:identifier="gvir_sandbox_config_network_get_filterref">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="313">Retrieve the associated filter reference.</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network.c"
               line="319">The associated filter reference.</doc>
          <type name="ConfigNetworkFilterref"
                c:type="GVirSandboxConfigNetworkFilterref*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="315">the sandbox network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac"
              c:identifier="gvir_sandbox_config_network_get_mac"
              glib:get-property="mac">
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_routes"
              c:identifier="gvir_sandbox_config_network_get_routes">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="346">Retrieve the list of network interface routes</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network.c"
               line="352">the route list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigNetworkRoute"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="348">the sandbox network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="gvir_sandbox_config_network_get_source"
              glib:get-property="source">
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_dhcp"
              c:identifier="gvir_sandbox_config_network_set_dhcp"
              glib:set-property="dhcp">
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
          <parameter name="dhcp" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filterref"
              c:identifier="gvir_sandbox_config_network_set_filterref">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network.c"
             line="292">Set a network filterref for the given network.</doc>
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="294">the sandbox network configuration</doc>
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
          <parameter name="ref" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network.c"
                 line="295">the network filterref</doc>
            <type name="ConfigNetworkFilterref"
                  c:type="GVirSandboxConfigNetworkFilterref*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mac"
              c:identifier="gvir_sandbox_config_network_set_mac"
              glib:set-property="mac">
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
          <parameter name="mac" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_source"
              c:identifier="gvir_sandbox_config_network_set_source"
              glib:set-property="source">
        <source-position filename="libvirt-sandbox-config-network.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigNetwork" c:type="GVirSandboxConfigNetwork*"/>
          </instance-parameter>
          <parameter name="network" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="dhcp"
                writable="1"
                transfer-ownership="none"
                setter="set_dhcp"
                getter="get_dhcp"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mac"
                writable="1"
                transfer-ownership="none"
                setter="set_mac"
                getter="get_mac"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="source"
                writable="1"
                transfer-ownership="none"
                setter="set_source"
                getter="get_source"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigNetworkPrivate"
              c:type="GVirSandboxConfigNetworkPrivate*"/>
      </field>
    </class>
    <class name="ConfigNetworkAddress"
           c:symbol-prefix="config_network_address"
           c:type="GVirSandboxConfigNetworkAddress"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigNetworkAddress"
           glib:get-type="gvir_sandbox_config_network_address_get_type"
           glib:type-struct="ConfigNetworkAddressClass">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="59"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_network_address_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="194">Create a new network address config. Only the @primary parameter
is required to be non-NULL. The @broadcast address
will be automatically filled in, if not otherwise specified</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-address.c"
               line="204">a new sandbox network_address object</doc>
          <type name="ConfigNetworkAddress"
                c:type="GVirSandboxConfigNetworkAddress*"/>
        </return-value>
        <parameters>
          <parameter name="primary" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="196">the primary address</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="197">the network prefix</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="broadcast" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="198">the broadcast address (optional)</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_broadcast"
              c:identifier="gvir_sandbox_config_network_address_get_broadcast"
              glib:get-property="broadcast">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="297">Retrieves the broadcast address</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-address.c"
               line="303">the broadcast address</doc>
          <type name="Gio.InetAddress" c:type="GInetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="299">the sandbox network address config</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix"
              c:identifier="gvir_sandbox_config_network_address_get_prefix"
              glib:get-property="prefix">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="265">Retrieves the network prefix</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-address.c"
               line="271">the network prefix</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="267">the sandbox network address config</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_primary"
              c:identifier="gvir_sandbox_config_network_address_get_primary"
              glib:get-property="primary">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="235">Retrieves the primary address</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-address.c"
               line="241">the primary address</doc>
          <type name="Gio.InetAddress" c:type="GInetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="237">the sandbox network address config</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_broadcast"
              c:identifier="gvir_sandbox_config_network_address_set_broadcast">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="280">Sets the interface broadcast address</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="282">the sandbox network address config</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="283">the broadcast address</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix"
              c:identifier="gvir_sandbox_config_network_address_set_prefix">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="250">Sets the interface network prefix</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="252">the sandbox network address config</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="253">the prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_primary"
              c:identifier="gvir_sandbox_config_network_address_set_primary">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-address.c"
             line="218">Sets the interface primary address</doc>
        <source-position filename="libvirt-sandbox-config-network-address.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="220">the sandbox network address config</doc>
            <type name="ConfigNetworkAddress"
                  c:type="GVirSandboxConfigNetworkAddress*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-address.c"
                 line="221">the primary address</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <property name="broadcast"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_broadcast">
        <type name="Gio.InetAddress"/>
      </property>
      <property name="prefix"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_prefix"
                default-value="24">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="primary"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_primary">
        <type name="Gio.InetAddress"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigNetworkAddressPrivate"
              c:type="GVirSandboxConfigNetworkAddressPrivate*"/>
      </field>
    </class>
    <record name="ConfigNetworkAddressClass"
            c:type="GVirSandboxConfigNetworkAddressClass"
            glib:is-gtype-struct-for="ConfigNetworkAddress">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigNetworkAddressPrivate"
            c:type="GVirSandboxConfigNetworkAddressPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="42"/>
    </record>
    <record name="ConfigNetworkClass"
            c:type="GVirSandboxConfigNetworkClass"
            glib:is-gtype-struct-for="ConfigNetwork">
      <source-position filename="libvirt-sandbox-config-network.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ConfigNetworkFilterref"
           c:symbol-prefix="config_network_filterref"
           c:type="GVirSandboxConfigNetworkFilterref"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigNetworkFilterref"
           glib:get-type="gvir_sandbox_config_network_filterref_get_type"
           glib:type-struct="ConfigNetworkFilterrefClass">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="58"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_network_filterref_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-filterref.c"
             line="135">Create a new network filterref config.</doc>
        <source-position filename="libvirt-sandbox-config-network-filterref.h"
                         line="62"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-filterref.c"
               line="140">a new sandbox network_filterref object</doc>
          <type name="ConfigNetworkFilterref"
                c:type="GVirSandboxConfigNetworkFilterref*"/>
        </return-value>
      </constructor>
      <method name="add_parameter"
              c:identifier="gvir_sandbox_config_network_filterref_add_parameter">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-filterref.c"
             line="180">Add a parameter to a network filter reference.</doc>
        <source-position filename="libvirt-sandbox-config-network-filterref.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-filterref.c"
                 line="182">the network filter reference.</doc>
            <type name="ConfigNetworkFilterref"
                  c:type="GVirSandboxConfigNetworkFilterref*"/>
          </instance-parameter>
          <parameter name="param" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-filterref.c"
                 line="183">the filter parameter</doc>
            <type name="ConfigNetworkFilterrefParameter"
                  c:type="GVirSandboxConfigNetworkFilterrefParameter*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="gvir_sandbox_config_network_filterref_get_name"
              glib:get-property="name">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-filterref.c"
             line="155">Retrieves the network filter reference name.</doc>
        <source-position filename="libvirt-sandbox-config-network-filterref.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-filterref.c"
               line="161">the network filter reference name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-filterref.c"
                 line="157">the network filter reference name</doc>
            <type name="ConfigNetworkFilterref"
                  c:type="GVirSandboxConfigNetworkFilterref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parameters"
              c:identifier="gvir_sandbox_config_network_filterref_get_parameters">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-filterref.c"
             line="199">Retrieve the list of parameters associated with a network filter reference</doc>
        <source-position filename="libvirt-sandbox-config-network-filterref.h"
                         line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-filterref.c"
               line="205">the parameter list</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ConfigNetworkFilterrefParameter"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-filterref.c"
                 line="201">the filter reference configuration</doc>
            <type name="ConfigNetworkFilterref"
                  c:type="GVirSandboxConfigNetworkFilterref*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="gvir_sandbox_config_network_filterref_set_name"
              glib:set-property="name">
        <source-position filename="libvirt-sandbox-config-network-filterref.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <type name="ConfigNetworkFilterref"
                  c:type="GVirSandboxConfigNetworkFilterref*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigNetworkFilterrefPrivate"
              c:type="GVirSandboxConfigNetworkFilterrefPrivate*"/>
      </field>
    </class>
    <record name="ConfigNetworkFilterrefClass"
            c:type="GVirSandboxConfigNetworkFilterrefClass"
            glib:is-gtype-struct-for="ConfigNetworkFilterref">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="58"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ConfigNetworkFilterrefParameter"
           c:symbol-prefix="config_network_filterref_parameter"
           c:type="GVirSandboxConfigNetworkFilterrefParameter"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigNetworkFilterrefParameter"
           glib:get-type="gvir_sandbox_config_network_filterref_parameter_get_type"
           glib:type-struct="ConfigNetworkFilterrefParameterClass">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_network_filterref_parameter_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-filterref-parameter.c"
             line="157">Create a new network config with DHCP enabled</doc>
        <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-filterref-parameter.c"
               line="162">a new sandbox network object</doc>
          <type name="ConfigNetworkFilterrefParameter"
                c:type="GVirSandboxConfigNetworkFilterrefParameter*"/>
        </return-value>
      </constructor>
      <method name="get_name"
              c:identifier="gvir_sandbox_config_network_filterref_parameter_get_name"
              glib:get-property="name">
        <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <type name="ConfigNetworkFilterrefParameter"
                  c:type="GVirSandboxConfigNetworkFilterrefParameter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="gvir_sandbox_config_network_filterref_parameter_get_value"
              glib:get-property="value">
        <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <type name="ConfigNetworkFilterrefParameter"
                  c:type="GVirSandboxConfigNetworkFilterrefParameter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="gvir_sandbox_config_network_filterref_parameter_set_name"
              glib:set-property="name">
        <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <type name="ConfigNetworkFilterrefParameter"
                  c:type="GVirSandboxConfigNetworkFilterrefParameter*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value"
              c:identifier="gvir_sandbox_config_network_filterref_parameter_set_value"
              glib:set-property="value">
        <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="param" transfer-ownership="none">
            <type name="ConfigNetworkFilterrefParameter"
                  c:type="GVirSandboxConfigNetworkFilterrefParameter*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="name"
                writable="1"
                transfer-ownership="none"
                setter="set_name"
                getter="get_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="value"
                writable="1"
                transfer-ownership="none"
                setter="set_value"
                getter="get_value"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigNetworkFilterrefParameterPrivate"
              c:type="GVirSandboxConfigNetworkFilterrefParameterPrivate*"/>
      </field>
    </class>
    <record name="ConfigNetworkFilterrefParameterClass"
            c:type="GVirSandboxConfigNetworkFilterrefParameterClass"
            glib:is-gtype-struct-for="ConfigNetworkFilterrefParameter">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="57"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigNetworkFilterrefParameterPrivate"
            c:type="GVirSandboxConfigNetworkFilterrefParameterPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="40"/>
    </record>
    <record name="ConfigNetworkFilterrefPrivate"
            c:type="GVirSandboxConfigNetworkFilterrefPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="41"/>
    </record>
    <record name="ConfigNetworkPrivate"
            c:type="GVirSandboxConfigNetworkPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-network.h" line="42"/>
    </record>
    <class name="ConfigNetworkRoute"
           c:symbol-prefix="config_network_route"
           c:type="GVirSandboxConfigNetworkRoute"
           parent="GObject.Object"
           glib:type-name="GVirSandboxConfigNetworkRoute"
           glib:get-type="gvir_sandbox_config_network_route_get_type"
           glib:type-struct="ConfigNetworkRouteClass">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="59"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_network_route_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="194">Create a new network route config.</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-route.c"
               line="202">a new sandbox network route object</doc>
          <type name="ConfigNetworkRoute"
                c:type="GVirSandboxConfigNetworkRoute*"/>
        </return-value>
        <parameters>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="196">the target address</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="197">the prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="gateway" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="198">the gateway device</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_gateway"
              c:identifier="gvir_sandbox_config_network_route_get_gateway"
              glib:get-property="gateway">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="263">Retrieves the network gateway address</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-route.c"
               line="269">the gateway address</doc>
          <type name="Gio.InetAddress" c:type="GInetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="265">the sandbox network route config</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix"
              c:identifier="gvir_sandbox_config_network_route_get_prefix"
              glib:get-property="prefix">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="231">Retrieves the prefix length of the route</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-route.c"
               line="237">the prefix length</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="233">the sandbox network route config</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_target"
              c:identifier="gvir_sandbox_config_network_route_get_target"
              glib:get-property="target">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="295">Retrieves the route target address</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-network-route.c"
               line="301">the target address</doc>
          <type name="Gio.InetAddress" c:type="GInetAddress*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="297">the sandbox network route config</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gateway"
              c:identifier="gvir_sandbox_config_network_route_set_gateway">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="246">Sets the interface gateway device</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="248">the sandbox network route config</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="249">the gateway device</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefix"
              c:identifier="gvir_sandbox_config_network_route_set_prefix">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="216">Sets the prefix for an interface route</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="218">the sandbox network route config</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </instance-parameter>
          <parameter name="prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="219">prefix length</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_target"
              c:identifier="gvir_sandbox_config_network_route_set_target">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-network-route.c"
             line="278">Sets the interface route target address</doc>
        <source-position filename="libvirt-sandbox-config-network-route.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="280">the sandbox network route config</doc>
            <type name="ConfigNetworkRoute"
                  c:type="GVirSandboxConfigNetworkRoute*"/>
          </instance-parameter>
          <parameter name="addr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-network-route.c"
                 line="281">the target address</doc>
            <type name="Gio.InetAddress" c:type="GInetAddress*"/>
          </parameter>
        </parameters>
      </method>
      <property name="gateway"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_gateway">
        <type name="Gio.InetAddress"/>
      </property>
      <property name="prefix"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_prefix"
                default-value="24">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="target"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_target">
        <type name="Gio.InetAddress"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConfigNetworkRoutePrivate"
              c:type="GVirSandboxConfigNetworkRoutePrivate*"/>
      </field>
    </class>
    <record name="ConfigNetworkRouteClass"
            c:type="GVirSandboxConfigNetworkRouteClass"
            glib:is-gtype-struct-for="ConfigNetworkRoute">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigNetworkRoutePrivate"
            c:type="GVirSandboxConfigNetworkRoutePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="42"/>
    </record>
    <record name="ConfigPrivate"
            c:type="GVirSandboxConfigPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config.h" line="40"/>
    </record>
    <class name="ConfigService"
           c:symbol-prefix="config_service"
           c:type="GVirSandboxConfigService"
           parent="Config"
           abstract="1"
           glib:type-name="GVirSandboxConfigService"
           glib:get-type="gvir_sandbox_config_service_get_type"
           glib:type-struct="ConfigServiceClass">
      <source-position filename="libvirt-sandbox-config-service.h" line="57"/>
      <field name="parent">
        <type name="Config" c:type="GVirSandboxConfig"/>
      </field>
      <field name="priv">
        <type name="ConfigServicePrivate"
              c:type="GVirSandboxConfigServicePrivate*"/>
      </field>
    </class>
    <record name="ConfigServiceClass"
            c:type="GVirSandboxConfigServiceClass"
            glib:is-gtype-struct-for="ConfigService">
      <source-position filename="libvirt-sandbox-config-service.h" line="57"/>
      <field name="parent_class">
        <type name="ConfigClass" c:type="GVirSandboxConfigClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ConfigServiceGeneric"
           c:symbol-prefix="config_service_generic"
           c:type="GVirSandboxConfigServiceGeneric"
           parent="ConfigService"
           glib:type-name="GVirSandboxConfigServiceGeneric"
           glib:get-type="gvir_sandbox_config_service_generic_get_type"
           glib:type-struct="ConfigServiceGenericClass">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_service_generic_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-service-generic.c"
             line="174">Create a new service application sandbox configuration</doc>
        <source-position filename="libvirt-sandbox-config-service-generic.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-service-generic.c"
               line="180">a new service sandbox config object</doc>
          <type name="ConfigServiceGeneric"
                c:type="GVirSandboxConfigServiceGeneric*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-service-generic.c"
                 line="176">the sandbox name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="set_command"
              c:identifier="gvir_sandbox_config_service_generic_set_command">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-service-generic.c"
             line="190">Set the path of the command to be run and its arguments. The @argv should
be a NULL terminated list</doc>
        <source-position filename="libvirt-sandbox-config-service-generic.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-service-generic.c"
                 line="192">the sandbox config</doc>
            <type name="ConfigServiceGeneric"
                  c:type="GVirSandboxConfigServiceGeneric*"/>
          </instance-parameter>
          <parameter name="argv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-service-generic.c"
                 line="193">the command path and arguments</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="ConfigService" c:type="GVirSandboxConfigService"/>
      </field>
      <field name="priv">
        <type name="ConfigServiceGenericPrivate"
              c:type="GVirSandboxConfigServiceGenericPrivate*"/>
      </field>
    </class>
    <record name="ConfigServiceGenericClass"
            c:type="GVirSandboxConfigServiceGenericClass"
            glib:is-gtype-struct-for="ConfigServiceGeneric">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigServiceClass"
              c:type="GVirSandboxConfigServiceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigServiceGenericPrivate"
            c:type="GVirSandboxConfigServiceGenericPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="40"/>
    </record>
    <record name="ConfigServicePrivate"
            c:type="GVirSandboxConfigServicePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-service.h" line="40"/>
    </record>
    <class name="ConfigServiceSystemd"
           c:symbol-prefix="config_service_systemd"
           c:type="GVirSandboxConfigServiceSystemd"
           parent="ConfigService"
           glib:type-name="GVirSandboxConfigServiceSystemd"
           glib:get-type="gvir_sandbox_config_service_systemd_get_type"
           glib:type-struct="ConfigServiceSystemdClass">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_config_service_systemd_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-config-service-systemd.c"
             line="179">Create a new service application sandbox configuration</doc>
        <source-position filename="libvirt-sandbox-config-service-systemd.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-service-systemd.c"
               line="185">a new service sandbox config object</doc>
          <type name="ConfigServiceSystemd"
                c:type="GVirSandboxConfigServiceSystemd*"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-config-service-systemd.c"
                 line="181">the sandbox name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_boot_target"
              c:identifier="gvir_sandbox_config_service_systemd_get_boot_target">
        <source-position filename="libvirt-sandbox-config-service-systemd.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-config-service-systemd.c"
               line="198">the boot target name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigServiceSystemd"
                  c:type="GVirSandboxConfigServiceSystemd*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_boot_target"
              c:identifier="gvir_sandbox_config_service_systemd_set_boot_target">
        <source-position filename="libvirt-sandbox-config-service-systemd.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="config" transfer-ownership="none">
            <type name="ConfigServiceSystemd"
                  c:type="GVirSandboxConfigServiceSystemd*"/>
          </instance-parameter>
          <parameter name="target" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="ConfigService" c:type="GVirSandboxConfigService"/>
      </field>
      <field name="priv">
        <type name="ConfigServiceSystemdPrivate"
              c:type="GVirSandboxConfigServiceSystemdPrivate*"/>
      </field>
    </class>
    <record name="ConfigServiceSystemdClass"
            c:type="GVirSandboxConfigServiceSystemdClass"
            glib:is-gtype-struct-for="ConfigServiceSystemd">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ConfigServiceClass"
              c:type="GVirSandboxConfigServiceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConfigServiceSystemdPrivate"
            c:type="GVirSandboxConfigServiceSystemdPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="40"/>
    </record>
    <class name="Console"
           c:symbol-prefix="console"
           c:type="GVirSandboxConsole"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GVirSandboxConsole"
           glib:get-type="gvir_sandbox_console_get_type"
           glib:type-struct="ConsoleClass">
      <source-position filename="libvirt-sandbox-console.h" line="75"/>
      <virtual-method name="attach" invoker="attach" throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
          <parameter name="localStdin" transfer-ownership="none">
            <type name="Gio.UnixInputStream" c:type="GUnixInputStream*"/>
          </parameter>
          <parameter name="localStdout" transfer-ownership="none">
            <type name="Gio.UnixOutputStream" c:type="GUnixOutputStream*"/>
          </parameter>
          <parameter name="localStderr" transfer-ownership="none">
            <type name="Gio.UnixOutputStream" c:type="GUnixOutputStream*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="closed">
        <source-position filename="libvirt-sandbox-console.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach" invoker="detach" throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="attach"
              c:identifier="gvir_sandbox_console_attach"
              throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
          <parameter name="localStdin" transfer-ownership="none">
            <type name="Gio.UnixInputStream" c:type="GUnixInputStream*"/>
          </parameter>
          <parameter name="localStdout" transfer-ownership="none">
            <type name="Gio.UnixOutputStream" c:type="GUnixOutputStream*"/>
          </parameter>
          <parameter name="localStderr" transfer-ownership="none">
            <type name="Gio.UnixOutputStream" c:type="GUnixOutputStream*"/>
          </parameter>
        </parameters>
      </method>
      <method name="attach_stderr"
              c:identifier="gvir_sandbox_console_attach_stderr"
              throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="attach_stdio"
              c:identifier="gvir_sandbox_console_attach_stdio"
              throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="detach"
              c:identifier="gvir_sandbox_console_detach"
              throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direct"
              c:identifier="gvir_sandbox_console_get_direct"
              glib:get-property="direct">
        <source-position filename="libvirt-sandbox-console.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_escape"
              c:identifier="gvir_sandbox_console_get_escape"
              glib:get-property="escape">
        <source-position filename="libvirt-sandbox-console.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="gchar" c:type="gchar"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="isolate"
              c:identifier="gvir_sandbox_console_isolate"
              throws="1">
        <source-position filename="libvirt-sandbox-console.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_direct" c:identifier="gvir_sandbox_console_set_direct">
        <source-position filename="libvirt-sandbox-console.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
          <parameter name="direct" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_escape" c:identifier="gvir_sandbox_console_set_escape">
        <source-position filename="libvirt-sandbox-console.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="Console" c:type="GVirSandboxConsole*"/>
          </instance-parameter>
          <parameter name="escape" transfer-ownership="none">
            <type name="gchar" c:type="gchar"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="LibvirtGObject.Connection"/>
      </property>
      <property name="devname"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="direct"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_direct"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="domain"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="LibvirtGObject.Domain"/>
      </property>
      <property name="escape"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_escape"
                default-value="93">
        <type name="gchar" c:type="gchar"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConsolePrivate" c:type="GVirSandboxConsolePrivate*"/>
      </field>
      <glib:signal name="closed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ConsoleClass"
            c:type="GVirSandboxConsoleClass"
            glib:is-gtype-struct-for="Console">
      <source-position filename="libvirt-sandbox-console.h" line="75"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="libvirt-sandbox-console.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="console" transfer-ownership="none">
              <type name="Console" c:type="GVirSandboxConsole*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="attach">
        <callback name="attach" throws="1">
          <source-position filename="libvirt-sandbox-console.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="console" transfer-ownership="none">
              <type name="Console" c:type="GVirSandboxConsole*"/>
            </parameter>
            <parameter name="localStdin" transfer-ownership="none">
              <type name="Gio.UnixInputStream" c:type="GUnixInputStream*"/>
            </parameter>
            <parameter name="localStdout" transfer-ownership="none">
              <type name="Gio.UnixOutputStream" c:type="GUnixOutputStream*"/>
            </parameter>
            <parameter name="localStderr" transfer-ownership="none">
              <type name="Gio.UnixOutputStream" c:type="GUnixOutputStream*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach">
        <callback name="detach" throws="1">
          <source-position filename="libvirt-sandbox-console.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="console" transfer-ownership="none">
              <type name="Console" c:type="GVirSandboxConsole*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConsolePrivate"
            c:type="GVirSandboxConsolePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-console.h" line="46"/>
    </record>
    <class name="ConsoleRaw"
           c:symbol-prefix="console_raw"
           c:type="GVirSandboxConsoleRaw"
           parent="Console"
           glib:type-name="GVirSandboxConsoleRaw"
           glib:get-type="gvir_sandbox_console_raw_get_type"
           glib:type-struct="ConsoleRawClass">
      <source-position filename="libvirt-sandbox-console-raw.h" line="59"/>
      <constructor name="new" c:identifier="gvir_sandbox_console_raw_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-console-raw.c"
             line="149">Create a new sandbox raw console from the specified configuration</doc>
        <source-position filename="libvirt-sandbox-console-raw.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-console-raw.c"
               line="157">a new sandbox console object</doc>
          <type name="ConsoleRaw" c:type="GVirSandboxConsoleRaw*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-console-raw.c"
                 line="151">the libvirt connection</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-console-raw.c"
                 line="152">the libvirt domain whose console_raw to run</doc>
            <type name="LibvirtGObject.Domain" c:type="GVirDomain*"/>
          </parameter>
          <parameter name="devname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-console-raw.c"
                 line="153">the console to connect to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="closed">
        <source-position filename="libvirt-sandbox-console-raw.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="ConsoleRaw" c:type="GVirSandboxConsoleRaw*"/>
          </instance-parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="Console" c:type="GVirSandboxConsole"/>
      </field>
      <field name="priv">
        <type name="ConsoleRawPrivate" c:type="GVirSandboxConsoleRawPrivate*"/>
      </field>
    </class>
    <record name="ConsoleRawClass"
            c:type="GVirSandboxConsoleRawClass"
            glib:is-gtype-struct-for="ConsoleRaw">
      <source-position filename="libvirt-sandbox-console-raw.h" line="59"/>
      <field name="parent_class">
        <type name="ConsoleClass" c:type="GVirSandboxConsoleClass"/>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="libvirt-sandbox-console-raw.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="console" transfer-ownership="none">
              <type name="ConsoleRaw" c:type="GVirSandboxConsoleRaw*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConsoleRawPrivate"
            c:type="GVirSandboxConsoleRawPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-console-raw.h" line="40"/>
    </record>
    <class name="ConsoleRpc"
           c:symbol-prefix="console_rpc"
           c:type="GVirSandboxConsoleRpc"
           parent="Console"
           glib:type-name="GVirSandboxConsoleRpc"
           glib:get-type="gvir_sandbox_console_rpc_get_type"
           glib:type-struct="ConsoleRpcClass">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="60"/>
      <constructor name="new" c:identifier="gvir_sandbox_console_rpc_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-console-rpc.c"
             line="305">Create a new sandbox rpc console from the specified configuration</doc>
        <source-position filename="libvirt-sandbox-console-rpc.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-console-rpc.c"
               line="313">a new sandbox console object</doc>
          <type name="ConsoleRpc" c:type="GVirSandboxConsoleRpc*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-console-rpc.c"
                 line="307">the libvirt connection</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
          <parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-console-rpc.c"
                 line="308">the libvirt domain whose console_rpc to run</doc>
            <type name="LibvirtGObject.Domain" c:type="GVirDomain*"/>
          </parameter>
          <parameter name="devname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-console-rpc.c"
                 line="309">the console to connect to</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="closed">
        <source-position filename="libvirt-sandbox-console-rpc.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="ConsoleRpc" c:type="GVirSandboxConsoleRpc*"/>
          </instance-parameter>
          <parameter name="err" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="exited">
        <source-position filename="libvirt-sandbox-console-rpc.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="console" transfer-ownership="none">
            <type name="ConsoleRpc" c:type="GVirSandboxConsoleRpc*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <type name="gint" c:type="int"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent">
        <type name="Console" c:type="GVirSandboxConsole"/>
      </field>
      <field name="priv">
        <type name="ConsoleRpcPrivate" c:type="GVirSandboxConsoleRpcPrivate*"/>
      </field>
      <glib:signal name="exited" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ConsoleRpcClass"
            c:type="GVirSandboxConsoleRpcClass"
            glib:is-gtype-struct-for="ConsoleRpc">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="60"/>
      <field name="parent_class">
        <type name="ConsoleClass" c:type="GVirSandboxConsoleClass"/>
      </field>
      <field name="exited">
        <callback name="exited">
          <source-position filename="libvirt-sandbox-console-rpc.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="console" transfer-ownership="none">
              <type name="ConsoleRpc" c:type="GVirSandboxConsoleRpc*"/>
            </parameter>
            <parameter name="status" transfer-ownership="none">
              <type name="gint" c:type="int"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="closed">
        <callback name="closed">
          <source-position filename="libvirt-sandbox-console-rpc.h" line="57"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="console" transfer-ownership="none">
              <type name="ConsoleRpc" c:type="GVirSandboxConsoleRpc*"/>
            </parameter>
            <parameter name="err" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ConsoleRpcPrivate"
            c:type="GVirSandboxConsoleRpcPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="40"/>
    </record>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="GVirSandboxContext"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GVirSandboxContext"
           glib:get-type="gvir_sandbox_context_get_type"
           glib:type-struct="ContextClass">
      <source-position filename="libvirt-sandbox-context.h" line="65"/>
      <virtual-method name="attach" invoker="attach" throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="detach" invoker="detach" throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="start" invoker="start" throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stop" invoker="stop" throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="attach"
              c:identifier="gvir_sandbox_context_attach"
              throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="detach"
              c:identifier="gvir_sandbox_context_detach"
              throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="gvir_sandbox_context_get_config"
              glib:get-property="config">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-context.c"
             line="222">Retrieves the sandbox configuration</doc>
        <source-position filename="libvirt-sandbox-context.h" line="69"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context.c"
               line="228">the current configuration</doc>
          <type name="Config" c:type="GVirSandboxConfig*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context.c"
                 line="224">the sandbox context</doc>
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_connection"
              c:identifier="gvir_sandbox_context_get_connection"
              glib:get-property="connection">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-context.c"
             line="260">Retrieves the sandbox connection</doc>
        <source-position filename="libvirt-sandbox-context.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context.c"
               line="266">the current connection or NULL</doc>
          <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context.c"
                 line="262">the sandbox context</doc>
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain"
              c:identifier="gvir_sandbox_context_get_domain"
              glib:get-property="domain"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-context.c"
             line="238">Retrieves the sandbox domain (if running)</doc>
        <source-position filename="libvirt-sandbox-context.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context.c"
               line="244">the current domain or NULL</doc>
          <type name="LibvirtGObject.Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context.c"
                 line="240">the sandbox context</doc>
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_log_console"
              c:identifier="gvir_sandbox_context_get_log_console"
              throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="82"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context.c"
               line="352">the sandbox console (or NULL)</doc>
          <type name="Console" c:type="GVirSandboxConsole*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context.c"
                 line="350">the sandbox context</doc>
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_shell_console"
              c:identifier="gvir_sandbox_context_get_shell_console"
              throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="84"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context.c"
               line="385">the sandbox console (or NULL)</doc>
          <type name="Console" c:type="GVirSandboxConsole*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context.c"
                 line="383">the sandbox context</doc>
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_attached"
              c:identifier="gvir_sandbox_context_is_attached">
        <source-position filename="libvirt-sandbox-context.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start"
              c:identifier="gvir_sandbox_context_start"
              throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="gvir_sandbox_context_stop" throws="1">
        <source-position filename="libvirt-sandbox-context.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="Context" c:type="GVirSandboxContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="config"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_config">
        <type name="Config"/>
      </property>
      <property name="connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_connection">
        <type name="LibvirtGObject.Connection"/>
      </property>
      <property name="domain"
                writable="1"
                transfer-ownership="none"
                getter="get_domain">
        <type name="LibvirtGObject.Domain"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ContextPrivate" c:type="GVirSandboxContextPrivate*"/>
      </field>
    </class>
    <record name="ContextClass"
            c:type="GVirSandboxContextClass"
            glib:is-gtype-struct-for="Context">
      <source-position filename="libvirt-sandbox-context.h" line="65"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="start">
        <callback name="start" throws="1">
          <source-position filename="libvirt-sandbox-context.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="ctxt" transfer-ownership="none">
              <type name="Context" c:type="GVirSandboxContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stop">
        <callback name="stop" throws="1">
          <source-position filename="libvirt-sandbox-context.h" line="60"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="ctxt" transfer-ownership="none">
              <type name="Context" c:type="GVirSandboxContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="attach">
        <callback name="attach" throws="1">
          <source-position filename="libvirt-sandbox-context.h" line="61"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="ctxt" transfer-ownership="none">
              <type name="Context" c:type="GVirSandboxContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="detach">
        <callback name="detach" throws="1">
          <source-position filename="libvirt-sandbox-context.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="ctxt" transfer-ownership="none">
              <type name="Context" c:type="GVirSandboxContext*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="ContextInteractive"
           c:symbol-prefix="context_interactive"
           c:type="GVirSandboxContextInteractive"
           parent="Context"
           glib:type-name="GVirSandboxContextInteractive"
           glib:get-type="gvir_sandbox_context_interactive_get_type"
           glib:type-struct="ContextInteractiveClass">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="57"/>
      <constructor name="new"
                   c:identifier="gvir_sandbox_context_interactive_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-context-interactive.c"
             line="360">Create a new interactive application sandbox context</doc>
        <source-position filename="libvirt-sandbox-context-interactive.h"
                         line="61"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context-interactive.c"
               line="367">a new interactive sandbox context object</doc>
          <type name="ContextInteractive"
                c:type="GVirSandboxContextInteractive*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context-interactive.c"
                 line="362">the libvirt connection</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context-interactive.c"
                 line="363">the initial configuratoion</doc>
            <type name="ConfigInteractive"
                  c:type="GVirSandboxConfigInteractive*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_app_console"
              c:identifier="gvir_sandbox_context_interactive_get_app_console"
              throws="1">
        <source-position filename="libvirt-sandbox-context-interactive.h"
                         line="64"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context-interactive.c"
               line="383">the sandbox console (or NULL)</doc>
          <type name="Console" c:type="GVirSandboxConsole*"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context-interactive.c"
                 line="381">the sandbox context</doc>
            <type name="ContextInteractive"
                  c:type="GVirSandboxContextInteractive*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Context" c:type="GVirSandboxContext"/>
      </field>
      <field name="priv">
        <type name="ContextInteractivePrivate"
              c:type="GVirSandboxContextInteractivePrivate*"/>
      </field>
    </class>
    <record name="ContextInteractiveClass"
            c:type="GVirSandboxContextInteractiveClass"
            glib:is-gtype-struct-for="ContextInteractive">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="57"/>
      <field name="parent_class">
        <type name="ContextClass" c:type="GVirSandboxContextClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ContextInteractivePrivate"
            c:type="GVirSandboxContextInteractivePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="40"/>
    </record>
    <record name="ContextPrivate"
            c:type="GVirSandboxContextPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-context.h" line="42"/>
    </record>
    <class name="ContextService"
           c:symbol-prefix="context_service"
           c:type="GVirSandboxContextService"
           parent="Context"
           glib:type-name="GVirSandboxContextService"
           glib:get-type="gvir_sandbox_context_service_get_type"
           glib:type-struct="ContextServiceClass">
      <source-position filename="libvirt-sandbox-context-service.h" line="60"/>
      <constructor name="new" c:identifier="gvir_sandbox_context_service_new">
        <doc xml:space="preserve"
             filename="libvirt-sandbox-context-service.c"
             line="370">Create a new service application sandbox context</doc>
        <source-position filename="libvirt-sandbox-context-service.h"
                         line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-context-service.c"
               line="377">a new service sandbox context object</doc>
          <type name="ContextService" c:type="GVirSandboxContextService*"/>
        </return-value>
        <parameters>
          <parameter name="connection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context-service.c"
                 line="372">the libvirt connection</doc>
            <type name="LibvirtGObject.Connection" c:type="GVirConnection*"/>
          </parameter>
          <parameter name="config" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-sandbox-context-service.c"
                 line="373">the initial configuratoion</doc>
            <type name="ConfigService" c:type="GVirSandboxConfigService*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="define" invoker="define" throws="1">
        <source-position filename="libvirt-sandbox-context-service.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="ContextService" c:type="GVirSandboxContextService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="undefine" invoker="undefine" throws="1">
        <source-position filename="libvirt-sandbox-context-service.h"
                         line="57"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="ContextService" c:type="GVirSandboxContextService*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="define"
              c:identifier="gvir_sandbox_context_service_define"
              throws="1">
        <source-position filename="libvirt-sandbox-context-service.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="ContextService" c:type="GVirSandboxContextService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undefine"
              c:identifier="gvir_sandbox_context_service_undefine"
              throws="1">
        <source-position filename="libvirt-sandbox-context-service.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="ctxt" transfer-ownership="none">
            <type name="ContextService" c:type="GVirSandboxContextService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="Context" c:type="GVirSandboxContext"/>
      </field>
      <field name="priv">
        <type name="ContextServicePrivate"
              c:type="GVirSandboxContextServicePrivate*"/>
      </field>
    </class>
    <record name="ContextServiceClass"
            c:type="GVirSandboxContextServiceClass"
            glib:is-gtype-struct-for="ContextService">
      <source-position filename="libvirt-sandbox-context-service.h" line="60"/>
      <field name="parent_class">
        <type name="ContextClass" c:type="GVirSandboxContextClass"/>
      </field>
      <field name="define">
        <callback name="define" throws="1">
          <source-position filename="libvirt-sandbox-context-service.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="ctxt" transfer-ownership="none">
              <type name="ContextService" c:type="GVirSandboxContextService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="undefine">
        <callback name="undefine" throws="1">
          <source-position filename="libvirt-sandbox-context-service.h"
                           line="57"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="ctxt" transfer-ownership="none">
              <type name="ContextService" c:type="GVirSandboxContextService*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ContextServicePrivate"
            c:type="GVirSandboxContextServicePrivate"
            disguised="1"
            opaque="1">
      <source-position filename="libvirt-sandbox-context-service.h" line="40"/>
    </record>
    <function-macro name="IS_BUILDER"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_CONTAINER"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_CONTAINER"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_CONTAINER_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_CONTAINER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-container.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_INITRD"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_INITRD"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_INITRD_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_INITRD_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-initrd.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_MACHINE"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_MACHINE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_BUILDER_MACHINE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_BUILDER_MACHINE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-builder-machine.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_DISK"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_DISK"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-disk.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_DISK_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_DISK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-disk.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_INITRD"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_INITRD"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_INITRD_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_INITRD_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-initrd.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_INTERACTIVE"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_INTERACTIVE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_INTERACTIVE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_INTERACTIVE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-interactive.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_FILE"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_FILE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_FILE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_FILE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-file.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_GUEST_BIND"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_GUEST_BIND"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_GUEST_BIND_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_GUEST_BIND_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-guest-bind.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_HOST_BIND"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_HOST_BIND"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_HOST_BIND_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_HOST_BIND_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-bind.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_HOST_IMAGE"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_HOST_IMAGE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_HOST_IMAGE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_HOST_IMAGE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-host-image.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_RAM"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_RAM"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_MOUNT_RAM_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_MOUNT_RAM_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-mount-ram.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_ADDRESS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_ADDRESS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_ADDRESS_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_ADDRESS_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-address.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_FILTERREF"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_FILTERREF"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_FILTERREF_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_FILTERREF_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref.h"
                       line="37"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_FILTERREF_PARAMETER"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_FILTERREF_PARAMETER"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_FILTERREF_PARAMETER_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_FILTERREF_PARAMETER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-filterref-parameter.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_ROUTE"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_ROUTE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_NETWORK_ROUTE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_NETWORK_ROUTE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-network-route.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_SERVICE"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_SERVICE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_SERVICE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_SERVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_SERVICE_GENERIC"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_SERVICE_GENERIC"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_SERVICE_GENERIC_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_SERVICE_GENERIC_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-generic.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_SERVICE_SYSTEMD"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_SERVICE_SYSTEMD"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONFIG_SERVICE_SYSTEMD_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONFIG_SERVICE_SYSTEMD_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-config-service-systemd.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONSOLE"
                    c:identifier="GVIR_SANDBOX_IS_CONSOLE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONSOLE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONSOLE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console.h" line="39"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONSOLE_RAW"
                    c:identifier="GVIR_SANDBOX_IS_CONSOLE_RAW"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-raw.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONSOLE_RAW_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONSOLE_RAW_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-raw.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONSOLE_RPC"
                    c:identifier="GVIR_SANDBOX_IS_CONSOLE_RPC"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONSOLE_RPC_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONSOLE_RPC_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-console-rpc.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT"
                    c:identifier="GVIR_SANDBOX_IS_CONTEXT"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONTEXT_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_INTERACTIVE"
                    c:identifier="GVIR_SANDBOX_IS_CONTEXT_INTERACTIVE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_INTERACTIVE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONTEXT_INTERACTIVE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-interactive.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_SERVICE"
                    c:identifier="GVIR_SANDBOX_IS_CONTEXT_SERVICE"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-service.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONTEXT_SERVICE_CLASS"
                    c:identifier="GVIR_SANDBOX_IS_CONTEXT_SERVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-sandbox-context-service.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function name="init" c:identifier="gvir_sandbox_init">
      <source-position filename="libvirt-sandbox-main.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-main.c"
               line="36">pointer to application's argc</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-main.c"
               line="37">pointer to application's argv</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_check"
              c:identifier="gvir_sandbox_init_check"
              throws="1">
      <source-position filename="libvirt-sandbox-main.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-main.c"
               line="61">pointer to application's argc</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libvirt-sandbox-main.c"
               line="62">pointer to application's argv</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <docsection name="libvirt-sandbox-builder">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-builder.c"
           line="30">Provides a base class for constructing sandboxes

The GVirSandboxBuilder objects provides the basic framework for creating
#GVirDomain instances from #GVirSandboxConfig instances.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-builder-container">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-builder-container.c"
           line="31">Provides an object for creating sandboxes using container virtualization

The GVirSandboxBuilderContainer object provides a way to builder sandboxes
using OS container virtualization technologies such as LXC.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-builder-initrd">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-builder-initrd.c"
           line="33">Provides an object for constructing kernel ramdisks

The GVirSandboxBuilderInitrd object provides the support
required to dynically creat minimal footprint kernel
ramdisks for booting virtual machine based sandboxes.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-builder-machine">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-builder-machine.c"
           line="33">Provides an object for creating sandboxes using machine virtualization

The GVirSandboxBuilderContainer object provides a way to builder sandboxes
using full machine virtualization technologies such as KVM.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config.c"
           line="34">Provides a base object to store configurations for the application sandbox

The GVirSandboxConfig object stores the basic information required to
create application sandboxes with a simple text based console.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-disk">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-disk.c"
           line="28">Provides an object to store information about a disk attachment in the sandbox</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-initrd">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-initrd.c"
           line="28">Provides an object to store information about a kernel ramdisk

The GVirSandboxConfigInitrd object stores the information required
to build a kernel ramdisk to use when booting a virtual machine
as a sandbox.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-interactive">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-interactive.c"
           line="28">Provides an object to store configuration details for a interactive config

The GVirSandboxConfigInteractive object extends #GVirSandboxConfig to store
the extra information required to setup a _interactive desktop application
sandbox.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-mount">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-mount.c"
           line="28">Provides an object to store information about a filesystem attachment in the sandbox

The GVirSandboxConfigMount object stores information required to attach
a host filesystem to the application sandbox. The sandbox starts off with
a complete view of the host filesystem. This object allows a specific
area of the host filesystem to be hidden and replaced with alternate
content.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-mount-file">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-mount-file.c"
           line="28">Provides an object to store information about a filesystem attachment in the sandbox

The GVirSandboxConfigMount object stores information required to attach
a host filesystem to the application sandbox. The sandbox starts off with
a complete view of the host filesystem. This object allows a specific
area of the host filesystem to be hidden and replaced with alternate
content.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-mount-guest-bind">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-mount-guest-bind.c"
           line="28">Provides an object to store information about a bindsystem attachment in the sandbox

The GVirSandboxConfigMount object stores information required to attach
a guest bindsystem to the application sandbox. The sandbox starts off with
a complete view of the guest bindsystem. This object allows a specific
area of the guest bindsystem to be hidden and replaced with alternate
content.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-mount-host-bind">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-mount-host-bind.c"
           line="28">Provides an object to store information about a bindsystem attachment in the sandbox

The GVirSandboxConfigMount object stores information required to attach
a host bindsystem to the application sandbox. The sandbox starts off with
a complete view of the host bindsystem. This object allows a specific
area of the host bindsystem to be hidden and replaced with alternate
content.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-mount-image">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-mount-host-image.c"
           line="28">Provides an object to store information about a imagesystem attachment in the sandbox

The GVirSandboxConfigMount object stores information required to attach
a host imagesystem to the application sandbox. The sandbox starts off with
a complete view of the host imagesystem. This object allows a specific
area of the host imagesystem to be hidden and replaced with alternate
content.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-mount-ram">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-mount-ram.c"
           line="28">Provides an object to store information about a filesystem attachment in the sandbox

The GVirSandboxConfigMount object stores information required to attach
a host filesystem to the application sandbox. The sandbox starts off with
a complete view of the host filesystem. This object allows a specific
area of the host filesystem to be hidden and replaced with alternate
content.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-network">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-network.c"
           line="28">Provides an object to store information about a kernel ramdisk

The GVirSandboxConfigNetwork object stores the information required
to build a kernel ramdisk to use when booting a virtual machine
as a sandbox.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-network-filterref">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-network-filterref.c"
           line="29">Provides an object to store the name of the filter reference.

The GVirSandboxConfigNetworkFilterref object stores the name of the filter
references associated with a network interface.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-network-filterref-parameter">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-network-filterref-parameter.c"
           line="28">Provides an object to store filter parameter name and value.

The GVirSandboxConfigNetworkFilterrefParameter object stores a
name and value required to set a single parameter of a filter reference.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-network_address">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-network-address.c"
           line="28">Provides an object to store information about a network interface address

The GVirSandboxConfigNetworkAddress object stores the information required
to configure an address on a network interface. This compises the primary
address, broadcast address and network address.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-network_route">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-network-route.c"
           line="28">Provides an object to store information about a network interface route

The GVirSandboxConfigNetworkRoute object stores the information required
to configure an route on a network interface. This compises the primary
route, broadcast route and network route.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-service">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-service.c"
           line="28">Provides an object to store configuration details for a service config

The GVirSandboxConfigService object extends #GVirSandboxConfig to store
the extra information required to setup a service sandbox</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-service-generic">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-service-generic.c"
           line="28">Provides an object to store configuration details for a generic service config

The GVirSandboxConfigServiceGeneric object extends #GVirSandboxConfigService to store
the extra information required to setup a service sandbox with generic</doc>
    </docsection>
    <docsection name="libvirt-sandbox-config-service-systemd">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-config-service-systemd.c"
           line="28">Provides an object to store configuration details for a systemd service config

The GVirSandboxConfigServiceSystemd object extends #GVirSandboxConfigService to store
the extra information required to setup a service sandbox with systemd</doc>
    </docsection>
    <docsection name="libvirt-sandbox-console">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-console.c"
           line="29">Provides an object to interface to the text mode console of the sandbox

The GVirSandboxConsole object provides support for interfacing to the
text mode console of the sandbox. It forwards I/O between the #GVirStream
associated with the virtual machine's console and a local console
represented by #GUnixInputStream and #GUnixOutputStream objects.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-console-raw">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-console-raw.c"
           line="37">Provides an object to interface to the text mode console of the sandbox

The GVirSandboxConsole object provides support for interfacing to the
text mode console of the sandbox. It forwards I/O between the #GVirStream
associated with the virtual machine's console and a local console
represented by #GUnixInputStream and #GUnixOutputStream objects.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-console-rpc">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-console-rpc.c"
           line="36">Provides an object to interface to the text mode console of the sandbox

The GVirSandboxConsole object provides support for interfacing to the
text mode console of the sandbox. It forwards I/O between the #GVirStream
associated with the virtual machine's console and a local console
represented by #GUnixInputStream and #GUnixOutputStream objects.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-context">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-context.c"
           line="32">Provides a base class for implementing console based application sandboxes

The GVirSandboxContext object takes a #GVirSandboxConfig instance, passing it
to #GVirSandboxBuilder instance to create a virtual machine, and then provides
access to a #GVirSandboxConsole instance for interacting with the sandboxed
application's stdio.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-context-interactive">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-context-interactive.c"
           line="31">Provides a base class for implementing interactive desktop application sandboxes

The GVirSandboxContextInteractive object extends the functionality provided by
#GVirSandboxContext to allow the application to display output in a interactive
desktop.</doc>
    </docsection>
    <docsection name="libvirt-sandbox-context-service">
      <doc xml:space="preserve"
           filename="libvirt-sandbox-context-service.c"
           line="29">Provides a base class for implementing service desktop application sandboxes

The GVirSandboxContextService object extends the functionality provided by
#GVirSandboxContext to allow the application to display output in a service
desktop.</doc>
    </docsection>
    <function name="util_disk_format_from_str"
              c:identifier="gvir_sandbox_util_disk_format_from_str"
              throws="1">
      <source-position filename="libvirt-sandbox-util.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_guess_image_format"
              c:identifier="gvir_sandbox_util_guess_image_format"
              throws="1">
      <source-position filename="libvirt-sandbox-util.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="path" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
