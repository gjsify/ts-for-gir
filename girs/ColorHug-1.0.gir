<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Colord" version="1.0"/>
  <include name="GObject" version="2.0"/>
  <include name="GUsb" version="1.0"/>
  <include name="Gio" version="2.0"/>
  <package name="colorhug"/>
  <c:include name="colorhug.h"/>
  <namespace name="ColorHug"
             version="1.0"
             shared-library="libcolorhug.so.2"
             c:identifier-prefixes="Ch"
             c:symbol-prefixes="ch">
    <alias name="Cmd" c:type="ChCmd">
      <type name="guint8" c:type="guint8"/>
    </alias>
    <constant name="BUFFER_INPUT_CMD" value="0" c:type="CH_BUFFER_INPUT_CMD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUFFER_INPUT_DATA" value="1" c:type="CH_BUFFER_INPUT_DATA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUFFER_OUTPUT_CMD" value="1" c:type="CH_BUFFER_OUTPUT_CMD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUFFER_OUTPUT_DATA"
              value="2"
              c:type="CH_BUFFER_OUTPUT_DATA">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="BUFFER_OUTPUT_RETVAL"
              value="0"
              c:type="CH_BUFFER_OUTPUT_RETVAL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_DESCRIPTION_LEN"
              value="23"
              c:type="CH_CALIBRATION_DESCRIPTION_LEN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_INDEX_CRT"
              value="1"
              c:type="CH_CALIBRATION_INDEX_CRT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_INDEX_FACTORY_ONLY"
              value="0"
              c:type="CH_CALIBRATION_INDEX_FACTORY_ONLY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_INDEX_LCD"
              value="0"
              c:type="CH_CALIBRATION_INDEX_LCD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_INDEX_LED"
              value="3"
              c:type="CH_CALIBRATION_INDEX_LED">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_INDEX_MAX"
              value="6"
              c:type="CH_CALIBRATION_INDEX_MAX">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_INDEX_PROJECTOR"
              value="2"
              c:type="CH_CALIBRATION_INDEX_PROJECTOR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_MAX" value="64" c:type="CH_CALIBRATION_MAX">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_SPECTRAL"
              value="65535"
              c:type="CH_CALIBRATION_SPECTRAL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_TYPE_ALL"
              value="255"
              c:type="CH_CALIBRATION_TYPE_ALL">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_TYPE_CRT"
              value="2"
              c:type="CH_CALIBRATION_TYPE_CRT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_TYPE_LCD"
              value="1"
              c:type="CH_CALIBRATION_TYPE_LCD">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_TYPE_LED"
              value="8"
              c:type="CH_CALIBRATION_TYPE_LED">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CALIBRATION_TYPE_PROJECTOR"
              value="4"
              c:type="CH_CALIBRATION_TYPE_PROJECTOR">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CCD_SPECTRAL_RESOLUTION"
              value="1024"
              c:type="CH_CCD_SPECTRAL_RESOLUTION">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_BOOT_FLASH"
              value="39"
              c:type="CH_CMD_BOOT_FLASH"
              version="0.1.29">
      <doc xml:space="preserve">Boot into to the flash memory.

IN:  [1:cmd]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ×
ColorHug2      |      ✓       |      ×
ColorHug+      |      ✓       |      ×
ColorHugALS    |      ✓       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_CLEAR_ERROR"
              value="97"
              c:type="CH_CMD_CLEAR_ERROR"
              version="1.3.1">
      <doc xml:space="preserve">Clears any recorded error on the device.

PROTOCOLv2:
bRequest:   [cmd]
wValue:     0x00
wIndex:     interface
wLength:    0x00
Direction:  DEVICE-&gt;HOST
Data:       []

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_ERASE_FLASH"
              value="41"
              c:type="CH_CMD_ERASE_FLASH"
              version="0.1.29">
      <doc xml:space="preserve">Erases flash memory before a write is done.
Erasing flash can only be done in 1k byte chunks and should be
aligned to 1k.

IN:  [1:cmd][2:address][2:length]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ×
ColorHug2      |      ✓       |      ×
ColorHug+      |      ✓       |      ×
ColorHugALS    |      ✓       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_ADC_CALIBRATION_NEG"
              value="82"
              c:type="CH_CMD_GET_ADC_CALIBRATION_NEG"
              version="0.1.31">
      <doc xml:space="preserve">Gets the value of the Vref- ADC adjustment.
@vref is a packed float.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:vref]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_ADC_CALIBRATION_POS"
              value="81"
              c:type="CH_CMD_GET_ADC_CALIBRATION_POS"
              version="0.1.31">
      <doc xml:space="preserve">Gets the value of the Vref+ ADC adjustment.
@vref is a packed float.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:vref]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_CALIBRATION"
              value="9"
              c:type="CH_CMD_GET_CALIBRATION"
              version="0.1.29">
      <doc xml:space="preserve">Gets the calibration matrix. The description does not have to be NULL
terminated.

@types is a bitmask which corresponds to:

bit:
 0     Can be used with LCD panels
 1     Can be used with CRT monitors
 2     Can be used with projectors
 3     Can be used with LED panels
 4-7   Reserved for future use

IN:  [1:cmd][2:index]
OUT: [1:retval][1:cmd][2*9:matrix_value][1:types][23:description]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_CALIBRATION_MAP"
              value="46"
              c:type="CH_CMD_GET_CALIBRATION_MAP"
              version="0.1.29">
      <doc xml:space="preserve">Get the mappings from default calibration type to calibration
indexes.

The calibration types are as follows:
LCD		= 0
CRT		= 1
Projector	= 2
LED		= 3
Custom1	= 4
Custom2	= 5

In the future CustomX may be renamed to another display technology,
e.g. e-ink.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][6*2:types]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_CCD_CALIBRATION"
              value="83"
              c:type="CH_CMD_GET_CCD_CALIBRATION"
              version="0.1.31">
      <doc xml:space="preserve">Gets the spectral indexes for the RGB calibration which are values between 0
and %CH_CCD_SPECTRAL_RESOLUTION pointing to the dominant peak for the color.
Red is nominally 625nm, green 520nm and blue 465nm.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][2:red-idx][2:green-idx][2:blue-idx]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_COLOR_SELECT"
              value="1"
              c:type="CH_CMD_GET_COLOR_SELECT"
              version="0.1.29">
      <doc xml:space="preserve">Get the color select state.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][1:color_select]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_DAC_VALUE"
              value="60"
              c:type="CH_CMD_GET_DAC_VALUE"
              version="1.1.6">
      <doc xml:space="preserve">Get the DAC value. @scale is a packed float, where 1.0f is 3.3V

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:value]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_DARK_OFFSETS"
              value="15"
              c:type="CH_CMD_GET_DARK_OFFSETS"
              version="0.1.29">
      <doc xml:space="preserve">Get the dark offsets.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][2:red][2:green][2:blue]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_ERROR"
              value="96"
              c:type="CH_CMD_GET_ERROR"
              version="1.3.1">
      <doc xml:space="preserve">Gets any recorded error from the device.

PROTOCOLv2:
bRequest:   [cmd]
wValue:     0x00
wIndex:     interface
wLength:    0x00
Direction:  DEVICE-&gt;HOST
Data:       [1:error][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_FIRMWARE_VERSION"
              value="7"
              c:type="CH_CMD_GET_FIRMWARE_VERSION"
              version="0.1.29">
      <doc xml:space="preserve">Gets the firmware version.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][2:major][2:minor][2:micro]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ✓
ColorHug2      |      ✓       |      ✓
ColorHug+      |      ✓       |      ✓
ColorHugALS    |      ✓       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_HARDWARE_VERSION"
              value="48"
              c:type="CH_CMD_GET_HARDWARE_VERSION"
              version="0.1.29">
      <doc xml:space="preserve">Get the hardware version.

The hardware versions are as follows:
0x00		= Pre-production hardware
0x01		= ColorHug
0x02		= ColorHug2
0x03		= ColorHug+
0x04		= ColorHugALS
0x05-0x0f	= Reserved for future use

IN:  [1:cmd]
OUT: [1:retval][1:cmd][1:hw_version]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ✓
ColorHug2      |      ✓       |      ✓
ColorHug+      |      ✓       |      ✓
ColorHugALS    |      ✓       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_ILLUMINANTS"
              value="21"
              c:type="CH_CMD_GET_ILLUMINANTS"
              version="1.3.4">
      <doc xml:space="preserve">Get the illuminant state.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][1:illuminants]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_INTEGRAL_TIME"
              value="5"
              c:type="CH_CMD_GET_INTEGRAL_TIME"
              version="0.1.29">
      <doc xml:space="preserve">Gets the integral time.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][2:integral_time]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_LEDS"
              value="13"
              c:type="CH_CMD_GET_LEDS"
              version="0.1.29">
      <doc xml:space="preserve">Get the LED state.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][1:led_state]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ✓       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_MEASURE_MODE"
              value="55"
              c:type="CH_CMD_GET_MEASURE_MODE"
              version="0.1.29">
      <doc xml:space="preserve">Gets the measurement mode.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][1:measure_mode]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_MULTIPLIER"
              value="3"
              c:type="CH_CMD_GET_MULTIPLIER"
              version="0.1.29">
      <doc xml:space="preserve">Gets the multiplier value.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][1:multiplier_value]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_OWNER_EMAIL"
              value="19"
              c:type="CH_CMD_GET_OWNER_EMAIL"
              version="0.1.29">
      <doc xml:space="preserve">Get User's Email Address

IN:  [1:cmd]
OUT: [1:retval][1:cmd][60:owner-email]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_OWNER_NAME"
              value="17"
              c:type="CH_CMD_GET_OWNER_NAME"
              version="0.1.29">
      <doc xml:space="preserve">Get User's Name

IN:  [1:cmd]
OUT: [1:retval][1:cmd][60:owner-name]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_PCB_ERRATA"
              value="51"
              c:type="CH_CMD_GET_PCB_ERRATA"
              version="0.1.29">
      <doc xml:space="preserve">Gets the board errata value.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][2:pcb_errata]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_POST_SCALE"
              value="42"
              c:type="CH_CMD_GET_POST_SCALE"
              version="0.1.29">
      <doc xml:space="preserve">Get the post XYZ scaling constant. @scale is a packed float.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:scale]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_PRE_SCALE"
              value="44"
              c:type="CH_CMD_GET_PRE_SCALE"
              version="0.1.29">
      <doc xml:space="preserve">Get the pre XYZ scaling constant. @scale is a packed float.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:scale]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_REMOTE_HASH"
              value="53"
              c:type="CH_CMD_GET_REMOTE_HASH"
              version="0.1.29">
      <doc xml:space="preserve">Gets the remote hash which is used to get the last profile saved
to a public web service.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][20:sha1_hash]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_SERIAL_NUMBER"
              value="11"
              c:type="CH_CMD_GET_SERIAL_NUMBER"
              version="0.1.29">
      <doc xml:space="preserve">Gets the device serial number.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:serial_number]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_GET_TEMPERATURE"
              value="59"
              c:type="CH_CMD_GET_TEMPERATURE"
              version="0.1.29">
      <doc xml:space="preserve">Gets the temperature of the sensor in degrees celsius

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:temperature]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_LOAD_SRAM"
              value="65"
              c:type="CH_CMD_LOAD_SRAM"
              version="0.1.29">
      <doc xml:space="preserve">Load the SRAM from the EEPROM.

PROTOCOLv2:
bRequest:   [cmd]
wValue:     0x00
wIndex:     interface
wLength:    0x00
Direction:  DEVICE-&gt;HOST
Data:       [1:error][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_READ_FLASH"
              value="37"
              c:type="CH_CMD_READ_FLASH"
              version="0.1.29">
      <doc xml:space="preserve">Read in raw data from the flash memory.

IN:  [1:cmd][2:address][1:length]
OUT: [1:retval][1:cmd][1:checksum][1-60:data]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ×
ColorHug2      |      ✓       |      ×
ColorHug+      |      ✓       |      ×
ColorHugALS    |      ✓       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_READ_SRAM"
              value="56"
              c:type="CH_CMD_READ_SRAM"
              version="0.1.29">
      <doc xml:space="preserve">Read in raw data from the SRAM memory.

PROTOCOLv1:
IN:  [1:cmd][2:address][1:length]
OUT: [1:retval][1:cmd][1-60:data]

PROTOCOLv2:
bRequest:   [cmd]
wValue:     [address-index/64]
wIndex:     interface
wLength:    0x64
Direction:  DEVICE-&gt;HOST
Data:       [64:DATA]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_RESET"
              value="36"
              c:type="CH_CMD_RESET"
              version="0.1.29">
      <doc xml:space="preserve">Reset the processor.

IN:  [1:cmd]
OUT: [1:retval][1:cmd] (but with success the device will disconnect)

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ✓
ColorHug2      |      ✓       |      ✓
ColorHug+      |      ✓       |      ✓
ColorHugALS    |      ✓       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SAVE_SRAM"
              value="66"
              c:type="CH_CMD_SAVE_SRAM"
              version="0.1.29">
      <doc xml:space="preserve">Save the SRAM to the EEPROM.

PROTOCOLv2:
bRequest:   [cmd]
wValue:     0x00
wIndex:     interface
wLength:    0x00
Direction:  DEVICE-&gt;HOST
Data:       [1:error][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SELF_TEST"
              value="64"
              c:type="CH_CMD_SELF_TEST"
              version="0.1.29">
      <doc xml:space="preserve">Tests the device by trying to get a non-zero reading from each
color channel.

IN:  [1:cmd]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ✓
ColorHug2      |      ✓       |      ✓
ColorHug+      |      ✓       |      ✓
ColorHugALS    |      ✓       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_CALIBRATION"
              value="10"
              c:type="CH_CMD_SET_CALIBRATION"
              version="0.1.29">
      <doc xml:space="preserve">Sets the calibration matrix.

IN:  [1:cmd][2:index][4*9:matrix_value][1:types][23:description]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_CALIBRATION_MAP"
              value="47"
              c:type="CH_CMD_SET_CALIBRATION_MAP"
              version="0.1.29">
      <doc xml:space="preserve">Set the calibration type to index map.

IN:  [1:cmd][6*2:types]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_CCD_CALIBRATION"
              value="84"
              c:type="CH_CMD_SET_CCD_CALIBRATION"
              version="0.1.31">
      <doc xml:space="preserve">Sets the spectral indexes for the RGB calibration.

IN:  [1:cmd][2:red-idx][2:green-idx][2:blue-idx]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_COLOR_SELECT"
              value="2"
              c:type="CH_CMD_SET_COLOR_SELECT"
              version="0.1.29">
      <doc xml:space="preserve">Set the color select state.

IN:  [1:cmd][1:color_select]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_CRYPTO_KEY"
              value="112"
              c:type="CH_CMD_SET_CRYPTO_KEY"
              version="1.3.1">
      <doc xml:space="preserve">Sets the 128 bit encyption key for the device.

PROTOCOLv2:
bRequest:   [cmd]
wValue:     0x00
wIndex:     interface
wLength:    0x00
Direction:  DEVICE-&gt;HOST
Data:       [4:key0][4:key1][4:key2][4:key3]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_DAC_VALUE"
              value="61"
              c:type="CH_CMD_SET_DAC_VALUE"
              version="1.1.6">
      <doc xml:space="preserve">Set the DAC value. @scale is a packed float, where 1.0f is 3.3V

IN:  [1:cmd][4:value]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_DARK_OFFSETS"
              value="16"
              c:type="CH_CMD_SET_DARK_OFFSETS"
              version="0.1.29">
      <doc xml:space="preserve">Set the dark offsets for use when taking samples when the measure
mode is FREQUENCY. When the measure mode is DURATION these values
have no effect.

IN:  [1:cmd][2:red][2:green][2:blue]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_FLASH_SUCCESS"
              value="40"
              c:type="CH_CMD_SET_FLASH_SUCCESS"
              version="0.1.29">
      <doc xml:space="preserve">Sets the result of the firmware flashing. The idea of this command
is that the flashing interaction is thus:

1.	Reset()			device goes to bootloader mode
2.	SetFlashSuccess(FALSE)
3.	WriteFlash($data)
4.	ReadFlash($data)	to verify
5.	BootFlash()		switch to program mode
6.	SetFlashSuccess(TRUE)

The idea is that we only set the success FALSE from the bootoloader
to indicate that on booting we should not boot into the program.
We can only set the success true from the *new* program code so as
to verify that the new program boots, and can accept HID commands.

IN:  [1:cmd][1:success]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ✓
ColorHug2      |      ✓       |      ✓
ColorHug+      |      ✓       |      ✓
ColorHugALS    |      ✓       |      ✓

Different values of @success are permitted in each mode.</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_ILLUMINANTS"
              value="22"
              c:type="CH_CMD_SET_ILLUMINANTS"
              version="1.3.4">
      <doc xml:space="preserve">Set the illuminants.

IN:  [1:cmd][1:illuminant]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_INTEGRAL_TIME"
              value="6"
              c:type="CH_CMD_SET_INTEGRAL_TIME"
              version="0.1.29">
      <doc xml:space="preserve">Sets the integral time.

IN:  [1:cmd][2:integral_time]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_LEDS"
              value="14"
              c:type="CH_CMD_SET_LEDS"
              version="0.1.29">
      <doc xml:space="preserve">Set the LED state. Using a @repeat value of anything other than
0 will block the processor for the duration of the command.

If @repeat is not 0, then the LEDs are reset to all off at the end
of the sequence.

IN:  [1:cmd][1:led_state][1:repeat][1:on-time][1:off-time]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_MEASURE_MODE"
              value="54"
              c:type="CH_CMD_SET_MEASURE_MODE"
              version="0.1.29">
      <doc xml:space="preserve">Sets the measurement mode. The mode can either be frequency or pulse
duration. The former is well tested, but the latter is much more
precise.

IN:  [1:cmd][1:measure_mode]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_MULTIPLIER"
              value="4"
              c:type="CH_CMD_SET_MULTIPLIER"
              version="0.1.29">
      <doc xml:space="preserve">Sets the multiplier value.

IN:  [1:cmd][1:multiplier_value]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_OWNER_EMAIL"
              value="20"
              c:type="CH_CMD_SET_OWNER_EMAIL"
              version="0.1.29">
      <doc xml:space="preserve">Set User's Email Address

IN:  [1:cmd][60:owner-email]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_OWNER_NAME"
              value="18"
              c:type="CH_CMD_SET_OWNER_NAME"
              version="0.1.29">
      <doc xml:space="preserve">Set User's Name

IN:  [1:cmd][60:owner-name]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_PCB_ERRATA"
              value="50"
              c:type="CH_CMD_SET_PCB_ERRATA"
              version="0.1.29">
      <doc xml:space="preserve">Sets the board errata value. Board errata is used to correct swapped
LEDs and any future problems discovered that only affect some batches
of hardware version 1.

The errata bitmask is as follows:
0x00		= No errata for this PCB
0x01		= Leds are swapped
0x02-0xffff	= Reserved for future use

IN:  [1:cmd][2:pcb_errata]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_POST_SCALE"
              value="43"
              c:type="CH_CMD_SET_POST_SCALE"
              version="0.1.29">
      <doc xml:space="preserve">Set the post XYZ scaling constant. @scale is a packed float.

IN:  [1:cmd][4:scale]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_PRE_SCALE"
              value="45"
              c:type="CH_CMD_SET_PRE_SCALE"
              version="0.1.29">
      <doc xml:space="preserve">Set the pre XYZ scaling constant. @scale is a packed float.

IN:  [1:cmd][4:scale]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_REMOTE_HASH"
              value="52"
              c:type="CH_CMD_SET_REMOTE_HASH"
              version="0.1.29">
      <doc xml:space="preserve">Sets the remote SHA1 hash of the profile. This is designed to
be used by the calibration program to indicate the key which allows
the completed profile to be found from a public web service.

IN:  [1:cmd][20:sha1_hash]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_SET_SERIAL_NUMBER"
              value="12"
              c:type="CH_CMD_SET_SERIAL_NUMBER"
              version="0.1.29">
      <doc xml:space="preserve">Sets the device serial number.

IN:  [1:cmd][4:serial_number]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_TAKE_READINGS"
              value="34"
              c:type="CH_CMD_TAKE_READINGS"
              version="0.1.29">
      <doc xml:space="preserve">Take a reading taking into account just dark offsets.
All of @red, @green and @blue are packed float values.

This command is useful if you want to do an ambient reading.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:red][4:green][4:blue]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_TAKE_READING_ARRAY"
              value="49"
              c:type="CH_CMD_TAKE_READING_ARRAY"
              version="0.1.29">
      <doc xml:space="preserve">Takes 30 raw samples and returns them in an array.

This command can be used to find the optimum delay between patches
by showing a black sample area, then white, and then using this
command to find out how long the actual hardware delay is.

It can also be used to find out how stable the device or output is
over a small amount of time, typically ~2.5 seconds for the maximum
integral time.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][30:reading_array]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ×
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_TAKE_READING_RAW"
              value="33"
              c:type="CH_CMD_TAKE_READING_RAW"
              version="0.1.29">
      <doc xml:space="preserve">Take a raw reading.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:count]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ✓</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_TAKE_READING_SPECTRAL"
              value="85"
              c:type="CH_CMD_TAKE_READING_SPECTRAL"
              version="0.1.31">
      <doc xml:space="preserve">Takes a spectral reading putting %CH_CCD_SPECTRAL_RESOLUTION uint16_t values
(typically 7296 bytes) in SRAM.
The values are scaled from 0x0000 to 0x03ff and correspond to the actual
signal amplitude once Vref- and Vref+ have been taken into account.

IN:  [1:cmd]
OUT: [1:retval][1:cmd][4:addr]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ×
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_TAKE_READING_XYZ"
              value="35"
              c:type="CH_CMD_TAKE_READING_XYZ"
              version="0.1.29">
      <doc xml:space="preserve">Take a reading taking into account:
 1. dark offsets
 2. the calibration matrix

If the calibration index &gt; %CH_CALIBRATION_MAX then the calibration
map is used to find the default calibration index to use.

If the calibration index is set to %CH_CALIBRATION_SPECTRAL then the
spectral hardware is used if it is available. The CIE 1931 luminosity
function data is used by default.

IN:  [1:cmd][2:calibration-index]
OUT: [1:retval][1:cmd][4:red][4:green][4:blue]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_WRITE_EEPROM"
              value="32"
              c:type="CH_CMD_WRITE_EEPROM"
              version="0.1.29">
      <doc xml:space="preserve">Write values to EEPROM.

IN:  [1:cmd][8:eeprom_magic]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ✓
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_WRITE_FLASH"
              value="38"
              c:type="CH_CMD_WRITE_FLASH"
              version="0.1.29">
      <doc xml:space="preserve">Write raw data to the flash memory. You can only write aligned to
a 32 byte boundary, and you must flush any incomplete 64 byte block.

IN:  [1:cmd][2:address][1:length][1:checksum][1-32:data]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ✓       |      ×
ColorHug2      |      ✓       |      ×
ColorHug+      |      ✓       |      ×
ColorHugALS    |      ✓       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="CMD_WRITE_SRAM"
              value="57"
              c:type="CH_CMD_WRITE_SRAM"
              version="0.1.29">
      <doc xml:space="preserve">Write raw data to the SRAM memory.

IN:  [1:cmd][2:address][1:length][1-60:data]
OUT: [1:retval][1:cmd]

This command is available under these conditions:

               |  Bootloader  |  Firmware
---------------+--------------+-----------
ColorHug       |      ×       |      ×
ColorHug2      |      ×       |      ✓
ColorHug+      |      ×       |      ✓
ColorHugALS    |      ×       |      ×</doc>
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="ColorSelect" c:type="ChColorSelect">
      <member name="red" value="0" c:identifier="CH_COLOR_SELECT_RED">
      </member>
      <member name="white" value="1" c:identifier="CH_COLOR_SELECT_WHITE">
      </member>
      <member name="blue" value="2" c:identifier="CH_COLOR_SELECT_BLUE">
      </member>
      <member name="green" value="3" c:identifier="CH_COLOR_SELECT_GREEN">
      </member>
    </enumeration>
    <constant name="DEVICE_GUID_COLORHUG"
              value="40338ceb-b966-4eae-adae-9c32edfcc484"
              c:type="CH_DEVICE_GUID_COLORHUG">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GUID_COLORHUG2"
              value="2082b5e0-7a64-478a-b1b2-e3404fab6dad"
              c:type="CH_DEVICE_GUID_COLORHUG2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GUID_COLORHUG_ALS"
              value="84f40464-9272-4ef7-9399-cd95f12da696"
              c:type="CH_DEVICE_GUID_COLORHUG_ALS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_GUID_COLORHUG_PLUS"
              value="6d6f05a9-3ecb-43a2-bcbb-3844f1825366"
              c:type="CH_DEVICE_GUID_COLORHUG_PLUS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEVICE_USB_TIMEOUT"
              value="10000"
              c:type="CH_DEVICE_USB_TIMEOUT">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="DeviceMode" c:type="ChDeviceMode">
      <member name="unknown" value="0" c:identifier="CH_DEVICE_MODE_UNKNOWN">
      </member>
      <member name="legacy" value="1" c:identifier="CH_DEVICE_MODE_LEGACY">
      </member>
      <member name="bootloader"
              value="2"
              c:identifier="CH_DEVICE_MODE_BOOTLOADER">
      </member>
      <member name="firmware" value="3" c:identifier="CH_DEVICE_MODE_FIRMWARE">
      </member>
      <member name="bootloader_plus"
              value="4"
              c:identifier="CH_DEVICE_MODE_BOOTLOADER_PLUS">
      </member>
      <member name="firmware_plus"
              value="5"
              c:identifier="CH_DEVICE_MODE_FIRMWARE_PLUS">
      </member>
      <member name="firmware2"
              value="6"
              c:identifier="CH_DEVICE_MODE_FIRMWARE2">
      </member>
      <member name="bootloader2"
              value="7"
              c:identifier="CH_DEVICE_MODE_BOOTLOADER2">
      </member>
      <member name="bootloader_als"
              value="8"
              c:identifier="CH_DEVICE_MODE_BOOTLOADER_ALS">
      </member>
      <member name="firmware_als"
              value="9"
              c:identifier="CH_DEVICE_MODE_FIRMWARE_ALS">
      </member>
    </enumeration>
    <class name="DeviceQueue"
           c:symbol-prefix="device_queue"
           c:type="ChDeviceQueue"
           parent="GObject.Object"
           glib:type-name="ChDeviceQueue"
           glib:get-type="ch_device_queue_get_type"
           glib:type-struct="DeviceQueueClass">
      <constructor name="new"
                   c:identifier="ch_device_queue_new"
                   version="0.1.29">
        <return-value transfer-ownership="full">
          <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
        </return-value>
      </constructor>
      <virtual-method name="device_failed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="error_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="progress_changed">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="percentage" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="ch_device_queue_add" version="0.1.29">
        <doc xml:space="preserve">Adds a raw command to the device queue.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="cmd" transfer-ownership="none">
            <doc xml:space="preserve">The command, e.g. %CH_CMD_TAKE_READINGS</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="buffer_in" transfer-ownership="none">
            <doc xml:space="preserve">The input buffer, or %NULL</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="buffer_in_len" transfer-ownership="none">
            <doc xml:space="preserve">The size of @buffer_in</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="buffer_out" transfer-ownership="none">
            <doc xml:space="preserve">The output buffer, or %NULL</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="buffer_out_len" transfer-ownership="none">
            <doc xml:space="preserve">The size of @buffer_out</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="boot_flash"
              c:identifier="ch_device_queue_boot_flash"
              version="0.1.29">
        <doc xml:space="preserve">Boots the device from bootloader to firmware mode.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_calibration"
              c:identifier="ch_device_queue_clear_calibration"
              version="0.1.29">
        <doc xml:space="preserve">Clears a calibration slot.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_index" transfer-ownership="none">
            <doc xml:space="preserve">Slot</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="erase_flash"
              c:identifier="ch_device_queue_erase_flash"
              version="0.1.29">
        <doc xml:space="preserve">Erase program code on the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">The device EEPROM address</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adc_vref_neg"
              c:identifier="ch_device_queue_get_adc_vref_neg"
              version="0.1.31">
        <doc xml:space="preserve">Gets the ADC Vref- calibration value.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="vref" transfer-ownership="none">
            <doc xml:space="preserve">The voltage reference, ranging from 0.0 to 3.3V.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_adc_vref_pos"
              c:identifier="ch_device_queue_get_adc_vref_pos"
              version="0.1.31">
        <doc xml:space="preserve">Gets the ADC Vref+ calibration value.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="vref" transfer-ownership="none">
            <doc xml:space="preserve">The voltage reference, ranging from 0.0 to 3.3V.</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_calibration"
              c:identifier="ch_device_queue_get_calibration"
              version="0.1.29">
        <doc xml:space="preserve">Gets the calibration data.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_index" transfer-ownership="none">
            <doc xml:space="preserve">The slot position</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="calibration" transfer-ownership="none">
            <doc xml:space="preserve">the 3x3 calibration matrix</doc>
            <type name="Colord.Mat3x3" c:type="CdMat3x3*"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:space="preserve">The types the matrix supports</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">The description of the calibration</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_calibration_map"
              c:identifier="ch_device_queue_get_calibration_map"
              version="0.1.29">
        <doc xml:space="preserve">Gets the calibration map.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_map" transfer-ownership="none">
            <doc xml:space="preserve">An array of slot positions</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_ccd_calibration"
              c:identifier="ch_device_queue_get_ccd_calibration"
              version="0.1.31">
        <doc xml:space="preserve">Gets the CCD spectral calibration indexes. These are "pointers" to specific
spectral peaks returned by the CCD.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="indexes" transfer-ownership="none">
            <doc xml:space="preserve">An array of red, green, blue indexes</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_color_select"
              c:identifier="ch_device_queue_get_color_select"
              version="0.1.29">
        <doc xml:space="preserve">Gets the selected sensor color.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="color_select" transfer-ownership="none">
            <doc xml:space="preserve">The color select, e.g. %CH_COLOR_SELECT_RED</doc>
            <type name="ColorSelect" c:type="ChColorSelect*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dac_value"
              c:identifier="ch_device_queue_get_dac_value"
              version="1.1.6">
        <doc xml:space="preserve">Gets the DAC value.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="dac_value" transfer-ownership="none">
            <doc xml:space="preserve">value between 0.0 and 0.99</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dark_offsets"
              c:identifier="ch_device_queue_get_dark_offsets"
              version="0.1.29">
        <doc xml:space="preserve">Gets the device dark offsets.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #CdColorRGB</doc>
            <type name="Colord.ColorRGB" c:type="CdColorRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_firmware_ver"
              c:identifier="ch_device_queue_get_firmware_ver"
              version="0.1.29">
        <doc xml:space="preserve">Gets the firmware version.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="major" transfer-ownership="none">
            <doc xml:space="preserve">The firmware major version</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
          <parameter name="minor" transfer-ownership="none">
            <doc xml:space="preserve">The firmware minor version</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
          <parameter name="micro" transfer-ownership="none">
            <doc xml:space="preserve">The firmware micro version</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_hardware_version"
              c:identifier="ch_device_queue_get_hardware_version"
              version="0.1.29">
        <doc xml:space="preserve">Gets the hardware version.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="hw_version" transfer-ownership="none">
            <doc xml:space="preserve">The hardware version</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_integral_time"
              c:identifier="ch_device_queue_get_integral_time"
              version="0.1.29">
        <doc xml:space="preserve">Gets the reading integral time.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="integral_time" transfer-ownership="none">
            <doc xml:space="preserve">The sensor integral time in device units</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_leds"
              c:identifier="ch_device_queue_get_leds"
              version="0.1.29">
        <doc xml:space="preserve">Gets the LED status.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="leds" transfer-ownership="none">
            <doc xml:space="preserve">The LED bitfield</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_measure_mode"
              c:identifier="ch_device_queue_get_measure_mode"
              version="0.1.29">
        <doc xml:space="preserve">Gets the measurement mode.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="measure_mode" transfer-ownership="none">
            <doc xml:space="preserve">The #ChMeasureMode, e.g. %CH_MEASURE_MODE_DURATION</doc>
            <type name="MeasureMode" c:type="ChMeasureMode*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_multiplier"
              c:identifier="ch_device_queue_get_multiplier"
              version="0.1.29">
        <doc xml:space="preserve">Gets the sensor multiplier.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="multiplier" transfer-ownership="none">
            <doc xml:space="preserve">The device multiplier, e.g. %CH_FREQ_SCALE_100</doc>
            <type name="FreqScale" c:type="ChFreqScale*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_owner_email"
              c:identifier="ch_device_queue_get_owner_email"
              version="0.1.29">
        <doc xml:space="preserve">Gets the owner email address.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">An email address</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_owner_name"
              c:identifier="ch_device_queue_get_owner_name"
              version="0.1.29">
        <doc xml:space="preserve">Gets the owner name.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The owner name</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pcb_errata"
              c:identifier="ch_device_queue_get_pcb_errata"
              version="0.1.29">
        <doc xml:space="preserve">Gets the PCB errata level.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="pcb_errata" transfer-ownership="none">
            <doc xml:space="preserve">The PCB errata, e.g. %CH_PCB_ERRATA_SWAPPED_LEDS</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_post_scale"
              c:identifier="ch_device_queue_get_post_scale"
              version="0.1.29">
        <doc xml:space="preserve">Gets the post scale value.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="post_scale" transfer-ownership="none">
            <doc xml:space="preserve">The post-scale value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_pre_scale"
              c:identifier="ch_device_queue_get_pre_scale"
              version="0.1.29">
        <doc xml:space="preserve">Gets the pre scale value.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="pre_scale" transfer-ownership="none">
            <doc xml:space="preserve">Pre-scale value</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_remote_hash"
              c:identifier="ch_device_queue_get_remote_hash"
              version="0.1.29">
        <doc xml:space="preserve">Gets the remote hash stored on the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="remote_hash" transfer-ownership="none">
            <doc xml:space="preserve">A #ChSha1</doc>
            <type name="Sha1" c:type="ChSha1*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_serial_number"
              c:identifier="ch_device_queue_get_serial_number"
              version="0.1.29">
        <doc xml:space="preserve">Gets the device serial number.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="serial_number" transfer-ownership="none">
            <doc xml:space="preserve">The device serial number</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_temperature"
              c:identifier="ch_device_queue_get_temperature"
              version="0.1.29">
        <doc xml:space="preserve">Gets the device temperature.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="temperature" transfer-ownership="none">
            <doc xml:space="preserve">Temperature in Celcius</doc>
            <type name="gdouble" c:type="gdouble*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process"
              c:identifier="ch_device_queue_process"
              version="0.1.29"
              throws="1">
        <doc xml:space="preserve">Processes all commands in the command queue.
WARNING: this function is syncronous and will block.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the commands were executed successfully.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="process_flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags how to process the queue, e.g. %CH_DEVICE_QUEUE_PROCESS_FLAGS_CONTINUE_ERRORS</doc>
            <type name="DeviceQueueProcessFlags"
                  c:type="ChDeviceQueueProcessFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">#GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_async"
              c:identifier="ch_device_queue_process_async"
              version="0.1.29">
        <doc xml:space="preserve">Processes all commands in the command queue.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="process_flags" transfer-ownership="none">
            <type name="DeviceQueueProcessFlags"
                  c:type="ChDeviceQueueProcessFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">A #GCancellable, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve">A #GAsyncReadyCallback that will be called when finished.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve">User data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="process_finish"
              c:identifier="ch_device_queue_process_finish"
              version="0.1.29"
              throws="1">
        <doc xml:space="preserve">Gets the result from the asynchronous function.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE if the request was fulfilled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">a #ChDeviceQueue instance.</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve">the #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_firmware"
              c:identifier="ch_device_queue_read_firmware"
              version="1.2.11">
        <doc xml:space="preserve">Reads firmware on the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Firmware binary data</doc>
            <type name="guint8" c:type="guint8**"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Size of @data</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_flash"
              c:identifier="ch_device_queue_read_flash"
              version="0.1.29">
        <doc xml:space="preserve">Read flash code from the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">The device EEPROM address</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Binary data</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="read_sram"
              c:identifier="ch_device_queue_read_sram"
              version="0.1.29">
        <doc xml:space="preserve">Reads binary data from the SRAM.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">The device memory address</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The binary data</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="reset"
              c:identifier="ch_device_queue_reset"
              version="0.1.29">
        <doc xml:space="preserve">Resets the device back to bootloader mode.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="self_test"
              c:identifier="ch_device_queue_self_test"
              version="0.1.29">
        <doc xml:space="preserve">Performs some self tests on the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calibration"
              c:identifier="ch_device_queue_set_calibration"
              version="0.1.29">
        <doc xml:space="preserve">Sets the calibration data.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_index" transfer-ownership="none">
            <doc xml:space="preserve">The slot position</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="calibration" transfer-ownership="none">
            <doc xml:space="preserve">the 3x3 calibration matrix</doc>
            <type name="Colord.Mat3x3" c:type="const CdMat3x3*"/>
          </parameter>
          <parameter name="types" transfer-ownership="none">
            <doc xml:space="preserve">The types the matrix supports</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve">The description of the calibration</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calibration_ccmx"
              c:identifier="ch_device_queue_set_calibration_ccmx"
              version="0.1.29"
              throws="1">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_index" transfer-ownership="none">
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="ccmx" transfer-ownership="none">
            <type name="Colord.It8" c:type="CdIt8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calibration_map"
              c:identifier="ch_device_queue_set_calibration_map"
              version="0.1.29">
        <doc xml:space="preserve">Sets the calibration map.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_map" transfer-ownership="none">
            <doc xml:space="preserve">An array of slot positions</doc>
            <type name="guint16" c:type="const guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ccd_calibration"
              c:identifier="ch_device_queue_set_ccd_calibration"
              version="0.1.31">
        <doc xml:space="preserve">Sets the CCD spectral calibration indexes. These are "pointers" to specific
spectral peaks returned by the CCD.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="indexes" transfer-ownership="none">
            <doc xml:space="preserve">An array of red, green, blue indexes</doc>
            <type name="guint16" c:type="const guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color_select"
              c:identifier="ch_device_queue_set_color_select"
              version="0.1.29">
        <doc xml:space="preserve">Sets the sensor measurement color.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="color_select" transfer-ownership="none">
            <doc xml:space="preserve">The color select, e.g. %CH_COLOR_SELECT_RED</doc>
            <type name="ColorSelect" c:type="ChColorSelect"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dac_value"
              c:identifier="ch_device_queue_set_dac_value"
              version="1.1.6">
        <doc xml:space="preserve">Sets the post scale value.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="dac_value" transfer-ownership="none">
            <doc xml:space="preserve">The DAC value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_dark_offsets"
              c:identifier="ch_device_queue_set_dark_offsets"
              version="0.1.29">
        <doc xml:space="preserve">Sets the device dark offsets.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A #CdColorRGB</doc>
            <type name="Colord.ColorRGB" c:type="CdColorRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_flash_success"
              c:identifier="ch_device_queue_set_flash_success"
              version="0.1.29">
        <doc xml:space="preserve">Sets the firmware flash sucess value.
Be careful using this function as misuse can result in a 'bricked'
ColorHug device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">Success value</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_integral_time"
              c:identifier="ch_device_queue_set_integral_time"
              version="0.1.29">
        <doc xml:space="preserve">Sets the reading integral time.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="integral_time" transfer-ownership="none">
            <doc xml:space="preserve">The sensor integral time in device units</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_leds"
              c:identifier="ch_device_queue_set_leds"
              version="0.1.29">
        <doc xml:space="preserve">Sets the LED status.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="leds" transfer-ownership="none">
            <doc xml:space="preserve">The LEDs bitfield</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="repeat" transfer-ownership="none">
            <doc xml:space="preserve">Sets the number of times to repeat the pattern</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="on_time" transfer-ownership="none">
            <doc xml:space="preserve">Set the on time</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
          <parameter name="off_time" transfer-ownership="none">
            <doc xml:space="preserve">Set the off time</doc>
            <type name="guint8" c:type="guint8"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_measure_mode"
              c:identifier="ch_device_queue_set_measure_mode"
              version="0.1.29">
        <doc xml:space="preserve">Sets the measurement mode.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="measure_mode" transfer-ownership="none">
            <doc xml:space="preserve">The #ChMeasureMode, e.g. %CH_MEASURE_MODE_DURATION</doc>
            <type name="MeasureMode" c:type="ChMeasureMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_multiplier"
              c:identifier="ch_device_queue_set_multiplier"
              version="0.1.29">
        <doc xml:space="preserve">Sets the sensor multiplier.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="multiplier" transfer-ownership="none">
            <doc xml:space="preserve">The device multiplier, e.g. %CH_FREQ_SCALE_100</doc>
            <type name="FreqScale" c:type="ChFreqScale"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_owner_email"
              c:identifier="ch_device_queue_set_owner_email"
              version="0.1.29">
        <doc xml:space="preserve">Sets the owner email address.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="email" transfer-ownership="none">
            <doc xml:space="preserve">An email address</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_owner_name"
              c:identifier="ch_device_queue_set_owner_name"
              version="0.1.29">
        <doc xml:space="preserve">Sets the owner name.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve">The owner name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pcb_errata"
              c:identifier="ch_device_queue_set_pcb_errata"
              version="0.1.29">
        <doc xml:space="preserve">Sets the PCB board errata.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="pcb_errata" transfer-ownership="none">
            <doc xml:space="preserve">The PCB errata, e.g. %CH_PCB_ERRATA_SWAPPED_LEDS</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_post_scale"
              c:identifier="ch_device_queue_set_post_scale"
              version="0.1.29">
        <doc xml:space="preserve">Sets the post scale value.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="post_scale" transfer-ownership="none">
            <doc xml:space="preserve">The post-scale value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_pre_scale"
              c:identifier="ch_device_queue_set_pre_scale"
              version="0.1.29">
        <doc xml:space="preserve">Sets the pre-scale value.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="pre_scale" transfer-ownership="none">
            <doc xml:space="preserve">Pre-scale value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remote_hash"
              c:identifier="ch_device_queue_set_remote_hash"
              version="0.1.29">
        <doc xml:space="preserve">Sets the remote hash on the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="remote_hash" transfer-ownership="none">
            <doc xml:space="preserve">A #ChSha1</doc>
            <type name="Sha1" c:type="ChSha1*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_serial_number"
              c:identifier="ch_device_queue_set_serial_number"
              version="0.1.29">
        <doc xml:space="preserve">Sets the device serial number.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="serial_number" transfer-ownership="none">
            <doc xml:space="preserve">The device serial number</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_reading_array"
              c:identifier="ch_device_queue_take_reading_array"
              version="0.1.29">
        <doc xml:space="preserve">Get an array of raw readings in quick succession.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="reading_array" transfer-ownership="none">
            <doc xml:space="preserve">An array of raw readings</doc>
            <type name="guint8" c:type="guint8*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_reading_raw"
              c:identifier="ch_device_queue_take_reading_raw"
              version="0.1.29">
        <doc xml:space="preserve">Take a raw reading from the sensor.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="take_reading" transfer-ownership="none">
            <doc xml:space="preserve">A raw reading value</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_reading_spectral"
              c:identifier="ch_device_queue_take_reading_spectral"
              version="0.1.31">
        <doc xml:space="preserve">Takes a raw spectral reading.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="sram_addr" transfer-ownership="none">
            <doc xml:space="preserve">The SRAM location where the data is held</doc>
            <type name="guint16" c:type="guint16*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_readings"
              c:identifier="ch_device_queue_take_readings"
              version="0.1.29">
        <doc xml:space="preserve">Take a RGB triplet of readings from the sensor without applying the
calibration matrix.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The #CdColorRGB of the raw reading</doc>
            <type name="Colord.ColorRGB" c:type="CdColorRGB*"/>
          </parameter>
        </parameters>
      </method>
      <method name="take_readings_xyz"
              c:identifier="ch_device_queue_take_readings_xyz"
              version="0.1.29">
        <doc xml:space="preserve">Take an XYZ fully cooked reading from the sensor.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="calibration_index" transfer-ownership="none">
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">The #CdColorXYZ for a given calibration slot</doc>
            <type name="Colord.ColorXYZ" c:type="CdColorXYZ*"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_firmware"
              c:identifier="ch_device_queue_verify_firmware"
              version="0.1.29">
        <doc xml:space="preserve">Verifies firmware on the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Firmware binary data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_flash"
              c:identifier="ch_device_queue_verify_flash"
              version="0.1.29">
        <doc xml:space="preserve">Verify flash code from the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">The device EEPROM address</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Binary data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_eeprom"
              c:identifier="ch_device_queue_write_eeprom"
              version="0.1.29">
        <doc xml:space="preserve">Writes values to the firmware to be set at device startup.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="magic" transfer-ownership="none">
            <doc xml:space="preserve">The magic sekret string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_firmware"
              c:identifier="ch_device_queue_write_firmware"
              version="0.1.29">
        <doc xml:space="preserve">Writes new firmware to the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Firmware binary data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_flash"
              c:identifier="ch_device_queue_write_flash"
              version="0.1.29">
        <doc xml:space="preserve">Write flash code to the device.

NOTE: This command is available on hardware version: 1 &amp; 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">The device EEPROM address</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">Binary data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">The length of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_sram"
              c:identifier="ch_device_queue_write_sram"
              version="0.1.29">
        <doc xml:space="preserve">Writes binary data to the SRAM.

NOTE: This command is available on hardware version: 2</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_queue" transfer-ownership="none">
            <doc xml:space="preserve">A #ChDeviceQueue</doc>
            <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve">A #GUsbDevice</doc>
            <type name="GUsb.Device" c:type="GUsbDevice*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve">The device memory address</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve">The binary data</doc>
            <type name="guint8" c:type="const guint8*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve">Size of @data</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="device-failed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GObject.Object"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="progress-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="DeviceQueueClass"
            c:type="ChDeviceQueueClass"
            glib:is-gtype-struct-for="DeviceQueue">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="device_failed">
        <callback name="device_failed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device_queue" transfer-ownership="none">
              <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
            </parameter>
            <parameter name="device" transfer-ownership="none">
              <type name="GUsb.Device" c:type="GUsbDevice*"/>
            </parameter>
            <parameter name="error_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="progress_changed">
        <callback name="progress_changed">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="device_queue" transfer-ownership="none">
              <type name="DeviceQueue" c:type="ChDeviceQueue*"/>
            </parameter>
            <parameter name="percentage" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_ch_reserved1" introspectable="0">
        <callback name="_ch_reserved1">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ch_reserved2" introspectable="0">
        <callback name="_ch_reserved2">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ch_reserved3" introspectable="0">
        <callback name="_ch_reserved3">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ch_reserved4" introspectable="0">
        <callback name="_ch_reserved4">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_ch_reserved5" introspectable="0">
        <callback name="_ch_reserved5">
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <bitfield name="DeviceQueueProcessFlags"
              c:type="ChDeviceQueueProcessFlags">
      <doc xml:space="preserve">CH_DEVICE_QUEUE_PROCESS_FLAGS_NONE:
	Normal operation, where a single device command failure makes
the return value of the process %FALSE, but the queue contibues
to run for other devices.

CH_DEVICE_QUEUE_PROCESS_FLAGS_CONTINUE_ERRORS:
	Continue to submit commands to a device that has failed a
command, for example where one command might not be supported
in the middle of a queue of commands.

CH_DEVICE_QUEUE_PROCESS_FLAGS_NONFATAL_ERRORS:
	Do not consider a device error to be fatal, but instead emit
a signal and continue with the rest of the queue. If the flag
%CH_DEVICE_QUEUE_PROCESS_FLAGS_CONTINUE_ERRORS is not used then
other commands to the same device will not be submitted.

Flags for controlling processing options</doc>
      <member name="none"
              value="0"
              c:identifier="CH_DEVICE_QUEUE_PROCESS_FLAGS_NONE">
      </member>
      <member name="continue_errors"
              value="1"
              c:identifier="CH_DEVICE_QUEUE_PROCESS_FLAGS_CONTINUE_ERRORS">
      </member>
      <member name="nonfatal_errors"
              value="2"
              c:identifier="CH_DEVICE_QUEUE_PROCESS_FLAGS_NONFATAL_ERRORS">
      </member>
    </bitfield>
    <constant name="EEPROM_ADDR_RUNCODE"
              value="16384"
              c:type="CH_EEPROM_ADDR_RUNCODE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EEPROM_ADDR_RUNCODE_ALS"
              value="8192"
              c:type="CH_EEPROM_ADDR_RUNCODE_ALS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EP0_TRANSFER_SIZE"
              value="64"
              c:type="CH_EP0_TRANSFER_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EP0_TRANSFER_SIZE_V2"
              value="1024"
              c:type="CH_EP0_TRANSFER_SIZE_V2">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="Error" c:type="ChError">
      <member name="none" value="0" c:identifier="CH_ERROR_NONE">
      </member>
      <member name="unknown_cmd" value="1" c:identifier="CH_ERROR_UNKNOWN_CMD">
      </member>
      <member name="wrong_unlock_code"
              value="2"
              c:identifier="CH_ERROR_WRONG_UNLOCK_CODE">
      </member>
      <member name="not_implemented"
              value="3"
              c:identifier="CH_ERROR_NOT_IMPLEMENTED">
      </member>
      <member name="underflow_sensor"
              value="4"
              c:identifier="CH_ERROR_UNDERFLOW_SENSOR">
      </member>
      <member name="no_serial" value="5" c:identifier="CH_ERROR_NO_SERIAL">
      </member>
      <member name="watchdog" value="6" c:identifier="CH_ERROR_WATCHDOG">
      </member>
      <member name="invalid_address"
              value="7"
              c:identifier="CH_ERROR_INVALID_ADDRESS">
      </member>
      <member name="invalid_length"
              value="8"
              c:identifier="CH_ERROR_INVALID_LENGTH">
      </member>
      <member name="invalid_checksum"
              value="9"
              c:identifier="CH_ERROR_INVALID_CHECKSUM">
      </member>
      <member name="invalid_value"
              value="10"
              c:identifier="CH_ERROR_INVALID_VALUE">
      </member>
      <member name="unknown_cmd_for_bootloader"
              value="11"
              c:identifier="CH_ERROR_UNKNOWN_CMD_FOR_BOOTLOADER">
      </member>
      <member name="no_calibration"
              value="12"
              c:identifier="CH_ERROR_NO_CALIBRATION">
      </member>
      <member name="overflow_multiply"
              value="13"
              c:identifier="CH_ERROR_OVERFLOW_MULTIPLY">
      </member>
      <member name="overflow_addition"
              value="14"
              c:identifier="CH_ERROR_OVERFLOW_ADDITION">
      </member>
      <member name="overflow_sensor"
              value="15"
              c:identifier="CH_ERROR_OVERFLOW_SENSOR">
      </member>
      <member name="overflow_stack"
              value="16"
              c:identifier="CH_ERROR_OVERFLOW_STACK">
      </member>
      <member name="device_deactivated"
              value="17"
              c:identifier="CH_ERROR_DEVICE_DEACTIVATED">
      </member>
      <member name="incomplete_request"
              value="18"
              c:identifier="CH_ERROR_INCOMPLETE_REQUEST">
      </member>
      <member name="self_test_sensor"
              value="19"
              c:identifier="CH_ERROR_SELF_TEST_SENSOR">
      </member>
      <member name="self_test_red"
              value="20"
              c:identifier="CH_ERROR_SELF_TEST_RED">
      </member>
      <member name="self_test_green"
              value="21"
              c:identifier="CH_ERROR_SELF_TEST_GREEN">
      </member>
      <member name="self_test_blue"
              value="22"
              c:identifier="CH_ERROR_SELF_TEST_BLUE">
      </member>
      <member name="self_test_color_select"
              value="23"
              c:identifier="CH_ERROR_SELF_TEST_COLOR_SELECT">
      </member>
      <member name="self_test_multiplier"
              value="24"
              c:identifier="CH_ERROR_SELF_TEST_MULTIPLIER">
      </member>
      <member name="invalid_calibration"
              value="25"
              c:identifier="CH_ERROR_INVALID_CALIBRATION">
      </member>
      <member name="sram_failed"
              value="26"
              c:identifier="CH_ERROR_SRAM_FAILED">
      </member>
      <member name="out_of_memory"
              value="27"
              c:identifier="CH_ERROR_OUT_OF_MEMORY">
      </member>
      <member name="self_test_temperature"
              value="28"
              c:identifier="CH_ERROR_SELF_TEST_TEMPERATURE">
      </member>
      <member name="self_test_i2c"
              value="29"
              c:identifier="CH_ERROR_SELF_TEST_I2C">
      </member>
      <member name="self_test_adc_vdd"
              value="30"
              c:identifier="CH_ERROR_SELF_TEST_ADC_VDD">
      </member>
      <member name="self_test_adc_vss"
              value="31"
              c:identifier="CH_ERROR_SELF_TEST_ADC_VSS">
      </member>
      <member name="self_test_adc_vref"
              value="32"
              c:identifier="CH_ERROR_SELF_TEST_ADC_VREF">
      </member>
      <member name="i2c_slave_address"
              value="33"
              c:identifier="CH_ERROR_I2C_SLAVE_ADDRESS">
      </member>
      <member name="i2c_slave_config"
              value="34"
              c:identifier="CH_ERROR_I2C_SLAVE_CONFIG">
      </member>
      <member name="self_test_eeprom"
              value="35"
              c:identifier="CH_ERROR_SELF_TEST_EEPROM">
      </member>
    </enumeration>
    <constant name="FIRMWARE_ID_TOKEN1"
              value="40338ceb"
              c:type="CH_FIRMWARE_ID_TOKEN1">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="FIRMWARE_ID_TOKEN2"
              value="2082b5e0"
              c:type="CH_FIRMWARE_ID_TOKEN2">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="FIRMWARE_ID_TOKEN_ALS"
              value="84f40464"
              c:type="CH_FIRMWARE_ID_TOKEN_ALS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="FIRMWARE_ID_TOKEN_PLUS"
              value="6d6f05a9"
              c:type="CH_FIRMWARE_ID_TOKEN_PLUS">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="FLASH_ERASE_BLOCK_SIZE"
              value="1024"
              c:type="CH_FLASH_ERASE_BLOCK_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FLASH_RECONNECT_TIMEOUT"
              value="5000"
              c:type="CH_FLASH_RECONNECT_TIMEOUT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FLASH_TRANSFER_BLOCK_SIZE"
              value="32"
              c:type="CH_FLASH_TRANSFER_BLOCK_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="FLASH_WRITE_BLOCK_SIZE"
              value="64"
              c:type="CH_FLASH_WRITE_BLOCK_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <enumeration name="FreqScale" c:type="ChFreqScale">
      <member name="0" value="0" c:identifier="CH_FREQ_SCALE_0">
      </member>
      <member name="20" value="1" c:identifier="CH_FREQ_SCALE_20">
      </member>
      <member name="2" value="2" c:identifier="CH_FREQ_SCALE_2">
      </member>
      <member name="100" value="3" c:identifier="CH_FREQ_SCALE_100">
      </member>
    </enumeration>
    <constant name="INTEGRAL_TIME_VALUE_100MS"
              value="14848"
              c:type="CH_INTEGRAL_TIME_VALUE_100MS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL_TIME_VALUE_200MS"
              value="29952"
              c:type="CH_INTEGRAL_TIME_VALUE_200MS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL_TIME_VALUE_50MS"
              value="7936"
              c:type="CH_INTEGRAL_TIME_VALUE_50MS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL_TIME_VALUE_5MS"
              value="768"
              c:type="CH_INTEGRAL_TIME_VALUE_5MS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="INTEGRAL_TIME_VALUE_MAX"
              value="65535"
              c:type="CH_INTEGRAL_TIME_VALUE_MAX">
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="Illuminant" c:type="ChIlluminant">
      <member name="none" value="0" c:identifier="CH_ILLUMINANT_NONE">
      </member>
      <member name="a" value="1" c:identifier="CH_ILLUMINANT_A">
      </member>
      <member name="uv" value="2" c:identifier="CH_ILLUMINANT_UV">
      </member>
    </bitfield>
    <enumeration name="MeasureMode" c:type="ChMeasureMode">
      <member name="frequency"
              value="0"
              c:identifier="CH_MEASURE_MODE_FREQUENCY">
      </member>
      <member name="duration"
              value="1"
              c:identifier="CH_MEASURE_MODE_DURATION">
      </member>
    </enumeration>
    <constant name="OWNER_LENGTH_MAX" value="60" c:type="CH_OWNER_LENGTH_MAX">
      <type name="gint" c:type="gint"/>
    </constant>
    <bitfield name="PcbErrata" c:type="ChPcbErrata">
      <member name="none" value="0" c:identifier="CH_PCB_ERRATA_NONE">
      </member>
      <member name="swapped_leds"
              value="1"
              c:identifier="CH_PCB_ERRATA_SWAPPED_LEDS">
      </member>
      <member name="no_welcome"
              value="2"
              c:identifier="CH_PCB_ERRATA_NO_WELCOME">
      </member>
    </bitfield>
    <record name="Sha1" c:type="ChSha1">
      <field name="bytes" writable="1">
        <array zero-terminated="0" c:type="guint8" fixed-size="20">
          <type name="guint8" c:type="guint8"/>
        </array>
      </field>
      <method name="to_string"
              c:identifier="ch_sha1_to_string"
              version="0.1.29">
        <doc xml:space="preserve">Gets a string representation of the SHA1 hash.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A string, free with g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="sha1" transfer-ownership="none">
            <doc xml:space="preserve">A %ChSha1</doc>
            <type name="Sha1" c:type="const ChSha1*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="parse"
                c:identifier="ch_sha1_parse"
                version="0.1.29"
                throws="1">
        <doc xml:space="preserve">Parses a SHA1 hash from a string value.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE for success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve">A string representation of the SHA1 hash</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="sha1" transfer-ownership="none">
            <doc xml:space="preserve">A %ChSha1</doc>
            <type name="Sha1" c:type="ChSha1*"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="SpectrumKind" c:type="ChSpectrumKind">
      <member name="raw" value="0" c:identifier="CH_SPECTRUM_KIND_RAW">
      </member>
      <member name="dark_cal"
              value="1"
              c:identifier="CH_SPECTRUM_KIND_DARK_CAL">
      </member>
      <member name="temp_cal"
              value="2"
              c:identifier="CH_SPECTRUM_KIND_TEMP_CAL">
      </member>
      <member name="irradiance_cal"
              value="3"
              c:identifier="CH_SPECTRUM_KIND_IRRADIANCE_CAL">
      </member>
      <member name="last" value="4" c:identifier="CH_SPECTRUM_KIND_LAST">
      </member>
    </enumeration>
    <bitfield name="StatusLed" c:type="ChStatusLed">
      <member name="green" value="1" c:identifier="CH_STATUS_LED_GREEN">
      </member>
      <member name="red" value="2" c:identifier="CH_STATUS_LED_RED">
      </member>
      <member name="blue" value="4" c:identifier="CH_STATUS_LED_BLUE">
      </member>
    </bitfield>
    <constant name="USB_CONFIG" value="1" c:type="CH_USB_CONFIG">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_HID_EP" value="1" c:type="CH_USB_HID_EP">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_HID_EP_IN" value="128" c:type="CH_USB_HID_EP_IN">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_HID_EP_OUT" value="0" c:type="CH_USB_HID_EP_OUT">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_HID_EP_SIZE" value="64" c:type="CH_USB_HID_EP_SIZE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_INTERFACE" value="0" c:type="CH_USB_INTERFACE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_BOOTLOADER"
              value="4096"
              c:type="CH_USB_PID_BOOTLOADER">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_BOOTLOADER2"
              value="4101"
              c:type="CH_USB_PID_BOOTLOADER2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_BOOTLOADER_ALS"
              value="4102"
              c:type="CH_USB_PID_BOOTLOADER_ALS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_BOOTLOADER_PLUS"
              value="4099"
              c:type="CH_USB_PID_BOOTLOADER_PLUS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_FIRMWARE"
              value="4097"
              c:type="CH_USB_PID_FIRMWARE">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_FIRMWARE2"
              value="4100"
              c:type="CH_USB_PID_FIRMWARE2">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_FIRMWARE_ALS"
              value="4103"
              c:type="CH_USB_PID_FIRMWARE_ALS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_FIRMWARE_ALS_SENSOR_HID"
              value="4104"
              c:type="CH_USB_PID_FIRMWARE_ALS_SENSOR_HID">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_FIRMWARE_PLUS"
              value="4098"
              c:type="CH_USB_PID_FIRMWARE_PLUS">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_PID_LEGACY" value="63706" c:type="CH_USB_PID_LEGACY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_VID" value="10047" c:type="CH_USB_VID">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="USB_VID_LEGACY" value="1240" c:type="CH_USB_VID_LEGACY">
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="WRITE_EEPROM_MAGIC"
              value="Un1c0rn2"
              c:type="CH_WRITE_EEPROM_MAGIC">
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function name="color_select_to_string"
              c:identifier="ch_color_select_to_string"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="color_select" transfer-ownership="none">
          <type name="ColorSelect" c:type="ChColorSelect"/>
        </parameter>
      </parameters>
    </function>
    <function name="command_to_string"
              c:identifier="ch_command_to_string"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="cmd" transfer-ownership="none">
          <type name="Cmd" c:type="ChCmd"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_check_firmware"
              c:identifier="ch_device_check_firmware"
              version="1.2.3"
              throws="1">
      <doc xml:space="preserve">Checks the firmware is suitable for the ColorHug device that is attached.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the command was executed successfully.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">firmware binary data</doc>
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="data_len" transfer-ownership="none">
          <doc xml:space="preserve">size of @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_close"
              c:identifier="ch_device_close"
              version="1.2.11"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_error_quark"
              c:identifier="ch_device_error_quark"
              version="0.1.1">
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">ChDevice error quark.</doc>
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="device_get_adc_calibration_neg"
              c:identifier="ch_device_get_adc_calibration_neg"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Gets the ADC positive calibration value.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">offset value</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_adc_calibration_pos"
              c:identifier="ch_device_get_adc_calibration_pos"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Gets the ADC positive calibration value.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">offset value</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_ccd_calibration"
              c:identifier="ch_device_get_ccd_calibration"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets any PCB wavelength_cal from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="nm_start" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="c0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="c1" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="c2" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_error"
              c:identifier="ch_device_get_error"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets the status for the last operation.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="status"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">a #ChError, e.g. %CH_ERROR_INVALID_ADDRESS</doc>
          <type name="Error" c:type="ChError*"/>
        </parameter>
        <parameter name="cmd"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">a #ChCmd, e.g. %CH_CMD_TAKE_READING_SPECTRAL</doc>
          <type name="Cmd" c:type="ChCmd*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_guid"
              c:identifier="ch_device_get_guid"
              version="1.2.9">
      <doc xml:space="preserve">Returns the GUID for the connected ColorHug device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the GUID address, or %NULL for error</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_illuminants"
              c:identifier="ch_device_get_illuminants"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Gets the illuminants from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">serial number</doc>
          <type name="Illuminant" c:type="ChIlluminant*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_integral_time"
              c:identifier="ch_device_get_integral_time"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets the integration time used for taking the next samples.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">integration time in ms</doc>
          <type name="guint16" c:type="guint16*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_leds"
              c:identifier="ch_device_get_leds"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets the LEDs from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">serial number</doc>
          <type name="StatusLed" c:type="ChStatusLed*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_mode"
              c:identifier="ch_device_get_mode"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="DeviceMode" c:type="ChDeviceMode"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_pcb_errata"
              c:identifier="ch_device_get_pcb_errata"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets any PCB errata from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">#ChPcbErrata, e.g. %CH_PCB_ERRATA_SWAPPED_LEDS</doc>
          <type name="PcbErrata" c:type="ChPcbErrata*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_runcode_address"
              c:identifier="ch_device_get_runcode_address"
              version="1.2.9">
      <doc xml:space="preserve">Returns the runcode address for the ColorHug device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">the runcode address, or 0 for error</doc>
        <type name="guint16" c:type="guint16"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_serial_number"
              c:identifier="ch_device_get_serial_number"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets the serial number from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">serial number</doc>
          <type name="guint32" c:type="guint32*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_spectrum"
              c:identifier="ch_device_get_spectrum"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets the spectrum from the device. This queries the device multiple times
until the spectrum has been populated.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #CdSpectrum, or %NULL for error</doc>
        <type name="Colord.Spectrum" c:type="CdSpectrum*"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_spectrum_full"
              c:identifier="ch_device_get_spectrum_full"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Gets the spectrum from the device. This queries the device multiple times
until the spectrum has been populated.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #CdSpectrum, or %NULL for error</doc>
        <type name="Colord.Spectrum" c:type="CdSpectrum*"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve">A #ChSpectrumKind</doc>
          <type name="SpectrumKind" c:type="ChSpectrumKind"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_get_temperature"
              c:identifier="ch_device_get_temperature"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Gets the PCB board temperature from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve">temperature in Celcius</doc>
          <type name="gdouble" c:type="gdouble*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_is_colorhug"
              c:identifier="ch_device_is_colorhug"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_load_sram"
              c:identifier="ch_device_load_sram"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Loads the entire SRAM from the device EEPROM.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_mode_from_firmware"
              c:identifier="ch_device_mode_from_firmware"
              version="1.2.3">
      <doc xml:space="preserve">Gets the device mode from the unique code stored in the firmware data.
The firmware identifier has been present since colorhug-1.2.2.bin for
ColorHug and all firmware versions for ColorHug2 and ColorHug+.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">A #ChDeviceMode</doc>
        <type name="DeviceMode" c:type="ChDeviceMode"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">firmware binary data</doc>
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="data_len" transfer-ownership="none">
          <doc xml:space="preserve">size of @data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_mode_to_string"
              c:identifier="ch_device_mode_to_string"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="device_mode" transfer-ownership="none">
          <type name="DeviceMode" c:type="ChDeviceMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_open"
              c:identifier="ch_device_open"
              version="0.1.29"
              throws="1">
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_open_full"
              c:identifier="ch_device_open_full"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Opens the device ready for use.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_read_sram"
              c:identifier="ch_device_read_sram"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Reads a value from the SRAM.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="GLib.Bytes" c:type="GBytes*"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="addr" transfer-ownership="none">
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_save_sram"
              c:identifier="ch_device_save_sram"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Saves the entire SRAM space into the device EEPROM.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_self_test"
              c:identifier="ch_device_self_test"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Performs a self test on the device</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_ccd_calibration"
              c:identifier="ch_device_set_ccd_calibration"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Sets any PCB wavelength_cal on the device</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="nm_start" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="c0" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="c1" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="c2" transfer-ownership="none">
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_crypto_key"
              c:identifier="ch_device_set_crypto_key"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Sets the firmware signing keys on the device.

IMPORTANT: This can only be called once until the device is unlocked.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="keys" transfer-ownership="none">
          <doc xml:space="preserve">a set of XTEA keys</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_illuminants"
              c:identifier="ch_device_set_illuminants"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Sets the illuminants on the device</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">serial number</doc>
          <type name="Illuminant" c:type="ChIlluminant"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_integral_time"
              c:identifier="ch_device_set_integral_time"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Sets the integration value for the next sample.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">integration time in ms</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_leds"
              c:identifier="ch_device_set_leds"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Sets the LEDs on the device</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">serial number</doc>
          <type name="StatusLed" c:type="ChStatusLed"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_pcb_errata"
              c:identifier="ch_device_set_pcb_errata"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Sets any PCB errata on the device</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">#ChPcbErrata, e.g. %CH_PCB_ERRATA_SWAPPED_LEDS</doc>
          <type name="PcbErrata" c:type="ChPcbErrata"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_serial_number"
              c:identifier="ch_device_set_serial_number"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Sets the serial number on the device</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">serial number</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_set_spectrum_full"
              c:identifier="ch_device_set_spectrum_full"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Sets the spectrum from the device. This sends data multiple multiple times
until the spectrum has been populated.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="kind" transfer-ownership="none">
          <doc xml:space="preserve">A #ChSpectrumKind</doc>
          <type name="SpectrumKind" c:type="ChSpectrumKind"/>
        </parameter>
        <parameter name="sp" transfer-ownership="none">
          <doc xml:space="preserve">A #CdSpectrum</doc>
          <type name="Colord.Spectrum" c:type="CdSpectrum*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_take_reading_spectral"
              c:identifier="ch_device_take_reading_spectral"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Takes a reading from the device.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">a #ChSpectrumKind, e.g. %CH_SPECTRUM_KIND_RAW</doc>
          <type name="SpectrumKind" c:type="ChSpectrumKind"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_take_reading_xyz"
              c:identifier="ch_device_take_reading_xyz"
              version="1.3.1"
              throws="1">
      <doc xml:space="preserve">Takes a reading from the device and returns the XYZ value.</doc>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve">a #CdColorXYZ, or %NULL for error</doc>
        <type name="Colord.ColorXYZ" c:type="CdColorXYZ*"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="calibration_idx" transfer-ownership="none">
          <doc xml:space="preserve">A calibration index or 0 for none</doc>
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_write_command"
              c:identifier="ch_device_write_command"
              version="0.1.29"
              throws="1">
      <doc xml:space="preserve">Sends a message to the device and waits for a reply.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the command was executed successfully.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cmd" transfer-ownership="none">
          <doc xml:space="preserve">The command to use, e.g. %CH_CMD_GET_COLOR_SELECT</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="buffer_in" transfer-ownership="none">
          <doc xml:space="preserve">The input buffer of data, or %NULL</doc>
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="buffer_in_len" transfer-ownership="none">
          <doc xml:space="preserve">The input buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="buffer_out" transfer-ownership="none">
          <doc xml:space="preserve">The output buffer of data, or %NULL</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="buffer_out_len" transfer-ownership="none">
          <doc xml:space="preserve">The output buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A #GCancellable or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_write_command_async"
              c:identifier="ch_device_write_command_async"
              version="0.1.29">
      <doc xml:space="preserve">Sends a message to the device and waits for a reply.</doc>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="cmd" transfer-ownership="none">
          <doc xml:space="preserve">The command to use, e.g. %CH_CMD_GET_COLOR_SELECT</doc>
          <type name="guint8" c:type="guint8"/>
        </parameter>
        <parameter name="buffer_in" transfer-ownership="none">
          <doc xml:space="preserve">The input buffer of data, or %NULL</doc>
          <type name="guint8" c:type="const guint8*"/>
        </parameter>
        <parameter name="buffer_in_len" transfer-ownership="none">
          <doc xml:space="preserve">The input buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="buffer_out" transfer-ownership="none">
          <doc xml:space="preserve">The output buffer of data, or %NULL</doc>
          <type name="guint8" c:type="guint8*"/>
        </parameter>
        <parameter name="buffer_out_len" transfer-ownership="none">
          <doc xml:space="preserve">The output buffer length</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">A #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="8">
          <doc xml:space="preserve">A #GAsyncReadyCallback that will be called when finished.</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">User data passed to @callback</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_write_command_finish"
              c:identifier="ch_device_write_command_finish"
              version="0.1.29"
              throws="1">
      <doc xml:space="preserve">Gets the result from the asynchronous function.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE if the request was fulfilled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">a #GUsbDevice instance.</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="res" transfer-ownership="none">
          <doc xml:space="preserve">the #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="device_write_sram"
              c:identifier="ch_device_write_sram"
              version="1.3.4"
              throws="1">
      <doc xml:space="preserve">Loads the entire SRAM from the device EEPROM.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="device" transfer-ownership="none">
          <doc xml:space="preserve">A #GUsbDevice</doc>
          <type name="GUsb.Device" c:type="GUsbDevice*"/>
        </parameter>
        <parameter name="addr" transfer-ownership="none">
          <type name="guint16" c:type="guint16"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve">A #GBytes</doc>
          <type name="GLib.Bytes" c:type="GBytes*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve">a #GCancellable, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="measure_mode_to_string"
              c:identifier="ch_measure_mode_to_string"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="measure_mode" transfer-ownership="none">
          <type name="MeasureMode" c:type="ChMeasureMode"/>
        </parameter>
      </parameters>
    </function>
    <function name="multiplier_to_string"
              c:identifier="ch_multiplier_to_string"
              version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="multiplier" transfer-ownership="none">
          <type name="FreqScale" c:type="ChFreqScale"/>
        </parameter>
      </parameters>
    </function>
    <function name="sha1_parse"
              c:identifier="ch_sha1_parse"
              moved-to="Sha1.parse"
              version="0.1.29"
              throws="1">
      <doc xml:space="preserve">Parses a SHA1 hash from a string value.</doc>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve">%TRUE for success</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve">A string representation of the SHA1 hash</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="sha1" transfer-ownership="none">
          <doc xml:space="preserve">A %ChSha1</doc>
          <type name="Sha1" c:type="ChSha1*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strerror" c:identifier="ch_strerror" version="0.1.29">
      <return-value transfer-ownership="none">
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="error_enum" transfer-ownership="none">
          <type name="Error" c:type="ChError"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
