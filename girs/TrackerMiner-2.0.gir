<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <c:include name="libtracker-miner/tracker-miner.h"/>
  <namespace name="TrackerMiner"
             version="2.0"
             shared-library="libtracker-miner-2.0.so.0"
             c:identifier-prefixes="Tracker"
             c:symbol-prefixes="tracker">
    <function-macro name="DATA_PROVIDER"
                    c:identifier="TRACKER_DATA_PROVIDER"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DATA_PROVIDER_GET_IFACE"
                    c:identifier="TRACKER_DATA_PROVIDER_GET_IFACE"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECORATOR"
                    c:identifier="TRACKER_DECORATOR"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="32"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECORATOR_CLASS"
                    c:identifier="TRACKER_DECORATOR_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="33"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECORATOR_FS"
                    c:identifier="TRACKER_DECORATOR_FS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="32"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECORATOR_FS_CLASS"
                    c:identifier="TRACKER_DECORATOR_FS_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="33"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECORATOR_FS_GET_CLASS"
                    c:identifier="TRACKER_DECORATOR_FS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DECORATOR_GET_CLASS"
                    c:identifier="TRACKER_DECORATOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="DataProvider"
               c:symbol-prefix="data_provider"
               c:type="TrackerDataProvider"
               glib:type-name="TrackerDataProvider"
               glib:get-type="tracker_data_provider_get_type"
               glib:type-struct="DataProviderIface">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-data-provider.h"
           line="40">An interface to enumerate URIs and feed the data to Tracker.</doc>
      <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                       line="87"/>
      <virtual-method name="begin" invoker="begin" version="1.2" throws="1">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.c"
             line="58">Creates a #GFileEnumerator to enumerate children at the URI
provided by @url.

The attributes value is a string that specifies the file attributes
that should be gathered. It is not an error if it's not possible to
read a particular requested attribute from a file - it just won't
be set. attributes should be a comma-separated list of attributes
or attribute wildcards. The wildcard "*" means all attributes, and
a wildcard like "standard::*" means all attributes in the standard
namespace. An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
G_FILE_ATTRIBUTE_STANDARD_NAME. See g_file_enumerate_children() for
more details.</doc>
        <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-data-provider.c"
               line="81">a #GFileEnumerator or %NULL on failure.
This must be freed with g_object_unref().</doc>
          <type name="Gio.FileEnumerator" c:type="GFileEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="60">a #TrackerDataProvider</doc>
            <type name="DataProvider" c:type="TrackerDataProvider*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="61">a #GFile to enumerate</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="62">an attribute query string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="63">a set of #TrackerDirectoryFlags</doc>
            <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="64">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="begin_async" invoker="begin_async" version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.c"
             line="115">Precisely the same operation as tracker_data_provider_begin()
is performing, but asynchronously.

When all i/o for the operation is finished the @callback will be
called with the requested information.

See the documentation of #TrackerDataProvider for information about the
order of returned files.

In case of a partial error the callback will be called with any
succeeding items and no error, and on the next request the error
will be reported. If a request is cancelled the callback will be
called with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.</doc>
        <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="117">a #TrackerDataProvider.</doc>
            <type name="DataProvider" c:type="TrackerDataProvider*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="118">a #GFile to enumerate</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="119">an attribute query string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="120">a set of #TrackerDirectoryFlags</doc>
            <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="121">the I/O priority of the request (example: %G_PRIORITY_DEFAULT)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="122">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="124">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="126">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="begin_finish"
                      invoker="begin_finish"
                      version="1.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.c"
             line="175">Finishes the asynchronous operation started with
tracker_data_provider_begin_async().</doc>
        <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                         line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-data-provider.c"
               line="185">a #GFileEnumerator or %NULL on failure.
This must be freed with g_object_unref().</doc>
          <type name="Gio.FileEnumerator" c:type="GFileEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="177">a #TrackerDataProvider.</doc>
            <type name="DataProvider" c:type="TrackerDataProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="178">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="begin"
              c:identifier="tracker_data_provider_begin"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.c"
             line="58">Creates a #GFileEnumerator to enumerate children at the URI
provided by @url.

The attributes value is a string that specifies the file attributes
that should be gathered. It is not an error if it's not possible to
read a particular requested attribute from a file - it just won't
be set. attributes should be a comma-separated list of attributes
or attribute wildcards. The wildcard "*" means all attributes, and
a wildcard like "standard::*" means all attributes in the standard
namespace. An example attribute query be "standard::*,owner::user".
The standard attributes are available as defines, like
G_FILE_ATTRIBUTE_STANDARD_NAME. See g_file_enumerate_children() for
more details.</doc>
        <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-data-provider.c"
               line="81">a #GFileEnumerator or %NULL on failure.
This must be freed with g_object_unref().</doc>
          <type name="Gio.FileEnumerator" c:type="GFileEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="60">a #TrackerDataProvider</doc>
            <type name="DataProvider" c:type="TrackerDataProvider*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="61">a #GFile to enumerate</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="62">an attribute query string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="63">a set of #TrackerDirectoryFlags</doc>
            <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="64">optional #GCancellable object, %NULL to ignore.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_async"
              c:identifier="tracker_data_provider_begin_async"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.c"
             line="115">Precisely the same operation as tracker_data_provider_begin()
is performing, but asynchronously.

When all i/o for the operation is finished the @callback will be
called with the requested information.

See the documentation of #TrackerDataProvider for information about the
order of returned files.

In case of a partial error the callback will be called with any
succeeding items and no error, and on the next request the error
will be reported. If a request is cancelled the callback will be
called with %G_IO_ERROR_CANCELLED.

During an async request no other sync and async calls are allowed,
and will result in %G_IO_ERROR_PENDING errors.

Any outstanding i/o request with higher priority (lower numerical
value) will be executed before an outstanding request with lower
priority. Default priority is %G_PRIORITY_DEFAULT.</doc>
        <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="117">a #TrackerDataProvider.</doc>
            <type name="DataProvider" c:type="TrackerDataProvider*"/>
          </instance-parameter>
          <parameter name="url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="118">a #GFile to enumerate</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="attributes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="119">an attribute query string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="120">a set of #TrackerDirectoryFlags</doc>
            <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="121">the I/O priority of the request (example: %G_PRIORITY_DEFAULT)</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="122">optional #GCancellable object, %NULL to
ignore</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="124">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="126">the data to pass to callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_finish"
              c:identifier="tracker_data_provider_begin_finish"
              version="1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.c"
             line="175">Finishes the asynchronous operation started with
tracker_data_provider_begin_async().</doc>
        <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                         line="104"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-data-provider.c"
               line="185">a #GFileEnumerator or %NULL on failure.
This must be freed with g_object_unref().</doc>
          <type name="Gio.FileEnumerator" c:type="GFileEnumerator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="data_provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="177">a #TrackerDataProvider.</doc>
            <type name="DataProvider" c:type="TrackerDataProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="178">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="DataProviderIface"
            c:type="TrackerDataProviderIface"
            glib:is-gtype-struct-for="DataProvider">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-data-provider.h"
           line="48">Virtual methods left to implement.</doc>
      <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                       line="87"/>
      <field name="g_iface">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-data-provider.h"
             line="50">Parent interface type.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="begin">
        <callback name="begin" throws="1">
          <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                           line="67"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="81">a #GFileEnumerator or %NULL on failure.
This must be freed with g_object_unref().</doc>
            <type name="Gio.FileEnumerator" c:type="GFileEnumerator*"/>
          </return-value>
          <parameters>
            <parameter name="data_provider" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="60">a #TrackerDataProvider</doc>
              <type name="DataProvider" c:type="TrackerDataProvider*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="61">a #GFile to enumerate</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="attributes" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="62">an attribute query string</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="63">a set of #TrackerDirectoryFlags</doc>
              <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="64">optional #GCancellable object, %NULL to ignore.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_async">
        <callback name="begin_async">
          <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                           line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="data_provider" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="117">a #TrackerDataProvider.</doc>
              <type name="DataProvider" c:type="TrackerDataProvider*"/>
            </parameter>
            <parameter name="url" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="118">a #GFile to enumerate</doc>
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="attributes" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="119">an attribute query string</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="flags" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="120">a set of #TrackerDirectoryFlags</doc>
              <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
            </parameter>
            <parameter name="io_priority" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="121">the I/O priority of the request (example: %G_PRIORITY_DEFAULT)</doc>
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="122">optional #GCancellable object, %NULL to
ignore</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="7">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="124">a #GAsyncReadyCallback to call when the
request is satisfied</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="7">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="126">the data to pass to callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_finish">
        <callback name="begin_finish" throws="1">
          <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                           line="81"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-data-provider.c"
                 line="185">a #GFileEnumerator or %NULL on failure.
This must be freed with g_object_unref().</doc>
            <type name="Gio.FileEnumerator" c:type="GFileEnumerator*"/>
          </return-value>
          <parameters>
            <parameter name="data_provider" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="177">a #TrackerDataProvider.</doc>
              <type name="DataProvider" c:type="TrackerDataProvider*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/libtracker-miner/tracker-data-provider.c"
                   line="178">a #GAsyncResult.</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Decorator"
           c:symbol-prefix="decorator"
           c:type="TrackerDecorator"
           parent="Miner"
           abstract="1"
           glib:type-name="TrackerDecorator"
           glib:get-type="tracker_decorator_get_type"
           glib:type-struct="DecoratorClass">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator.h"
           line="42">Abstract miner object for passive extended metadata indexing, i.e.
data past the basic information such as file name, size, etc.</doc>
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="73"/>
      <implements name="Gio.Initable"/>
      <function name="error_quark"
                c:identifier="tracker_decorator_error_quark"
                version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="127">Gives the caller the #GQuark used to identify #TrackerDecorator errors
in #GError structures. The #GQuark is used as the domain for the error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="133">the #GQuark used for the domain of a #GError.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="finished">
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="items_available">
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="delete_id"
              c:identifier="tracker_decorator_delete_id"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1414">Deletes resource needing extended metadata extraction from the
queue. @id is the same IDs emitted by tracker-store when the database is
updated for consistency. For details, see the GraphUpdated signal.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1416">a #TrackerDecorator.</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1417">an ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_class_names"
              c:identifier="tracker_decorator_get_class_names"
              glib:get-property="class-names"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1339">This function returns a string list of class names which are being
updated with extended metadata. An example would be 'nfo:Document'.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1346">a const gchar** or #NULL.</doc>
          <array c:type="const gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1341">a #TrackerDecorator.</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_data_source"
              c:identifier="tracker_decorator_get_data_source"
              glib:get-property="data-source"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1316">The unique string identifying this #TrackerDecorator that has
extracted the extended metadata. This is essentially an identifier
so it's clear WHO has extracted this extended metadata.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1324">a const gchar* or #NULL if an error happened.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1318">a #TrackerDecorator.</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_items"
              c:identifier="tracker_decorator_get_n_items"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1361">Get the number of items left in the queue to be processed. This
indicates content that may already exist in Tracker but is waiting
to be further flurished with metadata with a 2nd pass extraction or
index.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1370">the number of items queued to be processed, always &gt;= 0.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1363">a #TrackerDecorator</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="tracker_decorator_next" version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1447">Processes the next resource in the queue to have extended metadata
extracted. If the item in the queue has been completed already, it
signals it's completion instead.

This function will give a #GError if the miner is paused at the
time it is called.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1449">a #TrackerDecorator.</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1450">a #GCancellable.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1451">a #GAsyncReadyCallback.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1452">user_data for @callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="next_finish"
              c:identifier="tracker_decorator_next_finish"
              version="0.18"
              throws="1">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1493">Should be called in the callback function provided to
tracker_decorator_next() to return the result of the task be it an
error or not.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="115"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1503">a #TrackerDecoratorInfo on success or
 #NULL on error. Free with tracker_decorator_info_unref().</doc>
          <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1495">a #TrackerDecorator.</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1496">a #GAsyncResult.</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend_id"
              c:identifier="tracker_decorator_prepend_id"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1386">Adds resource needing extended metadata extraction to the queue.
@id is the same IDs emitted by tracker-store when the database is updated for
consistency. For details, see the GraphUpdated signal.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1388">a #TrackerDecorator.</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1389">the ID of the resource ID.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="class_name_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1390">the ID of the resource's class.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_priority_rdf_types"
              c:identifier="tracker_decorator_set_priority_rdf_types"
              glib:set-property="priority-rdf-types"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1547">Re-evaluate the priority queues internally to ensure that
@rdf_types are handled before all other content. This is useful for
applications that need their content available sooner than the
standard time it would take to index content.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1549">a #TrackerDecorator</doc>
            <type name="Decorator" c:type="TrackerDecorator*"/>
          </instance-parameter>
          <parameter name="rdf_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1550">a string array of rdf types</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <property name="class-names"
                writable="1"
                transfer-ownership="none"
                getter="get_class_names">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="commit-batch-size"
                writable="1"
                transfer-ownership="none"
                default-value="200">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="data-source"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_data_source"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="priority-rdf-types"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_priority_rdf_types">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <field name="parent_instance">
        <type name="Miner" c:type="TrackerMiner"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <glib:signal name="finished" when="last" version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1272">The ::finished signal will be emitted whenever the
#TrackerDecorator has finished extracted extended metadata
for resources in the database.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="items-available" when="last" version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1254">The ::items-available signal will be emitted whenever the
#TrackerDecorator sees resources that are available for
extended metadata extraction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DecoratorClass"
            c:type="TrackerDecoratorClass"
            glib:is-gtype-struct-for="Decorator">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator.h"
           line="53">An implementation that takes care of extracting extra metadata
specific to file types by talking to tracker-extract.

Based on #TrackerMinerClass.</doc>
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="73"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.h"
             line="55">parent object class.</doc>
        <type name="MinerClass" c:type="TrackerMinerClass"/>
      </field>
      <field name="items_available">
        <callback name="items_available">
          <source-position filename="src/libtracker-miner/tracker-decorator.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="decorator" transfer-ownership="none">
              <type name="Decorator" c:type="TrackerDecorator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finished">
        <callback name="finished">
          <source-position filename="src/libtracker-miner/tracker-decorator.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="decorator" transfer-ownership="none">
              <type name="Decorator" c:type="TrackerDecorator*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.h"
             line="58">Reserved for future API improvements.</doc>
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DecoratorError" c:type="TrackerDecoratorError">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator.h"
           line="76">Possible errors returned when calling tracker_decorator_next_finish().</doc>
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="93"/>
      <member name="empty"
              value="0"
              c:identifier="TRACKER_DECORATOR_ERROR_EMPTY">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.h"
             line="78">There is no item to be processed
next. It is entirely possible to have a ::items_available signal
emitted and then have this error when calling
tracker_decorator_next_finish() because the signal may apply to a
class which we're not interested in. For example, a new nmo:Email
might have been added to Tracker, but we might only be interested
in nfo:Document. This case would give this error.</doc>
      </member>
      <member name="paused"
              value="1"
              c:identifier="TRACKER_DECORATOR_ERROR_PAUSED">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.h"
             line="85">No work was done or will be done
because the miner is currently paused.</doc>
      </member>
    </enumeration>
    <class name="DecoratorFS"
           c:symbol-prefix="decorator_fs"
           c:type="TrackerDecoratorFS"
           parent="Decorator"
           abstract="1"
           glib:type-name="TrackerDecoratorFS"
           glib:get-type="tracker_decorator_fs_get_type"
           glib:type-struct="DecoratorFSClass">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator-fs.h"
           line="41">A decorator object.</doc>
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="64"/>
      <implements name="Gio.Initable"/>
      <method name="prepend_file"
              c:identifier="tracker_decorator_fs_prepend_file"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator-fs.c"
             line="279">Prepends a file for processing.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator-fs.c"
               line="286">the tracker:id of the element corresponding to the file</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="decorator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator-fs.c"
                 line="281">a #TrackerDecoratorFS</doc>
            <type name="DecoratorFS" c:type="TrackerDecoratorFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator-fs.c"
                 line="282">a #GFile to process</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Decorator" c:type="TrackerDecorator"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
    </class>
    <record name="DecoratorFSClass"
            c:type="TrackerDecoratorFSClass"
            glib:is-gtype-struct-for="DecoratorFS">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator-fs.h"
           line="51">A class that takes care of resources on mount points added or
removed, this is based on #TrackerDecoratorClass.</doc>
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="64"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator-fs.h"
             line="53">parent object class.</doc>
        <type name="DecoratorClass" c:type="TrackerDecoratorClass"/>
      </field>
      <field name="padding">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator-fs.h"
             line="54">Reserved for future API improvements.</doc>
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DecoratorInfo"
            c:type="TrackerDecoratorInfo"
            opaque="1"
            glib:type-name="TrackerDecoratorInfo"
            glib:get-type="tracker_decorator_info_get_type"
            c:symbol-prefix="decorator_info">
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="40"/>
      <method name="complete"
              c:identifier="tracker_decorator_info_complete"
              version="2.0">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1661">Completes the task associated to this #TrackerDecoratorInfo.
Takes ownership of @sparql.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1663">a #TrackerDecoratorInfo</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
          <parameter name="sparql" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1664">SPARQL string</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="complete_error"
              c:identifier="tracker_decorator_info_complete_error"
              version="2.0">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1678">Completes the task associated to this #TrackerDecoratorInfo,
returning the given @error happened during SPARQL generation.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1680">a #TrackerDecoratorInfo</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1681">An error occurred during SPARQL generation</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mimetype"
              c:identifier="tracker_decorator_info_get_mimetype"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1616">A MIME¹ type is a way of describing the content type of a file or
set of data. An example would be 'text/plain' for a clear text
document or file.

¹: http://en.wikipedia.org/wiki/MIME</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1626">the MIME type for #TrackerDecoratorInfo on success or #NULL on error.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1618">a #TrackerDecoratorInfo.</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_task"
              c:identifier="tracker_decorator_info_get_task"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1638">Get the #GTask associated with retrieving extended metadata and
information for a URN in Tracker.

The task object's data (accessible with g_task_get_task_data()) is the
#TrackerSparqlBuilder. Use tracker_decorator_info_complete() to complete
the task instead of using this object.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1649">the #GTask for #TrackerDecoratorInfo on
success or #NULL if there is no existing #GTask.</doc>
          <type name="Gio.Task" c:type="GTask*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1640">a #TrackerDecoratorInfo.</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url"
              c:identifier="tracker_decorator_info_get_url"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1598">A URL is a Uniform Resource Locator and should be a location associated
with a resource in the database. For example, 'file:///tmp/foo.txt'.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1605">the URL for #TrackerDecoratorInfo on success or #NULL on error.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1600">a #TrackerDecoratorInfo.</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_urn"
              c:identifier="tracker_decorator_info_get_urn"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="1580">A URN is a Uniform Resource Name and should be a unique identifier
for a resource in the database.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="1587">the URN for #TrackerDecoratorInfo on success or #NULL on error.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="1582">a #TrackerDecoratorInfo.</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref"
              c:identifier="tracker_decorator_info_ref"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="170">Increases the reference count of @info by 1.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-decorator.c"
               line="176">the same @info passed in, or %NULL on error.</doc>
          <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="172">a #TrackerDecoratorInfo</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="tracker_decorator_info_unref"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-decorator.c"
             line="187">Decreases the reference count of @info by 1 and frees it when the
reference count reaches 0.</doc>
        <source-position filename="src/libtracker-miner/tracker-decorator.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-decorator.c"
                 line="189">a #TrackerDecoratorInfo</doc>
            <type name="DecoratorInfo" c:type="TrackerDecoratorInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="DirectoryFlags" c:type="TrackerDirectoryFlags">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-enums.h"
           line="36">Flags used when adding a new directory to be indexed in the
#TrackerIndexingTree and #TrackerDataProvider.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-enums.h"
                       line="73"/>
      <member name="none" value="0" c:identifier="TRACKER_DIRECTORY_FLAG_NONE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="38">No flags.</doc>
      </member>
      <member name="recurse"
              value="2"
              c:identifier="TRACKER_DIRECTORY_FLAG_RECURSE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="39">Should recurse in the directory.</doc>
      </member>
      <member name="check_mtime"
              value="4"
              c:identifier="TRACKER_DIRECTORY_FLAG_CHECK_MTIME">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="40">Should check mtimes of items
in the directory.</doc>
      </member>
      <member name="monitor"
              value="8"
              c:identifier="TRACKER_DIRECTORY_FLAG_MONITOR">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="42">Should setup monitors in the items
found in the directory.</doc>
      </member>
      <member name="ignore"
              value="16"
              c:identifier="TRACKER_DIRECTORY_FLAG_IGNORE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="44">Should ignore the directory
contents.</doc>
      </member>
      <member name="preserve"
              value="32"
              c:identifier="TRACKER_DIRECTORY_FLAG_PRESERVE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="46">Should preserve items in the
directory even if the directory gets removed.</doc>
      </member>
      <member name="priority"
              value="64"
              c:identifier="TRACKER_DIRECTORY_FLAG_PRIORITY">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="48">Internally a priority queue is
used and this flag makes sure the directory is given a priority
over other directories queued.</doc>
      </member>
      <member name="no_stat"
              value="128"
              c:identifier="TRACKER_DIRECTORY_FLAG_NO_STAT">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="51">For cases where the content being
crawled by the enumerator is not local (e.g. it's on a
server somewhere), use the #TRACKER_DIRECTORY_FLAG_NO_STAT flag.
The default is to use stat() and assume we're mining a local or
mounted file system.</doc>
      </member>
      <member name="check_deleted"
              value="256"
              c:identifier="TRACKER_DIRECTORY_FLAG_CHECK_DELETED">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="56">Forces checks on deleted
contents. This is most usually optimized away unless directory
mtime changes indicate there could be deleted content.</doc>
      </member>
    </bitfield>
    <enumeration name="FilterPolicy" c:type="TrackerFilterPolicy">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-enums.h"
           line="89">Flags used when defining default filter policy in the #TrackerIndexingTree.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-enums.h"
                       line="99"/>
      <member name="deny" value="0" c:identifier="TRACKER_FILTER_POLICY_DENY">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="91">Items matching the filter will be skipped.</doc>
      </member>
      <member name="accept"
              value="1"
              c:identifier="TRACKER_FILTER_POLICY_ACCEPT">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="92">Items matching the filter will be accepted.</doc>
      </member>
    </enumeration>
    <enumeration name="FilterType" c:type="TrackerFilterType">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-enums.h"
           line="75">Flags used when adding a new filter in the #TrackerIndexingTree.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-enums.h"
                       line="87"/>
      <member name="file" value="0" c:identifier="TRACKER_FILTER_FILE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="77">All files matching this filter will be filtered out.</doc>
      </member>
      <member name="directory"
              value="1"
              c:identifier="TRACKER_FILTER_DIRECTORY">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="78">All directories matching this filter will be filtered out.</doc>
      </member>
      <member name="parent_directory"
              value="2"
              c:identifier="TRACKER_FILTER_PARENT_DIRECTORY">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="79">All files in directories matching this filter will be filtered out.</doc>
      </member>
    </enumeration>
    <function-macro name="INDEXING_TREE"
                    c:identifier="TRACKER_INDEXING_TREE"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEXING_TREE_CLASS"
                    c:identifier="TRACKER_INDEXING_TREE_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="36"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INDEXING_TREE_GET_CLASS"
                    c:identifier="TRACKER_INDEXING_TREE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DATA_PROVIDER"
                    c:identifier="TRACKER_IS_DATA_PROVIDER"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-data-provider.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DECORATOR"
                    c:identifier="TRACKER_IS_DECORATOR"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DECORATOR_CLASS"
                    c:identifier="TRACKER_IS_DECORATOR_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator.h"
                       line="35"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DECORATOR_FS"
                    c:identifier="TRACKER_IS_DECORATOR_FS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DECORATOR_FS_CLASS"
                    c:identifier="TRACKER_IS_DECORATOR_FS_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-decorator-fs.h"
                       line="35"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEXING_TREE"
                    c:identifier="TRACKER_IS_INDEXING_TREE"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="37"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INDEXING_TREE_CLASS"
                    c:identifier="TRACKER_IS_INDEXING_TREE_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="38"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER"
                    c:identifier="TRACKER_IS_MINER"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="72"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_CLASS"
                    c:identifier="TRACKER_IS_MINER_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="73"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_FS"
                    c:identifier="TRACKER_IS_MINER_FS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="41"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_FS_CLASS"
                    c:identifier="TRACKER_IS_MINER_FS_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="42"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_ONLINE"
                    c:identifier="TRACKER_IS_MINER_ONLINE"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="33"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_ONLINE_CLASS"
                    c:identifier="TRACKER_IS_MINER_ONLINE_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="34"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_PROXY"
                    c:identifier="TRACKER_IS_MINER_PROXY"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="36"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MINER_PROXY_CLASS"
                    c:identifier="TRACKER_IS_MINER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="37"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <class name="IndexingTree"
           c:symbol-prefix="indexing_tree"
           c:type="TrackerIndexingTree"
           parent="GObject.Object"
           glib:type-name="TrackerIndexingTree"
           glib:get-type="tracker_indexing_tree_get_type"
           glib:type-struct="IndexingTreeClass">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-indexing-tree.h"
           line="41">Base object used to configure indexing within #TrackerMinerFS items.</doc>
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="79"/>
      <constructor name="new"
                   c:identifier="tracker_indexing_tree_new"
                   version="0.14">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="374">Returns a newly created #TrackerIndexingTree</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="379">a newly allocated #TrackerIndexingTree</doc>
          <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
        </return-value>
      </constructor>
      <constructor name="new_with_root"
                   c:identifier="tracker_indexing_tree_new_with_root"
                   version="1.2.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="389">If @root is %NULL, the default value is 'file:///'. Using %NULL
here is the equivalent to calling tracker_indexing_tree_new() which
takes no @root argument.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="397">a newly allocated #TrackerIndexingTree</doc>
          <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="391">The top level URL</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="child_updated">
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="indexing_tree" transfer-ownership="none">
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="directory_added">
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="indexing_tree" transfer-ownership="none">
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="directory_removed">
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="indexing_tree" transfer-ownership="none">
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="directory_updated">
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="indexing_tree" transfer-ownership="none">
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add" c:identifier="tracker_indexing_tree_add">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="491">Adds a directory to the indexing tree with the
given configuration flags.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="493">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="494">#GFile pointing to a directory</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="495">Configuration flags for the directory</doc>
            <type name="DirectoryFlags" c:type="TrackerDirectoryFlags"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_filter"
              c:identifier="tracker_indexing_tree_add_filter">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="677">Adds a new filter for basenames.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="679">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="680">filter type</doc>
            <type name="FilterType" c:type="TrackerFilterType"/>
          </parameter>
          <parameter name="glob_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="681">glob-style string for the filter</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear_filters"
              c:identifier="tracker_indexing_tree_clear_filters">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="702">Clears all filters of a given type.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="704">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="705">filter type to clear</doc>
            <type name="FilterType" c:type="TrackerFilterType"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_is_indexable"
              c:identifier="tracker_indexing_tree_file_is_indexable">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="829">returns %TRUE if @file should be indexed according to the
parameters given through tracker_indexing_tree_add() and
tracker_indexing_tree_add_filter().

If @file_type is #G_FILE_TYPE_UNKNOWN, file type will be queried to the
file system.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="842">%TRUE if @file should be indexed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="831">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="832">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="file_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="833">a #GFileType</doc>
            <type name="Gio.FileType" c:type="GFileType"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_is_root"
              c:identifier="tracker_indexing_tree_file_is_root"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="1163">Evaluates if the URL represented by @file is the same of that for
the root of the @tree.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="1171">%TRUE if @file matches the URL canonically, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1165">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1166">a #GFile to compare</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="file_matches_filter"
              c:identifier="tracker_indexing_tree_file_matches_filter">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="734">Returns %TRUE if @file matches any filter of the given filter type.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="742">%TRUE if @file is filtered.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="736">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="737">filter type</doc>
            <type name="FilterType" c:type="TrackerFilterType"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="738">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_default_policy"
              c:identifier="tracker_indexing_tree_get_default_policy"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="1032">Get the default filtering policies for @tree when indexing content.
Some content is black listed or white listed and the default policy
for that is returned here. The @filter allows specific type of
policies to be returned, for example, the default policy for files
(#TRACKER_FILTER_FILE).</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="1043">Either #TRACKER_FILTER_POLICY_DENY or
#TRACKER_FILTER_POLICY_ACCEPT.</doc>
          <type name="FilterPolicy" c:type="TrackerFilterPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1034">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1035">a #TrackerFilterType</doc>
            <type name="FilterType" c:type="TrackerFilterType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_filter_hidden"
              c:identifier="tracker_indexing_tree_get_filter_hidden"
              glib:get-property="filter-hidden"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="951">Describes if the @tree should index hidden content. To change this
setting, see tracker_indexing_tree_set_filter_hidden().</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="958">%FALSE if hidden files are indexed, otherwise %TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="953">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_master_root"
              c:identifier="tracker_indexing_tree_get_master_root"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="1117">Returns the #GFile that represents the master root location for all
indexing locations. For example, if
&lt;filename&gt;file:///etc&lt;/filename&gt; is an indexed path and so was
&lt;filename&gt;file:///home/user&lt;/filename&gt;, the master root is
&lt;filename&gt;file:///&lt;/filename&gt;. Only one scheme per @tree can be
used, so you can not mix &lt;filename&gt;http&lt;/filename&gt; and
&lt;filename&gt;file&lt;/filename&gt; roots in @tree.

The return value should &lt;emphasis&gt;NEVER&lt;/emphasis&gt; be %NULL. In
cases where no root is given, we fallback to
&lt;filename&gt;file:///&lt;/filename&gt;.

Roots explained:

- master root = top most level root node,
  e.g. file:///

- config root = a root node from GSettings,
  e.g. file:///home/martyn/Documents

- root = ANY root, normally config root, but it can also apply to
  roots added for devices, which technically are not a config root or a
  master root.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="1145">the effective root for all locations, or
%NULL on error. The root is owned by @tree and should not be freed.
It can be referenced using g_object_ref().</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1119">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root"
              c:identifier="tracker_indexing_tree_get_root"
              glib:get-property="root">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="1064">Returns the #GFile that was previously added through tracker_indexing_tree_add()
and would equal or contain @file, or %NULL if none applies.

If the return value is non-%NULL, @directory_flags would contain the
#TrackerDirectoryFlags applying to @file.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="1076">the effective parent in @tree, or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1066">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1067">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="directory_flags"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1068">return location for the applying #TrackerDirectoryFlags</doc>
            <type name="DirectoryFlags" c:type="TrackerDirectoryFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_roots"
              c:identifier="tracker_indexing_tree_list_roots">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="1203">Returns the list of indexing roots in @tree</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="130"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="1209">The list
         of roots, the list itself must be freed with g_list_free(),
         the list elements are owned by @tree and should not be
         freed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Gio.File"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1205">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_update"
              c:identifier="tracker_indexing_tree_notify_update"
              version="1.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="616">Signals either #TrackerIndexingTree::directory-updated or
#TrackerIndexingTree::child-updated on the given file and
returns #TRUE. If @file is not indexed according to the
#TrackerIndexingTree, #FALSE is returned.

If @recursive is #TRUE, #TrackerIndexingTree::directory-updated
will be emitted on the indexing roots that are contained in @file.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="630">#TRUE if a signal is emitted.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="618">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="619">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="620">Whether contained indexing roots are affected by the update</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="parent_is_indexable"
              c:identifier="tracker_indexing_tree_parent_is_indexable">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="909">returns %TRUE if @parent should be indexed based on its contents.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-indexing-tree.c"
               line="917">%TRUE if @parent should be indexed.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="911">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="912">parent directory</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="children" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="913">children within @parent</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Gio.File"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="tracker_indexing_tree_remove">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="560">Removes @directory from the indexing tree, note that
only directories previously added with tracker_indexing_tree_add()
can be effectively removed.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="562">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="563">#GFile pointing to a directory</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_policy"
              c:identifier="tracker_indexing_tree_set_default_policy"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="1003">Set the default @policy (to allow or deny) for content in @tree
based on the type - in this case @filter. Here, @filter is a file
or directory and there are some other options too.

For example, you can (by default), disable indexing all directories
using this function.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1005">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1006">a #TrackerFilterType</doc>
            <type name="FilterType" c:type="TrackerFilterType"/>
          </parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="1007">a #TrackerFilterPolicy</doc>
            <type name="FilterPolicy" c:type="TrackerFilterPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter_hidden"
              c:identifier="tracker_indexing_tree_set_filter_hidden"
              glib:set-property="filter-hidden"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="973">When indexing content, sometimes it is preferable to ignore hidden
content, for example, files prefixed with &amp;quot;.&amp;quot;. This is
common for files in a home directory which are usually config
files.

Sets the indexing policy for @tree with hidden files and content.
To ignore hidden files, @filter_hidden should be %TRUE, otherwise
%FALSE.</doc>
        <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                         line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="975">a #TrackerIndexingTree</doc>
            <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
          </instance-parameter>
          <parameter name="filter_hidden" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="976">a boolean</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="filter-hidden"
                writable="1"
                transfer-ownership="none"
                setter="set_filter_hidden"
                getter="get_filter_hidden"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="root"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_root">
        <type name="Gio.File"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="gpointer" c:type="gpointer"/>
      </field>
      <glib:signal name="child-updated" when="last" version="1.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="336">The ::child-updated signal may be emitted to notify
about possible changes on children of a root.

#TrackerIndexingTree does not emit those by itself,
those may be triggered through tracker_indexing_tree_notify_update().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="root" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="339">the root of this child</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="340">the updated child</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="directory-added" when="last" version="0.14">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="268">the ::directory-added signal is emitted when a new
directory is added to the list of other directories which
are to be considered for indexing. Typically this is
signalled when the tracker_indexing_tree_add() API is
called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="271">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="directory-removed" when="last" version="0.14">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="291">the ::directory-removed signal is emitted when a
directory is removed from the list of other directories
which are to be considered for indexing. Typically this is
signalled when the tracker_indexing_tree_remove() API is
called.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="294">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="directory-updated" when="last" version="0.14">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.c"
             line="314">The ::directory-updated signal is emitted on a root
when either its indexing flags change (e.g. due to consecutive
calls to tracker_indexing_tree_add()), or anytime an update is
requested through tracker_indexing_tree_notify_update().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-indexing-tree.c"
                 line="317">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="IndexingTreeClass"
            c:type="TrackerIndexingTreeClass"
            glib:is-gtype-struct-for="IndexingTree">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-indexing-tree.h"
           line="54">Class for the #TrackerIndexingTree.</doc>
      <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                       line="79"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.h"
             line="56">parent object class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="directory_added">
        <callback name="directory_added">
          <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                           line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="indexing_tree" transfer-ownership="none">
              <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
            </parameter>
            <parameter name="directory" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="directory_removed">
        <callback name="directory_removed">
          <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                           line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="indexing_tree" transfer-ownership="none">
              <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
            </parameter>
            <parameter name="directory" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="directory_updated">
        <callback name="directory_updated">
          <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                           line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="indexing_tree" transfer-ownership="none">
              <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
            </parameter>
            <parameter name="directory" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="child_updated">
        <callback name="child_updated">
          <source-position filename="src/libtracker-miner/tracker-indexing-tree.h"
                           line="74"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="indexing_tree" transfer-ownership="none">
              <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
            </parameter>
            <parameter name="root" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="child" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-indexing-tree.h"
             line="61">Reserved for future API improvements.</doc>
        <array zero-terminated="0" fixed-size="9">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <function-macro name="MINER"
                    c:identifier="TRACKER_MINER"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="70"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_CLASS"
                    c:identifier="TRACKER_MINER_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="71"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MINER_DBUS_INTERFACE"
              value="org.freedesktop.Tracker1.Miner"
              c:type="TRACKER_MINER_DBUS_INTERFACE"
              version="0.8">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="35">The name of the D-Bus interface to use for all data miners that
inter-operate with Tracker.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MINER_DBUS_NAME_PREFIX"
              value="org.freedesktop.Tracker1.Miner."
              c:type="TRACKER_MINER_DBUS_NAME_PREFIX"
              version="0.8">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="45">D-Bus name prefix to use for all data miners. This allows custom
miners to be written using @TRACKER_MINER_DBUS_NAME_PREFIX + "Files" for
example and would show up on D-Bus under
&amp;quot;org.freedesktop.Tracker1.Miner.Files&amp;quot;.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MINER_DBUS_PATH_PREFIX"
              value="/org/freedesktop/Tracker1/Miner/"
              c:type="TRACKER_MINER_DBUS_PATH_PREFIX"
              version="0.8">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="57">D-Bus path prefix to use for all data miners. This allows custom
miners to be written using @TRACKER_MINER_DBUS_PATH_PREFIX + "Files" for
example and would show up on D-Bus under
&amp;quot;/org/freedesktop/Tracker1/Miner/Files&amp;quot;.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="MINER_ERROR_DOMAIN"
              value="TrackerMiner"
              c:type="TRACKER_MINER_ERROR_DOMAIN"
              version="0.8">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="76">Used as the domain for any #GErrors reported by @TrackerMiner objects.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="83"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="MINER_FS"
                    c:identifier="TRACKER_MINER_FS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="39"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_FS_CLASS"
                    c:identifier="TRACKER_MINER_FS_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="40"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_FS_GET_CLASS"
                    c:identifier="TRACKER_MINER_FS_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="43"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_GET_CLASS"
                    c:identifier="TRACKER_MINER_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="74"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_ONLINE"
                    c:identifier="TRACKER_MINER_ONLINE"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="31"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_ONLINE_CLASS"
                    c:identifier="TRACKER_MINER_ONLINE_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="32"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_ONLINE_GET_CLASS"
                    c:identifier="TRACKER_MINER_ONLINE_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="35"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_PROXY"
                    c:identifier="TRACKER_MINER_PROXY"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="34"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_PROXY_CLASS"
                    c:identifier="TRACKER_MINER_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="35"/>
      <parameters>
        <parameter name="c">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MINER_PROXY_GET_CLASS"
                    c:identifier="TRACKER_MINER_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="38"/>
      <parameters>
        <parameter name="o">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Miner"
           c:symbol-prefix="miner"
           c:type="TrackerMiner"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="TrackerMiner"
           glib:get-type="tracker_miner_get_type"
           glib:type-struct="MinerClass">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="98">Abstract miner object.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="137"/>
      <implements name="Gio.Initable"/>
      <function name="error_quark"
                c:identifier="tracker_miner_error_quark"
                version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="106">Gives the caller the #GQuark used to identify #TrackerMiner errors
in #GError structures. The #GQuark is used as the domain for the error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-object.c"
               line="112">the #GQuark used for the domain of a #GError.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="paused">
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="progress">
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
          <parameter name="status" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="progress" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="remaining_time" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resumed">
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="started">
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stopped">
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_connection"
              c:identifier="tracker_miner_get_connection"
              version="0.10"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="605">Gets the #TrackerSparqlConnection initialized by @miner</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="181"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-object.c"
               line="611">a #TrackerSparqlConnection.</doc>
          <type c:type="TrackerSparqlConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="607">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_paused"
              c:identifier="tracker_miner_is_paused"
              version="0.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="540">Returns #TRUE if the miner is paused.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="176"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-object.c"
               line="546">#TRUE if the miner is paused.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="542">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_started"
              c:identifier="tracker_miner_is_started"
              version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="522">Returns #TRUE if the miner has been started.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-object.c"
               line="528">#TRUE if the miner is already started.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="524">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="tracker_miner_pause">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="558">Asks @miner to pause. This call may be called multiple times,
but #TrackerMiner::paused will only be emitted the first time.
The same number of tracker_miner_resume() calls are expected
in order to resume operations.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="178"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="560">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resume" c:identifier="tracker_miner_resume">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="580">Asks the miner to resume processing. This needs to be called
as many times as tracker_miner_pause() calls were done
previously. This function will return #TRUE when the miner
is actually resumed.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-object.c"
               line="589">#TRUE if the miner resumed its operations.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="582">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="tracker_miner_start" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="486">Tells the miner to start processing data.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="488">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="tracker_miner_stop" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="504">Tells the miner to stop processing data.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                         line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="506">a #TrackerMiner</doc>
            <type name="Miner" c:type="TrackerMiner*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="connection"
                version="2.0"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="260">The SPARQL connection to use. For compatibility reasons, if not set
at construct time, one shall be obtained through
tracker_sparql_connection_get().</doc>
        <type/>
      </property>
      <property name="progress"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="remaining-time"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="-1">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="status"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="Idle">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="MinerPrivate" c:type="TrackerMinerPrivate*"/>
      </field>
      <glib:signal name="paused" when="last" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="168">the ::paused signal is emitted whenever
there is any reason to pause, either
internal (through tracker_miner_pause()) or
external (through DBus, see #TrackerMinerManager).</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="progress" when="last" version="0.12">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="205">the ::progress signal will be emitted by TrackerMiner implementations
to indicate progress about the data mining process. @status will
contain a translated string with the current miner status and @progress
will indicate how much has been processed so far. @remaining_time will
give the number expected of seconds to finish processing, 0 if the
value cannot be estimated, and -1 if its not applicable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="208">miner status</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="progress" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="209">a #gdouble indicating miner progress, from 0 to 1.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="remaining_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-object.c"
                 line="210">a #gint indicating the reamaining processing time, in
seconds.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="resumed" when="last" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="187">the ::resumed signal is emitted whenever
all reasons to pause have disappeared, see
tracker_miner_resume() and #TrackerMinerManager.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="started" when="last" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="132">the ::started signal is emitted in the miner
right after it has been started through
tracker_miner_start().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="stopped" when="last" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.c"
             line="150">the ::stopped signal is emitted in the miner
right after it has been stopped through
tracker_miner_stop().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MinerClass"
            c:type="TrackerMinerClass"
            glib:is-gtype-struct-for="Miner">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="108">Virtual methods left to implement.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="137"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="110">parent object class.</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="started">
        <callback name="started">
          <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                           line="124"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="Miner" c:type="TrackerMiner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stopped">
        <callback name="stopped">
          <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                           line="125"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="Miner" c:type="TrackerMiner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="paused">
        <callback name="paused">
          <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                           line="127"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="Miner" c:type="TrackerMiner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resumed">
        <callback name="resumed">
          <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                           line="128"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="Miner" c:type="TrackerMiner*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="progress">
        <callback name="progress">
          <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                           line="130"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="Miner" c:type="TrackerMiner*"/>
            </parameter>
            <parameter name="status" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="progress" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="remaining_time" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="116">Reserved for future API improvements.</doc>
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MinerError" c:type="TrackerMinerError">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.h"
           line="139">Possible errors returned when calling #TrackerMiner APIs or
subclassed miners where the error is generic to all miners.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="167"/>
      <member name="name_missing"
              value="0"
              c:identifier="TRACKER_MINER_ERROR_NAME_MISSING">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="141">No name was given when creating
the miner. The name is crucial for D-Bus presence and a host of
other things.</doc>
      </member>
      <member name="name_unavailable"
              value="1"
              c:identifier="TRACKER_MINER_ERROR_NAME_UNAVAILABLE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="144">The name trying to be used
for the miner was not available, possibly because the miner is
already running with the same name in another process.</doc>
      </member>
      <member name="paused"
              value="2"
              c:identifier="TRACKER_MINER_ERROR_PAUSED">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="147">Given by miners when an API is used at
the time the miner itself is paused and such actions should be avoided.</doc>
      </member>
      <member name="paused_already"
              value="3"
              c:identifier="TRACKER_MINER_ERROR_PAUSED_ALREADY">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="149">The pause request has already
been given by the same application with the same reason. Duplicate
pause calls with the same reason by the same application can not
be carried out.</doc>
      </member>
      <member name="invalid_cookie"
              value="4"
              c:identifier="TRACKER_MINER_ERROR_INVALID_COOKIE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-object.h"
             line="153">When pausing a miner, a cookie
(or @gint based ID) is given. That cookie must be used to resume a
previous pause request. If the cookie is unrecognised, this error
is given.</doc>
      </member>
    </enumeration>
    <class name="MinerFS"
           c:symbol-prefix="miner_fs"
           c:type="TrackerMinerFS"
           parent="Miner"
           abstract="1"
           glib:type-name="TrackerMinerFS"
           glib:get-type="tracker_miner_fs_get_type"
           glib:type-struct="MinerFSClass">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-fs.h"
           line="55">Abstract miner implementation to get data from the filesystem.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="121"/>
      <implements name="Gio.Initable"/>
      <function name="error_quark"
                c:identifier="tracker_miner_fs_error_quark"
                version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="315">Gives the caller the #GQuark used to identify #TrackerMinerFS errors
in #GError structures. The #GQuark is used as the domain for the error.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="321">the #GQuark used for the domain of a #GError.</doc>
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <virtual-method name="filter_event">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <type name="MinerFSEventType" c:type="TrackerMinerFSEventType"/>
          </parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="source_file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="finished">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="elapsed" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="directories_found" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="directories_ignored" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="files_found" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="files_ignored" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="finished_root">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="root" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="directories_found" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="directories_ignored" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="files_found" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="files_ignored" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="move_file">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="109"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="recursive" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process_file">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="87"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="task" transfer-ownership="none">
            <type name="Gio.Task" c:type="GTask*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="process_file_attributes">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="task" transfer-ownership="none">
            <type name="Gio.Task" c:type="GTask*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_children">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="107"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_file">
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="105"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="check_file"
              c:identifier="tracker_miner_fs_check_file"
              version="0.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2435">Tells the filesystem miner to check and index a file at
a given priority, this file must be part of the usual
crawling directories of #TrackerMinerFS. See
tracker_indexing_tree_add().</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2437">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2438">#GFile for the file to check</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2439">the priority of the check task</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="check_parents" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2440">whether to check parents and eligibility or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_provider"
              c:identifier="tracker_miner_fs_get_data_provider"
              glib:get-property="data-provider"
              version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2706">Returns the #TrackerDataProvider implementation, which is being used
to supply #GFile and #GFileInfo content to Tracker.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="2713">The #TrackerDataProvider supplying content</doc>
          <type name="DataProvider" c:type="TrackerDataProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2708">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indexing_tree"
              c:identifier="tracker_miner_fs_get_indexing_tree">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2688">Returns the #TrackerIndexingTree which determines
what files/directories are indexed by @fs</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="2695">The #TrackerIndexingTree
         holding the indexing configuration</doc>
          <type name="IndexingTree" c:type="TrackerIndexingTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2690">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_throttle"
              c:identifier="tracker_miner_fs_get_throttle"
              glib:get-property="throttle"
              version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2558">Gets the current throttle value, see
tracker_miner_fs_set_throttle() for more details.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="2565">a double representing a value between 0.0 and 1.0.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2560">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_urn"
              c:identifier="tracker_miner_fs_get_urn"
              version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2577">If the item exists in the store, this function retrieves
the URN for a #GFile being currently processed.

If @file is not being currently processed by @fs, or doesn't
exist in the store yet, %NULL will be returned.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="161"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="2588">The URN containing the data associated to @file,
         or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2579">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2580">a #GFile obtained in #TrackerMinerFS::process-file</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="has_items_to_process"
              c:identifier="tracker_miner_fs_has_items_to_process"
              version="0.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2661">The @fs keeps many priority queus for content it is processing.
This function returns %TRUE if the sum of all (or any) priority
queues is more than 0. This includes items deleted, created,
updated, moved or being written back.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="2670">%TRUE if there are items to process in the internal
queues, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2663">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify_finish"
              c:identifier="tracker_miner_fs_notify_finish">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2488">Notifies @fs that all processing on @file has been finished, if any error
happened during file data processing, it should be passed in @error, else
@sparql should contain correct SPARQL representing the operation in
particular.

This function is expected to be called in reaction to all #TrackerMinerFS
signals</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2490">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="task" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2491">a #GTask obtained in a #TrackerMinerFS signal/vmethod</doc>
            <type name="Gio.Task" c:type="GTask*"/>
          </parameter>
          <parameter name="sparql"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2492">Resulting sparql for the given operation, or %NULL if
  there is an error</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2494">a #GError with the error that happened during processing, or %NULL.</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="query_urn"
              c:identifier="tracker_miner_fs_query_urn"
              version="0.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2636">If the item exists in the store, this function retrieves
the URN of the given #GFile

If @file doesn't exist in the store yet, %NULL will be returned.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="163"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="2646">A newly allocated string with the URN containing the data associated
         to @file, or %NULL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2638">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2639">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_throttle"
              c:identifier="tracker_miner_fs_set_throttle"
              glib:set-property="throttle"
              version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="2520">Tells the filesystem miner to throttle its operations. A value of
0.0 means no throttling at all, so the miner will perform
operations at full speed, 1.0 is the slowest value. With a value of
1.0, the @fs is typically waiting one full second before handling
the next batch of queued items to be processed.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                         line="145"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="fs" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2522">a #TrackerMinerFS</doc>
            <type name="MinerFS" c:type="TrackerMinerFS*"/>
          </instance-parameter>
          <parameter name="throttle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="2523">a double between 0.0 and 1.0</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <property name="data-provider"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_data_provider">
        <type name="DataProvider"/>
      </property>
      <property name="processing-pool-ready-limit"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="1">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="processing-pool-wait-limit"
                writable="1"
                construct="1"
                transfer-ownership="none"
                default-value="1">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="root"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="throttle"
                writable="1"
                transfer-ownership="none"
                setter="set_throttle"
                getter="get_throttle"
                default-value="0.000000">
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <field name="parent">
        <type name="Miner" c:type="TrackerMiner"/>
      </field>
      <field name="priv">
        <type name="MinerFSPrivate" c:type="TrackerMinerFSPrivate*"/>
      </field>
      <glib:signal name="finished" when="last" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="457">The ::finished signal is emitted when @miner_fs has finished
all pending processing.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="elapsed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="460">elapsed time since mining was started</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="directories_found" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="461">number of directories found</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="directories_ignored" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="462">number of ignored directories</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="files_found" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="463">number of files found</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="files_ignored" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="464">number of ignored files</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="finished-root" when="last" version="1.2">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="486">The ::finished-crawl signal is emitted when @miner_fs has
finished finding all resources that need to be indexed
with the root location of @file. At this point, it's likely
many are still in the queue to be added to the database,
but this gives some indication that a location is
processed.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="489">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="move-file" when="last">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
          <parameter name="p1" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="process-file" when="last" version="0.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="386">The ::process-file signal is emitted whenever a file should
be processed, and it's metadata extracted.

@builder is the #TrackerSparqlBuilder where all sparql updates
to be performed for @file will be appended.

This signal allows both synchronous and asynchronous extraction,
in the synchronous case @cancellable can be safely ignored. In
either case, on successful metadata extraction, implementations
must call tracker_miner_fs_notify_finish() to indicate that
processing has finished on @file, so the miner can execute
the SPARQL updates and continue processing other files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="406">%TRUE if the file is accepted for processing,
         %FALSE if the file should be ignored.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="389">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="390">a #TrackerSparqlBuilder</doc>
            <type name="Gio.Task"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="process-file-attributes" when="last" version="0.10">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="421">The ::process-file-attributes signal is emitted whenever a file should
be processed, but only the attribute-related metadata extracted.

@builder is the #TrackerSparqlBuilder where all sparql updates
to be performed for @file will be appended. For the properties being
updated, the DELETE statements should be included as well.

This signal allows both synchronous and asynchronous extraction,
in the synchronous case @cancellable can be safely ignored. In
either case, on successful metadata extraction, implementations
must call tracker_miner_fs_notify_finish() to indicate that
processing has finished on @file, so the miner can execute
the SPARQL updates and continue processing other files.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="442">%TRUE if the file is accepted for processing,
         %FALSE if the file should be ignored.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="424">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
          <parameter name="builder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="425">a #TrackerSparqlBuilder</doc>
            <type name="Gio.Task"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-children" when="last">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="remove-file" when="last" version="1.8">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.c"
             line="511">The ::remove-file signal will be emitted on files that need removal
according to the miner configuration (either the files themselves are
deleted, or the directory/contents no longer need inspection according
to miner configuration and their location.

This operation is always assumed to be recursive, the @children_only
argument will be %TRUE if for any reason the topmost directory needs
to stay (e.g. moved from a recursively indexed directory tree to a
non-recursively indexed location).

The @builder argument can be used to provide additional SPARQL
deletes and updates necessary around the deletion of those items. If
the return value of this signal is %TRUE, @builder is expected to
contain all relevant deletes for this operation.

If the return value of this signal is %FALSE, the miner will apply
its default behavior, which is deleting all triples that correspond
to the affected URIs.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-fs.c"
               line="537">%TRUE if @builder contains all the necessary operations to
         delete the affected resources, %FALSE to let the miner
         implicitly handle the deletion.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-fs.c"
                 line="514">a #GFile</doc>
            <type name="Gio.File"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="MinerFSClass"
            c:type="TrackerMinerFSClass"
            glib:is-gtype-struct-for="MinerFS">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-fs.h"
           line="65">Prototype for the abstract class, @process_file must be implemented
in the deriving class in order to actually extract data.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="121"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.h"
             line="67">parent object class</doc>
        <type name="MinerClass" c:type="TrackerMinerClass"/>
      </field>
      <field name="process_file">
        <callback name="process_file">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="87"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="task" transfer-ownership="none">
              <type name="Gio.Task" c:type="GTask*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finished">
        <callback name="finished">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="90"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="elapsed" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
            <parameter name="directories_found" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="directories_ignored" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="files_found" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="files_ignored" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="process_file_attributes">
        <callback name="process_file_attributes">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="96"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="task" transfer-ownership="none">
              <type name="Gio.Task" c:type="GTask*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="finished_root">
        <callback name="finished_root">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="99"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="root" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="directories_found" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="directories_ignored" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="files_found" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="files_ignored" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_file">
        <callback name="remove_file">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="105"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_children">
        <callback name="remove_children">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="107"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="move_file">
        <callback name="move_file">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="109"/>
          <return-value transfer-ownership="full">
            <type name="utf8" c:type="gchar*"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="dest" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="recursive" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="filter_event">
        <callback name="filter_event">
          <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                           line="114"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="fs" transfer-ownership="none">
              <type name="MinerFS" c:type="TrackerMinerFS*"/>
            </parameter>
            <parameter name="type" transfer-ownership="none">
              <type name="MinerFSEventType" c:type="TrackerMinerFSEventType"/>
            </parameter>
            <parameter name="file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
            <parameter name="source_file" transfer-ownership="none">
              <type name="Gio.File" c:type="GFile*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.h"
             line="79">Reserved for future API improvements.</doc>
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="MinerFSError"
                 version="1.2"
                 c:type="TrackerMinerFSError">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-fs.h"
           line="123">Possible errors returned when calling creating new objects based on
the #TrackerMinerFS type and other APIs available with this class.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="136"/>
      <member name="miner_fs_error_init"
              value="0"
              c:identifier="TRACKER_MINER_FS_ERROR_INIT">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-fs.h"
             line="125">There was an error during
initialization of the object. The specific details are in the
message.</doc>
      </member>
    </enumeration>
    <enumeration name="MinerFSEventType" c:type="TrackerMinerFSEventType">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="50"/>
      <member name="created"
              value="0"
              c:identifier="TRACKER_MINER_FS_EVENT_CREATED">
      </member>
      <member name="updated"
              value="1"
              c:identifier="TRACKER_MINER_FS_EVENT_UPDATED">
      </member>
      <member name="deleted"
              value="2"
              c:identifier="TRACKER_MINER_FS_EVENT_DELETED">
      </member>
      <member name="moved"
              value="3"
              c:identifier="TRACKER_MINER_FS_EVENT_MOVED">
      </member>
    </enumeration>
    <record name="MinerFSPrivate"
            c:type="TrackerMinerFSPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/libtracker-miner/tracker-miner-fs.h"
                       line="53"/>
    </record>
    <class name="MinerOnline"
           c:symbol-prefix="miner_online"
           c:type="TrackerMinerOnline"
           parent="Miner"
           abstract="1"
           glib:type-name="TrackerMinerOnline"
           glib:get-type="tracker_miner_online_get_type"
           glib:type-struct="MinerOnlineClass">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-online.h"
           line="42">Abstract miner object for data requiring connectivity.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="73"/>
      <implements name="Gio.Initable"/>
      <virtual-method name="connected">
        <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="MinerOnline" c:type="TrackerMinerOnline*"/>
          </instance-parameter>
          <parameter name="network" transfer-ownership="none">
            <type name="NetworkType" c:type="TrackerNetworkType"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disconnected">
        <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                         line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <type name="MinerOnline" c:type="TrackerMinerOnline*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_network_type"
              c:identifier="tracker_miner_online_get_network_type"
              version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-online.c"
             line="387">Get the type of network this data @miner uses to index content.</doc>
        <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/libtracker-miner/tracker-miner-online.c"
               line="393">a #TrackerNetworkType on success or #TRACKER_NETWORK_TYPE_NONE on error.</doc>
          <type name="NetworkType" c:type="TrackerNetworkType"/>
        </return-value>
        <parameters>
          <instance-parameter name="miner" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-online.c"
                 line="389">a #TrackerMinerOnline.</doc>
            <type name="MinerOnline" c:type="TrackerMinerOnline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="network-type"
                introspectable="0"
                transfer-ownership="none"
                default-value="TRACKER_NETWORK_TYPE_NONE">
        <type/>
      </property>
      <field name="parent_instance">
        <type name="Miner" c:type="TrackerMiner"/>
      </field>
      <glib:signal name="connected"
                   when="last"
                   version="0.18"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-online.c"
             line="150">the ::connected signal is emitted when a specific @type of
network becomes connected.

Return values of #TRUE from this signal indicate whether a
#TrackerMiner should resume indexing or not upon ::connected.</doc>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/libtracker-miner/tracker-miner-online.c"
                 line="153">a #TrackerNetworkType</doc>
            <type/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="disconnected" when="last" version="0.18">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-online.c"
             line="171">the ::disconnected signal is emitted when a specific @type of
network becomes disconnected.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="MinerOnlineClass"
            c:type="TrackerMinerOnlineClass"
            glib:is-gtype-struct-for="MinerOnline"
            version="0.18">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-online.h"
           line="51">Virtual methods that can be overridden.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                       line="73"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-online.h"
             line="53">a #TrackerMinerClass</doc>
        <type name="MinerClass" c:type="TrackerMinerClass"/>
      </field>
      <field name="connected">
        <callback name="connected">
          <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                           line="67"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="MinerOnline" c:type="TrackerMinerOnline*"/>
            </parameter>
            <parameter name="network" transfer-ownership="none">
              <type name="NetworkType" c:type="TrackerNetworkType"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disconnected">
        <callback name="disconnected">
          <source-position filename="src/libtracker-miner/tracker-miner-online.h"
                           line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="miner" transfer-ownership="none">
              <type name="MinerOnline" c:type="TrackerMinerOnline*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-online.h"
             line="57">Reserved for future API improvements.</doc>
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="MinerPrivate"
            c:type="TrackerMinerPrivate"
            disguised="1"
            opaque="1">
      <source-position filename="src/libtracker-miner/tracker-miner-object.h"
                       line="96"/>
    </record>
    <class name="MinerProxy"
           c:symbol-prefix="miner_proxy"
           c:type="TrackerMinerProxy"
           parent="GObject.Object"
           glib:type-name="TrackerMinerProxy"
           glib:get-type="tracker_miner_proxy_get_type"
           glib:type-struct="MinerProxyClass">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="51"/>
      <implements name="Gio.Initable"/>
      <constructor name="new"
                   c:identifier="tracker_miner_proxy_new"
                   throws="1">
        <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <type name="MinerProxy" c:type="TrackerMinerProxy*"/>
        </return-value>
        <parameters>
          <parameter name="miner" transfer-ownership="none">
            <type name="Miner" c:type="TrackerMiner*"/>
          </parameter>
          <parameter name="connection" transfer-ownership="none">
            <type name="Gio.DBusConnection" c:type="GDBusConnection*"/>
          </parameter>
          <parameter name="dbus_path" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <property name="dbus-connection"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Gio.DBusConnection"/>
      </property>
      <property name="dbus-path"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="miner"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Miner"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="MinerProxyClass"
            c:type="TrackerMinerProxyClass"
            glib:is-gtype-struct-for="MinerProxy">
      <source-position filename="src/libtracker-miner/tracker-miner-proxy.h"
                       line="51"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="NetworkType" version="0.18" c:type="TrackerNetworkType">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-enums.h"
           line="101">Enumerates the different types of connections that the device might
use when connected to internet. Note that not all providers might
provide this information.</doc>
      <source-position filename="src/libtracker-miner/tracker-miner-enums.h"
                       line="127"/>
      <member name="none" value="0" c:identifier="TRACKER_NETWORK_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="103">Network is disconnected</doc>
      </member>
      <member name="unknown"
              value="1"
              c:identifier="TRACKER_NETWORK_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="104">Network status is unknown</doc>
      </member>
      <member name="gprs" value="2" c:identifier="TRACKER_NETWORK_TYPE_GPRS">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="105">Network is connected over a GPRS
connection</doc>
      </member>
      <member name="edge" value="3" c:identifier="TRACKER_NETWORK_TYPE_EDGE">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="107">Network is connected over an EDGE
connection</doc>
      </member>
      <member name="3g" value="4" c:identifier="TRACKER_NETWORK_TYPE_3G">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="109">Network is connected over a 3G or
faster (HSDPA, UMTS, ...) connection</doc>
      </member>
      <member name="lan" value="5" c:identifier="TRACKER_NETWORK_TYPE_LAN">
        <doc xml:space="preserve"
             filename="src/libtracker-miner/tracker-miner-enums.h"
             line="111">Network is connected over a local
network connection. This can be ethernet, wifi, etc.</doc>
      </member>
    </enumeration>
    <docsection name="tracker-data-provider">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-data-provider.c"
           line="28">#TrackerDataProvider allows you to operate on a set of #GFiles,
returning a #GFileInfo structure for each file enumerated (e.g.
tracker_data_provider_begin() will return a #GFileEnumerator
which can be used to enumerate resources provided by the
#TrackerDataProvider.

There is also a #TrackerFileDataProvider which is an implementation
of this #TrackerDataProvider interface.

The #TrackerMinerFS class which is a subclass to #TrackerMiner
takes a #TrackerDataProvider property which is passed down to the
TrackerCrawler created upon instantiation. This property is
#TrackerMinerFS:data-provider.</doc>
    </docsection>
    <docsection name="tracker-decorator">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator.c"
           line="31">#TrackerDecorator watches for signal updates based on content changes
in the database. When new files are added initially, only simple
metadata exists, for example, name, size, mtime, etc. The
#TrackerDecorator queues files for extended metadata extraction
(i.e. for tracker-extract to fetch metadata specific to the file
type) for example 'nmm:whiteBalance' for a picture.</doc>
    </docsection>
    <docsection name="tracker-decorator-fs">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-decorator-fs.c"
           line="29">#TrackerDecoratorFS is used to handle extended metadata extraction
for resources on file systems that are mounted or unmounted.</doc>
    </docsection>
    <docsection name="tracker-indexing-tree">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-indexing-tree.c"
           line="25">#TrackerIndexingTree handles the tree of directories configured to be indexed
by the #TrackerMinerFS.</doc>
    </docsection>
    <docsection name="tracker-miner-enums">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-enums.h"
           line="27">Common enumeration types used in libtracker-miner.</doc>
    </docsection>
    <docsection name="tracker-miner-fs">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-fs.c"
           line="97">#TrackerMinerFS is an abstract base class for miners that collect data
from a filesystem where parent/child relationships need to be
inserted into the database correctly with queue management.

All the filesystem crawling and monitoring is abstracted away,
leaving to implementations the decisions of what directories/files
should it process, and the actual data extraction.

Example creating a TrackerMinerFS with our own file system root and
data provider.

First create our class and base it on TrackerMinerFS:
|[
G_DEFINE_TYPE_WITH_CODE (MyMinerFiles, my_miner_files, TRACKER_TYPE_MINER_FS,
                         G_IMPLEMENT_INTERFACE (G_TYPE_INITABLE,
                                                my_miner_files_initable_iface_init))
]|

Later in our class creation function, we are supplying the
arguments we want. In this case, the 'root' is a #GFile pointing to
a root URI location (for example 'file:///') and 'data_provider' is a
#TrackerDataProvider used to enumerate 'root' and return children it
finds. If 'data_provider' is %NULL (the default), then a
#TrackerFileDataProvider is created automatically.
|[
// Note that only 'name' is mandatory
miner = g_initable_new (MY_TYPE_MINER_FILES,
                        NULL,
                        error,
                        "name", "MyMinerFiles",
                        "root", root,
                        "data-provider", data_provider,
                        "processing-pool-wait-limit", 10,
                        "processing-pool-ready-limit", 100,
                        NULL);
]|</doc>
    </docsection>
    <docsection name="tracker-miner-object">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-object.c"
           line="47">#TrackerMiner is an abstract base class to help developing data miners
for tracker-store, being an abstract class it doesn't do much by itself,
but provides the basic signaling and control over the actual indexing
task.

#TrackerMiner implements the #GInitable interface, and thus, all objects of
types inheriting from #TrackerMiner must be initialized with g_initable_init()
just after creation (or directly created with g_initable_new()).</doc>
    </docsection>
    <docsection name="tracker-miner-online">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-online.c"
           line="32">#TrackerMinerOnline is an abstract base class for miners retrieving data
from online resources. It's a very thin layer above #TrackerMiner that
additionally handles network connection status.

#TrackerMinerOnline implementations can implement the
&lt;literal&gt;connected&lt;/literal&gt; vmethod in order to tell the miner whether
a connection is valid to retrieve data or not. The miner data extraction
still must be dictated through the #TrackerMiner vmethods.</doc>
    </docsection>
    <docsection name="tracker-miner-proxy">
      <doc xml:space="preserve"
           filename="src/libtracker-miner/tracker-miner-proxy.c"
           line="22">#TrackerMinerProxy is a helper object to expose org.freedesktop.Tracker1.Miner
DBus interfaces for the given #TrackerMiner object. This is used to implement
miners as DBus services.

This proxy allows the miner to be controlled through external means, such as
#TrackerMinerManager in libtracker-control.

#TrackerMinerProxy implements the #GInitable interface, and thus all objects of
types inheriting from #TrackerMinerProxy must be initialized with g_initable_init()
just after creation (or directly created with g_initable_new()).</doc>
    </docsection>
  </namespace>
</repository>
