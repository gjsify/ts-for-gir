<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <include name="Gtk" version="3.0"/>
  <package name="libhandy-0.0"/>
  <c:include name="handy.h"/>
  <namespace name="Handy"
             version="0.0"
             shared-library="libhandy-0.0.so.0"
             c:identifier-prefixes="Hdy"
             c:symbol-prefixes="hdy">
    <class name="ActionRow"
           c:symbol-prefix="action_row"
           c:type="HdyActionRow"
           parent="PreferencesRow"
           glib:type-name="HdyActionRow"
           glib:get-type="hdy_action_row_get_type"
           glib:type-struct="ActionRowClass">
      <source-position filename="src/hdy-action-row.h" line="31"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_action_row_new"
                   version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="426">Creates a new #HdyActionRow.</doc>
        <source-position filename="src/hdy-action-row.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-action-row.c"
               line="431">a new #HdyActionRow</doc>
          <type name="ActionRow" c:type="HdyActionRow*"/>
        </return-value>
      </constructor>
      <virtual-method name="activate" invoker="activate">
        <source-position filename="src/hdy-action-row.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="activate" c:identifier="hdy_action_row_activate">
        <source-position filename="src/hdy-action-row.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="add_action"
              c:identifier="hdy_action_row_add_action"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="737">Adds an action widget to @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="739">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="740">the action widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_prefix"
              c:identifier="hdy_action_row_add_prefix"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="759">Adds a prefix widget to @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="761">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="762">the prefix widget</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_activatable_widget"
              c:identifier="hdy_action_row_get_activatable_widget"
              glib:get-property="activatable-widget"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="600">Gets the widget activated when @self is activated.</doc>
        <source-position filename="src/hdy-action-row.h" line="47"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-action-row.c"
               line="606">the widget activated when @self is
         activated, or %NULL if none has been set.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="602">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_name"
              c:identifier="hdy_action_row_get_icon_name"
              glib:get-property="icon-name"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="544">Gets the icon name for @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-action-row.c"
               line="550">the icon name for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="546">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="hdy_action_row_get_subtitle"
              glib:get-property="subtitle"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="493">Gets the subtitle for @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-action-row.c"
               line="499">the subtitle for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="495">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_action_row_get_title"
              glib:get-property="title"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="441">Gets the title for @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-action-row.c"
               line="447">the title for @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="443">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="hdy_action_row_get_use_underline"
              glib:get-property="use-underline"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="680">Gets whether an embedded underline in the text of the title and subtitle
labels indicates a mnemonic. See hdy_action_row_set_use_underline().</doc>
        <source-position filename="src/hdy-action-row.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-action-row.c"
               line="687">%TRUE if an embedded underline in the title and subtitle labels
         indicates the mnemonic accelerator keys.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="682">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_activatable_widget"
              c:identifier="hdy_action_row_set_activatable_widget"
              glib:set-property="activatable-widget"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="635">Sets the widget to activate when @self is activated, either by clicking
on it, by calling hdy_action_row_activate(), or via mnemonics in the title or
the subtitle. See the “use_underline” property to enable mnemonics.

The target widget will be activated by emitting the
GtkWidget::mnemonic-activate signal on it.</doc>
        <source-position filename="src/hdy-action-row.h" line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="637">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="638">the target #GtkWidget, or %NULL to unset</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_action_row_set_icon_name"
              glib:set-property="icon-name"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="569">Sets the icon name for @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="571">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="icon_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="572">the icon name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="hdy_action_row_set_subtitle"
              glib:set-property="subtitle"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="515">Sets the subtitle for @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="517">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="518">the subtitle</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_action_row_set_title"
              glib:set-property="title"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="463">Sets the title for @self.</doc>
        <source-position filename="src/hdy-action-row.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="465">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="466">the title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="hdy_action_row_set_use_underline"
              glib:set-property="use-underline"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="704">If true, an underline in the text of the title and subtitle labels indicates
the next character should be used for the mnemonic accelerator key.</doc>
        <source-position filename="src/hdy-action-row.h" line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="706">a #HdyActionRow</doc>
            <type name="ActionRow" c:type="HdyActionRow*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-action-row.c"
                 line="707">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="activatable-widget"
                version="0.0.7"
                writable="1"
                transfer-ownership="none"
                setter="set_activatable_widget"
                getter="get_activatable_widget">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="324">The activatable widget for this row.</doc>
        <type name="Gtk.Widget"/>
      </property>
      <property name="icon-name"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="310">The icon name for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="338">The subtitle for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="352">The title for this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                version="0.0.6"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.c"
             line="366">Whether an embedded underline in the text of the title and subtitle labels
indicates a mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="PreferencesRow" c:type="HdyPreferencesRow"/>
      </field>
    </class>
    <record name="ActionRowClass"
            c:type="HdyActionRowClass"
            glib:is-gtype-struct-for="ActionRow">
      <source-position filename="src/hdy-action-row.h" line="31"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-action-row.h"
             line="23">The parent class</doc>
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
      <field name="activate">
        <callback name="activate">
          <source-position filename="src/hdy-action-row.h" line="30"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="ActionRow" c:type="HdyActionRow*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Arrows"
           c:symbol-prefix="arrows"
           c:type="HdyArrows"
           parent="Gtk.DrawingArea"
           glib:type-name="HdyArrows"
           glib:get-type="hdy_arrows_get_type"
           glib:type-struct="ArrowsClass">
      <source-position filename="src/hdy-arrows.h" line="38"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_arrows_new"
                   deprecated="1"
                   deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="466">Create a new #HdyArrows widget.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-arrows.c"
               line="471">the newly created #HdyArrows widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="animate"
              c:identifier="hdy_arrows_animate"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="649">Render the arrows animation.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="651">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_count"
              c:identifier="hdy_arrows_get_count"
              glib:get-property="count"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="490">Get the number of arrows displayed in the widget.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-arrows.c"
               line="496">the current number of arrows</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="492">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_direction"
              c:identifier="hdy_arrows_get_direction"
              glib:get-property="direction"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="538">Get the direction the arrows point to</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-arrows.c"
               line="544">the arrows direction</doc>
          <type name="ArrowsDirection" c:type="HdyArrowsDirection"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="540">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duration"
              c:identifier="hdy_arrows_get_duration"
              glib:get-property="duration"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="600">Get the duration of the arrows animation.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-arrows.c"
               line="606">the duration of the animation in ms</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="602">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_count"
              c:identifier="hdy_arrows_set_count"
              glib:set-property="count"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="511">Set the number of arrows to display.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="513">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
          <parameter name="count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="514">the number of arrows to display</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_direction"
              c:identifier="hdy_arrows_set_direction"
              glib:set-property="direction"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="560">Set the direction the arrows should point to.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="562">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="563">the arrows direction</doc>
            <type name="ArrowsDirection" c:type="HdyArrowsDirection"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_duration"
              c:identifier="hdy_arrows_set_duration"
              glib:set-property="duration"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="622">Set the duration of the arrow animation.</doc>
        <doc-deprecated xml:space="preserve">Use e.g. #GtkImage and CSS animation instead</doc-deprecated>
        <source-position filename="src/hdy-arrows.h" line="54"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="624">a #HdyArrows</doc>
            <type name="Arrows" c:type="HdyArrows*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-arrows.c"
                 line="625">the duration of the animation in ms</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="count"
                writable="1"
                transfer-ownership="none"
                setter="set_count"
                getter="get_count"
                default-value="1">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="direction"
                writable="1"
                transfer-ownership="none"
                setter="set_direction"
                getter="get_direction"
                default-value="HDY_ARROWS_DIRECTION_UP">
        <type name="ArrowsDirection"/>
      </property>
      <property name="duration"
                writable="1"
                transfer-ownership="none"
                setter="set_duration"
                getter="get_duration"
                default-value="1000">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.DrawingArea" c:type="GtkDrawingArea"/>
      </field>
    </class>
    <record name="ArrowsClass"
            c:type="HdyArrowsClass"
            glib:is-gtype-struct-for="Arrows">
      <source-position filename="src/hdy-arrows.h" line="38"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.h"
             line="33">The parent class</doc>
        <type name="Gtk.DrawingAreaClass" c:type="GtkDrawingAreaClass"/>
      </field>
    </record>
    <enumeration name="ArrowsDirection"
                 glib:type-name="HdyArrowsDirection"
                 glib:get-type="hdy_arrows_direction_get_type"
                 c:type="HdyArrowsDirection">
      <member name="up"
              value="0"
              c:identifier="HDY_ARROWS_DIRECTION_UP"
              glib:nick="up"
              glib:name="HDY_ARROWS_DIRECTION_UP">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="29">Arrows point upwards</doc>
      </member>
      <member name="down"
              value="1"
              c:identifier="HDY_ARROWS_DIRECTION_DOWN"
              glib:nick="down"
              glib:name="HDY_ARROWS_DIRECTION_DOWN">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="30">Arrows point to the left</doc>
      </member>
      <member name="left"
              value="2"
              c:identifier="HDY_ARROWS_DIRECTION_LEFT"
              glib:nick="left"
              glib:name="HDY_ARROWS_DIRECTION_LEFT">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="31">Arrows point to the right</doc>
      </member>
      <member name="right"
              value="3"
              c:identifier="HDY_ARROWS_DIRECTION_RIGHT"
              glib:nick="right"
              glib:name="HDY_ARROWS_DIRECTION_RIGHT">
        <doc xml:space="preserve"
             filename="src/hdy-arrows.c"
             line="32">Arrows point downwards</doc>
      </member>
    </enumeration>
    <enumeration name="CenteringPolicy"
                 glib:type-name="HdyCenteringPolicy"
                 glib:get-type="hdy_centering_policy_get_type"
                 c:type="HdyCenteringPolicy">
      <member name="loose"
              value="0"
              c:identifier="HDY_CENTERING_POLICY_LOOSE"
              glib:nick="loose"
              glib:name="HDY_CENTERING_POLICY_LOOSE">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="53">Keep the title centered when possible</doc>
      </member>
      <member name="strict"
              value="1"
              c:identifier="HDY_CENTERING_POLICY_STRICT"
              glib:nick="strict"
              glib:name="HDY_CENTERING_POLICY_STRICT">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="54">Keep the title centered at all cost</doc>
      </member>
    </enumeration>
    <class name="Column"
           c:symbol-prefix="column"
           c:type="HdyColumn"
           parent="Gtk.Bin"
           glib:type-name="HdyColumn"
           glib:get-type="hdy_column_get_type"
           glib:type-struct="ColumnClass">
      <source-position filename="src/hdy-column.h" line="19"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_column_new">
        <doc xml:space="preserve"
             filename="src/hdy-column.c"
             line="280">Creates a new #HdyColumn.</doc>
        <source-position filename="src/hdy-column.h" line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-column.c"
               line="285">a new #HdyColumn</doc>
          <type name="Column" c:type="HdyColumn*"/>
        </return-value>
      </constructor>
      <method name="get_linear_growth_width"
              c:identifier="hdy_column_get_linear_growth_width"
              glib:get-property="linear-growth-width">
        <doc xml:space="preserve"
             filename="src/hdy-column.c"
             line="325">Gets the width up to which the child will be allocated all the available
width and starting from which it will be allocated a portion of the available
width. In bith cases the allocated width won't exceed the declared maximum.</doc>
        <source-position filename="src/hdy-column.h" line="25"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-column.c"
               line="333">the width up to which the child will be allocated all the available
width.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-column.c"
                 line="327">a #HdyColumn</doc>
            <type name="Column" c:type="HdyColumn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_maximum_width"
              c:identifier="hdy_column_get_maximum_width"
              glib:get-property="maximum-width">
        <doc xml:space="preserve"
             filename="src/hdy-column.c"
             line="293">Gets the maximum width to allocate to the contained child.</doc>
        <source-position filename="src/hdy-column.h" line="22"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-column.c"
               line="299">the maximum width to allocate to the contained child.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-column.c"
                 line="295">a #HdyColumn</doc>
            <type name="Column" c:type="HdyColumn*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_linear_growth_width"
              c:identifier="hdy_column_set_linear_growth_width"
              glib:set-property="linear-growth-width">
        <doc xml:space="preserve"
             filename="src/hdy-column.c"
             line="344">Sets the width up to which the child will be allocated all the available
width and starting from which it will be allocated a portion of the available
width. In bith cases the allocated width won't exceed the declared maximum.</doc>
        <source-position filename="src/hdy-column.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-column.c"
                 line="346">a #HdyColumn</doc>
            <type name="Column" c:type="HdyColumn*"/>
          </instance-parameter>
          <parameter name="linear_growth_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-column.c"
                 line="347">the linear growth width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_maximum_width"
              c:identifier="hdy_column_set_maximum_width"
              glib:set-property="maximum-width">
        <doc xml:space="preserve"
             filename="src/hdy-column.c"
             line="309">Sets the maximum width to allocate to the contained child.</doc>
        <source-position filename="src/hdy-column.h" line="23"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-column.c"
                 line="311">a #HdyColumn</doc>
            <type name="Column" c:type="HdyColumn*"/>
          </instance-parameter>
          <parameter name="maximum_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-column.c"
                 line="312">the maximum width</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <property name="linear-growth-width"
                writable="1"
                transfer-ownership="none"
                setter="set_linear_growth_width"
                getter="get_linear_growth_width"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="maximum-width"
                writable="1"
                transfer-ownership="none"
                setter="set_maximum_width"
                getter="get_maximum_width"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="ColumnClass"
            c:type="HdyColumnClass"
            glib:is-gtype-struct-for="Column">
      <source-position filename="src/hdy-column.h" line="19"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="ComboRow"
           c:symbol-prefix="combo_row"
           c:type="HdyComboRow"
           parent="ActionRow"
           glib:type-name="HdyComboRow"
           glib:get-type="hdy_combo_row_get_type"
           glib:type-struct="ComboRowClass">
      <source-position filename="src/hdy-combo-row.h" line="56"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_combo_row_new" version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="410">Creates a new #HdyComboRow.</doc>
        <source-position filename="src/hdy-combo-row.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.c"
               line="415">a new #HdyComboRow</doc>
          <type name="ComboRow" c:type="HdyComboRow*"/>
        </return-value>
      </constructor>
      <method name="bind_model"
              c:identifier="hdy_combo_row_bind_model"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="447">Binds @model to @self.

If @self was already bound to a model, that previous binding is destroyed.

The contents of @self are cleared and then filled with widgets that represent
items from @model. @self is updated whenever @model changes. If @model is
%NULL, @self is left empty.</doc>
        <source-position filename="src/hdy-combo-row.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="449">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="450">the #GListModel to be bound to @self</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="create_list_widget_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="451">a function that creates
  widgets for items to display in the list, or %NULL in case you also passed
  %NULL as @model</doc>
            <type name="Gtk.ListBoxCreateWidgetFunc"
                  c:type="GtkListBoxCreateWidgetFunc"/>
          </parameter>
          <parameter name="create_current_widget_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="454">a function that creates
  widgets for items to display as the seleted item, or %NULL in case you also
  passed %NULL as @model</doc>
            <type name="Gtk.ListBoxCreateWidgetFunc"
                  c:type="GtkListBoxCreateWidgetFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="457">user data passed to @create_list_widget_func and
  @create_current_widget_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="459">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="bind_name_model"
              c:identifier="hdy_combo_row_bind_name_model"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="518">Binds @model to @self.

If @self was already bound to a model, that previous binding is destroyed.

The contents of @self are cleared and then filled with widgets that represent
items from @model. @self is updated whenever @model changes. If @model is
%NULL, @self is left empty.

This is more conventient to use than hdy_combo_row_bind_model() if you want
to represent items of the model with names.</doc>
        <source-position filename="src/hdy-combo-row.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="520">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="model"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="521">the #GListModel to be bound to @self</doc>
            <type name="Gio.ListModel" c:type="GListModel*"/>
          </parameter>
          <parameter name="get_name_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="522">a function that creates names for items, or %NULL
  in case you also passed %NULL as @model</doc>
            <type name="ComboRowGetNameFunc" c:type="HdyComboRowGetNameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="524">user data passed to @get_name_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="525">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_model"
              c:identifier="hdy_combo_row_get_model"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="425">Gets the model bound to @self, or %NULL if none is bound.</doc>
        <source-position filename="src/hdy-combo-row.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.c"
               line="431">the #GListModel bound to @self or %NULL</doc>
          <type name="Gio.ListModel" c:type="GListModel*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="427">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected_index"
              c:identifier="hdy_combo_row_get_selected_index"
              glib:get-property="selected-index"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="612">Gets the index of the selected item in its #GListModel.</doc>
        <source-position filename="src/hdy-combo-row.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.c"
               line="618">the index of the selected item, or -1 if no item is selected</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="614">a #GtkListBoxRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_subtitle"
              c:identifier="hdy_combo_row_get_use_subtitle"
              glib:get-property="use-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="666">Gets whether the current value of @self should be displayed as its subtitle.</doc>
        <source-position filename="src/hdy-combo-row.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.c"
               line="672">whether the current value of @self should be displayed as its subtitle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="668">a #GtkListBoxRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_for_enum"
              c:identifier="hdy_combo_row_set_for_enum"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="561">Creates a model for @enum_type and binds it to @self. The items of the model
will be #HdyEnumValueObject objects.

If @self was already bound to a model, that previous binding is destroyed.

The contents of @self are cleared and then filled with widgets that represent
items from @model. @self is updated whenever @model changes. If @model is
%NULL, @self is left empty.

This is more conventient to use than hdy_combo_row_bind_name_model() if you
want to represent values of an enumeration with names.

See hdy_enum_value_row_name().</doc>
        <source-position filename="src/hdy-combo-row.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="563">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="enum_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="564">the enumeration #GType to be bound to @self</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="get_name_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="565">a function that creates names for items, or %NULL
  in case you also passed %NULL as @model</doc>
            <type name="ComboRowGetEnumValueNameFunc"
                  c:type="HdyComboRowGetEnumValueNameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="567">user data passed to @get_name_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="568">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_get_name_func"
              c:identifier="hdy_combo_row_set_get_name_func"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="722">Sets a closure to convert items into names. See HdyComboRow:use-subtitle.</doc>
        <source-position filename="src/hdy-combo-row.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="724">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="get_name_func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="725">a function that creates names for items, or %NULL
  in case you also passed %NULL as @model</doc>
            <type name="ComboRowGetNameFunc" c:type="HdyComboRowGetNameFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="727">user data passed to @get_name_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="user_data_free_func"
                     transfer-ownership="none"
                     scope="async">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="728">function for freeing @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected_index"
              c:identifier="hdy_combo_row_set_selected_index"
              glib:set-property="selected-index"
              version="0.0.7">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="634">Sets the index of the selected item in its #GListModel.</doc>
        <source-position filename="src/hdy-combo-row.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="636">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="selected_index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="637">the index of the selected item</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_subtitle"
              c:identifier="hdy_combo_row_set_use_subtitle"
              glib:set-property="use-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="688">Sets whether the current value of @self should be displayed as its subtitle.

If %TRUE, you should not access HdyActionRow:subtitle.</doc>
        <source-position filename="src/hdy-combo-row.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="690">a #HdyComboRow</doc>
            <type name="ComboRow" c:type="HdyComboRow*"/>
          </instance-parameter>
          <parameter name="use_subtitle" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-combo-row.c"
                 line="691">%TRUE to set the current value as the subtitle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="selected-index"
                version="0.0.7"
                writable="1"
                transfer-ownership="none"
                setter="set_selected_index"
                getter="get_selected_index"
                default-value="-1">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="335">The index of the selected item in its #GListModel.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="use-subtitle"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_use_subtitle"
                getter="get_use_subtitle"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="349">%TRUE to set the current value as the subtitle.

If you use a custom widget creation function, you will need to give @self
a name conversion closure with hdy_combo_row_set_get_name_func().

If %TRUE, you should not access HdyActionRow:subtitle.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="ActionRow" c:type="HdyActionRow"/>
      </field>
    </class>
    <record name="ComboRowClass"
            c:type="HdyComboRowClass"
            glib:is-gtype-struct-for="ComboRow">
      <source-position filename="src/hdy-combo-row.h" line="56"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.h"
             line="51">The parent class</doc>
        <type name="ActionRowClass" c:type="HdyActionRowClass"/>
      </field>
    </record>
    <callback name="ComboRowGetEnumValueNameFunc"
              c:type="HdyComboRowGetEnumValueNameFunc">
      <doc xml:space="preserve"
           filename="src/hdy-combo-row.h"
           line="36">Called for combo rows that are bound to an enumeration with
hdy_combo_row_set_for_enum() for each value from that enumeration.</doc>
      <source-position filename="src/hdy-combo-row.h" line="46"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.h"
             line="44">a newly allocated displayable name that represents @value</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.h"
               line="38">the value from the enum from which to get a name</doc>
          <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.h"
               line="39">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="ComboRowGetNameFunc" c:type="HdyComboRowGetNameFunc">
      <doc xml:space="preserve"
           filename="src/hdy-combo-row.h"
           line="23">Called for combo rows that are bound to a #GListModel with
hdy_combo_row_bind_name_model() for each item that gets added to the model.</doc>
      <source-position filename="src/hdy-combo-row.h" line="33"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.h"
             line="31">a newly allocated displayable name that represents @item</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="item" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.h"
               line="25">the item from the model from which to get a name</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.h"
               line="26">user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <class name="Dialer"
           c:symbol-prefix="dialer"
           c:type="HdyDialer"
           parent="Gtk.Bin"
           glib:type-name="HdyDialer"
           glib:get-type="hdy_dialer_get_type"
           glib:type-struct="DialerClass">
      <source-position filename="src/hdy-dialer.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_dialer_new"
                   deprecated="1"
                   deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="528">Create a new #HdyDialer widget.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer.c"
               line="533">the newly created #HdyDialer widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="submitted">
        <source-position filename="src/hdy-dialer.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="clear_number"
              c:identifier="hdy_dialer_clear_number"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="602">Set the current number to the empty string. When the number is already
cleared no action is performed.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="604">a #HdyDialer</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_number"
              c:identifier="hdy_dialer_get_number"
              glib:get-property="number"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="557">Get the currently displayed number.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer.c"
               line="563">the current number in the display</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="559">a #HdyDialer</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_relief"
              c:identifier="hdy_dialer_get_relief"
              glib:get-property="relief"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="706">Returns the current relief style of the main buttons for the given
#HdyDialer.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="55"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer.c"
               line="713">The current #GtkReliefStyle</doc>
          <type name="Gtk.ReliefStyle" c:type="GtkReliefStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="708">The #HdyDialer whose main buttons you want the #GtkReliefStyle from</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_action_buttons"
              c:identifier="hdy_dialer_get_show_action_buttons"
              glib:get-property="show-action-buttons"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="624">Get whether the submit and delete buttons are to be shown.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer.c"
               line="630">whether the buttons are to be shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="626">a #HdyDialer</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_number"
              c:identifier="hdy_dialer_set_number"
              glib:set-property="number"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="578">Set the currently displayed number.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="580">a #HdyDialer</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="581">the number to set</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_relief"
              c:identifier="hdy_dialer_set_relief"
              glib:set-property="relief"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="677">Sets the relief style of the edges of the main buttons for the given
#HdyDialer widget.
Two styles exist, %GTK_RELIEF_NORMAL and %GTK_RELIEF_NONE.
The default style is, as one can guess, %GTK_RELIEF_NORMAL.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="679">The #HdyDialer whose main buttons you want to set relief styles of</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
          <parameter name="relief" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="680">The #GtkReliefStyle as described above</doc>
            <type name="Gtk.ReliefStyle" c:type="GtkReliefStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_action_buttons"
              c:identifier="hdy_dialer_set_show_action_buttons"
              glib:set-property="show-action-buttons"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="646">Set whether to show the submit and delete buttons.</doc>
        <doc-deprecated xml:space="preserve">use #HdyKeypad instead</doc-deprecated>
        <source-position filename="src/hdy-dialer.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="648">a #HdyDialer</doc>
            <type name="Dialer" c:type="HdyDialer*"/>
          </instance-parameter>
          <parameter name="show" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="649">whether to show the buttons</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="column-spacing"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="number"
                writable="1"
                transfer-ownership="none"
                setter="set_number"
                getter="get_number">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="relief"
                writable="1"
                transfer-ownership="none"
                setter="set_relief"
                getter="get_relief"
                default-value="GTK_RELIEF_NORMAL">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="437">The relief style of the edges of the main buttons.</doc>
        <type name="Gtk.ReliefStyle"/>
      </property>
      <property name="row-spacing"
                writable="1"
                transfer-ownership="none"
                default-value="0">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="show-action-buttons"
                writable="1"
                transfer-ownership="none"
                setter="set_show_action_buttons"
                getter="get_show_action_buttons"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
      <glib:signal name="deleted" when="last">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="471">This signal is emitted when the dialer's 'deleted' button is clicked
to delete the last symbol.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="submitted" when="last">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="452">This signal is emitted when the dialer's 'dial' button is activated.
Connect to this signal to perform to get notified when the user
wants to submit the dialed number.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="number" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="455">The number at the time of activation.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="symbol-clicked" when="last">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.c"
             line="487">This signal is emitted when one of the symbol buttons (0-9, # or *)
is clicked. Connect to this signal to find out which button was pressed.
This doesn't take any cycling modes into account. So the button with "*"
and "+" on it will always send "*".  Delete and Submit buttons will
not trigger this signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="button" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer.c"
                 line="490">The main symbol on the button that was clicked</doc>
            <type name="gchar" c:type="gchar"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="DialerButton"
           c:symbol-prefix="dialer_button"
           c:type="HdyDialerButton"
           parent="Gtk.Button"
           glib:type-name="HdyDialerButton"
           glib:get-type="hdy_dialer_button_get_type"
           glib:type-struct="DialerButtonClass">
      <source-position filename="src/hdy-dialer-button.h" line="26"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_dialer_button_new"
                   deprecated="1"
                   deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-button.c"
             line="230">Create a new #HdyDialerButton which displays
@symbols. If
@symbols is %NULL no symbols will be displayed.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-button.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer-button.c"
               line="238">the newly created #HdyDialerButton widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="symbols"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-button.c"
                 line="232">the symbols displayed on the #HdyDialerButton</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_digit"
              c:identifier="hdy_dialer_button_get_digit"
              glib:get-property="digit"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-button.c"
             line="258">Get the #HdyDialerButton's digit.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-button.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer-button.c"
               line="264">the button's digit</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-button.c"
                 line="260">a #HdyDialerButton</doc>
            <type name="DialerButton" c:type="HdyDialerButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_symbols"
              c:identifier="hdy_dialer_button_get_symbols"
              glib:get-property="symbols"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-button.c"
             line="286">Get the #HdyDialerButton's symbols.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-button.h" line="33"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer-button.c"
               line="292">the button's symbols.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-button.c"
                 line="288">a #HdyDialerButton</doc>
            <type name="DialerButton" c:type="HdyDialerButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="digit"
                transfer-ownership="none"
                getter="get_digit"
                default-value="0">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="symbols"
                writable="1"
                transfer-ownership="none"
                getter="get_symbols">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Button" c:type="GtkButton"/>
      </field>
    </class>
    <record name="DialerButtonClass"
            c:type="HdyDialerButtonClass"
            glib:is-gtype-struct-for="DialerButton">
      <source-position filename="src/hdy-dialer-button.h" line="26"/>
      <field name="parent_class">
        <type name="Gtk.ButtonClass" c:type="GtkButtonClass"/>
      </field>
    </record>
    <record name="DialerClass"
            c:type="HdyDialerClass"
            glib:is-gtype-struct-for="Dialer">
      <source-position filename="src/hdy-dialer.h" line="36"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-dialer.h"
             line="24">The parent class</doc>
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
      <field name="submitted">
        <callback name="submitted">
          <source-position filename="src/hdy-dialer.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Dialer" c:type="HdyDialer*"/>
            </parameter>
            <parameter name="number" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="DialerCycleButton"
           c:symbol-prefix="dialer_cycle_button"
           c:type="HdyDialerCycleButton"
           parent="DialerButton"
           glib:type-name="HdyDialerCycleButton"
           glib:get-type="hdy_dialer_cycle_button_get_type"
           glib:type-struct="DialerCycleButtonClass">
      <source-position filename="src/hdy-dialer-cycle-button.h" line="36"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Activatable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_dialer_cycle_button_new"
                   deprecated="1"
                   deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="212">Create a new #HdyDialerCycleButton which displays @symbols. The
symbols can by cycled through by pressing the button multiple
times.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-cycle-button.h" line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer-cycle-button.c"
               line="220">the newly created #HdyDialerCycleButton widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="symbols" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="214">the symbols displayed on the #HdyDialerCycleButton</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="cycle_end">
        <source-position filename="src/hdy-dialer-cycle-button.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="cycle_start">
        <source-position filename="src/hdy-dialer-cycle-button.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_current_symbol"
              c:identifier="hdy_dialer_cycle_button_get_current_symbol"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="246">Get the symbol the dialer should display</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-cycle-button.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer-cycle-button.c"
               line="252">a pointer to the symbol</doc>
          <type name="gunichar" c:type="gunichar"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="248">a #HdyDialerCycleButton</doc>
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cycle_timeout"
              c:identifier="hdy_dialer_cycle_button_get_cycle_timeout"
              glib:get-property="cycle-timeout"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="310">Get the cycle timeout in milliseconds.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-cycle-button.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="312">a #HdyDialerCycleButton</doc>
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_cycling"
              c:identifier="hdy_dialer_cycle_button_is_cycling"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="267">Check whether the button is in cycling mode.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-cycle-button.h" line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialer-cycle-button.c"
               line="273">#TRUE if the in cycling mode otherwise #FALSE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="269">a #HdyDialerCycleButton</doc>
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_cycle_timeout"
              c:identifier="hdy_dialer_cycle_button_set_cycle_timeout"
              glib:set-property="cycle-timeout"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="329">Set the cycle timeout in milliseconds.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-cycle-button.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="331">a #HdyDialerCycleButton</doc>
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="332">the timeout in milliseconds</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_cycle"
              c:identifier="hdy_dialer_cycle_button_stop_cycle"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="286">Stop the cycling mode.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <source-position filename="src/hdy-dialer-cycle-button.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialer-cycle-button.c"
                 line="288">a #HdyDialerCycleButton</doc>
            <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="cycle-timeout"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_cycle_timeout"
                getter="get_cycle_timeout"
                default-value="1000">
        <type name="gint" c:type="gint"/>
      </property>
      <field name="parent_instance">
        <type name="DialerButton" c:type="HdyDialerButton"/>
      </field>
      <glib:signal name="cycle-end"
                   when="last"
                   deprecated="1"
                   deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="191">This signal is emitted when the cycle ends. This can either be
because of timeout or because #hdy_dialer_cycle_stop_cycle got
called.</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="cycle-start"
                   when="last"
                   deprecated="1"
                   deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.c"
             line="172">This signal is emitted when the button starts cycling (that is on
the first button press).</doc>
        <doc-deprecated xml:space="preserve">This widget is considered a #HdyDialer internal
api</doc-deprecated>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DialerCycleButtonClass"
            c:type="HdyDialerCycleButtonClass"
            glib:is-gtype-struct-for="DialerCycleButton">
      <source-position filename="src/hdy-dialer-cycle-button.h" line="36"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-dialer-cycle-button.h"
             line="24">The parent classqn</doc>
        <type name="DialerButtonClass" c:type="HdyDialerButtonClass"/>
      </field>
      <field name="cycle_start">
        <callback name="cycle_start">
          <source-position filename="src/hdy-dialer-cycle-button.h" line="34"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="cycle_end">
        <callback name="cycle_end">
          <source-position filename="src/hdy-dialer-cycle-button.h" line="35"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="DialerCycleButton" c:type="HdyDialerCycleButton*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="Dialog"
           c:symbol-prefix="dialog"
           c:type="HdyDialog"
           parent="Gtk.Dialog"
           glib:type-name="HdyDialog"
           glib:get-type="hdy_dialog_get_type"
           glib:type-struct="DialogClass">
      <source-position filename="src/hdy-dialog.h" line="21"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_dialog_new" version="0.0.7">
        <doc xml:space="preserve"
             filename="src/hdy-dialog.c"
             line="386">Create a #HdyDialog with #GtkWindow:transient-for set to parent

C Usage
|[&lt;!-- language="C" --&gt;
GtkWidget *dlg = hdy_dialog_new (GTK_WINDOW (main_window));
]|

Vala Usage
|[&lt;!-- language="Vala" --&gt;
var dlg = new Hdy.Dialog (main_window);
]|

Python Usage
|[&lt;!-- language="Python" --&gt;
dlg = Handy.Dialog.new (main_window);
]|</doc>
        <source-position filename="src/hdy-dialog.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="parent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialog.c"
                 line="388">#GtkWindow this dialog is a child of</doc>
            <type name="Gtk.Window" c:type="GtkWindow*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_narrow"
              c:identifier="hdy_dialog_get_narrow"
              glib:get-property="narrow"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-dialog.c"
             line="418">Gets whether @self is narrow.</doc>
        <source-position filename="src/hdy-dialog.h" line="27"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-dialog.c"
               line="424">%TRUE if @self is narrow, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-dialog.c"
                 line="420">a #HdyDialog</doc>
            <type name="Dialog" c:type="HdyDialog*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="narrow"
                version="0.0.11"
                transfer-ownership="none"
                getter="get_narrow"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-dialog.c"
             line="286">%TRUE if the dialog is narrow.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Dialog" c:type="GtkDialog"/>
      </field>
    </class>
    <record name="DialogClass"
            c:type="HdyDialogClass"
            glib:is-gtype-struct-for="Dialog">
      <source-position filename="src/hdy-dialog.h" line="21"/>
      <field name="parent_class">
        <type name="Gtk.DialogClass" c:type="GtkDialogClass"/>
      </field>
    </record>
    <class name="EnumValueObject"
           c:symbol-prefix="enum_value_object"
           c:type="HdyEnumValueObject"
           parent="GObject.Object"
           glib:type-name="HdyEnumValueObject"
           glib:get-type="hdy_enum_value_object_get_type"
           glib:type-struct="EnumValueObjectClass">
      <source-position filename="src/hdy-enum-value-object.h" line="20"/>
      <constructor name="new" c:identifier="hdy_enum_value_object_new">
        <source-position filename="src/hdy-enum-value-object.h" line="22"/>
        <return-value transfer-ownership="full">
          <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="enum_value" transfer-ownership="none">
            <type name="GObject.EnumValue" c:type="GEnumValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_name" c:identifier="hdy_enum_value_object_get_name">
        <source-position filename="src/hdy-enum-value-object.h" line="25"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_nick" c:identifier="hdy_enum_value_object_get_nick">
        <source-position filename="src/hdy-enum-value-object.h" line="26"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value" c:identifier="hdy_enum_value_object_get_value">
        <source-position filename="src/hdy-enum-value-object.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="EnumValueObjectClass"
            c:type="HdyEnumValueObjectClass"
            glib:is-gtype-struct-for="EnumValueObject">
      <source-position filename="src/hdy-enum-value-object.h" line="20"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ExpanderRow"
           c:symbol-prefix="expander_row"
           c:type="HdyExpanderRow"
           parent="ActionRow"
           glib:type-name="HdyExpanderRow"
           glib:get-type="hdy_expander_row_get_type"
           glib:type-struct="ExpanderRowClass">
      <source-position filename="src/hdy-expander-row.h" line="29"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_expander_row_new"
                   version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="276">Creates a new #HdyExpanderRow.</doc>
        <source-position filename="src/hdy-expander-row.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-expander-row.c"
               line="281">a new #HdyExpanderRow</doc>
          <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
        </return-value>
      </constructor>
      <method name="get_enable_expansion"
              c:identifier="hdy_expander_row_get_enable_expansion"
              glib:get-property="enable-expansion"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="325">Gets whether the expansion of @self is enabled.</doc>
        <source-position filename="src/hdy-expander-row.h" line="37"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-expander-row.c"
               line="331">whether the expansion of @self is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-expander-row.c"
                 line="327">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expanded"
              c:identifier="hdy_expander_row_get_expanded"
              glib:get-property="expanded">
        <source-position filename="src/hdy-expander-row.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_enable_switch"
              c:identifier="hdy_expander_row_get_show_enable_switch"
              glib:get-property="show-enable-switch"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="376">Gets whether the switch enabling the expansion of @self is visible.</doc>
        <source-position filename="src/hdy-expander-row.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-expander-row.c"
               line="382">whether the switch enabling the expansion of @self is visible.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-expander-row.c"
                 line="378">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enable_expansion"
              c:identifier="hdy_expander_row_set_enable_expansion"
              glib:set-property="enable-expansion"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="347">Sets whether the expansion of @self is enabled.</doc>
        <source-position filename="src/hdy-expander-row.h" line="38"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-expander-row.c"
                 line="349">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="enable_expansion" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-expander-row.c"
                 line="350">%TRUE to enable the expansion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_expanded"
              c:identifier="hdy_expander_row_set_expanded"
              glib:set-property="expanded">
        <source-position filename="src/hdy-expander-row.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="expanded" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_enable_switch"
              c:identifier="hdy_expander_row_set_show_enable_switch"
              glib:set-property="show-enable-switch"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="398">Sets whether the switch enabling the expansion of @self is visible.</doc>
        <source-position filename="src/hdy-expander-row.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-expander-row.c"
                 line="400">a #HdyExpanderRow</doc>
            <type name="ExpanderRow" c:type="HdyExpanderRow*"/>
          </instance-parameter>
          <parameter name="show_enable_switch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-expander-row.c"
                 line="401">%TRUE to show the switch enabling the expansion</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enable-expansion"
                writable="1"
                transfer-ownership="none"
                setter="set_enable_expansion"
                getter="get_enable_expansion"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="222">%TRUE if the expansion is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="expanded"
                writable="1"
                transfer-ownership="none"
                setter="set_expanded"
                getter="get_expanded"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="210">%TRUE if the row is expanded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-enable-switch"
                writable="1"
                transfer-ownership="none"
                setter="set_show_enable_switch"
                getter="get_show_enable_switch"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.c"
             line="234">%TRUE if the switch enabling the expansion is visible.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="ActionRow" c:type="HdyActionRow"/>
      </field>
    </class>
    <record name="ExpanderRowClass"
            c:type="HdyExpanderRowClass"
            glib:is-gtype-struct-for="ExpanderRow">
      <source-position filename="src/hdy-expander-row.h" line="29"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-expander-row.h"
             line="24">The parent class</doc>
        <type name="ActionRowClass" c:type="HdyActionRowClass"/>
      </field>
    </record>
    <enumeration name="Fold"
                 glib:type-name="HdyFold"
                 glib:get-type="hdy_fold_get_type"
                 c:type="HdyFold">
      <doc xml:space="preserve"
           filename="src/hdy-fold.c"
           line="16">Represents the fold of widgets and other objects which can be switched
between folded and unfolded state on the fly, like HdyLeaflet.</doc>
      <member name="unfolded"
              value="0"
              c:identifier="HDY_FOLD_UNFOLDED"
              glib:nick="unfolded"
              glib:name="HDY_FOLD_UNFOLDED">
        <doc xml:space="preserve"
             filename="src/hdy-fold.c"
             line="18">The element isn't folded</doc>
      </member>
      <member name="folded"
              value="1"
              c:identifier="HDY_FOLD_FOLDED"
              glib:nick="folded"
              glib:name="HDY_FOLD_FOLDED">
        <doc xml:space="preserve"
             filename="src/hdy-fold.c"
             line="19">The element is folded</doc>
      </member>
    </enumeration>
    <class name="HeaderBar"
           c:symbol-prefix="header_bar"
           c:type="HdyHeaderBar"
           parent="Gtk.Container"
           glib:type-name="HdyHeaderBar"
           glib:get-type="hdy_header_bar_get_type"
           glib:type-struct="HeaderBarClass">
      <source-position filename="src/hdy-header-bar.h" line="48"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_header_bar_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2259">Creates a new #HdyHeaderBar widget.</doc>
        <source-position filename="src/hdy-header-bar.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2264">a new #HdyHeaderBar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="get_centering_policy"
              c:identifier="hdy_header_bar_get_centering_policy"
              glib:get-property="centering-policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2685">Gets the policy @self follows to horizontally align its center widget.</doc>
        <source-position filename="src/hdy-header-bar.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2691">the centering policy</doc>
          <type name="CenteringPolicy" c:type="HdyCenteringPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2687">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_custom_title"
              c:identifier="hdy_header_bar_get_custom_title"
              glib:get-property="custom-title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2484">Retrieves the custom title widget of the header. See
hdy_header_bar_set_custom_title().</doc>
        <source-position filename="src/hdy-header-bar.h" line="60"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2491">the custom title widget
   of the header, or %NULL if none has been set explicitly.</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2486">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_decoration_layout"
              c:identifier="hdy_header_bar_get_decoration_layout"
              glib:get-property="decoration-layout"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2662">Gets the decoration layout set with
hdy_header_bar_set_decoration_layout().</doc>
        <source-position filename="src/hdy-header-bar.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2669">the decoration layout</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2664">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_subtitle"
              c:identifier="hdy_header_bar_get_has_subtitle"
              glib:get-property="has-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2592">Retrieves whether the header bar reserves space for
a subtitle, regardless if one is currently set or not.</doc>
        <source-position filename="src/hdy-header-bar.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2599">%TRUE if the header bar reserves space
    for a subtitle</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2594">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_header_bar_get_interpolate_size"
              glib:get-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2800">Gets wether @self should interpolate its size on visible child change.

See hdy_header_bar_set_interpolate_size().</doc>
        <source-position filename="src/hdy-header-bar.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2808">%TRUE if @self interpolates its size on visible child change, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2802">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_close_button"
              c:identifier="hdy_header_bar_get_show_close_button"
              glib:get-property="show-close-button"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2506">Returns whether this header bar shows the standard window
decorations.</doc>
        <source-position filename="src/hdy-header-bar.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2513">%TRUE if the decorations are shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2508">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle"
              c:identifier="hdy_header_bar_get_subtitle"
              glib:get-property="subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2400">Retrieves the subtitle of the header. See hdy_header_bar_set_subtitle().</doc>
        <source-position filename="src/hdy-header-bar.h" line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2406">the subtitle of the header, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2402">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_header_bar_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2340">Retrieves the title of the header. See hdy_header_bar_set_title().</doc>
        <source-position filename="src/hdy-header-bar.h" line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2346">the title of the header, or %NULL if none has
   been set explicitly. The returned string is owned by the widget
   and must not be modified or freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2342">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="hdy_header_bar_get_transition_duration"
              glib:get-property="transition-duration"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2733">Returns the amount of time (in milliseconds) that
transitions between pages in @self will take.</doc>
        <source-position filename="src/hdy-header-bar.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2740">the transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2735">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="hdy_header_bar_get_transition_running"
              glib:get-property="transition-running"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2779">Returns whether the @self is currently in a transition from one page to
another.</doc>
        <source-position filename="src/hdy-header-bar.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-bar.c"
               line="2786">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2781">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pack_end"
              c:identifier="hdy_header_bar_pack_end"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2291">Adds @child to @self:, packed with reference to the
end of the @self:.</doc>
        <source-position filename="src/hdy-header-bar.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2293">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2294">the #GtkWidget to be added to @self:</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="pack_start"
              c:identifier="hdy_header_bar_pack_start"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2274">Adds @child to @self:, packed with reference to the
start of the @self:.</doc>
        <source-position filename="src/hdy-header-bar.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2276">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2277">the #GtkWidget to be added to @self:</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_centering_policy"
              c:identifier="hdy_header_bar_set_centering_policy"
              glib:set-property="centering-policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2705">Sets the policy @self must follow to horizontally align its center widget.</doc>
        <source-position filename="src/hdy-header-bar.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2707">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="centering_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2708">the centering policy</doc>
            <type name="CenteringPolicy" c:type="HdyCenteringPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_custom_title"
              c:identifier="hdy_header_bar_set_custom_title"
              glib:set-property="custom-title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2422">Sets a custom title for the #HdyHeaderBar.

The title should help a user identify the current view. This
supersedes any title set by hdy_header_bar_set_title() or
hdy_header_bar_set_subtitle(). To achieve the same style as
the builtin title and subtitle, use the “title” and “subtitle”
style classes.

You should set the custom title to %NULL, for the header title
label to be visible again.</doc>
        <source-position filename="src/hdy-header-bar.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2424">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="title_widget"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2425">a custom widget to use for a title</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_decoration_layout"
              c:identifier="hdy_header_bar_set_decoration_layout"
              glib:set-property="decoration-layout"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2616">Sets the decoration layout for this header bar, overriding
the #GtkSettings:gtk-decoration-layout setting.

There can be valid reasons for overriding the setting, such
as a header bar design that does not allow for buttons to take
room on the right, or only offers room for a single close button.
Split header bars are another example for overriding the
setting.

The format of the string is button names, separated by commas.
A colon separates the buttons that should appear on the left
from those on the right. Recognized button names are minimize,
maximize, close, icon (the window icon) and menu (a menu button
for the fallback app menu).

For example, “menu:minimize,maximize,close” specifies a menu
on the left, and minimize, maximize and close buttons on the right.</doc>
        <source-position filename="src/hdy-header-bar.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2618">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="layout"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2619">a decoration layout, or %NULL to
    unset the layout</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_has_subtitle"
              c:identifier="hdy_header_bar_set_has_subtitle"
              glib:set-property="has-subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2559">Sets whether the header bar should reserve space
for a subtitle, even if none is currently set.</doc>
        <source-position filename="src/hdy-header-bar.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2561">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2562">%TRUE to reserve space for a subtitle</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_header_bar_set_interpolate_size"
              glib:set-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2824">Sets whether or not @self will interpolate the size of its opposing
orientation when changing the visible child. If %TRUE, @self will interpolate
its size between the one of the previous visible child and the one of the new
visible child, according to the set transition duration and the orientation,
e.g. if @self is horizontal, it will interpolate the its height.</doc>
        <source-position filename="src/hdy-header-bar.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2826">A #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2827">%TRUE to interpolate the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_close_button"
              c:identifier="hdy_header_bar_set_show_close_button"
              glib:set-property="show-close-button"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2529">Sets whether this header bar shows the standard window decorations,
including close, maximize, and minimize.</doc>
        <source-position filename="src/hdy-header-bar.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2531">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="setting" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2532">%TRUE to show standard window decorations</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle"
              c:identifier="hdy_header_bar_set_subtitle"
              glib:set-property="subtitle"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2362">Sets the subtitle of the #HdyHeaderBar. The title should give a user
an additional detail to help him identify the current view.

Note that HdyHeaderBar by default reserves room for the subtitle,
even if none is currently set. If this is not desired, set the
#HdyHeaderBar:has-subtitle property to %FALSE.</doc>
        <source-position filename="src/hdy-header-bar.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2364">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="subtitle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2365">a subtitle, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_header_bar_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2308">Sets the title of the #HdyHeaderBar. The title should help a user
identify the current view. A good title should not include the
application name.</doc>
        <source-position filename="src/hdy-header-bar.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2310">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2311">a title, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="hdy_header_bar_set_transition_duration"
              glib:set-property="transition-duration"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2754">Sets the duration that transitions between pages in @self
will take.</doc>
        <source-position filename="src/hdy-header-bar.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2756">a #HdyHeaderBar</doc>
            <type name="HeaderBar" c:type="HdyHeaderBar*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-bar.c"
                 line="2757">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="centering-policy"
                writable="1"
                transfer-ownership="none"
                setter="set_centering_policy"
                getter="get_centering_policy"
                default-value="HDY_CENTERING_POLICY_LOOSE">
        <type name="CenteringPolicy"/>
      </property>
      <property name="custom-title"
                writable="1"
                transfer-ownership="none"
                setter="set_custom_title"
                getter="get_custom_title">
        <type name="Gtk.Widget"/>
      </property>
      <property name="decoration-layout"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_decoration_layout"
                getter="get_decoration_layout"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2133">The decoration layout for buttons. If this property is
not set, the #GtkSettings:gtk-decoration-layout setting
is used.

See hdy_header_bar_set_decoration_layout() for information
about the format of this string.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="decoration-layout-set"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2152">Set to %TRUE if #HdyHeaderBar:decoration-layout is set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="has-subtitle"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_has_subtitle"
                getter="get_has_subtitle"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2166">If %TRUE, reserve space for a subtitle, even if none
is currently set.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-close-button"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_show_close_button"
                getter="get_show_close_button"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.c"
             line="2114">Whether to show window decorations.

Which buttons are actually shown and where is determined
by the #HdyHeaderBar:decoration-layout property, and by
the state of the window (e.g. a close button will not be
shown if the window can't be closed).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="spacing"
                writable="1"
                transfer-ownership="none"
                default-value="6">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="subtitle"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle"
                getter="get_subtitle"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration"
                default-value="200">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                transfer-ownership="none"
                getter="get_transition_running"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="HeaderBarClass"
            c:type="HdyHeaderBarClass"
            glib:is-gtype-struct-for="HeaderBar">
      <source-position filename="src/hdy-header-bar.h" line="48"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-header-bar.h"
             line="43">The parent class</doc>
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <class name="HeaderGroup"
           c:symbol-prefix="header_group"
           c:type="HdyHeaderGroup"
           parent="GObject.Object"
           glib:type-name="HdyHeaderGroup"
           glib:get-type="hdy_header_group_get_type"
           glib:type-struct="HeaderGroupClass">
      <source-position filename="src/hdy-header-group.h" line="28"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_header_group_new">
        <source-position filename="src/hdy-header-group.h" line="30"/>
        <return-value transfer-ownership="full">
          <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
        </return-value>
      </constructor>
      <method name="add_header_bar"
              c:identifier="hdy_header_group_add_header_bar">
        <doc xml:space="preserve"
             filename="src/hdy-header-group.c"
             line="150">Adds a header bar to a #HdyHeaderGroup. The decoration layout of the
widgets will be edited depending on their position in the composite header
bar, the start widget displaying only the start of the user's decoration
layout and the end widget displaying only its end while widgets in the middle
won't display anything. A header bar can be set as having the focus to
display all the decorations. See gtk_header_bar_set_decoration_layout().

When the widget is destroyed or no longer referenced elsewhere, it will
be removed from the header group.</doc>
        <source-position filename="src/hdy-header-group.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="152">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="153">the #GtkHeaderBar to add</doc>
            <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_focus"
              c:identifier="hdy_header_group_get_focus"
              glib:get-property="focus">
        <source-position filename="src/hdy-header-group.h" line="35"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-header-group.c"
               line="269">The currently focused header bar</doc>
          <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="267">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header_bars"
              c:identifier="hdy_header_group_get_header_bars">
        <doc xml:space="preserve"
             filename="src/hdy-header-group.c"
             line="217">Returns the list of headerbars associated with @self.</doc>
        <source-position filename="src/hdy-header-group.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-header-group.c"
               line="223">a #GSList of
  headerbars. The list is owned by libhandy and should not be modified.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Gtk.HeaderBar"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="219">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_header_bar"
              c:identifier="hdy_header_group_remove_header_bar">
        <doc xml:space="preserve"
             filename="src/hdy-header-group.c"
             line="188">Removes a widget from a #HdyHeaderGroup</doc>
        <source-position filename="src/hdy-header-group.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="190">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="191">the #GtkHeaderBar to remove</doc>
            <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_focus"
              c:identifier="hdy_header_group_set_focus"
              glib:set-property="focus">
        <doc xml:space="preserve"
             filename="src/hdy-header-group.c"
             line="237">Sets the the currently focused header bar. If @header_bar is %NULL, the
decoration will be spread as if the header bars of the group were only one,
otherwise @header_bar will be the only one to receive the decoration.</doc>
        <source-position filename="src/hdy-header-group.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="239">a #HdyHeaderGroup</doc>
            <type name="HeaderGroup" c:type="HdyHeaderGroup*"/>
          </instance-parameter>
          <parameter name="header_bar"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-header-group.c"
                 line="240">a #GtkHeaderBar of @self, or %NULL</doc>
            <type name="Gtk.HeaderBar" c:type="GtkHeaderBar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="focus"
                writable="1"
                transfer-ownership="none"
                setter="set_focus"
                getter="get_focus">
        <doc xml:space="preserve"
             filename="src/hdy-header-group.c"
             line="581">The the currently focused header bar. If %NULL, the decoration will be
spread as if the header bars of the group were only one, otherwise the
focused header bar will be the only one to receive the decoration.</doc>
        <type name="Gtk.HeaderBar"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="HeaderGroupClass"
            c:type="HdyHeaderGroupClass"
            glib:is-gtype-struct-for="HeaderGroup">
      <source-position filename="src/hdy-header-group.h" line="28"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-header-group.h"
             line="23">The parent class</doc>
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="Keypad"
           c:symbol-prefix="keypad"
           c:type="HdyKeypad"
           parent="Gtk.Grid"
           glib:type-name="HdyKeypad"
           glib:get-type="hdy_keypad_get_type"
           glib:type-struct="KeypadClass">
      <source-position filename="src/hdy-keypad.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="hdy_keypad_new">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.c"
             line="320">Create a new #HdyKeypad widget.</doc>
        <source-position filename="src/hdy-keypad.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-keypad.c"
               line="327">the newly created #HdyKeypad widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <parameter name="only_digits" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="322">whether the keypad should show only digits or also extra buttons for #, *</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="show_symbols" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="323">whether the keypad should show the second line or only the main digit</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_entry"
              c:identifier="hdy_keypad_get_entry"
              glib:get-property="entry">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.c"
             line="406">Get the connected entry. See hdy_keypad_set_entry () for details</doc>
        <source-position filename="src/hdy-keypad.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-keypad.c"
               line="412">the set #GtkEntry or NULL if no widget was set</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="408">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_entry"
              c:identifier="hdy_keypad_set_entry"
              glib:set-property="entry">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.c"
             line="363">Binds a #GtkEntry to the keypad and it blocks every
input which wouldn't be possible to type with with the keypad</doc>
        <source-position filename="src/hdy-keypad.h" line="34"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="365">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="366">a #GtkEntry</doc>
            <type name="Gtk.Entry" c:type="GtkEntry*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_left_action"
              c:identifier="hdy_keypad_set_left_action"
              glib:set-property="left-action">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.c"
             line="428">Sets the widget for the left lower corner of #HdyKeypad replacing the existing widget, if NULL it just removes whatever widget is there</doc>
        <source-position filename="src/hdy-keypad.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="430">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="431">nullable: the widget which should be show in the left lower corner of #HdyKeypad</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_right_action"
              c:identifier="hdy_keypad_set_right_action"
              glib:set-property="right-action">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.c"
             line="457">Sets the widget for the right lower corner of #HdyKeypad replacing the existing widget, if NULL it just removes whatever widget is there</doc>
        <source-position filename="src/hdy-keypad.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="459">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="460">nullable: the widget which should be show in the right lower corner of #HdyKeypad</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="show_symbols" c:identifier="hdy_keypad_show_symbols">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.c"
             line="339">Sets the visibility of symbols (excluding the main digit) on each button in the #HdyKeypad</doc>
        <source-position filename="src/hdy-keypad.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="341">a #HdyKeypad</doc>
            <type name="Keypad" c:type="HdyKeypad*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-keypad.c"
                 line="342">whether the second line on buttons should be shown or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="entry"
                writable="1"
                transfer-ownership="none"
                setter="set_entry"
                getter="get_entry">
        <type name="Gtk.Widget"/>
      </property>
      <property name="left-action"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_left_action">
        <type name="Gtk.Widget"/>
      </property>
      <property name="only-digits"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="right-action"
                readable="0"
                writable="1"
                transfer-ownership="none"
                setter="set_right_action">
        <type name="Gtk.Widget"/>
      </property>
      <property name="show-symbols"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Grid" c:type="GtkGrid"/>
      </field>
    </class>
    <record name="KeypadClass"
            c:type="HdyKeypadClass"
            glib:is-gtype-struct-for="Keypad">
      <source-position filename="src/hdy-keypad.h" line="28"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-keypad.h"
             line="23">The parent class</doc>
        <type name="Gtk.GridClass" c:type="GtkGridClass"/>
      </field>
    </record>
    <class name="Leaflet"
           c:symbol-prefix="leaflet"
           c:type="HdyLeaflet"
           parent="Gtk.Container"
           glib:type-name="HdyLeaflet"
           glib:get-type="hdy_leaflet_get_type"
           glib:type-struct="LeafletClass">
      <source-position filename="src/hdy-leaflet.h" line="59"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Swipeable"/>
      <constructor name="new" c:identifier="hdy_leaflet_new">
        <source-position filename="src/hdy-leaflet.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <virtual-method name="todo">
        <source-position filename="src/hdy-leaflet.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_can_swipe_back"
              c:identifier="hdy_leaflet_get_can_swipe_back"
              glib:get-property="can-swipe-back"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1445">Returns whether the #HdyLeaflet allows swiping to the previous child.</doc>
        <source-position filename="src/hdy-leaflet.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1451">%TRUE if back swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1447">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_swipe_forward"
              c:identifier="hdy_leaflet_get_can_swipe_forward"
              glib:get-property="can-swipe-forward"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1498">Returns whether the #HdyLeaflet allows swiping to the next child.</doc>
        <source-position filename="src/hdy-leaflet.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1504">%TRUE if back swipe is enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1500">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_transition_duration"
              c:identifier="hdy_leaflet_get_child_transition_duration"
              glib:get-property="child-transition-duration">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1214">Returns the amount of time (in milliseconds) that
transitions between children in @self will take.</doc>
        <source-position filename="src/hdy-leaflet.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1221">the mode transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1216">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_transition_running"
              c:identifier="hdy_leaflet_get_child_transition_running"
              glib:get-property="child-transition-running">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1341">Returns whether @self is currently in a transition from one page to
another.</doc>
        <source-position filename="src/hdy-leaflet.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1348">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1343">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_child_transition_type"
              c:identifier="hdy_leaflet_get_child_transition_type"
              glib:get-property="child-transition-type"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1159">Gets the type of animation that will be used
for transitions between children in @self.</doc>
        <doc-deprecated xml:space="preserve">Use hdy_leaflet_get_transition_type()</doc-deprecated>
        <source-position filename="src/hdy-leaflet.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1166">the current mode transition type of @self</doc>
          <type name="LeafletChildTransitionType"
                c:type="HdyLeafletChildTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1161">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fold"
              c:identifier="hdy_leaflet_get_fold"
              glib:get-property="fold">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="891">Gets the fold of @self.</doc>
        <source-position filename="src/hdy-leaflet.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="897">the fold of @self.</doc>
          <type name="Fold" c:type="HdyFold"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="893">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="hdy_leaflet_get_homogeneous">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="977">Gets whether @self is homogeneous for the given fold and orientation.
See hdy_leaflet_set_homogeneous().</doc>
        <source-position filename="src/hdy-leaflet.h" line="69"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="986">whether @self is homogeneous for the given fold and orientation.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="979">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="fold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="980">the fold</doc>
            <type name="Fold" c:type="HdyFold"/>
          </parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="981">the orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_leaflet_get_interpolate_size"
              glib:get-property="interpolate-size">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1393">Returns wether the #HdyLeaflet is set up to interpolate between
the sizes of children on page switch.</doc>
        <source-position filename="src/hdy-leaflet.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1400">%TRUE if child sizes are interpolated</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1395">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_transition_duration"
              c:identifier="hdy_leaflet_get_mode_transition_duration"
              glib:get-property="mode-transition-duration">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1112">Returns the amount of time (in milliseconds) that
transitions between modes in @self will take.</doc>
        <source-position filename="src/hdy-leaflet.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1119">the mode transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1114">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mode_transition_type"
              c:identifier="hdy_leaflet_get_mode_transition_type"
              glib:get-property="mode-transition-type"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1057">Gets the type of animation that will be used
for transitions between modes in @self.</doc>
        <doc-deprecated xml:space="preserve">Use hdy_leaflet_get_transition_type()</doc-deprecated>
        <source-position filename="src/hdy-leaflet.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1064">the current mode transition type of @self</doc>
          <type name="LeafletModeTransitionType"
                c:type="HdyLeafletModeTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1059">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="hdy_leaflet_get_transition_type"
              glib:get-property="transition-type"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1002">Gets the type of animation that will be used
for transitions between modes and children in @self.</doc>
        <source-position filename="src/hdy-leaflet.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1009">the current transition type of @self</doc>
          <type name="LeafletTransitionType"
                c:type="HdyLeafletTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1004">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="hdy_leaflet_get_visible_child"
              glib:get-property="visible-child">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1261">Get the visible child widget.</doc>
        <source-position filename="src/hdy-leaflet.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-leaflet.c"
               line="1267">the visible child widget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1263">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child_name"
              c:identifier="hdy_leaflet_get_visible_child_name"
              glib:get-property="visible-child-name">
        <source-position filename="src/hdy-leaflet.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_back"
              c:identifier="hdy_leaflet_set_can_swipe_back"
              glib:set-property="can-swipe-back"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1414">Sets whether or not @self allows switching to the previous child that has
'allow-visible' child property set to %TRUE via a swipe gesture</doc>
        <source-position filename="src/hdy-leaflet.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1416">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="can_swipe_back" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1417">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_swipe_forward"
              c:identifier="hdy_leaflet_set_can_swipe_forward"
              glib:set-property="can-swipe-forward"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1467">Sets whether or not @self allows switching to the next child that has
'allow-visible' child property set to %TRUE via a swipe gesture.</doc>
        <source-position filename="src/hdy-leaflet.h" line="111"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1469">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="can_swipe_forward" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1470">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_transition_duration"
              c:identifier="hdy_leaflet_set_child_transition_duration"
              glib:set-property="child-transition-duration">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1235">Sets the duration that transitions between children in @self
will take.</doc>
        <source-position filename="src/hdy-leaflet.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1237">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1238">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_child_transition_type"
              c:identifier="hdy_leaflet_set_child_transition_type"
              glib:set-property="child-transition-type"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1182">Sets the type of animation that will be used for
transitions between children in @self.

The transition type can be changed without problems
at runtime, so it is possible to change the animation
based on the child that is about to become current.</doc>
        <doc-deprecated xml:space="preserve">Use hdy_leaflet_set_transition_type()</doc-deprecated>
        <source-position filename="src/hdy-leaflet.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1184">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1185">the new transition type</doc>
            <type name="LeafletChildTransitionType"
                  c:type="HdyLeafletChildTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="hdy_leaflet_set_homogeneous">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="939">Sets the #HdyLeaflet to be homogeneous or not for the given fold and orientation.
If it is homogeneous, the #HdyLeaflet will request the same
width or height for all its children depending on the orientation.
If it isn't and it is folded, the leaflet may change width or height
when a different child becomes visible.</doc>
        <source-position filename="src/hdy-leaflet.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="941">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="fold" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="942">the fold</doc>
            <type name="Fold" c:type="HdyFold"/>
          </parameter>
          <parameter name="orientation" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="943">the orientation</doc>
            <type name="Gtk.Orientation" c:type="GtkOrientation"/>
          </parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="944">%TRUE to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_leaflet_set_interpolate_size"
              glib:set-property="interpolate-size">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1363">Sets whether or not @self will interpolate its size when
changing the visible child. If the #HdyLeaflet:interpolate-size
property is set to %TRUE, @stack will interpolate its size between
the current one and the one it'll take after changing the
visible child, according to the set transition duration.</doc>
        <source-position filename="src/hdy-leaflet.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1365">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1366">the new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_transition_duration"
              c:identifier="hdy_leaflet_set_mode_transition_duration"
              glib:set-property="mode-transition-duration">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1133">Sets the duration that transitions between modes in @self
will take.</doc>
        <source-position filename="src/hdy-leaflet.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1135">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1136">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mode_transition_type"
              c:identifier="hdy_leaflet_set_mode_transition_type"
              glib:set-property="mode-transition-type"
              deprecated="1"
              deprecated-version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1080">Sets the type of animation that will be used for
transitions between modes in @self.

The transition type can be changed without problems
at runtime, so it is possible to change the animation
based on the mode that is about to become current.</doc>
        <doc-deprecated xml:space="preserve">Use hdy_leaflet_set_transition_type()</doc-deprecated>
        <source-position filename="src/hdy-leaflet.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1082">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1083">the new transition type</doc>
            <type name="LeafletModeTransitionType"
                  c:type="HdyLeafletModeTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="hdy_leaflet_set_transition_type"
              glib:set-property="transition-type"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="1025">Sets the type of animation that will be used for transitions between modes
and children in @self.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about to
become current.</doc>
        <source-position filename="src/hdy-leaflet.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1027">a #HdyLeaflet</doc>
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-leaflet.c"
                 line="1028">the new transition type</doc>
            <type name="LeafletTransitionType"
                  c:type="HdyLeafletTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child"
              c:identifier="hdy_leaflet_set_visible_child"
              glib:set-property="visible-child">
        <source-position filename="src/hdy-leaflet.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="visible_child" transfer-ownership="none">
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_visible_child_name"
              c:identifier="hdy_leaflet_set_visible_child_name"
              glib:set-property="visible-child-name">
        <source-position filename="src/hdy-leaflet.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Leaflet" c:type="HdyLeaflet*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="can-swipe-back"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_back"
                getter="get_can_swipe_back"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3802">Whether or not @self allows switching to the previous child that has
'allow-visible' child property set to %TRUE via a swipe gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="can-swipe-forward"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_can_swipe_forward"
                getter="get_can_swipe_forward"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3817">Whether or not @self allows switching to the next child that has
'allow-visible' child property set to %TRUE via a swipe gesture.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="child-transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_child_transition_duration"
                getter="get_child_transition_duration"
                default-value="200">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="child-transition-running"
                transfer-ownership="none"
                getter="get_child_transition_running"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="child-transition-type"
                deprecated="1"
                deprecated-version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_child_transition_type"
                getter="get_child_transition_type"
                default-value="HDY_LEAFLET_CHILD_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3767">The type of animation used to transition between children</doc>
        <doc-deprecated xml:space="preserve">Use #HdyLeaflet:transition-type instead</doc-deprecated>
        <type name="LeafletChildTransitionType"/>
      </property>
      <property name="fold"
                transfer-ownership="none"
                getter="get_fold"
                default-value="HDY_FOLD_UNFOLDED">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3631">The fold of the leaflet.

The leaflet will be folded if the size allocated to it is smaller than the
sum of the natural size of its children, it will be unfolded otherwise.

See also: #HdyLeaflet:folded.</doc>
        <type name="Fold"/>
      </property>
      <property name="folded" transfer-ownership="none" default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3648">%TRUE if the leaflet is folded.

This is similar to the #HdyLeaflet:fold property but expressed as a
#gboolean rather than a #GEnum. This makes it convenient to bind the
#HdyLeaflet:fold of a leaflet to any other #gboolean property of other
#GObject's using #g_object_bind_property().</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hhomogeneous-folded"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="hhomogeneous-unfolded"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="mode-transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_mode_transition_duration"
                getter="get_mode_transition_duration"
                default-value="250">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="mode-transition-type"
                deprecated="1"
                deprecated-version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_mode_transition_type"
                getter="get_mode_transition_type"
                default-value="HDY_LEAFLET_MODE_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3746">The type of animation used to transition between mode</doc>
        <doc-deprecated xml:space="preserve">Use #HdyLeaflet:transition-type instead</doc-deprecated>
        <type name="LeafletModeTransitionType"/>
      </property>
      <property name="transition-type"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="HDY_LEAFLET_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="3727">The type of animation that will be used for transitions between modes and
children.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the mode or child that is about
to become current.</doc>
        <type name="LeafletTransitionType"/>
      </property>
      <property name="vhomogeneous-folded"
                writable="1"
                transfer-ownership="none"
                default-value="TRUE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="vhomogeneous-unfolded"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="visible-child"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child"
                getter="get_visible_child">
        <type name="Gtk.Widget"/>
      </property>
      <property name="visible-child-name"
                writable="1"
                transfer-ownership="none"
                setter="set_visible_child_name"
                getter="get_visible_child_name"
                default-value="NULL">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <enumeration name="LeafletChildTransitionType"
                 deprecated="1"
                 deprecated-version="0.0.12"
                 glib:type-name="HdyLeafletChildTransitionType"
                 glib:get-type="hdy_leaflet_child_transition_type_get_type"
                 c:type="HdyLeafletChildTransitionType">
      <doc xml:space="preserve"
           filename="src/hdy-leaflet.c"
           line="58">These enumeration values describe the possible transitions between pages in a
#HdyLeaflet widget.</doc>
      <doc-deprecated xml:space="preserve">Use #HdyLeafletTransitionType</doc-deprecated>
      <member name="none"
              value="0"
              c:identifier="HDY_LEAFLET_CHILD_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="HDY_LEAFLET_CHILD_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="60">No transition</doc>
      </member>
      <member name="crossfade"
              value="1"
              c:identifier="HDY_LEAFLET_CHILD_TRANSITION_TYPE_CROSSFADE"
              glib:nick="crossfade"
              glib:name="HDY_LEAFLET_CHILD_TRANSITION_TYPE_CROSSFADE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="61">A cross-fade</doc>
      </member>
      <member name="slide"
              value="2"
              c:identifier="HDY_LEAFLET_CHILD_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="HDY_LEAFLET_CHILD_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="62">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
      <member name="over"
              value="3"
              c:identifier="HDY_LEAFLET_CHILD_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="HDY_LEAFLET_CHILD_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="63">Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order</doc>
      </member>
      <member name="under"
              value="4"
              c:identifier="HDY_LEAFLET_CHILD_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="HDY_LEAFLET_CHILD_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="64">Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order</doc>
      </member>
    </enumeration>
    <record name="LeafletClass"
            c:type="HdyLeafletClass"
            glib:is-gtype-struct-for="Leaflet">
      <source-position filename="src/hdy-leaflet.h" line="59"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.h"
             line="48">The parent class</doc>
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
      <field name="todo">
        <callback name="todo">
          <source-position filename="src/hdy-leaflet.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Leaflet" c:type="HdyLeaflet*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="LeafletModeTransitionType"
                 deprecated="1"
                 deprecated-version="0.0.12"
                 glib:type-name="HdyLeafletModeTransitionType"
                 glib:get-type="hdy_leaflet_mode_transition_type_get_type"
                 c:type="HdyLeafletModeTransitionType">
      <doc xml:space="preserve"
           filename="src/hdy-leaflet.c"
           line="47">These enumeration values describe the possible transitions between pages in a
#HdyLeaflet widget.</doc>
      <doc-deprecated xml:space="preserve">Use #HdyLeafletTransitionType</doc-deprecated>
      <member name="none"
              value="0"
              c:identifier="HDY_LEAFLET_MODE_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="HDY_LEAFLET_MODE_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="49">No transition</doc>
      </member>
      <member name="slide"
              value="1"
              c:identifier="HDY_LEAFLET_MODE_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="HDY_LEAFLET_MODE_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="50">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
    </enumeration>
    <enumeration name="LeafletTransitionType"
                 version="0.0.12"
                 glib:type-name="HdyLeafletTransitionType"
                 glib:get-type="hdy_leaflet_transition_type_get_type"
                 c:type="HdyLeafletTransitionType">
      <doc xml:space="preserve"
           filename="src/hdy-leaflet.c"
           line="32">This enumeration value describes the possible transitions between modes and
children in a #HdyLeaflet widget.

New values may be added to this enumeration over time.</doc>
      <member name="none"
              value="0"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="34">No transition</doc>
      </member>
      <member name="slide"
              value="1"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_SLIDE"
              glib:nick="slide"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_SLIDE">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="35">Slide from left, right, up or down according to the orientation, text direction and the children order</doc>
      </member>
      <member name="over"
              value="2"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_OVER"
              glib:nick="over"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_OVER">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="36">Cover the old page or uncover the new page, sliding from or towards the end according to orientation, text direction and children order</doc>
      </member>
      <member name="under"
              value="3"
              c:identifier="HDY_LEAFLET_TRANSITION_TYPE_UNDER"
              glib:nick="under"
              glib:name="HDY_LEAFLET_TRANSITION_TYPE_UNDER">
        <doc xml:space="preserve"
             filename="src/hdy-leaflet.c"
             line="37">Uncover the new page or cover the old page, sliding from or towards the start according to orientation, text direction and children order</doc>
      </member>
    </enumeration>
    <class name="Paginator"
           c:symbol-prefix="paginator"
           c:type="HdyPaginator"
           parent="Gtk.EventBox"
           glib:type-name="HdyPaginator"
           glib:get-type="hdy_paginator_get_type"
           glib:type-struct="PaginatorClass">
      <source-position filename="src/hdy-paginator.h" line="20"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <implements name="Swipeable"/>
      <constructor name="new"
                   c:identifier="hdy_paginator_new"
                   version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="983">Create a new #HdyPaginator widget.</doc>
        <source-position filename="src/hdy-paginator.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="988">The newly created #HdyPaginator widget</doc>
          <type name="Paginator" c:type="HdyPaginator*"/>
        </return-value>
      </constructor>
      <method name="get_allow_mouse_drag"
              c:identifier="hdy_paginator_get_allow_mouse_drag"
              glib:get-property="allow-mouse-drag"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1402">Sets whether @self can be dragged with mouse pointer</doc>
        <source-position filename="src/hdy-paginator.h" line="72"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1408">%TRUE if @self can be dragged with mouse</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1404">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_animation_duration"
              c:identifier="hdy_paginator_get_animation_duration"
              glib:get-property="animation-duration"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1361">Gets animation duration used by hdy_paginator_scroll_to().</doc>
        <source-position filename="src/hdy-paginator.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1367">Animation duration in milliseconds</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1363">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_center_content"
              c:identifier="hdy_paginator_get_center_content"
              glib:get-property="center-content"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1278">Sets whether @self is centering pages.</doc>
        <source-position filename="src/hdy-paginator.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1284">%TRUE if @self is centering pages</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1280">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_spacing"
              c:identifier="hdy_paginator_get_indicator_spacing"
              glib:get-property="indicator-spacing"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1235">Gets spacing between content and page indicators.</doc>
        <source-position filename="src/hdy-paginator.h" line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1241">Spacing between content and indicators</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1237">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_indicator_style"
              c:identifier="hdy_paginator_get_indicator_style"
              glib:get-property="indicator-style"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1191">Gets the current page indicator style.</doc>
        <source-position filename="src/hdy-paginator.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1197">the current indicator style</doc>
          <type name="PaginatorIndicatorStyle"
                c:type="HdyPaginatorIndicatorStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1193">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interactive"
              c:identifier="hdy_paginator_get_interactive"
              glib:get-property="interactive"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1147">Gets whether @self can be navigated.</doc>
        <source-position filename="src/hdy-paginator.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1153">%TRUE if @self can be swiped</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1149">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_pages"
              c:identifier="hdy_paginator_get_n_pages"
              glib:get-property="n-pages"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1111">Gets the number of pages in @self.</doc>
        <source-position filename="src/hdy-paginator.h" line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1117">The number of pages in @self</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1113">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="hdy_paginator_get_position"
              glib:get-property="position"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1129">Gets current scroll position in @self. It's unitless, 1 matches 1 page.</doc>
        <source-position filename="src/hdy-paginator.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1135">The scroll position</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1131">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_spacing"
              c:identifier="hdy_paginator_get_spacing"
              glib:get-property="spacing"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1325">Gets spacing between pages in pixels.</doc>
        <source-position filename="src/hdy-paginator.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-paginator.c"
               line="1331">Spacing between pages</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1327">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert"
              c:identifier="hdy_paginator_insert"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1016">Inserts @child into @self at position @position.

If position is -1, or larger than the number of pages,
@child will be appended to the end.</doc>
        <source-position filename="src/hdy-paginator.h" line="32"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1018">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1019">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1020">the position to insert @child in.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepend"
              c:identifier="hdy_paginator_prepend"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="998">Prepends @child to @self</doc>
        <source-position filename="src/hdy-paginator.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1000">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1001">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reorder"
              c:identifier="hdy_paginator_reorder"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1038">Moves @child into position @position.

If position is -1, or larger than the number of pages, @child will be moved
to the end.</doc>
        <source-position filename="src/hdy-paginator.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1040">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1041">a widget to add</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1042">the position to move @child to.</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to"
              c:identifier="hdy_paginator_scroll_to"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1062">Scrolls to @widget position with an animation.
#HdyPaginator:animation-duration property can be used for controlling the
duration.</doc>
        <source-position filename="src/hdy-paginator.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1064">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1065">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="scroll_to_full"
              c:identifier="hdy_paginator_scroll_to_full"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1082">Scrolls to @widget position with an animation.</doc>
        <source-position filename="src/hdy-paginator.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1084">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="widget" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1085">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1086">animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_allow_mouse_drag"
              c:identifier="hdy_paginator_set_allow_mouse_drag"
              glib:set-property="allow-mouse-drag"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1420">Sets whether @self can be dragged with mouse pointer. If @allow_mouse_drag
is %FALSE, dragging is only available on touch.

This should usually be %FALSE.</doc>
        <source-position filename="src/hdy-paginator.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1422">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="allow_mouse_drag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1423">whether @self can be dragged with mouse pointer</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_animation_duration"
              c:identifier="hdy_paginator_set_animation_duration"
              glib:set-property="animation-duration"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1379">Sets animation duration used by hdy_paginator_scroll_to().</doc>
        <source-position filename="src/hdy-paginator.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1381">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1382">animation duration in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_center_content"
              c:identifier="hdy_paginator_set_center_content"
              glib:set-property="center-content"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1296">Sets whether @self is centering content. If #HdyPaginator:indicator-style is
@HDY_PAGINATOR_INDICATOR_STYLE_NONE, centering does nothing, otherwise it
adds whitespace to the left or above the pages to compensate for the
indicators.</doc>
        <source-position filename="src/hdy-paginator.h" line="61"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1298">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="center_content" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1299">whether @self should center contents</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_spacing"
              c:identifier="hdy_paginator_set_indicator_spacing"
              glib:set-property="indicator-spacing"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1253">Sets spacing between content and page indicators. Does nothing if
#HdyPaginator:indicator-style is @HDY_PAGINATOR_INDICATOR_STYLE_NONE.</doc>
        <source-position filename="src/hdy-paginator.h" line="57"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1255">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1256">the new spacing value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_indicator_style"
              c:identifier="hdy_paginator_set_indicator_style"
              glib:set-property="indicator-style"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1209">Sets style of page indicators. Depending on orientation, they are displayed
below or besides the pages. If the pages are meant to be centered,
#HdyPaginator:center-content can be used to compensate for that.</doc>
        <source-position filename="src/hdy-paginator.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1211">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="style" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1212">indicator style to use</doc>
            <type name="PaginatorIndicatorStyle"
                  c:type="HdyPaginatorIndicatorStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interactive"
              c:identifier="hdy_paginator_set_interactive"
              glib:set-property="interactive"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1165">Sets whether @self can be navigated. This can be used to temporarily disable
a #HdyPaginator to only allow swiping in a certain state.</doc>
        <source-position filename="src/hdy-paginator.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1167">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="interactive" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1168">whether @self can be swiped.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_spacing"
              c:identifier="hdy_paginator_set_spacing"
              glib:set-property="spacing"
              version="0.0.11">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="1343">Sets spacing between pages in pixels.</doc>
        <source-position filename="src/hdy-paginator.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1345">a #HdyPaginator</doc>
            <type name="Paginator" c:type="HdyPaginator*"/>
          </instance-parameter>
          <parameter name="spacing" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="1346">the new spacing value</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-mouse-drag"
                version="0.0.12"
                writable="1"
                transfer-ownership="none"
                setter="set_allow_mouse_drag"
                getter="get_allow_mouse_drag"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="904">Sets whether the #HdyPaginator can be dragged with mouse pointer. If the
value is %FALSE, dragging is only available on touch.

This should usually be %FALSE.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="animation-duration"
                version="0.0.11"
                writable="1"
                transfer-ownership="none"
                setter="set_animation_duration"
                getter="get_animation_duration"
                default-value="250">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="890">Animation duration in milliseconds, used by hdy_paginator_scroll_to().</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="center-content"
                version="0.0.11"
                writable="1"
                transfer-ownership="none"
                setter="set_center_content"
                getter="get_center_content"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="857">Whether the #HdyPaginator is centering pages. If
#HdyPaginator:indicator-style is @HDY_PAGINATOR_INDICATOR_STYLE_NONE,
centering does nothing, otherwise it adds whitespace to the left or above
the pages to compensate for the indicators.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="indicator-spacing"
                version="0.0.11"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_spacing"
                getter="get_indicator_spacing"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="840">Spacing between content and page indicators. Does nothing if
#HdyPaginator:indicator-style is @HDY_PAGINATOR_INDICATOR_STYLE_NONE.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="indicator-style"
                version="0.0.11"
                writable="1"
                transfer-ownership="none"
                setter="set_indicator_style"
                getter="get_indicator_style"
                default-value="HDY_PAGINATOR_INDICATOR_STYLE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="823">The style of page indicators. Depending on orientation, they are displayed
below or besides the pages. If the pages are meant to be centered,
#HdyPaginator:center-content can be used to compensate for that.</doc>
        <type name="PaginatorIndicatorStyle"/>
      </property>
      <property name="interactive"
                version="0.0.11"
                writable="1"
                transfer-ownership="none"
                setter="set_interactive"
                getter="get_interactive"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="808">Whether @self can be navigated. This can be used to temporarily disable
a #HdyPaginator to only allow navigating it in a certain state.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-pages"
                version="0.0.11"
                transfer-ownership="none"
                getter="get_n_pages"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="775">The number of pages in a #HdyPaginator</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="position"
                version="0.0.11"
                transfer-ownership="none"
                getter="get_position"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="791">Current scrolling position, unitless. 1 matches 1 page. Use
hdy_paginator_scroll_to() for changing it.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="spacing"
                version="0.0.11"
                writable="1"
                transfer-ownership="none"
                setter="set_spacing"
                getter="get_spacing"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="874">Spacing between pages in pixels.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <glib:signal name="page-changed" when="last" version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="927">This signal is emitted after a page has been changed. This can be used to
implement "infinite scrolling" by connecting to this signal and amending
the pages.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-paginator.c"
                 line="930">Current page</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PaginatorClass"
            c:type="HdyPaginatorClass"
            glib:is-gtype-struct-for="Paginator">
      <source-position filename="src/hdy-paginator.h" line="20"/>
      <field name="parent_class">
        <type name="Gtk.EventBoxClass" c:type="GtkEventBoxClass"/>
      </field>
    </record>
    <enumeration name="PaginatorIndicatorStyle"
                 glib:type-name="HdyPaginatorIndicatorStyle"
                 glib:get-type="hdy_paginator_indicator_style_get_type"
                 c:type="HdyPaginatorIndicatorStyle">
      <doc xml:space="preserve"
           filename="src/hdy-paginator.c"
           line="44">These enumeration values describe the possible page indicator styles in a
#HdyPaginator widget.

New values may be added to this enumeration over time.</doc>
      <member name="none"
              value="0"
              c:identifier="HDY_PAGINATOR_INDICATOR_STYLE_NONE"
              glib:nick="none"
              glib:name="HDY_PAGINATOR_INDICATOR_STYLE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="46">No indicators</doc>
      </member>
      <member name="dots"
              value="1"
              c:identifier="HDY_PAGINATOR_INDICATOR_STYLE_DOTS"
              glib:nick="dots"
              glib:name="HDY_PAGINATOR_INDICATOR_STYLE_DOTS">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="47">Each page is represented by a dot. Active dot gradually becomes larger and more opaque.</doc>
      </member>
      <member name="lines"
              value="2"
              c:identifier="HDY_PAGINATOR_INDICATOR_STYLE_LINES"
              glib:nick="lines"
              glib:name="HDY_PAGINATOR_INDICATOR_STYLE_LINES">
        <doc xml:space="preserve"
             filename="src/hdy-paginator.c"
             line="48">Each page is represented by a thin and long line, and active view is shown with another line that moves between them</doc>
      </member>
    </enumeration>
    <class name="PreferencesGroup"
           c:symbol-prefix="preferences_group"
           c:type="HdyPreferencesGroup"
           parent="Gtk.Box"
           glib:type-name="HdyPreferencesGroup"
           glib:get-type="hdy_preferences_group_get_type"
           glib:type-struct="PreferencesGroupClass">
      <source-position filename="src/hdy-preferences-group.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_group_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.c"
             line="282">Creates a new #HdyPreferencesGroup.</doc>
        <source-position filename="src/hdy-preferences-group.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-group.c"
               line="287">a new #HdyPreferencesGroup</doc>
          <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
        </return-value>
      </constructor>
      <method name="get_description"
              c:identifier="hdy_preferences_group_get_description"
              glib:get-property="description"
              version="0.0.10">
        <source-position filename="src/hdy-preferences-group.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-group.c"
               line="352">the description of @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-group.c"
                 line="349">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_preferences_group_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.c"
             line="297">Gets the title of @self.</doc>
        <source-position filename="src/hdy-preferences-group.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-group.c"
               line="303">the title of @self.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-group.c"
                 line="299">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_description"
              c:identifier="hdy_preferences_group_set_description"
              glib:set-property="description"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.c"
             line="368">Sets the description for @self.</doc>
        <source-position filename="src/hdy-preferences-group.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-group.c"
                 line="370">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-group.c"
                 line="371">the description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_preferences_group_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.c"
             line="319">Sets the title for @self.</doc>
        <source-position filename="src/hdy-preferences-group.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-group.c"
                 line="321">a #HdyPreferencesGroup</doc>
            <type name="PreferencesGroup" c:type="HdyPreferencesGroup*"/>
          </instance-parameter>
          <parameter name="title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-group.c"
                 line="322">the title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="description"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_description"
                getter="get_description">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.c"
             line="222">The description for this group of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.c"
             line="236">The title for this group of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <record name="PreferencesGroupClass"
            c:type="HdyPreferencesGroupClass"
            glib:is-gtype-struct-for="PreferencesGroup">
      <source-position filename="src/hdy-preferences-group.h" line="28"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-group.h"
             line="23">The parent class</doc>
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <class name="PreferencesPage"
           c:symbol-prefix="preferences_page"
           c:type="HdyPreferencesPage"
           parent="Gtk.ScrolledWindow"
           glib:type-name="HdyPreferencesPage"
           glib:get-type="hdy_preferences_page_get_type"
           glib:type-struct="PreferencesPageClass">
      <source-position filename="src/hdy-preferences-page.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_page_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="177">Creates a new #HdyPreferencesPage.</doc>
        <source-position filename="src/hdy-preferences-page.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-page.c"
               line="182">a new #HdyPreferencesPage</doc>
          <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
        </return-value>
      </constructor>
      <method name="get_icon_name"
              c:identifier="hdy_preferences_page_get_icon_name"
              glib:get-property="icon-name"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="192">Gets the icon name for @self, or %NULL.</doc>
        <source-position filename="src/hdy-preferences-page.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-page.c"
               line="198">the icon name for @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-page.c"
                 line="194">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="hdy_preferences_page_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="242">Gets the title of @self, or %NULL.</doc>
        <source-position filename="src/hdy-preferences-page.h" line="36"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-page.c"
               line="248">the title of the @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-page.c"
                 line="244">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_name"
              c:identifier="hdy_preferences_page_set_icon_name"
              glib:set-property="icon-name"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="214">Sets the icon name for @self.</doc>
        <source-position filename="src/hdy-preferences-page.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-page.c"
                 line="216">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
          <parameter name="icon_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-page.c"
                 line="217">the icon name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_preferences_page_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="264">Sets the title of @self.</doc>
        <source-position filename="src/hdy-preferences-page.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-page.c"
                 line="266">a #HdyPreferencesPage</doc>
            <type name="PreferencesPage" c:type="HdyPreferencesPage*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-page.c"
                 line="267">the title of the page, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-name"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_name"
                getter="get_icon_name">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="133">The icon name for this page of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="title"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.c"
             line="147">The title for this page of preferences.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ScrolledWindow" c:type="GtkScrolledWindow"/>
      </field>
    </class>
    <record name="PreferencesPageClass"
            c:type="HdyPreferencesPageClass"
            glib:is-gtype-struct-for="PreferencesPage">
      <source-position filename="src/hdy-preferences-page.h" line="28"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-page.h"
             line="23">The parent class</doc>
        <type name="Gtk.ScrolledWindowClass" c:type="GtkScrolledWindowClass"/>
      </field>
    </record>
    <class name="PreferencesRow"
           c:symbol-prefix="preferences_row"
           c:type="HdyPreferencesRow"
           parent="Gtk.ListBoxRow"
           glib:type-name="HdyPreferencesRow"
           glib:get-type="hdy_preferences_row_get_type"
           glib:type-struct="PreferencesRowClass">
      <source-position filename="src/hdy-preferences-row.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Actionable"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_row_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="143">Creates a new #HdyPreferencesRow.</doc>
        <source-position filename="src/hdy-preferences-row.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-row.c"
               line="148">a new #HdyPreferencesRow</doc>
          <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
        </return-value>
      </constructor>
      <method name="get_title"
              c:identifier="hdy_preferences_row_get_title"
              glib:get-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="158">Gets the title of the preference represented by @self.</doc>
        <source-position filename="src/hdy-preferences-row.h" line="32"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-row.c"
               line="164">the title of the preference represented
         by @self, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-row.c"
                 line="160">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_underline"
              c:identifier="hdy_preferences_row_get_use_underline"
              glib:get-property="use-underline"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="209">Gets whether an embedded underline in the text of the title indicates a
mnemonic. See hdy_preferences_row_set_use_underline().</doc>
        <source-position filename="src/hdy-preferences-row.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-row.c"
               line="216">%TRUE if an embedded underline in the title indicates the mnemonic
         accelerator keys.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-row.c"
                 line="211">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_title"
              c:identifier="hdy_preferences_row_set_title"
              glib:set-property="title"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="181">Sets the title of the preference represented by @self.</doc>
        <source-position filename="src/hdy-preferences-row.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-row.c"
                 line="183">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-row.c"
                 line="184">the title, or %NULL.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_underline"
              c:identifier="hdy_preferences_row_set_use_underline"
              glib:set-property="use-underline"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="233">If true, an underline in the text of the title indicates the next character
should be used for the mnemonic accelerator key.</doc>
        <source-position filename="src/hdy-preferences-row.h" line="37"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-row.c"
                 line="235">a #HdyPreferencesRow</doc>
            <type name="PreferencesRow" c:type="HdyPreferencesRow*"/>
          </instance-parameter>
          <parameter name="use_underline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-preferences-row.c"
                 line="236">%TRUE if underlines in the text indicate mnemonics</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="title"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_title"
                getter="get_title">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="106">The title of the preference represented by this row.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-underline"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_use_underline"
                getter="get_use_underline"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.c"
             line="120">Whether an embedded underline in the text of the title indicates a
mnemonic.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow"/>
      </field>
    </class>
    <record name="PreferencesRowClass"
            c:type="HdyPreferencesRowClass"
            glib:is-gtype-struct-for="PreferencesRow">
      <source-position filename="src/hdy-preferences-row.h" line="28"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-row.h"
             line="23">The parent class</doc>
        <type name="Gtk.ListBoxRowClass" c:type="GtkListBoxRowClass"/>
      </field>
    </record>
    <class name="PreferencesWindow"
           c:symbol-prefix="preferences_window"
           c:type="HdyPreferencesWindow"
           parent="Gtk.Window"
           glib:type-name="HdyPreferencesWindow"
           glib:get-type="hdy_preferences_window_get_type"
           glib:type-struct="PreferencesWindowClass">
      <source-position filename="src/hdy-preferences-window.h" line="28"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_preferences_window_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-window.c"
             line="391">Creates a new #HdyPreferencesWindow.</doc>
        <source-position filename="src/hdy-preferences-window.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-preferences-window.c"
               line="396">a new #HdyPreferencesWindow</doc>
          <type name="PreferencesWindow" c:type="HdyPreferencesWindow*"/>
        </return-value>
      </constructor>
      <field name="parent_instance">
        <type name="Gtk.Window" c:type="GtkWindow"/>
      </field>
    </class>
    <record name="PreferencesWindowClass"
            c:type="HdyPreferencesWindowClass"
            glib:is-gtype-struct-for="PreferencesWindow">
      <source-position filename="src/hdy-preferences-window.h" line="28"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-preferences-window.h"
             line="23">The parent class</doc>
        <type name="Gtk.WindowClass" c:type="GtkWindowClass"/>
      </field>
    </record>
    <class name="SearchBar"
           c:symbol-prefix="search_bar"
           c:type="HdySearchBar"
           parent="Gtk.Bin"
           glib:type-name="HdySearchBar"
           glib:get-type="hdy_search_bar_get_type"
           glib:type-struct="SearchBarClass">
      <source-position filename="src/hdy-search-bar.h" line="24"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_search_bar_new"
                   version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="509">Creates a #HdySearchBar. You will need to tell it about
which widget is going to be your text entry using
hdy_search_bar_connect_entry().</doc>
        <source-position filename="src/hdy-search-bar.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-search-bar.c"
               line="516">a new #HdySearchBar</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
      </constructor>
      <method name="connect_entry"
              c:identifier="hdy_search_bar_connect_entry"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="553">Connects the #GtkEntry widget passed as the one to be used in
this search bar. The entry should be a descendant of the search bar.
This is only required if the entry isn’t the direct child of the
search bar (as in our main example).</doc>
        <source-position filename="src/hdy-search-bar.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="555">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="556">a #GtkEntry</doc>
            <type name="Gtk.Entry" c:type="GtkEntry*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_search_mode"
              c:identifier="hdy_search_bar_get_search_mode"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="575">Returns whether the search mode is on or off.</doc>
        <source-position filename="src/hdy-search-bar.h" line="29"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-search-bar.c"
               line="581">whether search mode is toggled on</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="577">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_show_close_button"
              c:identifier="hdy_search_bar_get_show_close_button"
              glib:get-property="show-close-button"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="615">Returns whether the close button is shown.</doc>
        <source-position filename="src/hdy-search-bar.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-search-bar.c"
               line="621">whether the close button is shown</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="617">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="handle_event"
              c:identifier="hdy_search_bar_handle_event"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="205">This function should be called when the top-level
window which contains the search bar received a key event.

If the key event is handled by the search bar, the bar will
be shown, the entry populated with the entered text and %GDK_EVENT_STOP
will be returned. The caller should ensure that events are
not propagated further.

If no entry has been connected to the search bar, using
hdy_search_bar_connect_entry(), this function will return
immediately with a warning.

## Showing the search bar on key presses

|[&lt;!-- language="C" --&gt;
static gboolean
on_key_press_event (GtkWidget *widget,
                    GdkEvent  *event,
                    gpointer   user_data)
{
  HdySearchBar *bar = HDY_SEARCH_BAR (user_data);
  return hdy_search_bar_handle_event (self, event);
}

static void
create_toplevel (void)
{
  GtkWidget *window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
  GtkWindow *search_bar = hdy_search_bar_new ();

 // Add more widgets to the window...

  g_signal_connect (window,
                   "key-press-event",
                    G_CALLBACK (on_key_press_event),
                    search_bar);
}
]|</doc>
        <source-position filename="src/hdy-search-bar.h" line="35"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-search-bar.c"
               line="249">%GDK_EVENT_STOP if the key press event resulted
    in text being entered in the search entry (and revealing
    the search bar if necessary), %GDK_EVENT_PROPAGATE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="207">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="event" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="208">a #GdkEvent containing key press events</doc>
            <type name="Gdk.Event" c:type="GdkEvent*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_search_mode"
              c:identifier="hdy_search_bar_set_search_mode"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="595">Switches the search mode on or off.</doc>
        <source-position filename="src/hdy-search-bar.h" line="30"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="597">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="search_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="598">the new state of the search mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_show_close_button"
              c:identifier="hdy_search_bar_set_show_close_button"
              glib:set-property="show-close-button"
              version="0.0.6">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="635">Shows or hides the close button. Applications that
already have a “search” toggle button should not show a close
button in their search bar, as it duplicates the role of the
toggle button.</doc>
        <source-position filename="src/hdy-search-bar.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="637">a #HdySearchBar</doc>
            <type name="SearchBar" c:type="HdySearchBar*"/>
          </instance-parameter>
          <parameter name="visible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-search-bar.c"
                 line="638">whether the close button will be shown or not</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="search-mode-enabled"
                writable="1"
                transfer-ownership="none"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="447">Whether the search mode is on and the search bar shown.

See hdy_search_bar_set_search_mode() for details.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="show-close-button"
                writable="1"
                construct="1"
                transfer-ownership="none"
                setter="set_show_close_button"
                getter="get_show_close_button"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-search-bar.c"
             line="461">Whether to show the close button in the toolbar.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="SearchBarClass"
            c:type="HdySearchBarClass"
            glib:is-gtype-struct-for="SearchBar">
      <source-position filename="src/hdy-search-bar.h" line="24"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="Squeezer"
           c:symbol-prefix="squeezer"
           c:type="HdySqueezer"
           parent="Gtk.Container"
           glib:type-name="HdySqueezer"
           glib:get-type="hdy_squeezer_get_type"
           glib:type-struct="SqueezerClass">
      <source-position filename="src/hdy-squeezer.h" line="34"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new" c:identifier="hdy_squeezer_new">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1155">Creates a new #HdySqueezer container.</doc>
        <source-position filename="src/hdy-squeezer.h" line="36"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1160">a new #HdySqueezer</doc>
          <type name="Squeezer" c:type="HdySqueezer*"/>
        </return-value>
      </constructor>
      <method name="get_child_enabled"
              c:identifier="hdy_squeezer_get_child_enabled">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1408">Gets whether @child is enabled.

See hdy_squeezer_set_child_enabled().</doc>
        <source-position filename="src/hdy-squeezer.h" line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1417">%TRUE if @child is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1410">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1411">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_homogeneous"
              c:identifier="hdy_squeezer_get_homogeneous"
              glib:get-property="homogeneous"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1168">Gets whether @self is homogeneous.

See hdy_squeezer_set_homogeneous().</doc>
        <source-position filename="src/hdy-squeezer.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1176">%TRUE if @self is homogeneous, %FALSE is not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1170">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interpolate_size"
              c:identifier="hdy_squeezer_get_interpolate_size"
              glib:get-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1333">Gets wether @self should interpolate its size on visible child change.

See hdy_squeezer_set_interpolate_size().</doc>
        <source-position filename="src/hdy-squeezer.h" line="52"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1341">%TRUE if @self interpolates its size on visible child change, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1335">A #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_duration"
              c:identifier="hdy_squeezer_get_transition_duration"
              glib:get-property="transition-duration">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1228">Gets the amount of time (in milliseconds) that transitions between children
in @self will take.</doc>
        <source-position filename="src/hdy-squeezer.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1235">the transition duration</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1230">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_running"
              c:identifier="hdy_squeezer_get_transition_running"
              glib:get-property="transition-running">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1315">Gets whether @self is currently in a transition from one child to another.</doc>
        <source-position filename="src/hdy-squeezer.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1321">%TRUE if the transition is currently running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1317">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transition_type"
              c:identifier="hdy_squeezer_get_transition_type"
              glib:get-property="transition-type">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1269">Gets the type of animation that will be used for transitions between children
in @self.</doc>
        <source-position filename="src/hdy-squeezer.h" line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1276">the current transition type of @self</doc>
          <type name="SqueezerTransitionType"
                c:type="HdySqueezerTransitionType"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1271">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_visible_child"
              c:identifier="hdy_squeezer_get_visible_child"
              glib:get-property="visible-child">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1389">Gets the currently visible child of @self, or %NULL if there are no visible
children.</doc>
        <source-position filename="src/hdy-squeezer.h" line="56"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-squeezer.c"
               line="1396">the visible child of the #HdySqueezer</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1391">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_child_enabled"
              c:identifier="hdy_squeezer_set_child_enabled">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1435">Make @self enable or disable @child. If a child is disabled, it will be
ignored when looking for the child fitting the available size best. This
allows to programmatically and prematurely hide a child of @self even if it
fits in the available space.

This can be used e.g. to ensure a certain child is hidden below a certain
window width, or any other constraint you find suitable.</doc>
        <source-position filename="src/hdy-squeezer.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1437">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="child" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1438">a child of @self</doc>
            <type name="Gtk.Widget" c:type="GtkWidget*"/>
          </parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1439">%TRUE to enable the child, %FALSE to disable it</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_homogeneous"
              c:identifier="hdy_squeezer_set_homogeneous"
              glib:set-property="homogeneous"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1192">Sets @self to be homogeneous or not. If it is homogeneous, @self will request
the same size for all its children for its opposite orientation, e.g. if
@self is oriented horizontally and is homogeneous, it will request the same
height for all its children. If it isn't, @self may change size when a
different child becomes visible.</doc>
        <source-position filename="src/hdy-squeezer.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1194">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="homogeneous" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1195">%TRUE to make @self homogeneous</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interpolate_size"
              c:identifier="hdy_squeezer_set_interpolate_size"
              glib:set-property="interpolate-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1357">Sets whether or not @self will interpolate the size of its opposing
orientation when changing the visible child. If %TRUE, @self will interpolate
its size between the one of the previous visible child and the one of the new
visible child, according to the set transition duration and the orientation,
e.g. if @self is horizontal, it will interpolate the its height.</doc>
        <source-position filename="src/hdy-squeezer.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1359">A #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="interpolate_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1360">%TRUE to interpolate the size</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_duration"
              c:identifier="hdy_squeezer_set_transition_duration"
              glib:set-property="transition-duration">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1247">Sets the duration that transitions between children in @self will take.</doc>
        <source-position filename="src/hdy-squeezer.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1249">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1250">the new duration, in milliseconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transition_type"
              c:identifier="hdy_squeezer_set_transition_type"
              glib:set-property="transition-type">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="1288">Sets the type of animation that will be used for transitions between children
in @self. Available types include various kinds of fades and slides.

The transition type can be changed without problems at runtime, so it is
possible to change the animation based on the child that is about to become
current.</doc>
        <source-position filename="src/hdy-squeezer.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1290">a #HdySqueezer</doc>
            <type name="Squeezer" c:type="HdySqueezer*"/>
          </instance-parameter>
          <parameter name="transition" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-squeezer.c"
                 line="1291">the new transition type</doc>
            <type name="SqueezerTransitionType"
                  c:type="HdySqueezerTransitionType"/>
          </parameter>
        </parameters>
      </method>
      <property name="homogeneous"
                writable="1"
                transfer-ownership="none"
                setter="set_homogeneous"
                getter="get_homogeneous"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interpolate-size"
                writable="1"
                transfer-ownership="none"
                setter="set_interpolate_size"
                getter="get_interpolate_size"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-duration"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_duration"
                getter="get_transition_duration"
                default-value="200">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="transition-running"
                transfer-ownership="none"
                getter="get_transition_running"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="transition-type"
                writable="1"
                transfer-ownership="none"
                setter="set_transition_type"
                getter="get_transition_type"
                default-value="HDY_SQUEEZER_TRANSITION_TYPE_NONE">
        <type name="SqueezerTransitionType"/>
      </property>
      <property name="visible-child"
                transfer-ownership="none"
                getter="get_visible_child">
        <type name="Gtk.Widget"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Container" c:type="GtkContainer"/>
      </field>
    </class>
    <record name="SqueezerClass"
            c:type="HdySqueezerClass"
            glib:is-gtype-struct-for="Squeezer">
      <source-position filename="src/hdy-squeezer.h" line="34"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.h"
             line="29">The parent class</doc>
        <type name="Gtk.ContainerClass" c:type="GtkContainerClass"/>
      </field>
    </record>
    <enumeration name="SqueezerTransitionType"
                 glib:type-name="HdySqueezerTransitionType"
                 glib:get-type="hdy_squeezer_transition_type_get_type"
                 c:type="HdySqueezerTransitionType">
      <doc xml:space="preserve"
           filename="src/hdy-squeezer.c"
           line="39">These enumeration values describe the possible transitions between children
in a #HdySqueezer widget.</doc>
      <member name="none"
              value="0"
              c:identifier="HDY_SQUEEZER_TRANSITION_TYPE_NONE"
              glib:nick="none"
              glib:name="HDY_SQUEEZER_TRANSITION_TYPE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="41">No transition</doc>
      </member>
      <member name="crossfade"
              value="1"
              c:identifier="HDY_SQUEEZER_TRANSITION_TYPE_CROSSFADE"
              glib:nick="crossfade"
              glib:name="HDY_SQUEEZER_TRANSITION_TYPE_CROSSFADE">
        <doc xml:space="preserve"
             filename="src/hdy-squeezer.c"
             line="42">A cross-fade</doc>
      </member>
    </enumeration>
    <class name="SwipeGroup"
           c:symbol-prefix="swipe_group"
           c:type="HdySwipeGroup"
           parent="GObject.Object"
           glib:type-name="HdySwipeGroup"
           glib:get-type="hdy_swipe_group_get_type"
           glib:type-struct="SwipeGroupClass">
      <source-position filename="src/hdy-swipe-group.h" line="20"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_swipe_group_new"
                   version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipe-group.c"
             line="88">Create a new #HdySwipeGroup object.</doc>
        <source-position filename="src/hdy-swipe-group.h" line="22"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hdy-swipe-group.c"
               line="93">The newly created #HdySwipeGroup object</doc>
          <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
        </return-value>
      </constructor>
      <method name="add_swipeable"
              c:identifier="hdy_swipe_group_add_swipeable"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipe-group.c"
             line="169">When the widget is destroyed or no longer referenced elsewhere, it will
be removed from the swipe group.</doc>
        <source-position filename="src/hdy-swipe-group.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipe-group.c"
                 line="171">a #HdySwipeGroup</doc>
            <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
          </instance-parameter>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipe-group.c"
                 line="172">the #HdySwipeable to add</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_swipeables"
              c:identifier="hdy_swipe_group_get_swipeables"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipe-group.c"
             line="224">Returns the list of swipeables associated with @self.</doc>
        <source-position filename="src/hdy-swipe-group.h" line="26"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-swipe-group.c"
               line="230">a #GSList of
  swipeables. The list is owned by libhandy and should not be modified.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="Swipeable"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipe-group.c"
                 line="226">a #HdySwipeGroup</doc>
            <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_swipeable"
              c:identifier="hdy_swipe_group_remove_swipeable"
              version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipe-group.c"
             line="199">Removes a widget from a #HdySwipeGroup.</doc>
        <source-position filename="src/hdy-swipe-group.h" line="27"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipe-group.c"
                 line="201">a #HdySwipeGroup</doc>
            <type name="SwipeGroup" c:type="HdySwipeGroup*"/>
          </instance-parameter>
          <parameter name="swipeable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipe-group.c"
                 line="202">the #HdySwipeable to remove</doc>
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </parameter>
        </parameters>
      </method>
    </class>
    <record name="SwipeGroupClass"
            c:type="HdySwipeGroupClass"
            glib:is-gtype-struct-for="SwipeGroup">
      <source-position filename="src/hdy-swipe-group.h" line="20"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <interface name="Swipeable"
               c:symbol-prefix="swipeable"
               c:type="HdySwipeable"
               glib:type-name="HdySwipeable"
               glib:get-type="hdy_swipeable_get_type"
               glib:type-struct="SwipeableInterface">
      <source-position filename="src/hdy-swipeable.h" line="44"/>
      <prerequisite name="Gtk.Widget"/>
      <virtual-method name="begin_swipe">
        <source-position filename="src/hdy-swipeable.h" line="36"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="direction" transfer-ownership="none">
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="direct" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="end_swipe">
        <source-position filename="src/hdy-swipeable.h" line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="switch_child">
        <source-position filename="src/hdy-swipeable.h" line="33"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="update_swipe">
        <source-position filename="src/hdy-swipeable.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <type name="Swipeable" c:type="HdySwipeable*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <glib:signal name="begin-swipe" when="first" version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipeable.c"
             line="62">This signal is emitted when a possible swipe is detected. This is used by
#HdySwipeGroup, applications should not connect to it.
The @direction value can be used to restrict the swipe to a certain
direction.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="direction" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipeable.c"
                 line="65">The direction of the swipe, can be 1 or -1</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="end-swipe" when="first" version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipeable.c"
             line="104">This signal is emitted as soon as the gesture has stopped. This is used by
#HdySwipeGroup, applications should not connect to it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipeable.c"
                 line="107">Snap-back animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
          <parameter name="to" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipeable.c"
                 line="108">The progress value to animate to</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="switch-child" when="first" version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipeable.c"
             line="40">This signal should be emitted when the widget's visible child is changed.

@duration can be 0 if the child is switched without animation.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipeable.c"
                 line="43">the index of the child to switch to</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="duration" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipeable.c"
                 line="44">Animation duration in milliseconds</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="update-swipe" when="first" version="0.0.12">
        <doc xml:space="preserve"
             filename="src/hdy-swipeable.c"
             line="84">This signal is emitted every time the progress value changes. This is used
by #HdySwipeGroup, applications should not connect to it.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-swipeable.c"
                 line="87">The current animation progress value</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </glib:signal>
    </interface>
    <record name="SwipeableInterface"
            c:type="HdySwipeableInterface"
            glib:is-gtype-struct-for="Swipeable"
            version="0.0.12">
      <doc xml:space="preserve"
           filename="src/hdy-swipeable.h"
           line="17">An interface for swipeable widgets.</doc>
      <source-position filename="src/hdy-swipeable.h" line="44"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="src/hdy-swipeable.h"
             line="19">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="switch_child">
        <callback name="switch_child">
          <source-position filename="src/hdy-swipeable.h" line="33"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="duration" transfer-ownership="none">
              <type name="gint64" c:type="gint64"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="begin_swipe">
        <callback name="begin_swipe">
          <source-position filename="src/hdy-swipeable.h" line="36"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="direction" transfer-ownership="none">
              <type name="gint" c:type="gint"/>
            </parameter>
            <parameter name="direct" transfer-ownership="none">
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="update_swipe">
        <callback name="update_swipe">
          <source-position filename="src/hdy-swipeable.h" line="39"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="end_swipe">
        <callback name="end_swipe">
          <source-position filename="src/hdy-swipeable.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <type name="Swipeable" c:type="HdySwipeable*"/>
            </parameter>
            <parameter name="duration" transfer-ownership="none">
              <type name="gint64" c:type="gint64"/>
            </parameter>
            <parameter name="to" transfer-ownership="none">
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="TitleBar"
           c:symbol-prefix="title_bar"
           c:type="HdyTitleBar"
           parent="Gtk.Bin"
           glib:type-name="HdyTitleBar"
           glib:get-type="hdy_title_bar_get_type"
           glib:type-struct="TitleBarClass">
      <source-position filename="src/hdy-title-bar.h" line="19"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new" c:identifier="hdy_title_bar_new">
        <doc xml:space="preserve"
             filename="src/hdy-title-bar.c"
             line="210">Creates a new #HdyTitleBar.</doc>
        <source-position filename="src/hdy-title-bar.h" line="21"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-title-bar.c"
               line="215">a new #HdyTitleBar</doc>
          <type name="TitleBar" c:type="HdyTitleBar*"/>
        </return-value>
      </constructor>
      <method name="get_selection_mode"
              c:identifier="hdy_title_bar_get_selection_mode"
              glib:get-property="selection-mode">
        <doc xml:space="preserve"
             filename="src/hdy-title-bar.c"
             line="75">Returns wether whether @self is in selection mode.</doc>
        <source-position filename="src/hdy-title-bar.h" line="23"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-title-bar.c"
               line="81">%TRUE if the title bar is in selection mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-title-bar.c"
                 line="77">a #HdyTitleBar</doc>
            <type name="TitleBar" c:type="HdyTitleBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_selection_mode"
              c:identifier="hdy_title_bar_set_selection_mode"
              glib:set-property="selection-mode">
        <doc xml:space="preserve"
             filename="src/hdy-title-bar.c"
             line="43">Sets whether @self is in selection mode.</doc>
        <source-position filename="src/hdy-title-bar.h" line="24"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-title-bar.c"
                 line="45">a #HdyTitleBar</doc>
            <type name="TitleBar" c:type="HdyTitleBar*"/>
          </instance-parameter>
          <parameter name="selection_mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-title-bar.c"
                 line="46">%TRUE to enable the selection mode</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="selection-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_selection_mode"
                getter="get_selection_mode"
                default-value="FALSE">
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="TitleBarClass"
            c:type="HdyTitleBarClass"
            glib:is-gtype-struct-for="TitleBar">
      <source-position filename="src/hdy-title-bar.h" line="19"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <class name="ValueObject"
           c:symbol-prefix="value_object"
           c:type="HdyValueObject"
           parent="GObject.Object"
           glib:type-name="HdyValueObject"
           glib:get-type="hdy_value_object_get_type"
           glib:type-struct="ValueObjectClass">
      <source-position filename="src/hdy-value-object.h" line="20"/>
      <constructor name="new"
                   c:identifier="hdy_value_object_new"
                   version="0.0.8">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="40">Create a new #HdyValueObject.</doc>
        <source-position filename="src/hdy-value-object.h" line="22"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="46">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="42">the #GValue to store</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_collect"
                   c:identifier="hdy_value_object_new_collect"
                   version="0.0.8"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="57">Creates a new #HdyValueObject. This is a convenience method which uses
the G_VALUE_COLLECT() macro internally.</doc>
        <source-position filename="src/hdy-value-object.h" line="23"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="65">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="59">the #GType of the value</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="60">the value to store</doc>
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_string"
                   c:identifier="hdy_value_object_new_string"
                   version="0.0.8"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="89">Creates a new #HdyValueObject. This is a convenience method to create a
#HdyValueObject that stores a string.</doc>
        <source-position filename="src/hdy-value-object.h" line="25"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="96">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="91">the string to store</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_take_string"
                   c:identifier="hdy_value_object_new_take_string"
                   version="0.0.8"
                   introspectable="0">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="109">Creates a new #HdyValueObject. This is a convenience method to create a
#HdyValueObject that stores a string taking ownership of it.</doc>
        <source-position filename="src/hdy-value-object.h" line="26"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="116">a new #HdyValueObject</doc>
          <type name="ValueObject" c:type="HdyValueObject*"/>
        </return-value>
        <parameters>
          <parameter name="string" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="111">the string to store</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy_value"
              c:identifier="hdy_value_object_copy_value"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="221">Copy data from the contained #GValue into @dest.</doc>
        <source-position filename="src/hdy-value-object.h" line="29"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="223">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
          <parameter name="dest" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="224">#GValue with correct type to copy into</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_string"
              c:identifier="hdy_value_object_dup_string"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="252">Returns a copy of the contained string if the value is of type
#G_TYPE_STRING.</doc>
        <source-position filename="src/hdy-value-object.h" line="32"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="259">a copy of the contained string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="254">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_string"
              c:identifier="hdy_value_object_get_string"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="237">Returns the contained string if the value is of type #G_TYPE_STRING.</doc>
        <source-position filename="src/hdy-value-object.h" line="31"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="243">the contained string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="239">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="hdy_value_object_get_value"
              glib:get-property="value"
              version="0.0.8">
        <doc xml:space="preserve"
             filename="src/hdy-value-object.c"
             line="206">Return the contained value.</doc>
        <source-position filename="src/hdy-value-object.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-value-object.c"
               line="212">the contained #GValue</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-value-object.c"
                 line="208">the #HdyValueObject</doc>
            <type name="ValueObject" c:type="HdyValueObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="value"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_value">
        <type name="GObject.Value"/>
      </property>
    </class>
    <record name="ValueObjectClass"
            c:type="HdyValueObjectClass"
            glib:is-gtype-struct-for="ValueObject">
      <source-position filename="src/hdy-value-object.h" line="20"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ViewSwitcher"
           c:symbol-prefix="view_switcher"
           c:type="HdyViewSwitcher"
           parent="Gtk.Box"
           glib:type-name="HdyViewSwitcher"
           glib:get-type="hdy_view_switcher_get_type"
           glib:type-struct="ViewSwitcherClass">
      <source-position filename="src/hdy-view-switcher.h" line="22"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <implements name="Gtk.Orientable"/>
      <constructor name="new"
                   c:identifier="hdy_view_switcher_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="606">Creates a new #HdyViewSwitcher widget.</doc>
        <source-position filename="src/hdy-view-switcher.h" line="32"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher.c"
               line="611">a new #HdyViewSwitcher</doc>
          <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
        </return-value>
      </constructor>
      <method name="get_icon_size"
              c:identifier="hdy_view_switcher_get_icon_size"
              glib:get-property="icon-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="672">Get the icon size of the images used in the #HdyViewSwitcher.

See: hdy_view_switcher_set_icon_size()</doc>
        <source-position filename="src/hdy-view-switcher.h" line="38"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher.c"
               line="680">the icon size of the images</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="674">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_narrow_ellipsize"
              c:identifier="hdy_view_switcher_get_narrow_ellipsize"
              glib:get-property="narrow-ellipsize"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="723">Get the ellipsizing position of the narrow mode label. See
hdy_view_switcher_set_narrow_ellipsize().</doc>
        <source-position filename="src/hdy-view-switcher.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher.c"
               line="730">#PangoEllipsizeMode</doc>
          <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="725">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_policy"
              c:identifier="hdy_view_switcher_get_policy"
              glib:get-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="621">Gets the policy of @self.</doc>
        <source-position filename="src/hdy-view-switcher.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher.c"
               line="627">the policy of @self</doc>
          <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="623">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="hdy_view_switcher_get_stack"
              glib:get-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="781">Get the #GtkStack being controlled by the #HdyViewSwitcher.

See: hdy_view_switcher_set_stack()</doc>
        <source-position filename="src/hdy-view-switcher.h" line="46"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher.c"
               line="789">the #GtkStack, or %NULL if none has been set</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="783">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_size"
              c:identifier="hdy_view_switcher_set_icon_size"
              glib:set-property="icon-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="696">Change the icon size hint for the icons in a #HdyViewSwitcher.</doc>
        <source-position filename="src/hdy-view-switcher.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="698">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="699">the new icon size</doc>
            <type name="Gtk.IconSize" c:type="GtkIconSize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_narrow_ellipsize"
              c:identifier="hdy_view_switcher_set_narrow_ellipsize"
              glib:set-property="narrow-ellipsize"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="746">Set the mode used to ellipsize the text in narrow mode if there is not
enough space to render the entire string.</doc>
        <source-position filename="src/hdy-view-switcher.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="748">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="749">a #PangoEllipsizeMode</doc>
            <type name="Pango.EllipsizeMode" c:type="PangoEllipsizeMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="hdy_view_switcher_set_policy"
              glib:set-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="643">Sets the policy of @self.</doc>
        <source-position filename="src/hdy-view-switcher.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="645">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="646">the new policy</doc>
            <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="hdy_view_switcher_set_stack"
              glib:set-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="805">Sets the #GtkStack to control.</doc>
        <source-position filename="src/hdy-view-switcher.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="807">a #HdyViewSwitcher</doc>
            <type name="ViewSwitcher" c:type="HdyViewSwitcher*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher.c"
                 line="808">a #GtkStack</doc>
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-size"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_size"
                getter="get_icon_size"
                default-value="4">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="528">Use the "icon-size" property to hint the icons to use, you almost certainly
want to leave this as %GTK_ICON_SIZE_BUTTON.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="narrow-ellipsize"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_narrow_ellipsize"
                getter="get_narrow_ellipsize"
                default-value="PANGO_ELLIPSIZE_NONE">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="543">The preferred place to ellipsize the string, if the narrow mode label does
not have enough room to display the entire string, specified as a
#PangoEllipsizeMode.

Note that setting this property to a value other than %PANGO_ELLIPSIZE_NONE
has the side-effect that the label requests only enough space to display
the ellipsis.</doc>
        <type name="Pango.EllipsizeMode"/>
      </property>
      <property name="policy"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy"
                default-value="HDY_VIEW_SWITCHER_POLICY_AUTO">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="513">The #HdyViewSwitcherPolicy the view switcher should use to determine which
mode to use.</doc>
        <type name="ViewSwitcherPolicy"/>
      </property>
      <property name="stack"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="564">The #GtkStack the view switcher controls.</doc>
        <type name="Gtk.Stack"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Box" c:type="GtkBox"/>
      </field>
    </class>
    <class name="ViewSwitcherBar"
           c:symbol-prefix="view_switcher_bar"
           c:type="HdyViewSwitcherBar"
           parent="Gtk.Bin"
           glib:type-name="HdyViewSwitcherBar"
           glib:get-type="hdy_view_switcher_bar_get_type"
           glib:type-struct="ViewSwitcherBarClass">
      <source-position filename="src/hdy-view-switcher-bar.h" line="24"/>
      <implements name="Atk.ImplementorIface"/>
      <implements name="Gtk.Buildable"/>
      <constructor name="new"
                   c:identifier="hdy_view_switcher_bar_new"
                   version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="212">Creates a new #HdyViewSwitcherBar widget.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="28"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher-bar.c"
               line="217">a new #HdyViewSwitcherBar</doc>
          <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
        </return-value>
      </constructor>
      <method name="get_icon_size"
              c:identifier="hdy_view_switcher_bar_get_icon_size"
              glib:get-property="icon-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="278">Get the icon size of the images used in the #HdyViewSwitcher.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="34"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher-bar.c"
               line="284">the icon size of the images</doc>
          <type name="Gtk.IconSize" c:type="GtkIconSize"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="280">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_policy"
              c:identifier="hdy_view_switcher_bar_get_policy"
              glib:get-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="227">Gets the policy of @self.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="30"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher-bar.c"
               line="233">the policy of @self</doc>
          <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="229">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reveal"
              c:identifier="hdy_view_switcher_bar_get_reveal"
              glib:get-property="reveal"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="377">Gets whether @self should be revealed or not.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher-bar.c"
               line="383">%TRUE if @self is revealed, %FALSE if not.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="379">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stack"
              c:identifier="hdy_view_switcher_bar_get_stack"
              glib:get-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="327">Get the #GtkStack being controlled by the #HdyViewSwitcher.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="38"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/hdy-view-switcher-bar.c"
               line="333">the #GtkStack, or %NULL if none has been set</doc>
          <type name="Gtk.Stack" c:type="GtkStack*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="329">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_icon_size"
              c:identifier="hdy_view_switcher_bar_set_icon_size"
              glib:set-property="icon-size"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="300">Change the icon size hint for the icons in a #HdyViewSwitcher.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="35"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="302">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="icon_size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="303">the new icon size</doc>
            <type name="Gtk.IconSize" c:type="GtkIconSize"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_policy"
              c:identifier="hdy_view_switcher_bar_set_policy"
              glib:set-property="policy"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="249">Sets the policy of @self.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="31"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="251">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="252">the new policy</doc>
            <type name="ViewSwitcherPolicy" c:type="HdyViewSwitcherPolicy"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reveal"
              c:identifier="hdy_view_switcher_bar_set_reveal"
              glib:set-property="reveal"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="399">Sets whether @self should be revealed or not.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="401">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="reveal" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="402">%TRUE to reveal @self</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_stack"
              c:identifier="hdy_view_switcher_bar_set_stack"
              glib:set-property="stack"
              version="0.0.10">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="349">Sets the #GtkStack to control.</doc>
        <source-position filename="src/hdy-view-switcher-bar.h" line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="351">a #HdyViewSwitcherBar</doc>
            <type name="ViewSwitcherBar" c:type="HdyViewSwitcherBar*"/>
          </instance-parameter>
          <parameter name="stack"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/hdy-view-switcher-bar.c"
                 line="352">a #GtkStack</doc>
            <type name="Gtk.Stack" c:type="GtkStack*"/>
          </parameter>
        </parameters>
      </method>
      <property name="icon-size"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_icon_size"
                getter="get_icon_size"
                default-value="4">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="130">Use the "icon-size" property to hint the icons to use, you almost certainly
want to leave this as %GTK_ICON_SIZE_BUTTON.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="policy"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_policy"
                getter="get_policy"
                default-value="HDY_VIEW_SWITCHER_POLICY_NARROW">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="115">The #HdyViewSwitcherPolicy the #HdyViewSwitcher should use to determine
which mode to use.</doc>
        <type name="ViewSwitcherPolicy"/>
      </property>
      <property name="reveal"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_reveal"
                getter="get_reveal"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="159">Whether the bar should be revealed or hidden.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="stack"
                version="0.0.10"
                writable="1"
                transfer-ownership="none"
                setter="set_stack"
                getter="get_stack">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher-bar.c"
             line="145">The #GtkStack the #HdyViewSwitcher controls.</doc>
        <type name="Gtk.Stack"/>
      </property>
      <field name="parent_instance">
        <type name="Gtk.Bin" c:type="GtkBin"/>
      </field>
    </class>
    <record name="ViewSwitcherBarClass"
            c:type="HdyViewSwitcherBarClass"
            glib:is-gtype-struct-for="ViewSwitcherBar">
      <source-position filename="src/hdy-view-switcher-bar.h" line="24"/>
      <field name="parent_class">
        <type name="Gtk.BinClass" c:type="GtkBinClass"/>
      </field>
    </record>
    <record name="ViewSwitcherClass"
            c:type="HdyViewSwitcherClass"
            glib:is-gtype-struct-for="ViewSwitcher">
      <source-position filename="src/hdy-view-switcher.h" line="22"/>
      <field name="parent_class">
        <type name="Gtk.BoxClass" c:type="GtkBoxClass"/>
      </field>
    </record>
    <enumeration name="ViewSwitcherPolicy"
                 glib:type-name="HdyViewSwitcherPolicy"
                 glib:get-type="hdy_view_switcher_policy_get_type"
                 c:type="HdyViewSwitcherPolicy">
      <member name="auto"
              value="0"
              c:identifier="HDY_VIEW_SWITCHER_POLICY_AUTO"
              glib:nick="auto"
              glib:name="HDY_VIEW_SWITCHER_POLICY_AUTO">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="41">Automatically adapt to the best fitting mode</doc>
      </member>
      <member name="narrow"
              value="1"
              c:identifier="HDY_VIEW_SWITCHER_POLICY_NARROW"
              glib:nick="narrow"
              glib:name="HDY_VIEW_SWITCHER_POLICY_NARROW">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="42">Force the narrow mode</doc>
      </member>
      <member name="wide"
              value="2"
              c:identifier="HDY_VIEW_SWITCHER_POLICY_WIDE"
              glib:nick="wide"
              glib:name="HDY_VIEW_SWITCHER_POLICY_WIDE">
        <doc xml:space="preserve"
             filename="src/hdy-view-switcher.c"
             line="43">Force the wide mode</doc>
      </member>
    </enumeration>
    <function name="ease_out_cubic"
              c:identifier="hdy_ease_out_cubic"
              version="0.0.11">
      <doc xml:space="preserve"
           filename="src/hdy-animation.c"
           line="71">Computes the ease out for @t.</doc>
      <source-position filename="src/hdy-animation.h" line="19"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hdy-animation.c"
             line="77">the ease out for @t.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </return-value>
      <parameters>
        <parameter name="t" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-animation.c"
               line="73">the term</doc>
          <type name="gdouble" c:type="gdouble"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_value_row_name"
              c:identifier="hdy_enum_value_row_name"
              version="0.0.6">
      <doc xml:space="preserve"
           filename="src/hdy-combo-row.c"
           line="753">This is a default implementation of #HdyComboRowGetEnumValueNameFunc to be
used with hdy_combo_row_set_for_enum(). If the enumeration has a nickname, it
will return it, otherwise it will return its name.</doc>
      <source-position filename="src/hdy-combo-row.h" line="92"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="src/hdy-combo-row.c"
             line="762">a newly allocated displayable name that represents @value</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.c"
               line="755">the value from the enum from which to get a name</doc>
          <type name="EnumValueObject" c:type="HdyEnumValueObject*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hdy-combo-row.c"
               line="756">unused user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_enable_animations"
              c:identifier="hdy_get_enable_animations"
              version="0.0.11">
      <doc xml:space="preserve"
           filename="src/hdy-animation.c"
           line="21">Returns whether animations are enabled for that widget. This should be used
when implementing an animated widget to know whether to animate it or not.</doc>
      <source-position filename="src/hdy-animation.h" line="17"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hdy-animation.c"
             line="28">%TRUE if animations are enabled for @widget.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="widget" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-animation.c"
               line="23">a #GtkWidget</doc>
          <type name="Gtk.Widget" c:type="GtkWidget*"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="hdy-action-row">
      <doc xml:space="preserve"
           filename="src/hdy-action-row.c"
           line="12">The #HdyActionRow widget can have a title, a subtitle and an icon. The row
can receive action widgets at its end, prefix widgets at its start or widgets
below it.

Note that action widgets are packed starting from the end.

It is convenient to present a list of preferences and their related actions.

# HdyActionRow as GtkBuildable

The GtkWindow implementation of the GtkBuildable interface supports setting a
child as an action widget by specifying “action” as the “type” attribute of a
&amp;lt;child&amp;gt; element.

It also supports setting a child as a prefix widget by specifying “prefix” as
the “type” attribute of a &amp;lt;child&amp;gt; element.</doc>
    </docsection>
    <docsection name="hdy-animation">
      <doc xml:space="preserve"
           filename="src/hdy-animation.c"
           line="11">Animation helpers.</doc>
    </docsection>
    <docsection name="hdy-arrows">
      <doc xml:space="preserve"
           filename="src/hdy-arrows.c"
           line="17">The #HdyArrows widget displays arrows indicating a swiping direction.
An animation is run when the widget is mapped or then #hdy_arrows_animate()
is invoked.</doc>
    </docsection>
    <docsection name="hdy-column">
      <doc xml:space="preserve"
           filename="src/hdy-column.c"
           line="15">The #HdyColumn widget limits the size of the widget it contains to a given
maximum width. The expansion of the child from its minimum to its maximum
size is eased out for a smooth transition.

If the child requires more than the requested maximum width, it will be
allocated the minimum width it can fit in instead.</doc>
    </docsection>
    <docsection name="hdy-combo-row">
      <doc xml:space="preserve"
           filename="src/hdy-combo-row.c"
           line="14">The #HdyComboRow widget allows the user to choose from a list of valid
choices. The row displays the selected choice. When activated, the row
displays a popover which allows the user to make a new choice.

The #HdyComboRow uses the model-view pattern; the list of valid choices
is specified in the form of a #GListModel, and the display of the choices can
be adapted to the data in the model via widget creation functions.</doc>
    </docsection>
    <docsection name="hdy-dialer">
      <doc xml:space="preserve"
           filename="src/hdy-dialer.c"
           line="15">The #HdyDialer widget is a keypad for entering numbers such as phone numbers
or PIN codes.</doc>
    </docsection>
    <docsection name="hdy-dialer-button">
      <doc xml:space="preserve"
           filename="src/hdy-dialer-button.c"
           line="12">The #HdyDialerButton widget is a single button on an #HdyDialer. It
can represent a single symbol (typically a digit) plus an arbitrary
number of symbols that are displayed below it.</doc>
    </docsection>
    <docsection name="hdy-dialer-cycle-button">
      <doc xml:space="preserve"
           filename="src/hdy-dialer-cycle-button.c"
           line="12">The #HdyDialerCycleButton widget is a single button on an #HdyDialer
representing symbols such as digits, letters, #, +
or ☃.  When the button is pressed multiple times in a row, the
symbols are cycled through. That is a call to #get_curent_symbol
returns another symbol each time the button is pressed. If no
further button presses are received, cycling mode ends after a
timeout. This is configurable via the
#HdyDialerCycleButton:cycle-timeout property.</doc>
    </docsection>
    <docsection name="hdy-dialog">
      <doc xml:space="preserve"
           filename="src/hdy-dialog.c"
           line="12">A #GtkDialog that adapts to smaller displays.

Small is defined as:
|[&lt;!-- language="C" --&gt;
is_small = ((             width &lt;= 400 &amp;&amp; height &lt;= 800) ||
            (maximized &amp;&amp; width &lt;= 800 &amp;&amp; height &lt;= 400));
]|

In the smaller view a HdyDialog matches its size to that of its
parent and for ["Presentation Dialogs"](https://developer.gnome.org/hig/stable/dialogs.html)
uses a back button rather than close button to dismiss.

It's recommended that dialog contents are wrapped in a #GtkScrolledWindow
to ensure they don't overflow the screen.

#HdyDialog works best when #GtkDialog:use-header-bar is %TRUE (which is
the case when using hdy_dialog_new()).

Design Information: [GitLab Issue](https://source.puri.sm/Librem5/libhandy/issues/52)

Ideally when using #HdyDialog you shouldn't need to know you are using
it rather than #GtkDialog however there are some notable differences:
#GtkWindow:modal is %TRUE by default as is #GtkWindow:destroy-with-parent as
the behaviour demonstrated by #HdyDialog would be a bad user experience
when not modal.

If you want to replace the titlebar by your own, we recommend using
#HdyHeaderBar as it will retain the abiity to present a back button when the
dialog is small. #HdyHeaderBar doesn't have to be its direct child and you
can use any complex contraption you like as the dialog's titlebar.</doc>
    </docsection>
    <docsection name="hdy-enum-value-object">
      <doc xml:space="preserve"
           filename="src/hdy-enum-value-object.c"
           line="9">The #HdyEnumValueObject object represents a #GEnumValue, allowing it to be
used with #GListModel.</doc>
    </docsection>
    <docsection name="hdy-expander-row">
      <doc xml:space="preserve"
           filename="src/hdy-expander-row.c"
           line="13">The #HdyExpanderRow allows the user to reveal or hide widgets below it. It
also allows the user to enable the expansion of the row, allowing to disable
all that the row contains.</doc>
    </docsection>
    <docsection name="hdy-header-bar">
      <doc xml:space="preserve"
           filename="src/hdy-header-bar.c"
           line="33">HdyHeaderBar is similar to #GtkHeaderBar but is designed to fix some of its
shortcomings for adaptive applications.

HdyHeaderBar doesn't force the custom title widget to be vertically centered,
hence allowing it to fill up the whole height, which is e.g. needed for
#HdyViewSwitcher.

When used in a #HdyDialog, HdyHeaderBar will replace its window decorations
by a back button allowing to close it. It doesn't have to be its direct child
and you can use any complex contraption you like as the dialog's titlebar.</doc>
    </docsection>
    <docsection name="hdy-keypad">
      <doc xml:space="preserve"
           filename="src/hdy-keypad.c"
           line="14">The #HdyKeypad widget is a keypad for entering numbers such as phone numbers
or PIN codes.

This widget should not be altered using the #GtkGrid and #GtkContainer APIs,
they are considered internal to this widget, using them externally will lead to unexpected results.</doc>
    </docsection>
    <docsection name="hdy-leaflet">
      <doc xml:space="preserve"
           filename="src/hdy-leaflet.c"
           line="18">The #HdyLeaflet widget can display its children like a #GtkBox does or
like a #HdyLeaflet does, adapting to size changes by switching between
the two modes.

When there is enough space the children are displayed side by side, otherwise
only one is displayed. The threshold is dictated by the preferred minimum
sizes of the children.</doc>
    </docsection>
    <docsection name="hdy-main">
      <doc xml:space="preserve"
           filename="src/hdy-main.c"
           line="13">Before using the Handy libarary you should initialize it. This makes
sure translations for the Handy library are set up properly.</doc>
    </docsection>
    <docsection name="hdy-paginator">
      <doc xml:space="preserve"
           filename="src/hdy-paginator.c"
           line="33">The #HdyPaginator widget can be used to display a set of pages with
swipe-based navigation between them and optional indicators.</doc>
    </docsection>
    <docsection name="hdy-preferences-group">
      <doc xml:space="preserve"
           filename="src/hdy-preferences-group.c"
           line="15">A #HdyPreferencesGroup represents a group or tightly related preferences,
which in turn are represented by HdyPreferencesRow.

To summarize the role of the preferences it gathers, a group can have both a
title and a description. The title will be used by #HdyPreferencesWindow to
let the user look for a preference.</doc>
    </docsection>
    <docsection name="hdy-preferences-page">
      <doc xml:space="preserve"
           filename="src/hdy-preferences-page.c"
           line="14">The #HdyPreferencesPage widget gathers preferences groups into a single page
of a preferences window.</doc>
    </docsection>
    <docsection name="hdy-preferences-row">
      <doc xml:space="preserve"
           filename="src/hdy-preferences-row.c"
           line="12">The #HdyPreferencesRow widget has a title that #HdyPreferencesWindow will use
to let the user look for a preference. It doesn't present the title in any
way and it lets you present the preference as you please.

#HdyActionRow and its derivatives are convenient to use as preference rows as
they take care of presenting the preference's title while letting you compose
the inputs of the preference around it.</doc>
    </docsection>
    <docsection name="hdy-preferences-window">
      <doc xml:space="preserve"
           filename="src/hdy-preferences-window.c"
           line="20">The #HdyPreferencesWindow widget presents an application's preferences
gathered into pages and groups. The preferences are searchable by the user.</doc>
    </docsection>
    <docsection name="hdy-search-bar">
      <doc xml:space="preserve"
           filename="src/hdy-search-bar.c"
           line="49">#HdySearchBar is a container made to have a search entry (possibly
with additional connex widgets, such as drop-down menus, or buttons)
built-in. The search bar would appear when a search is started through
typing on the keyboard, or the application’s search mode is toggled on.

For keyboard presses to start a search, events will need to be
forwarded from the top-level window that contains the search bar.
See hdy_search_bar_handle_event() for example code. Common shortcuts
such as Ctrl+F should be handled as an application action, or through
the menu items.

You will also need to tell the search bar about which entry you
are using as your search entry using hdy_search_bar_connect_entry().
The following example shows you how to create a more complex search
entry.

HdySearchBar is very similar to #GtkSearchBar, the main difference being that
it allows the search entry to fill all the available space. This allows you
to control your search entry's width with a #HdyColumn.

# CSS nodes

HdySearchBar has a single CSS node with name searchbar.</doc>
    </docsection>
    <docsection name="hdy-squeezer">
      <doc xml:space="preserve"
           filename="src/hdy-squeezer.c"
           line="25">The HdySqueezer widget is a container which only shows the first of its
children that fits in the available size. It is convenient to offer different
widgets to represent the same data with different levels of detail, making
the widget seem to squeeze itself to fit in the available space.

Transitions between children can be animated as fades. This can be controlled
with hdy_squeezer_set_transition_type().</doc>
    </docsection>
    <docsection name="hdy-string-utf8">
      <doc xml:space="preserve"
           filename="src/hdy-string-utf8.c"
           line="11">Helpers to ease utf-8 handling based on #GString.</doc>
    </docsection>
    <docsection name="hdy-swipe-group">
      <doc xml:space="preserve"
           filename="src/hdy-swipe-group.c"
           line="18">The #HdySwipeGroup object can be used to sync multiple swipeable widgets
that implement the #HdySwipeable interface, such as #HdyPaginator, so that
animating one of them also animates all the other widgets in the group.

This can be useful for syncing widgets between a window's titlebar and
content area.

# #HdySwipeGroup as #GtkBuildable

#HdySwipeGroup can be created in an UI definition. The list of swipeable
widgets is specified with a &amp;lt;swipeables&amp;gt; element containing multiple
&amp;lt;swipeable&amp;gt; elements with their ”name” attribute specifying the id of
the widgets.

|[
&lt;object class="HdySwipeGroup"&gt;
  &lt;swipeables&gt;
    &lt;swipeable name="paginator1"/&gt;
    &lt;swipeable name="paginator2"/&gt;
  &lt;/swipeables&gt;
&lt;/object&gt;
]|</doc>
    </docsection>
    <docsection name="hdy-swipeable">
      <doc xml:space="preserve"
           filename="src/hdy-swipeable.c"
           line="9">The #HdySwipeable interface is implemented by all swipeable widgets. They
can be synced using #HdySwipeGroup.

#HdySwipeable is only meant to be used by libhandy widgets and is currently
implemented by #HdyLeaflet and #HdyPaginator. It should not be implemented
by applications.</doc>
    </docsection>
    <docsection name="hdy-title-bar">
      <doc xml:space="preserve"
           filename="src/hdy-title-bar.c"
           line="12">HdyTitleBar is meant to be used as the top-level widget of your window's
title bar. It will be drawn with the same style as a GtkHeaderBar but it
won't force a widget layout on you: you can put whatever widget you want in
it, including a GtkHeaderBar.

HdyTitleBar becomes really useful when you want to animate header bars, like
an adaptive application using #HdyLeaflet would do.</doc>
    </docsection>
    <docsection name="hdy-value-object">
      <doc xml:space="preserve"
           filename="src/hdy-value-object.c"
           line="12">The #HdyValueObject object represents a #GValue, allowing it to be
used with #GListModel.</doc>
    </docsection>
    <docsection name="hdy-view-switcher">
      <doc xml:space="preserve"
           filename="src/hdy-view-switcher.c"
           line="19">An adaptive view switcher, designed to switch between multiple views in a
similar fashion than a #GtkStackSwitcher.

Depending on the available width, the view switcher can adapt from a wide
mode showing the view's icon and title side by side, to a narrow mode showing
the view's icon and title one on top of the other, in a more compact way.
This can be controlled via the policy property.

To look good in a header bar, an #HdyViewSwitcher requires to fill its full
height. Contrary to #GtkHeaderBar, #HdyHeaderBar doesn't force a vertical
alignment on its title widget, so we recommend it over #GtkHeaderBar.</doc>
    </docsection>
    <docsection name="hdy-view-switcher-bar">
      <doc xml:space="preserve"
           filename="src/hdy-view-switcher-bar.c"
           line="15">An action bar letting you switch between multiple views offered by a
#GtkStack, via an #HdyViewSwitcher. It is designed to be put at the bottom of
a window and to be revealed only on really narrow windows e.g. on mobile
phones.</doc>
    </docsection>
    <function name="init" c:identifier="hdy_init">
      <doc xml:space="preserve"
           filename="src/hdy-main.c"
           line="24">Call this function before using any other Handy functions in your
GUI applications. If libhandy has already been initialized, the function will
simply return without processing the new arguments.</doc>
      <source-position filename="src/hdy-main.h" line="16"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hdy-main.c"
             line="37">%TRUE if initialization was successful, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1">
          <doc xml:space="preserve"
               filename="src/hdy-main.c"
               line="26">Address of the &lt;parameter&gt;argc&lt;/parameter&gt;
    parameter of your main() function (or 0 if @argv is %NULL). This will be
    changed if any arguments were handled.</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   optional="1">
          <doc xml:space="preserve"
               filename="src/hdy-main.c"
               line="29">
    Address of the &lt;parameter&gt;argv&lt;/parameter&gt; parameter of main(), or %NULL.
    Any options understood by Handy are stripped before return.</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="list_box_separator_header"
              c:identifier="hdy_list_box_separator_header"
              version="0.0.6">
      <doc xml:space="preserve"
           filename="src/hdy-list-box.c"
           line="20">Separates rows by using #GtkSeparator as headers. The first row doesn't have
a separator as there is no row above it.</doc>
      <source-position filename="src/hdy-list-box.h" line="18"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="row" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-list-box.c"
               line="22">the row to update</doc>
          <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
        </parameter>
        <parameter name="before"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hdy-list-box.c"
               line="23">the row before @row, or %NULL if it is first</doc>
          <type name="Gtk.ListBoxRow" c:type="GtkListBoxRow*"/>
        </parameter>
        <parameter name="unused_user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="src/hdy-list-box.c"
               line="24">unused user data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_utf8_len" c:identifier="hdy_string_utf8_len">
      <doc xml:space="preserve"
           filename="src/hdy-string-utf8.c"
           line="43">Computes the length of the string in utf-8 characters. See #g_utf8_strlen.</doc>
      <source-position filename="src/hdy-string-utf8.h" line="17"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hdy-string-utf8.c"
             line="49">the length of @string in characters</doc>
        <type name="glong" c:type="glong"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-string-utf8.c"
               line="45">a #GString</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
      </parameters>
    </function>
    <function name="string_utf8_truncate"
              c:identifier="hdy_string_utf8_truncate">
      <doc xml:space="preserve"
           filename="src/hdy-string-utf8.c"
           line="19">Cut of the end of the string @string so that @len utf8 characters remain.</doc>
      <source-position filename="src/hdy-string-utf8.h" line="15"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/hdy-string-utf8.c"
             line="26">@string</doc>
        <type name="GLib.String" c:type="GString*"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-string-utf8.c"
               line="21">a #GString</doc>
          <type name="GLib.String" c:type="GString*"/>
        </parameter>
        <parameter name="len" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/hdy-string-utf8.c"
               line="22">the new size of the string</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
