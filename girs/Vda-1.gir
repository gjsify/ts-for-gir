<?xml version="1.0"?>
<!-- Vda-1.gir generated by valac 0.51.3, do not modify. -->
<repository version="1.2" xmlns="http://www.gtk.org/introspection/core/1.0" xmlns:c="http://www.gtk.org/introspection/c/1.0" xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
<include name="GObject" version="2.0"/>
<include name="Gee" version="0.8"/>
<include name="Gio" version="2.0"/>
<include name="GLib" version="2.0"/>
<include name="GXml" version="0.20"/>
<include name="Json" version="1.0"/>
<include name="GCalc" version="2"/>
<package name="vda-1"/>
<c:include name="vda.h"/>
<namespace name="Vda" version="1" c:prefix="Vda" c:identifier-prefixes="Vda" c:symbol-prefix="vda">
	<enumeration name="MoveDirection" c:type="VdaMoveDirection" glib:type-name="VdaMoveDirection" glib:get-type="vda_move_direction_get_type">
		<member name="forward" c:identifier="VDA_MOVE_DIRECTION_FORWARD" value="0"/>
		<member name="backward" c:identifier="VDA_MOVE_DIRECTION_BACKWARD" value="1"/>
		<member name="relative" c:identifier="VDA_MOVE_DIRECTION_RELATIVE" value="2"/>
	</enumeration>
	<enumeration name="MetaObjectError" c:type="VdaMetaObjectError" glib:error-domain="vda-meta-object-error-quark">
		<member name="append" c:identifier="VDA_META_OBJECT_ERROR_APPEND" value="0"/>
		<member name="update" c:identifier="VDA_META_OBJECT_ERROR_UPDATE" value="1"/>
		<member name="save" c:identifier="VDA_META_OBJECT_ERROR_SAVE" value="2"/>
		<member name="drop" c:identifier="VDA_META_OBJECT_ERROR_DROP" value="3"/>
	</enumeration>
	<enumeration name="ConnectionError" c:type="VdaConnectionError" glib:error-domain="vda-connection-error-quark">
		<member name="no_database_name_error" c:identifier="VDA_CONNECTION_ERROR_NO_DATABASE_NAME_ERROR" value="0"/>
		<member name="server_error" c:identifier="VDA_CONNECTION_ERROR_SERVER_ERROR" value="1"/>
		<member name="query_creation_error" c:identifier="VDA_CONNECTION_ERROR_QUERY_CREATION_ERROR" value="2"/>
	</enumeration>
	<enumeration name="DataObjectError" c:type="VdaDataObjectError" glib:error-domain="vda-data-object-error-quark">
		<member name="select_error" c:identifier="VDA_DATA_OBJECT_ERROR_SELECT_ERROR" value="0"/>
		<member name="insert_error" c:identifier="VDA_DATA_OBJECT_ERROR_INSERT_ERROR" value="1"/>
		<member name="delete_error" c:identifier="VDA_DATA_OBJECT_ERROR_DELETE_ERROR" value="2"/>
		<member name="update_error" c:identifier="VDA_DATA_OBJECT_ERROR_UPDATE_ERROR" value="3"/>
		<member name="parameters_error" c:identifier="VDA_DATA_OBJECT_ERROR_PARAMETERS_ERROR" value="4"/>
		<member name="no_connection_error" c:identifier="VDA_DATA_OBJECT_ERROR_NO_CONNECTION_ERROR" value="5"/>
	</enumeration>
	<enumeration name="DataCollectionError" c:type="VdaDataCollectionError" glib:error-domain="vda-data-collection-error-quark">
		<member name="invalid_property_error" c:identifier="VDA_DATA_COLLECTION_ERROR_INVALID_PROPERTY_ERROR" value="0"/>
	</enumeration>
	<enumeration name="ParserError" c:type="VdaParserError" glib:error-domain="vda-parser-error-quark">
		<member name="invalid_token_error" c:identifier="VDA_PARSER_ERROR_INVALID_TOKEN_ERROR" value="0"/>
		<member name="invalid_expression_error" c:identifier="VDA_PARSER_ERROR_INVALID_EXPRESSION_ERROR" value="1"/>
	</enumeration>
	<enumeration name="QueryError" c:type="VdaQueryError" glib:error-domain="vda-query-error-quark">
		<member name="invalid_query_error" c:identifier="VDA_QUERY_ERROR_INVALID_QUERY_ERROR" value="0"/>
		<member name="invalid_connection_error" c:identifier="VDA_QUERY_ERROR_INVALID_CONNECTION_ERROR" value="1"/>
		<member name="general_error" c:identifier="VDA_QUERY_ERROR_GENERAL_ERROR" value="2"/>
	</enumeration>
	<enumeration name="RoleError" c:type="VdaRoleError" glib:error-domain="vda-role-error-quark">
		<member name="provilage_error" c:identifier="VDA_ROLE_ERROR_PROVILAGE_ERROR" value="0"/>
	</enumeration>
	<enumeration name="RowModelError" c:type="VdaRowModelError" glib:error-domain="vda-row-model-error-quark">
		<member name="invalid_column_name_error" c:identifier="VDA_ROW_MODEL_ERROR_INVALID_COLUMN_NAME_ERROR" value="0"/>
		<member name="invalid_column_number_error" c:identifier="VDA_ROW_MODEL_ERROR_INVALID_COLUMN_NUMBER_ERROR" value="1"/>
	</enumeration>
	<enumeration name="SqlCommandError" c:type="VdaSqlCommandError" glib:error-domain="vda-sql-command-error-quark">
		<member name="invalid_structure_error" c:identifier="VDA_SQL_COMMAND_ERROR_INVALID_STRUCTURE_ERROR" value="0"/>
	</enumeration>
	<enumeration name="SqlCommandSelectError" c:type="VdaSqlCommandSelectError" glib:error-domain="vda-sql-command-select-error-quark">
		<member name="invalid_fields_error" c:identifier="VDA_SQL_COMMAND_SELECT_ERROR_INVALID_FIELDS_ERROR" value="0"/>
	</enumeration>
	<enumeration name="SqlExpressionError" c:type="VdaSqlExpressionError" glib:error-domain="vda-sql-expression-error-quark">
		<member name="invalid_expression_error" c:identifier="VDA_SQL_EXPRESSION_ERROR_INVALID_EXPRESSION_ERROR" value="0"/>
	</enumeration>
	<class name="AffectedRows" c:type="VdaAffectedRows" c:symbol-prefix="affected_rows" glib:type-name="VdaAffectedRows" glib:get-type="vda_affected_rows_get_type" glib:type-struct="AffectedRowsClass" parent="GObject.Object">
		<implements name="Vda.Result"/>
		<implements name="Vda.SqlAffectedRows"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="AffectedRowsPrivate" c:type="VdaAffectedRowsPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_affected_rows_new">
			<return-value transfer-ownership="full">
				<type name="Vda.AffectedRows" c:type="VdaAffectedRows*"/>
			</return-value>
			<parameters>
				<parameter name="rows" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="AffectedRowsClass" c:type="VdaAffectedRowsClass" glib:is-gtype-struct-for="AffectedRows">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="AffectedRowsPrivate" c:type="VdaAffectedRowsPrivate" disguised="1"/>
	<class name="CommandDelete" c:type="VdaCommandDelete" c:symbol-prefix="command_delete" glib:type-name="VdaCommandDelete" glib:get-type="vda_command_delete_get_type" glib:type-struct="CommandDeleteClass" parent="GObject.Object">
		<implements name="Vda.SqlCommand"/>
		<implements name="Vda.SqlCommandTableRelated"/>
		<implements name="Vda.SqlCommandConditional"/>
		<implements name="Vda.Stringifiable"/>
		<implements name="Vda.SqlCommandParametrized"/>
		<implements name="Vda.SqlCommandDelete"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CommandDeletePrivate" c:type="VdaCommandDeletePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_command_delete_new">
			<return-value transfer-ownership="full">
				<type name="Vda.CommandDelete" c:type="VdaCommandDelete*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="CommandDeleteClass" c:type="VdaCommandDeleteClass" glib:is-gtype-struct-for="CommandDelete">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="CommandDeletePrivate" c:type="VdaCommandDeletePrivate" disguised="1"/>
	<class name="CommandInsert" c:type="VdaCommandInsert" c:symbol-prefix="command_insert" glib:type-name="VdaCommandInsert" glib:get-type="vda_command_insert_get_type" glib:type-struct="CommandInsertClass" parent="Vda.CommandModification">
		<implements name="Vda.Stringifiable"/>
		<implements name="Vda.SqlCommandInsert"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.CommandModification" c:type="VdaCommandModification"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CommandInsertPrivate" c:type="VdaCommandInsertPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_command_insert_new">
			<return-value transfer-ownership="full">
				<type name="Vda.CommandInsert" c:type="VdaCommandInsert*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="CommandInsertClass" c:type="VdaCommandInsertClass" glib:is-gtype-struct-for="CommandInsert">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.CommandModificationClass" c:type="VdaCommandModificationClass"/>
		</field>
	</record>
	<record name="CommandInsertPrivate" c:type="VdaCommandInsertPrivate" disguised="1"/>
	<class name="CommandModification" c:type="VdaCommandModification" c:symbol-prefix="command_modification" glib:type-name="VdaCommandModification" glib:get-type="vda_command_modification_get_type" glib:type-struct="CommandModificationClass" parent="GObject.Object">
		<implements name="Vda.SqlCommand"/>
		<implements name="Vda.SqlCommandTableRelated"/>
		<implements name="Vda.SqlCommandModification"/>
		<implements name="Vda.SqlCommandParametrized"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CommandModificationPrivate" c:type="VdaCommandModificationPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_command_modification_new">
			<return-value transfer-ownership="full">
				<type name="Vda.CommandModification" c:type="VdaCommandModification*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="CommandModificationClass" c:type="VdaCommandModificationClass" glib:is-gtype-struct-for="CommandModification">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="CommandModificationPrivate" c:type="VdaCommandModificationPrivate" disguised="1"/>
	<class name="CommandSelect" c:type="VdaCommandSelect" c:symbol-prefix="command_select" glib:type-name="VdaCommandSelect" glib:get-type="vda_command_select_get_type" glib:type-struct="CommandSelectClass" parent="GObject.Object">
		<implements name="Vda.SqlCommand"/>
		<implements name="Vda.SqlCommandConditional"/>
		<implements name="Vda.Stringifiable"/>
		<implements name="Vda.SqlCommandParametrized"/>
		<implements name="Vda.SqlCommandSelect"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CommandSelectPrivate" c:type="VdaCommandSelectPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_command_select_new">
			<return-value transfer-ownership="full">
				<type name="Vda.CommandSelect" c:type="VdaCommandSelect*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="CommandSelectClass" c:type="VdaCommandSelectClass" glib:is-gtype-struct-for="CommandSelect">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="CommandSelectPrivate" c:type="VdaCommandSelectPrivate" disguised="1"/>
	<class name="CommandUpdate" c:type="VdaCommandUpdate" c:symbol-prefix="command_update" glib:type-name="VdaCommandUpdate" glib:get-type="vda_command_update_get_type" glib:type-struct="CommandUpdateClass" parent="Vda.CommandModification">
		<implements name="Vda.SqlCommandConditional"/>
		<implements name="Vda.Stringifiable"/>
		<implements name="Vda.SqlCommandUpdate"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.CommandModification" c:type="VdaCommandModification"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="CommandUpdatePrivate" c:type="VdaCommandUpdatePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_command_update_new">
			<return-value transfer-ownership="full">
				<type name="Vda.CommandUpdate" c:type="VdaCommandUpdate*"/>
			</return-value>
			<parameters>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="CommandUpdateClass" c:type="VdaCommandUpdateClass" glib:is-gtype-struct-for="CommandUpdate">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.CommandModificationClass" c:type="VdaCommandModificationClass"/>
		</field>
	</record>
	<record name="CommandUpdatePrivate" c:type="VdaCommandUpdatePrivate" disguised="1"/>
	<class name="ConnectionParameter" c:type="VdaConnectionParameter" c:symbol-prefix="connection_parameter" glib:type-name="VdaConnectionParameter" glib:get-type="vda_connection_parameter_get_type" glib:type-struct="ConnectionParameterClass" parent="GObject.Object">
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParameterPrivate" c:type="VdaConnectionParameterPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameter_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter*"/>
			</return-value>
		</constructor>
		<property name="name" writable="1" construct="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_connection_parameter_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_name" c:identifier="vda_connection_parameter_set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<property name="value" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_value" c:identifier="vda_connection_parameter_get_value">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_value" c:identifier="vda_connection_parameter_set_value">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ConnectionParameterClass" c:type="VdaConnectionParameterClass" glib:is-gtype-struct-for="ConnectionParameter">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="ConnectionParameterPrivate" c:type="VdaConnectionParameterPrivate" disguised="1"/>
	<class name="ConnectionParameterDbName" c:type="VdaConnectionParameterDbName" c:symbol-prefix="connection_parameter_db_name" glib:type-name="VdaConnectionParameterDbName" glib:get-type="vda_connection_parameter_db_name_get_type" glib:type-struct="ConnectionParameterDbNameClass" parent="Vda.ConnectionParameter">
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParameterDbNamePrivate" c:type="VdaConnectionParameterDbNamePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameter_db_name_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameterDbName" c:type="VdaConnectionParameterDbName*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ConnectionParameterDbNameClass" c:type="VdaConnectionParameterDbNameClass" glib:is-gtype-struct-for="ConnectionParameterDbName">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ConnectionParameterClass" c:type="VdaConnectionParameterClass"/>
		</field>
	</record>
	<record name="ConnectionParameterDbNamePrivate" c:type="VdaConnectionParameterDbNamePrivate" disguised="1"/>
	<class name="ConnectionParameterHost" c:type="VdaConnectionParameterHost" c:symbol-prefix="connection_parameter_host" glib:type-name="VdaConnectionParameterHost" glib:get-type="vda_connection_parameter_host_get_type" glib:type-struct="ConnectionParameterHostClass" parent="Vda.ConnectionParameter">
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParameterHostPrivate" c:type="VdaConnectionParameterHostPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameter_host_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameterHost" c:type="VdaConnectionParameterHost*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ConnectionParameterHostClass" c:type="VdaConnectionParameterHostClass" glib:is-gtype-struct-for="ConnectionParameterHost">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ConnectionParameterClass" c:type="VdaConnectionParameterClass"/>
		</field>
	</record>
	<record name="ConnectionParameterHostPrivate" c:type="VdaConnectionParameterHostPrivate" disguised="1"/>
	<class name="ConnectionParameterPort" c:type="VdaConnectionParameterPort" c:symbol-prefix="connection_parameter_port" glib:type-name="VdaConnectionParameterPort" glib:get-type="vda_connection_parameter_port_get_type" glib:type-struct="ConnectionParameterPortClass" parent="Vda.ConnectionParameter">
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParameterPortPrivate" c:type="VdaConnectionParameterPortPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameter_port_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameterPort" c:type="VdaConnectionParameterPort*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ConnectionParameterPortClass" c:type="VdaConnectionParameterPortClass" glib:is-gtype-struct-for="ConnectionParameterPort">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ConnectionParameterClass" c:type="VdaConnectionParameterClass"/>
		</field>
	</record>
	<record name="ConnectionParameterPortPrivate" c:type="VdaConnectionParameterPortPrivate" disguised="1"/>
	<class name="ConnectionParameterUserName" c:type="VdaConnectionParameterUserName" c:symbol-prefix="connection_parameter_user_name" glib:type-name="VdaConnectionParameterUserName" glib:get-type="vda_connection_parameter_user_name_get_type" glib:type-struct="ConnectionParameterUserNameClass" parent="Vda.ConnectionParameter">
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParameterUserNamePrivate" c:type="VdaConnectionParameterUserNamePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameter_user_name_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameterUserName" c:type="VdaConnectionParameterUserName*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ConnectionParameterUserNameClass" c:type="VdaConnectionParameterUserNameClass" glib:is-gtype-struct-for="ConnectionParameterUserName">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ConnectionParameterClass" c:type="VdaConnectionParameterClass"/>
		</field>
	</record>
	<record name="ConnectionParameterUserNamePrivate" c:type="VdaConnectionParameterUserNamePrivate" disguised="1"/>
	<class name="ConnectionParameterPassword" c:type="VdaConnectionParameterPassword" c:symbol-prefix="connection_parameter_password" glib:type-name="VdaConnectionParameterPassword" glib:get-type="vda_connection_parameter_password_get_type" glib:type-struct="ConnectionParameterPasswordClass" parent="Vda.ConnectionParameter">
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ConnectionParameter" c:type="VdaConnectionParameter"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParameterPasswordPrivate" c:type="VdaConnectionParameterPasswordPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameter_password_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameterPassword" c:type="VdaConnectionParameterPassword*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ConnectionParameterPasswordClass" c:type="VdaConnectionParameterPasswordClass" glib:is-gtype-struct-for="ConnectionParameterPassword">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ConnectionParameterClass" c:type="VdaConnectionParameterClass"/>
		</field>
	</record>
	<record name="ConnectionParameterPasswordPrivate" c:type="VdaConnectionParameterPasswordPrivate" disguised="1"/>
	<class name="ConnectionParameters" c:type="VdaConnectionParameters" c:symbol-prefix="connection_parameters" glib:type-name="VdaConnectionParameters" glib:get-type="vda_connection_parameters_get_type" glib:type-struct="ConnectionParametersClass" parent="Gee.HashMap">
		<field name="parent_instance" readable="0" private="1">
			<type name="Gee.HashMap" c:type="GeeHashMap"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ConnectionParametersPrivate" c:type="VdaConnectionParametersPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_connection_parameters_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
			</return-value>
			<parameters>
				<parameter name="cnc_str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<method name="parse" c:identifier="vda_connection_parameters_parse">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</instance-parameter>
				<parameter name="cnstring" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</instance-parameter>
				<parameter name="cnstring" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="to_string" c:identifier="vda_connection_parameters_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="has_param" c:identifier="vda_connection_parameters_has_param">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ConnectionParametersClass" c:type="VdaConnectionParametersClass" glib:is-gtype-struct-for="ConnectionParameters">
		<field name="parent_class" readable="0" private="1">
			<type name="Gee.HashMapClass" c:type="GeeHashMapClass"/>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
					</instance-parameter>
					<parameter name="cnstring" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ConnectionParametersPrivate" c:type="VdaConnectionParametersPrivate" disguised="1"/>
	<class name="Expression" c:type="VdaExpression" c:symbol-prefix="expression" glib:type-name="VdaExpression" glib:get-type="vda_expression_get_type" glib:type-struct="ExpressionClass" parent="Gee.ArrayList">
		<implements name="Gio.ListModel"/>
		<implements name="Vda.SqlExpression"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gee.ArrayList" c:type="GeeArrayList"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionPrivate" c:type="VdaExpressionPrivate*"/>
		</field>
		<method name="to_string" c:identifier="vda_expression_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Expression" c:type="VdaExpression*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Expression" c:type="VdaExpression*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="vda_expression_new">
			<return-value transfer-ownership="full">
				<type name="Vda.Expression" c:type="VdaExpression*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionClass" c:type="VdaExpressionClass" glib:is-gtype-struct-for="Expression">
		<field name="parent_class" readable="0" private="1">
			<type name="Gee.ArrayListClass" c:type="GeeArrayListClass"/>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Expression" c:type="VdaExpression*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ExpressionPrivate" c:type="VdaExpressionPrivate" disguised="1"/>
	<class name="ExpressionField" c:type="VdaExpressionField" c:symbol-prefix="expression_field" glib:type-name="VdaExpressionField" glib:get-type="vda_expression_field_get_type" glib:type-struct="ExpressionFieldClass" parent="Vda.Expression">
		<implements name="Vda.SqlExpressionField"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Expression" c:type="VdaExpression"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionFieldPrivate" c:type="VdaExpressionFieldPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_field_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionField" c:type="VdaExpressionField*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionFieldClass" c:type="VdaExpressionFieldClass" glib:is-gtype-struct-for="ExpressionField">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionClass" c:type="VdaExpressionClass"/>
		</field>
	</record>
	<record name="ExpressionFieldPrivate" c:type="VdaExpressionFieldPrivate" disguised="1"/>
	<class name="ExpressionOperator" c:type="VdaExpressionOperator" c:symbol-prefix="expression_operator" glib:type-name="VdaExpressionOperator" glib:get-type="vda_expression_operator_get_type" glib:type-struct="ExpressionOperatorClass" parent="Vda.Expression">
		<implements name="Vda.SqlExpressionOperator"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Expression" c:type="VdaExpression"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorPrivate" c:type="VdaExpressionOperatorPrivate*"/>
		</field>
		<field name="_operator_type">
			<type name="Vda.SqlExpressionOperatorType" c:type="VdaSqlExpressionOperatorType"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorClass" c:type="VdaExpressionOperatorClass" glib:is-gtype-struct-for="ExpressionOperator">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionClass" c:type="VdaExpressionClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorPrivate" c:type="VdaExpressionOperatorPrivate" disguised="1"/>
	<class name="ExpressionOperatorGroup" c:type="VdaExpressionOperatorGroup" c:symbol-prefix="expression_operator_group" glib:type-name="VdaExpressionOperatorGroup" glib:get-type="vda_expression_operator_group_get_type" glib:type-struct="ExpressionOperatorGroupClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorGroup"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorGroupPrivate" c:type="VdaExpressionOperatorGroupPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_group_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorGroup" c:type="VdaExpressionOperatorGroup*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorGroupClass" c:type="VdaExpressionOperatorGroupClass" glib:is-gtype-struct-for="ExpressionOperatorGroup">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorGroupPrivate" c:type="VdaExpressionOperatorGroupPrivate" disguised="1"/>
	<class name="ExpressionOperatorMultiterm" c:type="VdaExpressionOperatorMultiterm" c:symbol-prefix="expression_operator_multiterm" glib:type-name="VdaExpressionOperatorMultiterm" glib:get-type="vda_expression_operator_multiterm_get_type" glib:type-struct="ExpressionOperatorMultitermClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorMultiterm"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorMultitermPrivate" c:type="VdaExpressionOperatorMultitermPrivate*"/>
		</field>
		<field name="_operator_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_multiterm_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorMultiterm" c:type="VdaExpressionOperatorMultiterm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorMultitermClass" c:type="VdaExpressionOperatorMultitermClass" glib:is-gtype-struct-for="ExpressionOperatorMultiterm">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorMultitermPrivate" c:type="VdaExpressionOperatorMultitermPrivate" disguised="1"/>
	<class name="ExpressionOperatorAnd" c:type="VdaExpressionOperatorAnd" c:symbol-prefix="expression_operator_and" glib:type-name="VdaExpressionOperatorAnd" glib:get-type="vda_expression_operator_and_get_type" glib:type-struct="ExpressionOperatorAndClass" parent="Vda.ExpressionOperatorMultiterm">
		<implements name="Vda.SqlExpressionOperatorAnd"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorMultiterm" c:type="VdaExpressionOperatorMultiterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorAndPrivate" c:type="VdaExpressionOperatorAndPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_and_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorAnd" c:type="VdaExpressionOperatorAnd*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorAndClass" c:type="VdaExpressionOperatorAndClass" glib:is-gtype-struct-for="ExpressionOperatorAnd">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorMultitermClass" c:type="VdaExpressionOperatorMultitermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorAndPrivate" c:type="VdaExpressionOperatorAndPrivate" disguised="1"/>
	<class name="ExpressionOperatorOr" c:type="VdaExpressionOperatorOr" c:symbol-prefix="expression_operator_or" glib:type-name="VdaExpressionOperatorOr" glib:get-type="vda_expression_operator_or_get_type" glib:type-struct="ExpressionOperatorOrClass" parent="Vda.ExpressionOperatorMultiterm">
		<implements name="Vda.SqlExpressionOperatorOr"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorMultiterm" c:type="VdaExpressionOperatorMultiterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorOrPrivate" c:type="VdaExpressionOperatorOrPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_or_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorOr" c:type="VdaExpressionOperatorOr*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorOrClass" c:type="VdaExpressionOperatorOrClass" glib:is-gtype-struct-for="ExpressionOperatorOr">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorMultitermClass" c:type="VdaExpressionOperatorMultitermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorOrPrivate" c:type="VdaExpressionOperatorOrPrivate" disguised="1"/>
	<class name="ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm" c:symbol-prefix="expression_operator_binaryterm" glib:type-name="VdaExpressionOperatorBinaryterm" glib:get-type="vda_expression_operator_binaryterm_get_type" glib:type-struct="ExpressionOperatorBinarytermClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorBinaryterm"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorBinarytermPrivate" c:type="VdaExpressionOperatorBinarytermPrivate*"/>
		</field>
		<field name="_operator_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_binaryterm_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass" glib:is-gtype-struct-for="ExpressionOperatorBinaryterm">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorBinarytermPrivate" c:type="VdaExpressionOperatorBinarytermPrivate" disguised="1"/>
	<class name="ExpressionOperatorEq" c:type="VdaExpressionOperatorEq" c:symbol-prefix="expression_operator_eq" glib:type-name="VdaExpressionOperatorEq" glib:get-type="vda_expression_operator_eq_get_type" glib:type-struct="ExpressionOperatorEqClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorEq"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorEqPrivate" c:type="VdaExpressionOperatorEqPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_eq_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorEq" c:type="VdaExpressionOperatorEq*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorEqClass" c:type="VdaExpressionOperatorEqClass" glib:is-gtype-struct-for="ExpressionOperatorEq">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorEqPrivate" c:type="VdaExpressionOperatorEqPrivate" disguised="1"/>
	<class name="ExpressionOperatorNotEq" c:type="VdaExpressionOperatorNotEq" c:symbol-prefix="expression_operator_not_eq" glib:type-name="VdaExpressionOperatorNotEq" glib:get-type="vda_expression_operator_not_eq_get_type" glib:type-struct="ExpressionOperatorNotEqClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorNotEq"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotEqPrivate" c:type="VdaExpressionOperatorNotEqPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_eq_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotEq" c:type="VdaExpressionOperatorNotEq*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotEqClass" c:type="VdaExpressionOperatorNotEqClass" glib:is-gtype-struct-for="ExpressionOperatorNotEq">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotEqPrivate" c:type="VdaExpressionOperatorNotEqPrivate" disguised="1"/>
	<class name="ExpressionOperatorDiff" c:type="VdaExpressionOperatorDiff" c:symbol-prefix="expression_operator_diff" glib:type-name="VdaExpressionOperatorDiff" glib:get-type="vda_expression_operator_diff_get_type" glib:type-struct="ExpressionOperatorDiffClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorDiff"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorDiffPrivate" c:type="VdaExpressionOperatorDiffPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_diff_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorDiff" c:type="VdaExpressionOperatorDiff*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorDiffClass" c:type="VdaExpressionOperatorDiffClass" glib:is-gtype-struct-for="ExpressionOperatorDiff">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorDiffPrivate" c:type="VdaExpressionOperatorDiffPrivate" disguised="1"/>
	<class name="ExpressionOperatorGt" c:type="VdaExpressionOperatorGt" c:symbol-prefix="expression_operator_gt" glib:type-name="VdaExpressionOperatorGt" glib:get-type="vda_expression_operator_gt_get_type" glib:type-struct="ExpressionOperatorGtClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorGt"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorGtPrivate" c:type="VdaExpressionOperatorGtPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_gt_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorGt" c:type="VdaExpressionOperatorGt*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorGtClass" c:type="VdaExpressionOperatorGtClass" glib:is-gtype-struct-for="ExpressionOperatorGt">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorGtPrivate" c:type="VdaExpressionOperatorGtPrivate" disguised="1"/>
	<class name="ExpressionOperatorLt" c:type="VdaExpressionOperatorLt" c:symbol-prefix="expression_operator_lt" glib:type-name="VdaExpressionOperatorLt" glib:get-type="vda_expression_operator_lt_get_type" glib:type-struct="ExpressionOperatorLtClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorLt"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorLtPrivate" c:type="VdaExpressionOperatorLtPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_lt_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorLt" c:type="VdaExpressionOperatorLt*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorLtClass" c:type="VdaExpressionOperatorLtClass" glib:is-gtype-struct-for="ExpressionOperatorLt">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorLtPrivate" c:type="VdaExpressionOperatorLtPrivate" disguised="1"/>
	<class name="ExpressionOperatorGeq" c:type="VdaExpressionOperatorGeq" c:symbol-prefix="expression_operator_geq" glib:type-name="VdaExpressionOperatorGeq" glib:get-type="vda_expression_operator_geq_get_type" glib:type-struct="ExpressionOperatorGeqClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorGeq"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorGeqPrivate" c:type="VdaExpressionOperatorGeqPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_geq_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorGeq" c:type="VdaExpressionOperatorGeq*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorGeqClass" c:type="VdaExpressionOperatorGeqClass" glib:is-gtype-struct-for="ExpressionOperatorGeq">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorGeqPrivate" c:type="VdaExpressionOperatorGeqPrivate" disguised="1"/>
	<class name="ExpressionOperatorLeq" c:type="VdaExpressionOperatorLeq" c:symbol-prefix="expression_operator_leq" glib:type-name="VdaExpressionOperatorLeq" glib:get-type="vda_expression_operator_leq_get_type" glib:type-struct="ExpressionOperatorLeqClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorLeq"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorLeqPrivate" c:type="VdaExpressionOperatorLeqPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_leq_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorLeq" c:type="VdaExpressionOperatorLeq*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorLeqClass" c:type="VdaExpressionOperatorLeqClass" glib:is-gtype-struct-for="ExpressionOperatorLeq">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorLeqPrivate" c:type="VdaExpressionOperatorLeqPrivate" disguised="1"/>
	<class name="ExpressionOperatorRegexp" c:type="VdaExpressionOperatorRegexp" c:symbol-prefix="expression_operator_regexp" glib:type-name="VdaExpressionOperatorRegexp" glib:get-type="vda_expression_operator_regexp_get_type" glib:type-struct="ExpressionOperatorRegexpClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorRegexp"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorRegexpPrivate" c:type="VdaExpressionOperatorRegexpPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_regexp_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorRegexp" c:type="VdaExpressionOperatorRegexp*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorRegexpClass" c:type="VdaExpressionOperatorRegexpClass" glib:is-gtype-struct-for="ExpressionOperatorRegexp">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorRegexpPrivate" c:type="VdaExpressionOperatorRegexpPrivate" disguised="1"/>
	<class name="ExpressionOperatorStar" c:type="VdaExpressionOperatorStar" c:symbol-prefix="expression_operator_star" glib:type-name="VdaExpressionOperatorStar" glib:get-type="vda_expression_operator_star_get_type" glib:type-struct="ExpressionOperatorStarClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorStar"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorStarPrivate" c:type="VdaExpressionOperatorStarPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_star_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorStar" c:type="VdaExpressionOperatorStar*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorStarClass" c:type="VdaExpressionOperatorStarClass" glib:is-gtype-struct-for="ExpressionOperatorStar">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorStarPrivate" c:type="VdaExpressionOperatorStarPrivate" disguised="1"/>
	<class name="ExpressionOperatorDiv" c:type="VdaExpressionOperatorDiv" c:symbol-prefix="expression_operator_div" glib:type-name="VdaExpressionOperatorDiv" glib:get-type="vda_expression_operator_div_get_type" glib:type-struct="ExpressionOperatorDivClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorDiv"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorDivPrivate" c:type="VdaExpressionOperatorDivPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_div_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorDiv" c:type="VdaExpressionOperatorDiv*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorDivClass" c:type="VdaExpressionOperatorDivClass" glib:is-gtype-struct-for="ExpressionOperatorDiv">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorDivPrivate" c:type="VdaExpressionOperatorDivPrivate" disguised="1"/>
	<class name="ExpressionOperatorIn" c:type="VdaExpressionOperatorIn" c:symbol-prefix="expression_operator_in" glib:type-name="VdaExpressionOperatorIn" glib:get-type="vda_expression_operator_in_get_type" glib:type-struct="ExpressionOperatorInClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorIn"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorInPrivate" c:type="VdaExpressionOperatorInPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_in_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIn" c:type="VdaExpressionOperatorIn*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorInClass" c:type="VdaExpressionOperatorInClass" glib:is-gtype-struct-for="ExpressionOperatorIn">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorInPrivate" c:type="VdaExpressionOperatorInPrivate" disguised="1"/>
	<class name="ExpressionOperatorNotIn" c:type="VdaExpressionOperatorNotIn" c:symbol-prefix="expression_operator_not_in" glib:type-name="VdaExpressionOperatorNotIn" glib:get-type="vda_expression_operator_not_in_get_type" glib:type-struct="ExpressionOperatorNotInClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorNotIn"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotInPrivate" c:type="VdaExpressionOperatorNotInPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_in_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotIn" c:type="VdaExpressionOperatorNotIn*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotInClass" c:type="VdaExpressionOperatorNotInClass" glib:is-gtype-struct-for="ExpressionOperatorNotIn">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotInPrivate" c:type="VdaExpressionOperatorNotInPrivate" disguised="1"/>
	<class name="ExpressionOperatorConcatenate" c:type="VdaExpressionOperatorConcatenate" c:symbol-prefix="expression_operator_concatenate" glib:type-name="VdaExpressionOperatorConcatenate" glib:get-type="vda_expression_operator_concatenate_get_type" glib:type-struct="ExpressionOperatorConcatenateClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorConcatenate"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorConcatenatePrivate" c:type="VdaExpressionOperatorConcatenatePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_concatenate_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorConcatenate" c:type="VdaExpressionOperatorConcatenate*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorConcatenateClass" c:type="VdaExpressionOperatorConcatenateClass" glib:is-gtype-struct-for="ExpressionOperatorConcatenate">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorConcatenatePrivate" c:type="VdaExpressionOperatorConcatenatePrivate" disguised="1"/>
	<class name="ExpressionOperatorSimilarTo" c:type="VdaExpressionOperatorSimilarTo" c:symbol-prefix="expression_operator_similar_to" glib:type-name="VdaExpressionOperatorSimilarTo" glib:get-type="vda_expression_operator_similar_to_get_type" glib:type-struct="ExpressionOperatorSimilarToClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorSimilarTo"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorSimilarToPrivate" c:type="VdaExpressionOperatorSimilarToPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_similar_to_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorSimilarTo" c:type="VdaExpressionOperatorSimilarTo*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorSimilarToClass" c:type="VdaExpressionOperatorSimilarToClass" glib:is-gtype-struct-for="ExpressionOperatorSimilarTo">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorSimilarToPrivate" c:type="VdaExpressionOperatorSimilarToPrivate" disguised="1"/>
	<class name="ExpressionOperatorLike" c:type="VdaExpressionOperatorLike" c:symbol-prefix="expression_operator_like" glib:type-name="VdaExpressionOperatorLike" glib:get-type="vda_expression_operator_like_get_type" glib:type-struct="ExpressionOperatorLikeClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorLike"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorLikePrivate" c:type="VdaExpressionOperatorLikePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_like_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorLike" c:type="VdaExpressionOperatorLike*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorLikeClass" c:type="VdaExpressionOperatorLikeClass" glib:is-gtype-struct-for="ExpressionOperatorLike">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorLikePrivate" c:type="VdaExpressionOperatorLikePrivate" disguised="1"/>
	<class name="ExpressionOperatorNotLike" c:type="VdaExpressionOperatorNotLike" c:symbol-prefix="expression_operator_not_like" glib:type-name="VdaExpressionOperatorNotLike" glib:get-type="vda_expression_operator_not_like_get_type" glib:type-struct="ExpressionOperatorNotLikeClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorNotLike"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotLikePrivate" c:type="VdaExpressionOperatorNotLikePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_like_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotLike" c:type="VdaExpressionOperatorNotLike*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotLikeClass" c:type="VdaExpressionOperatorNotLikeClass" glib:is-gtype-struct-for="ExpressionOperatorNotLike">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotLikePrivate" c:type="VdaExpressionOperatorNotLikePrivate" disguised="1"/>
	<class name="ExpressionOperatorIlike" c:type="VdaExpressionOperatorIlike" c:symbol-prefix="expression_operator_ilike" glib:type-name="VdaExpressionOperatorIlike" glib:get-type="vda_expression_operator_ilike_get_type" glib:type-struct="ExpressionOperatorIlikeClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorIlike"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIlikePrivate" c:type="VdaExpressionOperatorIlikePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_ilike_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIlike" c:type="VdaExpressionOperatorIlike*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIlikeClass" c:type="VdaExpressionOperatorIlikeClass" glib:is-gtype-struct-for="ExpressionOperatorIlike">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIlikePrivate" c:type="VdaExpressionOperatorIlikePrivate" disguised="1"/>
	<class name="ExpressionOperatorNotIlike" c:type="VdaExpressionOperatorNotIlike" c:symbol-prefix="expression_operator_not_ilike" glib:type-name="VdaExpressionOperatorNotIlike" glib:get-type="vda_expression_operator_not_ilike_get_type" glib:type-struct="ExpressionOperatorNotIlikeClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorNotIlike"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotIlikePrivate" c:type="VdaExpressionOperatorNotIlikePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_ilike_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotIlike" c:type="VdaExpressionOperatorNotIlike*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotIlikeClass" c:type="VdaExpressionOperatorNotIlikeClass" glib:is-gtype-struct-for="ExpressionOperatorNotIlike">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotIlikePrivate" c:type="VdaExpressionOperatorNotIlikePrivate" disguised="1"/>
	<class name="ExpressionOperatorBinaryUnaryterm" c:type="VdaExpressionOperatorBinaryUnaryterm" c:symbol-prefix="expression_operator_binary_unaryterm" glib:type-name="VdaExpressionOperatorBinaryUnaryterm" glib:get-type="vda_expression_operator_binary_unaryterm_get_type" glib:type-struct="ExpressionOperatorBinaryUnarytermClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorBinaryUnaryterm"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorBinaryUnarytermPrivate" c:type="VdaExpressionOperatorBinaryUnarytermPrivate*"/>
		</field>
		<field name="_operator_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_binary_unaryterm_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorBinaryUnaryterm" c:type="VdaExpressionOperatorBinaryUnaryterm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorBinaryUnarytermClass" c:type="VdaExpressionOperatorBinaryUnarytermClass" glib:is-gtype-struct-for="ExpressionOperatorBinaryUnaryterm">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorBinaryUnarytermPrivate" c:type="VdaExpressionOperatorBinaryUnarytermPrivate" disguised="1"/>
	<class name="ExpressionOperatorMinus" c:type="VdaExpressionOperatorMinus" c:symbol-prefix="expression_operator_minus" glib:type-name="VdaExpressionOperatorMinus" glib:get-type="vda_expression_operator_minus_get_type" glib:type-struct="ExpressionOperatorMinusClass" parent="Vda.ExpressionOperatorBinaryUnaryterm">
		<implements name="Vda.SqlExpressionOperatorMinus"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryUnaryterm" c:type="VdaExpressionOperatorBinaryUnaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorMinusPrivate" c:type="VdaExpressionOperatorMinusPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_minus_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorMinus" c:type="VdaExpressionOperatorMinus*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorMinusClass" c:type="VdaExpressionOperatorMinusClass" glib:is-gtype-struct-for="ExpressionOperatorMinus">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryUnarytermClass" c:type="VdaExpressionOperatorBinaryUnarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorMinusPrivate" c:type="VdaExpressionOperatorMinusPrivate" disguised="1"/>
	<class name="ExpressionOperatorPlus" c:type="VdaExpressionOperatorPlus" c:symbol-prefix="expression_operator_plus" glib:type-name="VdaExpressionOperatorPlus" glib:get-type="vda_expression_operator_plus_get_type" glib:type-struct="ExpressionOperatorPlusClass" parent="Vda.ExpressionOperatorBinaryUnaryterm">
		<implements name="Vda.SqlExpressionOperatorPlus"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryUnaryterm" c:type="VdaExpressionOperatorBinaryUnaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorPlusPrivate" c:type="VdaExpressionOperatorPlusPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_plus_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorPlus" c:type="VdaExpressionOperatorPlus*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorPlusClass" c:type="VdaExpressionOperatorPlusClass" glib:is-gtype-struct-for="ExpressionOperatorPlus">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryUnarytermClass" c:type="VdaExpressionOperatorBinaryUnarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorPlusPrivate" c:type="VdaExpressionOperatorPlusPrivate" disguised="1"/>
	<class name="ExpressionOperatorInitialUnaryterm" c:type="VdaExpressionOperatorInitialUnaryterm" c:symbol-prefix="expression_operator_initial_unaryterm" glib:type-name="VdaExpressionOperatorInitialUnaryterm" glib:get-type="vda_expression_operator_initial_unaryterm_get_type" glib:type-struct="ExpressionOperatorInitialUnarytermClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorInitialUnaryterm"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorInitialUnarytermPrivate" c:type="VdaExpressionOperatorInitialUnarytermPrivate*"/>
		</field>
		<field name="_operator_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_initial_unaryterm_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorInitialUnaryterm" c:type="VdaExpressionOperatorInitialUnaryterm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorInitialUnarytermClass" c:type="VdaExpressionOperatorInitialUnarytermClass" glib:is-gtype-struct-for="ExpressionOperatorInitialUnaryterm">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorInitialUnarytermPrivate" c:type="VdaExpressionOperatorInitialUnarytermPrivate" disguised="1"/>
	<class name="ExpressionOperatorNot" c:type="VdaExpressionOperatorNot" c:symbol-prefix="expression_operator_not" glib:type-name="VdaExpressionOperatorNot" glib:get-type="vda_expression_operator_not_get_type" glib:type-struct="ExpressionOperatorNotClass" parent="Vda.ExpressionOperatorInitialUnaryterm">
		<implements name="Vda.SqlExpressionOperatorNot"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorInitialUnaryterm" c:type="VdaExpressionOperatorInitialUnaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotPrivate" c:type="VdaExpressionOperatorNotPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNot" c:type="VdaExpressionOperatorNot*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotClass" c:type="VdaExpressionOperatorNotClass" glib:is-gtype-struct-for="ExpressionOperatorNot">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorInitialUnarytermClass" c:type="VdaExpressionOperatorInitialUnarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotPrivate" c:type="VdaExpressionOperatorNotPrivate" disguised="1"/>
	<class name="ExpressionOperatorFinalUnaryterm" c:type="VdaExpressionOperatorFinalUnaryterm" c:symbol-prefix="expression_operator_final_unaryterm" glib:type-name="VdaExpressionOperatorFinalUnaryterm" glib:get-type="vda_expression_operator_final_unaryterm_get_type" glib:type-struct="ExpressionOperatorFinalUnarytermClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorFinalUnaryterm"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorFinalUnarytermPrivate" c:type="VdaExpressionOperatorFinalUnarytermPrivate*"/>
		</field>
		<field name="_operator_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_final_unaryterm_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorFinalUnaryterm" c:type="VdaExpressionOperatorFinalUnaryterm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorFinalUnarytermClass" c:type="VdaExpressionOperatorFinalUnarytermClass" glib:is-gtype-struct-for="ExpressionOperatorFinalUnaryterm">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorFinalUnarytermPrivate" c:type="VdaExpressionOperatorFinalUnarytermPrivate" disguised="1"/>
	<class name="ExpressionOperatorIs" c:type="VdaExpressionOperatorIs" c:symbol-prefix="expression_operator_is" glib:type-name="VdaExpressionOperatorIs" glib:get-type="vda_expression_operator_is_get_type" glib:type-struct="ExpressionOperatorIsClass" parent="Vda.ExpressionOperatorFinalUnaryterm">
		<implements name="Vda.SqlExpressionOperatorIs"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorFinalUnaryterm" c:type="VdaExpressionOperatorFinalUnaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsPrivate" c:type="VdaExpressionOperatorIsPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIs" c:type="VdaExpressionOperatorIs*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsClass" c:type="VdaExpressionOperatorIsClass" glib:is-gtype-struct-for="ExpressionOperatorIs">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorFinalUnarytermClass" c:type="VdaExpressionOperatorFinalUnarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsPrivate" c:type="VdaExpressionOperatorIsPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNot" c:type="VdaExpressionOperatorIsNot" c:symbol-prefix="expression_operator_is_not" glib:type-name="VdaExpressionOperatorIsNot" glib:get-type="vda_expression_operator_is_not_get_type" glib:type-struct="ExpressionOperatorIsNotClass" parent="Vda.ExpressionOperatorIs">
		<implements name="Vda.SqlExpressionOperatorIsNot"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIs" c:type="VdaExpressionOperatorIs"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotPrivate" c:type="VdaExpressionOperatorIsNotPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNot" c:type="VdaExpressionOperatorIsNot*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotClass" c:type="VdaExpressionOperatorIsNotClass" glib:is-gtype-struct-for="ExpressionOperatorIsNot">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsClass" c:type="VdaExpressionOperatorIsClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotPrivate" c:type="VdaExpressionOperatorIsNotPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNull" c:type="VdaExpressionOperatorIsNull" c:symbol-prefix="expression_operator_is_null" glib:type-name="VdaExpressionOperatorIsNull" glib:get-type="vda_expression_operator_is_null_get_type" glib:type-struct="ExpressionOperatorIsNullClass" parent="Vda.ExpressionOperatorIs">
		<implements name="Vda.SqlExpressionOperatorIsNull"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIs" c:type="VdaExpressionOperatorIs"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNullPrivate" c:type="VdaExpressionOperatorIsNullPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_null_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNull" c:type="VdaExpressionOperatorIsNull*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNullClass" c:type="VdaExpressionOperatorIsNullClass" glib:is-gtype-struct-for="ExpressionOperatorIsNull">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsClass" c:type="VdaExpressionOperatorIsClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNullPrivate" c:type="VdaExpressionOperatorIsNullPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNotNull" c:type="VdaExpressionOperatorIsNotNull" c:symbol-prefix="expression_operator_is_not_null" glib:type-name="VdaExpressionOperatorIsNotNull" glib:get-type="vda_expression_operator_is_not_null_get_type" glib:type-struct="ExpressionOperatorIsNotNullClass" parent="Vda.ExpressionOperatorIsNot">
		<implements name="Vda.SqlExpressionOperatorIsNotNull"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNot" c:type="VdaExpressionOperatorIsNot"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotNullPrivate" c:type="VdaExpressionOperatorIsNotNullPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_null_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNotNull" c:type="VdaExpressionOperatorIsNotNull*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotNullClass" c:type="VdaExpressionOperatorIsNotNullClass" glib:is-gtype-struct-for="ExpressionOperatorIsNotNull">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNotClass" c:type="VdaExpressionOperatorIsNotClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotNullPrivate" c:type="VdaExpressionOperatorIsNotNullPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsTrue" c:type="VdaExpressionOperatorIsTrue" c:symbol-prefix="expression_operator_is_true" glib:type-name="VdaExpressionOperatorIsTrue" glib:get-type="vda_expression_operator_is_true_get_type" glib:type-struct="ExpressionOperatorIsTrueClass" parent="Vda.ExpressionOperatorIs">
		<implements name="Vda.SqlExpressionOperatorIsTrue"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIs" c:type="VdaExpressionOperatorIs"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsTruePrivate" c:type="VdaExpressionOperatorIsTruePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_true_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsTrue" c:type="VdaExpressionOperatorIsTrue*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsTrueClass" c:type="VdaExpressionOperatorIsTrueClass" glib:is-gtype-struct-for="ExpressionOperatorIsTrue">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsClass" c:type="VdaExpressionOperatorIsClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsTruePrivate" c:type="VdaExpressionOperatorIsTruePrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNotTrue" c:type="VdaExpressionOperatorIsNotTrue" c:symbol-prefix="expression_operator_is_not_true" glib:type-name="VdaExpressionOperatorIsNotTrue" glib:get-type="vda_expression_operator_is_not_true_get_type" glib:type-struct="ExpressionOperatorIsNotTrueClass" parent="Vda.ExpressionOperatorIsNot">
		<implements name="Vda.SqlExpressionOperatorIsNotTrue"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNot" c:type="VdaExpressionOperatorIsNot"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotTruePrivate" c:type="VdaExpressionOperatorIsNotTruePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_true_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNotTrue" c:type="VdaExpressionOperatorIsNotTrue*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotTrueClass" c:type="VdaExpressionOperatorIsNotTrueClass" glib:is-gtype-struct-for="ExpressionOperatorIsNotTrue">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNotClass" c:type="VdaExpressionOperatorIsNotClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotTruePrivate" c:type="VdaExpressionOperatorIsNotTruePrivate" disguised="1"/>
	<class name="ExpressionOperatorIsFalse" c:type="VdaExpressionOperatorIsFalse" c:symbol-prefix="expression_operator_is_false" glib:type-name="VdaExpressionOperatorIsFalse" glib:get-type="vda_expression_operator_is_false_get_type" glib:type-struct="ExpressionOperatorIsFalseClass" parent="Vda.ExpressionOperatorIs">
		<implements name="Vda.SqlExpressionOperatorIsFalse"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIs" c:type="VdaExpressionOperatorIs"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsFalsePrivate" c:type="VdaExpressionOperatorIsFalsePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_false_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsFalse" c:type="VdaExpressionOperatorIsFalse*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsFalseClass" c:type="VdaExpressionOperatorIsFalseClass" glib:is-gtype-struct-for="ExpressionOperatorIsFalse">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsClass" c:type="VdaExpressionOperatorIsClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsFalsePrivate" c:type="VdaExpressionOperatorIsFalsePrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNotFalse" c:type="VdaExpressionOperatorIsNotFalse" c:symbol-prefix="expression_operator_is_not_false" glib:type-name="VdaExpressionOperatorIsNotFalse" glib:get-type="vda_expression_operator_is_not_false_get_type" glib:type-struct="ExpressionOperatorIsNotFalseClass" parent="Vda.ExpressionOperatorIsNot">
		<implements name="Vda.SqlExpressionOperatorIsNotFalse"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNot" c:type="VdaExpressionOperatorIsNot"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotFalsePrivate" c:type="VdaExpressionOperatorIsNotFalsePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_false_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNotFalse" c:type="VdaExpressionOperatorIsNotFalse*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotFalseClass" c:type="VdaExpressionOperatorIsNotFalseClass" glib:is-gtype-struct-for="ExpressionOperatorIsNotFalse">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNotClass" c:type="VdaExpressionOperatorIsNotClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotFalsePrivate" c:type="VdaExpressionOperatorIsNotFalsePrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNotUnknown" c:type="VdaExpressionOperatorIsNotUnknown" c:symbol-prefix="expression_operator_is_not_unknown" glib:type-name="VdaExpressionOperatorIsNotUnknown" glib:get-type="vda_expression_operator_is_not_unknown_get_type" glib:type-struct="ExpressionOperatorIsNotUnknownClass" parent="Vda.ExpressionOperatorIsNot">
		<implements name="Vda.SqlExpressionOperatorIsNotUnknown"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNot" c:type="VdaExpressionOperatorIsNot"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotUnknownPrivate" c:type="VdaExpressionOperatorIsNotUnknownPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_unknown_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNotUnknown" c:type="VdaExpressionOperatorIsNotUnknown*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotUnknownClass" c:type="VdaExpressionOperatorIsNotUnknownClass" glib:is-gtype-struct-for="ExpressionOperatorIsNotUnknown">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNotClass" c:type="VdaExpressionOperatorIsNotClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotUnknownPrivate" c:type="VdaExpressionOperatorIsNotUnknownPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsUnknown" c:type="VdaExpressionOperatorIsUnknown" c:symbol-prefix="expression_operator_is_unknown" glib:type-name="VdaExpressionOperatorIsUnknown" glib:get-type="vda_expression_operator_is_unknown_get_type" glib:type-struct="ExpressionOperatorIsUnknownClass" parent="Vda.ExpressionOperatorIs">
		<implements name="Vda.SqlExpressionOperatorIsUnknown"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIs" c:type="VdaExpressionOperatorIs"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsUnknownPrivate" c:type="VdaExpressionOperatorIsUnknownPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_unknown_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsUnknown" c:type="VdaExpressionOperatorIsUnknown*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsUnknownClass" c:type="VdaExpressionOperatorIsUnknownClass" glib:is-gtype-struct-for="ExpressionOperatorIsUnknown">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsClass" c:type="VdaExpressionOperatorIsClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsUnknownPrivate" c:type="VdaExpressionOperatorIsUnknownPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsDistinct" c:type="VdaExpressionOperatorIsDistinct" c:symbol-prefix="expression_operator_is_distinct" glib:type-name="VdaExpressionOperatorIsDistinct" glib:get-type="vda_expression_operator_is_distinct_get_type" glib:type-struct="ExpressionOperatorIsDistinctClass" parent="Vda.ExpressionOperatorBinaryterm">
		<implements name="Vda.SqlExpressionOperatorIsDistinct"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinaryterm" c:type="VdaExpressionOperatorBinaryterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsDistinctPrivate" c:type="VdaExpressionOperatorIsDistinctPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_distinct_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsDistinct" c:type="VdaExpressionOperatorIsDistinct*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsDistinctClass" c:type="VdaExpressionOperatorIsDistinctClass" glib:is-gtype-struct-for="ExpressionOperatorIsDistinct">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBinarytermClass" c:type="VdaExpressionOperatorBinarytermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsDistinctPrivate" c:type="VdaExpressionOperatorIsDistinctPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNotDistinct" c:type="VdaExpressionOperatorIsNotDistinct" c:symbol-prefix="expression_operator_is_not_distinct" glib:type-name="VdaExpressionOperatorIsNotDistinct" glib:get-type="vda_expression_operator_is_not_distinct_get_type" glib:type-struct="ExpressionOperatorIsNotDistinctClass" parent="Vda.ExpressionOperatorIsDistinct">
		<implements name="Vda.SqlExpressionOperatorIsNotDistinct"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsDistinct" c:type="VdaExpressionOperatorIsDistinct"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotDistinctPrivate" c:type="VdaExpressionOperatorIsNotDistinctPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_distinct_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNotDistinct" c:type="VdaExpressionOperatorIsNotDistinct*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotDistinctClass" c:type="VdaExpressionOperatorIsNotDistinctClass" glib:is-gtype-struct-for="ExpressionOperatorIsNotDistinct">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsDistinctClass" c:type="VdaExpressionOperatorIsDistinctClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotDistinctPrivate" c:type="VdaExpressionOperatorIsNotDistinctPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsDistinctFrom" c:type="VdaExpressionOperatorIsDistinctFrom" c:symbol-prefix="expression_operator_is_distinct_from" glib:type-name="VdaExpressionOperatorIsDistinctFrom" glib:get-type="vda_expression_operator_is_distinct_from_get_type" glib:type-struct="ExpressionOperatorIsDistinctFromClass" parent="Vda.ExpressionOperatorIsDistinct">
		<implements name="Vda.SqlExpressionOperatorIsDistinctFrom"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsDistinct" c:type="VdaExpressionOperatorIsDistinct"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsDistinctFromPrivate" c:type="VdaExpressionOperatorIsDistinctFromPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_distinct_from_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsDistinctFrom" c:type="VdaExpressionOperatorIsDistinctFrom*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsDistinctFromClass" c:type="VdaExpressionOperatorIsDistinctFromClass" glib:is-gtype-struct-for="ExpressionOperatorIsDistinctFrom">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsDistinctClass" c:type="VdaExpressionOperatorIsDistinctClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsDistinctFromPrivate" c:type="VdaExpressionOperatorIsDistinctFromPrivate" disguised="1"/>
	<class name="ExpressionOperatorIsNotDistinctFrom" c:type="VdaExpressionOperatorIsNotDistinctFrom" c:symbol-prefix="expression_operator_is_not_distinct_from" glib:type-name="VdaExpressionOperatorIsNotDistinctFrom" glib:get-type="vda_expression_operator_is_not_distinct_from_get_type" glib:type-struct="ExpressionOperatorIsNotDistinctFromClass" parent="Vda.ExpressionOperatorIsNotDistinct">
		<implements name="Vda.SqlExpressionOperatorIsNotDistinctFrom"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNotDistinct" c:type="VdaExpressionOperatorIsNotDistinct"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorIsNotDistinctFromPrivate" c:type="VdaExpressionOperatorIsNotDistinctFromPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_is_not_distinct_from_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorIsNotDistinctFrom" c:type="VdaExpressionOperatorIsNotDistinctFrom*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorIsNotDistinctFromClass" c:type="VdaExpressionOperatorIsNotDistinctFromClass" glib:is-gtype-struct-for="ExpressionOperatorIsNotDistinctFrom">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorIsNotDistinctClass" c:type="VdaExpressionOperatorIsNotDistinctClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorIsNotDistinctFromPrivate" c:type="VdaExpressionOperatorIsNotDistinctFromPrivate" disguised="1"/>
	<class name="ExpressionOperatorThreeterm" c:type="VdaExpressionOperatorThreeterm" c:symbol-prefix="expression_operator_threeterm" glib:type-name="VdaExpressionOperatorThreeterm" glib:get-type="vda_expression_operator_threeterm_get_type" glib:type-struct="ExpressionOperatorThreetermClass" parent="Vda.ExpressionOperator">
		<implements name="Vda.SqlExpressionOperatorThreeterm"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperator" c:type="VdaExpressionOperator"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorThreetermPrivate" c:type="VdaExpressionOperatorThreetermPrivate*"/>
		</field>
		<field name="_operator_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<field name="_operator2_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_threeterm_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorThreeterm" c:type="VdaExpressionOperatorThreeterm*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorThreetermClass" c:type="VdaExpressionOperatorThreetermClass" glib:is-gtype-struct-for="ExpressionOperatorThreeterm">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorClass" c:type="VdaExpressionOperatorClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorThreetermPrivate" c:type="VdaExpressionOperatorThreetermPrivate" disguised="1"/>
	<class name="ExpressionOperatorBetween" c:type="VdaExpressionOperatorBetween" c:symbol-prefix="expression_operator_between" glib:type-name="VdaExpressionOperatorBetween" glib:get-type="vda_expression_operator_between_get_type" glib:type-struct="ExpressionOperatorBetweenClass" parent="Vda.ExpressionOperatorThreeterm">
		<implements name="Vda.SqlExpressionOperatorBetween"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorThreeterm" c:type="VdaExpressionOperatorThreeterm"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorBetweenPrivate" c:type="VdaExpressionOperatorBetweenPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_between_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorBetween" c:type="VdaExpressionOperatorBetween*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorBetweenClass" c:type="VdaExpressionOperatorBetweenClass" glib:is-gtype-struct-for="ExpressionOperatorBetween">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorThreetermClass" c:type="VdaExpressionOperatorThreetermClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorBetweenPrivate" c:type="VdaExpressionOperatorBetweenPrivate" disguised="1"/>
	<class name="ExpressionOperatorBetweenAnd" c:type="VdaExpressionOperatorBetweenAnd" c:symbol-prefix="expression_operator_between_and" glib:type-name="VdaExpressionOperatorBetweenAnd" glib:get-type="vda_expression_operator_between_and_get_type" glib:type-struct="ExpressionOperatorBetweenAndClass" parent="Vda.ExpressionOperatorBetween">
		<implements name="Vda.SqlExpressionOperatorBetweenAnd"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetween" c:type="VdaExpressionOperatorBetween"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorBetweenAndPrivate" c:type="VdaExpressionOperatorBetweenAndPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_between_and_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorBetweenAnd" c:type="VdaExpressionOperatorBetweenAnd*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorBetweenAndClass" c:type="VdaExpressionOperatorBetweenAndClass" glib:is-gtype-struct-for="ExpressionOperatorBetweenAnd">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenClass" c:type="VdaExpressionOperatorBetweenClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorBetweenAndPrivate" c:type="VdaExpressionOperatorBetweenAndPrivate" disguised="1"/>
	<class name="ExpressionOperatorNotBetween" c:type="VdaExpressionOperatorNotBetween" c:symbol-prefix="expression_operator_not_between" glib:type-name="VdaExpressionOperatorNotBetween" glib:get-type="vda_expression_operator_not_between_get_type" glib:type-struct="ExpressionOperatorNotBetweenClass" parent="Vda.ExpressionOperatorBetween">
		<implements name="Vda.SqlExpressionOperatorNotBetween"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetween" c:type="VdaExpressionOperatorBetween"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotBetweenPrivate" c:type="VdaExpressionOperatorNotBetweenPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_between_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotBetween" c:type="VdaExpressionOperatorNotBetween*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotBetweenClass" c:type="VdaExpressionOperatorNotBetweenClass" glib:is-gtype-struct-for="ExpressionOperatorNotBetween">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenClass" c:type="VdaExpressionOperatorBetweenClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotBetweenPrivate" c:type="VdaExpressionOperatorNotBetweenPrivate" disguised="1"/>
	<class name="ExpressionOperatorNotBetweenAnd" c:type="VdaExpressionOperatorNotBetweenAnd" c:symbol-prefix="expression_operator_not_between_and" glib:type-name="VdaExpressionOperatorNotBetweenAnd" glib:get-type="vda_expression_operator_not_between_and_get_type" glib:type-struct="ExpressionOperatorNotBetweenAndClass" parent="Vda.ExpressionOperatorNotBetween">
		<implements name="Vda.SqlExpressionOperatorNotBetweenAnd"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorNotBetween" c:type="VdaExpressionOperatorNotBetween"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotBetweenAndPrivate" c:type="VdaExpressionOperatorNotBetweenAndPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_between_and_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotBetweenAnd" c:type="VdaExpressionOperatorNotBetweenAnd*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotBetweenAndClass" c:type="VdaExpressionOperatorNotBetweenAndClass" glib:is-gtype-struct-for="ExpressionOperatorNotBetweenAnd">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorNotBetweenClass" c:type="VdaExpressionOperatorNotBetweenClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotBetweenAndPrivate" c:type="VdaExpressionOperatorNotBetweenAndPrivate" disguised="1"/>
	<class name="ExpressionOperatorBetweenSymmetric" c:type="VdaExpressionOperatorBetweenSymmetric" c:symbol-prefix="expression_operator_between_symmetric" glib:type-name="VdaExpressionOperatorBetweenSymmetric" glib:get-type="vda_expression_operator_between_symmetric_get_type" glib:type-struct="ExpressionOperatorBetweenSymmetricClass" parent="Vda.ExpressionOperatorBetween">
		<implements name="Vda.SqlExpressionOperatorBetweenSymmetric"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetween" c:type="VdaExpressionOperatorBetween"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorBetweenSymmetricPrivate" c:type="VdaExpressionOperatorBetweenSymmetricPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_between_symmetric_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorBetweenSymmetric" c:type="VdaExpressionOperatorBetweenSymmetric*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorBetweenSymmetricClass" c:type="VdaExpressionOperatorBetweenSymmetricClass" glib:is-gtype-struct-for="ExpressionOperatorBetweenSymmetric">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenClass" c:type="VdaExpressionOperatorBetweenClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorBetweenSymmetricPrivate" c:type="VdaExpressionOperatorBetweenSymmetricPrivate" disguised="1"/>
	<class name="ExpressionOperatorBetweenSymmetricAnd" c:type="VdaExpressionOperatorBetweenSymmetricAnd" c:symbol-prefix="expression_operator_between_symmetric_and" glib:type-name="VdaExpressionOperatorBetweenSymmetricAnd" glib:get-type="vda_expression_operator_between_symmetric_and_get_type" glib:type-struct="ExpressionOperatorBetweenSymmetricAndClass" parent="Vda.ExpressionOperatorBetweenSymmetric">
		<implements name="Vda.SqlExpressionOperatorBetweenSymmetricAnd"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenSymmetric" c:type="VdaExpressionOperatorBetweenSymmetric"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorBetweenSymmetricAndPrivate" c:type="VdaExpressionOperatorBetweenSymmetricAndPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_between_symmetric_and_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorBetweenSymmetricAnd" c:type="VdaExpressionOperatorBetweenSymmetricAnd*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorBetweenSymmetricAndClass" c:type="VdaExpressionOperatorBetweenSymmetricAndClass" glib:is-gtype-struct-for="ExpressionOperatorBetweenSymmetricAnd">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenSymmetricClass" c:type="VdaExpressionOperatorBetweenSymmetricClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorBetweenSymmetricAndPrivate" c:type="VdaExpressionOperatorBetweenSymmetricAndPrivate" disguised="1"/>
	<class name="ExpressionOperatorNotBetweenSymmetric" c:type="VdaExpressionOperatorNotBetweenSymmetric" c:symbol-prefix="expression_operator_not_between_symmetric" glib:type-name="VdaExpressionOperatorNotBetweenSymmetric" glib:get-type="vda_expression_operator_not_between_symmetric_get_type" glib:type-struct="ExpressionOperatorNotBetweenSymmetricClass" parent="Vda.ExpressionOperatorBetweenSymmetric">
		<implements name="Vda.SqlExpressionOperatorNotBetweenSymmetric"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenSymmetric" c:type="VdaExpressionOperatorBetweenSymmetric"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotBetweenSymmetricPrivate" c:type="VdaExpressionOperatorNotBetweenSymmetricPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_between_symmetric_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotBetweenSymmetric" c:type="VdaExpressionOperatorNotBetweenSymmetric*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotBetweenSymmetricClass" c:type="VdaExpressionOperatorNotBetweenSymmetricClass" glib:is-gtype-struct-for="ExpressionOperatorNotBetweenSymmetric">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorBetweenSymmetricClass" c:type="VdaExpressionOperatorBetweenSymmetricClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotBetweenSymmetricPrivate" c:type="VdaExpressionOperatorNotBetweenSymmetricPrivate" disguised="1"/>
	<class name="ExpressionOperatorNotBetweenSymmetricAnd" c:type="VdaExpressionOperatorNotBetweenSymmetricAnd" c:symbol-prefix="expression_operator_not_between_symmetric_and" glib:type-name="VdaExpressionOperatorNotBetweenSymmetricAnd" glib:get-type="vda_expression_operator_not_between_symmetric_and_get_type" glib:type-struct="ExpressionOperatorNotBetweenSymmetricAndClass" parent="Vda.ExpressionOperatorNotBetweenSymmetric">
		<implements name="Vda.SqlExpressionOperatorNotBetweenSymmetricAnd"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionOperatorNotBetweenSymmetric" c:type="VdaExpressionOperatorNotBetweenSymmetric"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionOperatorNotBetweenSymmetricAndPrivate" c:type="VdaExpressionOperatorNotBetweenSymmetricAndPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_operator_not_between_symmetric_and_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionOperatorNotBetweenSymmetricAnd" c:type="VdaExpressionOperatorNotBetweenSymmetricAnd*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionOperatorNotBetweenSymmetricAndClass" c:type="VdaExpressionOperatorNotBetweenSymmetricAndClass" glib:is-gtype-struct-for="ExpressionOperatorNotBetweenSymmetricAnd">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionOperatorNotBetweenSymmetricClass" c:type="VdaExpressionOperatorNotBetweenSymmetricClass"/>
		</field>
	</record>
	<record name="ExpressionOperatorNotBetweenSymmetricAndPrivate" c:type="VdaExpressionOperatorNotBetweenSymmetricAndPrivate" disguised="1"/>
	<class name="ExpressionValue" c:type="VdaExpressionValue" c:symbol-prefix="expression_value" glib:type-name="VdaExpressionValue" glib:get-type="vda_expression_value_get_type" glib:type-struct="ExpressionValueClass" parent="Vda.Expression">
		<implements name="Vda.SqlExpressionValue"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Expression" c:type="VdaExpression"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionValuePrivate" c:type="VdaExpressionValuePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_value_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionValue" c:type="VdaExpressionValue*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionValueClass" c:type="VdaExpressionValueClass" glib:is-gtype-struct-for="ExpressionValue">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionClass" c:type="VdaExpressionClass"/>
		</field>
	</record>
	<record name="ExpressionValuePrivate" c:type="VdaExpressionValuePrivate" disguised="1"/>
	<class name="ExpressionValueParameter" c:type="VdaExpressionValueParameter" c:symbol-prefix="expression_value_parameter" glib:type-name="VdaExpressionValueParameter" glib:get-type="vda_expression_value_parameter_get_type" glib:type-struct="ExpressionValueParameterClass" parent="Vda.ExpressionValue">
		<implements name="Vda.SqlExpressionValueParameter"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ExpressionValue" c:type="VdaExpressionValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ExpressionValueParameterPrivate" c:type="VdaExpressionValueParameterPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_expression_value_parameter_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ExpressionValueParameter" c:type="VdaExpressionValueParameter*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ExpressionValueParameterClass" c:type="VdaExpressionValueParameterClass" glib:is-gtype-struct-for="ExpressionValueParameter">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ExpressionValueClass" c:type="VdaExpressionValueClass"/>
		</field>
	</record>
	<record name="ExpressionValueParameterPrivate" c:type="VdaExpressionValueParameterPrivate" disguised="1"/>
	<class name="HashList" c:type="VdaHashList" c:symbol-prefix="hash_list" glib:type-name="VdaHashList" glib:get-type="vda_hash_list_get_type" glib:type-struct="HashListClass" parent="Gee.ArrayList">
		<implements name="Gio.ListModel"/>
		<implements name="Vda.HashModel"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gee.ArrayList" c:type="GeeArrayList"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="HashListPrivate" c:type="VdaHashListPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_hash_list_new">
			<return-value transfer-ownership="full">
				<type name="Vda.HashList" c:type="VdaHashList*"/>
			</return-value>
		</constructor>
	</class>
	<record name="HashListClass" c:type="VdaHashListClass" glib:is-gtype-struct-for="HashList">
		<field name="parent_class" readable="0" private="1">
			<type name="Gee.ArrayListClass" c:type="GeeArrayListClass"/>
		</field>
	</record>
	<record name="HashListPrivate" c:type="VdaHashListPrivate" disguised="1"/>
	<class name="InvalidQuery" c:type="VdaInvalidQuery" c:symbol-prefix="invalid_query" glib:type-name="VdaInvalidQuery" glib:get-type="vda_invalid_query_get_type" glib:type-struct="InvalidQueryClass" parent="GObject.Object">
		<implements name="Vda.Query"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="InvalidQueryPrivate" c:type="VdaInvalidQueryPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_invalid_query_new">
			<return-value transfer-ownership="full">
				<type name="Vda.InvalidQuery" c:type="VdaInvalidQuery*"/>
			</return-value>
			<parameters>
				<parameter name="msg" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="message" writable="1" construct="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_message" c:identifier="vda_invalid_query_get_message">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.InvalidQuery" c:type="VdaInvalidQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_message" c:identifier="vda_invalid_query_set_message">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.InvalidQuery" c:type="VdaInvalidQuery*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="InvalidQueryClass" c:type="VdaInvalidQueryClass" glib:is-gtype-struct-for="InvalidQuery">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="InvalidQueryPrivate" c:type="VdaInvalidQueryPrivate" disguised="1"/>
	<class name="InvalidPreparedQuery" c:type="VdaInvalidPreparedQuery" c:symbol-prefix="invalid_prepared_query" glib:type-name="VdaInvalidPreparedQuery" glib:get-type="vda_invalid_prepared_query_get_type" glib:type-struct="InvalidPreparedQueryClass" parent="Vda.InvalidQuery">
		<implements name="Vda.PreparedQuery"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.InvalidQuery" c:type="VdaInvalidQuery"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="InvalidPreparedQueryPrivate" c:type="VdaInvalidPreparedQueryPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_invalid_prepared_query_new">
			<return-value transfer-ownership="full">
				<type name="Vda.InvalidPreparedQuery" c:type="VdaInvalidPreparedQuery*"/>
			</return-value>
			<parameters>
				<parameter name="msg" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
	</class>
	<record name="InvalidPreparedQueryClass" c:type="VdaInvalidPreparedQueryClass" glib:is-gtype-struct-for="InvalidPreparedQuery">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.InvalidQueryClass" c:type="VdaInvalidQueryClass"/>
		</field>
	</record>
	<record name="InvalidPreparedQueryPrivate" c:type="VdaInvalidPreparedQueryPrivate" disguised="1"/>
	<class name="InvalidResult" c:type="VdaInvalidResult" c:symbol-prefix="invalid_result" glib:type-name="VdaInvalidResult" glib:get-type="vda_invalid_result_get_type" glib:type-struct="InvalidResultClass" parent="GObject.Object">
		<implements name="Vda.Result"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="InvalidResultPrivate" c:type="VdaInvalidResultPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_invalid_result_new">
			<return-value transfer-ownership="full">
				<type name="Vda.InvalidResult" c:type="VdaInvalidResult*"/>
			</return-value>
			<parameters>
				<parameter name="msg" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</constructor>
		<property name="message" writable="1" construct="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_message" c:identifier="vda_invalid_result_get_message">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.InvalidResult" c:type="VdaInvalidResult*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_message" c:identifier="vda_invalid_result_set_message">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.InvalidResult" c:type="VdaInvalidResult*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="InvalidResultClass" c:type="VdaInvalidResultClass" glib:is-gtype-struct-for="InvalidResult">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="InvalidResultPrivate" c:type="VdaInvalidResultPrivate" disguised="1"/>
	<class name="Parameters" c:type="VdaParameters" c:symbol-prefix="parameters" glib:type-name="VdaParameters" glib:get-type="vda_parameters_get_type" glib:type-struct="ParametersClass" parent="Gee.HashMap">
		<implements name="Vda.SqlParameters"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Gee.HashMap" c:type="GeeHashMap"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ParametersPrivate" c:type="VdaParametersPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_parameters_new">
			<return-value transfer-ownership="full">
				<type name="Vda.Parameters" c:type="VdaParameters*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ParametersClass" c:type="VdaParametersClass" glib:is-gtype-struct-for="Parameters">
		<field name="parent_class" readable="0" private="1">
			<type name="Gee.HashMapClass" c:type="GeeHashMapClass"/>
		</field>
	</record>
	<record name="ParametersPrivate" c:type="VdaParametersPrivate" disguised="1"/>
	<class name="Parser" c:type="VdaParser" c:symbol-prefix="parser" glib:type-name="VdaParser" glib:get-type="vda_parser_get_type" glib:type-struct="ParserClass" parent="GObject.Object">
		<implements name="Vda.SqlParser"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ParserPrivate" c:type="VdaParserPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_parser_new">
			<return-value transfer-ownership="full">
				<type name="Vda.Parser" c:type="VdaParser*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ParserClass" c:type="VdaParserClass" glib:is-gtype-struct-for="Parser">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="ParserPrivate" c:type="VdaParserPrivate" disguised="1"/>
	<class name="TableReference" c:type="VdaTableReference" c:symbol-prefix="table_reference" glib:type-name="VdaTableReference" glib:get-type="vda_table_reference_get_type" glib:type-struct="TableReferenceClass" parent="GObject.Object">
		<implements name="Vda.SqlTableReference"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="TableReferencePrivate" c:type="VdaTableReferencePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_table_reference_new">
			<return-value transfer-ownership="full">
				<type name="Vda.TableReference" c:type="VdaTableReference*"/>
			</return-value>
		</constructor>
	</class>
	<record name="TableReferenceClass" c:type="VdaTableReferenceClass" glib:is-gtype-struct-for="TableReference">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="TableReferencePrivate" c:type="VdaTableReferencePrivate" disguised="1"/>
	<class name="Value" c:type="VdaValue" c:symbol-prefix="value" glib:type-name="VdaValue" glib:get-type="vda_value_get_type" glib:type-struct="ValueClass" parent="GObject.Object">
		<implements name="Vda.Stringifiable"/>
		<implements name="Vda.SqlValue"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValuePrivate" c:type="VdaValuePrivate*"/>
		</field>
		<field name="_name">
			<type name="utf8" c:type="gchar*"/>
		</field>
		<field name="_val">
			<type name="GObject.Value" c:type="GValue"/>
		</field>
		<method name="force_value" c:identifier="vda_value_force_value">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="force_value" invoker="force_value">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="from_value" c:identifier="vda_value_from_value">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="from_value" invoker="from_value">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="cast" c:identifier="vda_value_cast">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="cast" invoker="cast">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="is_compatible" c:identifier="vda_value_is_compatible">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="is_compatible" invoker="is_compatible">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse" c:identifier="vda_value_parse">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="to_gvalue" c:identifier="vda_value_to_gvalue">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="to_gvalue" invoker="to_gvalue">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="to_string" c:identifier="vda_value_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_string_quoted" c:identifier="vda_value_to_string_quoted">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_string_quoted" invoker="to_string_quoted">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_sql_expression" c:identifier="vda_value_to_sql_expression">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_sql_expression" invoker="to_sql_expression">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Value" c:type="VdaValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="vda_value_new">
			<return-value transfer-ownership="full">
				<type name="Vda.Value" c:type="VdaValue*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueClass" c:type="VdaValueClass" glib:is-gtype-struct-for="Value">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
		<field name="force_value">
			<callback name="force_value" c:type="force_value">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="GObject.Value" c:type="GValue"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="from_value">
			<callback name="from_value" c:type="from_value">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="GObject.Value" c:type="GValue"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="cast">
			<callback name="cast" c:type="cast">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
					<parameter name="type" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="is_compatible">
			<callback name="is_compatible" c:type="is_compatible">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
					<parameter name="type" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_gvalue">
			<callback name="to_gvalue" c:type="to_gvalue">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
					<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
						<type name="GObject.Value" c:type="GValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_string_quoted">
			<callback name="to_string_quoted" c:type="to_string_quoted">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_sql_expression">
			<callback name="to_sql_expression" c:type="to_sql_expression">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Value" c:type="VdaValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ValuePrivate" c:type="VdaValuePrivate" disguised="1"/>
	<class name="ValueNull" c:type="VdaValueNull" c:symbol-prefix="value_null" glib:type-name="VdaValueNull" glib:get-type="vda_value_null_get_type" glib:type-struct="ValueNullClass" parent="Vda.Value">
		<implements name="Vda.SqlValueNull"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueNullPrivate" c:type="VdaValueNullPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_null_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueNull" c:type="VdaValueNull*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueNullClass" c:type="VdaValueNullClass" glib:is-gtype-struct-for="ValueNull">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueNullPrivate" c:type="VdaValueNullPrivate" disguised="1"/>
	<class name="ValueString" c:type="VdaValueString" c:symbol-prefix="value_string" glib:type-name="VdaValueString" glib:get-type="vda_value_string_get_type" glib:type-struct="ValueStringClass" parent="Vda.Value">
		<implements name="Vda.SqlValueString"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueStringPrivate" c:type="VdaValueStringPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_string_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueString" c:type="VdaValueString*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueStringClass" c:type="VdaValueStringClass" glib:is-gtype-struct-for="ValueString">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueStringPrivate" c:type="VdaValueStringPrivate" disguised="1"/>
	<class name="ValueXml" c:type="VdaValueXml" c:symbol-prefix="value_xml" glib:type-name="VdaValueXml" glib:get-type="vda_value_xml_get_type" glib:type-struct="ValueXmlClass" parent="Vda.ValueString">
		<implements name="Vda.SqlValueXml"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueString" c:type="VdaValueString"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueXmlPrivate" c:type="VdaValueXmlPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_xml_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueXml" c:type="VdaValueXml*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueXmlClass" c:type="VdaValueXmlClass" glib:is-gtype-struct-for="ValueXml">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueStringClass" c:type="VdaValueStringClass"/>
		</field>
	</record>
	<record name="ValueXmlPrivate" c:type="VdaValueXmlPrivate" disguised="1"/>
	<class name="ValueJson" c:type="VdaValueJson" c:symbol-prefix="value_json" glib:type-name="VdaValueJson" glib:get-type="vda_value_json_get_type" glib:type-struct="ValueJsonClass" parent="Vda.ValueString">
		<implements name="Vda.SqlValueJson"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueString" c:type="VdaValueString"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueJsonPrivate" c:type="VdaValueJsonPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_json_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueJson" c:type="VdaValueJson*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueJsonClass" c:type="VdaValueJsonClass" glib:is-gtype-struct-for="ValueJson">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueStringClass" c:type="VdaValueStringClass"/>
		</field>
	</record>
	<record name="ValueJsonPrivate" c:type="VdaValueJsonPrivate" disguised="1"/>
	<class name="ValueText" c:type="VdaValueText" c:symbol-prefix="value_text" glib:type-name="VdaValueText" glib:get-type="vda_value_text_get_type" glib:type-struct="ValueTextClass" parent="Vda.ValueString">
		<implements name="Vda.SqlValueText"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueString" c:type="VdaValueString"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueTextPrivate" c:type="VdaValueTextPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_text_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueText" c:type="VdaValueText*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueTextClass" c:type="VdaValueTextClass" glib:is-gtype-struct-for="ValueText">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueStringClass" c:type="VdaValueStringClass"/>
		</field>
	</record>
	<record name="ValueTextPrivate" c:type="VdaValueTextPrivate" disguised="1"/>
	<class name="ValueName" c:type="VdaValueName" c:symbol-prefix="value_name" glib:type-name="VdaValueName" glib:get-type="vda_value_name_get_type" glib:type-struct="ValueNameClass" parent="Vda.ValueString">
		<implements name="Vda.SqlValueName"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueString" c:type="VdaValueString"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueNamePrivate" c:type="VdaValueNamePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_name_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueName" c:type="VdaValueName*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueNameClass" c:type="VdaValueNameClass" glib:is-gtype-struct-for="ValueName">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueStringClass" c:type="VdaValueStringClass"/>
		</field>
	</record>
	<record name="ValueNamePrivate" c:type="VdaValueNamePrivate" disguised="1"/>
	<class name="ValueBool" c:type="VdaValueBool" c:symbol-prefix="value_bool" glib:type-name="VdaValueBool" glib:get-type="vda_value_bool_get_type" glib:type-struct="ValueBoolClass" parent="Vda.Value">
		<implements name="Vda.SqlValueBool"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueBoolPrivate" c:type="VdaValueBoolPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_bool_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueBool" c:type="VdaValueBool*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueBoolClass" c:type="VdaValueBoolClass" glib:is-gtype-struct-for="ValueBool">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueBoolPrivate" c:type="VdaValueBoolPrivate" disguised="1"/>
	<class name="ValueBit" c:type="VdaValueBit" c:symbol-prefix="value_bit" glib:type-name="VdaValueBit" glib:get-type="vda_value_bit_get_type" glib:type-struct="ValueBitClass" parent="Vda.ValueBool">
		<implements name="Vda.SqlValueBit"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueBool" c:type="VdaValueBool"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueBitPrivate" c:type="VdaValueBitPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_bit_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueBit" c:type="VdaValueBit*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueBitClass" c:type="VdaValueBitClass" glib:is-gtype-struct-for="ValueBit">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueBoolClass" c:type="VdaValueBoolClass"/>
		</field>
	</record>
	<record name="ValueBitPrivate" c:type="VdaValueBitPrivate" disguised="1"/>
	<class name="ValueInteger" c:type="VdaValueInteger" c:symbol-prefix="value_integer" glib:type-name="VdaValueInteger" glib:get-type="vda_value_integer_get_type" glib:type-struct="ValueIntegerClass" parent="Vda.Value">
		<implements name="Vda.SqlValue"/>
		<implements name="Vda.SqlValueInteger"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueIntegerPrivate" c:type="VdaValueIntegerPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_integer_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueInteger" c:type="VdaValueInteger*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueIntegerClass" c:type="VdaValueIntegerClass" glib:is-gtype-struct-for="ValueInteger">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueIntegerPrivate" c:type="VdaValueIntegerPrivate" disguised="1"/>
	<class name="ValueByte" c:type="VdaValueByte" c:symbol-prefix="value_byte" glib:type-name="VdaValueByte" glib:get-type="vda_value_byte_get_type" glib:type-struct="ValueByteClass" parent="Vda.ValueInteger">
		<implements name="Vda.SqlValueByte"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueInteger" c:type="VdaValueInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueBytePrivate" c:type="VdaValueBytePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_byte_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueByte" c:type="VdaValueByte*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueByteClass" c:type="VdaValueByteClass" glib:is-gtype-struct-for="ValueByte">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueIntegerClass" c:type="VdaValueIntegerClass"/>
		</field>
	</record>
	<record name="ValueBytePrivate" c:type="VdaValueBytePrivate" disguised="1"/>
	<class name="ValueInt2" c:type="VdaValueInt2" c:symbol-prefix="value_int2" glib:type-name="VdaValueInt2" glib:get-type="vda_value_int2_get_type" glib:type-struct="ValueInt2Class" parent="Vda.ValueInteger">
		<implements name="Vda.SqlValueInt2"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueInteger" c:type="VdaValueInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueInt2Private" c:type="VdaValueInt2Private*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_int2_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueInt2" c:type="VdaValueInt2*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueInt2Class" c:type="VdaValueInt2Class" glib:is-gtype-struct-for="ValueInt2">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueIntegerClass" c:type="VdaValueIntegerClass"/>
		</field>
	</record>
	<record name="ValueInt2Private" c:type="VdaValueInt2Private" disguised="1"/>
	<class name="ValueInt4" c:type="VdaValueInt4" c:symbol-prefix="value_int4" glib:type-name="VdaValueInt4" glib:get-type="vda_value_int4_get_type" glib:type-struct="ValueInt4Class" parent="Vda.ValueInteger">
		<implements name="Vda.SqlValueInt4"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueInteger" c:type="VdaValueInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueInt4Private" c:type="VdaValueInt4Private*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_int4_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueInt4" c:type="VdaValueInt4*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueInt4Class" c:type="VdaValueInt4Class" glib:is-gtype-struct-for="ValueInt4">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueIntegerClass" c:type="VdaValueIntegerClass"/>
		</field>
	</record>
	<record name="ValueInt4Private" c:type="VdaValueInt4Private" disguised="1"/>
	<class name="ValueInt8" c:type="VdaValueInt8" c:symbol-prefix="value_int8" glib:type-name="VdaValueInt8" glib:get-type="vda_value_int8_get_type" glib:type-struct="ValueInt8Class" parent="Vda.ValueInteger">
		<implements name="Vda.SqlValueInt8"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueInteger" c:type="VdaValueInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueInt8Private" c:type="VdaValueInt8Private*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_int8_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueInt8" c:type="VdaValueInt8*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueInt8Class" c:type="VdaValueInt8Class" glib:is-gtype-struct-for="ValueInt8">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueIntegerClass" c:type="VdaValueIntegerClass"/>
		</field>
	</record>
	<record name="ValueInt8Private" c:type="VdaValueInt8Private" disguised="1"/>
	<class name="ValueUnsignedInteger" c:type="VdaValueUnsignedInteger" c:symbol-prefix="value_unsigned_integer" glib:type-name="VdaValueUnsignedInteger" glib:get-type="vda_value_unsigned_integer_get_type" glib:type-struct="ValueUnsignedIntegerClass" parent="Vda.Value">
		<implements name="Vda.SqlValue"/>
		<implements name="Vda.SqlValueUnsignedInteger"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueUnsignedIntegerPrivate" c:type="VdaValueUnsignedIntegerPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_unsigned_integer_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueUnsignedInteger" c:type="VdaValueUnsignedInteger*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueUnsignedIntegerClass" c:type="VdaValueUnsignedIntegerClass" glib:is-gtype-struct-for="ValueUnsignedInteger">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueUnsignedIntegerPrivate" c:type="VdaValueUnsignedIntegerPrivate" disguised="1"/>
	<class name="ValueUnsignedByte" c:type="VdaValueUnsignedByte" c:symbol-prefix="value_unsigned_byte" glib:type-name="VdaValueUnsignedByte" glib:get-type="vda_value_unsigned_byte_get_type" glib:type-struct="ValueUnsignedByteClass" parent="Vda.ValueUnsignedInteger">
		<implements name="Vda.SqlValueUnsignedByte"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueUnsignedInteger" c:type="VdaValueUnsignedInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueUnsignedBytePrivate" c:type="VdaValueUnsignedBytePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_unsigned_byte_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueUnsignedByte" c:type="VdaValueUnsignedByte*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueUnsignedByteClass" c:type="VdaValueUnsignedByteClass" glib:is-gtype-struct-for="ValueUnsignedByte">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueUnsignedIntegerClass" c:type="VdaValueUnsignedIntegerClass"/>
		</field>
	</record>
	<record name="ValueUnsignedBytePrivate" c:type="VdaValueUnsignedBytePrivate" disguised="1"/>
	<class name="ValueUnsignedInt2" c:type="VdaValueUnsignedInt2" c:symbol-prefix="value_unsigned_int2" glib:type-name="VdaValueUnsignedInt2" glib:get-type="vda_value_unsigned_int2_get_type" glib:type-struct="ValueUnsignedInt2Class" parent="Vda.ValueUnsignedInteger">
		<implements name="Vda.SqlValueUnsignedInt2"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueUnsignedInteger" c:type="VdaValueUnsignedInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueUnsignedInt2Private" c:type="VdaValueUnsignedInt2Private*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_unsigned_int2_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueUnsignedInt2" c:type="VdaValueUnsignedInt2*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueUnsignedInt2Class" c:type="VdaValueUnsignedInt2Class" glib:is-gtype-struct-for="ValueUnsignedInt2">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueUnsignedIntegerClass" c:type="VdaValueUnsignedIntegerClass"/>
		</field>
	</record>
	<record name="ValueUnsignedInt2Private" c:type="VdaValueUnsignedInt2Private" disguised="1"/>
	<class name="ValueUnsignedInt4" c:type="VdaValueUnsignedInt4" c:symbol-prefix="value_unsigned_int4" glib:type-name="VdaValueUnsignedInt4" glib:get-type="vda_value_unsigned_int4_get_type" glib:type-struct="ValueUnsignedInt4Class" parent="Vda.ValueUnsignedInteger">
		<implements name="Vda.SqlValueUnsignedInt4"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueUnsignedInteger" c:type="VdaValueUnsignedInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueUnsignedInt4Private" c:type="VdaValueUnsignedInt4Private*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_unsigned_int4_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueUnsignedInt4" c:type="VdaValueUnsignedInt4*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueUnsignedInt4Class" c:type="VdaValueUnsignedInt4Class" glib:is-gtype-struct-for="ValueUnsignedInt4">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueUnsignedIntegerClass" c:type="VdaValueUnsignedIntegerClass"/>
		</field>
	</record>
	<record name="ValueUnsignedInt4Private" c:type="VdaValueUnsignedInt4Private" disguised="1"/>
	<class name="ValueUnsignedInt8" c:type="VdaValueUnsignedInt8" c:symbol-prefix="value_unsigned_int8" glib:type-name="VdaValueUnsignedInt8" glib:get-type="vda_value_unsigned_int8_get_type" glib:type-struct="ValueUnsignedInt8Class" parent="Vda.ValueUnsignedInteger">
		<implements name="Vda.SqlValueUnsignedInt8"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueUnsignedInteger" c:type="VdaValueUnsignedInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueUnsignedInt8Private" c:type="VdaValueUnsignedInt8Private*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_unsigned_int8_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueUnsignedInt8" c:type="VdaValueUnsignedInt8*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueUnsignedInt8Class" c:type="VdaValueUnsignedInt8Class" glib:is-gtype-struct-for="ValueUnsignedInt8">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueUnsignedIntegerClass" c:type="VdaValueUnsignedIntegerClass"/>
		</field>
	</record>
	<record name="ValueUnsignedInt8Private" c:type="VdaValueUnsignedInt8Private" disguised="1"/>
	<class name="ValueOid" c:type="VdaValueOid" c:symbol-prefix="value_oid" glib:type-name="VdaValueOid" glib:get-type="vda_value_oid_get_type" glib:type-struct="ValueOidClass" parent="Vda.ValueInteger">
		<implements name="Vda.SqlValueOid"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueInteger" c:type="VdaValueInteger"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueOidPrivate" c:type="VdaValueOidPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_oid_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueOid" c:type="VdaValueOid*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueOidClass" c:type="VdaValueOidClass" glib:is-gtype-struct-for="ValueOid">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueIntegerClass" c:type="VdaValueIntegerClass"/>
		</field>
	</record>
	<record name="ValueOidPrivate" c:type="VdaValueOidPrivate" disguised="1"/>
	<class name="ValueNumeric" c:type="VdaValueNumeric" c:symbol-prefix="value_numeric" glib:type-name="VdaValueNumeric" glib:get-type="vda_value_numeric_get_type" glib:type-struct="ValueNumericClass" parent="Vda.Value">
		<implements name="Vda.SqlValueNumeric"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueNumericPrivate" c:type="VdaValueNumericPrivate*"/>
		</field>
		<method name="format" c:identifier="vda_value_numeric_format">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueNumeric" c:type="VdaValueNumeric*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="format" invoker="format">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueNumeric" c:type="VdaValueNumeric*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="vda_value_numeric_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueNumeric" c:type="VdaValueNumeric*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueNumericClass" c:type="VdaValueNumericClass" glib:is-gtype-struct-for="ValueNumeric">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
		<field name="format">
			<callback name="format" c:type="format">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ValueNumeric" c:type="VdaValueNumeric*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ValueNumericPrivate" c:type="VdaValueNumericPrivate" disguised="1"/>
	<class name="ValueFloat" c:type="VdaValueFloat" c:symbol-prefix="value_float" glib:type-name="VdaValueFloat" glib:get-type="vda_value_float_get_type" glib:type-struct="ValueFloatClass" parent="Vda.ValueNumeric">
		<implements name="Vda.SqlValueFloat"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueNumeric" c:type="VdaValueNumeric"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueFloatPrivate" c:type="VdaValueFloatPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_float_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueFloat" c:type="VdaValueFloat*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueFloatClass" c:type="VdaValueFloatClass" glib:is-gtype-struct-for="ValueFloat">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueNumericClass" c:type="VdaValueNumericClass"/>
		</field>
	</record>
	<record name="ValueFloatPrivate" c:type="VdaValueFloatPrivate" disguised="1"/>
	<class name="ValueDouble" c:type="VdaValueDouble" c:symbol-prefix="value_double" glib:type-name="VdaValueDouble" glib:get-type="vda_value_double_get_type" glib:type-struct="ValueDoubleClass" parent="Vda.ValueNumeric">
		<implements name="Vda.SqlValueDouble"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueNumeric" c:type="VdaValueNumeric"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueDoublePrivate" c:type="VdaValueDoublePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_double_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueDouble" c:type="VdaValueDouble*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueDoubleClass" c:type="VdaValueDoubleClass" glib:is-gtype-struct-for="ValueDouble">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueNumericClass" c:type="VdaValueNumericClass"/>
		</field>
	</record>
	<record name="ValueDoublePrivate" c:type="VdaValueDoublePrivate" disguised="1"/>
	<class name="ValueMoney" c:type="VdaValueMoney" c:symbol-prefix="value_money" glib:type-name="VdaValueMoney" glib:get-type="vda_value_money_get_type" glib:type-struct="ValueMoneyClass" parent="Vda.ValueNumeric">
		<implements name="Vda.SqlValueMoney"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueNumeric" c:type="VdaValueNumeric"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueMoneyPrivate" c:type="VdaValueMoneyPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_money_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueMoney" c:type="VdaValueMoney*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueMoneyClass" c:type="VdaValueMoneyClass" glib:is-gtype-struct-for="ValueMoney">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueNumericClass" c:type="VdaValueNumericClass"/>
		</field>
	</record>
	<record name="ValueMoneyPrivate" c:type="VdaValueMoneyPrivate" disguised="1"/>
	<class name="ValueTimestamp" c:type="VdaValueTimestamp" c:symbol-prefix="value_timestamp" glib:type-name="VdaValueTimestamp" glib:get-type="vda_value_timestamp_get_type" glib:type-struct="ValueTimestampClass" parent="Vda.Value">
		<implements name="Vda.SqlValueTimestamp"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueTimestampPrivate" c:type="VdaValueTimestampPrivate*"/>
		</field>
		<field name="dt">
			<type name="GLib.DateTime" c:type="GDateTime*"/>
		</field>
		<method name="format_local" c:identifier="vda_value_timestamp_format_local">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_local" invoker="format_local">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_utc" c:identifier="vda_value_timestamp_format_utc">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_utc" invoker="format_utc">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_locale" c:identifier="vda_value_timestamp_format_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_locale" invoker="format_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<constructor name="new" c:identifier="vda_value_timestamp_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueTimestampClass" c:type="VdaValueTimestampClass" glib:is-gtype-struct-for="ValueTimestamp">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
		<field name="format_local">
			<callback name="format_local" c:type="format_local">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_utc">
			<callback name="format_utc" c:type="format_utc">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_locale">
			<callback name="format_locale" c:type="format_locale">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<record name="ValueTimestampPrivate" c:type="VdaValueTimestampPrivate" disguised="1"/>
	<class name="ValueTimestampNtz" c:type="VdaValueTimestampNtz" c:symbol-prefix="value_timestamp_ntz" glib:type-name="VdaValueTimestampNtz" glib:get-type="vda_value_timestamp_ntz_get_type" glib:type-struct="ValueTimestampNtzClass" parent="Vda.ValueTimestamp">
		<implements name="Vda.SqlValueTimestampNtz"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueTimestampNtzPrivate" c:type="VdaValueTimestampNtzPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_timestamp_ntz_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueTimestampNtz" c:type="VdaValueTimestampNtz*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueTimestampNtzClass" c:type="VdaValueTimestampNtzClass" glib:is-gtype-struct-for="ValueTimestampNtz">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueTimestampClass" c:type="VdaValueTimestampClass"/>
		</field>
	</record>
	<record name="ValueTimestampNtzPrivate" c:type="VdaValueTimestampNtzPrivate" disguised="1"/>
	<class name="ValueTime" c:type="VdaValueTime" c:symbol-prefix="value_time" glib:type-name="VdaValueTime" glib:get-type="vda_value_time_get_type" glib:type-struct="ValueTimeClass" parent="Vda.ValueTimestamp">
		<implements name="Vda.SqlValueTime"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueTimestamp" c:type="VdaValueTimestamp"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueTimePrivate" c:type="VdaValueTimePrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_time_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueTime" c:type="VdaValueTime*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueTimeClass" c:type="VdaValueTimeClass" glib:is-gtype-struct-for="ValueTime">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueTimestampClass" c:type="VdaValueTimestampClass"/>
		</field>
	</record>
	<record name="ValueTimePrivate" c:type="VdaValueTimePrivate" disguised="1"/>
	<class name="ValueTimeNtz" c:type="VdaValueTimeNtz" c:symbol-prefix="value_time_ntz" glib:type-name="VdaValueTimeNtz" glib:get-type="vda_value_time_ntz_get_type" glib:type-struct="ValueTimeNtzClass" parent="Vda.ValueTimestampNtz">
		<implements name="Vda.SqlValueTimeNtz"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.ValueTimestampNtz" c:type="VdaValueTimestampNtz"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueTimeNtzPrivate" c:type="VdaValueTimeNtzPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_time_ntz_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueTimeNtz" c:type="VdaValueTimeNtz*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueTimeNtzClass" c:type="VdaValueTimeNtzClass" glib:is-gtype-struct-for="ValueTimeNtz">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueTimestampNtzClass" c:type="VdaValueTimestampNtzClass"/>
		</field>
	</record>
	<record name="ValueTimeNtzPrivate" c:type="VdaValueTimeNtzPrivate" disguised="1"/>
	<class name="ValueDate" c:type="VdaValueDate" c:symbol-prefix="value_date" glib:type-name="VdaValueDate" glib:get-type="vda_value_date_get_type" glib:type-struct="ValueDateClass" parent="Vda.Value">
		<implements name="Vda.SqlValueDate"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueDatePrivate" c:type="VdaValueDatePrivate*"/>
		</field>
		<field name="d">
			<type name="GLib.Date" c:type="GDate"/>
		</field>
		<constructor name="new" c:identifier="vda_value_date_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueDate" c:type="VdaValueDate*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueDateClass" c:type="VdaValueDateClass" glib:is-gtype-struct-for="ValueDate">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueDatePrivate" c:type="VdaValueDatePrivate" disguised="1"/>
	<class name="ValueBinary" c:type="VdaValueBinary" c:symbol-prefix="value_binary" glib:type-name="VdaValueBinary" glib:get-type="vda_value_binary_get_type" glib:type-struct="ValueBinaryClass" parent="Vda.Value">
		<implements name="Vda.SqlValueBinary"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="Vda.Value" c:type="VdaValue"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueBinaryPrivate" c:type="VdaValueBinaryPrivate*"/>
		</field>
		<constructor name="with_data" c:identifier="vda_value_binary_new_with_data">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueBinary" c:type="VdaValueBinary*"/>
			</return-value>
			<parameters>
				<parameter name="d" transfer-ownership="none">
					<array length="1" c:type="guint8*">
						<type name="guint8" c:type="guint8"/>
					</array>
				</parameter>
				<parameter name="d_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="take" c:identifier="vda_value_binary_new_take">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueBinary" c:type="VdaValueBinary*"/>
			</return-value>
			<parameters>
				<parameter name="d" transfer-ownership="none">
					<array length="1" c:type="guint8*">
						<type name="guint8" c:type="guint8"/>
					</array>
				</parameter>
				<parameter name="d_length1" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</constructor>
		<constructor name="new" c:identifier="vda_value_binary_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueBinary" c:type="VdaValueBinary*"/>
			</return-value>
		</constructor>
	</class>
	<record name="ValueBinaryClass" c:type="VdaValueBinaryClass" glib:is-gtype-struct-for="ValueBinary">
		<field name="parent_class" readable="0" private="1">
			<type name="Vda.ValueClass" c:type="VdaValueClass"/>
		</field>
	</record>
	<record name="ValueBinaryPrivate" c:type="VdaValueBinaryPrivate" disguised="1"/>
	<class name="ValueMathExp" c:type="VdaValueMathExp" c:symbol-prefix="value_math_exp" glib:type-name="VdaValueMathExp" glib:get-type="vda_value_math_exp_get_type" glib:type-struct="ValueMathExpClass" parent="GObject.Object">
		<implements name="Vda.Stringifiable"/>
		<implements name="Vda.SqlValue"/>
		<implements name="Vda.SqlValueMathExp"/>
		<field name="parent_instance" readable="0" private="1">
			<type name="GObject.Object" c:type="GObject"/>
		</field>
		<field name="priv" readable="0" private="1">
			<type name="ValueMathExpPrivate" c:type="VdaValueMathExpPrivate*"/>
		</field>
		<constructor name="new" c:identifier="vda_value_math_exp_new">
			<return-value transfer-ownership="full">
				<type name="Vda.ValueMathExp" c:type="VdaValueMathExp*"/>
			</return-value>
		</constructor>
		<property name="parameters" writable="1">
			<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
		</property>
		<method name="get_parameters" c:identifier="vda_value_math_exp_get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueMathExp" c:type="VdaValueMathExp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<method name="set_parameters" c:identifier="vda_value_math_exp_set_parameters">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ValueMathExp" c:type="VdaValueMathExp*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</method>
	</class>
	<record name="ValueMathExpClass" c:type="VdaValueMathExpClass" glib:is-gtype-struct-for="ValueMathExp">
		<field name="parent_class" readable="0" private="1">
			<type name="GObject.ObjectClass" c:type="GObjectClass"/>
		</field>
	</record>
	<record name="ValueMathExpPrivate" c:type="VdaValueMathExpPrivate" disguised="1"/>
	<interface name="MetaObject" c:type="VdaMetaObject" c:symbol-prefix="meta_object" glib:type-name="VdaMetaObject" glib:get-type="vda_meta_object_get_type" glib:type-struct="MetaObjectIface">
		<prerequisite name="GObject.Object"/>
		<property name="connection" writable="1">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_connection" c:identifier="vda_meta_object_get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection" invoker="get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_connection" c:identifier="vda_meta_object_set_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_connection" invoker="set_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="MetaObjectIface" c:type="VdaMetaObjectIface" glib:is-gtype-struct-for="MetaObject">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_connection">
			<callback name="get_connection" c:type="get_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_connection">
			<callback name="set_connection" c:type="set_connection">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="MetaNamedObject" c:type="VdaMetaNamedObject" c:symbol-prefix="meta_named_object" glib:type-name="VdaMetaNamedObject" glib:get-type="vda_meta_named_object_get_type" glib:type-struct="MetaNamedObjectIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.MetaObject"/>
		<property name="name" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_meta_named_object_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaNamedObject" c:type="VdaMetaNamedObject*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaNamedObject" c:type="VdaMetaNamedObject*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_name" c:identifier="vda_meta_named_object_set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaNamedObject" c:type="VdaMetaNamedObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_name" invoker="set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.MetaNamedObject" c:type="VdaMetaNamedObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="MetaNamedObjectIface" c:type="VdaMetaNamedObjectIface" glib:is-gtype-struct-for="MetaNamedObject">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.MetaNamedObject" c:type="VdaMetaNamedObject*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_name">
			<callback name="set_name" c:type="set_name">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.MetaNamedObject" c:type="VdaMetaNamedObject*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="ColumnModel" c:type="VdaColumnModel" c:symbol-prefix="column_model" glib:type-name="VdaColumnModel" glib:get-type="vda_column_model_get_type" glib:type-struct="ColumnModelIface">
		<prerequisite name="GObject.Object"/>
		<property name="name">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_column_model_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="data-type">
			<type name="GType" c:type="GType"/>
		</property>
		<method name="get_data_type" c:identifier="vda_column_model_get_data_type">
			<return-value transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_data_type" invoker="get_data_type">
			<return-value transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="ColumnModelIface" c:type="VdaColumnModelIface" glib:is-gtype-struct-for="ColumnModel">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_data_type">
			<callback name="get_data_type" c:type="get_data_type">
				<return-value transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Connection" c:type="VdaConnection" c:symbol-prefix="connection" glib:type-name="VdaConnection" glib:get-type="vda_connection_get_type" glib:type-struct="ConnectionIface">
		<prerequisite name="GObject.Object"/>
		<method name="close" c:identifier="vda_connection_close">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="close_finish" c:identifier="vda_connection_close_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="close" invoker="close">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="close_finish" invoker="close_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="open" c:identifier="vda_connection_open">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="open_finish" c:identifier="vda_connection_open_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="open" invoker="open">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="open_finish" invoker="open_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="open_from_string" c:identifier="vda_connection_open_from_string">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="cnc_string" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="open_from_string_finish" c:identifier="vda_connection_open_from_string_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="open_from_string" invoker="open_from_string">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="cnc_string" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="open_from_string_finish" invoker="open_from_string_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse_string" c:identifier="vda_connection_parse_string" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse_string" invoker="parse_string" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse_string_prepared" c:identifier="vda_connection_parse_string_prepared" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse_string_prepared" invoker="parse_string_prepared" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_prepared_query" c:identifier="vda_connection_get_prepared_query">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_prepared_query" invoker="get_prepared_query">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="query_from_command" c:identifier="vda_connection_query_from_command" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="cmd" transfer-ownership="none">
					<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="query_from_command" invoker="query_from_command" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="cmd" transfer-ownership="none">
					<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
				</parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="value_to_quoted_string" c:identifier="vda_connection_value_to_quoted_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="v" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="value_to_quoted_string" invoker="value_to_quoted_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="v" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="locale" c:identifier="vda_connection_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="category" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="locale" invoker="locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="category" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="status">
			<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
		</property>
		<method name="get_status" c:identifier="vda_connection_get_status">
			<return-value transfer-ownership="none">
				<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_status" invoker="get_status">
			<return-value transfer-ownership="none">
				<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="parameters" writable="1">
			<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
		</property>
		<method name="get_parameters" c:identifier="vda_connection_get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_parameters" invoker="get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_parameters" c:identifier="vda_connection_set_parameters">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_parameters" invoker="set_parameters">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="is-opened">
			<type name="gboolean" c:type="gboolean"/>
		</property>
		<method name="get_is_opened" c:identifier="vda_connection_get_is_opened">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_is_opened" invoker="get_is_opened">
			<return-value transfer-ownership="none">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="connection-string">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_connection_string" c:identifier="vda_connection_get_connection_string">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection_string" invoker="get_connection_string">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<glib:signal name="closed">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="opened">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="closing">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="canceled">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<parameter name="message" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</glib:signal>
		<glib:signal name="timeout">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
		<glib:signal name="disconnected">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
		</glib:signal>
	</interface>
	<record name="ConnectionIface" c:type="VdaConnectionIface" glib:is-gtype-struct-for="Connection">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="close">
			<callback name="close" c:type="close">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="close_finish">
			<callback name="close_finish" c:type="close_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="open">
			<callback name="open" c:type="open">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="open_finish">
			<callback name="open_finish" c:type="open_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="open_from_string">
			<callback name="open_from_string" c:type="open_from_string">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="cnc_string" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="open_from_string_finish">
			<callback name="open_from_string_finish" c:type="open_from_string_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse_string">
			<callback name="parse_string" c:type="parse_string" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="sql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse_string_prepared">
			<callback name="parse_string_prepared" c:type="parse_string_prepared" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="sql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_prepared_query">
			<callback name="get_prepared_query" c:type="get_prepared_query">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="query_from_command">
			<callback name="query_from_command" c:type="query_from_command" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="cmd" transfer-ownership="none">
						<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
					</parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="value_to_quoted_string">
			<callback name="value_to_quoted_string" c:type="value_to_quoted_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="v" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="locale">
			<callback name="locale" c:type="locale">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="category" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_status">
			<callback name="get_status" c:type="get_status">
				<return-value transfer-ownership="none">
					<type name="Vda.ConnectionStatus" c:type="VdaConnectionStatus"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_parameters">
			<callback name="get_parameters" c:type="get_parameters">
				<return-value transfer-ownership="none">
					<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_parameters">
			<callback name="set_parameters" c:type="set_parameters">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Vda.ConnectionParameters" c:type="VdaConnectionParameters*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_is_opened">
			<callback name="get_is_opened" c:type="get_is_opened">
				<return-value transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_connection_string">
			<callback name="get_connection_string" c:type="get_connection_string">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<enumeration name="ConnectionStatus" c:type="VdaConnectionStatus" glib:type-name="VdaConnectionStatus" glib:get-type="vda_connection_status_get_type">
		<member name="invalid" c:identifier="VDA_CONNECTION_STATUS_INVALID" value="0"/>
		<member name="in_progress" c:identifier="VDA_CONNECTION_STATUS_IN_PROGRESS" value="1"/>
		<member name="canceled" c:identifier="VDA_CONNECTION_STATUS_CANCELED" value="2"/>
		<member name="made" c:identifier="VDA_CONNECTION_STATUS_MADE" value="3"/>
		<member name="disconnected" c:identifier="VDA_CONNECTION_STATUS_DISCONNECTED" value="4"/>
		<member name="timeout" c:identifier="VDA_CONNECTION_STATUS_TIMEOUT" value="5"/>
		<member name="connected" c:identifier="VDA_CONNECTION_STATUS_CONNECTED" value="6"/>
	</enumeration>
	<interface name="ConnectionBlob" c:type="VdaConnectionBlob" c:symbol-prefix="connection_blob" glib:type-name="VdaConnectionBlob" glib:get-type="vda_connection_blob_get_type" glib:type-struct="ConnectionBlobIface">
		<prerequisite name="GObject.Object"/>
		<method name="create" c:identifier="vda_connection_blob_create">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionBlob" c:type="VdaConnectionBlob*"/>
				</instance-parameter>
				<parameter name="stream" transfer-ownership="none">
					<type name="Gio.InputStream" c:type="GInputStream*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="create" invoker="create">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionBlob" c:type="VdaConnectionBlob*"/>
				</instance-parameter>
				<parameter name="stream" transfer-ownership="none">
					<type name="Gio.InputStream" c:type="GInputStream*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="delete" c:identifier="vda_connection_blob_delete">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionBlob" c:type="VdaConnectionBlob*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="delete" invoker="delete">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionBlob" c:type="VdaConnectionBlob*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="ConnectionBlobIface" c:type="VdaConnectionBlobIface" glib:is-gtype-struct-for="ConnectionBlob">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="create">
			<callback name="create" c:type="create">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionBlob" c:type="VdaConnectionBlob*"/>
					</instance-parameter>
					<parameter name="stream" transfer-ownership="none">
						<type name="Gio.InputStream" c:type="GInputStream*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete">
			<callback name="delete" c:type="delete">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionBlob" c:type="VdaConnectionBlob*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="ConnectionRolebased" c:type="VdaConnectionRolebased" c:symbol-prefix="connection_rolebased" glib:type-name="VdaConnectionRolebased" glib:get-type="vda_connection_rolebased_get_type" glib:type-struct="ConnectionRolebasedIface">
		<prerequisite name="GObject.Object"/>
		<method name="current_role" c:identifier="vda_connection_rolebased_current_role">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.Role" c:type="VdaRole*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionRolebased" c:type="VdaConnectionRolebased*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="current_role" invoker="current_role">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.Role" c:type="VdaRole*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionRolebased" c:type="VdaConnectionRolebased*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="create_role" c:identifier="vda_connection_rolebased_create_role" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.Role" c:type="VdaRole*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionRolebased" c:type="VdaConnectionRolebased*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none">
					<type name="Vda.Parameters" c:type="VdaParameters*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="create_role" invoker="create_role" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.Role" c:type="VdaRole*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionRolebased" c:type="VdaConnectionRolebased*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none">
					<type name="Vda.Parameters" c:type="VdaParameters*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="ConnectionRolebasedIface" c:type="VdaConnectionRolebasedIface" glib:is-gtype-struct-for="ConnectionRolebased">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="current_role">
			<callback name="current_role" c:type="current_role">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionRolebased" c:type="VdaConnectionRolebased*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="create_role">
			<callback name="create_role" c:type="create_role" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionRolebased" c:type="VdaConnectionRolebased*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="params" transfer-ownership="none">
						<type name="Vda.Parameters" c:type="VdaParameters*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="ConnectionTransactional" c:type="VdaConnectionTransactional" c:symbol-prefix="connection_transactional" glib:type-name="VdaConnectionTransactional" glib:get-type="vda_connection_transactional_get_type" glib:type-struct="ConnectionTransactionalIface">
		<prerequisite name="GObject.Object"/>
		<method name="add_savepoint" c:identifier="vda_connection_transactional_add_savepoint" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_savepoint" invoker="add_savepoint" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="delete_savepoint" c:identifier="vda_connection_transactional_delete_savepoint" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="delete_savepoint" invoker="delete_savepoint" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="rollback_savepoint" c:identifier="vda_connection_transactional_rollback_savepoint" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="rollback_savepoint" invoker="rollback_savepoint" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="begin_transaction" c:identifier="vda_connection_transactional_begin_transaction" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="begin_transaction" invoker="begin_transaction" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="commit_transaction" c:identifier="vda_connection_transactional_commit_transaction" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="commit_transaction" invoker="commit_transaction" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="rollback_transaction" c:identifier="vda_connection_transactional_rollback_transaction" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="rollback_transaction" invoker="rollback_transaction" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="ConnectionTransactionalIface" c:type="VdaConnectionTransactionalIface" glib:is-gtype-struct-for="ConnectionTransactional">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="add_savepoint">
			<callback name="add_savepoint" c:type="add_savepoint" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_savepoint">
			<callback name="delete_savepoint" c:type="delete_savepoint" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="rollback_savepoint">
			<callback name="rollback_savepoint" c:type="rollback_savepoint" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="begin_transaction">
			<callback name="begin_transaction" c:type="begin_transaction" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="commit_transaction">
			<callback name="commit_transaction" c:type="commit_transaction" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="rollback_transaction">
			<callback name="rollback_transaction" c:type="rollback_transaction" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ConnectionTransactional" c:type="VdaConnectionTransactional*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="DataObject" c:type="VdaDataObject" c:symbol-prefix="data_object" glib:type-name="VdaDataObject" glib:get-type="vda_data_object_get_type" glib:type-struct="DataObjectIface">
		<prerequisite name="GObject.Object"/>
		<method name="update_data_from_db" c:identifier="vda_data_object_update_data_from_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="update_data_from_db_finish" c:identifier="vda_data_object_update_data_from_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_data_from_db" invoker="update_data_from_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="update_data_from_db_finish" invoker="update_data_from_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_data_from_db_pkey" c:identifier="vda_data_object_update_data_from_db_pkey">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="update_data_from_db_pkey_finish" c:identifier="vda_data_object_update_data_from_db_pkey_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_data_from_db_pkey" invoker="update_data_from_db_pkey">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="update_data_from_db_pkey_finish" invoker="update_data_from_db_pkey_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_data_from_db_full" c:identifier="vda_data_object_update_data_from_db_full">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="update_data_from_db_full_finish" c:identifier="vda_data_object_update_data_from_db_full_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_data_from_db_full" invoker="update_data_from_db_full">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="update_data_from_db_full_finish" invoker="update_data_from_db_full_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="insert_data_into_db" c:identifier="vda_data_object_insert_data_into_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="insert_data_into_db_finish" c:identifier="vda_data_object_insert_data_into_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="insert_data_into_db" invoker="insert_data_into_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="insert_data_into_db_finish" invoker="insert_data_into_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="delete_data_from_db" c:identifier="vda_data_object_delete_data_from_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="delete_data_from_db_finish" c:identifier="vda_data_object_delete_data_from_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="delete_data_from_db" invoker="delete_data_from_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="delete_data_from_db_finish" invoker="delete_data_from_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="delete_data_from_db_pkey" c:identifier="vda_data_object_delete_data_from_db_pkey">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="delete_data_from_db_pkey_finish" c:identifier="vda_data_object_delete_data_from_db_pkey_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="delete_data_from_db_pkey" invoker="delete_data_from_db_pkey">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="delete_data_from_db_pkey_finish" invoker="delete_data_from_db_pkey_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="delete_data_from_db_full" c:identifier="vda_data_object_delete_data_from_db_full">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="delete_data_from_db_full_finish" c:identifier="vda_data_object_delete_data_from_db_full_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="delete_data_from_db_full" invoker="delete_data_from_db_full">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="delete_data_from_db_full_finish" invoker="delete_data_from_db_full_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_data_into_db" c:identifier="vda_data_object_update_data_into_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="update_data_into_db_finish" c:identifier="vda_data_object_update_data_into_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_data_into_db" invoker="update_data_into_db">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="update_data_into_db_finish" invoker="update_data_into_db_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_data_into_db_pkey" c:identifier="vda_data_object_update_data_into_db_pkey">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="update_data_into_db_pkey_finish" c:identifier="vda_data_object_update_data_into_db_pkey_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_data_into_db_pkey" invoker="update_data_into_db_pkey">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="update_data_into_db_pkey_finish" invoker="update_data_into_db_pkey_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_data_into_db_full" c:identifier="vda_data_object_update_data_into_db_full">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="update_data_into_db_full_finish" c:identifier="vda_data_object_update_data_into_db_full_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_data_into_db_full" invoker="update_data_into_db_full">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="update_data_into_db_full_finish" invoker="update_data_into_db_full_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="update_from_row" c:identifier="vda_data_object_update_from_row" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="table" transfer-ownership="none">
					<type name="Vda.TableModel" c:type="VdaTableModel*"/>
				</parameter>
				<parameter name="nrow" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="update_from_row" invoker="update_from_row" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="table" transfer-ownership="none">
					<type name="Vda.TableModel" c:type="VdaTableModel*"/>
				</parameter>
				<parameter name="nrow" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<function name="create_select_query" c:identifier="vda_data_object_create_select_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
			</return-value>
			<parameters>
				<parameter name="obj" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</function>
		<function name="create_select_all" c:identifier="vda_data_object_create_select_all">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
			</return-value>
			<parameters>
				<parameter name="obj" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</parameter>
			</parameters>
		</function>
		<function name="create_insert_query" c:identifier="vda_data_object_create_insert_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
			</return-value>
			<parameters>
				<parameter name="obj" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</parameter>
			</parameters>
		</function>
		<function name="create_delete_query" c:identifier="vda_data_object_create_delete_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
			</return-value>
			<parameters>
				<parameter name="obj" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</function>
		<function name="create_update_query" c:identifier="vda_data_object_create_update_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
			</return-value>
			<parameters>
				<parameter name="obj" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</parameter>
				<parameter name="use_pkey" transfer-ownership="none">
					<type name="gboolean" c:type="gboolean"/>
				</parameter>
			</parameters>
		</function>
		<property name="database-connection" writable="1">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_database_connection" c:identifier="vda_data_object_get_database_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_database_connection" invoker="get_database_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_database_connection" c:identifier="vda_data_object_set_database_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_database_connection" invoker="set_database_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="database-table-name" writable="1" construct="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_database_table_name" c:identifier="vda_data_object_get_database_table_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_database_table_name" invoker="get_database_table_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_database_table_name" c:identifier="vda_data_object_set_database_table_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_database_table_name" invoker="set_database_table_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="cancellable" writable="1">
			<type name="Gio.Cancellable" c:type="GCancellable*"/>
		</property>
		<method name="get_cancellable" c:identifier="vda_data_object_get_cancellable">
			<return-value transfer-ownership="none">
				<type name="Gio.Cancellable" c:type="GCancellable*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_cancellable" invoker="get_cancellable">
			<return-value transfer-ownership="none">
				<type name="Gio.Cancellable" c:type="GCancellable*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_cancellable" c:identifier="vda_data_object_set_cancellable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_cancellable" invoker="set_cancellable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="DataObjectIface" c:type="VdaDataObjectIface" glib:is-gtype-struct-for="DataObject">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="update_data_from_db">
			<callback name="update_data_from_db" c:type="update_data_from_db">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_from_db_finish">
			<callback name="update_data_from_db_finish" c:type="update_data_from_db_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_from_db_pkey">
			<callback name="update_data_from_db_pkey" c:type="update_data_from_db_pkey">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_from_db_pkey_finish">
			<callback name="update_data_from_db_pkey_finish" c:type="update_data_from_db_pkey_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_from_db_full">
			<callback name="update_data_from_db_full" c:type="update_data_from_db_full">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="use_pkey" transfer-ownership="none">
						<type name="gboolean" c:type="gboolean"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_from_db_full_finish">
			<callback name="update_data_from_db_full_finish" c:type="update_data_from_db_full_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="insert_data_into_db">
			<callback name="insert_data_into_db" c:type="insert_data_into_db">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="insert_data_into_db_finish">
			<callback name="insert_data_into_db_finish" c:type="insert_data_into_db_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_data_from_db">
			<callback name="delete_data_from_db" c:type="delete_data_from_db">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_data_from_db_finish">
			<callback name="delete_data_from_db_finish" c:type="delete_data_from_db_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_data_from_db_pkey">
			<callback name="delete_data_from_db_pkey" c:type="delete_data_from_db_pkey">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_data_from_db_pkey_finish">
			<callback name="delete_data_from_db_pkey_finish" c:type="delete_data_from_db_pkey_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_data_from_db_full">
			<callback name="delete_data_from_db_full" c:type="delete_data_from_db_full">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="use_pkey" transfer-ownership="none">
						<type name="gboolean" c:type="gboolean"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete_data_from_db_full_finish">
			<callback name="delete_data_from_db_full_finish" c:type="delete_data_from_db_full_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_into_db">
			<callback name="update_data_into_db" c:type="update_data_into_db">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_into_db_finish">
			<callback name="update_data_into_db_finish" c:type="update_data_into_db_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_into_db_pkey">
			<callback name="update_data_into_db_pkey" c:type="update_data_into_db_pkey">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_into_db_pkey_finish">
			<callback name="update_data_into_db_pkey_finish" c:type="update_data_into_db_pkey_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_into_db_full">
			<callback name="update_data_into_db_full" c:type="update_data_into_db_full">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="use_pkey" transfer-ownership="none">
						<type name="gboolean" c:type="gboolean"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_data_into_db_full_finish">
			<callback name="update_data_into_db_full_finish" c:type="update_data_into_db_full_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="update_from_row">
			<callback name="update_from_row" c:type="update_from_row" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="table" transfer-ownership="none">
						<type name="Vda.TableModel" c:type="VdaTableModel*"/>
					</parameter>
					<parameter name="nrow" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_database_connection">
			<callback name="get_database_connection" c:type="get_database_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_database_connection">
			<callback name="set_database_connection" c:type="set_database_connection">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_database_table_name">
			<callback name="get_database_table_name" c:type="get_database_table_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_database_table_name">
			<callback name="set_database_table_name" c:type="set_database_table_name">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_cancellable">
			<callback name="get_cancellable" c:type="get_cancellable">
				<return-value transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_cancellable">
			<callback name="set_cancellable" c:type="set_cancellable">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataObject" c:type="VdaDataObject*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="DataCollection" c:type="VdaDataCollection" c:symbol-prefix="data_collection" glib:type-name="VdaDataCollection" glib:get-type="vda_data_collection_get_type" glib:type-struct="DataCollectionIface">
		<prerequisite name="GObject.Object"/>
		<method name="get_objects" c:identifier="vda_data_collection_get_objects">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="get_objects_finish" c:identifier="vda_data_collection_get_objects_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.TableModel" c:type="VdaTableModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_objects" invoker="get_objects">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="get_objects_finish" invoker="get_objects_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.TableModel" c:type="VdaTableModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="database-connection" writable="1">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_database_connection" c:identifier="vda_data_collection_get_database_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_database_connection" invoker="get_database_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_database_connection" c:identifier="vda_data_collection_set_database_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_database_connection" invoker="set_database_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="parent-property">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_parent_property" c:identifier="vda_data_collection_get_parent_property">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_parent_property" invoker="get_parent_property">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="parent">
			<type name="Vda.DataObject" c:type="VdaDataObject*"/>
		</property>
		<method name="get_parent" c:identifier="vda_data_collection_get_parent">
			<return-value transfer-ownership="none">
				<type name="Vda.DataObject" c:type="VdaDataObject*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_parent" invoker="get_parent">
			<return-value transfer-ownership="none">
				<type name="Vda.DataObject" c:type="VdaDataObject*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="object-type">
			<type name="GType" c:type="GType"/>
		</property>
		<method name="get_object_type" c:identifier="vda_data_collection_get_object_type">
			<return-value transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_object_type" invoker="get_object_type">
			<return-value transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="ref-field">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_ref_field" c:identifier="vda_data_collection_get_ref_field">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_ref_field" invoker="get_ref_field">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="cancellable" writable="1">
			<type name="Gio.Cancellable" c:type="GCancellable*"/>
		</property>
		<method name="get_cancellable" c:identifier="vda_data_collection_get_cancellable">
			<return-value transfer-ownership="none">
				<type name="Gio.Cancellable" c:type="GCancellable*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_cancellable" invoker="get_cancellable">
			<return-value transfer-ownership="none">
				<type name="Gio.Cancellable" c:type="GCancellable*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_cancellable" c:identifier="vda_data_collection_set_cancellable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_cancellable" invoker="set_cancellable">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="DataCollectionIface" c:type="VdaDataCollectionIface" glib:is-gtype-struct-for="DataCollection">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_objects">
			<callback name="get_objects" c:type="get_objects">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_objects_finish">
			<callback name="get_objects_finish" c:type="get_objects_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.TableModel" c:type="VdaTableModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_database_connection">
			<callback name="get_database_connection" c:type="get_database_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_database_connection">
			<callback name="set_database_connection" c:type="set_database_connection">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_parent_property">
			<callback name="get_parent_property" c:type="get_parent_property">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_parent">
			<callback name="get_parent" c:type="get_parent">
				<return-value transfer-ownership="none">
					<type name="Vda.DataObject" c:type="VdaDataObject*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_object_type">
			<callback name="get_object_type" c:type="get_object_type">
				<return-value transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_ref_field">
			<callback name="get_ref_field" c:type="get_ref_field">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_cancellable">
			<callback name="get_cancellable" c:type="get_cancellable">
				<return-value transfer-ownership="none">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_cancellable">
			<callback name="set_cancellable" c:type="set_cancellable">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.DataCollection" c:type="VdaDataCollection*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Gio.Cancellable" c:type="GCancellable*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="HashModel" c:type="VdaHashModel" c:symbol-prefix="hash_model" glib:type-name="VdaHashModel" glib:get-type="vda_hash_model_get_type" glib:type-struct="HashModelIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Gio.ListModel"/>
		<method name="add" c:identifier="vda_hash_model_add">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add" invoker="add">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="find" c:identifier="vda_hash_model_find">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GObject.Object" c:type="GObject*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</instance-parameter>
				<parameter name="key" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="find" invoker="find">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GObject.Object" c:type="GObject*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</instance-parameter>
				<parameter name="key" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="remove" c:identifier="vda_hash_model_remove">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="remove" invoker="remove">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="GObject.Object" c:type="GObject*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="HashModelIface" c:type="VdaHashModelIface" glib:is-gtype-struct-for="HashModel">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="add">
			<callback name="add" c:type="add">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.HashModel" c:type="VdaHashModel*"/>
					</instance-parameter>
					<parameter name="object" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="find">
			<callback name="find" c:type="find">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="GObject.Object" c:type="GObject*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.HashModel" c:type="VdaHashModel*"/>
					</instance-parameter>
					<parameter name="key" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="remove">
			<callback name="remove" c:type="remove">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.HashModel" c:type="VdaHashModel*"/>
					</instance-parameter>
					<parameter name="object" transfer-ownership="none">
						<type name="GObject.Object" c:type="GObject*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Inserted" c:type="VdaInserted" c:symbol-prefix="inserted" glib:type-name="VdaInserted" glib:get-type="vda_inserted_get_type" glib:type-struct="InsertedIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.Result"/>
		<property name="number">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_number" c:identifier="vda_inserted_get_number">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Inserted" c:type="VdaInserted*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_number" invoker="get_number">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Inserted" c:type="VdaInserted*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="last-inserted">
			<type name="Vda.RowModel" c:type="VdaRowModel*"/>
		</property>
		<method name="get_last_inserted" c:identifier="vda_inserted_get_last_inserted">
			<return-value transfer-ownership="none">
				<type name="Vda.RowModel" c:type="VdaRowModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Inserted" c:type="VdaInserted*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_last_inserted" invoker="get_last_inserted">
			<return-value transfer-ownership="none">
				<type name="Vda.RowModel" c:type="VdaRowModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Inserted" c:type="VdaInserted*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="InsertedIface" c:type="VdaInsertedIface" glib:is-gtype-struct-for="Inserted">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_number">
			<callback name="get_number" c:type="get_number">
				<return-value transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Inserted" c:type="VdaInserted*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_last_inserted">
			<callback name="get_last_inserted" c:type="get_last_inserted">
				<return-value transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Inserted" c:type="VdaInserted*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="ParsedQuery" c:type="VdaParsedQuery" c:symbol-prefix="parsed_query" glib:type-name="VdaParsedQuery" glib:get-type="vda_parsed_query_get_type" glib:type-struct="ParsedQueryIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.PreparedQuery"/>
		<property name="command">
			<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
		</property>
		<method name="get_command" c:identifier="vda_parsed_query_get_command">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ParsedQuery" c:type="VdaParsedQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_command" invoker="get_command">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.ParsedQuery" c:type="VdaParsedQuery*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="ParsedQueryIface" c:type="VdaParsedQueryIface" glib:is-gtype-struct-for="ParsedQuery">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_command">
			<callback name="get_command" c:type="get_command">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.ParsedQuery" c:type="VdaParsedQuery*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="PreparedQuery" c:type="VdaPreparedQuery" c:symbol-prefix="prepared_query" glib:type-name="VdaPreparedQuery" glib:get-type="vda_prepared_query_get_type" glib:type-struct="PreparedQueryIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.Query"/>
		<property name="name">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_prepared_query_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="parameters">
			<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
		</property>
		<method name="get_parameters" c:identifier="vda_prepared_query_get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_parameters" invoker="get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="PreparedQueryIface" c:type="VdaPreparedQueryIface" glib:is-gtype-struct-for="PreparedQuery">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_parameters">
			<callback name="get_parameters" c:type="get_parameters">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Query" c:type="VdaQuery" c:symbol-prefix="query" glib:type-name="VdaQuery" glib:get-type="vda_query_get_type" glib:type-struct="QueryIface">
		<prerequisite name="GObject.Object"/>
		<method name="execute" c:identifier="vda_query_execute">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="cancellable" transfer-ownership="none" allow-none="1">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="execute_finish" c:identifier="vda_query_execute_finish" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.Result" c:type="VdaResult*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="execute" invoker="execute">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="cancellable" transfer-ownership="none" allow-none="1">
					<type name="Gio.Cancellable" c:type="GCancellable*"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="execute_finish" invoker="execute_finish" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.Result" c:type="VdaResult*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="cancel" c:identifier="vda_query_cancel">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="cancel_finish" c:identifier="vda_query_cancel_finish">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="cancel" invoker="cancel">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="cancel_finish" invoker="cancel_finish">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="render_sql" c:identifier="vda_query_render_sql" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="render_sql" invoker="render_sql" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="sql">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_sql" c:identifier="vda_query_get_sql">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_sql" invoker="get_sql">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="connection">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_connection" c:identifier="vda_query_get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection" invoker="get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="QueryIface" c:type="VdaQueryIface" glib:is-gtype-struct-for="Query">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="execute">
			<callback name="execute" c:type="execute">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
					<parameter name="cancellable" transfer-ownership="none" allow-none="1">
						<type name="Gio.Cancellable" c:type="GCancellable*"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="execute_finish">
			<callback name="execute_finish" c:type="execute_finish" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.Result" c:type="VdaResult*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="cancel">
			<callback name="cancel" c:type="cancel">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="cancel_finish">
			<callback name="cancel_finish" c:type="cancel_finish">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="render_sql">
			<callback name="render_sql" c:type="render_sql" throws="1">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_sql">
			<callback name="get_sql" c:type="get_sql">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_connection">
			<callback name="get_connection" c:type="get_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Query" c:type="VdaQuery*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Result" c:type="VdaResult" c:symbol-prefix="result" glib:type-name="VdaResult" glib:get-type="vda_result_get_type" glib:type-struct="ResultIface">
		<prerequisite name="GObject.Object"/>
	</interface>
	<record name="ResultIface" c:type="VdaResultIface" glib:is-gtype-struct-for="Result">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="Role" c:type="VdaRole" c:symbol-prefix="role" glib:type-name="VdaRole" glib:get-type="vda_role_get_type" glib:type-struct="RoleIface">
		<prerequisite name="GObject.Object"/>
		<method name="name" c:identifier="vda_role_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="name_finish" c:identifier="vda_role_name_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="name" invoker="name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="name_finish" invoker="name_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="membership" c:identifier="vda_role_membership">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="membership_finish" c:identifier="vda_role_membership_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="membership" invoker="membership">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="membership_finish" invoker="membership_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="privilages" c:identifier="vda_role_privilages">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="privilages_finish" c:identifier="vda_role_privilages_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.RoleGrant" c:type="VdaRoleGrant"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="privilages" invoker="privilages">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="privilages_finish" invoker="privilages_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.RoleGrant" c:type="VdaRoleGrant"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="change_privilages" c:identifier="vda_role_change_privilages">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</parameter>
				<parameter name="grant" transfer-ownership="none">
					<type name="Vda.RoleGrant" c:type="VdaRoleGrant"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="3" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</method>
		<method name="change_privilages_finish" c:identifier="vda_role_change_privilages_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="change_privilages" invoker="change_privilages">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="object" transfer-ownership="none">
					<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
				</parameter>
				<parameter name="grant" transfer-ownership="none">
					<type name="Vda.RoleGrant" c:type="VdaRoleGrant"/>
				</parameter>
				<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="3" scope="async">
					<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
				</parameter>
				<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
					<type name="gpointer" c:type="void*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<virtual-method name="change_privilages_finish" invoker="change_privilages_finish" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
				<parameter name="_res_" transfer-ownership="none">
					<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="connection">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_connection" c:identifier="vda_role_get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection" invoker="get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Role" c:type="VdaRole*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="RoleIface" c:type="VdaRoleIface" glib:is-gtype-struct-for="Role">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="name">
			<callback name="name" c:type="name">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="name_finish">
			<callback name="name_finish" c:type="name_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="membership">
			<callback name="membership" c:type="membership">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="1" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="membership_finish">
			<callback name="membership_finish" c:type="membership_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="privilages">
			<callback name="privilages" c:type="privilages">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="object" transfer-ownership="none">
						<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="2" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="privilages_finish">
			<callback name="privilages_finish" c:type="privilages_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.RoleGrant" c:type="VdaRoleGrant"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="change_privilages">
			<callback name="change_privilages" c:type="change_privilages">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="object" transfer-ownership="none">
						<type name="Vda.MetaObject" c:type="VdaMetaObject*"/>
					</parameter>
					<parameter name="grant" transfer-ownership="none">
						<type name="Vda.RoleGrant" c:type="VdaRoleGrant"/>
					</parameter>
					<parameter name="_callback_" transfer-ownership="none" allow-none="1" closure="3" scope="async">
						<type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
					</parameter>
					<parameter name="_callback__target" transfer-ownership="none" allow-none="1">
						<type name="gpointer" c:type="void*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="change_privilages_finish">
			<callback name="change_privilages_finish" c:type="change_privilages_finish" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
					<parameter name="_res_" transfer-ownership="none">
						<type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_connection">
			<callback name="get_connection" c:type="get_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Role" c:type="VdaRole*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<bitfield name="RoleGrant" c:type="VdaRoleGrant" glib:type-name="VdaRoleGrant" glib:get-type="vda_role_grant_get_type">
		<member name="none" c:identifier="VDA_ROLE_GRANT_NONE" value="1"/>
		<member name="select" c:identifier="VDA_ROLE_GRANT_SELECT" value="2"/>
		<member name="insert" c:identifier="VDA_ROLE_GRANT_INSERT" value="4"/>
		<member name="update" c:identifier="VDA_ROLE_GRANT_UPDATE" value="8"/>
		<member name="delete" c:identifier="VDA_ROLE_GRANT_DELETE" value="16"/>
		<member name="truncate" c:identifier="VDA_ROLE_GRANT_TRUNCATE" value="32"/>
		<member name="references" c:identifier="VDA_ROLE_GRANT_REFERENCES" value="64"/>
		<member name="trigger" c:identifier="VDA_ROLE_GRANT_TRIGGER" value="128"/>
		<member name="create" c:identifier="VDA_ROLE_GRANT_CREATE" value="256"/>
		<member name="usage" c:identifier="VDA_ROLE_GRANT_USAGE" value="512"/>
		<member name="privileges" c:identifier="VDA_ROLE_GRANT_PRIVILEGES" value="1024"/>
	</bitfield>
	<interface name="RowModel" c:type="VdaRowModel" c:symbol-prefix="row_model" glib:type-name="VdaRowModel" glib:get-type="vda_row_model_get_type" glib:type-struct="RowModelIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Gio.ListModel"/>
		<method name="get_column" c:identifier="vda_row_model_get_column" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_column" invoker="get_column" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_column_at" c:identifier="vda_row_model_get_column_at" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="col" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_column_at" invoker="get_column_at" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="col" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_value" c:identifier="vda_row_model_get_value" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_value" invoker="get_value" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_value_at" c:identifier="vda_row_model_get_value_at" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="col" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_value_at" invoker="get_value_at" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="col" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_string" c:identifier="vda_row_model_get_string" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_string" invoker="get_string" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_string_at" c:identifier="vda_row_model_get_string_at" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="col" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_string_at" invoker="get_string_at" throws="1">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
				<parameter name="col" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="n-columns">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_n_columns" c:identifier="vda_row_model_get_n_columns">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_n_columns" invoker="get_n_columns">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="RowModelIface" c:type="VdaRowModelIface" glib:is-gtype-struct-for="RowModel">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_column">
			<callback name="get_column" c:type="get_column" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_column_at">
			<callback name="get_column_at" c:type="get_column_at" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.ColumnModel" c:type="VdaColumnModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
					<parameter name="col" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_value">
			<callback name="get_value" c:type="get_value" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_value_at">
			<callback name="get_value_at" c:type="get_value_at" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
					<parameter name="col" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_string">
			<callback name="get_string" c:type="get_string" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_string_at">
			<callback name="get_string_at" c:type="get_string_at" throws="1">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
					<parameter name="col" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_n_columns">
			<callback name="get_n_columns" c:type="get_n_columns">
				<return-value transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.RowModel" c:type="VdaRowModel*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlAffectedRows" c:type="VdaSqlAffectedRows" c:symbol-prefix="sql_affected_rows" glib:type-name="VdaSqlAffectedRows" glib:get-type="vda_sql_affected_rows_get_type" glib:type-struct="SqlAffectedRowsIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.Result"/>
		<property name="number">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_number" c:identifier="vda_sql_affected_rows_get_number">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlAffectedRows" c:type="VdaSqlAffectedRows*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_number" invoker="get_number">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlAffectedRows" c:type="VdaSqlAffectedRows*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlAffectedRowsIface" c:type="VdaSqlAffectedRowsIface" glib:is-gtype-struct-for="SqlAffectedRows">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_number">
			<callback name="get_number" c:type="get_number">
				<return-value transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlAffectedRows" c:type="VdaSqlAffectedRows*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommand" c:type="VdaSqlCommand" c:symbol-prefix="sql_command" glib:type-name="VdaSqlCommand" glib:get-type="vda_sql_command_get_type" glib:type-struct="SqlCommandIface">
		<prerequisite name="GObject.Object"/>
		<property name="connection">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_connection" c:identifier="vda_sql_command_get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection" invoker="get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandIface" c:type="VdaSqlCommandIface" glib:is-gtype-struct-for="SqlCommand">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_connection">
			<callback name="get_connection" c:type="get_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommand" c:type="VdaSqlCommand*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandConditional" c:type="VdaSqlCommandConditional" c:symbol-prefix="sql_command_conditional" glib:type-name="VdaSqlCommandConditional" glib:get-type="vda_sql_command_conditional_get_type" glib:type-struct="SqlCommandConditionalIface">
		<prerequisite name="GObject.Object"/>
		<property name="condition">
			<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
		</property>
		<method name="get_condition" c:identifier="vda_sql_command_conditional_get_condition">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandConditional" c:type="VdaSqlCommandConditional*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_condition" invoker="get_condition">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandConditional" c:type="VdaSqlCommandConditional*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandConditionalIface" c:type="VdaSqlCommandConditionalIface" glib:is-gtype-struct-for="SqlCommandConditional">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_condition">
			<callback name="get_condition" c:type="get_condition">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandConditional" c:type="VdaSqlCommandConditional*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandDelete" c:type="VdaSqlCommandDelete" c:symbol-prefix="sql_command_delete" glib:type-name="VdaSqlCommandDelete" glib:get-type="vda_sql_command_delete_get_type" glib:type-struct="SqlCommandDeleteIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlCommandTableRelated"/>
		<prerequisite name="Vda.SqlCommandConditional"/>
		<prerequisite name="Vda.SqlCommand"/>
		<prerequisite name="Vda.SqlCommandParametrized"/>
		<method name="stringify" c:identifier="vda_sql_command_delete_stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="stringify" invoker="stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_query" c:identifier="vda_sql_command_delete_to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="to_query" invoker="to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse" c:identifier="vda_sql_command_delete_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandDeleteIface" c:type="VdaSqlCommandDeleteIface" glib:is-gtype-struct-for="SqlCommandDelete">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="stringify">
			<callback name="stringify" c:type="stringify" throws="1">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_query">
			<callback name="to_query" c:type="to_query" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandDelete" c:type="VdaSqlCommandDelete*"/>
					</instance-parameter>
					<parameter name="sql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandInsert" c:type="VdaSqlCommandInsert" c:symbol-prefix="sql_command_insert" glib:type-name="VdaSqlCommandInsert" glib:get-type="vda_sql_command_insert_get_type" glib:type-struct="SqlCommandInsertIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlCommandTableRelated"/>
		<prerequisite name="Vda.SqlCommandModification"/>
		<prerequisite name="Vda.SqlCommand"/>
		<prerequisite name="Vda.SqlCommandParametrized"/>
		<method name="stringify" c:identifier="vda_sql_command_insert_stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="stringify" invoker="stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_query" c:identifier="vda_sql_command_insert_to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="to_query" invoker="to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse" c:identifier="vda_sql_command_insert_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandInsertIface" c:type="VdaSqlCommandInsertIface" glib:is-gtype-struct-for="SqlCommandInsert">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="stringify">
			<callback name="stringify" c:type="stringify" throws="1">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_query">
			<callback name="to_query" c:type="to_query" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandInsert" c:type="VdaSqlCommandInsert*"/>
					</instance-parameter>
					<parameter name="sql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandModification" c:type="VdaSqlCommandModification" c:symbol-prefix="sql_command_modification" glib:type-name="VdaSqlCommandModification" glib:get-type="vda_sql_command_modification_get_type" glib:type-struct="SqlCommandModificationIface">
		<prerequisite name="GObject.Object"/>
		<method name="add_field_value" c:identifier="vda_sql_command_modification_add_field_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_field_value" invoker="add_field_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_field" c:identifier="vda_sql_command_modification_add_field" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_field" invoker="add_field" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_value" c:identifier="vda_sql_command_modification_add_value" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_value" invoker="add_value" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_field_parameter_value" c:identifier="vda_sql_command_modification_add_field_parameter_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="field" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="par" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="gtype" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_field_parameter_value" invoker="add_field_parameter_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="field" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="par" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="gtype" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_parameter" c:identifier="vda_sql_command_modification_add_parameter" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="par" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="gtype" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_parameter" invoker="add_parameter" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
				<parameter name="par" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="gtype" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="fields">
			<type name="Vda.HashModel" c:type="VdaHashModel*"/>
		</property>
		<method name="get_fields" c:identifier="vda_sql_command_modification_get_fields">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_fields" invoker="get_fields">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="values">
			<type name="Vda.HashModel" c:type="VdaHashModel*"/>
		</property>
		<method name="get_values" c:identifier="vda_sql_command_modification_get_values">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_values" invoker="get_values">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandModificationIface" c:type="VdaSqlCommandModificationIface" glib:is-gtype-struct-for="SqlCommandModification">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="add_field_value">
			<callback name="add_field_value" c:type="add_field_value">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="val" transfer-ownership="none" allow-none="1">
						<type name="GObject.Value" c:type="GValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_field">
			<callback name="add_field" c:type="add_field" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_value">
			<callback name="add_value" c:type="add_value" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none" allow-none="1">
						<type name="GObject.Value" c:type="GValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_field_parameter_value">
			<callback name="add_field_parameter_value" c:type="add_field_parameter_value">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
					<parameter name="field" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="par" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="gtype" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_parameter">
			<callback name="add_parameter" c:type="add_parameter" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
					<parameter name="par" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="gtype" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_fields">
			<callback name="get_fields" c:type="get_fields">
				<return-value transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_values">
			<callback name="get_values" c:type="get_values">
				<return-value transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandModification" c:type="VdaSqlCommandModification*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandParametrized" c:type="VdaSqlCommandParametrized" c:symbol-prefix="sql_command_parametrized" glib:type-name="VdaSqlCommandParametrized" glib:get-type="vda_sql_command_parametrized_get_type" glib:type-struct="SqlCommandParametrizedIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlCommand"/>
		<property name="parameters">
			<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
		</property>
		<method name="get_parameters" c:identifier="vda_sql_command_parametrized_get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandParametrized" c:type="VdaSqlCommandParametrized*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_parameters" invoker="get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandParametrized" c:type="VdaSqlCommandParametrized*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandParametrizedIface" c:type="VdaSqlCommandParametrizedIface" glib:is-gtype-struct-for="SqlCommandParametrized">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_parameters">
			<callback name="get_parameters" c:type="get_parameters">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandParametrized" c:type="VdaSqlCommandParametrized*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandSelect" c:type="VdaSqlCommandSelect" c:symbol-prefix="sql_command_select" glib:type-name="VdaSqlCommandSelect" glib:get-type="vda_sql_command_select_get_type" glib:type-struct="SqlCommandSelectIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlCommandConditional"/>
		<prerequisite name="Vda.SqlCommand"/>
		<prerequisite name="Vda.SqlCommandParametrized"/>
		<method name="add_field" c:identifier="vda_sql_command_select_add_field">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="field" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="table_ref" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="alias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_field" invoker="add_field">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="field" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="table_ref" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="alias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_table" c:identifier="vda_sql_command_select_add_table">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="allias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_table" invoker="add_table">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="allias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_value_field" c:identifier="vda_sql_command_select_add_value_field">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
				<parameter name="allias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_value_field" invoker="add_value_field">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
				<parameter name="allias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_math_exp_field" c:identifier="vda_sql_command_select_add_math_exp_field" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="allias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_math_exp_field" invoker="add_math_exp_field" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="allias" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="stringify" c:identifier="vda_sql_command_select_stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="stringify" invoker="stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_query" c:identifier="vda_sql_command_select_to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="to_query" invoker="to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse" c:identifier="vda_sql_command_select_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="fields">
			<type name="Vda.HashModel" c:type="VdaHashModel*"/>
		</property>
		<method name="get_fields" c:identifier="vda_sql_command_select_get_fields">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_fields" invoker="get_fields">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="tables">
			<type name="Vda.HashModel" c:type="VdaHashModel*"/>
		</property>
		<method name="get_tables" c:identifier="vda_sql_command_select_get_tables">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_tables" invoker="get_tables">
			<return-value transfer-ownership="none">
				<type name="Vda.HashModel" c:type="VdaHashModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandSelectIface" c:type="VdaSqlCommandSelectIface" glib:is-gtype-struct-for="SqlCommandSelect">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="add_field">
			<callback name="add_field" c:type="add_field">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
					<parameter name="field" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="table_ref" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="alias" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_table">
			<callback name="add_table" c:type="add_table">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="allias" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_value_field">
			<callback name="add_value_field" c:type="add_value_field">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="GObject.Value" c:type="GValue"/>
					</parameter>
					<parameter name="allias" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_math_exp_field">
			<callback name="add_math_exp_field" c:type="add_math_exp_field" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
					<parameter name="exp" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="allias" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="stringify">
			<callback name="stringify" c:type="stringify" throws="1">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_query">
			<callback name="to_query" c:type="to_query" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.PreparedQuery" c:type="VdaPreparedQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
					<parameter name="sql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_fields">
			<callback name="get_fields" c:type="get_fields">
				<return-value transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_tables">
			<callback name="get_tables" c:type="get_tables">
				<return-value transfer-ownership="none">
					<type name="Vda.HashModel" c:type="VdaHashModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandSelect" c:type="VdaSqlCommandSelect*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated" c:symbol-prefix="sql_command_table_related" glib:type-name="VdaSqlCommandTableRelated" glib:get-type="vda_sql_command_table_related_get_type" glib:type-struct="SqlCommandTableRelatedIface">
		<prerequisite name="GObject.Object"/>
		<property name="table" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_table" c:identifier="vda_sql_command_table_related_get_table">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_table" invoker="get_table">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_table" c:identifier="vda_sql_command_table_related_set_table">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_table" invoker="set_table">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="allias" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_allias" c:identifier="vda_sql_command_table_related_get_allias">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_allias" invoker="get_allias">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_allias" c:identifier="vda_sql_command_table_related_set_allias">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_allias" invoker="set_allias">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandTableRelatedIface" c:type="VdaSqlCommandTableRelatedIface" glib:is-gtype-struct-for="SqlCommandTableRelated">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_table">
			<callback name="get_table" c:type="get_table">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_table">
			<callback name="set_table" c:type="set_table">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_allias">
			<callback name="get_allias" c:type="get_allias">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_allias">
			<callback name="set_allias" c:type="set_allias">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandTableRelated" c:type="VdaSqlCommandTableRelated*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlCommandUpdate" c:type="VdaSqlCommandUpdate" c:symbol-prefix="sql_command_update" glib:type-name="VdaSqlCommandUpdate" glib:get-type="vda_sql_command_update_get_type" glib:type-struct="SqlCommandUpdateIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlCommandTableRelated"/>
		<prerequisite name="Vda.SqlCommandModification"/>
		<prerequisite name="Vda.SqlCommandConditional"/>
		<prerequisite name="Vda.SqlCommand"/>
		<prerequisite name="Vda.SqlCommandParametrized"/>
		<method name="stringify" c:identifier="vda_sql_command_update_stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="stringify" invoker="stringify" throws="1">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_query" c:identifier="vda_sql_command_update_to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="to_query" invoker="to_query" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.Query" c:type="VdaQuery*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="parse" c:identifier="vda_sql_command_update_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
				</instance-parameter>
				<parameter name="sql" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlCommandUpdateIface" c:type="VdaSqlCommandUpdateIface" glib:is-gtype-struct-for="SqlCommandUpdate">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="stringify">
			<callback name="stringify" c:type="stringify" throws="1">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_query">
			<callback name="to_query" c:type="to_query" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.Query" c:type="VdaQuery*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlCommandUpdate" c:type="VdaSqlCommandUpdate*"/>
					</instance-parameter>
					<parameter name="sql" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlExpression" c:type="VdaSqlExpression" c:symbol-prefix="sql_expression" glib:type-name="VdaSqlExpression" glib:get-type="vda_sql_expression_get_type" glib:type-struct="SqlExpressionIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Gio.ListModel"/>
		<method name="add_expression" c:identifier="vda_sql_expression_add_expression">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_expression" invoker="add_expression">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="remove_expression" c:identifier="vda_sql_expression_remove_expression">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="remove_expression" invoker="remove_expression">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="to_string" c:identifier="vda_sql_expression_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="add_math_expression" c:identifier="vda_sql_expression_add_math_expression" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_math_expression" invoker="add_math_expression" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<function name="parse" c:identifier="vda_sql_expression_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
			</return-value>
			<parameters>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</function>
	</interface>
	<record name="SqlExpressionIface" c:type="VdaSqlExpressionIface" glib:is-gtype-struct-for="SqlExpression">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="add_expression">
			<callback name="add_expression" c:type="add_expression">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</instance-parameter>
					<parameter name="exp" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="remove_expression">
			<callback name="remove_expression" c:type="remove_expression">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</instance-parameter>
					<parameter name="exp" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_math_expression">
			<callback name="add_math_expression" c:type="add_math_expression" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="cnc" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
					<parameter name="params" transfer-ownership="none" allow-none="1">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlExpressionField" c:type="VdaSqlExpressionField" c:symbol-prefix="sql_expression_field" glib:type-name="VdaSqlExpressionField" glib:get-type="vda_sql_expression_field_get_type" glib:type-struct="SqlExpressionFieldIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpression"/>
		<property name="table-ref" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_table_ref" c:identifier="vda_sql_expression_field_get_table_ref">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_table_ref" invoker="get_table_ref">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_table_ref" c:identifier="vda_sql_expression_field_set_table_ref">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_table_ref" invoker="set_table_ref">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="name" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_sql_expression_field_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_name" c:identifier="vda_sql_expression_field_set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_name" invoker="set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="allias" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_allias" c:identifier="vda_sql_expression_field_get_allias">
			<return-value transfer-ownership="none" allow-none="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_allias" invoker="get_allias">
			<return-value transfer-ownership="none" allow-none="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_allias" c:identifier="vda_sql_expression_field_set_allias">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_allias" invoker="set_allias">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlExpressionFieldIface" c:type="VdaSqlExpressionFieldIface" glib:is-gtype-struct-for="SqlExpressionField">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_table_ref">
			<callback name="get_table_ref" c:type="get_table_ref">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_table_ref">
			<callback name="set_table_ref" c:type="set_table_ref">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_name">
			<callback name="set_name" c:type="set_name">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_allias">
			<callback name="get_allias" c:type="get_allias">
				<return-value transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_allias">
			<callback name="set_allias" c:type="set_allias">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlExpressionOperator" c:type="VdaSqlExpressionOperator" c:symbol-prefix="sql_expression_operator" glib:type-name="VdaSqlExpressionOperator" glib:get-type="vda_sql_expression_operator_get_type" glib:type-struct="SqlExpressionOperatorIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpression"/>
		<method name="create_field_expression" c:identifier="vda_sql_expression_operator_create_field_expression">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="create_field_expression" invoker="create_field_expression">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="create_value_expression" c:identifier="vda_sql_expression_operator_create_value_expression">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="create_value_expression" invoker="create_value_expression">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="create_parameter_expression" c:identifier="vda_sql_expression_operator_create_parameter_expression">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="gtype" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="create_parameter_expression" invoker="create_parameter_expression">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="gtype" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_and_operator" c:identifier="vda_sql_expression_operator_add_and_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_and_operator" invoker="add_and_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_or_operator" c:identifier="vda_sql_expression_operator_add_or_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_or_operator" invoker="add_or_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_eq_operator" c:identifier="vda_sql_expression_operator_add_eq_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_eq_operator" invoker="add_eq_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_diff_operator" c:identifier="vda_sql_expression_operator_add_diff_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_diff_operator" invoker="add_diff_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_like_operator" c:identifier="vda_sql_expression_operator_add_like_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_like_operator" invoker="add_like_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_gt_operator" c:identifier="vda_sql_expression_operator_add_gt_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_gt_operator" invoker="add_gt_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_geq_operator" c:identifier="vda_sql_expression_operator_add_geq_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_geq_operator" invoker="add_geq_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_leq_operator" c:identifier="vda_sql_expression_operator_add_leq_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_leq_operator" invoker="add_leq_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_similar_to_operator" c:identifier="vda_sql_expression_operator_add_similar_to_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_similar_to_operator" invoker="add_similar_to_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_null_operator" c:identifier="vda_sql_expression_operator_add_is_null_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_null_operator" invoker="add_is_null_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_not_null_operator" c:identifier="vda_sql_expression_operator_add_is_not_null_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_not_null_operator" invoker="add_is_not_null_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_not_operator" c:identifier="vda_sql_expression_operator_add_not_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_not_operator" invoker="add_not_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_true_operator" c:identifier="vda_sql_expression_operator_add_is_true_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_true_operator" invoker="add_is_true_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_not_true_operator" c:identifier="vda_sql_expression_operator_add_is_not_true_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_not_true_operator" invoker="add_is_not_true_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_false_operator" c:identifier="vda_sql_expression_operator_add_is_false_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_false_operator" invoker="add_is_false_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_not_false_operator" c:identifier="vda_sql_expression_operator_add_is_not_false_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_not_false_operator" invoker="add_is_not_false_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_unknown_operator" c:identifier="vda_sql_expression_operator_add_is_unknown_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_unknown_operator" invoker="add_is_unknown_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_not_unknown_operator" c:identifier="vda_sql_expression_operator_add_is_not_unknown_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_not_unknown_operator" invoker="add_is_not_unknown_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_in_operator" c:identifier="vda_sql_expression_operator_add_in_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_in_operator" invoker="add_in_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_not_in_operator" c:identifier="vda_sql_expression_operator_add_not_in_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_not_in_operator" invoker="add_not_in_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_concatenate_operator" c:identifier="vda_sql_expression_operator_add_concatenate_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_concatenate_operator" invoker="add_concatenate_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_plus_operator" c:identifier="vda_sql_expression_operator_add_plus_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_plus_operator" invoker="add_plus_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_minus_operator" c:identifier="vda_sql_expression_operator_add_minus_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_minus_operator" invoker="add_minus_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_star_operator" c:identifier="vda_sql_expression_operator_add_star_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_star_operator" invoker="add_star_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_div_operator" c:identifier="vda_sql_expression_operator_add_div_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_div_operator" invoker="add_div_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_regexp_operator" c:identifier="vda_sql_expression_operator_add_regexp_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_regexp_operator" invoker="add_regexp_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_between_operator" c:identifier="vda_sql_expression_operator_add_between_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_between_operator" invoker="add_between_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_not_between_operator" c:identifier="vda_sql_expression_operator_add_not_between_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_not_between_operator" invoker="add_not_between_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_between_symmetric_operator" c:identifier="vda_sql_expression_operator_add_between_symmetric_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_between_symmetric_operator" invoker="add_between_symmetric_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_not_between_symmetric_operator" c:identifier="vda_sql_expression_operator_add_not_between_symmetric_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_not_between_symmetric_operator" invoker="add_not_between_symmetric_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp3" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_distinct_from_operator" c:identifier="vda_sql_expression_operator_add_is_distinct_from_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_distinct_from_operator" invoker="add_is_distinct_from_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="add_is_not_distinct_from_operator" c:identifier="vda_sql_expression_operator_add_is_not_distinct_from_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="add_is_not_distinct_from_operator" invoker="add_is_not_distinct_from_operator">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
				<parameter name="exp1" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
				<parameter name="exp2" transfer-ownership="none">
					<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="operator-type">
			<type name="Vda.SqlExpressionOperatorType" c:type="VdaSqlExpressionOperatorType"/>
		</property>
		<method name="get_operator_type" c:identifier="vda_sql_expression_operator_get_operator_type">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlExpressionOperatorType" c:type="VdaSqlExpressionOperatorType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_operator_type" invoker="get_operator_type">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlExpressionOperatorType" c:type="VdaSqlExpressionOperatorType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlExpressionOperatorIface" c:type="VdaSqlExpressionOperatorIface" glib:is-gtype-struct-for="SqlExpressionOperator">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="create_field_expression">
			<callback name="create_field_expression" c:type="create_field_expression">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionField" c:type="VdaSqlExpressionField*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="create_value_expression">
			<callback name="create_value_expression" c:type="create_value_expression">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none" allow-none="1">
						<type name="GObject.Value" c:type="GValue*"/>
					</parameter>
					<parameter name="cnc" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="create_parameter_expression">
			<callback name="create_parameter_expression" c:type="create_parameter_expression">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="gtype" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_and_operator">
			<callback name="add_and_operator" c:type="add_and_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_or_operator">
			<callback name="add_or_operator" c:type="add_or_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_eq_operator">
			<callback name="add_eq_operator" c:type="add_eq_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_diff_operator">
			<callback name="add_diff_operator" c:type="add_diff_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_like_operator">
			<callback name="add_like_operator" c:type="add_like_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_gt_operator">
			<callback name="add_gt_operator" c:type="add_gt_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_geq_operator">
			<callback name="add_geq_operator" c:type="add_geq_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_leq_operator">
			<callback name="add_leq_operator" c:type="add_leq_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_similar_to_operator">
			<callback name="add_similar_to_operator" c:type="add_similar_to_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_null_operator">
			<callback name="add_is_null_operator" c:type="add_is_null_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_not_null_operator">
			<callback name="add_is_not_null_operator" c:type="add_is_not_null_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_not_operator">
			<callback name="add_not_operator" c:type="add_not_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_true_operator">
			<callback name="add_is_true_operator" c:type="add_is_true_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_not_true_operator">
			<callback name="add_is_not_true_operator" c:type="add_is_not_true_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_false_operator">
			<callback name="add_is_false_operator" c:type="add_is_false_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_not_false_operator">
			<callback name="add_is_not_false_operator" c:type="add_is_not_false_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_unknown_operator">
			<callback name="add_is_unknown_operator" c:type="add_is_unknown_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_not_unknown_operator">
			<callback name="add_is_not_unknown_operator" c:type="add_is_not_unknown_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_in_operator">
			<callback name="add_in_operator" c:type="add_in_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_not_in_operator">
			<callback name="add_not_in_operator" c:type="add_not_in_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_concatenate_operator">
			<callback name="add_concatenate_operator" c:type="add_concatenate_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_plus_operator">
			<callback name="add_plus_operator" c:type="add_plus_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none" allow-none="1">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_minus_operator">
			<callback name="add_minus_operator" c:type="add_minus_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none" allow-none="1">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_star_operator">
			<callback name="add_star_operator" c:type="add_star_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_div_operator">
			<callback name="add_div_operator" c:type="add_div_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_regexp_operator">
			<callback name="add_regexp_operator" c:type="add_regexp_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_between_operator">
			<callback name="add_between_operator" c:type="add_between_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp3" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_not_between_operator">
			<callback name="add_not_between_operator" c:type="add_not_between_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp3" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_between_symmetric_operator">
			<callback name="add_between_symmetric_operator" c:type="add_between_symmetric_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp3" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_not_between_symmetric_operator">
			<callback name="add_not_between_symmetric_operator" c:type="add_not_between_symmetric_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp3" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_distinct_from_operator">
			<callback name="add_is_distinct_from_operator" c:type="add_is_distinct_from_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="add_is_not_distinct_from_operator">
			<callback name="add_is_not_distinct_from_operator" c:type="add_is_not_distinct_from_operator">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
					<parameter name="exp1" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
					<parameter name="exp2" transfer-ownership="none">
						<type name="Vda.SqlExpression" c:type="VdaSqlExpression*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_operator_type">
			<callback name="get_operator_type" c:type="get_operator_type">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlExpressionOperatorType" c:type="VdaSqlExpressionOperatorType"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionOperator" c:type="VdaSqlExpressionOperator*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<enumeration name="SqlExpressionOperatorType" c:type="VdaSqlExpressionOperatorType" glib:type-name="VdaSqlExpressionOperatorType" glib:get-type="vda_sql_expression_operator_type_get_type">
		<member name="none" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NONE" value="0"/>
		<member name="and" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_AND" value="1"/>
		<member name="or" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_OR" value="2"/>
		<member name="eq" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_EQ" value="3"/>
		<member name="is" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS" value="4"/>
		<member name="like" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_LIKE" value="5"/>
		<member name="between" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_BETWEEN" value="6"/>
		<member name="not_between" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NOT_BETWEEN" value="7"/>
		<member name="between_symmetric" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_BETWEEN_SYMMETRIC" value="8"/>
		<member name="not_between_symmetric" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NOT_BETWEEN_SYMMETRIC" value="9"/>
		<member name="is_distinct_from" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_DISTINCT_FROM" value="10"/>
		<member name="is_not_distinct_from" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_NOT_DISTINCT_FROM" value="11"/>
		<member name="gt" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_GT" value="12"/>
		<member name="lt" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_LT" value="13"/>
		<member name="geq" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_GEQ" value="14"/>
		<member name="leq" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_LEQ" value="15"/>
		<member name="diff" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_DIFF" value="16"/>
		<member name="regexp" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_REGEXP" value="17"/>
		<member name="regexp_ci" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_REGEXP_CI" value="18"/>
		<member name="not_regexp" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NOT_REGEXP" value="19"/>
		<member name="not_regexp_ci" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NOT_REGEXP_CI" value="20"/>
		<member name="similar_to" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_SIMILAR_TO" value="21"/>
		<member name="is_null" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_NULL" value="22"/>
		<member name="is_not_null" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_NOT_NULL" value="23"/>
		<member name="is_true" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_TRUE" value="24"/>
		<member name="is_not_true" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_NOT_TRUE" value="25"/>
		<member name="is_false" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_FALSE" value="26"/>
		<member name="is_not_false" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_NOT_FALSE" value="27"/>
		<member name="is_unknown" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_UNKNOWN" value="28"/>
		<member name="is_not_unknown" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IS_NOT_UNKNOWN" value="29"/>
		<member name="not" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NOT" value="30"/>
		<member name="in" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_IN" value="31"/>
		<member name="not_in" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_NOT_IN" value="32"/>
		<member name="concatenate" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_CONCATENATE" value="33"/>
		<member name="plus" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_PLUS" value="34"/>
		<member name="minus" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_MINUS" value="35"/>
		<member name="star" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_STAR" value="36"/>
		<member name="div" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_DIV" value="37"/>
		<member name="rem" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_REM" value="38"/>
		<member name="bitand" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_BITAND" value="39"/>
		<member name="bitor" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_BITOR" value="40"/>
		<member name="bitnot" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_BITNOT" value="41"/>
		<member name="ilike" c:identifier="VDA_SQL_EXPRESSION_OPERATOR_TYPE_ILIKE" value="42"/>
	</enumeration>
	<interface name="SqlExpressionOperatorGroup" c:type="VdaSqlExpressionOperatorGroup" c:symbol-prefix="sql_expression_operator_group" glib:type-name="VdaSqlExpressionOperatorGroup" glib:get-type="vda_sql_expression_operator_group_get_type" glib:type-struct="SqlExpressionOperatorGroupIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorGroupIface" c:type="VdaSqlExpressionOperatorGroupIface" glib:is-gtype-struct-for="SqlExpressionOperatorGroup">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorMultiterm" c:type="VdaSqlExpressionOperatorMultiterm" c:symbol-prefix="sql_expression_operator_multiterm" glib:type-name="VdaSqlExpressionOperatorMultiterm" glib:get-type="vda_sql_expression_operator_multiterm_get_type" glib:type-struct="SqlExpressionOperatorMultitermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorMultitermIface" c:type="VdaSqlExpressionOperatorMultitermIface" glib:is-gtype-struct-for="SqlExpressionOperatorMultiterm">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorAnd" c:type="VdaSqlExpressionOperatorAnd" c:symbol-prefix="sql_expression_operator_and" glib:type-name="VdaSqlExpressionOperatorAnd" glib:get-type="vda_sql_expression_operator_and_get_type" glib:type-struct="SqlExpressionOperatorAndIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorMultiterm"/>
	</interface>
	<record name="SqlExpressionOperatorAndIface" c:type="VdaSqlExpressionOperatorAndIface" glib:is-gtype-struct-for="SqlExpressionOperatorAnd">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorOr" c:type="VdaSqlExpressionOperatorOr" c:symbol-prefix="sql_expression_operator_or" glib:type-name="VdaSqlExpressionOperatorOr" glib:get-type="vda_sql_expression_operator_or_get_type" glib:type-struct="SqlExpressionOperatorOrIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorMultiterm"/>
	</interface>
	<record name="SqlExpressionOperatorOrIface" c:type="VdaSqlExpressionOperatorOrIface" glib:is-gtype-struct-for="SqlExpressionOperatorOr">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorBinaryterm" c:type="VdaSqlExpressionOperatorBinaryterm" c:symbol-prefix="sql_expression_operator_binaryterm" glib:type-name="VdaSqlExpressionOperatorBinaryterm" glib:get-type="vda_sql_expression_operator_binaryterm_get_type" glib:type-struct="SqlExpressionOperatorBinarytermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorBinarytermIface" c:type="VdaSqlExpressionOperatorBinarytermIface" glib:is-gtype-struct-for="SqlExpressionOperatorBinaryterm">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorEq" c:type="VdaSqlExpressionOperatorEq" c:symbol-prefix="sql_expression_operator_eq" glib:type-name="VdaSqlExpressionOperatorEq" glib:get-type="vda_sql_expression_operator_eq_get_type" glib:type-struct="SqlExpressionOperatorEqIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorEqIface" c:type="VdaSqlExpressionOperatorEqIface" glib:is-gtype-struct-for="SqlExpressionOperatorEq">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotEq" c:type="VdaSqlExpressionOperatorNotEq" c:symbol-prefix="sql_expression_operator_not_eq" glib:type-name="VdaSqlExpressionOperatorNotEq" glib:get-type="vda_sql_expression_operator_not_eq_get_type" glib:type-struct="SqlExpressionOperatorNotEqIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorNotEqIface" c:type="VdaSqlExpressionOperatorNotEqIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotEq">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorDiff" c:type="VdaSqlExpressionOperatorDiff" c:symbol-prefix="sql_expression_operator_diff" glib:type-name="VdaSqlExpressionOperatorDiff" glib:get-type="vda_sql_expression_operator_diff_get_type" glib:type-struct="SqlExpressionOperatorDiffIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorDiffIface" c:type="VdaSqlExpressionOperatorDiffIface" glib:is-gtype-struct-for="SqlExpressionOperatorDiff">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorGt" c:type="VdaSqlExpressionOperatorGt" c:symbol-prefix="sql_expression_operator_gt" glib:type-name="VdaSqlExpressionOperatorGt" glib:get-type="vda_sql_expression_operator_gt_get_type" glib:type-struct="SqlExpressionOperatorGtIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorGtIface" c:type="VdaSqlExpressionOperatorGtIface" glib:is-gtype-struct-for="SqlExpressionOperatorGt">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorLt" c:type="VdaSqlExpressionOperatorLt" c:symbol-prefix="sql_expression_operator_lt" glib:type-name="VdaSqlExpressionOperatorLt" glib:get-type="vda_sql_expression_operator_lt_get_type" glib:type-struct="SqlExpressionOperatorLtIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorLtIface" c:type="VdaSqlExpressionOperatorLtIface" glib:is-gtype-struct-for="SqlExpressionOperatorLt">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorGeq" c:type="VdaSqlExpressionOperatorGeq" c:symbol-prefix="sql_expression_operator_geq" glib:type-name="VdaSqlExpressionOperatorGeq" glib:get-type="vda_sql_expression_operator_geq_get_type" glib:type-struct="SqlExpressionOperatorGeqIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorGeqIface" c:type="VdaSqlExpressionOperatorGeqIface" glib:is-gtype-struct-for="SqlExpressionOperatorGeq">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorLeq" c:type="VdaSqlExpressionOperatorLeq" c:symbol-prefix="sql_expression_operator_leq" glib:type-name="VdaSqlExpressionOperatorLeq" glib:get-type="vda_sql_expression_operator_leq_get_type" glib:type-struct="SqlExpressionOperatorLeqIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorLeqIface" c:type="VdaSqlExpressionOperatorLeqIface" glib:is-gtype-struct-for="SqlExpressionOperatorLeq">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorRegexp" c:type="VdaSqlExpressionOperatorRegexp" c:symbol-prefix="sql_expression_operator_regexp" glib:type-name="VdaSqlExpressionOperatorRegexp" glib:get-type="vda_sql_expression_operator_regexp_get_type" glib:type-struct="SqlExpressionOperatorRegexpIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorRegexpIface" c:type="VdaSqlExpressionOperatorRegexpIface" glib:is-gtype-struct-for="SqlExpressionOperatorRegexp">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorStar" c:type="VdaSqlExpressionOperatorStar" c:symbol-prefix="sql_expression_operator_star" glib:type-name="VdaSqlExpressionOperatorStar" glib:get-type="vda_sql_expression_operator_star_get_type" glib:type-struct="SqlExpressionOperatorStarIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorStarIface" c:type="VdaSqlExpressionOperatorStarIface" glib:is-gtype-struct-for="SqlExpressionOperatorStar">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorDiv" c:type="VdaSqlExpressionOperatorDiv" c:symbol-prefix="sql_expression_operator_div" glib:type-name="VdaSqlExpressionOperatorDiv" glib:get-type="vda_sql_expression_operator_div_get_type" glib:type-struct="SqlExpressionOperatorDivIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorDivIface" c:type="VdaSqlExpressionOperatorDivIface" glib:is-gtype-struct-for="SqlExpressionOperatorDiv">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIn" c:type="VdaSqlExpressionOperatorIn" c:symbol-prefix="sql_expression_operator_in" glib:type-name="VdaSqlExpressionOperatorIn" glib:get-type="vda_sql_expression_operator_in_get_type" glib:type-struct="SqlExpressionOperatorInIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorInIface" c:type="VdaSqlExpressionOperatorInIface" glib:is-gtype-struct-for="SqlExpressionOperatorIn">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotIn" c:type="VdaSqlExpressionOperatorNotIn" c:symbol-prefix="sql_expression_operator_not_in" glib:type-name="VdaSqlExpressionOperatorNotIn" glib:get-type="vda_sql_expression_operator_not_in_get_type" glib:type-struct="SqlExpressionOperatorNotInIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorNotInIface" c:type="VdaSqlExpressionOperatorNotInIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotIn">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorConcatenate" c:type="VdaSqlExpressionOperatorConcatenate" c:symbol-prefix="sql_expression_operator_concatenate" glib:type-name="VdaSqlExpressionOperatorConcatenate" glib:get-type="vda_sql_expression_operator_concatenate_get_type" glib:type-struct="SqlExpressionOperatorConcatenateIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorConcatenateIface" c:type="VdaSqlExpressionOperatorConcatenateIface" glib:is-gtype-struct-for="SqlExpressionOperatorConcatenate">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorSimilarTo" c:type="VdaSqlExpressionOperatorSimilarTo" c:symbol-prefix="sql_expression_operator_similar_to" glib:type-name="VdaSqlExpressionOperatorSimilarTo" glib:get-type="vda_sql_expression_operator_similar_to_get_type" glib:type-struct="SqlExpressionOperatorSimilarToIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorSimilarToIface" c:type="VdaSqlExpressionOperatorSimilarToIface" glib:is-gtype-struct-for="SqlExpressionOperatorSimilarTo">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorLike" c:type="VdaSqlExpressionOperatorLike" c:symbol-prefix="sql_expression_operator_like" glib:type-name="VdaSqlExpressionOperatorLike" glib:get-type="vda_sql_expression_operator_like_get_type" glib:type-struct="SqlExpressionOperatorLikeIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorLikeIface" c:type="VdaSqlExpressionOperatorLikeIface" glib:is-gtype-struct-for="SqlExpressionOperatorLike">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotLike" c:type="VdaSqlExpressionOperatorNotLike" c:symbol-prefix="sql_expression_operator_not_like" glib:type-name="VdaSqlExpressionOperatorNotLike" glib:get-type="vda_sql_expression_operator_not_like_get_type" glib:type-struct="SqlExpressionOperatorNotLikeIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorNotLikeIface" c:type="VdaSqlExpressionOperatorNotLikeIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotLike">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIlike" c:type="VdaSqlExpressionOperatorIlike" c:symbol-prefix="sql_expression_operator_ilike" glib:type-name="VdaSqlExpressionOperatorIlike" glib:get-type="vda_sql_expression_operator_ilike_get_type" glib:type-struct="SqlExpressionOperatorIlikeIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorIlikeIface" c:type="VdaSqlExpressionOperatorIlikeIface" glib:is-gtype-struct-for="SqlExpressionOperatorIlike">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotIlike" c:type="VdaSqlExpressionOperatorNotIlike" c:symbol-prefix="sql_expression_operator_not_ilike" glib:type-name="VdaSqlExpressionOperatorNotIlike" glib:get-type="vda_sql_expression_operator_not_ilike_get_type" glib:type-struct="SqlExpressionOperatorNotIlikeIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorNotIlikeIface" c:type="VdaSqlExpressionOperatorNotIlikeIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotIlike">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorBinaryUnaryterm" c:type="VdaSqlExpressionOperatorBinaryUnaryterm" c:symbol-prefix="sql_expression_operator_binary_unaryterm" glib:type-name="VdaSqlExpressionOperatorBinaryUnaryterm" glib:get-type="vda_sql_expression_operator_binary_unaryterm_get_type" glib:type-struct="SqlExpressionOperatorBinaryUnarytermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorBinaryUnarytermIface" c:type="VdaSqlExpressionOperatorBinaryUnarytermIface" glib:is-gtype-struct-for="SqlExpressionOperatorBinaryUnaryterm">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorMinus" c:type="VdaSqlExpressionOperatorMinus" c:symbol-prefix="sql_expression_operator_minus" glib:type-name="VdaSqlExpressionOperatorMinus" glib:get-type="vda_sql_expression_operator_minus_get_type" glib:type-struct="SqlExpressionOperatorMinusIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryUnaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorMinusIface" c:type="VdaSqlExpressionOperatorMinusIface" glib:is-gtype-struct-for="SqlExpressionOperatorMinus">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorPlus" c:type="VdaSqlExpressionOperatorPlus" c:symbol-prefix="sql_expression_operator_plus" glib:type-name="VdaSqlExpressionOperatorPlus" glib:get-type="vda_sql_expression_operator_plus_get_type" glib:type-struct="SqlExpressionOperatorPlusIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryUnaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorPlusIface" c:type="VdaSqlExpressionOperatorPlusIface" glib:is-gtype-struct-for="SqlExpressionOperatorPlus">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorInitialUnaryterm" c:type="VdaSqlExpressionOperatorInitialUnaryterm" c:symbol-prefix="sql_expression_operator_initial_unaryterm" glib:type-name="VdaSqlExpressionOperatorInitialUnaryterm" glib:get-type="vda_sql_expression_operator_initial_unaryterm_get_type" glib:type-struct="SqlExpressionOperatorInitialUnarytermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorInitialUnarytermIface" c:type="VdaSqlExpressionOperatorInitialUnarytermIface" glib:is-gtype-struct-for="SqlExpressionOperatorInitialUnaryterm">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNot" c:type="VdaSqlExpressionOperatorNot" c:symbol-prefix="sql_expression_operator_not" glib:type-name="VdaSqlExpressionOperatorNot" glib:get-type="vda_sql_expression_operator_not_get_type" glib:type-struct="SqlExpressionOperatorNotIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorInitialUnaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorNotIface" c:type="VdaSqlExpressionOperatorNotIface" glib:is-gtype-struct-for="SqlExpressionOperatorNot">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorFinalUnaryterm" c:type="VdaSqlExpressionOperatorFinalUnaryterm" c:symbol-prefix="sql_expression_operator_final_unaryterm" glib:type-name="VdaSqlExpressionOperatorFinalUnaryterm" glib:get-type="vda_sql_expression_operator_final_unaryterm_get_type" glib:type-struct="SqlExpressionOperatorFinalUnarytermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorFinalUnarytermIface" c:type="VdaSqlExpressionOperatorFinalUnarytermIface" glib:is-gtype-struct-for="SqlExpressionOperatorFinalUnaryterm">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIs" c:type="VdaSqlExpressionOperatorIs" c:symbol-prefix="sql_expression_operator_is" glib:type-name="VdaSqlExpressionOperatorIs" glib:get-type="vda_sql_expression_operator_is_get_type" glib:type-struct="SqlExpressionOperatorIsIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorFinalUnaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorIsIface" c:type="VdaSqlExpressionOperatorIsIface" glib:is-gtype-struct-for="SqlExpressionOperatorIs">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNot" c:type="VdaSqlExpressionOperatorIsNot" c:symbol-prefix="sql_expression_operator_is_not" glib:type-name="VdaSqlExpressionOperatorIsNot" glib:get-type="vda_sql_expression_operator_is_not_get_type" glib:type-struct="SqlExpressionOperatorIsNotIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIs"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotIface" c:type="VdaSqlExpressionOperatorIsNotIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNot">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNull" c:type="VdaSqlExpressionOperatorIsNull" c:symbol-prefix="sql_expression_operator_is_null" glib:type-name="VdaSqlExpressionOperatorIsNull" glib:get-type="vda_sql_expression_operator_is_null_get_type" glib:type-struct="SqlExpressionOperatorIsNullIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIs"/>
	</interface>
	<record name="SqlExpressionOperatorIsNullIface" c:type="VdaSqlExpressionOperatorIsNullIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNull">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNotNull" c:type="VdaSqlExpressionOperatorIsNotNull" c:symbol-prefix="sql_expression_operator_is_not_null" glib:type-name="VdaSqlExpressionOperatorIsNotNull" glib:get-type="vda_sql_expression_operator_is_not_null_get_type" glib:type-struct="SqlExpressionOperatorIsNotNullIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIsNot"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotNullIface" c:type="VdaSqlExpressionOperatorIsNotNullIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNotNull">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsTrue" c:type="VdaSqlExpressionOperatorIsTrue" c:symbol-prefix="sql_expression_operator_is_true" glib:type-name="VdaSqlExpressionOperatorIsTrue" glib:get-type="vda_sql_expression_operator_is_true_get_type" glib:type-struct="SqlExpressionOperatorIsTrueIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIs"/>
	</interface>
	<record name="SqlExpressionOperatorIsTrueIface" c:type="VdaSqlExpressionOperatorIsTrueIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsTrue">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNotTrue" c:type="VdaSqlExpressionOperatorIsNotTrue" c:symbol-prefix="sql_expression_operator_is_not_true" glib:type-name="VdaSqlExpressionOperatorIsNotTrue" glib:get-type="vda_sql_expression_operator_is_not_true_get_type" glib:type-struct="SqlExpressionOperatorIsNotTrueIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIsNot"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotTrueIface" c:type="VdaSqlExpressionOperatorIsNotTrueIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNotTrue">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsFalse" c:type="VdaSqlExpressionOperatorIsFalse" c:symbol-prefix="sql_expression_operator_is_false" glib:type-name="VdaSqlExpressionOperatorIsFalse" glib:get-type="vda_sql_expression_operator_is_false_get_type" glib:type-struct="SqlExpressionOperatorIsFalseIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIs"/>
	</interface>
	<record name="SqlExpressionOperatorIsFalseIface" c:type="VdaSqlExpressionOperatorIsFalseIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsFalse">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNotFalse" c:type="VdaSqlExpressionOperatorIsNotFalse" c:symbol-prefix="sql_expression_operator_is_not_false" glib:type-name="VdaSqlExpressionOperatorIsNotFalse" glib:get-type="vda_sql_expression_operator_is_not_false_get_type" glib:type-struct="SqlExpressionOperatorIsNotFalseIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIsNot"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotFalseIface" c:type="VdaSqlExpressionOperatorIsNotFalseIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNotFalse">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsUnknown" c:type="VdaSqlExpressionOperatorIsUnknown" c:symbol-prefix="sql_expression_operator_is_unknown" glib:type-name="VdaSqlExpressionOperatorIsUnknown" glib:get-type="vda_sql_expression_operator_is_unknown_get_type" glib:type-struct="SqlExpressionOperatorIsUnknownIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIs"/>
	</interface>
	<record name="SqlExpressionOperatorIsUnknownIface" c:type="VdaSqlExpressionOperatorIsUnknownIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsUnknown">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNotUnknown" c:type="VdaSqlExpressionOperatorIsNotUnknown" c:symbol-prefix="sql_expression_operator_is_not_unknown" glib:type-name="VdaSqlExpressionOperatorIsNotUnknown" glib:get-type="vda_sql_expression_operator_is_not_unknown_get_type" glib:type-struct="SqlExpressionOperatorIsNotUnknownIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIs"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotUnknownIface" c:type="VdaSqlExpressionOperatorIsNotUnknownIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNotUnknown">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsDistinct" c:type="VdaSqlExpressionOperatorIsDistinct" c:symbol-prefix="sql_expression_operator_is_distinct" glib:type-name="VdaSqlExpressionOperatorIsDistinct" glib:get-type="vda_sql_expression_operator_is_distinct_get_type" glib:type-struct="SqlExpressionOperatorIsDistinctIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBinaryterm"/>
	</interface>
	<record name="SqlExpressionOperatorIsDistinctIface" c:type="VdaSqlExpressionOperatorIsDistinctIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsDistinct">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNotDistinct" c:type="VdaSqlExpressionOperatorIsNotDistinct" c:symbol-prefix="sql_expression_operator_is_not_distinct" glib:type-name="VdaSqlExpressionOperatorIsNotDistinct" glib:get-type="vda_sql_expression_operator_is_not_distinct_get_type" glib:type-struct="SqlExpressionOperatorIsNotDistinctIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIsDistinct"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotDistinctIface" c:type="VdaSqlExpressionOperatorIsNotDistinctIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNotDistinct">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsDistinctFrom" c:type="VdaSqlExpressionOperatorIsDistinctFrom" c:symbol-prefix="sql_expression_operator_is_distinct_from" glib:type-name="VdaSqlExpressionOperatorIsDistinctFrom" glib:get-type="vda_sql_expression_operator_is_distinct_from_get_type" glib:type-struct="SqlExpressionOperatorIsDistinctFromIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIsDistinct"/>
	</interface>
	<record name="SqlExpressionOperatorIsDistinctFromIface" c:type="VdaSqlExpressionOperatorIsDistinctFromIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsDistinctFrom">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorIsNotDistinctFrom" c:type="VdaSqlExpressionOperatorIsNotDistinctFrom" c:symbol-prefix="sql_expression_operator_is_not_distinct_from" glib:type-name="VdaSqlExpressionOperatorIsNotDistinctFrom" glib:get-type="vda_sql_expression_operator_is_not_distinct_from_get_type" glib:type-struct="SqlExpressionOperatorIsNotDistinctFromIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorIsNotDistinct"/>
	</interface>
	<record name="SqlExpressionOperatorIsNotDistinctFromIface" c:type="VdaSqlExpressionOperatorIsNotDistinctFromIface" glib:is-gtype-struct-for="SqlExpressionOperatorIsNotDistinctFrom">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorThreeterm" c:type="VdaSqlExpressionOperatorThreeterm" c:symbol-prefix="sql_expression_operator_threeterm" glib:type-name="VdaSqlExpressionOperatorThreeterm" glib:get-type="vda_sql_expression_operator_threeterm_get_type" glib:type-struct="SqlExpressionOperatorThreetermIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperator"/>
	</interface>
	<record name="SqlExpressionOperatorThreetermIface" c:type="VdaSqlExpressionOperatorThreetermIface" glib:is-gtype-struct-for="SqlExpressionOperatorThreeterm">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorBetween" c:type="VdaSqlExpressionOperatorBetween" c:symbol-prefix="sql_expression_operator_between" glib:type-name="VdaSqlExpressionOperatorBetween" glib:get-type="vda_sql_expression_operator_between_get_type" glib:type-struct="SqlExpressionOperatorBetweenIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorThreeterm"/>
	</interface>
	<record name="SqlExpressionOperatorBetweenIface" c:type="VdaSqlExpressionOperatorBetweenIface" glib:is-gtype-struct-for="SqlExpressionOperatorBetween">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorBetweenAnd" c:type="VdaSqlExpressionOperatorBetweenAnd" c:symbol-prefix="sql_expression_operator_between_and" glib:type-name="VdaSqlExpressionOperatorBetweenAnd" glib:get-type="vda_sql_expression_operator_between_and_get_type" glib:type-struct="SqlExpressionOperatorBetweenAndIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBetween"/>
	</interface>
	<record name="SqlExpressionOperatorBetweenAndIface" c:type="VdaSqlExpressionOperatorBetweenAndIface" glib:is-gtype-struct-for="SqlExpressionOperatorBetweenAnd">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotBetween" c:type="VdaSqlExpressionOperatorNotBetween" c:symbol-prefix="sql_expression_operator_not_between" glib:type-name="VdaSqlExpressionOperatorNotBetween" glib:get-type="vda_sql_expression_operator_not_between_get_type" glib:type-struct="SqlExpressionOperatorNotBetweenIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBetween"/>
	</interface>
	<record name="SqlExpressionOperatorNotBetweenIface" c:type="VdaSqlExpressionOperatorNotBetweenIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotBetween">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotBetweenAnd" c:type="VdaSqlExpressionOperatorNotBetweenAnd" c:symbol-prefix="sql_expression_operator_not_between_and" glib:type-name="VdaSqlExpressionOperatorNotBetweenAnd" glib:get-type="vda_sql_expression_operator_not_between_and_get_type" glib:type-struct="SqlExpressionOperatorNotBetweenAndIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorNotBetween"/>
	</interface>
	<record name="SqlExpressionOperatorNotBetweenAndIface" c:type="VdaSqlExpressionOperatorNotBetweenAndIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotBetweenAnd">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorBetweenSymmetric" c:type="VdaSqlExpressionOperatorBetweenSymmetric" c:symbol-prefix="sql_expression_operator_between_symmetric" glib:type-name="VdaSqlExpressionOperatorBetweenSymmetric" glib:get-type="vda_sql_expression_operator_between_symmetric_get_type" glib:type-struct="SqlExpressionOperatorBetweenSymmetricIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBetween"/>
	</interface>
	<record name="SqlExpressionOperatorBetweenSymmetricIface" c:type="VdaSqlExpressionOperatorBetweenSymmetricIface" glib:is-gtype-struct-for="SqlExpressionOperatorBetweenSymmetric">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorBetweenSymmetricAnd" c:type="VdaSqlExpressionOperatorBetweenSymmetricAnd" c:symbol-prefix="sql_expression_operator_between_symmetric_and" glib:type-name="VdaSqlExpressionOperatorBetweenSymmetricAnd" glib:get-type="vda_sql_expression_operator_between_symmetric_and_get_type" glib:type-struct="SqlExpressionOperatorBetweenSymmetricAndIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBetweenSymmetric"/>
	</interface>
	<record name="SqlExpressionOperatorBetweenSymmetricAndIface" c:type="VdaSqlExpressionOperatorBetweenSymmetricAndIface" glib:is-gtype-struct-for="SqlExpressionOperatorBetweenSymmetricAnd">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotBetweenSymmetric" c:type="VdaSqlExpressionOperatorNotBetweenSymmetric" c:symbol-prefix="sql_expression_operator_not_between_symmetric" glib:type-name="VdaSqlExpressionOperatorNotBetweenSymmetric" glib:get-type="vda_sql_expression_operator_not_between_symmetric_get_type" glib:type-struct="SqlExpressionOperatorNotBetweenSymmetricIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorBetweenSymmetric"/>
	</interface>
	<record name="SqlExpressionOperatorNotBetweenSymmetricIface" c:type="VdaSqlExpressionOperatorNotBetweenSymmetricIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotBetweenSymmetric">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionOperatorNotBetweenSymmetricAnd" c:type="VdaSqlExpressionOperatorNotBetweenSymmetricAnd" c:symbol-prefix="sql_expression_operator_not_between_symmetric_and" glib:type-name="VdaSqlExpressionOperatorNotBetweenSymmetricAnd" glib:get-type="vda_sql_expression_operator_not_between_symmetric_and_get_type" glib:type-struct="SqlExpressionOperatorNotBetweenSymmetricAndIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpressionOperatorNotBetweenSymmetric"/>
	</interface>
	<record name="SqlExpressionOperatorNotBetweenSymmetricAndIface" c:type="VdaSqlExpressionOperatorNotBetweenSymmetricAndIface" glib:is-gtype-struct-for="SqlExpressionOperatorNotBetweenSymmetricAnd">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlExpressionValue" c:type="VdaSqlExpressionValue" c:symbol-prefix="sql_expression_value" glib:type-name="VdaSqlExpressionValue" glib:get-type="vda_sql_expression_value_get_type" glib:type-struct="SqlExpressionValueIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpression"/>
		<method name="set_math_expression_value" c:identifier="vda_sql_expression_value_set_math_expression_value" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_math_expression_value" invoker="set_math_expression_value" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="params" transfer-ownership="none" allow-none="1">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="connection" writable="1">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_connection" c:identifier="vda_sql_expression_value_get_connection">
			<return-value transfer-ownership="none" allow-none="1">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection" invoker="get_connection">
			<return-value transfer-ownership="none" allow-none="1">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_connection" c:identifier="vda_sql_expression_value_set_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_connection" invoker="set_connection">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="value" writable="1">
			<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
		</property>
		<method name="get_value" c:identifier="vda_sql_expression_value_get_value">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_value" invoker="get_value">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_value" c:identifier="vda_sql_expression_value_set_value">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_value" invoker="set_value">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlExpressionValueIface" c:type="VdaSqlExpressionValueIface" glib:is-gtype-struct-for="SqlExpressionValue">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="set_math_expression_value">
			<callback name="set_math_expression_value" c:type="set_math_expression_value" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="params" transfer-ownership="none" allow-none="1">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_connection">
			<callback name="get_connection" c:type="get_connection">
				<return-value transfer-ownership="none" allow-none="1">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_connection">
			<callback name="set_connection" c:type="set_connection">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_value">
			<callback name="get_value" c:type="get_value">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_value">
			<callback name="set_value" c:type="set_value">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValue" c:type="VdaSqlExpressionValue*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter" c:symbol-prefix="sql_expression_value_parameter" glib:type-name="VdaSqlExpressionValueParameter" glib:get-type="vda_sql_expression_value_parameter_get_type" glib:type-struct="SqlExpressionValueParameterIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlExpression"/>
		<prerequisite name="Vda.SqlExpressionValue"/>
		<method name="parse" c:identifier="vda_sql_expression_value_parameter_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<function name="gtype_from_string" c:identifier="vda_sql_expression_value_parameter_gtype_from_string">
			<return-value transfer-ownership="full">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</function>
		<property name="parameters" writable="1">
			<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
		</property>
		<method name="get_parameters" c:identifier="vda_sql_expression_value_parameter_get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_parameters" invoker="get_parameters">
			<return-value transfer-ownership="none">
				<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_parameters" c:identifier="vda_sql_expression_value_parameter_set_parameters">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_parameters" invoker="set_parameters">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="name" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_sql_expression_value_parameter_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_name" c:identifier="vda_sql_expression_value_parameter_set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_name" invoker="set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="gtype" writable="1">
			<type name="GType" c:type="GType"/>
		</property>
		<method name="get_gtype" c:identifier="vda_sql_expression_value_parameter_get_gtype">
			<return-value transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_gtype" invoker="get_gtype">
			<return-value transfer-ownership="none">
				<type name="GType" c:type="GType"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_gtype" c:identifier="vda_sql_expression_value_parameter_set_gtype">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_gtype" invoker="set_gtype">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlExpressionValueParameterIface" c:type="VdaSqlExpressionValueParameterIface" glib:is-gtype-struct-for="SqlExpressionValueParameter">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse" throws="1">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_parameters">
			<callback name="get_parameters" c:type="get_parameters">
				<return-value transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_parameters">
			<callback name="set_parameters" c:type="set_parameters">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_name">
			<callback name="set_name" c:type="set_name">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_gtype">
			<callback name="get_gtype" c:type="get_gtype">
				<return-value transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_gtype">
			<callback name="set_gtype" c:type="set_gtype">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlExpressionValueParameter" c:type="VdaSqlExpressionValueParameter*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlParameters" c:type="VdaSqlParameters" c:symbol-prefix="sql_parameters" glib:type-name="VdaSqlParameters" glib:get-type="vda_sql_parameters_get_type" glib:type-struct="SqlParametersIface">
		<prerequisite name="GObject.Object"/>
		<method name="set_value" c:identifier="vda_sql_parameters_set_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_value" invoker="set_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_value" c:identifier="vda_sql_parameters_get_value">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GObject.Value" c:type="GValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_value" invoker="get_value">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="GObject.Value" c:type="GValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="set_sql_value" c:identifier="vda_sql_parameters_set_sql_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_sql_value" invoker="set_sql_value">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_sql_value" c:identifier="vda_sql_parameters_get_sql_value">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_sql_value" invoker="get_sql_value">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="has_param" c:identifier="vda_sql_parameters_has_param">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="has_param" invoker="has_param">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
				</instance-parameter>
				<parameter name="name" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlParametersIface" c:type="VdaSqlParametersIface" glib:is-gtype-struct-for="SqlParameters">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="set_value">
			<callback name="set_value" c:type="set_value">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="GObject.Value" c:type="GValue"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_value">
			<callback name="get_value" c:type="get_value">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_sql_value">
			<callback name="set_sql_value" c:type="set_sql_value">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_sql_value">
			<callback name="get_sql_value" c:type="get_sql_value">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="has_param">
			<callback name="has_param" c:type="has_param">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlParameters" c:type="VdaSqlParameters*"/>
					</instance-parameter>
					<parameter name="name" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlParser" c:type="VdaSqlParser" c:symbol-prefix="sql_parser" glib:type-name="VdaSqlParser" glib:get-type="vda_sql_parser_get_type" glib:type-struct="SqlParserIface">
		<prerequisite name="GObject.Object"/>
		<method name="parse" c:identifier="vda_sql_parser_parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandParametrized" c:type="VdaSqlCommandParametrized*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParser" c:type="VdaSqlParser*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse" throws="1">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlCommandParametrized" c:type="VdaSqlCommandParametrized*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlParser" c:type="VdaSqlParser*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
				<parameter name="cnc" transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlParserIface" c:type="VdaSqlParserIface" glib:is-gtype-struct-for="SqlParser">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse" throws="1">
				<return-value transfer-ownership="full">
					<type name="Vda.SqlCommandParametrized" c:type="VdaSqlCommandParametrized*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlParser" c:type="VdaSqlParser*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
					<parameter name="cnc" transfer-ownership="none">
						<type name="Vda.Connection" c:type="VdaConnection*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlTableReference" c:type="VdaSqlTableReference" c:symbol-prefix="sql_table_reference" glib:type-name="VdaSqlTableReference" glib:get-type="vda_sql_table_reference_get_type" glib:type-struct="SqlTableReferenceIface">
		<prerequisite name="GObject.Object"/>
		<property name="name" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_sql_table_reference_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_name" c:identifier="vda_sql_table_reference_set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_name" invoker="set_name">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="allias" writable="1">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_allias" c:identifier="vda_sql_table_reference_get_allias">
			<return-value transfer-ownership="none" allow-none="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_allias" invoker="get_allias">
			<return-value transfer-ownership="none" allow-none="1">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_allias" c:identifier="vda_sql_table_reference_set_allias">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_allias" invoker="set_allias">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlTableReferenceIface" c:type="VdaSqlTableReferenceIface" glib:is-gtype-struct-for="SqlTableReference">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_name">
			<callback name="set_name" c:type="set_name">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_allias">
			<callback name="get_allias" c:type="get_allias">
				<return-value transfer-ownership="none" allow-none="1">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_allias">
			<callback name="set_allias" c:type="set_allias">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlTableReference" c:type="VdaSqlTableReference*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none" allow-none="1">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="Stringifiable" c:type="VdaStringifiable" c:symbol-prefix="stringifiable" glib:type-name="VdaStringifiable" glib:get-type="vda_stringifiable_get_type" glib:type-struct="StringifiableIface">
		<prerequisite name="GObject.Object"/>
		<method name="to_string" c:identifier="vda_stringifiable_to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Stringifiable" c:type="VdaStringifiable*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_string" invoker="to_string">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.Stringifiable" c:type="VdaStringifiable*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="StringifiableIface" c:type="VdaStringifiableIface" glib:is-gtype-struct-for="Stringifiable">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="to_string">
			<callback name="to_string" c:type="to_string">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.Stringifiable" c:type="VdaStringifiable*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValue" c:type="VdaSqlValue" c:symbol-prefix="sql_value" glib:type-name="VdaSqlValue" glib:get-type="vda_sql_value_get_type" glib:type-struct="SqlValueIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.Stringifiable"/>
		<method name="parse" c:identifier="vda_sql_value_parse">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="parse" invoker="parse">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="from_value" c:identifier="vda_sql_value_from_value">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="from_value" invoker="from_value">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="val" transfer-ownership="none">
					<type name="GObject.Value" c:type="GValue"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="cast" c:identifier="vda_sql_value_cast">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="cast" invoker="cast">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="is_compatible" c:identifier="vda_sql_value_is_compatible">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="is_compatible" invoker="is_compatible">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="to_gvalue" c:identifier="vda_sql_value_to_gvalue">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="to_gvalue" invoker="to_gvalue">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="to_string_quoted" c:identifier="vda_sql_value_to_string_quoted">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_string_quoted" invoker="to_string_quoted">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="to_sql_expression" c:identifier="vda_sql_value_to_sql_expression">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="to_sql_expression" invoker="to_sql_expression">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<function name="new_from_gvalue" c:identifier="vda_sql_value_new_from_gvalue">
			<return-value transfer-ownership="full">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<parameter name="val" transfer-ownership="none" allow-none="1">
					<type name="GObject.Value" c:type="GValue*"/>
				</parameter>
			</parameters>
		</function>
		<function name="new_from_gtype" c:identifier="vda_sql_value_new_from_gtype">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
			</return-value>
			<parameters>
				<parameter name="type" transfer-ownership="none">
					<type name="GType" c:type="GType"/>
				</parameter>
			</parameters>
		</function>
		<property name="name">
			<type name="utf8" c:type="gchar*"/>
		</property>
		<method name="get_name" c:identifier="vda_sql_value_get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_name" invoker="get_name">
			<return-value transfer-ownership="none">
				<type name="utf8" c:type="const gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueIface" c:type="VdaSqlValueIface" glib:is-gtype-struct-for="SqlValue">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="parse">
			<callback name="parse" c:type="parse">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="from_value">
			<callback name="from_value" c:type="from_value">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
					<parameter name="val" transfer-ownership="none">
						<type name="GObject.Value" c:type="GValue"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="cast">
			<callback name="cast" c:type="cast">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
					<parameter name="type" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="is_compatible">
			<callback name="is_compatible" c:type="is_compatible">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
					<parameter name="type" transfer-ownership="none">
						<type name="GType" c:type="GType"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_gvalue">
			<callback name="to_gvalue" c:type="to_gvalue">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
					<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
						<type name="GObject.Value" c:type="GValue*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_string_quoted">
			<callback name="to_string_quoted" c:type="to_string_quoted">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="to_sql_expression">
			<callback name="to_sql_expression" c:type="to_sql_expression">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_name">
			<callback name="get_name" c:type="get_name">
				<return-value transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValue" c:type="VdaSqlValue*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueNull" c:type="VdaSqlValueNull" c:symbol-prefix="sql_value_null" glib:type-name="VdaSqlValueNull" glib:get-type="vda_sql_value_null_get_type" glib:type-struct="SqlValueNullIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
	</interface>
	<record name="SqlValueNullIface" c:type="VdaSqlValueNullIface" glib:is-gtype-struct-for="SqlValueNull">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueBool" c:type="VdaSqlValueBool" c:symbol-prefix="sql_value_bool" glib:type-name="VdaSqlValueBool" glib:get-type="vda_sql_value_bool_get_type" glib:type-struct="SqlValueBoolIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
	</interface>
	<record name="SqlValueBoolIface" c:type="VdaSqlValueBoolIface" glib:is-gtype-struct-for="SqlValueBool">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueBit" c:type="VdaSqlValueBit" c:symbol-prefix="sql_value_bit" glib:type-name="VdaSqlValueBit" glib:get-type="vda_sql_value_bit_get_type" glib:type-struct="SqlValueBitIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
	</interface>
	<record name="SqlValueBitIface" c:type="VdaSqlValueBitIface" glib:is-gtype-struct-for="SqlValueBit">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueString" c:type="VdaSqlValueString" c:symbol-prefix="sql_value_string" glib:type-name="VdaSqlValueString" glib:get-type="vda_sql_value_string_get_type" glib:type-struct="SqlValueStringIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
	</interface>
	<record name="SqlValueStringIface" c:type="VdaSqlValueStringIface" glib:is-gtype-struct-for="SqlValueString">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueXml" c:type="VdaSqlValueXml" c:symbol-prefix="sql_value_xml" glib:type-name="VdaSqlValueXml" glib:get-type="vda_sql_value_xml_get_type" glib:type-struct="SqlValueXmlIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueString"/>
		<property name="document">
			<type name="GXml.DomDocument" c:type="GXmlDomDocument*"/>
		</property>
		<method name="get_document" c:identifier="vda_sql_value_xml_get_document">
			<return-value transfer-ownership="none">
				<type name="GXml.DomDocument" c:type="GXmlDomDocument*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueXml" c:type="VdaSqlValueXml*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_document" invoker="get_document">
			<return-value transfer-ownership="none">
				<type name="GXml.DomDocument" c:type="GXmlDomDocument*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueXml" c:type="VdaSqlValueXml*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueXmlIface" c:type="VdaSqlValueXmlIface" glib:is-gtype-struct-for="SqlValueXml">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_document">
			<callback name="get_document" c:type="get_document">
				<return-value transfer-ownership="none">
					<type name="GXml.DomDocument" c:type="GXmlDomDocument*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueXml" c:type="VdaSqlValueXml*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueJson" c:type="VdaSqlValueJson" c:symbol-prefix="sql_value_json" glib:type-name="VdaSqlValueJson" glib:get-type="vda_sql_value_json_get_type" glib:type-struct="SqlValueJsonIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueString"/>
		<property name="document">
			<type name="Json.Node" c:type="JsonNode*"/>
		</property>
		<method name="get_document" c:identifier="vda_sql_value_json_get_document">
			<return-value transfer-ownership="none">
				<type name="Json.Node" c:type="JsonNode*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueJson" c:type="VdaSqlValueJson*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_document" invoker="get_document">
			<return-value transfer-ownership="none">
				<type name="Json.Node" c:type="JsonNode*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueJson" c:type="VdaSqlValueJson*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueJsonIface" c:type="VdaSqlValueJsonIface" glib:is-gtype-struct-for="SqlValueJson">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_document">
			<callback name="get_document" c:type="get_document">
				<return-value transfer-ownership="none">
					<type name="Json.Node" c:type="JsonNode*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueJson" c:type="VdaSqlValueJson*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueText" c:type="VdaSqlValueText" c:symbol-prefix="sql_value_text" glib:type-name="VdaSqlValueText" glib:get-type="vda_sql_value_text_get_type" glib:type-struct="SqlValueTextIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueString"/>
	</interface>
	<record name="SqlValueTextIface" c:type="VdaSqlValueTextIface" glib:is-gtype-struct-for="SqlValueText">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueName" c:type="VdaSqlValueName" c:symbol-prefix="sql_value_name" glib:type-name="VdaSqlValueName" glib:get-type="vda_sql_value_name_get_type" glib:type-struct="SqlValueNameIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueString"/>
	</interface>
	<record name="SqlValueNameIface" c:type="VdaSqlValueNameIface" glib:is-gtype-struct-for="SqlValueName">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueInteger" c:type="VdaSqlValueInteger" c:symbol-prefix="sql_value_integer" glib:type-name="VdaSqlValueInteger" glib:get-type="vda_sql_value_integer_get_type" glib:type-struct="SqlValueIntegerIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
	</interface>
	<record name="SqlValueIntegerIface" c:type="VdaSqlValueIntegerIface" glib:is-gtype-struct-for="SqlValueInteger">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueByte" c:type="VdaSqlValueByte" c:symbol-prefix="sql_value_byte" glib:type-name="VdaSqlValueByte" glib:get-type="vda_sql_value_byte_get_type" glib:type-struct="SqlValueByteIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueInteger"/>
	</interface>
	<record name="SqlValueByteIface" c:type="VdaSqlValueByteIface" glib:is-gtype-struct-for="SqlValueByte">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueInt2" c:type="VdaSqlValueInt2" c:symbol-prefix="sql_value_int2" glib:type-name="VdaSqlValueInt2" glib:get-type="vda_sql_value_int2_get_type" glib:type-struct="SqlValueInt2Iface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueInteger"/>
	</interface>
	<record name="SqlValueInt2Iface" c:type="VdaSqlValueInt2Iface" glib:is-gtype-struct-for="SqlValueInt2">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueInt4" c:type="VdaSqlValueInt4" c:symbol-prefix="sql_value_int4" glib:type-name="VdaSqlValueInt4" glib:get-type="vda_sql_value_int4_get_type" glib:type-struct="SqlValueInt4Iface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueInteger"/>
	</interface>
	<record name="SqlValueInt4Iface" c:type="VdaSqlValueInt4Iface" glib:is-gtype-struct-for="SqlValueInt4">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueInt8" c:type="VdaSqlValueInt8" c:symbol-prefix="sql_value_int8" glib:type-name="VdaSqlValueInt8" glib:get-type="vda_sql_value_int8_get_type" glib:type-struct="SqlValueInt8Iface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueInteger"/>
	</interface>
	<record name="SqlValueInt8Iface" c:type="VdaSqlValueInt8Iface" glib:is-gtype-struct-for="SqlValueInt8">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueUnsignedInteger" c:type="VdaSqlValueUnsignedInteger" c:symbol-prefix="sql_value_unsigned_integer" glib:type-name="VdaSqlValueUnsignedInteger" glib:get-type="vda_sql_value_unsigned_integer_get_type" glib:type-struct="SqlValueUnsignedIntegerIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
	</interface>
	<record name="SqlValueUnsignedIntegerIface" c:type="VdaSqlValueUnsignedIntegerIface" glib:is-gtype-struct-for="SqlValueUnsignedInteger">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueUnsignedByte" c:type="VdaSqlValueUnsignedByte" c:symbol-prefix="sql_value_unsigned_byte" glib:type-name="VdaSqlValueUnsignedByte" glib:get-type="vda_sql_value_unsigned_byte_get_type" glib:type-struct="SqlValueUnsignedByteIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueUnsignedInteger"/>
	</interface>
	<record name="SqlValueUnsignedByteIface" c:type="VdaSqlValueUnsignedByteIface" glib:is-gtype-struct-for="SqlValueUnsignedByte">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueUnsignedInt2" c:type="VdaSqlValueUnsignedInt2" c:symbol-prefix="sql_value_unsigned_int2" glib:type-name="VdaSqlValueUnsignedInt2" glib:get-type="vda_sql_value_unsigned_int2_get_type" glib:type-struct="SqlValueUnsignedInt2Iface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueUnsignedInteger"/>
	</interface>
	<record name="SqlValueUnsignedInt2Iface" c:type="VdaSqlValueUnsignedInt2Iface" glib:is-gtype-struct-for="SqlValueUnsignedInt2">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueUnsignedInt4" c:type="VdaSqlValueUnsignedInt4" c:symbol-prefix="sql_value_unsigned_int4" glib:type-name="VdaSqlValueUnsignedInt4" glib:get-type="vda_sql_value_unsigned_int4_get_type" glib:type-struct="SqlValueUnsignedInt4Iface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueUnsignedInteger"/>
	</interface>
	<record name="SqlValueUnsignedInt4Iface" c:type="VdaSqlValueUnsignedInt4Iface" glib:is-gtype-struct-for="SqlValueUnsignedInt4">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueUnsignedInt8" c:type="VdaSqlValueUnsignedInt8" c:symbol-prefix="sql_value_unsigned_int8" glib:type-name="VdaSqlValueUnsignedInt8" glib:get-type="vda_sql_value_unsigned_int8_get_type" glib:type-struct="SqlValueUnsignedInt8Iface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueUnsignedInteger"/>
	</interface>
	<record name="SqlValueUnsignedInt8Iface" c:type="VdaSqlValueUnsignedInt8Iface" glib:is-gtype-struct-for="SqlValueUnsignedInt8">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueOid" c:type="VdaSqlValueOid" c:symbol-prefix="sql_value_oid" glib:type-name="VdaSqlValueOid" glib:get-type="vda_sql_value_oid_get_type" glib:type-struct="SqlValueOidIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueInteger"/>
	</interface>
	<record name="SqlValueOidIface" c:type="VdaSqlValueOidIface" glib:is-gtype-struct-for="SqlValueOid">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueNumeric" c:type="VdaSqlValueNumeric" c:symbol-prefix="sql_value_numeric" glib:type-name="VdaSqlValueNumeric" glib:get-type="vda_sql_value_numeric_get_type" glib:type-struct="SqlValueNumericIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<method name="set_precision" c:identifier="vda_sql_value_numeric_set_precision">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="p" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_precision" invoker="set_precision">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="p" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_precision" c:identifier="vda_sql_value_numeric_get_precision">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_precision" invoker="get_precision">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format" c:identifier="vda_sql_value_numeric_format">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="format" invoker="format">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="str" transfer-ownership="none">
					<type name="utf8" c:type="const gchar*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_double" c:identifier="vda_sql_value_numeric_get_double">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_double" invoker="get_double">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_double" c:identifier="vda_sql_value_numeric_set_double">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="v" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_double" invoker="set_double">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="v" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_real" c:identifier="vda_sql_value_numeric_get_real">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_real" invoker="get_real">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_real" c:identifier="vda_sql_value_numeric_set_real">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="r" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_real" invoker="set_real">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="r" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="get_imaginary" c:identifier="vda_sql_value_numeric_get_imaginary">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_imaginary" invoker="get_imaginary">
			<return-value transfer-ownership="full">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_imaginary" c:identifier="vda_sql_value_numeric_set_imaginary">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="img" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_imaginary" invoker="set_imaginary">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
				</instance-parameter>
				<parameter name="img" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueNumericIface" c:type="VdaSqlValueNumericIface" glib:is-gtype-struct-for="SqlValueNumeric">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="set_precision">
			<callback name="set_precision" c:type="set_precision">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
					<parameter name="p" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_precision">
			<callback name="get_precision" c:type="get_precision">
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format">
			<callback name="format" c:type="format">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
					<parameter name="str" transfer-ownership="none">
						<type name="utf8" c:type="const gchar*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_double">
			<callback name="get_double" c:type="get_double">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_double">
			<callback name="set_double" c:type="set_double">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
					<parameter name="v" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_real">
			<callback name="get_real" c:type="get_real">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_real">
			<callback name="set_real" c:type="set_real">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
					<parameter name="r" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_imaginary">
			<callback name="get_imaginary" c:type="get_imaginary">
				<return-value transfer-ownership="full">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_imaginary">
			<callback name="set_imaginary" c:type="set_imaginary">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueNumeric" c:type="VdaSqlValueNumeric*"/>
					</instance-parameter>
					<parameter name="img" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueFloat" c:type="VdaSqlValueFloat" c:symbol-prefix="sql_value_float" glib:type-name="VdaSqlValueFloat" glib:get-type="vda_sql_value_float_get_type" glib:type-struct="SqlValueFloatIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueNumeric"/>
		<method name="get_float" c:identifier="vda_sql_value_float_get_float">
			<return-value transfer-ownership="full">
				<type name="gfloat" c:type="gfloat"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueFloat" c:type="VdaSqlValueFloat*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_float" invoker="get_float">
			<return-value transfer-ownership="full">
				<type name="gfloat" c:type="gfloat"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueFloat" c:type="VdaSqlValueFloat*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueFloatIface" c:type="VdaSqlValueFloatIface" glib:is-gtype-struct-for="SqlValueFloat">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_float">
			<callback name="get_float" c:type="get_float">
				<return-value transfer-ownership="full">
					<type name="gfloat" c:type="gfloat"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueFloat" c:type="VdaSqlValueFloat*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueDouble" c:type="VdaSqlValueDouble" c:symbol-prefix="sql_value_double" glib:type-name="VdaSqlValueDouble" glib:get-type="vda_sql_value_double_get_type" glib:type-struct="SqlValueDoubleIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueNumeric"/>
	</interface>
	<record name="SqlValueDoubleIface" c:type="VdaSqlValueDoubleIface" glib:is-gtype-struct-for="SqlValueDouble">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueMoney" c:type="VdaSqlValueMoney" c:symbol-prefix="sql_value_money" glib:type-name="VdaSqlValueMoney" glib:get-type="vda_sql_value_money_get_type" glib:type-struct="SqlValueMoneyIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueNumeric"/>
		<method name="locale" c:identifier="vda_sql_value_money_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="locale" invoker="locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="int_locale" c:identifier="vda_sql_value_money_int_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="int_locale" invoker="int_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="get_int_precision" c:identifier="vda_sql_value_money_get_int_precision">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_int_precision" invoker="get_int_precision">
			<return-value transfer-ownership="full">
				<type name="gint" c:type="gint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_int_precision" c:identifier="vda_sql_value_money_set_int_precision">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
				<parameter name="p" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_int_precision" invoker="set_int_precision">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
				</instance-parameter>
				<parameter name="p" transfer-ownership="none">
					<type name="gint" c:type="gint"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueMoneyIface" c:type="VdaSqlValueMoneyIface" glib:is-gtype-struct-for="SqlValueMoney">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="locale">
			<callback name="locale" c:type="locale">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="int_locale">
			<callback name="int_locale" c:type="int_locale">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_int_precision">
			<callback name="get_int_precision" c:type="get_int_precision">
				<return-value transfer-ownership="full">
					<type name="gint" c:type="gint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_int_precision">
			<callback name="set_int_precision" c:type="set_int_precision">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueMoney" c:type="VdaSqlValueMoney*"/>
					</instance-parameter>
					<parameter name="p" transfer-ownership="none">
						<type name="gint" c:type="gint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueDate" c:type="VdaSqlValueDate" c:symbol-prefix="sql_value_date" glib:type-name="VdaSqlValueDate" glib:get-type="vda_sql_value_date_get_type" glib:type-struct="SqlValueDateIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<method name="get_date" c:identifier="vda_sql_value_date_get_date">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueDate" c:type="VdaSqlValueDate*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="GLib.Date" c:type="GDate*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="get_date" invoker="get_date">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueDate" c:type="VdaSqlValueDate*"/>
				</instance-parameter>
				<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
					<type name="GLib.Date" c:type="GDate*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="set_date" c:identifier="vda_sql_value_date_set_date">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueDate" c:type="VdaSqlValueDate*"/>
				</instance-parameter>
				<parameter name="ts" transfer-ownership="none">
					<type name="GLib.Date" c:type="GDate"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_date" invoker="set_date">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueDate" c:type="VdaSqlValueDate*"/>
				</instance-parameter>
				<parameter name="ts" transfer-ownership="none">
					<type name="GLib.Date" c:type="GDate"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueDateIface" c:type="VdaSqlValueDateIface" glib:is-gtype-struct-for="SqlValueDate">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_date">
			<callback name="get_date" c:type="get_date">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueDate" c:type="VdaSqlValueDate*"/>
					</instance-parameter>
					<parameter name="result" direction="out" transfer-ownership="full" caller-allocates="1">
						<type name="GLib.Date" c:type="GDate*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_date">
			<callback name="set_date" c:type="set_date">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueDate" c:type="VdaSqlValueDate*"/>
					</instance-parameter>
					<parameter name="ts" transfer-ownership="none">
						<type name="GLib.Date" c:type="GDate"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueTimestamp" c:type="VdaSqlValueTimestamp" c:symbol-prefix="sql_value_timestamp" glib:type-name="VdaSqlValueTimestamp" glib:get-type="vda_sql_value_timestamp_get_type" glib:type-struct="SqlValueTimestampIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<method name="format_local" c:identifier="vda_sql_value_timestamp_format_local">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_local" invoker="format_local">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_utc" c:identifier="vda_sql_value_timestamp_format_utc">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_utc" invoker="format_utc">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_locale" c:identifier="vda_sql_value_timestamp_format_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_locale" invoker="format_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_date" c:identifier="vda_sql_value_timestamp_format_date">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_date" invoker="format_date">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_date_locale" c:identifier="vda_sql_value_timestamp_format_date_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_date_locale" invoker="format_date_locale">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_time" c:identifier="vda_sql_value_timestamp_format_time">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_time" invoker="format_time">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_time_local" c:identifier="vda_sql_value_timestamp_format_time_local">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_time_local" invoker="format_time_local">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="format_time_local_ntz" c:identifier="vda_sql_value_timestamp_format_time_local_ntz">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="format_time_local_ntz" invoker="format_time_local_ntz">
			<return-value transfer-ownership="full">
				<type name="utf8" c:type="gchar*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="get_timestamp" c:identifier="vda_sql_value_timestamp_get_timestamp">
			<return-value transfer-ownership="full">
				<type name="GLib.DateTime" c:type="GDateTime*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_timestamp" invoker="get_timestamp">
			<return-value transfer-ownership="full">
				<type name="GLib.DateTime" c:type="GDateTime*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_timestamp" c:identifier="vda_sql_value_timestamp_set_timestamp">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
				<parameter name="ts" transfer-ownership="none">
					<type name="GLib.DateTime" c:type="GDateTime*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_timestamp" invoker="set_timestamp">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
				</instance-parameter>
				<parameter name="ts" transfer-ownership="none">
					<type name="GLib.DateTime" c:type="GDateTime*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueTimestampIface" c:type="VdaSqlValueTimestampIface" glib:is-gtype-struct-for="SqlValueTimestamp">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="format_local">
			<callback name="format_local" c:type="format_local">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_utc">
			<callback name="format_utc" c:type="format_utc">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_locale">
			<callback name="format_locale" c:type="format_locale">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_date">
			<callback name="format_date" c:type="format_date">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_date_locale">
			<callback name="format_date_locale" c:type="format_date_locale">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_time">
			<callback name="format_time" c:type="format_time">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_time_local">
			<callback name="format_time_local" c:type="format_time_local">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="format_time_local_ntz">
			<callback name="format_time_local_ntz" c:type="format_time_local_ntz">
				<return-value transfer-ownership="full">
					<type name="utf8" c:type="gchar*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_timestamp">
			<callback name="get_timestamp" c:type="get_timestamp">
				<return-value transfer-ownership="full">
					<type name="GLib.DateTime" c:type="GDateTime*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_timestamp">
			<callback name="set_timestamp" c:type="set_timestamp">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueTimestamp" c:type="VdaSqlValueTimestamp*"/>
					</instance-parameter>
					<parameter name="ts" transfer-ownership="none">
						<type name="GLib.DateTime" c:type="GDateTime*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueTimestampNtz" c:type="VdaSqlValueTimestampNtz" c:symbol-prefix="sql_value_timestamp_ntz" glib:type-name="VdaSqlValueTimestampNtz" glib:get-type="vda_sql_value_timestamp_ntz_get_type" glib:type-struct="SqlValueTimestampNtzIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueTimestamp"/>
	</interface>
	<record name="SqlValueTimestampNtzIface" c:type="VdaSqlValueTimestampNtzIface" glib:is-gtype-struct-for="SqlValueTimestampNtz">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueTime" c:type="VdaSqlValueTime" c:symbol-prefix="sql_value_time" glib:type-name="VdaSqlValueTime" glib:get-type="vda_sql_value_time_get_type" glib:type-struct="SqlValueTimeIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueTimestamp"/>
	</interface>
	<record name="SqlValueTimeIface" c:type="VdaSqlValueTimeIface" glib:is-gtype-struct-for="SqlValueTime">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueTimeNtz" c:type="VdaSqlValueTimeNtz" c:symbol-prefix="sql_value_time_ntz" glib:type-name="VdaSqlValueTimeNtz" glib:get-type="vda_sql_value_time_ntz_get_type" glib:type-struct="SqlValueTimeNtzIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<prerequisite name="Vda.SqlValueTimestampNtz"/>
	</interface>
	<record name="SqlValueTimeNtzIface" c:type="VdaSqlValueTimeNtzIface" glib:is-gtype-struct-for="SqlValueTimeNtz">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="SqlValueBinary" c:type="VdaSqlValueBinary" c:symbol-prefix="sql_value_binary" glib:type-name="VdaSqlValueBinary" glib:get-type="vda_sql_value_binary_get_type" glib:type-struct="SqlValueBinaryIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<method name="get_bytes" c:identifier="vda_sql_value_binary_get_bytes">
			<return-value transfer-ownership="full">
				<type name="GLib.Bytes" c:type="GBytes*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_bytes" invoker="get_bytes">
			<return-value transfer-ownership="full">
				<type name="GLib.Bytes" c:type="GBytes*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="get_out_stream" c:identifier="vda_sql_value_binary_get_out_stream">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gio.OutputStream" c:type="GOutputStream*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_out_stream" invoker="get_out_stream">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gio.OutputStream" c:type="GOutputStream*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="get_input_stream" c:identifier="vda_sql_value_binary_get_input_stream">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gio.InputStream" c:type="GInputStream*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_input_stream" invoker="get_input_stream">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Gio.InputStream" c:type="GInputStream*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<property name="size">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_size" c:identifier="vda_sql_value_binary_get_size">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_size" invoker="get_size">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueBinaryIface" c:type="VdaSqlValueBinaryIface" glib:is-gtype-struct-for="SqlValueBinary">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_bytes">
			<callback name="get_bytes" c:type="get_bytes">
				<return-value transfer-ownership="full">
					<type name="GLib.Bytes" c:type="GBytes*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_out_stream">
			<callback name="get_out_stream" c:type="get_out_stream">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Gio.OutputStream" c:type="GOutputStream*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_input_stream">
			<callback name="get_input_stream" c:type="get_input_stream">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Gio.InputStream" c:type="GInputStream*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_size">
			<callback name="get_size" c:type="get_size">
				<return-value transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBinary" c:type="VdaSqlValueBinary*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueBlob" c:type="VdaSqlValueBlob" c:symbol-prefix="sql_value_blob" glib:type-name="VdaSqlValueBlob" glib:get-type="vda_sql_value_blob_get_type" glib:type-struct="SqlValueBlobIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValueBinary"/>
		<method name="create" c:identifier="vda_sql_value_blob_create">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
				<parameter name="stream" transfer-ownership="none">
					<type name="Gio.InputStream" c:type="GInputStream*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="create" invoker="create">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
				<parameter name="stream" transfer-ownership="none">
					<type name="Gio.InputStream" c:type="GInputStream*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="delete" c:identifier="vda_sql_value_blob_delete">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="delete" invoker="delete">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="write" c:identifier="vda_sql_value_blob_write">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="write" invoker="write">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="read" c:identifier="vda_sql_value_blob_read">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="read" invoker="read">
			<return-value transfer-ownership="full">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
				<parameter name="file" transfer-ownership="none">
					<type name="Gio.File" c:type="GFile*"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="connection">
			<type name="Vda.Connection" c:type="VdaConnection*"/>
		</property>
		<method name="get_connection" c:identifier="vda_sql_value_blob_get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_connection" invoker="get_connection">
			<return-value transfer-ownership="none">
				<type name="Vda.Connection" c:type="VdaConnection*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueBlobIface" c:type="VdaSqlValueBlobIface" glib:is-gtype-struct-for="SqlValueBlob">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="create">
			<callback name="create" c:type="create">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
					</instance-parameter>
					<parameter name="stream" transfer-ownership="none">
						<type name="Gio.InputStream" c:type="GInputStream*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="delete">
			<callback name="delete" c:type="delete">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="write">
			<callback name="write" c:type="write">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
					</instance-parameter>
					<parameter name="file" transfer-ownership="none">
						<type name="Gio.File" c:type="GFile*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="read">
			<callback name="read" c:type="read">
				<return-value transfer-ownership="full">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
					</instance-parameter>
					<parameter name="file" transfer-ownership="none">
						<type name="Gio.File" c:type="GFile*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_connection">
			<callback name="get_connection" c:type="get_connection">
				<return-value transfer-ownership="none">
					<type name="Vda.Connection" c:type="VdaConnection*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBlob" c:type="VdaSqlValueBlob*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueBlobOid" c:type="VdaSqlValueBlobOid" c:symbol-prefix="sql_value_blob_oid" glib:type-name="VdaSqlValueBlobOid" glib:get-type="vda_sql_value_blob_oid_get_type" glib:type-struct="SqlValueBlobOidIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValueBlob"/>
		<property name="identification">
			<type name="guint" c:type="guint"/>
		</property>
		<method name="get_identification" c:identifier="vda_sql_value_blob_oid_get_identification">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlobOid" c:type="VdaSqlValueBlobOid*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_identification" invoker="get_identification">
			<return-value transfer-ownership="none">
				<type name="guint" c:type="guint"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueBlobOid" c:type="VdaSqlValueBlobOid*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueBlobOidIface" c:type="VdaSqlValueBlobOidIface" glib:is-gtype-struct-for="SqlValueBlobOid">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_identification">
			<callback name="get_identification" c:type="get_identification">
				<return-value transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueBlobOid" c:type="VdaSqlValueBlobOid*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint" c:symbol-prefix="sql_value_geometric_point" glib:type-name="VdaSqlValueGeometricPoint" glib:get-type="vda_sql_value_geometric_point_get_type" glib:type-struct="SqlValueGeometricPointIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<property name="x" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_x" c:identifier="vda_sql_value_geometric_point_get_x">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_x" invoker="get_x">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_x" c:identifier="vda_sql_value_geometric_point_set_x">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_x" invoker="set_x">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</virtual-method>
		<property name="y" writable="1">
			<type name="gdouble" c:type="gdouble"/>
		</property>
		<method name="get_y" c:identifier="vda_sql_value_geometric_point_get_y">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_y" invoker="get_y">
			<return-value transfer-ownership="none">
				<type name="gdouble" c:type="gdouble"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_y" c:identifier="vda_sql_value_geometric_point_set_y">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_y" invoker="set_y">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueGeometricPointIface" c:type="VdaSqlValueGeometricPointIface" glib:is-gtype-struct-for="SqlValueGeometricPoint">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_x">
			<callback name="get_x" c:type="get_x">
				<return-value transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_x">
			<callback name="set_x" c:type="set_x">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="get_y">
			<callback name="get_y" c:type="get_y">
				<return-value transfer-ownership="none">
					<type name="gdouble" c:type="gdouble"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_y">
			<callback name="set_y" c:type="set_y">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueGeometricPoint" c:type="VdaSqlValueGeometricPoint*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="gdouble" c:type="gdouble"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="SqlValueMathExp" c:type="VdaSqlValueMathExp" c:symbol-prefix="sql_value_math_exp" glib:type-name="VdaSqlValueMathExp" glib:get-type="vda_sql_value_math_exp_get_type" glib:type-struct="SqlValueMathExpIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.SqlValue"/>
		<property name="math" writable="1">
			<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
		</property>
		<method name="get_math" c:identifier="vda_sql_value_math_exp_get_math">
			<return-value transfer-ownership="none">
				<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMathExp" c:type="VdaSqlValueMathExp*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="get_math" invoker="get_math">
			<return-value transfer-ownership="none">
				<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMathExp" c:type="VdaSqlValueMathExp*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="set_math" c:identifier="vda_sql_value_math_exp_set_math">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMathExp" c:type="VdaSqlValueMathExp*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="set_math" invoker="set_math">
			<return-value transfer-ownership="none">
				<type name="none" c:type="void"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.SqlValueMathExp" c:type="VdaSqlValueMathExp*"/>
				</instance-parameter>
				<parameter name="value" transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="SqlValueMathExpIface" c:type="VdaSqlValueMathExpIface" glib:is-gtype-struct-for="SqlValueMathExp">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="get_math">
			<callback name="get_math" c:type="get_math">
				<return-value transfer-ownership="none">
					<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueMathExp" c:type="VdaSqlValueMathExp*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="set_math">
			<callback name="set_math" c:type="set_math">
				<return-value transfer-ownership="none">
					<type name="none" c:type="void"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.SqlValueMathExp" c:type="VdaSqlValueMathExp*"/>
					</instance-parameter>
					<parameter name="value" transfer-ownership="none">
						<type name="GCalc.MathEquationManager" c:type="GCalcMathEquationManager*"/>
					</parameter>
				</parameters>
			</callback>
		</field>
	</record>
	<interface name="TableModel" c:type="VdaTableModel" c:symbol-prefix="table_model" glib:type-name="VdaTableModel" glib:get-type="vda_table_model_get_type" glib:type-struct="TableModelIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Gio.ListModel"/>
		<prerequisite name="Vda.Result"/>
	</interface>
	<record name="TableModelIface" c:type="VdaTableModelIface" glib:is-gtype-struct-for="TableModel">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
	</record>
	<interface name="TableModelSequential" c:type="VdaTableModelSequential" c:symbol-prefix="table_model_sequential" glib:type-name="VdaTableModelSequential" glib:get-type="vda_table_model_sequential_get_type" glib:type-struct="TableModelSequentialIface">
		<prerequisite name="GObject.Object"/>
		<prerequisite name="Vda.Result"/>
		<method name="current" c:identifier="vda_table_model_sequential_current">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.RowModel" c:type="VdaRowModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="current" invoker="current">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.RowModel" c:type="VdaRowModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="next" c:identifier="vda_table_model_sequential_next" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="next" invoker="next" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="back" c:identifier="vda_table_model_sequential_back" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="back" invoker="back" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
		<method name="move" c:identifier="vda_table_model_sequential_move" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
				<parameter name="direction" transfer-ownership="none">
					<type name="Vda.MoveDirection" c:type="VdaMoveDirection"/>
				</parameter>
				<parameter name="relative" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</method>
		<virtual-method name="move" invoker="move" throws="1">
			<return-value transfer-ownership="full">
				<type name="gboolean" c:type="gboolean"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
				<parameter name="direction" transfer-ownership="none">
					<type name="Vda.MoveDirection" c:type="VdaMoveDirection"/>
				</parameter>
				<parameter name="relative" transfer-ownership="none">
					<type name="guint" c:type="guint"/>
				</parameter>
			</parameters>
		</virtual-method>
		<method name="copy_current" c:identifier="vda_table_model_sequential_copy_current">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.RowModel" c:type="VdaRowModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</method>
		<virtual-method name="copy_current" invoker="copy_current">
			<return-value transfer-ownership="full" allow-none="1">
				<type name="Vda.RowModel" c:type="VdaRowModel*"/>
			</return-value>
			<parameters>
				<instance-parameter name="self" transfer-ownership="none">
					<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
				</instance-parameter>
			</parameters>
		</virtual-method>
	</interface>
	<record name="TableModelSequentialIface" c:type="VdaTableModelSequentialIface" glib:is-gtype-struct-for="TableModelSequential">
		<field name="parent_iface" readable="0" private="1">
			<type name="GObject.TypeInterface" c:type="GTypeInterface"/>
		</field>
		<field name="current">
			<callback name="current" c:type="current">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="next">
			<callback name="next" c:type="next" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="back">
			<callback name="back" c:type="back" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
		<field name="move">
			<callback name="move" c:type="move" throws="1">
				<return-value transfer-ownership="full">
					<type name="gboolean" c:type="gboolean"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
					</instance-parameter>
					<parameter name="direction" transfer-ownership="none">
						<type name="Vda.MoveDirection" c:type="VdaMoveDirection"/>
					</parameter>
					<parameter name="relative" transfer-ownership="none">
						<type name="guint" c:type="guint"/>
					</parameter>
				</parameters>
			</callback>
		</field>
		<field name="copy_current">
			<callback name="copy_current" c:type="copy_current">
				<return-value transfer-ownership="full" allow-none="1">
					<type name="Vda.RowModel" c:type="VdaRowModel*"/>
				</return-value>
				<parameters>
					<instance-parameter name="self" transfer-ownership="none">
						<type name="Vda.TableModelSequential" c:type="VdaTableModelSequential*"/>
					</instance-parameter>
				</parameters>
			</callback>
		</field>
	</record>
</namespace>
</repository>
